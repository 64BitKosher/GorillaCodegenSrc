// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: BuilderTableSubMesh
#include "GlobalNamespace/BuilderTableSubMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderTableDataRenderData
  class BuilderTableDataRenderData;
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
  // Forward declaring type: BuilderTableDataRenderIndirectBatch
  class BuilderTableDataRenderIndirectBatch;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeList`1<T>
  template<typename T>
  struct NativeList_1;
}
// Forward declaring namespace: UnityEngine::Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccessArray
  struct TransformAccessArray;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderRenderer
  class BuilderRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderRenderer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderRenderer*, "", "BuilderRenderer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3B
  #pragma pack(push, 1)
  // Autogenerated type: BuilderRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh
    struct SetupInstanceDataForMesh;
    public:
    // public UnityEngine.Material sharedMaterialBase
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* sharedMaterialBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material sharedMaterialIndirectBase
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* sharedMaterialIndirectBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private BuilderTableDataRenderData renderData
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::BuilderTableDataRenderData* renderData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderTableDataRenderData*) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x38
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean built
    // Size: 0x1
    // Offset: 0x39
    bool built;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean showing
    // Size: 0x1
    // Offset: 0x3A
    bool showing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.String texturePropName
    static constexpr const char* texturePropName = "_BaseMap";
    // Get static field: static private System.String texturePropName
    static ::StringW _get_texturePropName();
    // Set static field: static private System.String texturePropName
    static void _set_texturePropName(::StringW value);
    // static field const value: static private System.String textureArrayPropName
    static constexpr const char* textureArrayPropName = "_BaseMapArray";
    // Get static field: static private System.String textureArrayPropName
    static ::StringW _get_textureArrayPropName();
    // Set static field: static private System.String textureArrayPropName
    static void _set_textureArrayPropName(::StringW value);
    // static field const value: static private System.String textureArrayIndexPropName
    static constexpr const char* textureArrayIndexPropName = "_BaseMapArrayIndex";
    // Get static field: static private System.String textureArrayIndexPropName
    static ::StringW _get_textureArrayIndexPropName();
    // Set static field: static private System.String textureArrayIndexPropName
    static void _set_textureArrayIndexPropName(::StringW value);
    // static field const value: static private System.String transformMatrixPropName
    static constexpr const char* transformMatrixPropName = "_TransformMatrix";
    // Get static field: static private System.String transformMatrixPropName
    static ::StringW _get_transformMatrixPropName();
    // Set static field: static private System.String transformMatrixPropName
    static void _set_transformMatrixPropName(::StringW value);
    // static field const value: static private System.String texIndexPropName
    static constexpr const char* texIndexPropName = "_TexIndex";
    // Get static field: static private System.String texIndexPropName
    static ::StringW _get_texIndexPropName();
    // Set static field: static private System.String texIndexPropName
    static void _set_texIndexPropName(::StringW value);
    // static field const value: static private System.String tintPropName
    static constexpr const char* tintPropName = "_Tint";
    // Get static field: static private System.String tintPropName
    static ::StringW _get_tintPropName();
    // Set static field: static private System.String tintPropName
    static void _set_tintPropName(::StringW value);
    // static field const value: static public System.Int32 MAX_STATIC_INSTANCES
    static constexpr const int MAX_STATIC_INSTANCES = 2048;
    // Get static field: static public System.Int32 MAX_STATIC_INSTANCES
    static int _get_MAX_STATIC_INSTANCES();
    // Set static field: static public System.Int32 MAX_STATIC_INSTANCES
    static void _set_MAX_STATIC_INSTANCES(int value);
    // static field const value: static public System.Int32 MAX_DYNAMIC_INSTANCES
    static constexpr const int MAX_DYNAMIC_INSTANCES = 2048;
    // Get static field: static public System.Int32 MAX_DYNAMIC_INSTANCES
    static int _get_MAX_DYNAMIC_INSTANCES();
    // Set static field: static public System.Int32 MAX_DYNAMIC_INSTANCES
    static void _set_MAX_DYNAMIC_INSTANCES(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> meshRenderers
    static ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* _get_meshRenderers();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> meshRenderers
    static void _set_meshRenderers(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* value);
    // static field const value: static private System.Int32 MAX_TOTAL_VERTS
    static constexpr const int MAX_TOTAL_VERTS = 65536;
    // Get static field: static private System.Int32 MAX_TOTAL_VERTS
    static int _get_MAX_TOTAL_VERTS();
    // Set static field: static private System.Int32 MAX_TOTAL_VERTS
    static void _set_MAX_TOTAL_VERTS(int value);
    // static field const value: static private System.Int32 MAX_TOTAL_TRIS
    static constexpr const int MAX_TOTAL_TRIS = 65536;
    // Get static field: static private System.Int32 MAX_TOTAL_TRIS
    static int _get_MAX_TOTAL_TRIS();
    // Set static field: static private System.Int32 MAX_TOTAL_TRIS
    static void _set_MAX_TOTAL_TRIS(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> verticesAll
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* _get_verticesAll();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> verticesAll
    static void _set_verticesAll(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> normalsAll
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* _get_normalsAll();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> normalsAll
    static void _set_normalsAll(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1All
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* _get_uv1All();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1All
    static void _set_uv1All(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> trianglesAll
    static ::System::Collections::Generic::List_1<int>* _get_trianglesAll();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> trianglesAll
    static void _set_trianglesAll(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* _get_vertices();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    static void _set_vertices(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* _get_normals();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    static void _set_normals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* _get_uv1();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1
    static void _set_uv1(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> triangles
    static ::System::Collections::Generic::List_1<int>* _get_triangles();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> triangles
    static void _set_triangles(::System::Collections::Generic::List_1<int>* value);
    // Get instance field reference: public UnityEngine.Material sharedMaterialBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_sharedMaterialBase();
    // Get instance field reference: public UnityEngine.Material sharedMaterialIndirectBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_sharedMaterialIndirectBase();
    // Get instance field reference: private BuilderTableDataRenderData renderData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderTableDataRenderData*& dyn_renderData();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: private System.Boolean built
    [[deprecated("Use field access instead!")]] bool& dyn_built();
    // Get instance field reference: private System.Boolean showing
    [[deprecated("Use field access instead!")]] bool& dyn_showing();
    // private System.Void Awake()
    // Offset: 0x26E9DE4
    void Awake();
    // public System.Void InitIfNeeded()
    // Offset: 0x26E9DE8
    void InitIfNeeded();
    // public System.Void Show(System.Boolean show)
    // Offset: 0x26EA1E0
    void Show(bool show);
    // public System.Void BuildRenderer(System.Collections.Generic.List`1<BuilderPiece> piecePrefabs)
    // Offset: 0x26EA1EC
    void BuildRenderer(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* piecePrefabs);
    // public System.Void LateUpdate()
    // Offset: 0x26EB2B4
    void LateUpdate();
    // public System.Void AddPrefab(BuilderPiece prefab)
    // Offset: 0x26EA3FC
    void AddPrefab(::GlobalNamespace::BuilderPiece* prefab);
    // private System.Boolean AddMaterial(UnityEngine.Material material)
    // Offset: 0x26EB55C
    bool AddMaterial(::UnityEngine::Material* material);
    // public System.Void BuildSharedMaterial()
    // Offset: 0x26EA978
    void BuildSharedMaterial();
    // public System.Void BuildSharedMesh()
    // Offset: 0x26EAD1C
    void BuildSharedMesh();
    // public System.Void BuildBuffer()
    // Offset: 0x26EB19C
    void BuildBuffer();
    // static public System.Void BuildBatch(BuilderTableDataRenderIndirectBatch indirectBatch, System.Int32 meshCount, System.Int32 maxInstances)
    // Offset: 0x26EB8D8
    static void BuildBatch(::GlobalNamespace::BuilderTableDataRenderIndirectBatch* indirectBatch, int meshCount, int maxInstances);
    // public System.Void DestroyBuffer()
    // Offset: 0x26EBC08
    void DestroyBuffer();
    // static public System.Void DestroyBatch(BuilderTableDataRenderIndirectBatch indirectBatch)
    // Offset: 0x26EBC7C
    static void DestroyBatch(::GlobalNamespace::BuilderTableDataRenderIndirectBatch* indirectBatch);
    // public System.Void RenderIndirect()
    // Offset: 0x26EB2CC
    void RenderIndirect();
    // static private System.Void SetupIndirectBatchArgs(BuilderTableDataRenderIndirectBatch indirectBatch, Unity.Collections.NativeList`1<BuilderTableSubMesh> subMeshes)
    // Offset: 0x26EBD94
    static void SetupIndirectBatchArgs(::GlobalNamespace::BuilderTableDataRenderIndirectBatch* indirectBatch, ::Unity::Collections::NativeList_1<::GlobalNamespace::BuilderTableSubMesh> subMeshes);
    // private System.Void RenderIndirectBatch(BuilderTableDataRenderIndirectBatch indirectBatch)
    // Offset: 0x26EBEDC
    void RenderIndirectBatch(::GlobalNamespace::BuilderTableDataRenderIndirectBatch* indirectBatch);
    // public System.Void AddPiece(BuilderPiece piece)
    // Offset: 0x26EC230
    void AddPiece(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void RemovePiece(BuilderPiece piece)
    // Offset: 0x26EC9A8
    void RemovePiece(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void ChangePieceIndirectMaterial(BuilderPiece piece, System.Collections.Generic.List`1<UnityEngine.MeshRenderer> targetRenderers, UnityEngine.Material targetMaterial)
    // Offset: 0x26ED124
    void ChangePieceIndirectMaterial(::GlobalNamespace::BuilderPiece* piece, ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* targetRenderers, ::UnityEngine::Material* targetMaterial);
    // static public System.Void RemoveAt(UnityEngine.Jobs.TransformAccessArray a, System.Int32 i)
    // Offset: 0x26ED0A4
    static void RemoveAt(::UnityEngine::Jobs::TransformAccessArray a, int i);
    // public System.Void SetPieceTint(BuilderPiece piece, System.Single tint)
    // Offset: 0x26ED7A0
    void SetPieceTint(::GlobalNamespace::BuilderPiece* piece, float tint);
    // public System.Void .ctor()
    // Offset: 0x26EDC98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26EDCA0
    static void _cctor();
  }; // BuilderRenderer
  #pragma pack(pop)
  static check_size<sizeof(BuilderRenderer), 58 + sizeof(bool)> __GlobalNamespace_BuilderRendererSizeCheck;
  static_assert(sizeof(BuilderRenderer) == 0x3B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::InitIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(bool)>(&GlobalNamespace::BuilderRenderer::Show)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::BuildRenderer
// Il2CppName: BuildRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*)>(&GlobalNamespace::BuilderRenderer::BuildRenderer)> {
  static const MethodInfo* get() {
    static auto* piecePrefabs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BuilderPiece")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "BuildRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piecePrefabs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::AddPrefab
// Il2CppName: AddPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderRenderer::AddPrefab)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "AddPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::AddMaterial
// Il2CppName: AddMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BuilderRenderer::*)(::UnityEngine::Material*)>(&GlobalNamespace::BuilderRenderer::AddMaterial)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "AddMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::BuildSharedMaterial
// Il2CppName: BuildSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::BuildSharedMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "BuildSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::BuildSharedMesh
// Il2CppName: BuildSharedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::BuildSharedMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "BuildSharedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::BuildBuffer
// Il2CppName: BuildBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::BuildBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "BuildBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::BuildBatch
// Il2CppName: BuildBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*, int, int)>(&GlobalNamespace::BuilderRenderer::BuildBatch)> {
  static const MethodInfo* get() {
    static auto* indirectBatch = &::il2cpp_utils::GetClassFromName("", "BuilderTableDataRenderIndirectBatch")->byval_arg;
    static auto* meshCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxInstances = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "BuildBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indirectBatch, meshCount, maxInstances});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::DestroyBuffer
// Il2CppName: DestroyBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::DestroyBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "DestroyBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::DestroyBatch
// Il2CppName: DestroyBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*)>(&GlobalNamespace::BuilderRenderer::DestroyBatch)> {
  static const MethodInfo* get() {
    static auto* indirectBatch = &::il2cpp_utils::GetClassFromName("", "BuilderTableDataRenderIndirectBatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "DestroyBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indirectBatch});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::RenderIndirect
// Il2CppName: RenderIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)()>(&GlobalNamespace::BuilderRenderer::RenderIndirect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "RenderIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::SetupIndirectBatchArgs
// Il2CppName: SetupIndirectBatchArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*, ::Unity::Collections::NativeList_1<::GlobalNamespace::BuilderTableSubMesh>)>(&GlobalNamespace::BuilderRenderer::SetupIndirectBatchArgs)> {
  static const MethodInfo* get() {
    static auto* indirectBatch = &::il2cpp_utils::GetClassFromName("", "BuilderTableDataRenderIndirectBatch")->byval_arg;
    static auto* subMeshes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BuilderTableSubMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "SetupIndirectBatchArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indirectBatch, subMeshes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::RenderIndirectBatch
// Il2CppName: RenderIndirectBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*)>(&GlobalNamespace::BuilderRenderer::RenderIndirectBatch)> {
  static const MethodInfo* get() {
    static auto* indirectBatch = &::il2cpp_utils::GetClassFromName("", "BuilderTableDataRenderIndirectBatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "RenderIndirectBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indirectBatch});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::AddPiece
// Il2CppName: AddPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderRenderer::AddPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "AddPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::RemovePiece
// Il2CppName: RemovePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderRenderer::RemovePiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "RemovePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::ChangePieceIndirectMaterial
// Il2CppName: ChangePieceIndirectMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderPiece*, ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*, ::UnityEngine::Material*)>(&GlobalNamespace::BuilderRenderer::ChangePieceIndirectMaterial)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* targetRenderers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")})->byval_arg;
    static auto* targetMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "ChangePieceIndirectMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, targetRenderers, targetMaterial});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::RemoveAt
// Il2CppName: RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Jobs::TransformAccessArray, int)>(&GlobalNamespace::BuilderRenderer::RemoveAt)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccessArray")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::SetPieceTint
// Il2CppName: SetPieceTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::*)(::GlobalNamespace::BuilderPiece*, float)>(&GlobalNamespace::BuilderRenderer::SetPieceTint)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* tint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), "SetPieceTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, tint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BuilderRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
