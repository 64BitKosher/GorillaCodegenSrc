// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SizeLayerChanger
  class SizeLayerChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SizeLayerChanger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeLayerChanger*, "", "SizeLayerChanger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2F
  #pragma pack(push, 1)
  // Autogenerated type: SizeLayerChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class SizeLayerChanger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single maxScale
    // Size: 0x4
    // Offset: 0x20
    float maxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minScale
    // Size: 0x4
    // Offset: 0x24
    float minScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isAssurance
    // Size: 0x1
    // Offset: 0x28
    bool isAssurance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerA
    // Size: 0x1
    // Offset: 0x29
    bool affectLayerA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerB
    // Size: 0x1
    // Offset: 0x2A
    bool affectLayerB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerC
    // Size: 0x1
    // Offset: 0x2B
    bool affectLayerC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerD
    // Size: 0x1
    // Offset: 0x2C
    bool affectLayerD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean applyOnTriggerEnter
    // Size: 0x1
    // Offset: 0x2D
    bool applyOnTriggerEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean applyOnTriggerExit
    // Size: 0x1
    // Offset: 0x2E
    bool applyOnTriggerExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Single maxScale
    [[deprecated("Use field access instead!")]] float& dyn_maxScale();
    // Get instance field reference: public System.Single minScale
    [[deprecated("Use field access instead!")]] float& dyn_minScale();
    // Get instance field reference: public System.Boolean isAssurance
    [[deprecated("Use field access instead!")]] bool& dyn_isAssurance();
    // Get instance field reference: public System.Boolean affectLayerA
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerA();
    // Get instance field reference: public System.Boolean affectLayerB
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerB();
    // Get instance field reference: public System.Boolean affectLayerC
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerC();
    // Get instance field reference: public System.Boolean affectLayerD
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerD();
    // Get instance field reference: private System.Boolean applyOnTriggerEnter
    [[deprecated("Use field access instead!")]] bool& dyn_applyOnTriggerEnter();
    // Get instance field reference: private System.Boolean applyOnTriggerExit
    [[deprecated("Use field access instead!")]] bool& dyn_applyOnTriggerExit();
    // public System.Int32 get_SizeLayerMask()
    // Offset: 0x272B604
    int get_SizeLayerMask();
    // private System.Void Awake()
    // Offset: 0x272B63C
    void Awake();
    // public System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x272B654
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x272B898
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x272B9F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SizeLayerChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SizeLayerChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SizeLayerChanger*, creationType>()));
    }
  }; // SizeLayerChanger
  #pragma pack(pop)
  static check_size<sizeof(SizeLayerChanger), 46 + sizeof(bool)> __GlobalNamespace_SizeLayerChangerSizeCheck;
  static_assert(sizeof(SizeLayerChanger) == 0x2F);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerChanger::get_SizeLayerMask
// Il2CppName: get_SizeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SizeLayerChanger::*)()>(&GlobalNamespace::SizeLayerChanger::get_SizeLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeLayerChanger*), "get_SizeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerChanger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeLayerChanger::*)()>(&GlobalNamespace::SizeLayerChanger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeLayerChanger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerChanger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeLayerChanger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SizeLayerChanger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeLayerChanger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerChanger::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeLayerChanger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SizeLayerChanger::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeLayerChanger*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
