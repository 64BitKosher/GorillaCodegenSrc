// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: XSceneRefTarget
  class XSceneRefTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::XSceneRefTarget);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::XSceneRefTarget*, "", "XSceneRefTarget");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: XSceneRefTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class XSceneRefTarget : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 UniqueID
    // Size: 0x4
    // Offset: 0x20
    int UniqueID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastRegisteredID
    // Size: 0x4
    // Offset: 0x24
    int lastRegisteredID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.DateTime epoch
    static ::System::DateTime _get_epoch();
    // Set static field: static private System.DateTime epoch
    static void _set_epoch(::System::DateTime value);
    // Get static field: static private System.Int32 lastAssignedID
    static int _get_lastAssignedID();
    // Set static field: static private System.Int32 lastAssignedID
    static void _set_lastAssignedID(int value);
    // Get instance field reference: public System.Int32 UniqueID
    [[deprecated("Use field access instead!")]] int& dyn_UniqueID();
    // Get instance field reference: private System.Int32 lastRegisteredID
    [[deprecated("Use field access instead!")]] int& dyn_lastRegisteredID();
    // private System.Void Awake()
    // Offset: 0x289CA64
    void Awake();
    // private System.Void Reset()
    // Offset: 0x289CB14
    void Reset();
    // private System.Void OnValidate()
    // Offset: 0x289CC84
    void OnValidate();
    // public System.Void Register(System.Boolean force)
    // Offset: 0x289CA6C
    void Register(bool force);
    // private System.Void OnDestroy()
    // Offset: 0x289CCF4
    void OnDestroy();
    // private System.Void AssignNewID()
    // Offset: 0x289CD50
    void AssignNewID();
    // static public System.Int32 CreateNewID()
    // Offset: 0x289CB6C
    static int CreateNewID();
    // public System.Void .ctor()
    // Offset: 0x289CDB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XSceneRefTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XSceneRefTarget*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x289CDC0
    static void _cctor();
  }; // XSceneRefTarget
  #pragma pack(pop)
  static check_size<sizeof(XSceneRefTarget), 36 + sizeof(int)> __GlobalNamespace_XSceneRefTargetSizeCheck;
  static_assert(sizeof(XSceneRefTarget) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)()>(&GlobalNamespace::XSceneRefTarget::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)()>(&GlobalNamespace::XSceneRefTarget::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)()>(&GlobalNamespace::XSceneRefTarget::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)(bool)>(&GlobalNamespace::XSceneRefTarget::Register)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)()>(&GlobalNamespace::XSceneRefTarget::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::AssignNewID
// Il2CppName: AssignNewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XSceneRefTarget::*)()>(&GlobalNamespace::XSceneRefTarget::AssignNewID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "AssignNewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::CreateNewID
// Il2CppName: CreateNewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::XSceneRefTarget::CreateNewID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), "CreateNewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::XSceneRefTarget::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::XSceneRefTarget::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XSceneRefTarget*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
