// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MetroSpotlight
  class MetroSpotlight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MetroBlimp
  class MetroBlimp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MetroBlimp);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MetroBlimp*, "", "MetroBlimp");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x65
  #pragma pack(push, 1)
  // Autogenerated type: MetroBlimp
  // [TokenAttribute] Offset: FFFFFFFF
  class MetroBlimp : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public MetroSpotlight spotLightLeft
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MetroSpotlight* spotLightLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MetroSpotlight*) == 0x8);
    // public MetroSpotlight spotLightRight
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MetroSpotlight* spotLightRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MetroSpotlight*) == 0x8);
    // public UnityEngine.BoxCollider topCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::BoxCollider* topCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public UnityEngine.Material blimpMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* blimpMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Renderer blimpRenderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Renderer* blimpRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Single ascendSpeed
    // Size: 0x4
    // Offset: 0x48
    float ascendSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single descendSpeed
    // Size: 0x4
    // Offset: 0x4C
    float descendSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single descendOffset
    // Size: 0x4
    // Offset: 0x50
    float descendOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single descendReactionTime
    // Size: 0x4
    // Offset: 0x54
    float descendReactionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startLocalHeight
    // Size: 0x4
    // Offset: 0x58
    float startLocalHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _topStayTime
    // Size: 0x4
    // Offset: 0x5C
    float topStayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _numHandsOnBlimp
    // Size: 0x4
    // Offset: 0x60
    float numHandsOnBlimp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _lowering
    // Size: 0x1
    // Offset: 0x64
    bool lowering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.String _INNER_GLOW
    static constexpr const char* _INNER_GLOW = "_INNER_GLOW";
    // Get static field: static private System.String _INNER_GLOW
    static ::StringW _get__INNER_GLOW();
    // Set static field: static private System.String _INNER_GLOW
    static void _set__INNER_GLOW(::StringW value);
    // Get instance field reference: public MetroSpotlight spotLightLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MetroSpotlight*& dyn_spotLightLeft();
    // Get instance field reference: public MetroSpotlight spotLightRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MetroSpotlight*& dyn_spotLightRight();
    // Get instance field reference: public UnityEngine.BoxCollider topCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_topCollider();
    // Get instance field reference: public UnityEngine.Material blimpMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_blimpMaterial();
    // Get instance field reference: public UnityEngine.Renderer blimpRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_blimpRenderer();
    // Get instance field reference: public System.Single ascendSpeed
    [[deprecated("Use field access instead!")]] float& dyn_ascendSpeed();
    // Get instance field reference: public System.Single descendSpeed
    [[deprecated("Use field access instead!")]] float& dyn_descendSpeed();
    // Get instance field reference: public System.Single descendOffset
    [[deprecated("Use field access instead!")]] float& dyn_descendOffset();
    // Get instance field reference: public System.Single descendReactionTime
    [[deprecated("Use field access instead!")]] float& dyn_descendReactionTime();
    // Get instance field reference: private System.Single _startLocalHeight
    [[deprecated("Use field access instead!")]] float& dyn__startLocalHeight();
    // Get instance field reference: private System.Single _topStayTime
    [[deprecated("Use field access instead!")]] float& dyn__topStayTime();
    // Get instance field reference: private System.Single _numHandsOnBlimp
    [[deprecated("Use field access instead!")]] float& dyn__numHandsOnBlimp();
    // Get instance field reference: private System.Boolean _lowering
    [[deprecated("Use field access instead!")]] bool& dyn__lowering();
    // private System.Void Awake()
    // Offset: 0x2694294
    void Awake();
    // public System.Void Tick()
    // Offset: 0x26942C0
    void Tick();
    // static private System.Boolean IsPlayerHand(UnityEngine.Collider c)
    // Offset: 0x26945A4
    static bool IsPlayerHand(::UnityEngine::Collider* c);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x26945C8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x26945F4
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x2694620
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetroBlimp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetroBlimp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetroBlimp*, creationType>()));
    }
  }; // MetroBlimp
  #pragma pack(pop)
  static check_size<sizeof(MetroBlimp), 100 + sizeof(bool)> __GlobalNamespace_MetroBlimpSizeCheck;
  static_assert(sizeof(MetroBlimp) == 0x65);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MetroBlimp::*)()>(&GlobalNamespace::MetroBlimp::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroBlimp*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MetroBlimp::*)()>(&GlobalNamespace::MetroBlimp::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroBlimp*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::IsPlayerHand
// Il2CppName: IsPlayerHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Collider*)>(&GlobalNamespace::MetroBlimp::IsPlayerHand)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroBlimp*), "IsPlayerHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MetroBlimp::*)(::UnityEngine::Collider*)>(&GlobalNamespace::MetroBlimp::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroBlimp*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MetroBlimp::*)(::UnityEngine::Collider*)>(&GlobalNamespace::MetroBlimp::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroBlimp*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroBlimp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
