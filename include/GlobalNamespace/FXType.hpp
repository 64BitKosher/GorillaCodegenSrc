// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FXType
  struct FXType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FXType, "", "FXType");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FXType
  // [TokenAttribute] Offset: FFFFFFFF
  struct FXType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FXType
    constexpr FXType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FXType BalloonPop
    static constexpr const int BalloonPop = 0;
    // Get static field: static public FXType BalloonPop
    static ::GlobalNamespace::FXType _get_BalloonPop();
    // Set static field: static public FXType BalloonPop
    static void _set_BalloonPop(::GlobalNamespace::FXType value);
    // static field const value: static public FXType PlayHandTap
    static constexpr const int PlayHandTap = 1;
    // Get static field: static public FXType PlayHandTap
    static ::GlobalNamespace::FXType _get_PlayHandTap();
    // Set static field: static public FXType PlayHandTap
    static void _set_PlayHandTap(::GlobalNamespace::FXType value);
    // static field const value: static public FXType HWIngredients
    static constexpr const int HWIngredients = 2;
    // Get static field: static public FXType HWIngredients
    static ::GlobalNamespace::FXType _get_HWIngredients();
    // Set static field: static public FXType HWIngredients
    static void _set_HWIngredients(::GlobalNamespace::FXType value);
    // static field const value: static public FXType Impact
    static constexpr const int Impact = 3;
    // Get static field: static public FXType Impact
    static ::GlobalNamespace::FXType _get_Impact();
    // Set static field: static public FXType Impact
    static void _set_Impact(::GlobalNamespace::FXType value);
    // static field const value: static public FXType Projectile
    static constexpr const int Projectile = 4;
    // Get static field: static public FXType Projectile
    static ::GlobalNamespace::FXType _get_Projectile();
    // Set static field: static public FXType Projectile
    static void _set_Projectile(::GlobalNamespace::FXType value);
    // static field const value: static public FXType Length
    static constexpr const int Length = 5;
    // Get static field: static public FXType Length
    static ::GlobalNamespace::FXType _get_Length();
    // Set static field: static public FXType Length
    static void _set_Length(::GlobalNamespace::FXType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FXType
  #pragma pack(pop)
  static check_size<sizeof(FXType), 0 + sizeof(int)> __GlobalNamespace_FXTypeSizeCheck;
  static_assert(sizeof(FXType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
