// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRCameraRig);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCameraRig*, "", "OVRCameraRig");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x180
  #pragma pack(push, 1)
  // Autogenerated type: OVRCameraRig
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class OVRCameraRig : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform <trackingSpace>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* trackingSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftEyeAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* leftEyeAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <centerEyeAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* centerEyeAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightEyeAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* rightEyeAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftHandAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* leftHandAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightHandAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* rightHandAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftHandAnchorDetached>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* leftHandAnchorDetached;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightHandAnchorDetached>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* rightHandAnchorDetached;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftControllerInHandAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* leftControllerInHandAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftHandOnControllerAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* leftHandOnControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightControllerInHandAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* rightControllerInHandAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightHandOnControllerAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* rightHandOnControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <leftControllerAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* leftControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <rightControllerAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* rightControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <trackerAnchor>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* trackerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Action`1<OVRCameraRig> UpdatedAnchors
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_1<::GlobalNamespace::OVRCameraRig*>* UpdatedAnchors;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::OVRCameraRig*>*) == 0x8);
    // private System.Action`1<UnityEngine.Transform> TrackingSpaceChanged
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action_1<::UnityEngine::Transform*>* TrackingSpaceChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Transform*>*) == 0x8);
    // public System.Boolean usePerEyeCameras
    // Size: 0x1
    // Offset: 0xA8
    bool usePerEyeCameras;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useFixedUpdateForTracking
    // Size: 0x1
    // Offset: 0xA9
    bool useFixedUpdateForTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableEyeAnchorCameras
    // Size: 0x1
    // Offset: 0xAA
    bool disableEyeAnchorCameras;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _skipUpdate
    // Size: 0x1
    // Offset: 0xAB
    bool skipUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: skipUpdate and: trackingSpaceName
    char __padding20[0x4] = {};
    // protected readonly System.String trackingSpaceName
    // Size: 0x8
    // Offset: 0xB0
    ::StringW trackingSpaceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String trackerAnchorName
    // Size: 0x8
    // Offset: 0xB8
    ::StringW trackerAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftEyeAnchorName
    // Size: 0x8
    // Offset: 0xC0
    ::StringW leftEyeAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String centerEyeAnchorName
    // Size: 0x8
    // Offset: 0xC8
    ::StringW centerEyeAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightEyeAnchorName
    // Size: 0x8
    // Offset: 0xD0
    ::StringW rightEyeAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftHandAnchorName
    // Size: 0x8
    // Offset: 0xD8
    ::StringW leftHandAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightHandAnchorName
    // Size: 0x8
    // Offset: 0xE0
    ::StringW rightHandAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftControllerAnchorName
    // Size: 0x8
    // Offset: 0xE8
    ::StringW leftControllerAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightControllerAnchorName
    // Size: 0x8
    // Offset: 0xF0
    ::StringW rightControllerAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftHandAnchorDetachedName
    // Size: 0x8
    // Offset: 0xF8
    ::StringW leftHandAnchorDetachedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightHandAnchorDetachedName
    // Size: 0x8
    // Offset: 0x100
    ::StringW rightHandAnchorDetachedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftControllerInHandAnchorName
    // Size: 0x8
    // Offset: 0x108
    ::StringW leftControllerInHandAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String leftHandOnControllerAnchorName
    // Size: 0x8
    // Offset: 0x110
    ::StringW leftHandOnControllerAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightControllerInHandAnchorName
    // Size: 0x8
    // Offset: 0x118
    ::StringW rightControllerInHandAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected readonly System.String rightHandOnControllerAnchorName
    // Size: 0x8
    // Offset: 0x120
    ::StringW rightHandOnControllerAnchorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected UnityEngine.Camera _centerEyeCamera
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Camera* centerEyeCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected UnityEngine.Camera _leftEyeCamera
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Camera* leftEyeCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected UnityEngine.Camera _rightEyeCamera
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Camera* rightEyeCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Matrix4x4 _previousTrackingSpaceTransform
    // Size: 0x40
    // Offset: 0x140
    ::UnityEngine::Matrix4x4 previousTrackingSpaceTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get instance field reference: private UnityEngine.Transform <trackingSpace>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$trackingSpace$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftEyeAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftEyeAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <centerEyeAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$centerEyeAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightEyeAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightEyeAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftHandAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftHandAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightHandAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightHandAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftHandAnchorDetached>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftHandAnchorDetached$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightHandAnchorDetached>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightHandAnchorDetached$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftControllerInHandAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftControllerInHandAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftHandOnControllerAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftHandOnControllerAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightControllerInHandAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightControllerInHandAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightHandOnControllerAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightHandOnControllerAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <leftControllerAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$leftControllerAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <rightControllerAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$rightControllerAnchor$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <trackerAnchor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$trackerAnchor$k__BackingField();
    // Get instance field reference: private System.Action`1<OVRCameraRig> UpdatedAnchors
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::OVRCameraRig*>*& dyn_UpdatedAnchors();
    // Get instance field reference: private System.Action`1<UnityEngine.Transform> TrackingSpaceChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Transform*>*& dyn_TrackingSpaceChanged();
    // Get instance field reference: public System.Boolean usePerEyeCameras
    [[deprecated("Use field access instead!")]] bool& dyn_usePerEyeCameras();
    // Get instance field reference: public System.Boolean useFixedUpdateForTracking
    [[deprecated("Use field access instead!")]] bool& dyn_useFixedUpdateForTracking();
    // Get instance field reference: public System.Boolean disableEyeAnchorCameras
    [[deprecated("Use field access instead!")]] bool& dyn_disableEyeAnchorCameras();
    // Get instance field reference: protected System.Boolean _skipUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__skipUpdate();
    // Get instance field reference: protected readonly System.String trackingSpaceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_trackingSpaceName();
    // Get instance field reference: protected readonly System.String trackerAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_trackerAnchorName();
    // Get instance field reference: protected readonly System.String leftEyeAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftEyeAnchorName();
    // Get instance field reference: protected readonly System.String centerEyeAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_centerEyeAnchorName();
    // Get instance field reference: protected readonly System.String rightEyeAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightEyeAnchorName();
    // Get instance field reference: protected readonly System.String leftHandAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftHandAnchorName();
    // Get instance field reference: protected readonly System.String rightHandAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightHandAnchorName();
    // Get instance field reference: protected readonly System.String leftControllerAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftControllerAnchorName();
    // Get instance field reference: protected readonly System.String rightControllerAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightControllerAnchorName();
    // Get instance field reference: protected readonly System.String leftHandAnchorDetachedName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftHandAnchorDetachedName();
    // Get instance field reference: protected readonly System.String rightHandAnchorDetachedName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightHandAnchorDetachedName();
    // Get instance field reference: protected readonly System.String leftControllerInHandAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftControllerInHandAnchorName();
    // Get instance field reference: protected readonly System.String leftHandOnControllerAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftHandOnControllerAnchorName();
    // Get instance field reference: protected readonly System.String rightControllerInHandAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightControllerInHandAnchorName();
    // Get instance field reference: protected readonly System.String rightHandOnControllerAnchorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightHandOnControllerAnchorName();
    // Get instance field reference: protected UnityEngine.Camera _centerEyeCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__centerEyeCamera();
    // Get instance field reference: protected UnityEngine.Camera _leftEyeCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__leftEyeCamera();
    // Get instance field reference: protected UnityEngine.Camera _rightEyeCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__rightEyeCamera();
    // Get instance field reference: private UnityEngine.Matrix4x4 _previousTrackingSpaceTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn__previousTrackingSpaceTransform();
    // public UnityEngine.Camera get_leftEyeCamera()
    // Offset: 0x48B30CC
    ::UnityEngine::Camera* get_leftEyeCamera();
    // public UnityEngine.Camera get_rightEyeCamera()
    // Offset: 0x48B30E8
    ::UnityEngine::Camera* get_rightEyeCamera();
    // public UnityEngine.Transform get_trackingSpace()
    // Offset: 0x48B3104
    ::UnityEngine::Transform* get_trackingSpace();
    // private System.Void set_trackingSpace(UnityEngine.Transform value)
    // Offset: 0x48B310C
    void set_trackingSpace(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftEyeAnchor()
    // Offset: 0x48B3114
    ::UnityEngine::Transform* get_leftEyeAnchor();
    // private System.Void set_leftEyeAnchor(UnityEngine.Transform value)
    // Offset: 0x48B311C
    void set_leftEyeAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_centerEyeAnchor()
    // Offset: 0x48B3124
    ::UnityEngine::Transform* get_centerEyeAnchor();
    // private System.Void set_centerEyeAnchor(UnityEngine.Transform value)
    // Offset: 0x48B312C
    void set_centerEyeAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightEyeAnchor()
    // Offset: 0x48B3134
    ::UnityEngine::Transform* get_rightEyeAnchor();
    // private System.Void set_rightEyeAnchor(UnityEngine.Transform value)
    // Offset: 0x48B313C
    void set_rightEyeAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftHandAnchor()
    // Offset: 0x48B3144
    ::UnityEngine::Transform* get_leftHandAnchor();
    // private System.Void set_leftHandAnchor(UnityEngine.Transform value)
    // Offset: 0x48B314C
    void set_leftHandAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightHandAnchor()
    // Offset: 0x48B3154
    ::UnityEngine::Transform* get_rightHandAnchor();
    // private System.Void set_rightHandAnchor(UnityEngine.Transform value)
    // Offset: 0x48B315C
    void set_rightHandAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftHandAnchorDetached()
    // Offset: 0x48B3164
    ::UnityEngine::Transform* get_leftHandAnchorDetached();
    // private System.Void set_leftHandAnchorDetached(UnityEngine.Transform value)
    // Offset: 0x48B316C
    void set_leftHandAnchorDetached(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightHandAnchorDetached()
    // Offset: 0x48B3174
    ::UnityEngine::Transform* get_rightHandAnchorDetached();
    // private System.Void set_rightHandAnchorDetached(UnityEngine.Transform value)
    // Offset: 0x48B317C
    void set_rightHandAnchorDetached(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftControllerInHandAnchor()
    // Offset: 0x48B3184
    ::UnityEngine::Transform* get_leftControllerInHandAnchor();
    // private System.Void set_leftControllerInHandAnchor(UnityEngine.Transform value)
    // Offset: 0x48B318C
    void set_leftControllerInHandAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftHandOnControllerAnchor()
    // Offset: 0x48B3194
    ::UnityEngine::Transform* get_leftHandOnControllerAnchor();
    // private System.Void set_leftHandOnControllerAnchor(UnityEngine.Transform value)
    // Offset: 0x48B319C
    void set_leftHandOnControllerAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightControllerInHandAnchor()
    // Offset: 0x48B31A4
    ::UnityEngine::Transform* get_rightControllerInHandAnchor();
    // private System.Void set_rightControllerInHandAnchor(UnityEngine.Transform value)
    // Offset: 0x48B31AC
    void set_rightControllerInHandAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightHandOnControllerAnchor()
    // Offset: 0x48B31B4
    ::UnityEngine::Transform* get_rightHandOnControllerAnchor();
    // private System.Void set_rightHandOnControllerAnchor(UnityEngine.Transform value)
    // Offset: 0x48B31BC
    void set_rightHandOnControllerAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_leftControllerAnchor()
    // Offset: 0x48B31C4
    ::UnityEngine::Transform* get_leftControllerAnchor();
    // private System.Void set_leftControllerAnchor(UnityEngine.Transform value)
    // Offset: 0x48B31CC
    void set_leftControllerAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rightControllerAnchor()
    // Offset: 0x48B31D4
    ::UnityEngine::Transform* get_rightControllerAnchor();
    // private System.Void set_rightControllerAnchor(UnityEngine.Transform value)
    // Offset: 0x48B31DC
    void set_rightControllerAnchor(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_trackerAnchor()
    // Offset: 0x48B31E4
    ::UnityEngine::Transform* get_trackerAnchor();
    // private System.Void set_trackerAnchor(UnityEngine.Transform value)
    // Offset: 0x48B31EC
    void set_trackerAnchor(::UnityEngine::Transform* value);
    // public System.Void add_UpdatedAnchors(System.Action`1<OVRCameraRig> value)
    // Offset: 0x48B31F4
    void add_UpdatedAnchors(::System::Action_1<::GlobalNamespace::OVRCameraRig*>* value);
    // public System.Void remove_UpdatedAnchors(System.Action`1<OVRCameraRig> value)
    // Offset: 0x48B32A4
    void remove_UpdatedAnchors(::System::Action_1<::GlobalNamespace::OVRCameraRig*>* value);
    // public System.Void add_TrackingSpaceChanged(System.Action`1<UnityEngine.Transform> value)
    // Offset: 0x48B3354
    void add_TrackingSpaceChanged(::System::Action_1<::UnityEngine::Transform*>* value);
    // public System.Void remove_TrackingSpaceChanged(System.Action`1<UnityEngine.Transform> value)
    // Offset: 0x48B3404
    void remove_TrackingSpaceChanged(::System::Action_1<::UnityEngine::Transform*>* value);
    // protected System.Void Awake()
    // Offset: 0x48B34B4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x48B34CC
    void Start();
    // protected System.Void FixedUpdate()
    // Offset: 0x48B3578
    void FixedUpdate();
    // protected System.Void Update()
    // Offset: 0x48B3598
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x48B35BC
    void OnDestroy();
    // protected System.Void UpdateAnchors(System.Boolean updateEyeAnchors, System.Boolean updateHandAnchors)
    // Offset: 0x48B3650
    void UpdateAnchors(bool updateEyeAnchors, bool updateHandAnchors);
    // protected System.Void OnBeforeRenderCallback()
    // Offset: 0x48B4CDC
    void OnBeforeRenderCallback();
    // protected System.Void CheckForTrackingSpaceChangesAndRaiseEvent()
    // Offset: 0x48B4DB0
    void CheckForTrackingSpaceChangesAndRaiseEvent();
    // protected System.Void RaiseUpdatedAnchorsEvent()
    // Offset: 0x48B4EB8
    void RaiseUpdatedAnchorsEvent();
    // public System.Void EnsureGameObjectIntegrity()
    // Offset: 0x48B4ED8
    void EnsureGameObjectIntegrity();
    // protected UnityEngine.Transform ConfigureAnchor(UnityEngine.Transform root, System.String name)
    // Offset: 0x48B5A1C
    ::UnityEngine::Transform* ConfigureAnchor(::UnityEngine::Transform* root, ::StringW name);
    // public UnityEngine.Matrix4x4 ComputeTrackReferenceMatrix()
    // Offset: 0x48B5C78
    ::UnityEngine::Matrix4x4 ComputeTrackReferenceMatrix();
    // private System.Void CheckForAnchorsInParent()
    // Offset: 0x48B5F38
    void CheckForAnchorsInParent();
    // public System.Void .ctor()
    // Offset: 0x48B6018
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCameraRig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCameraRig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCameraRig*, creationType>()));
    }
    // private System.Void <CheckForAnchorsInParent>g__Check|105_0(UnityEngine.Transform node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void $CheckForAnchorsInParent$g__Check_105_0(::UnityEngine::Transform* node) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::MonoBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCameraRig::<CheckForAnchorsInParent>g__Check|105_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CheckForAnchorsInParent>g__Check|105_0", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, node);
    }
  }; // OVRCameraRig
  #pragma pack(pop)
  static check_size<sizeof(OVRCameraRig), 320 + sizeof(::UnityEngine::Matrix4x4)> __GlobalNamespace_OVRCameraRigSizeCheck;
  static_assert(sizeof(OVRCameraRig) == 0x180);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftEyeCamera
// Il2CppName: get_leftEyeCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftEyeCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftEyeCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightEyeCamera
// Il2CppName: get_rightEyeCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightEyeCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightEyeCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_trackingSpace
// Il2CppName: get_trackingSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_trackingSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_trackingSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_trackingSpace
// Il2CppName: set_trackingSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_trackingSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_trackingSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftEyeAnchor
// Il2CppName: get_leftEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftEyeAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftEyeAnchor
// Il2CppName: set_leftEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftEyeAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_centerEyeAnchor
// Il2CppName: get_centerEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_centerEyeAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_centerEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_centerEyeAnchor
// Il2CppName: set_centerEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_centerEyeAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_centerEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightEyeAnchor
// Il2CppName: get_rightEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightEyeAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightEyeAnchor
// Il2CppName: set_rightEyeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightEyeAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightEyeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftHandAnchor
// Il2CppName: get_leftHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftHandAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftHandAnchor
// Il2CppName: set_leftHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftHandAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightHandAnchor
// Il2CppName: get_rightHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightHandAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightHandAnchor
// Il2CppName: set_rightHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightHandAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftHandAnchorDetached
// Il2CppName: get_leftHandAnchorDetached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftHandAnchorDetached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftHandAnchorDetached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftHandAnchorDetached
// Il2CppName: set_leftHandAnchorDetached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftHandAnchorDetached)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftHandAnchorDetached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightHandAnchorDetached
// Il2CppName: get_rightHandAnchorDetached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightHandAnchorDetached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightHandAnchorDetached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightHandAnchorDetached
// Il2CppName: set_rightHandAnchorDetached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightHandAnchorDetached)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightHandAnchorDetached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftControllerInHandAnchor
// Il2CppName: get_leftControllerInHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftControllerInHandAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftControllerInHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftControllerInHandAnchor
// Il2CppName: set_leftControllerInHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftControllerInHandAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftControllerInHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftHandOnControllerAnchor
// Il2CppName: get_leftHandOnControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftHandOnControllerAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftHandOnControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftHandOnControllerAnchor
// Il2CppName: set_leftHandOnControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftHandOnControllerAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftHandOnControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightControllerInHandAnchor
// Il2CppName: get_rightControllerInHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightControllerInHandAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightControllerInHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightControllerInHandAnchor
// Il2CppName: set_rightControllerInHandAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightControllerInHandAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightControllerInHandAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightHandOnControllerAnchor
// Il2CppName: get_rightHandOnControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightHandOnControllerAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightHandOnControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightHandOnControllerAnchor
// Il2CppName: set_rightHandOnControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightHandOnControllerAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightHandOnControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_leftControllerAnchor
// Il2CppName: get_leftControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_leftControllerAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_leftControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_leftControllerAnchor
// Il2CppName: set_leftControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_leftControllerAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_leftControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_rightControllerAnchor
// Il2CppName: get_rightControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_rightControllerAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_rightControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_rightControllerAnchor
// Il2CppName: set_rightControllerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_rightControllerAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_rightControllerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::get_trackerAnchor
// Il2CppName: get_trackerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::get_trackerAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "get_trackerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::set_trackerAnchor
// Il2CppName: set_trackerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRCameraRig::set_trackerAnchor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "set_trackerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::add_UpdatedAnchors
// Il2CppName: add_UpdatedAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::System::Action_1<::GlobalNamespace::OVRCameraRig*>*)>(&GlobalNamespace::OVRCameraRig::add_UpdatedAnchors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRCameraRig")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "add_UpdatedAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::remove_UpdatedAnchors
// Il2CppName: remove_UpdatedAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::System::Action_1<::GlobalNamespace::OVRCameraRig*>*)>(&GlobalNamespace::OVRCameraRig::remove_UpdatedAnchors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRCameraRig")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "remove_UpdatedAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::add_TrackingSpaceChanged
// Il2CppName: add_TrackingSpaceChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::System::Action_1<::UnityEngine::Transform*>*)>(&GlobalNamespace::OVRCameraRig::add_TrackingSpaceChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "add_TrackingSpaceChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::remove_TrackingSpaceChanged
// Il2CppName: remove_TrackingSpaceChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(::System::Action_1<::UnityEngine::Transform*>*)>(&GlobalNamespace::OVRCameraRig::remove_TrackingSpaceChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "remove_TrackingSpaceChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::UpdateAnchors
// Il2CppName: UpdateAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)(bool, bool)>(&GlobalNamespace::OVRCameraRig::UpdateAnchors)> {
  static const MethodInfo* get() {
    static auto* updateEyeAnchors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateHandAnchors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "UpdateAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateEyeAnchors, updateHandAnchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::OnBeforeRenderCallback
// Il2CppName: OnBeforeRenderCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::OnBeforeRenderCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "OnBeforeRenderCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::CheckForTrackingSpaceChangesAndRaiseEvent
// Il2CppName: CheckForTrackingSpaceChangesAndRaiseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::CheckForTrackingSpaceChangesAndRaiseEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "CheckForTrackingSpaceChangesAndRaiseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::RaiseUpdatedAnchorsEvent
// Il2CppName: RaiseUpdatedAnchorsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::RaiseUpdatedAnchorsEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "RaiseUpdatedAnchorsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::EnsureGameObjectIntegrity
// Il2CppName: EnsureGameObjectIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::EnsureGameObjectIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "EnsureGameObjectIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::ConfigureAnchor
// Il2CppName: ConfigureAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRCameraRig::*)(::UnityEngine::Transform*, ::StringW)>(&GlobalNamespace::OVRCameraRig::ConfigureAnchor)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "ConfigureAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, name});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::ComputeTrackReferenceMatrix
// Il2CppName: ComputeTrackReferenceMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::ComputeTrackReferenceMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "ComputeTrackReferenceMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::CheckForAnchorsInParent
// Il2CppName: CheckForAnchorsInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraRig::*)()>(&GlobalNamespace::OVRCameraRig::CheckForAnchorsInParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraRig*), "CheckForAnchorsInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraRig::$CheckForAnchorsInParent$g__Check_105_0
// Il2CppName: <CheckForAnchorsInParent>g__Check|105_0
// Cannot write MetadataGetter for generic methods!
