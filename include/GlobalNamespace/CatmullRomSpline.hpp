// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CatmullRomSpline
  class CatmullRomSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CatmullRomSpline);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CatmullRomSpline*, "", "CatmullRomSpline");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: CatmullRomSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class CatmullRomSpline : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform[] controlPointTransforms
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> controlPointTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Transform debugTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* debugTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Matrix4x4> controlPointsTransformationMatricies
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>* controlPointsTransformationMatricies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*) == 0x8);
    // public System.Single testFloat
    // Size: 0x4
    // Offset: 0x40
    float testFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform[] controlPointTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_controlPointTransforms();
    // Get instance field reference: public UnityEngine.Transform debugTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_debugTransform();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_controlPoints();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Matrix4x4> controlPointsTransformationMatricies
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*& dyn_controlPointsTransformationMatricies();
    // Get instance field reference: public System.Single testFloat
    [[deprecated("Use field access instead!")]] float& dyn_testFloat();
    // private System.Void RefreshControlPoints()
    // Offset: 0x277C530
    void RefreshControlPoints();
    // private System.Void Awake()
    // Offset: 0x277C74C
    void Awake();
    // static public UnityEngine.Vector3 Evaluate(System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints, System.Single t)
    // Offset: 0x277C750
    static ::UnityEngine::Vector3 Evaluate(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, float t);
    // public UnityEngine.Vector3 Evaluate(System.Single t)
    // Offset: 0x277CB7C
    ::UnityEngine::Vector3 Evaluate(float t);
    // static public System.Single GetClosestEvaluationOnSpline(System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints, UnityEngine.Vector3 worldPoint, out UnityEngine.Vector3 linePoint)
    // Offset: 0x277CB84
    static float GetClosestEvaluationOnSpline(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, ::UnityEngine::Vector3 worldPoint, ByRef<::UnityEngine::Vector3> linePoint);
    // public System.Single GetClosestEvaluationOnSpline(UnityEngine.Vector3 worldPoint, out UnityEngine.Vector3 linePoint)
    // Offset: 0x277CE58
    float GetClosestEvaluationOnSpline(::UnityEngine::Vector3 worldPoint, ByRef<::UnityEngine::Vector3> linePoint);
    // static public UnityEngine.Vector3 GetForwardTangent(System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints, System.Single t, System.Single step)
    // Offset: 0x277CE60
    static ::UnityEngine::Vector3 GetForwardTangent(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, float t, float step);
    // public UnityEngine.Vector3 GetForwardTangent(System.Single t, System.Single step)
    // Offset: 0x277CFD8
    ::UnityEngine::Vector3 GetForwardTangent(float t, float step);
    // static private UnityEngine.Vector3 CatmullRom(System.Single t, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3)
    // Offset: 0x277CA74
    static ::UnityEngine::Vector3 CatmullRom(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3);
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x277D150
    void OnDrawGizmosSelected();
    // static public UnityEngine.Matrix4x4 CatmullRom(System.Single t, UnityEngine.Matrix4x4 p0, UnityEngine.Matrix4x4 p1, UnityEngine.Matrix4x4 p2, UnityEngine.Matrix4x4 p3)
    // Offset: 0x277D8DC
    static ::UnityEngine::Matrix4x4 CatmullRom(float t, ::UnityEngine::Matrix4x4 p0, ::UnityEngine::Matrix4x4 p1, ::UnityEngine::Matrix4x4 p2, ::UnityEngine::Matrix4x4 p3);
    // static public UnityEngine.Matrix4x4 Evaluate(System.Collections.Generic.List`1<UnityEngine.Matrix4x4> controlPoints, System.Single t)
    // Offset: 0x277D67C
    static ::UnityEngine::Matrix4x4 Evaluate(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>* controlPoints, float t);
    // public System.Void .ctor()
    // Offset: 0x277DAC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CatmullRomSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CatmullRomSpline*, creationType>()));
    }
  }; // CatmullRomSpline
  #pragma pack(pop)
  static check_size<sizeof(CatmullRomSpline), 64 + sizeof(float)> __GlobalNamespace_CatmullRomSplineSizeCheck;
  static_assert(sizeof(CatmullRomSpline) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::RefreshControlPoints
// Il2CppName: RefreshControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CatmullRomSpline::*)()>(&GlobalNamespace::CatmullRomSpline::RefreshControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "RefreshControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CatmullRomSpline::*)()>(&GlobalNamespace::CatmullRomSpline::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float)>(&GlobalNamespace::CatmullRomSpline::Evaluate)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::CatmullRomSpline::*)(float)>(&GlobalNamespace::CatmullRomSpline::Evaluate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline
// Il2CppName: GetClosestEvaluationOnSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "GetClosestEvaluationOnSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints, worldPoint, linePoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline
// Il2CppName: GetClosestEvaluationOnSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CatmullRomSpline::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "GetClosestEvaluationOnSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint, linePoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::GetForwardTangent
// Il2CppName: GetForwardTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float, float)>(&GlobalNamespace::CatmullRomSpline::GetForwardTangent)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "GetForwardTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints, t, step});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::GetForwardTangent
// Il2CppName: GetForwardTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::CatmullRomSpline::*)(float, float)>(&GlobalNamespace::CatmullRomSpline::GetForwardTangent)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "GetForwardTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, step});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::CatmullRomSpline::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CatmullRomSpline::*)()>(&GlobalNamespace::CatmullRomSpline::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(float, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4)>(&GlobalNamespace::CatmullRomSpline::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*, float)>(&GlobalNamespace::CatmullRomSpline::Evaluate)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")})->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CatmullRomSpline*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CatmullRomSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
