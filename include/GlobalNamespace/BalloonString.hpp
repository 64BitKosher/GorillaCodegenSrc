// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BalloonString
  class BalloonString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BalloonString);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BalloonString*, "", "BalloonString");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: BalloonString
  // [TokenAttribute] Offset: FFFFFFFF
  class BalloonString : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform startPositionXf
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* startPositionXf;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform endPositionXf
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* endPositionXf;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Int32 numSegments
    // Size: 0x4
    // Offset: 0x38
    int numSegments;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean endPositionFixed
    // Size: 0x1
    // Offset: 0x3C
    bool endPositionFixed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: endPositionFixed and: lineRenderer
    char __padding4[0x3] = {};
    // private UnityEngine.LineRenderer lineRenderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform startPositionXf
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_startPositionXf();
    // Get instance field reference: public UnityEngine.Transform endPositionXf
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_endPositionXf();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_vertices();
    // Get instance field reference: public System.Int32 numSegments
    [[deprecated("Use field access instead!")]] int& dyn_numSegments();
    // Get instance field reference: private System.Boolean endPositionFixed
    [[deprecated("Use field access instead!")]] bool& dyn_endPositionFixed();
    // Get instance field reference: private UnityEngine.LineRenderer lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_lineRenderer();
    // private System.Void Awake()
    // Offset: 0x296675C
    void Awake();
    // private System.Void UpdateDynamics()
    // Offset: 0x2966AB8
    void UpdateDynamics();
    // private System.Void UpdateRenderPositions()
    // Offset: 0x2966B58
    void UpdateRenderPositions();
    // private System.Void LateUpdate()
    // Offset: 0x2966BD8
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x2966C80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BalloonString* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BalloonString*, creationType>()));
    }
  }; // BalloonString
  #pragma pack(pop)
  static check_size<sizeof(BalloonString), 64 + sizeof(::UnityEngine::LineRenderer*)> __GlobalNamespace_BalloonStringSizeCheck;
  static_assert(sizeof(BalloonString) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BalloonString::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BalloonString::*)()>(&GlobalNamespace::BalloonString::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BalloonString*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BalloonString::UpdateDynamics
// Il2CppName: UpdateDynamics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BalloonString::*)()>(&GlobalNamespace::BalloonString::UpdateDynamics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BalloonString*), "UpdateDynamics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BalloonString::UpdateRenderPositions
// Il2CppName: UpdateRenderPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BalloonString::*)()>(&GlobalNamespace::BalloonString::UpdateRenderPositions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BalloonString*), "UpdateRenderPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BalloonString::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BalloonString::*)()>(&GlobalNamespace::BalloonString::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BalloonString*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BalloonString::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
