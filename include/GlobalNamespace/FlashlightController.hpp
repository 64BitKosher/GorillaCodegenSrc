// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GrabObject
  class GrabObject;
  // Forward declaring type: OVRSkeleton
  class OVRSkeleton;
  // Forward declaring type: OVRHand
  class OVRHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: TextMesh
  class TextMesh;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlashlightController
  class FlashlightController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlashlightController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlashlightController*, "", "FlashlightController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x75
  #pragma pack(push, 1)
  // Autogenerated type: FlashlightController
  // [TokenAttribute] Offset: FFFFFFFF
  class FlashlightController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FlashlightController::$FadeLighting$d__17
    class $FadeLighting$d__17;
    public:
    // public UnityEngine.Light sceneLight
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Light* sceneLight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Light*) == 0x8);
    // public UnityEngine.Transform flashlightRoot
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* flashlightRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 localPosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion localRotation
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Quaternion localRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: localRotation and: infoText
    char __padding3[0x4] = {};
    // public UnityEngine.TextMesh infoText
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::TextMesh* infoText;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextMesh*) == 0x8);
    // private GrabObject externalController
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::GrabObject* externalController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GrabObject*) == 0x8);
    // private OVRSkeleton[] skeletons
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GlobalNamespace::OVRSkeleton*> skeletons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRSkeleton*>) == 0x8);
    // private OVRHand[] hands
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::GlobalNamespace::OVRHand*> hands;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRHand*>) == 0x8);
    // private System.Int32 handIndex
    // Size: 0x4
    // Offset: 0x70
    int handIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean pinching
    // Size: 0x1
    // Offset: 0x74
    bool pinching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Light sceneLight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn_sceneLight();
    // Get instance field reference: public UnityEngine.Transform flashlightRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_flashlightRoot();
    // Get instance field reference: private UnityEngine.Vector3 localPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localPosition();
    // Get instance field reference: private UnityEngine.Quaternion localRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_localRotation();
    // Get instance field reference: public UnityEngine.TextMesh infoText
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& dyn_infoText();
    // Get instance field reference: private GrabObject externalController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GrabObject*& dyn_externalController();
    // Get instance field reference: private OVRSkeleton[] skeletons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRSkeleton*>& dyn_skeletons();
    // Get instance field reference: private OVRHand[] hands
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRHand*>& dyn_hands();
    // Get instance field reference: private System.Int32 handIndex
    [[deprecated("Use field access instead!")]] int& dyn_handIndex();
    // Get instance field reference: private System.Boolean pinching
    [[deprecated("Use field access instead!")]] bool& dyn_pinching();
    // private System.Void Start()
    // Offset: 0x2932024
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x2932304
    void LateUpdate();
    // private System.Void FindHands()
    // Offset: 0x29325F0
    void FindHands();
    // private System.Void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
    // Offset: 0x2932918
    void AlignWithHand(::GlobalNamespace::OVRHand* hand, ::GlobalNamespace::OVRSkeleton* skeleton);
    // private System.Void AlignWithController(OVRInput/Controller controller)
    // Offset: 0x2932BEC
    void AlignWithController(::GlobalNamespace::OVRInput::Controller controller);
    // public System.Void Grab(OVRInput/Controller grabHand)
    // Offset: 0x2932CD4
    void Grab(::GlobalNamespace::OVRInput::Controller grabHand);
    // public System.Void Release()
    // Offset: 0x2932E64
    void Release();
    // private System.Collections.IEnumerator FadeLighting(UnityEngine.Color newColor, System.Single sceneLightIntensity, System.Single fadeTime)
    // Offset: 0x2932DBC
    ::System::Collections::IEnumerator* FadeLighting(::UnityEngine::Color newColor, float sceneLightIntensity, float fadeTime);
    // public System.Void .ctor()
    // Offset: 0x2932F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlashlightController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlashlightController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlashlightController*, creationType>()));
    }
  }; // FlashlightController
  #pragma pack(pop)
  static check_size<sizeof(FlashlightController), 116 + sizeof(bool)> __GlobalNamespace_FlashlightControllerSizeCheck;
  static_assert(sizeof(FlashlightController) == 0x75);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)()>(&GlobalNamespace::FlashlightController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)()>(&GlobalNamespace::FlashlightController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::FindHands
// Il2CppName: FindHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)()>(&GlobalNamespace::FlashlightController::FindHands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "FindHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::AlignWithHand
// Il2CppName: AlignWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)(::GlobalNamespace::OVRHand*, ::GlobalNamespace::OVRSkeleton*)>(&GlobalNamespace::FlashlightController::AlignWithHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRHand")->byval_arg;
    static auto* skeleton = &::il2cpp_utils::GetClassFromName("", "OVRSkeleton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "AlignWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, skeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::AlignWithController
// Il2CppName: AlignWithController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::FlashlightController::AlignWithController)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "AlignWithController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::FlashlightController::Grab)> {
  static const MethodInfo* get() {
    static auto* grabHand = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlashlightController::*)()>(&GlobalNamespace::FlashlightController::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::FadeLighting
// Il2CppName: FadeLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::FlashlightController::*)(::UnityEngine::Color, float, float)>(&GlobalNamespace::FlashlightController::FadeLighting)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* sceneLightIntensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlashlightController*), "FadeLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor, sceneLightIntensity, fadeTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlashlightController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
