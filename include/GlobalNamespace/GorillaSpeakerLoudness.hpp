// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.IDynamicFloat
#include "GorillaTag/IDynamicFloat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: SpeakerVoiceToLoudness
  class SpeakerVoiceToLoudness;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Speaker
  class Speaker;
  // Forward declaring type: Recorder
  class Recorder;
}
// Forward declaring namespace: GorillaTag::Audio
namespace GorillaTag::Audio {
  // Forward declaring type: VoiceToLoudness
  class VoiceToLoudness;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaSpeakerLoudness
  class GorillaSpeakerLoudness;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaSpeakerLoudness);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaSpeakerLoudness*, "", "GorillaSpeakerLoudness");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6E
  #pragma pack(push, 1)
  // Autogenerated type: GorillaSpeakerLoudness
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaSpeakerLoudness : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::IDynamicFloat*/ {
    public:
    public:
    // private System.Boolean isSpeaking
    // Size: 0x1
    // Offset: 0x20
    bool isSpeaking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSpeaking and: loudness
    char __padding0[0x3] = {};
    // private System.Single loudness
    // Size: 0x4
    // Offset: 0x24
    float loudness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single normalizedMax
    // Size: 0x4
    // Offset: 0x28
    float normalizedMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isMicEnabled
    // Size: 0x1
    // Offset: 0x2C
    bool isMicEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMicEnabled and: rigContainer
    char __padding3[0x3] = {};
    // private RigContainer rigContainer
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RigContainer* rigContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private Photon.Voice.Unity.Speaker speaker
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::Unity::Speaker* speaker;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Speaker*) == 0x8);
    // private SpeakerVoiceToLoudness speakerVoiceToLoudness
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SpeakerVoiceToLoudness* speakerVoiceToLoudness;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SpeakerVoiceToLoudness*) == 0x8);
    // private Photon.Voice.Unity.Recorder recorder
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Voice::Unity::Recorder* recorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private GorillaTag.Audio.VoiceToLoudness voiceToLoudness
    // Size: 0x8
    // Offset: 0x50
    ::GorillaTag::Audio::VoiceToLoudness* voiceToLoudness;
    // Field size check
    static_assert(sizeof(::GorillaTag::Audio::VoiceToLoudness*) == 0x8);
    // private System.Single smoothedLoudness
    // Size: 0x4
    // Offset: 0x58
    float smoothedLoudness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastLoudness
    // Size: 0x4
    // Offset: 0x5C
    float lastLoudness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceLoudnessChange
    // Size: 0x4
    // Offset: 0x60
    float timeSinceLoudnessChange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single loudnessUpdateCheckRate
    // Size: 0x4
    // Offset: 0x64
    float loudnessUpdateCheckRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single loudnessBlendStrength
    // Size: 0x4
    // Offset: 0x68
    float loudnessBlendStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean permission
    // Size: 0x1
    // Offset: 0x6C
    bool permission;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean micConnected
    // Size: 0x1
    // Offset: 0x6D
    bool micConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::IDynamicFloat
    operator ::GorillaTag::IDynamicFloat() noexcept {
      return *reinterpret_cast<::GorillaTag::IDynamicFloat*>(this);
    }
    // Get instance field reference: private System.Boolean isSpeaking
    [[deprecated("Use field access instead!")]] bool& dyn_isSpeaking();
    // Get instance field reference: private System.Single loudness
    [[deprecated("Use field access instead!")]] float& dyn_loudness();
    // Get instance field reference: private System.Single normalizedMax
    [[deprecated("Use field access instead!")]] float& dyn_normalizedMax();
    // Get instance field reference: private System.Boolean isMicEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isMicEnabled();
    // Get instance field reference: private RigContainer rigContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_rigContainer();
    // Get instance field reference: private Photon.Voice.Unity.Speaker speaker
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Speaker*& dyn_speaker();
    // Get instance field reference: private SpeakerVoiceToLoudness speakerVoiceToLoudness
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SpeakerVoiceToLoudness*& dyn_speakerVoiceToLoudness();
    // Get instance field reference: private Photon.Voice.Unity.Recorder recorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_recorder();
    // Get instance field reference: private GorillaTag.Audio.VoiceToLoudness voiceToLoudness
    [[deprecated("Use field access instead!")]] ::GorillaTag::Audio::VoiceToLoudness*& dyn_voiceToLoudness();
    // Get instance field reference: private System.Single smoothedLoudness
    [[deprecated("Use field access instead!")]] float& dyn_smoothedLoudness();
    // Get instance field reference: private System.Single lastLoudness
    [[deprecated("Use field access instead!")]] float& dyn_lastLoudness();
    // Get instance field reference: private System.Single timeSinceLoudnessChange
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceLoudnessChange();
    // Get instance field reference: private System.Single loudnessUpdateCheckRate
    [[deprecated("Use field access instead!")]] float& dyn_loudnessUpdateCheckRate();
    // Get instance field reference: private System.Single loudnessBlendStrength
    [[deprecated("Use field access instead!")]] float& dyn_loudnessBlendStrength();
    // Get instance field reference: private System.Boolean permission
    [[deprecated("Use field access instead!")]] bool& dyn_permission();
    // Get instance field reference: private System.Boolean micConnected
    [[deprecated("Use field access instead!")]] bool& dyn_micConnected();
    // public System.Boolean get_IsSpeaking()
    // Offset: 0x2718564
    bool get_IsSpeaking();
    // public System.Single get_Loudness()
    // Offset: 0x271856C
    float get_Loudness();
    // public System.Single get_LoudnessNormalized()
    // Offset: 0x2718574
    float get_LoudnessNormalized();
    // public System.Single get_floatValue()
    // Offset: 0x2718588
    float get_floatValue();
    // public System.Boolean get_IsMicEnabled()
    // Offset: 0x271859C
    bool get_IsMicEnabled();
    // public System.Single get_SmoothedLoudness()
    // Offset: 0x27185A4
    float get_SmoothedLoudness();
    // private System.Void Start()
    // Offset: 0x27185AC
    void Start();
    // public System.Void InvokeUpdate()
    // Offset: 0x2718604
    void InvokeUpdate();
    // private System.Void UpdateMicEnabled()
    // Offset: 0x2718624
    void UpdateMicEnabled();
    // private System.Void UpdateLoudness()
    // Offset: 0x2718748
    void UpdateLoudness();
    // private System.Void UpdateSmoothedLoudness()
    // Offset: 0x2718B90
    void UpdateSmoothedLoudness();
    // public System.Void .ctor()
    // Offset: 0x2718CF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaSpeakerLoudness* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSpeakerLoudness::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaSpeakerLoudness*, creationType>()));
    }
  }; // GorillaSpeakerLoudness
  #pragma pack(pop)
  static check_size<sizeof(GorillaSpeakerLoudness), 109 + sizeof(bool)> __GlobalNamespace_GorillaSpeakerLoudnessSizeCheck;
  static_assert(sizeof(GorillaSpeakerLoudness) == 0x6E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_IsSpeaking
// Il2CppName: get_IsSpeaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_IsSpeaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_IsSpeaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_Loudness
// Il2CppName: get_Loudness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_Loudness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_Loudness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_LoudnessNormalized
// Il2CppName: get_LoudnessNormalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_LoudnessNormalized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_LoudnessNormalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_floatValue
// Il2CppName: get_floatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_floatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_floatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_IsMicEnabled
// Il2CppName: get_IsMicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_IsMicEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_IsMicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::get_SmoothedLoudness
// Il2CppName: get_SmoothedLoudness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::get_SmoothedLoudness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "get_SmoothedLoudness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::UpdateMicEnabled
// Il2CppName: UpdateMicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::UpdateMicEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "UpdateMicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::UpdateLoudness
// Il2CppName: UpdateLoudness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::UpdateLoudness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "UpdateLoudness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::UpdateSmoothedLoudness
// Il2CppName: UpdateSmoothedLoudness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSpeakerLoudness::*)()>(&GlobalNamespace::GorillaSpeakerLoudness::UpdateSmoothedLoudness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSpeakerLoudness*), "UpdateSmoothedLoudness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSpeakerLoudness::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
