// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRKeyboard
#include "GlobalNamespace/OVRKeyboard.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: OVRPlugin/TrackedKeyboardFlags
#include "GlobalNamespace/OVRPlugin_TrackedKeyboardFlags.hpp"
// Including type: OVRPlugin/TrackedKeyboardPresentationStyles
#include "GlobalNamespace/OVRPlugin_TrackedKeyboardPresentationStyles.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo, "", "OVRKeyboard/TrackedKeyboardInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRKeyboard/TrackedKeyboardInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRKeyboard::TrackedKeyboardInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt64 Identifier
    // Size: 0x8
    // Offset: 0x8
    uint64_t Identifier;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public UnityEngine.Vector3 Dimensions
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 Dimensions;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public OVRPlugin/TrackedKeyboardFlags KeyboardFlags
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags KeyboardFlags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags) == 0x4);
    // public OVRPlugin/TrackedKeyboardPresentationStyles SupportedPresentationStyles
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles SupportedPresentationStyles;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles) == 0x4);
    public:
    // Creating value type constructor for type: TrackedKeyboardInfo
    constexpr TrackedKeyboardInfo(::StringW Name_ = {}, uint64_t Identifier_ = {}, ::UnityEngine::Vector3 Dimensions_ = {}, ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags KeyboardFlags_ = {}, ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles SupportedPresentationStyles_ = {}) noexcept : Name{Name_}, Identifier{Identifier_}, Dimensions{Dimensions_}, KeyboardFlags{KeyboardFlags_}, SupportedPresentationStyles{SupportedPresentationStyles_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.UInt64 Identifier
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Identifier();
    // Get instance field reference: public UnityEngine.Vector3 Dimensions
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Dimensions();
    // Get instance field reference: public OVRPlugin/TrackedKeyboardFlags KeyboardFlags
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags& dyn_KeyboardFlags();
    // Get instance field reference: public OVRPlugin/TrackedKeyboardPresentationStyles SupportedPresentationStyles
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles& dyn_SupportedPresentationStyles();
  }; // OVRKeyboard/TrackedKeyboardInfo
  #pragma pack(pop)
  static check_size<sizeof(OVRKeyboard::TrackedKeyboardInfo), 32 + sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles)> __GlobalNamespace_OVRKeyboard_TrackedKeyboardInfoSizeCheck;
  static_assert(sizeof(OVRKeyboard::TrackedKeyboardInfo) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
