// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FeatureType, "", "OVRPlugin/FeatureType");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/FeatureType
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::FeatureType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FeatureType
    constexpr FeatureType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public OVRPlugin/FeatureType HandTracking
    static constexpr const int HandTracking = 0;
    // Get static field: static public OVRPlugin/FeatureType HandTracking
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_HandTracking();
    // Set static field: static public OVRPlugin/FeatureType HandTracking
    static void _set_HandTracking(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType KeyboardTracking
    static constexpr const int KeyboardTracking = 1;
    // Get static field: static public OVRPlugin/FeatureType KeyboardTracking
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_KeyboardTracking();
    // Set static field: static public OVRPlugin/FeatureType KeyboardTracking
    static void _set_KeyboardTracking(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType EyeTracking
    static constexpr const int EyeTracking = 2;
    // Get static field: static public OVRPlugin/FeatureType EyeTracking
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_EyeTracking();
    // Set static field: static public OVRPlugin/FeatureType EyeTracking
    static void _set_EyeTracking(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType FaceTracking
    static constexpr const int FaceTracking = 3;
    // Get static field: static public OVRPlugin/FeatureType FaceTracking
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_FaceTracking();
    // Set static field: static public OVRPlugin/FeatureType FaceTracking
    static void _set_FaceTracking(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType BodyTracking
    static constexpr const int BodyTracking = 4;
    // Get static field: static public OVRPlugin/FeatureType BodyTracking
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_BodyTracking();
    // Set static field: static public OVRPlugin/FeatureType BodyTracking
    static void _set_BodyTracking(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType Passthrough
    static constexpr const int Passthrough = 5;
    // Get static field: static public OVRPlugin/FeatureType Passthrough
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_Passthrough();
    // Set static field: static public OVRPlugin/FeatureType Passthrough
    static void _set_Passthrough(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType GazeBasedFoveatedRendering
    static constexpr const int GazeBasedFoveatedRendering = 6;
    // Get static field: static public OVRPlugin/FeatureType GazeBasedFoveatedRendering
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_GazeBasedFoveatedRendering();
    // Set static field: static public OVRPlugin/FeatureType GazeBasedFoveatedRendering
    static void _set_GazeBasedFoveatedRendering(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType Count
    static constexpr const int Count = 7;
    // Get static field: static public OVRPlugin/FeatureType Count
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_Count();
    // Set static field: static public OVRPlugin/FeatureType Count
    static void _set_Count(::GlobalNamespace::OVRPlugin::FeatureType value);
    // static field const value: static public OVRPlugin/FeatureType EnumSize
    static constexpr const int EnumSize = 2147483647;
    // Get static field: static public OVRPlugin/FeatureType EnumSize
    static ::GlobalNamespace::OVRPlugin::FeatureType _get_EnumSize();
    // Set static field: static public OVRPlugin/FeatureType EnumSize
    static void _set_EnumSize(::GlobalNamespace::OVRPlugin::FeatureType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // OVRPlugin/FeatureType
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::FeatureType), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_FeatureTypeSizeCheck;
  static_assert(sizeof(OVRPlugin::FeatureType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
