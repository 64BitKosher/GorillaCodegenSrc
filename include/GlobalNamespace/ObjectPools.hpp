// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SinglePool
  class SinglePool;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ObjectPools
  class ObjectPools;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ObjectPools);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectPools*, "", "ObjectPools");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ObjectPools
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectPools : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean <initialized>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: pools
    char __padding0[0x7] = {};
    // private System.Collections.Generic.List`1<SinglePool> pools
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::SinglePool*>* pools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SinglePool*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,SinglePool> lookUp
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SinglePool*>* lookUp;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SinglePool*>*) == 0x8);
    public:
    // Get static field: static public ObjectPools instance
    static ::GlobalNamespace::ObjectPools* _get_instance();
    // Set static field: static public ObjectPools instance
    static void _set_instance(::GlobalNamespace::ObjectPools* value);
    // Get instance field reference: private System.Boolean <initialized>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$initialized$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<SinglePool> pools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SinglePool*>*& dyn_pools();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,SinglePool> lookUp
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SinglePool*>*& dyn_lookUp();
    // public System.Boolean get_initialized()
    // Offset: 0x2778AF4
    bool get_initialized();
    // private System.Void set_initialized(System.Boolean value)
    // Offset: 0x2778AFC
    void set_initialized(bool value);
    // protected System.Void Awake()
    // Offset: 0x2778B08
    void Awake();
    // protected System.Void Start()
    // Offset: 0x2778B60
    void Start();
    // public System.Void InitializePools()
    // Offset: 0x2778B64
    void InitializePools();
    // public System.Boolean DoesPoolExist(UnityEngine.GameObject obj)
    // Offset: 0x2778FD8
    bool DoesPoolExist(::UnityEngine::GameObject* obj);
    // public System.Boolean DoesPoolExist(System.Int32 hash)
    // Offset: 0x2778FF8
    bool DoesPoolExist(int hash);
    // public SinglePool GetPoolByHash(System.Int32 hash)
    // Offset: 0x2779050
    ::GlobalNamespace::SinglePool* GetPoolByHash(int hash);
    // public SinglePool GetPoolByObjectType(UnityEngine.GameObject obj)
    // Offset: 0x27790A8
    ::GlobalNamespace::SinglePool* GetPoolByObjectType(::UnityEngine::GameObject* obj);
    // public UnityEngine.GameObject Instantiate(UnityEngine.GameObject obj)
    // Offset: 0x27790C8
    ::UnityEngine::GameObject* Instantiate(::UnityEngine::GameObject* obj);
    // public UnityEngine.GameObject Instantiate(System.Int32 hash)
    // Offset: 0x2770AF0
    ::UnityEngine::GameObject* Instantiate(int hash);
    // public UnityEngine.GameObject Instantiate(UnityEngine.GameObject obj, UnityEngine.Vector3 position)
    // Offset: 0x27705A4
    ::UnityEngine::GameObject* Instantiate(::UnityEngine::GameObject* obj, ::UnityEngine::Vector3 position);
    // public UnityEngine.GameObject Instantiate(System.Int32 hash, UnityEngine.Vector3 position)
    // Offset: 0x27790F8
    ::UnityEngine::GameObject* Instantiate(int hash, ::UnityEngine::Vector3 position);
    // public UnityEngine.GameObject Instantiate(UnityEngine.GameObject obj, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x2779154
    ::UnityEngine::GameObject* Instantiate(::UnityEngine::GameObject* obj, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public UnityEngine.GameObject Instantiate(UnityEngine.GameObject obj, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single scale)
    // Offset: 0x27791E0
    ::UnityEngine::GameObject* Instantiate(::UnityEngine::GameObject* obj, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float scale);
    // public System.Void Destroy(UnityEngine.GameObject obj)
    // Offset: 0x2770B0C
    void Destroy(::UnityEngine::GameObject* obj);
    // public System.Void .ctor()
    // Offset: 0x27792DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPools* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectPools::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPools*, creationType>()));
    }
  }; // ObjectPools
  #pragma pack(pop)
  static check_size<sizeof(ObjectPools), 48 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SinglePool*>*)> __GlobalNamespace_ObjectPoolsSizeCheck;
  static_assert(sizeof(ObjectPools) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::get_initialized
// Il2CppName: get_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ObjectPools::*)()>(&GlobalNamespace::ObjectPools::get_initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "get_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::set_initialized
// Il2CppName: set_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPools::*)(bool)>(&GlobalNamespace::ObjectPools::set_initialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "set_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPools::*)()>(&GlobalNamespace::ObjectPools::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPools::*)()>(&GlobalNamespace::ObjectPools::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::InitializePools
// Il2CppName: InitializePools
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPools::*)()>(&GlobalNamespace::ObjectPools::InitializePools)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "InitializePools", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::DoesPoolExist
// Il2CppName: DoesPoolExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ObjectPools::DoesPoolExist)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "DoesPoolExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::DoesPoolExist
// Il2CppName: DoesPoolExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ObjectPools::*)(int)>(&GlobalNamespace::ObjectPools::DoesPoolExist)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "DoesPoolExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::GetPoolByHash
// Il2CppName: GetPoolByHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SinglePool* (GlobalNamespace::ObjectPools::*)(int)>(&GlobalNamespace::ObjectPools::GetPoolByHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "GetPoolByHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::GetPoolByObjectType
// Il2CppName: GetPoolByObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SinglePool* (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ObjectPools::GetPoolByObjectType)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "GetPoolByObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(int)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(int, ::UnityEngine::Vector3)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, position, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&GlobalNamespace::ObjectPools::Instantiate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, position, rotation, scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPools::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ObjectPools::Destroy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPools*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPools::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
