// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Monkeye_LazerFX
  class Monkeye_LazerFX;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Monkeye_LazerFX);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Monkeye_LazerFX*, "", "Monkeye_LazerFX");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Monkeye_LazerFX
  // [TokenAttribute] Offset: FFFFFFFF
  class Monkeye_LazerFX : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform[] eyeBones
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> eyeBones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private VRRig rig
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::VRRig* rig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.LineRenderer[] lines
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::LineRenderer*> lines;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::LineRenderer*>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Transform[] eyeBones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_eyeBones();
    // Get instance field reference: private VRRig rig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_rig();
    // Get instance field reference: public UnityEngine.LineRenderer[] lines
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LineRenderer*>& dyn_lines();
    // private System.Void Awake()
    // Offset: 0x269345C
    void Awake();
    // public System.Void EnableLazer(UnityEngine.Transform[] eyes_, VRRig rig_)
    // Offset: 0x2693468
    void EnableLazer(::ArrayW<::UnityEngine::Transform*> eyes_, ::GlobalNamespace::VRRig* rig_);
    // public System.Void DisableLazer()
    // Offset: 0x269356C
    void DisableLazer();
    // private System.Void Update()
    // Offset: 0x26935F0
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26936D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Monkeye_LazerFX* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Monkeye_LazerFX::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Monkeye_LazerFX*, creationType>()));
    }
  }; // Monkeye_LazerFX
  #pragma pack(pop)
  static check_size<sizeof(Monkeye_LazerFX), 48 + sizeof(::ArrayW<::UnityEngine::LineRenderer*>)> __GlobalNamespace_Monkeye_LazerFXSizeCheck;
  static_assert(sizeof(Monkeye_LazerFX) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Monkeye_LazerFX::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Monkeye_LazerFX::*)()>(&GlobalNamespace::Monkeye_LazerFX::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Monkeye_LazerFX*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Monkeye_LazerFX::EnableLazer
// Il2CppName: EnableLazer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Monkeye_LazerFX::*)(::ArrayW<::UnityEngine::Transform*>, ::GlobalNamespace::VRRig*)>(&GlobalNamespace::Monkeye_LazerFX::EnableLazer)> {
  static const MethodInfo* get() {
    static auto* eyes_ = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* rig_ = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Monkeye_LazerFX*), "EnableLazer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyes_, rig_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Monkeye_LazerFX::DisableLazer
// Il2CppName: DisableLazer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Monkeye_LazerFX::*)()>(&GlobalNamespace::Monkeye_LazerFX::DisableLazer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Monkeye_LazerFX*), "DisableLazer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Monkeye_LazerFX::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Monkeye_LazerFX::*)()>(&GlobalNamespace::Monkeye_LazerFX::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Monkeye_LazerFX*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Monkeye_LazerFX::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
