// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Jobs.TransformAccessArray
#include "UnityEngine/Jobs/TransformAccessArray.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRigJobManager
  class VRRigJobManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRigJobManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigJobManager*, "", "VRRigJobManager");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: VRRigJobManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class VRRigJobManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::VRRigJobManager::VRRigTransformInput
    struct VRRigTransformInput;
    // Nested type: ::GlobalNamespace::VRRigJobManager::VRRigTransformJob
    struct VRRigTransformJob;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: VRRigJobManager/VRRigTransformInput
    // [TokenAttribute] Offset: FFFFFFFF
    struct VRRigTransformInput/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 rigPosition
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 rigPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion rigRotaton
      // Size: 0x10
      // Offset: 0xC
      ::UnityEngine::Quaternion rigRotaton;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      public:
      // Creating value type constructor for type: VRRigTransformInput
      constexpr VRRigTransformInput(::UnityEngine::Vector3 rigPosition_ = {}, ::UnityEngine::Quaternion rigRotaton_ = {}) noexcept : rigPosition{rigPosition_}, rigRotaton{rigRotaton_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 rigPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rigPosition();
      // Get instance field reference: public UnityEngine.Quaternion rigRotaton
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rigRotaton();
    }; // VRRigJobManager/VRRigTransformInput
    #pragma pack(pop)
    static check_size<sizeof(VRRigJobManager::VRRigTransformInput), 12 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_VRRigJobManager_VRRigTransformInputSizeCheck;
    static_assert(sizeof(VRRigJobManager::VRRigTransformInput) == 0x1C);
    public:
    // private System.Collections.Generic.List`1<VRRig> rigList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>* rigList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*) == 0x8);
    // private Unity.Collections.NativeArray`1<VRRigJobManager/VRRigTransformInput> cachedInput
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput> cachedInput;
    // private UnityEngine.Jobs.TransformAccessArray tAA
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Jobs::TransformAccessArray tAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Jobs::TransformAccessArray) == 0x8);
    // private System.Int32 actualListSz
    // Size: 0x4
    // Offset: 0x40
    int actualListSz;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Jobs.JobHandle jobHandle
    // Size: 0xC
    // Offset: 0x48
    ::Unity::Jobs::JobHandle jobHandle;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    public:
    // Get static field: static private VRRigJobManager _instance
    static ::GlobalNamespace::VRRigJobManager* _get__instance();
    // Set static field: static private VRRigJobManager _instance
    static void _set__instance(::GlobalNamespace::VRRigJobManager* value);
    // static field const value: static private System.Int32 MaxSize
    static constexpr const int MaxSize = 9;
    // Get static field: static private System.Int32 MaxSize
    static int _get_MaxSize();
    // Set static field: static private System.Int32 MaxSize
    static void _set_MaxSize(int value);
    // static field const value: static private System.Int32 questJobThreads
    static constexpr const int questJobThreads = 2;
    // Get static field: static private System.Int32 questJobThreads
    static int _get_questJobThreads();
    // Set static field: static private System.Int32 questJobThreads
    static void _set_questJobThreads(int value);
    // Get instance field reference: private System.Collections.Generic.List`1<VRRig> rigList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*& dyn_rigList();
    // Get instance field reference: private Unity.Collections.NativeArray`1<VRRigJobManager/VRRigTransformInput> cachedInput
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput>& dyn_cachedInput();
    // Get instance field reference: private UnityEngine.Jobs.TransformAccessArray tAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Jobs::TransformAccessArray& dyn_tAA();
    // Get instance field reference: private System.Int32 actualListSz
    [[deprecated("Use field access instead!")]] int& dyn_actualListSz();
    // Get instance field reference: private Unity.Jobs.JobHandle jobHandle
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_jobHandle();
    // static public VRRigJobManager get_Instance()
    // Offset: 0x2744D2C
    static ::GlobalNamespace::VRRigJobManager* get_Instance();
    // private System.Void Awake()
    // Offset: 0x2744D74
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2744E34
    void OnDestroy();
    // public System.Void RegisterVRRig(VRRig rig)
    // Offset: 0x2744E94
    void RegisterVRRig(::GlobalNamespace::VRRig* rig);
    // public System.Void DeregisterVRRig(VRRig rig)
    // Offset: 0x2744F70
    void DeregisterVRRig(::GlobalNamespace::VRRig* rig);
    // private System.Void CopyInput()
    // Offset: 0x27450A4
    void CopyInput();
    // public System.Void Update()
    // Offset: 0x27451CC
    void Update();
    // public System.Void .ctor()
    // Offset: 0x27452A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRigJobManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigJobManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRigJobManager*, creationType>()));
    }
  }; // VRRigJobManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigJobManager::VRRigTransformInput, "", "VRRigJobManager/VRRigTransformInput");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRigJobManager* (*)()>(&GlobalNamespace::VRRigJobManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)()>(&GlobalNamespace::VRRigJobManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)()>(&GlobalNamespace::VRRigJobManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::RegisterVRRig
// Il2CppName: RegisterVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::VRRigJobManager::RegisterVRRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "RegisterVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::DeregisterVRRig
// Il2CppName: DeregisterVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::VRRigJobManager::DeregisterVRRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "DeregisterVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::CopyInput
// Il2CppName: CopyInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)()>(&GlobalNamespace::VRRigJobManager::CopyInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "CopyInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::*)()>(&GlobalNamespace::VRRigJobManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
