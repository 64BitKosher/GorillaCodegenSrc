// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: BoingKit.FloatSpring
#include "BoingKit/FloatSpring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: DoorState because it is already included!
  // Forward declaring type: GTDoorTrigger
  class GTDoorTrigger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTDoor
  class GTDoor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTDoor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDoor*, "", "GTDoor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x86
  #pragma pack(push, 1)
  // Autogenerated type: GTDoor
  // [TokenAttribute] Offset: FFFFFFFF
  class GTDoor : public ::Photon::Pun::MonoBehaviourPun {
    public:
    // Nested type: ::GlobalNamespace::GTDoor::DoorState
    struct DoorState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GTDoor/DoorState
    // [TokenAttribute] Offset: FFFFFFFF
    struct DoorState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DoorState
      constexpr DoorState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GTDoor/DoorState Closed
      static constexpr const int Closed = 0;
      // Get static field: static public GTDoor/DoorState Closed
      static ::GlobalNamespace::GTDoor::DoorState _get_Closed();
      // Set static field: static public GTDoor/DoorState Closed
      static void _set_Closed(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState ClosingWaitingOnRPC
      static constexpr const int ClosingWaitingOnRPC = 1;
      // Get static field: static public GTDoor/DoorState ClosingWaitingOnRPC
      static ::GlobalNamespace::GTDoor::DoorState _get_ClosingWaitingOnRPC();
      // Set static field: static public GTDoor/DoorState ClosingWaitingOnRPC
      static void _set_ClosingWaitingOnRPC(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState Closing
      static constexpr const int Closing = 2;
      // Get static field: static public GTDoor/DoorState Closing
      static ::GlobalNamespace::GTDoor::DoorState _get_Closing();
      // Set static field: static public GTDoor/DoorState Closing
      static void _set_Closing(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState Open
      static constexpr const int Open = 3;
      // Get static field: static public GTDoor/DoorState Open
      static ::GlobalNamespace::GTDoor::DoorState _get_Open();
      // Set static field: static public GTDoor/DoorState Open
      static void _set_Open(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState OpeningWaitingOnRPC
      static constexpr const int OpeningWaitingOnRPC = 4;
      // Get static field: static public GTDoor/DoorState OpeningWaitingOnRPC
      static ::GlobalNamespace::GTDoor::DoorState _get_OpeningWaitingOnRPC();
      // Set static field: static public GTDoor/DoorState OpeningWaitingOnRPC
      static void _set_OpeningWaitingOnRPC(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState Opening
      static constexpr const int Opening = 5;
      // Get static field: static public GTDoor/DoorState Opening
      static ::GlobalNamespace::GTDoor::DoorState _get_Opening();
      // Set static field: static public GTDoor/DoorState Opening
      static void _set_Opening(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState HeldOpen
      static constexpr const int HeldOpen = 6;
      // Get static field: static public GTDoor/DoorState HeldOpen
      static ::GlobalNamespace::GTDoor::DoorState _get_HeldOpen();
      // Set static field: static public GTDoor/DoorState HeldOpen
      static void _set_HeldOpen(::GlobalNamespace::GTDoor::DoorState value);
      // static field const value: static public GTDoor/DoorState HeldOpenLocally
      static constexpr const int HeldOpenLocally = 7;
      // Get static field: static public GTDoor/DoorState HeldOpenLocally
      static ::GlobalNamespace::GTDoor::DoorState _get_HeldOpenLocally();
      // Set static field: static public GTDoor/DoorState HeldOpenLocally
      static void _set_HeldOpenLocally(::GlobalNamespace::GTDoor::DoorState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GTDoor/DoorState
    #pragma pack(pop)
    static check_size<sizeof(GTDoor::DoorState), 0 + sizeof(int)> __GlobalNamespace_GTDoor_DoorStateSizeCheck;
    static_assert(sizeof(GTDoor::DoorState) == 0x4);
    public:
    // private UnityEngine.Transform doorTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* doorTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Collider[] doorColliders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> doorColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private GTDoorTrigger[] doorButtonTriggers
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::GTDoorTrigger*> doorButtonTriggers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GTDoorTrigger*>) == 0x8);
    // private GTDoorTrigger[] doorHoldOpenTriggers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::GTDoorTrigger*> doorHoldOpenTriggers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GTDoorTrigger*>) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip openSound
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioClip* openSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip closeSound
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* closeSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single doorOpenSpeed
    // Size: 0x4
    // Offset: 0x60
    float doorOpenSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single doorCloseSpeed
    // Size: 0x4
    // Offset: 0x64
    float doorCloseSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeUntilDoorCloses
    // Size: 0x4
    // Offset: 0x68
    float timeUntilDoorCloses;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GTDoor/DoorState currentState
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::GTDoor::DoorState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTDoor::DoorState) == 0x4);
    // private System.Boolean beingHeldOpen
    // Size: 0x1
    // Offset: 0x70
    bool beingHeldOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: beingHeldOpen and: tLastOpened
    char __padding11[0x3] = {};
    // private System.Single tLastOpened
    // Size: 0x4
    // Offset: 0x74
    float tLastOpened;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private BoingKit.FloatSpring doorSpring
    // Size: 0x8
    // Offset: 0x78
    ::BoingKit::FloatSpring doorSpring;
    // Field size check
    static_assert(sizeof(::BoingKit::FloatSpring) == 0x8);
    // private System.Single doorClosingWarningAdvanceNotice
    // Size: 0x4
    // Offset: 0x80
    float doorClosingWarningAdvanceNotice;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean peopleInHoldOpenVolume
    // Size: 0x1
    // Offset: 0x84
    bool peopleInHoldOpenVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean buttonTriggeredThisFrame
    // Size: 0x1
    // Offset: 0x85
    bool buttonTriggeredThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform doorTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_doorTransform();
    // Get instance field reference: private UnityEngine.Collider[] doorColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_doorColliders();
    // Get instance field reference: private GTDoorTrigger[] doorButtonTriggers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTDoorTrigger*>& dyn_doorButtonTriggers();
    // Get instance field reference: private GTDoorTrigger[] doorHoldOpenTriggers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTDoorTrigger*>& dyn_doorHoldOpenTriggers();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.AudioClip openSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_openSound();
    // Get instance field reference: private UnityEngine.AudioClip closeSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_closeSound();
    // Get instance field reference: private System.Single doorOpenSpeed
    [[deprecated("Use field access instead!")]] float& dyn_doorOpenSpeed();
    // Get instance field reference: private System.Single doorCloseSpeed
    [[deprecated("Use field access instead!")]] float& dyn_doorCloseSpeed();
    // Get instance field reference: private System.Single timeUntilDoorCloses
    [[deprecated("Use field access instead!")]] float& dyn_timeUntilDoorCloses();
    // Get instance field reference: private GTDoor/DoorState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTDoor::DoorState& dyn_currentState();
    // Get instance field reference: private System.Boolean beingHeldOpen
    [[deprecated("Use field access instead!")]] bool& dyn_beingHeldOpen();
    // Get instance field reference: private System.Single tLastOpened
    [[deprecated("Use field access instead!")]] float& dyn_tLastOpened();
    // Get instance field reference: private BoingKit.FloatSpring doorSpring
    [[deprecated("Use field access instead!")]] ::BoingKit::FloatSpring& dyn_doorSpring();
    // Get instance field reference: private System.Single doorClosingWarningAdvanceNotice
    [[deprecated("Use field access instead!")]] float& dyn_doorClosingWarningAdvanceNotice();
    // Get instance field reference: private System.Boolean peopleInHoldOpenVolume
    [[deprecated("Use field access instead!")]] bool& dyn_peopleInHoldOpenVolume();
    // Get instance field reference: private System.Boolean buttonTriggeredThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn_buttonTriggeredThisFrame();
    // private System.Void Start()
    // Offset: 0x288A55C
    void Start();
    // private System.Void Update()
    // Offset: 0x288A5C8
    void Update();
    // private System.Void UpdateDoorState()
    // Offset: 0x288A68C
    void UpdateDoorState();
    // private System.Void OpenDoor()
    // Offset: 0x288AF9C
    void OpenDoor();
    // private System.Void CloseDoor()
    // Offset: 0x288AF18
    void CloseDoor();
    // private System.Void UpdateDoorAnimation()
    // Offset: 0x288AC8C
    void UpdateDoorAnimation();
    // public System.Void ResetDoorOpenedTime()
    // Offset: 0x288B02C
    void ResetDoorOpenedTime();
    // public System.Void ChangeDoorState(GTDoor/DoorState shouldOpenState)
    // Offset: 0x288B048
    void ChangeDoorState(::GlobalNamespace::GTDoor::DoorState shouldOpenState);
    // public System.Void .ctor()
    // Offset: 0x288B1D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTDoor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTDoor*, creationType>()));
    }
  }; // GTDoor
  #pragma pack(pop)
  static check_size<sizeof(GTDoor), 133 + sizeof(bool)> __GlobalNamespace_GTDoorSizeCheck;
  static_assert(sizeof(GTDoor) == 0x86);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDoor::DoorState, "", "GTDoor/DoorState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::UpdateDoorState
// Il2CppName: UpdateDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::UpdateDoorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "UpdateDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::OpenDoor
// Il2CppName: OpenDoor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::OpenDoor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "OpenDoor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::CloseDoor
// Il2CppName: CloseDoor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::CloseDoor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "CloseDoor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::UpdateDoorAnimation
// Il2CppName: UpdateDoorAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::UpdateDoorAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "UpdateDoorAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::ResetDoorOpenedTime
// Il2CppName: ResetDoorOpenedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)()>(&GlobalNamespace::GTDoor::ResetDoorOpenedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "ResetDoorOpenedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::ChangeDoorState
// Il2CppName: ChangeDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoor::*)(::GlobalNamespace::GTDoor::DoorState)>(&GlobalNamespace::GTDoor::ChangeDoorState)> {
  static const MethodInfo* get() {
    static auto* shouldOpenState = &::il2cpp_utils::GetClassFromName("", "GTDoor/DoorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoor*), "ChangeDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldOpenState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
