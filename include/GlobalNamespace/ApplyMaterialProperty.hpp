// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialInstance
  class MaterialInstance;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ApplyMaterialProperty
  class ApplyMaterialProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ApplyMaterialProperty);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ApplyMaterialProperty*, "", "ApplyMaterialProperty");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: ApplyMaterialProperty
  // [TokenAttribute] Offset: FFFFFFFF
  class ApplyMaterialProperty : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ApplyMaterialProperty::ApplyMode
    struct ApplyMode;
    // Nested type: ::GlobalNamespace::ApplyMaterialProperty::SuportedTypes
    struct SuportedTypes;
    // Nested type: ::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData
    class CustomMaterialData;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ApplyMaterialProperty/ApplyMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ApplyMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ApplyMode
      constexpr ApplyMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ApplyMaterialProperty/ApplyMode MaterialInstance
      static constexpr const int MaterialInstance = 0;
      // Get static field: static public ApplyMaterialProperty/ApplyMode MaterialInstance
      static ::GlobalNamespace::ApplyMaterialProperty::ApplyMode _get_MaterialInstance();
      // Set static field: static public ApplyMaterialProperty/ApplyMode MaterialInstance
      static void _set_MaterialInstance(::GlobalNamespace::ApplyMaterialProperty::ApplyMode value);
      // static field const value: static public ApplyMaterialProperty/ApplyMode MaterialPropertyBlock
      static constexpr const int MaterialPropertyBlock = 1;
      // Get static field: static public ApplyMaterialProperty/ApplyMode MaterialPropertyBlock
      static ::GlobalNamespace::ApplyMaterialProperty::ApplyMode _get_MaterialPropertyBlock();
      // Set static field: static public ApplyMaterialProperty/ApplyMode MaterialPropertyBlock
      static void _set_MaterialPropertyBlock(::GlobalNamespace::ApplyMaterialProperty::ApplyMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ApplyMaterialProperty/ApplyMode
    #pragma pack(pop)
    static check_size<sizeof(ApplyMaterialProperty::ApplyMode), 0 + sizeof(int)> __GlobalNamespace_ApplyMaterialProperty_ApplyModeSizeCheck;
    static_assert(sizeof(ApplyMaterialProperty::ApplyMode) == 0x4);
    public:
    // public ApplyMaterialProperty/ApplyMode mode
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::ApplyMaterialProperty::ApplyMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ApplyMaterialProperty::ApplyMode) == 0x4);
    // Padding between fields: mode and: targetMaterial
    char __padding0[0x4] = {};
    // public UnityEngine.Material targetMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* targetMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private MaterialInstance _instance
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MaterialInstance* instance;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialInstance*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Collections.Generic.List`1<ApplyMaterialProperty/CustomMaterialData> customData
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*>* customData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*>*) == 0x8);
    // private System.Boolean applyOnStart
    // Size: 0x1
    // Offset: 0x48
    bool applyOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyOnStart and: block
    char __padding5[0x7] = {};
    // private UnityEngine.MaterialPropertyBlock _block
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::MaterialPropertyBlock* block;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get instance field reference: public ApplyMaterialProperty/ApplyMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ApplyMaterialProperty::ApplyMode& dyn_mode();
    // Get instance field reference: public UnityEngine.Material targetMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_targetMaterial();
    // Get instance field reference: private MaterialInstance _instance
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialInstance*& dyn__instance();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: public System.Collections.Generic.List`1<ApplyMaterialProperty/CustomMaterialData> customData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*>*& dyn_customData();
    // Get instance field reference: private System.Boolean applyOnStart
    [[deprecated("Use field access instead!")]] bool& dyn_applyOnStart();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _block
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn__block();
    // private System.Void Start()
    // Offset: 0x2789B80
    void Start();
    // public System.Void Apply()
    // Offset: 0x2789B90
    void Apply();
    // public System.Void SetColor(System.String propertyName, UnityEngine.Color color)
    // Offset: 0x278A098
    void SetColor(::StringW propertyName, ::UnityEngine::Color color);
    // public System.Void SetFloat(System.String propertyName, System.Single value)
    // Offset: 0x278A248
    void SetFloat(::StringW propertyName, float value);
    // private ApplyMaterialProperty/CustomMaterialData GetOrCreateData(System.String propertyName)
    // Offset: 0x278A0DC
    ::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData* GetOrCreateData(::StringW propertyName);
    // private System.Void ApplyMaterialInstance()
    // Offset: 0x2789C68
    void ApplyMaterialInstance();
    // private System.Void ApplyMaterialPropertyBlock()
    // Offset: 0x2789EC4
    void ApplyMaterialPropertyBlock();
    // public System.Void .ctor()
    // Offset: 0x278A280
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApplyMaterialProperty* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApplyMaterialProperty*, creationType>()));
    }
  }; // ApplyMaterialProperty
  #pragma pack(pop)
  static check_size<sizeof(ApplyMaterialProperty), 80 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GlobalNamespace_ApplyMaterialPropertySizeCheck;
  static_assert(sizeof(ApplyMaterialProperty) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ApplyMaterialProperty::ApplyMode, "", "ApplyMaterialProperty/ApplyMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)()>(&GlobalNamespace::ApplyMaterialProperty::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)()>(&GlobalNamespace::ApplyMaterialProperty::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)(::StringW, ::UnityEngine::Color)>(&GlobalNamespace::ApplyMaterialProperty::SetColor)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::SetFloat
// Il2CppName: SetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)(::StringW, float)>(&GlobalNamespace::ApplyMaterialProperty::SetFloat)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "SetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::GetOrCreateData
// Il2CppName: GetOrCreateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData* (GlobalNamespace::ApplyMaterialProperty::*)(::StringW)>(&GlobalNamespace::ApplyMaterialProperty::GetOrCreateData)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "GetOrCreateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::ApplyMaterialInstance
// Il2CppName: ApplyMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)()>(&GlobalNamespace::ApplyMaterialProperty::ApplyMaterialInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "ApplyMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::ApplyMaterialPropertyBlock
// Il2CppName: ApplyMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ApplyMaterialProperty::*)()>(&GlobalNamespace::ApplyMaterialProperty::ApplyMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ApplyMaterialProperty*), "ApplyMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ApplyMaterialProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
