// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughLayer
#include "GlobalNamespace/OVRPassthroughLayer.hpp"
// Including type: OVRPassthroughLayer/BaseGeneratedStyleHandler
#include "GlobalNamespace/OVRPassthroughLayer_BaseGeneratedStyleHandler.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*, "", "OVRPassthroughLayer/MonoToRgbaStyleHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughLayer/MonoToRgbaStyleHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPassthroughLayer::MonoToRgbaStyleHandler : public ::GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler {
    public:
    public:
    // protected System.Byte[] _tmpColorMapData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> tmpColorMapData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<uint8_t>
    constexpr operator ::ArrayW<uint8_t>() const noexcept {
      return tmpColorMapData;
    }
    // Get instance field reference: protected System.Byte[] _tmpColorMapData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__tmpColorMapData();
    // public System.Void Update(UnityEngine.Color[] values)
    // Offset: 0x48EBE68
    void Update(::ArrayW<::UnityEngine::Color> values);
    // protected override System.UInt32 get_MapSize()
    // Offset: 0x48EC300
    // Implemented from: OVRPassthroughLayer/BaseGeneratedStyleHandler
    // Base method: System.UInt32 BaseGeneratedStyleHandler::get_MapSize()
    uint get_MapSize();
    // public System.Void .ctor(ref System.Runtime.InteropServices.GCHandle colorMapDataHandler, System.Byte[] colorMapData)
    // Offset: 0x48EBC78
    // Implemented from: OVRPassthroughLayer/BaseGeneratedStyleHandler
    // Base method: System.Void BaseGeneratedStyleHandler::.ctor(ref System.Runtime.InteropServices.GCHandle colorMapDataHandler, System.Byte[] colorMapData)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughLayer::MonoToRgbaStyleHandler* New_ctor(ByRef<::System::Runtime::InteropServices::GCHandle> colorMapDataHandler, ::ArrayW<uint8_t> colorMapData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughLayer::MonoToRgbaStyleHandler*, creationType>(byref(colorMapDataHandler), colorMapData)));
    }
    // public override System.Void Update(OVRPassthroughLayer/Settings settings)
    // Offset: 0x48EC308
    // Implemented from: OVRPassthroughLayer/BaseGeneratedStyleHandler
    // Base method: System.Void BaseGeneratedStyleHandler::Update(OVRPassthroughLayer/Settings settings)
    void Update(::GlobalNamespace::OVRPassthroughLayer::Settings settings);
    // protected override System.Void AllocateColorMapData(System.UInt32 size)
    // Offset: 0x48EC3C4
    // Implemented from: OVRPassthroughLayer/BaseGeneratedStyleHandler
    // Base method: System.Void BaseGeneratedStyleHandler::AllocateColorMapData(System.UInt32 size)
    void AllocateColorMapData(uint size);
    // protected override System.Void DeallocateColorMapData()
    // Offset: 0x48EC434
    // Implemented from: OVRPassthroughLayer/BaseGeneratedStyleHandler
    // Base method: System.Void BaseGeneratedStyleHandler::DeallocateColorMapData()
    void DeallocateColorMapData();
  }; // OVRPassthroughLayer/MonoToRgbaStyleHandler
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughLayer::MonoToRgbaStyleHandler), 32 + sizeof(::ArrayW<uint8_t>)> __GlobalNamespace_OVRPassthroughLayer_MonoToRgbaStyleHandlerSizeCheck;
  static_assert(sizeof(OVRPassthroughLayer::MonoToRgbaStyleHandler) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::*)(::ArrayW<::UnityEngine::Color>)>(&GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::Update)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::get_MapSize
// Il2CppName: get_MapSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::get_MapSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*), "get_MapSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::*)(::GlobalNamespace::OVRPassthroughLayer::Settings)>(&GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::Update)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughLayer/Settings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::AllocateColorMapData
// Il2CppName: AllocateColorMapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::*)(uint)>(&GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::AllocateColorMapData)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*), "AllocateColorMapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::DeallocateColorMapData
// Il2CppName: DeallocateColorMapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler::DeallocateColorMapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*), "DeallocateColorMapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
