// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: ConstantForce
  class ConstantForce;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GorillaTag::Reactions
namespace GorillaTag::Reactions {
  // Forward declaring type: SpawnWorldEffects
  class SpawnWorldEffects;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlingshotProjectile);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlingshotProjectile*, "", "SlingshotProjectile");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: SlingshotProjectile
  // [TokenAttribute] Offset: FFFFFFFF
  class SlingshotProjectile : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent
    class ProjectileHitEvent;
    public:
    // public Photon.Realtime.Player projectileOwner
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Realtime::Player* projectileOwner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public UnityEngine.GameObject surfaceImpactEffectPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* surfaceImpactEffectPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single impactEffectOffset
    // Size: 0x4
    // Offset: 0x30
    float impactEffectOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lifeTime
    // Size: 0x4
    // Offset: 0x34
    float lifeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color defaultColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color orangeColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color orangeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color blueColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color blueColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Renderer defaultBall
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Renderer* defaultBall;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.Renderer orangeBall
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Renderer* orangeBall;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.Renderer blueBall
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Renderer* blueBall;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Boolean colorizeBalls
    // Size: 0x1
    // Offset: 0x80
    bool colorizeBalls;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean faceDirectionOfTravel
    // Size: 0x1
    // Offset: 0x81
    bool faceDirectionOfTravel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean particleLaunched
    // Size: 0x1
    // Offset: 0x82
    bool particleLaunched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: particleLaunched and: timeCreated
    char __padding12[0x1] = {};
    // private System.Single timeCreated
    // Size: 0x4
    // Offset: 0x84
    float timeCreated;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rigidbody projectileRigidbody
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Rigidbody* projectileRigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Color teamColor
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Color teamColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Renderer teamRenderer
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Renderer* teamRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Int32 myProjectileCount
    // Size: 0x4
    // Offset: 0xA8
    int myProjectileCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single initialScale
    // Size: 0x4
    // Offset: 0xAC
    float initialScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 previousPosition
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 previousPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: previousPosition and: forceComponent
    char __padding19[0x4] = {};
    // private UnityEngine.ConstantForce forceComponent
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::ConstantForce* forceComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::ConstantForce*) == 0x8);
    // private SlingshotProjectile/ProjectileHitEvent OnHitPlayer
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent* OnHitPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock matPropBlock
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::MaterialPropertyBlock* matPropBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private GorillaTag.Reactions.SpawnWorldEffects spawnWorldEffects
    // Size: 0x8
    // Offset: 0xD8
    ::GorillaTag::Reactions::SpawnWorldEffects* spawnWorldEffects;
    // Field size check
    static_assert(sizeof(::GorillaTag::Reactions::SpawnWorldEffects*) == 0x8);
    public:
    // Get static field: static private System.Single debugCollisionRadius
    static float _get_debugCollisionRadius();
    // Set static field: static private System.Single debugCollisionRadius
    static void _set_debugCollisionRadius(float value);
    // Get static field: static private readonly System.Int32 colorShaderProp
    static int _get_colorShaderProp();
    // Set static field: static private readonly System.Int32 colorShaderProp
    static void _set_colorShaderProp(int value);
    // Get instance field reference: public Photon.Realtime.Player projectileOwner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_projectileOwner();
    // Get instance field reference: public UnityEngine.GameObject surfaceImpactEffectPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_surfaceImpactEffectPrefab();
    // Get instance field reference: private System.Single impactEffectOffset
    [[deprecated("Use field access instead!")]] float& dyn_impactEffectOffset();
    // Get instance field reference: public System.Single lifeTime
    [[deprecated("Use field access instead!")]] float& dyn_lifeTime();
    // Get instance field reference: public UnityEngine.Color defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_defaultColor();
    // Get instance field reference: public UnityEngine.Color orangeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_orangeColor();
    // Get instance field reference: public UnityEngine.Color blueColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_blueColor();
    // Get instance field reference: public UnityEngine.Renderer defaultBall
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_defaultBall();
    // Get instance field reference: public UnityEngine.Renderer orangeBall
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_orangeBall();
    // Get instance field reference: public UnityEngine.Renderer blueBall
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_blueBall();
    // Get instance field reference: public System.Boolean colorizeBalls
    [[deprecated("Use field access instead!")]] bool& dyn_colorizeBalls();
    // Get instance field reference: public System.Boolean faceDirectionOfTravel
    [[deprecated("Use field access instead!")]] bool& dyn_faceDirectionOfTravel();
    // Get instance field reference: private System.Boolean particleLaunched
    [[deprecated("Use field access instead!")]] bool& dyn_particleLaunched();
    // Get instance field reference: private System.Single timeCreated
    [[deprecated("Use field access instead!")]] float& dyn_timeCreated();
    // Get instance field reference: private UnityEngine.Rigidbody projectileRigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_projectileRigidbody();
    // Get instance field reference: private UnityEngine.Color teamColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_teamColor();
    // Get instance field reference: private UnityEngine.Renderer teamRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_teamRenderer();
    // Get instance field reference: public System.Int32 myProjectileCount
    [[deprecated("Use field access instead!")]] int& dyn_myProjectileCount();
    // Get instance field reference: private System.Single initialScale
    [[deprecated("Use field access instead!")]] float& dyn_initialScale();
    // Get instance field reference: private UnityEngine.Vector3 previousPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_previousPosition();
    // Get instance field reference: private UnityEngine.ConstantForce forceComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::ConstantForce*& dyn_forceComponent();
    // Get instance field reference: private SlingshotProjectile/ProjectileHitEvent OnHitPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*& dyn_OnHitPlayer();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
    // Get instance field reference: private GorillaTag.Reactions.SpawnWorldEffects spawnWorldEffects
    [[deprecated("Use field access instead!")]] ::GorillaTag::Reactions::SpawnWorldEffects*& dyn_spawnWorldEffects();
    // public System.Void add_OnHitPlayer(SlingshotProjectile/ProjectileHitEvent value)
    // Offset: 0x2970368
    void add_OnHitPlayer(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent* value);
    // public System.Void remove_OnHitPlayer(SlingshotProjectile/ProjectileHitEvent value)
    // Offset: 0x2970404
    void remove_OnHitPlayer(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent* value);
    // static public System.Single get_Radius()
    // Offset: 0x29704A0
    static float get_Radius();
    // public System.Void Launch(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, Photon.Realtime.Player player, System.Boolean blueTeam, System.Boolean orangeTeam, System.Int32 projectileCount, System.Single scale, System.Boolean shouldOverrideColor, UnityEngine.Color32 overrideColor)
    // Offset: 0x296EE90
    void Launch(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, ::Photon::Realtime::Player* player, bool blueTeam, bool orangeTeam, int projectileCount, float scale, bool shouldOverrideColor, ::UnityEngine::Color32 overrideColor);
    // protected System.Void Awake()
    // Offset: 0x29704F8
    void Awake();
    // public System.Void Deactivate()
    // Offset: 0x296F64C
    void Deactivate();
    // private System.Void SpawnImpactEffect(UnityEngine.GameObject prefab, UnityEngine.Vector3 position, UnityEngine.Vector3 normal)
    // Offset: 0x29706CC
    void SpawnImpactEffect(::UnityEngine::GameObject* prefab, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 normal);
    // public System.Void ApplyTeamModelAndColor(System.Boolean blueTeam, System.Boolean orangeTeam, System.Boolean shouldOverrideColor, UnityEngine.Color overrideColor)
    // Offset: 0x296E194
    void ApplyTeamModelAndColor(bool blueTeam, bool orangeTeam, bool shouldOverrideColor, ::UnityEngine::Color overrideColor);
    // protected System.Void OnEnable()
    // Offset: 0x2970B30
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x2970CE0
    void OnDisable();
    // public System.Void InvokeUpdate()
    // Offset: 0x2970E38
    void InvokeUpdate();
    // protected System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x2970F1C
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // protected System.Void OnCollisionStay(UnityEngine.Collision collision)
    // Offset: 0x2971080
    void OnCollisionStay(::UnityEngine::Collision* collision);
    // protected System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x29711D8
    void OnTriggerExit(::UnityEngine::Collider* other);
    // protected System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x297129C
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void ApplyColor(UnityEngine.Renderer rend, UnityEngine.Color color)
    // Offset: 0x2970954
    void ApplyColor(::UnityEngine::Renderer* rend, ::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x2971834
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlingshotProjectile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlingshotProjectile*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2971878
    static void _cctor();
  }; // SlingshotProjectile
  #pragma pack(pop)
  static check_size<sizeof(SlingshotProjectile), 216 + sizeof(::GorillaTag::Reactions::SpawnWorldEffects*)> __GlobalNamespace_SlingshotProjectileSizeCheck;
  static_assert(sizeof(SlingshotProjectile) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::add_OnHitPlayer
// Il2CppName: add_OnHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectile::add_OnHitPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "add_OnHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::remove_OnHitPlayer
// Il2CppName: remove_OnHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectile::remove_OnHitPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "remove_OnHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::SlingshotProjectile::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::Launch
// Il2CppName: Launch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*, bool, bool, int, float, bool, ::UnityEngine::Color32)>(&GlobalNamespace::SlingshotProjectile::Launch)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* blueTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* orangeTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shouldOverrideColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overrideColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "Launch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity, player, blueTeam, orangeTeam, projectileCount, scale, shouldOverrideColor, overrideColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)()>(&GlobalNamespace::SlingshotProjectile::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)()>(&GlobalNamespace::SlingshotProjectile::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::SpawnImpactEffect
// Il2CppName: SpawnImpactEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::SlingshotProjectile::SpawnImpactEffect)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "SpawnImpactEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, normal});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::ApplyTeamModelAndColor
// Il2CppName: ApplyTeamModelAndColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(bool, bool, bool, ::UnityEngine::Color)>(&GlobalNamespace::SlingshotProjectile::ApplyTeamModelAndColor)> {
  static const MethodInfo* get() {
    static auto* blueTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* orangeTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* shouldOverrideColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overrideColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "ApplyTeamModelAndColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blueTeam, orangeTeam, shouldOverrideColor, overrideColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)()>(&GlobalNamespace::SlingshotProjectile::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)()>(&GlobalNamespace::SlingshotProjectile::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)()>(&GlobalNamespace::SlingshotProjectile::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Collision*)>(&GlobalNamespace::SlingshotProjectile::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnCollisionStay
// Il2CppName: OnCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Collision*)>(&GlobalNamespace::SlingshotProjectile::OnCollisionStay)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SlingshotProjectile::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SlingshotProjectile::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::ApplyColor
// Il2CppName: ApplyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectile::*)(::UnityEngine::Renderer*, ::UnityEngine::Color)>(&GlobalNamespace::SlingshotProjectile::ApplyColor)> {
  static const MethodInfo* get() {
    static auto* rend = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), "ApplyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rend, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectile::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SlingshotProjectile::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectile*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
