// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: ShaderGroup
#include "GlobalNamespace/ShaderGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MaterialMapping
  class MaterialMapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MaterialMapping);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MaterialMapping*, "", "MaterialMapping");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MaterialMapping
  // [TokenAttribute] Offset: FFFFFFFF
  class MaterialMapping : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public ShaderGroup[] map
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::ShaderGroup> map;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ShaderGroup>) == 0x8);
    // public UnityEngine.Material mirrorMat
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* mirrorMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.RenderTexture mirrorTexture
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RenderTexture* mirrorTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.String path
    static ::StringW _get_path();
    // Set static field: static private System.String path
    static void _set_path(::StringW value);
    // Get static field: static public System.String materialDirectory
    static ::StringW _get_materialDirectory();
    // Set static field: static public System.String materialDirectory
    static void _set_materialDirectory(::StringW value);
    // Get static field: static private MaterialMapping instance
    static ::GlobalNamespace::MaterialMapping* _get_instance();
    // Set static field: static private MaterialMapping instance
    static void _set_instance(::GlobalNamespace::MaterialMapping* value);
    // Get instance field reference: public ShaderGroup[] map
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ShaderGroup>& dyn_map();
    // Get instance field reference: public UnityEngine.Material mirrorMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_mirrorMat();
    // Get instance field reference: public UnityEngine.RenderTexture mirrorTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_mirrorTexture();
    // public System.Void CleanUpData()
    // Offset: 0x27A5BBC
    void CleanUpData();
    // public System.Void .ctor()
    // Offset: 0x27A5BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialMapping* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialMapping*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x27A5BC8
    static void _cctor();
  }; // MaterialMapping
  #pragma pack(pop)
  static check_size<sizeof(MaterialMapping), 40 + sizeof(::UnityEngine::RenderTexture*)> __GlobalNamespace_MaterialMappingSizeCheck;
  static_assert(sizeof(MaterialMapping) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MaterialMapping::CleanUpData
// Il2CppName: CleanUpData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialMapping::*)()>(&GlobalNamespace::MaterialMapping::CleanUpData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialMapping*), "CleanUpData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialMapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MaterialMapping::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::MaterialMapping::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialMapping*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
