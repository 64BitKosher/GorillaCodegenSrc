// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Dropdown
  class TMP_Dropdown;
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaDebugUI
  class GorillaDebugUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaDebugUI);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaDebugUI*, "", "GorillaDebugUI");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaDebugUI
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaDebugUI : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private readonly System.Single Delay
    // Size: 0x4
    // Offset: 0x20
    float Delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: Delay and: parentCanvas
    char __padding0[0x4] = {};
    // public UnityEngine.GameObject parentCanvas
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* parentCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rayInteractorLeft
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* rayInteractorLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rayInteractorRight
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* rayInteractorRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private TMPro.TMP_Dropdown playfabIdDropdown
    // Size: 0x8
    // Offset: 0x40
    ::TMPro::TMP_Dropdown* playfabIdDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Dropdown roomIdDropdown
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TMP_Dropdown* roomIdDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Dropdown locationDropdown
    // Size: 0x8
    // Offset: 0x50
    ::TMPro::TMP_Dropdown* locationDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Dropdown playerNameDropdown
    // Size: 0x8
    // Offset: 0x58
    ::TMPro::TMP_Dropdown* playerNameDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Dropdown gameModeDropdown
    // Size: 0x8
    // Offset: 0x60
    ::TMPro::TMP_Dropdown* gameModeDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Dropdown timeOfDayDropdown
    // Size: 0x8
    // Offset: 0x68
    ::TMPro::TMP_Dropdown* timeOfDayDropdown;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Dropdown*) == 0x8);
    // private TMPro.TMP_Text networkStateTextBox
    // Size: 0x8
    // Offset: 0x70
    ::TMPro::TMP_Text* networkStateTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text gameModeTextBox
    // Size: 0x8
    // Offset: 0x78
    ::TMPro::TMP_Text* gameModeTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text currentRoomTextBox
    // Size: 0x8
    // Offset: 0x80
    ::TMPro::TMP_Text* currentRoomTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text playerCountTextBox
    // Size: 0x8
    // Offset: 0x88
    ::TMPro::TMP_Text* playerCountTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text roomVisibilityTextBox
    // Size: 0x8
    // Offset: 0x90
    ::TMPro::TMP_Text* roomVisibilityTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text timeMultiplierTextBox
    // Size: 0x8
    // Offset: 0x98
    ::TMPro::TMP_Text* timeMultiplierTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private TMPro.TMP_Text versionTextBox
    // Size: 0x8
    // Offset: 0xA0
    ::TMPro::TMP_Text* versionTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Single Delay
    [[deprecated("Use field access instead!")]] float& dyn_Delay();
    // Get instance field reference: public UnityEngine.GameObject parentCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_parentCanvas();
    // Get instance field reference: public UnityEngine.GameObject rayInteractorLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rayInteractorLeft();
    // Get instance field reference: public UnityEngine.GameObject rayInteractorRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rayInteractorRight();
    // Get instance field reference: private TMPro.TMP_Dropdown playfabIdDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_playfabIdDropdown();
    // Get instance field reference: private TMPro.TMP_Dropdown roomIdDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_roomIdDropdown();
    // Get instance field reference: private TMPro.TMP_Dropdown locationDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_locationDropdown();
    // Get instance field reference: private TMPro.TMP_Dropdown playerNameDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_playerNameDropdown();
    // Get instance field reference: private TMPro.TMP_Dropdown gameModeDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_gameModeDropdown();
    // Get instance field reference: private TMPro.TMP_Dropdown timeOfDayDropdown
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& dyn_timeOfDayDropdown();
    // Get instance field reference: private TMPro.TMP_Text networkStateTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_networkStateTextBox();
    // Get instance field reference: private TMPro.TMP_Text gameModeTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_gameModeTextBox();
    // Get instance field reference: private TMPro.TMP_Text currentRoomTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_currentRoomTextBox();
    // Get instance field reference: private TMPro.TMP_Text playerCountTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_playerCountTextBox();
    // Get instance field reference: private TMPro.TMP_Text roomVisibilityTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_roomVisibilityTextBox();
    // Get instance field reference: private TMPro.TMP_Text timeMultiplierTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_timeMultiplierTextBox();
    // Get instance field reference: private TMPro.TMP_Text versionTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_versionTextBox();
    // public System.Void .ctor()
    // Offset: 0x26DD480
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaDebugUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaDebugUI*, creationType>()));
    }
  }; // GorillaDebugUI
  #pragma pack(pop)
  static check_size<sizeof(GorillaDebugUI), 160 + sizeof(::TMPro::TMP_Text*)> __GlobalNamespace_GorillaDebugUISizeCheck;
  static_assert(sizeof(GorillaDebugUI) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaDebugUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
