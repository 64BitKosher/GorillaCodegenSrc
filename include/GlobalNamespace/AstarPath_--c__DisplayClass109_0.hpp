// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AstarPath
#include "GlobalNamespace/AstarPath.hpp"
// Including type: Pathfinding.AstarWorkItem
#include "Pathfinding/AstarWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath::$$c__DisplayClass109_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::$$c__DisplayClass109_0*, "", "AstarPath/<>c__DisplayClass109_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath/<>c__DisplayClass109_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class AstarPath::$$c__DisplayClass109_0 : public ::Il2CppObject {
    public:
    public:
    // public AstarPath <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::AstarPath* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // public Pathfinding.AstarWorkItem workItem
    // Size: 0x20
    // Offset: 0x18
    ::Pathfinding::AstarWorkItem workItem;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarWorkItem) == 0x20);
    public:
    // Get instance field reference: public AstarPath <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.AstarWorkItem workItem
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarWorkItem& dyn_workItem();
    // public System.Void .ctor()
    // Offset: 0x2983EFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath::$$c__DisplayClass109_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::$$c__DisplayClass109_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath::$$c__DisplayClass109_0*, creationType>()));
    }
    // System.Void <QueueGraphUpdates>b__0()
    // Offset: 0x2986BB8
    void $QueueGraphUpdates$b__0();
  }; // AstarPath/<>c__DisplayClass109_0
  #pragma pack(pop)
  static check_size<sizeof(AstarPath::$$c__DisplayClass109_0), 24 + sizeof(::Pathfinding::AstarWorkItem)> __GlobalNamespace_AstarPath_$$c__DisplayClass109_0SizeCheck;
  static_assert(sizeof(AstarPath::$$c__DisplayClass109_0) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass109_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass109_0::$QueueGraphUpdates$b__0
// Il2CppName: <QueueGraphUpdates>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::$$c__DisplayClass109_0::*)()>(&GlobalNamespace::AstarPath::$$c__DisplayClass109_0::$QueueGraphUpdates$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$$c__DisplayClass109_0*), "<QueueGraphUpdates>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
