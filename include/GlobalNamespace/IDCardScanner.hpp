// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBuildValidation
#include "GlobalNamespace/IBuildValidation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObject
  class TransferrableObject;
  // Forward declaring type: GhostLab
  class GhostLab;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IDCardScanner
  class IDCardScanner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::IDCardScanner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::IDCardScanner*, "", "IDCardScanner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: IDCardScanner
  // [TokenAttribute] Offset: FFFFFFFF
  class IDCardScanner : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IBuildValidation*/ {
    public:
    public:
    // public TransferrableObject myTransferrableObject
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::TransferrableObject* myTransferrableObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject*) == 0x8);
    // public GhostLab ghostLab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GhostLab* ghostLab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLab*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBuildValidation
    operator ::GlobalNamespace::IBuildValidation() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBuildValidation*>(this);
    }
    // Get instance field reference: public TransferrableObject myTransferrableObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& dyn_myTransferrableObject();
    // Get instance field reference: public GhostLab ghostLab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab*& dyn_ghostLab();
    // public System.Boolean BuildValidationCheck()
    // Offset: 0x2697030
    bool BuildValidationCheck();
    // private System.Void Awake()
    // Offset: 0x2697108
    void Awake();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x26971B8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x2697268
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IDCardScanner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IDCardScanner*, creationType>()));
    }
  }; // IDCardScanner
  #pragma pack(pop)
  static check_size<sizeof(IDCardScanner), 40 + sizeof(::GlobalNamespace::GhostLab*)> __GlobalNamespace_IDCardScannerSizeCheck;
  static_assert(sizeof(IDCardScanner) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IDCardScanner::BuildValidationCheck
// Il2CppName: BuildValidationCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IDCardScanner::*)()>(&GlobalNamespace::IDCardScanner::BuildValidationCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IDCardScanner*), "BuildValidationCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IDCardScanner::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IDCardScanner::*)()>(&GlobalNamespace::IDCardScanner::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IDCardScanner*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IDCardScanner::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IDCardScanner::*)(::UnityEngine::Collider*)>(&GlobalNamespace::IDCardScanner::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IDCardScanner*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IDCardScanner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
