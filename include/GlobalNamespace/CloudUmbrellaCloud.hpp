// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: UmbrellaItem
  class UmbrellaItem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CloudUmbrellaCloud
  class CloudUmbrellaCloud;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CloudUmbrellaCloud);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CloudUmbrellaCloud*, "", "CloudUmbrellaCloud");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: CloudUmbrellaCloud
  // [TokenAttribute] Offset: FFFFFFFF
  class CloudUmbrellaCloud : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UmbrellaItem umbrella
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::UmbrellaItem* umbrella;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UmbrellaItem*) == 0x8);
    // public UnityEngine.Transform cloudRotateXform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* cloudRotateXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Renderer cloudRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* cloudRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.AnimationCurve scaleCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* scaleCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Boolean rendererOn
    // Size: 0x1
    // Offset: 0x40
    bool rendererOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rendererOn and: umbrellaXform
    char __padding4[0x7] = {};
    // private UnityEngine.Transform umbrellaXform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* umbrellaXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform cloudScaleXform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* cloudScaleXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // static field const value: static private System.Single kHideAtScale
    static constexpr const float kHideAtScale = 0.1;
    // Get static field: static private System.Single kHideAtScale
    static float _get_kHideAtScale();
    // Set static field: static private System.Single kHideAtScale
    static void _set_kHideAtScale(float value);
    // static field const value: static private System.Single kHideAtScaleTolerance
    static constexpr const float kHideAtScaleTolerance = 0.01;
    // Get static field: static private System.Single kHideAtScaleTolerance
    static float _get_kHideAtScaleTolerance();
    // Set static field: static private System.Single kHideAtScaleTolerance
    static void _set_kHideAtScaleTolerance(float value);
    // Get instance field reference: public UmbrellaItem umbrella
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem*& dyn_umbrella();
    // Get instance field reference: public UnityEngine.Transform cloudRotateXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_cloudRotateXform();
    // Get instance field reference: public UnityEngine.Renderer cloudRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_cloudRenderer();
    // Get instance field reference: public UnityEngine.AnimationCurve scaleCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_scaleCurve();
    // Get instance field reference: private System.Boolean rendererOn
    [[deprecated("Use field access instead!")]] bool& dyn_rendererOn();
    // Get instance field reference: private UnityEngine.Transform umbrellaXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_umbrellaXform();
    // Get instance field reference: private UnityEngine.Transform cloudScaleXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_cloudScaleXform();
    // protected System.Void Awake()
    // Offset: 0x269F814
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0x269F870
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x269F9D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CloudUmbrellaCloud* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CloudUmbrellaCloud*, creationType>()));
    }
  }; // CloudUmbrellaCloud
  #pragma pack(pop)
  static check_size<sizeof(CloudUmbrellaCloud), 80 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_CloudUmbrellaCloudSizeCheck;
  static_assert(sizeof(CloudUmbrellaCloud) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CloudUmbrellaCloud::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CloudUmbrellaCloud::*)()>(&GlobalNamespace::CloudUmbrellaCloud::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CloudUmbrellaCloud*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CloudUmbrellaCloud::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CloudUmbrellaCloud::*)()>(&GlobalNamespace::CloudUmbrellaCloud::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CloudUmbrellaCloud*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CloudUmbrellaCloud::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
