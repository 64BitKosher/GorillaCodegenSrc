// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Tappable
  class Tappable;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TappableManager
  class TappableManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TappableManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TappableManager*, "", "TappableManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: TappableManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class TappableManager : public ::Photon::Pun::MonoBehaviourPun {
    public:
    public:
    // private System.Collections.Generic.List`1<Tappable> tappables
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::Tappable*>* tappables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Tappable*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> idSet
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<int>* idSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    public:
    // Get static field: static private TappableManager gManager
    static ::GlobalNamespace::TappableManager* _get_gManager();
    // Set static field: static private TappableManager gManager
    static void _set_gManager(::GlobalNamespace::TappableManager* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<Tappable> gRegistry
    static ::System::Collections::Generic::HashSet_1<::GlobalNamespace::Tappable*>* _get_gRegistry();
    // Set static field: static private System.Collections.Generic.HashSet`1<Tappable> gRegistry
    static void _set_gRegistry(::System::Collections::Generic::HashSet_1<::GlobalNamespace::Tappable*>* value);
    // Get instance field reference: private System.Collections.Generic.List`1<Tappable> tappables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::Tappable*>*& dyn_tappables();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> idSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_idSet();
    // private System.Void Awake()
    // Offset: 0x272D998
    void Awake();
    // private System.Void RegisterInstance(Tappable t)
    // Offset: 0x272DC9C
    void RegisterInstance(::GlobalNamespace::Tappable* t);
    // private System.Void UnregisterInstance(Tappable t)
    // Offset: 0x272DE30
    void UnregisterInstance(::GlobalNamespace::Tappable* t);
    // static public System.Void Register(Tappable t)
    // Offset: 0x272D548
    static void Register(::GlobalNamespace::Tappable* t);
    // static public System.Void Unregister(Tappable t)
    // Offset: 0x272D694
    static void Unregister(::GlobalNamespace::Tappable* t);
    // public System.Void DebugTestTap()
    // Offset: 0x272DF18
    void DebugTestTap();
    // public System.Void SendOnTapRPC(System.Int32 key, System.Single tapStrength, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x272E0AC
    void SendOnTapRPC(int key, float tapStrength, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void OnValidate()
    // Offset: 0x272E244
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x272E2F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TappableManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TappableManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TappableManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x272E3CC
    static void _cctor();
  }; // TappableManager
  #pragma pack(pop)
  static check_size<sizeof(TappableManager), 48 + sizeof(::System::Collections::Generic::HashSet_1<int>*)> __GlobalNamespace_TappableManagerSizeCheck;
  static_assert(sizeof(TappableManager) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)()>(&GlobalNamespace::TappableManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::RegisterInstance
// Il2CppName: RegisterInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)(::GlobalNamespace::Tappable*)>(&GlobalNamespace::TappableManager::RegisterInstance)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("", "Tappable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "RegisterInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::UnregisterInstance
// Il2CppName: UnregisterInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)(::GlobalNamespace::Tappable*)>(&GlobalNamespace::TappableManager::UnregisterInstance)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("", "Tappable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "UnregisterInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::Tappable*)>(&GlobalNamespace::TappableManager::Register)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("", "Tappable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::Tappable*)>(&GlobalNamespace::TappableManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("", "Tappable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::DebugTestTap
// Il2CppName: DebugTestTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)()>(&GlobalNamespace::TappableManager::DebugTestTap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "DebugTestTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::SendOnTapRPC
// Il2CppName: SendOnTapRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)(int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::TappableManager::SendOnTapRPC)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "SendOnTapRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, tapStrength, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableManager::*)()>(&GlobalNamespace::TappableManager::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TappableManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::TappableManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
