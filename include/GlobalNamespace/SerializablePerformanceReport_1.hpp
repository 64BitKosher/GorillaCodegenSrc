// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SerializablePerformanceReport`1<T>
  template<typename T>
  class SerializablePerformanceReport_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::SerializablePerformanceReport_1, "", "SerializablePerformanceReport`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: SerializablePerformanceReport`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class SerializablePerformanceReport_1 : public ::Il2CppObject {
    public:
    public:
    // public System.String reportDate
    // Size: 0x8
    // Offset: 0x0
    ::StringW reportDate;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String version
    // Size: 0x8
    // Offset: 0x0
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<T> results
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* results;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.String reportDate
    [[deprecated("Use field access instead!")]] ::StringW& dyn_reportDate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SerializablePerformanceReport_1::dyn_reportDate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reportDate"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.String version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SerializablePerformanceReport_1::dyn_version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Collections.Generic.List`1<T> results
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_results() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SerializablePerformanceReport_1::dyn_results");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "results"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializablePerformanceReport_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SerializablePerformanceReport_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializablePerformanceReport_1<T>*, creationType>()));
    }
  }; // SerializablePerformanceReport`1
  // Could not write size check! Type: SerializablePerformanceReport`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
