// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Example
  class Example;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Example);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Example*, "", "Example");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x138
  #pragma pack(push, 1)
  // Autogenerated type: Example
  // [TokenAttribute] Offset: FFFFFFFF
  class Example : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean debugPoint
    // Size: 0x1
    // Offset: 0x20
    bool debugPoint;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugPoint and: debugPoint_Position
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 debugPoint_Position
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 debugPoint_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single debugPoint_Scale
    // Size: 0x4
    // Offset: 0x30
    float debugPoint_Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugPoint_Color
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Color debugPoint_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugBounds
    // Size: 0x1
    // Offset: 0x44
    bool debugBounds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugBounds and: debugBounds_Position
    char __padding4[0x3] = {};
    // public UnityEngine.Vector3 debugBounds_Position
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 debugBounds_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 debugBounds_Size
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 debugBounds_Size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color debugBounds_Color
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color debugBounds_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugCircle
    // Size: 0x1
    // Offset: 0x70
    bool debugCircle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugCircle and: debugCircle_Up
    char __padding8[0x3] = {};
    // public UnityEngine.Vector3 debugCircle_Up
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 debugCircle_Up;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single debugCircle_Radius
    // Size: 0x4
    // Offset: 0x80
    float debugCircle_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugCircle_Color
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Color debugCircle_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugWireSphere
    // Size: 0x1
    // Offset: 0x94
    bool debugWireSphere;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugWireSphere and: debugWireSphere_Radius
    char __padding12[0x3] = {};
    // public System.Single debugWireSphere_Radius
    // Size: 0x4
    // Offset: 0x98
    float debugWireSphere_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugWireSphere_Color
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color debugWireSphere_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugCylinder
    // Size: 0x1
    // Offset: 0xAC
    bool debugCylinder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugCylinder and: debugCylinder_End
    char __padding15[0x3] = {};
    // public UnityEngine.Vector3 debugCylinder_End
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 debugCylinder_End;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single debugCylinder_Radius
    // Size: 0x4
    // Offset: 0xBC
    float debugCylinder_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugCylinder_Color
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Color debugCylinder_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugCone
    // Size: 0x1
    // Offset: 0xD0
    bool debugCone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugCone and: debugCone_Direction
    char __padding19[0x3] = {};
    // public UnityEngine.Vector3 debugCone_Direction
    // Size: 0xC
    // Offset: 0xD4
    ::UnityEngine::Vector3 debugCone_Direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single debugCone_Angle
    // Size: 0x4
    // Offset: 0xE0
    float debugCone_Angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugCone_Color
    // Size: 0x10
    // Offset: 0xE4
    ::UnityEngine::Color debugCone_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugArrow
    // Size: 0x1
    // Offset: 0xF4
    bool debugArrow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugArrow and: debugArrow_Direction
    char __padding23[0x3] = {};
    // public UnityEngine.Vector3 debugArrow_Direction
    // Size: 0xC
    // Offset: 0xF8
    ::UnityEngine::Vector3 debugArrow_Direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color debugArrow_Color
    // Size: 0x10
    // Offset: 0x104
    ::UnityEngine::Color debugArrow_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean debugCapsule
    // Size: 0x1
    // Offset: 0x114
    bool debugCapsule;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugCapsule and: debugCapsule_End
    char __padding26[0x3] = {};
    // public UnityEngine.Vector3 debugCapsule_End
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 debugCapsule_End;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single debugCapsule_Radius
    // Size: 0x4
    // Offset: 0x124
    float debugCapsule_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color debugCapsule_Color
    // Size: 0x10
    // Offset: 0x128
    ::UnityEngine::Color debugCapsule_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: public System.Boolean debugPoint
    [[deprecated("Use field access instead!")]] bool& dyn_debugPoint();
    // Get instance field reference: public UnityEngine.Vector3 debugPoint_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugPoint_Position();
    // Get instance field reference: public System.Single debugPoint_Scale
    [[deprecated("Use field access instead!")]] float& dyn_debugPoint_Scale();
    // Get instance field reference: public UnityEngine.Color debugPoint_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugPoint_Color();
    // Get instance field reference: public System.Boolean debugBounds
    [[deprecated("Use field access instead!")]] bool& dyn_debugBounds();
    // Get instance field reference: public UnityEngine.Vector3 debugBounds_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugBounds_Position();
    // Get instance field reference: public UnityEngine.Vector3 debugBounds_Size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugBounds_Size();
    // Get instance field reference: public UnityEngine.Color debugBounds_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugBounds_Color();
    // Get instance field reference: public System.Boolean debugCircle
    [[deprecated("Use field access instead!")]] bool& dyn_debugCircle();
    // Get instance field reference: public UnityEngine.Vector3 debugCircle_Up
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugCircle_Up();
    // Get instance field reference: public System.Single debugCircle_Radius
    [[deprecated("Use field access instead!")]] float& dyn_debugCircle_Radius();
    // Get instance field reference: public UnityEngine.Color debugCircle_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugCircle_Color();
    // Get instance field reference: public System.Boolean debugWireSphere
    [[deprecated("Use field access instead!")]] bool& dyn_debugWireSphere();
    // Get instance field reference: public System.Single debugWireSphere_Radius
    [[deprecated("Use field access instead!")]] float& dyn_debugWireSphere_Radius();
    // Get instance field reference: public UnityEngine.Color debugWireSphere_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugWireSphere_Color();
    // Get instance field reference: public System.Boolean debugCylinder
    [[deprecated("Use field access instead!")]] bool& dyn_debugCylinder();
    // Get instance field reference: public UnityEngine.Vector3 debugCylinder_End
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugCylinder_End();
    // Get instance field reference: public System.Single debugCylinder_Radius
    [[deprecated("Use field access instead!")]] float& dyn_debugCylinder_Radius();
    // Get instance field reference: public UnityEngine.Color debugCylinder_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugCylinder_Color();
    // Get instance field reference: public System.Boolean debugCone
    [[deprecated("Use field access instead!")]] bool& dyn_debugCone();
    // Get instance field reference: public UnityEngine.Vector3 debugCone_Direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugCone_Direction();
    // Get instance field reference: public System.Single debugCone_Angle
    [[deprecated("Use field access instead!")]] float& dyn_debugCone_Angle();
    // Get instance field reference: public UnityEngine.Color debugCone_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugCone_Color();
    // Get instance field reference: public System.Boolean debugArrow
    [[deprecated("Use field access instead!")]] bool& dyn_debugArrow();
    // Get instance field reference: public UnityEngine.Vector3 debugArrow_Direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugArrow_Direction();
    // Get instance field reference: public UnityEngine.Color debugArrow_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugArrow_Color();
    // Get instance field reference: public System.Boolean debugCapsule
    [[deprecated("Use field access instead!")]] bool& dyn_debugCapsule();
    // Get instance field reference: public UnityEngine.Vector3 debugCapsule_End
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugCapsule_End();
    // Get instance field reference: public System.Single debugCapsule_Radius
    [[deprecated("Use field access instead!")]] float& dyn_debugCapsule_Radius();
    // Get instance field reference: public UnityEngine.Color debugCapsule_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_debugCapsule_Color();
    // private System.Void OnDrawGizmos()
    // Offset: 0x268DC54
    void OnDrawGizmos();
    // private System.Void Update()
    // Offset: 0x268DE24
    void Update();
    // public System.Void .ctor()
    // Offset: 0x268DFE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Example* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Example::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Example*, creationType>()));
    }
  }; // Example
  #pragma pack(pop)
  static check_size<sizeof(Example), 296 + sizeof(::UnityEngine::Color)> __GlobalNamespace_ExampleSizeCheck;
  static_assert(sizeof(Example) == 0x138);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Example::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Example::*)()>(&GlobalNamespace::Example::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Example*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Example::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Example::*)()>(&GlobalNamespace::Example::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Example*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Example::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
