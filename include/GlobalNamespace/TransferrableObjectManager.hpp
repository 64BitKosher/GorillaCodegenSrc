// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObject
  class TransferrableObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObjectManager
  class TransferrableObjectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransferrableObjectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObjectManager*, "", "TransferrableObjectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: TransferrableObjectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TransferrableObjectManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public TransferrableObjectManager instance
    static ::GlobalNamespace::TransferrableObjectManager* _get_instance();
    // Set static field: static public TransferrableObjectManager instance
    static void _set_instance(::GlobalNamespace::TransferrableObjectManager* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static public readonly System.Collections.Generic.List`1<TransferrableObject> transObs
    static ::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>* _get_transObs();
    // Set static field: static public readonly System.Collections.Generic.List`1<TransferrableObject> transObs
    static void _set_transObs(::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>* value);
    // protected System.Void Awake()
    // Offset: 0x26CB460
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x26CB63C
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x26CB70C
    void LateUpdate();
    // static public System.Void CreateManager()
    // Offset: 0x26CB78C
    static void CreateManager();
    // static private System.Void SetInstance(TransferrableObjectManager manager)
    // Offset: 0x26CB558
    static void SetInstance(::GlobalNamespace::TransferrableObjectManager* manager);
    // static public System.Void Register(TransferrableObject transOb)
    // Offset: 0x26CB84C
    static void Register(::GlobalNamespace::TransferrableObject* transOb);
    // static public System.Void Unregister(TransferrableObject transOb)
    // Offset: 0x26CB9A0
    static void Unregister(::GlobalNamespace::TransferrableObject* transOb);
    // public System.Void .ctor()
    // Offset: 0x26CBAA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferrableObjectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferrableObjectManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26CBAA8
    static void _cctor();
  }; // TransferrableObjectManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObjectManager::*)()>(&GlobalNamespace::TransferrableObjectManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObjectManager::*)()>(&GlobalNamespace::TransferrableObjectManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObjectManager::*)()>(&GlobalNamespace::TransferrableObjectManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::CreateManager
// Il2CppName: CreateManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::TransferrableObjectManager::CreateManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "CreateManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::SetInstance
// Il2CppName: SetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::TransferrableObjectManager*)>(&GlobalNamespace::TransferrableObjectManager::SetInstance)> {
  static const MethodInfo* get() {
    static auto* manager = &::il2cpp_utils::GetClassFromName("", "TransferrableObjectManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "SetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manager});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::TransferrableObject*)>(&GlobalNamespace::TransferrableObjectManager::Register)> {
  static const MethodInfo* get() {
    static auto* transOb = &::il2cpp_utils::GetClassFromName("", "TransferrableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transOb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::TransferrableObject*)>(&GlobalNamespace::TransferrableObjectManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* transOb = &::il2cpp_utils::GetClassFromName("", "TransferrableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transOb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::TransferrableObjectManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
