// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: GorillaNetworking.CosmeticsController
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRigAnchorOverrides
  class VRRigAnchorOverrides;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRigAnchorOverrides);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigAnchorOverrides*, "", "VRRigAnchorOverrides");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: VRRigAnchorOverrides
  // [TokenAttribute] Offset: FFFFFFFF
  class VRRigAnchorOverrides : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // UnityEngine.Transform nameDefaultAnchor
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* nameDefaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // UnityEngine.Transform nameTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* nameTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // UnityEngine.Transform chestDefaultTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* chestDefaultTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // UnityEngine.Transform huntComputer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* huntComputer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // UnityEngine.Transform huntComputerDefaultAnchor
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* huntComputerDefaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform huntDefaultTransform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* huntDefaultTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Transform builderResizeButton
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* builderResizeButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Transform builderResizeButtonDefaultAnchor
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* builderResizeButtonDefaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform builderResizeButtonDefaultTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* builderResizeButtonDefaultTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private readonly UnityEngine.Transform[] overrideAnchors
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Transform*> overrideAnchors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private UnityEngine.GameObject nameLastObjectToAttach
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* nameLastObjectToAttach;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform currentBadgeTransform
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* currentBadgeTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 badgeDefaultPos
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 badgeDefaultPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion badgeDefaultRot
    // Size: 0x10
    // Offset: 0x8C
    ::UnityEngine::Quaternion badgeDefaultRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: badgeDefaultRot and: badgeAnchors
    char __padding13[0x4] = {};
    // private UnityEngine.GameObject[] badgeAnchors
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::GameObject*> badgeAnchors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] nameAnchors
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::GameObject*> nameAnchors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.Transform friendshipBraceletLeftDefaultAnchor
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Transform* friendshipBraceletLeftDefaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform friendshipBraceletLeftAnchor
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Transform* friendshipBraceletLeftAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform friendshipBraceletRightDefaultAnchor
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* friendshipBraceletRightDefaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform friendshipBraceletRightAnchor
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Transform* friendshipBraceletRightAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Transform nameDefaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_nameDefaultAnchor();
    // Get instance field reference: UnityEngine.Transform nameTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_nameTransform();
    // Get instance field reference: UnityEngine.Transform chestDefaultTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestDefaultTransform();
    // Get instance field reference: UnityEngine.Transform huntComputer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_huntComputer();
    // Get instance field reference: UnityEngine.Transform huntComputerDefaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_huntComputerDefaultAnchor();
    // Get instance field reference: private UnityEngine.Transform huntDefaultTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_huntDefaultTransform();
    // Get instance field reference: protected UnityEngine.Transform builderResizeButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_builderResizeButton();
    // Get instance field reference: protected UnityEngine.Transform builderResizeButtonDefaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_builderResizeButtonDefaultAnchor();
    // Get instance field reference: private UnityEngine.Transform builderResizeButtonDefaultTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_builderResizeButtonDefaultTransform();
    // Get instance field reference: private readonly UnityEngine.Transform[] overrideAnchors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_overrideAnchors();
    // Get instance field reference: private UnityEngine.GameObject nameLastObjectToAttach
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_nameLastObjectToAttach();
    // Get instance field reference: private UnityEngine.Transform currentBadgeTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentBadgeTransform();
    // Get instance field reference: private UnityEngine.Vector3 badgeDefaultPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_badgeDefaultPos();
    // Get instance field reference: private UnityEngine.Quaternion badgeDefaultRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_badgeDefaultRot();
    // Get instance field reference: private UnityEngine.GameObject[] badgeAnchors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_badgeAnchors();
    // Get instance field reference: private UnityEngine.GameObject[] nameAnchors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_nameAnchors();
    // Get instance field reference: public UnityEngine.Transform friendshipBraceletLeftDefaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_friendshipBraceletLeftDefaultAnchor();
    // Get instance field reference: public UnityEngine.Transform friendshipBraceletLeftAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_friendshipBraceletLeftAnchor();
    // Get instance field reference: public UnityEngine.Transform friendshipBraceletRightDefaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_friendshipBraceletRightDefaultAnchor();
    // Get instance field reference: public UnityEngine.Transform friendshipBraceletRightAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_friendshipBraceletRightAnchor();
    // public UnityEngine.Transform get_CurrentBadgeTransform()
    // Offset: 0x26CC2F8
    ::UnityEngine::Transform* get_CurrentBadgeTransform();
    // public System.Void set_CurrentBadgeTransform(UnityEngine.Transform value)
    // Offset: 0x26CC300
    void set_CurrentBadgeTransform(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_HuntDefaultAnchor()
    // Offset: 0x26CC5D4
    ::UnityEngine::Transform* get_HuntDefaultAnchor();
    // public UnityEngine.Transform get_HuntComputer()
    // Offset: 0x26CC5DC
    ::UnityEngine::Transform* get_HuntComputer();
    // public UnityEngine.Transform get_BuilderWatchAnchor()
    // Offset: 0x26CC5E4
    ::UnityEngine::Transform* get_BuilderWatchAnchor();
    // public UnityEngine.Transform get_BuilderWatch()
    // Offset: 0x26CC5EC
    ::UnityEngine::Transform* get_BuilderWatch();
    // private System.Void Awake()
    // Offset: 0x26CC5F4
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x26CC6CC
    void OnEnable();
    // private System.Int32 MapPositionToIndex(TransferrableObject/PositionState pos)
    // Offset: 0x26CC6B8
    int MapPositionToIndex(::GlobalNamespace::TransferrableObject::PositionState pos);
    // public System.Void OverrideAnchor(TransferrableObject/PositionState pos, UnityEngine.Transform anchor)
    // Offset: 0x26CC780
    void OverrideAnchor(::GlobalNamespace::TransferrableObject::PositionState pos, ::UnityEngine::Transform* anchor);
    // public UnityEngine.Transform AnchorOverride(TransferrableObject/PositionState pos, UnityEngine.Transform fallback)
    // Offset: 0x26C7898
    ::UnityEngine::Transform* AnchorOverride(::GlobalNamespace::TransferrableObject::PositionState pos, ::UnityEngine::Transform* fallback);
    // public System.Void UpdateNameAnchor(UnityEngine.GameObject nameAnchor, GorillaNetworking.CosmeticsController/CosmeticSlots slot)
    // Offset: 0x26CCB24
    void UpdateNameAnchor(::UnityEngine::GameObject* nameAnchor, ::GorillaNetworking::CosmeticsController::CosmeticSlots slot);
    // private System.Void UpdateName()
    // Offset: 0x26CCBD8
    void UpdateName();
    // public System.Void UpdateBadgeAnchor(UnityEngine.GameObject badgeAnchor, GorillaNetworking.CosmeticsController/CosmeticSlots slot)
    // Offset: 0x26CCD88
    void UpdateBadgeAnchor(::UnityEngine::GameObject* badgeAnchor, ::GorillaNetworking::CosmeticsController::CosmeticSlots slot);
    // private System.Void UpdateBadge()
    // Offset: 0x26CC478
    void UpdateBadge();
    // private System.Void ResetBadge()
    // Offset: 0x26CC3D8
    void ResetBadge();
    // public System.Void .ctor()
    // Offset: 0x26CCE10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRigAnchorOverrides* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRigAnchorOverrides*, creationType>()));
    }
  }; // VRRigAnchorOverrides
  #pragma pack(pop)
  static check_size<sizeof(VRRigAnchorOverrides), 200 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_VRRigAnchorOverridesSizeCheck;
  static_assert(sizeof(VRRigAnchorOverrides) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::get_CurrentBadgeTransform
// Il2CppName: get_CurrentBadgeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::get_CurrentBadgeTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "get_CurrentBadgeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::set_CurrentBadgeTransform
// Il2CppName: set_CurrentBadgeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)(::UnityEngine::Transform*)>(&GlobalNamespace::VRRigAnchorOverrides::set_CurrentBadgeTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "set_CurrentBadgeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::get_HuntDefaultAnchor
// Il2CppName: get_HuntDefaultAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::get_HuntDefaultAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "get_HuntDefaultAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::get_HuntComputer
// Il2CppName: get_HuntComputer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::get_HuntComputer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "get_HuntComputer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatchAnchor
// Il2CppName: get_BuilderWatchAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatchAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "get_BuilderWatchAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatch
// Il2CppName: get_BuilderWatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "get_BuilderWatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::MapPositionToIndex
// Il2CppName: MapPositionToIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRigAnchorOverrides::*)(::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::VRRigAnchorOverrides::MapPositionToIndex)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "MapPositionToIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::OverrideAnchor
// Il2CppName: OverrideAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)(::GlobalNamespace::TransferrableObject::PositionState, ::UnityEngine::Transform*)>(&GlobalNamespace::VRRigAnchorOverrides::OverrideAnchor)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "OverrideAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::AnchorOverride
// Il2CppName: AnchorOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigAnchorOverrides::*)(::GlobalNamespace::TransferrableObject::PositionState, ::UnityEngine::Transform*)>(&GlobalNamespace::VRRigAnchorOverrides::AnchorOverride)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    static auto* fallback = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "AnchorOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, fallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::UpdateNameAnchor
// Il2CppName: UpdateNameAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)(::UnityEngine::GameObject*, ::GorillaNetworking::CosmeticsController::CosmeticSlots)>(&GlobalNamespace::VRRigAnchorOverrides::UpdateNameAnchor)> {
  static const MethodInfo* get() {
    static auto* nameAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* slot = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSlots")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "UpdateNameAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameAnchor, slot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::UpdateName
// Il2CppName: UpdateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::UpdateName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "UpdateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::UpdateBadgeAnchor
// Il2CppName: UpdateBadgeAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)(::UnityEngine::GameObject*, ::GorillaNetworking::CosmeticsController::CosmeticSlots)>(&GlobalNamespace::VRRigAnchorOverrides::UpdateBadgeAnchor)> {
  static const MethodInfo* get() {
    static auto* badgeAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* slot = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSlots")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "UpdateBadgeAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{badgeAnchor, slot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::UpdateBadge
// Il2CppName: UpdateBadge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::UpdateBadge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "UpdateBadge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::ResetBadge
// Il2CppName: ResetBadge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigAnchorOverrides::*)()>(&GlobalNamespace::VRRigAnchorOverrides::ResetBadge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigAnchorOverrides*), "ResetBadge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigAnchorOverrides::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
