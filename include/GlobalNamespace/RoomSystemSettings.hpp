// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CallLimiterWithCooldown
  class CallLimiterWithCooldown;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomSystemSettings
  class RoomSystemSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomSystemSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystemSettings*, "", "RoomSystemSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: RoomSystemSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class RoomSystemSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private CallLimiterWithCooldown statusEffectLimiter
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::CallLimiterWithCooldown* statusEffectLimiter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CallLimiterWithCooldown*) == 0x8);
    // private CallLimiterWithCooldown soundEffectLimiter
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::CallLimiterWithCooldown* soundEffectLimiter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CallLimiterWithCooldown*) == 0x8);
    // private CallLimiterWithCooldown soundEffectOtherLimiter
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::CallLimiterWithCooldown* soundEffectOtherLimiter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CallLimiterWithCooldown*) == 0x8);
    // private UnityEngine.GameObject playerImpactEffect
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* playerImpactEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 pausedDCTimer
    // Size: 0x4
    // Offset: 0x38
    int pausedDCTimer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private CallLimiterWithCooldown statusEffectLimiter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CallLimiterWithCooldown*& dyn_statusEffectLimiter();
    // Get instance field reference: private CallLimiterWithCooldown soundEffectLimiter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CallLimiterWithCooldown*& dyn_soundEffectLimiter();
    // Get instance field reference: private CallLimiterWithCooldown soundEffectOtherLimiter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CallLimiterWithCooldown*& dyn_soundEffectOtherLimiter();
    // Get instance field reference: private UnityEngine.GameObject playerImpactEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerImpactEffect();
    // Get instance field reference: private System.Int32 pausedDCTimer
    [[deprecated("Use field access instead!")]] int& dyn_pausedDCTimer();
    // public CallLimiterWithCooldown get_StatusEffectLimiter()
    // Offset: 0x27713B8
    ::GlobalNamespace::CallLimiterWithCooldown* get_StatusEffectLimiter();
    // public CallLimiterWithCooldown get_SoundEffectLimiter()
    // Offset: 0x27713C0
    ::GlobalNamespace::CallLimiterWithCooldown* get_SoundEffectLimiter();
    // public CallLimiterWithCooldown get_SoundEffectOtherLimiter()
    // Offset: 0x27713C8
    ::GlobalNamespace::CallLimiterWithCooldown* get_SoundEffectOtherLimiter();
    // public UnityEngine.GameObject get_PlayerImpactEffect()
    // Offset: 0x27713D0
    ::UnityEngine::GameObject* get_PlayerImpactEffect();
    // public System.Int32 get_PausedDCTimer()
    // Offset: 0x27713D8
    int get_PausedDCTimer();
    // public System.Void .ctor()
    // Offset: 0x27713E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomSystemSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomSystemSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomSystemSettings*, creationType>()));
    }
  }; // RoomSystemSettings
  #pragma pack(pop)
  static check_size<sizeof(RoomSystemSettings), 56 + sizeof(int)> __GlobalNamespace_RoomSystemSettingsSizeCheck;
  static_assert(sizeof(RoomSystemSettings) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::get_StatusEffectLimiter
// Il2CppName: get_StatusEffectLimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::CallLimiterWithCooldown* (GlobalNamespace::RoomSystemSettings::*)()>(&GlobalNamespace::RoomSystemSettings::get_StatusEffectLimiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystemSettings*), "get_StatusEffectLimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::get_SoundEffectLimiter
// Il2CppName: get_SoundEffectLimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::CallLimiterWithCooldown* (GlobalNamespace::RoomSystemSettings::*)()>(&GlobalNamespace::RoomSystemSettings::get_SoundEffectLimiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystemSettings*), "get_SoundEffectLimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::get_SoundEffectOtherLimiter
// Il2CppName: get_SoundEffectOtherLimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::CallLimiterWithCooldown* (GlobalNamespace::RoomSystemSettings::*)()>(&GlobalNamespace::RoomSystemSettings::get_SoundEffectOtherLimiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystemSettings*), "get_SoundEffectOtherLimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::get_PlayerImpactEffect
// Il2CppName: get_PlayerImpactEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::RoomSystemSettings::*)()>(&GlobalNamespace::RoomSystemSettings::get_PlayerImpactEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystemSettings*), "get_PlayerImpactEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::get_PausedDCTimer
// Il2CppName: get_PausedDCTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::RoomSystemSettings::*)()>(&GlobalNamespace::RoomSystemSettings::get_PausedDCTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystemSettings*), "get_PausedDCTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystemSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
