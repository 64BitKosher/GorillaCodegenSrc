// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WaterSurfaceMaterialController
  class WaterSurfaceMaterialController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WaterSurfaceMaterialController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WaterSurfaceMaterialController*, "", "WaterSurfaceMaterialController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: WaterSurfaceMaterialController
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class WaterSurfaceMaterialController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single ScrollX
    // Size: 0x4
    // Offset: 0x20
    float ScrollX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ScrollY
    // Size: 0x4
    // Offset: 0x24
    float ScrollY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x28
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: Scale and: renderer
    char __padding2[0x4] = {};
    // private UnityEngine.Renderer renderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock matPropBlock
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MaterialPropertyBlock* matPropBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32 shaderProp_ScrollSpeedAndScale
    static int _get_shaderProp_ScrollSpeedAndScale();
    // Set static field: static private readonly System.Int32 shaderProp_ScrollSpeedAndScale
    static void _set_shaderProp_ScrollSpeedAndScale(int value);
    // Get instance field reference: public System.Single ScrollX
    [[deprecated("Use field access instead!")]] float& dyn_ScrollX();
    // Get instance field reference: public System.Single ScrollY
    [[deprecated("Use field access instead!")]] float& dyn_ScrollY();
    // Get instance field reference: public System.Single Scale
    [[deprecated("Use field access instead!")]] float& dyn_Scale();
    // Get instance field reference: private UnityEngine.Renderer renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_renderer();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
    // protected System.Void OnEnable()
    // Offset: 0x268F100
    void OnEnable();
    // private System.Void ApplyProperties()
    // Offset: 0x268F1A0
    void ApplyProperties();
    // public System.Void .ctor()
    // Offset: 0x268F230
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterSurfaceMaterialController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSurfaceMaterialController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterSurfaceMaterialController*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x268F250
    static void _cctor();
  }; // WaterSurfaceMaterialController
  #pragma pack(pop)
  static check_size<sizeof(WaterSurfaceMaterialController), 56 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GlobalNamespace_WaterSurfaceMaterialControllerSizeCheck;
  static_assert(sizeof(WaterSurfaceMaterialController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WaterSurfaceMaterialController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSurfaceMaterialController::*)()>(&GlobalNamespace::WaterSurfaceMaterialController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSurfaceMaterialController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSurfaceMaterialController::ApplyProperties
// Il2CppName: ApplyProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSurfaceMaterialController::*)()>(&GlobalNamespace::WaterSurfaceMaterialController::ApplyProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSurfaceMaterialController*), "ApplyProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSurfaceMaterialController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WaterSurfaceMaterialController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::WaterSurfaceMaterialController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSurfaceMaterialController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
