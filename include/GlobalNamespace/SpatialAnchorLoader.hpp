// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRSpatialAnchor/UnboundAnchor
#include "GlobalNamespace/OVRSpatialAnchor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpatialAnchorLoader
  class SpatialAnchorLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpatialAnchorLoader);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpatialAnchorLoader*, "", "SpatialAnchorLoader");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SpatialAnchorLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class SpatialAnchorLoader : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private OVRSpatialAnchor _anchorPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRSpatialAnchor* anchorPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpatialAnchor*) == 0x8);
    // private System.Action`2<OVRSpatialAnchor/UnboundAnchor,System.Boolean> _onLoadAnchor
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool>* onLoadAnchor;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool>*) == 0x8);
    public:
    // Get instance field reference: private OVRSpatialAnchor _anchorPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpatialAnchor*& dyn__anchorPrefab();
    // Get instance field reference: private System.Action`2<OVRSpatialAnchor/UnboundAnchor,System.Boolean> _onLoadAnchor
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool>*& dyn__onLoadAnchor();
    // public System.Void LoadAnchorsByUuid()
    // Offset: 0x294BB44
    void LoadAnchorsByUuid();
    // private System.Void Awake()
    // Offset: 0x294C50C
    void Awake();
    // private System.Void Load(OVRSpatialAnchor/LoadOptions options)
    // Offset: 0x294C42C
    void Load(::GlobalNamespace::OVRSpatialAnchor::LoadOptions options);
    // private System.Void OnLocalized(OVRSpatialAnchor/UnboundAnchor unboundAnchor, System.Boolean success)
    // Offset: 0x294C590
    void OnLocalized(::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor unboundAnchor, bool success);
    // static private System.Void Log(System.String message)
    // Offset: 0x294C3A0
    static void Log(::StringW message);
    // public System.Void .ctor()
    // Offset: 0x294C740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpatialAnchorLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpatialAnchorLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpatialAnchorLoader*, creationType>()));
    }
    // private System.Void <Load>b__4_0(OVRSpatialAnchor/UnboundAnchor[] anchors)
    // Offset: 0x294C748
    void $Load$b__4_0(::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor> anchors);
  }; // SpatialAnchorLoader
  #pragma pack(pop)
  static check_size<sizeof(SpatialAnchorLoader), 40 + sizeof(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool>*)> __GlobalNamespace_SpatialAnchorLoaderSizeCheck;
  static_assert(sizeof(SpatialAnchorLoader) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::LoadAnchorsByUuid
// Il2CppName: LoadAnchorsByUuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpatialAnchorLoader::*)()>(&GlobalNamespace::SpatialAnchorLoader::LoadAnchorsByUuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "LoadAnchorsByUuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpatialAnchorLoader::*)()>(&GlobalNamespace::SpatialAnchorLoader::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpatialAnchorLoader::*)(::GlobalNamespace::OVRSpatialAnchor::LoadOptions)>(&GlobalNamespace::SpatialAnchorLoader::Load)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/LoadOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::OnLocalized
// Il2CppName: OnLocalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpatialAnchorLoader::*)(::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool)>(&GlobalNamespace::SpatialAnchorLoader::OnLocalized)> {
  static const MethodInfo* get() {
    static auto* unboundAnchor = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/UnboundAnchor")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "OnLocalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unboundAnchor, success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::SpatialAnchorLoader::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SpatialAnchorLoader::$Load$b__4_0
// Il2CppName: <Load>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpatialAnchorLoader::*)(::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>)>(&GlobalNamespace::SpatialAnchorLoader::$Load$b__4_0)> {
  static const MethodInfo* get() {
    static auto* anchors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/UnboundAnchor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialAnchorLoader*), "<Load>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors});
  }
};
