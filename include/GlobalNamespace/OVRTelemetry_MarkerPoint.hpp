// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTelemetry
#include "GlobalNamespace/OVRTelemetry.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTelemetry::MarkerPoint, "", "OVRTelemetry/MarkerPoint");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTelemetry/MarkerPoint
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRTelemetry::MarkerPoint/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly System.Int32 <NameHandle>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int NameHandle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MarkerPoint
    constexpr MarkerPoint(int NameHandle_ = {}) noexcept : NameHandle{NameHandle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return NameHandle;
    }
    // Get instance field reference: private readonly System.Int32 <NameHandle>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NameHandle$k__BackingField();
    // public System.Int32 get_NameHandle()
    // Offset: 0x492F6B8
    int get_NameHandle();
    // public System.Void .ctor(System.String name)
    // Offset: 0x492F6C0
    MarkerPoint(::StringW name);
    // public System.Void Dispose()
    // Offset: 0x492F748
    void Dispose();
  }; // OVRTelemetry/MarkerPoint
  #pragma pack(pop)
  static check_size<sizeof(OVRTelemetry::MarkerPoint), 0 + sizeof(int)> __GlobalNamespace_OVRTelemetry_MarkerPointSizeCheck;
  static_assert(sizeof(OVRTelemetry::MarkerPoint) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::MarkerPoint::get_NameHandle
// Il2CppName: get_NameHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRTelemetry::MarkerPoint::*)()>(&GlobalNamespace::OVRTelemetry::MarkerPoint::get_NameHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::MarkerPoint), "get_NameHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::MarkerPoint::MarkerPoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::MarkerPoint::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetry::MarkerPoint::*)()>(&GlobalNamespace::OVRTelemetry::MarkerPoint::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::MarkerPoint), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
