// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TimeSince
  struct TimeSince;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TimeSince, "", "TimeSince");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TimeSince
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimeSince/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.DateTime _dt
    // Size: 0x8
    // Offset: 0x0
    ::System::DateTime dt;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    public:
    // Creating value type constructor for type: TimeSince
    constexpr TimeSince(::System::DateTime dt_ = {}) noexcept : dt{dt_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::DateTime
    constexpr operator ::System::DateTime() const noexcept {
      return dt;
    }
    // static field const value: static private System.Double INT32_MAX
    static constexpr const double INT32_MAX = 2147483647;
    // Get static field: static private System.Double INT32_MAX
    static double _get_INT32_MAX();
    // Set static field: static private System.Double INT32_MAX
    static void _set_INT32_MAX(double value);
    // Get instance field reference: private System.DateTime _dt
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__dt();
    // public System.Double get_secondsElapsed()
    // Offset: 0x2751828
    double get_secondsElapsed();
    // public System.Single get_secondsElapsedFloat()
    // Offset: 0x27518B0
    float get_secondsElapsedFloat();
    // public System.Int32 get_secondsElapsedInt()
    // Offset: 0x27518C4
    int get_secondsElapsedInt();
    // public System.UInt32 get_secondsElapsedUint()
    // Offset: 0x27518EC
    uint get_secondsElapsedUint();
    // public System.Int64 get_secondsElapsedLong()
    // Offset: 0x275190C
    int64_t get_secondsElapsedLong();
    // public System.TimeSpan get_secondsElapsedSpan()
    // Offset: 0x2751934
    ::System::TimeSpan get_secondsElapsedSpan();
    // public System.Void .ctor(System.DateTime dt)
    // Offset: 0x27519A0
    // ABORTED: conflicts with another method.  TimeSince(::System::DateTime dt);
    // public System.Void .ctor(System.Int32 elapsed)
    // Offset: 0x27519A8
    TimeSince(int elapsed);
    // public System.Void .ctor(System.UInt32 elapsed)
    // Offset: 0x2751A28
    TimeSince(uint elapsed);
    // public System.Void .ctor(System.Single elapsed)
    // Offset: 0x2751AA8
    TimeSince(float elapsed);
    // public System.Void .ctor(System.Double elapsed)
    // Offset: 0x2751B28
    TimeSince(double elapsed);
    // public System.Void .ctor(System.Int64 elapsed)
    // Offset: 0x2751BA4
    TimeSince(int64_t elapsed);
    // public System.Void .ctor(System.TimeSpan elapsed)
    // Offset: 0x2751C24
    TimeSince(::System::TimeSpan elapsed);
    // public System.Boolean HasElapsed(System.Int32 seconds)
    // Offset: 0x2751CD4
    bool HasElapsed(int seconds);
    // public System.Boolean HasElapsed(System.UInt32 seconds)
    // Offset: 0x2751D08
    bool HasElapsed(uint seconds);
    // public System.Boolean HasElapsed(System.Single seconds)
    // Offset: 0x2751D34
    bool HasElapsed(float seconds);
    // public System.Boolean HasElapsed(System.Double seconds)
    // Offset: 0x2751D5C
    bool HasElapsed(double seconds);
    // public System.Boolean HasElapsed(System.Int64 seconds)
    // Offset: 0x2751D80
    bool HasElapsed(int64_t seconds);
    // public System.Boolean HasElapsed(System.TimeSpan seconds)
    // Offset: 0x2751DB4
    bool HasElapsed(::System::TimeSpan seconds);
    // public System.Void Reset()
    // Offset: 0x2751E2C
    void Reset();
    // public System.Boolean HasElapsed(System.Int32 seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2751E88
    bool HasElapsed(int seconds, bool resetOnElapsed);
    // public System.Boolean HasElapsed(System.UInt32 seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2751EEC
    bool HasElapsed(uint seconds, bool resetOnElapsed);
    // public System.Boolean HasElapsed(System.Single seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2751F48
    bool HasElapsed(float seconds, bool resetOnElapsed);
    // public System.Boolean HasElapsed(System.Double seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2751FA0
    bool HasElapsed(double seconds, bool resetOnElapsed);
    // public System.Boolean HasElapsed(System.Int64 seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2751FF4
    bool HasElapsed(int64_t seconds, bool resetOnElapsed);
    // public System.Boolean HasElapsed(System.TimeSpan seconds, System.Boolean resetOnElapsed)
    // Offset: 0x2752058
    bool HasElapsed(::System::TimeSpan seconds, bool resetOnElapsed);
    // static public TimeSince Now()
    // Offset: 0x2752208
    static ::GlobalNamespace::TimeSince Now();
    // public override System.String ToString()
    // Offset: 0x2752104
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x27521C4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // TimeSince
  #pragma pack(pop)
  static check_size<sizeof(TimeSince), 0 + sizeof(::System::DateTime)> __GlobalNamespace_TimeSinceSizeCheck;
  static_assert(sizeof(TimeSince) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsed
// Il2CppName: get_secondsElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsedFloat
// Il2CppName: get_secondsElapsedFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsedFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsedFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsedInt
// Il2CppName: get_secondsElapsedInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsedInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsedInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsedUint
// Il2CppName: get_secondsElapsedUint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsedUint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsedUint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsedLong
// Il2CppName: get_secondsElapsedLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsedLong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsedLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::get_secondsElapsedSpan
// Il2CppName: get_secondsElapsedSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::get_secondsElapsedSpan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "get_secondsElapsedSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::TimeSince
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(int)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(uint)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(float)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(double)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(int64_t)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(::System::TimeSpan)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(int, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(uint, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(float, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(double, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(int64_t, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::HasElapsed
// Il2CppName: HasElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeSince::*)(::System::TimeSpan, bool)>(&GlobalNamespace::TimeSince::HasElapsed)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* resetOnElapsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "HasElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, resetOnElapsed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::Now
// Il2CppName: Now
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TimeSince (*)()>(&GlobalNamespace::TimeSince::Now)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "Now", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeSince::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TimeSince::*)()>(&GlobalNamespace::TimeSince::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeSince), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
