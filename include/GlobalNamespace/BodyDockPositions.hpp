// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: WorldShareableItem
  class WorldShareableItem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BodyDockPositions
  class BodyDockPositions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BodyDockPositions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BodyDockPositions*, "", "BodyDockPositions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: BodyDockPositions
  // [TokenAttribute] Offset: FFFFFFFF
  class BodyDockPositions : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GlobalNamespace::BodyDockPositions::DropPositions
    struct DropPositions;
    // Nested type: ::GlobalNamespace::BodyDockPositions::DockingResult
    class DockingResult;
    public:
    // public VRRig myRig
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.GameObject[] leftHandThrowables
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::GameObject*> leftHandThrowables;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] rightHandThrowables
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::GameObject*> rightHandThrowables;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public TransferrableObject[] _allObjects
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::TransferrableObject*> allObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransferrableObject*>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> objectsToEnable
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* objectsToEnable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> objectsToDisable
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<int>* objectsToDisable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public UnityEngine.Transform leftHandTransform
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* leftHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHandTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* rightHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform chestTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* chestTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftArmTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* leftArmTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightArmTransform
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* rightArmTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftBackTransform
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* leftBackTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightBackTransform
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* rightBackTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public WorldShareableItem leftBackSharableItem
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::WorldShareableItem* leftBackSharableItem;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldShareableItem*) == 0x8);
    // public WorldShareableItem rightBackShareableItem
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::WorldShareableItem* rightBackShareableItem;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldShareableItem*) == 0x8);
    // public UnityEngine.GameObject SharableItemInstance
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GameObject* SharableItemInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32[] throwableDisabledIndex
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<int> throwableDisabledIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Single[] throwableDisabledTime
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<float> throwableDisabledTime;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: public VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: public UnityEngine.GameObject[] leftHandThrowables
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_leftHandThrowables();
    // Get instance field reference: public UnityEngine.GameObject[] rightHandThrowables
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_rightHandThrowables();
    // Get instance field reference: public TransferrableObject[] _allObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject*>& dyn__allObjects();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> objectsToEnable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_objectsToEnable();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> objectsToDisable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_objectsToDisable();
    // Get instance field reference: public UnityEngine.Transform leftHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandTransform();
    // Get instance field reference: public UnityEngine.Transform rightHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandTransform();
    // Get instance field reference: public UnityEngine.Transform chestTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestTransform();
    // Get instance field reference: public UnityEngine.Transform leftArmTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftArmTransform();
    // Get instance field reference: public UnityEngine.Transform rightArmTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightArmTransform();
    // Get instance field reference: public UnityEngine.Transform leftBackTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftBackTransform();
    // Get instance field reference: public UnityEngine.Transform rightBackTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightBackTransform();
    // Get instance field reference: public WorldShareableItem leftBackSharableItem
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& dyn_leftBackSharableItem();
    // Get instance field reference: public WorldShareableItem rightBackShareableItem
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& dyn_rightBackShareableItem();
    // Get instance field reference: public UnityEngine.GameObject SharableItemInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_SharableItemInstance();
    // Get instance field reference: private System.Int32[] throwableDisabledIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_throwableDisabledIndex();
    // Get instance field reference: private System.Single[] throwableDisabledTime
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_throwableDisabledTime();
    // public TransferrableObject[] get_allObjects()
    // Offset: 0x26ACEA4
    ::ArrayW<::GlobalNamespace::TransferrableObject*> get_allObjects();
    // public System.Void set_allObjects(TransferrableObject[] value)
    // Offset: 0x26ACEAC
    void set_allObjects(::ArrayW<::GlobalNamespace::TransferrableObject*> value);
    // public WorldShareableItem AllocateSharableInstance(BodyDockPositions/DropPositions position, Photon.Realtime.Player owner)
    // Offset: 0x26AD038
    ::GlobalNamespace::WorldShareableItem* AllocateSharableInstance(::GlobalNamespace::BodyDockPositions::DropPositions position, ::Photon::Realtime::Player* owner);
    // public System.Void DeallocateSharableInstance(WorldShareableItem worldShareable)
    // Offset: 0x26AD280
    void DeallocateSharableInstance(::GlobalNamespace::WorldShareableItem* worldShareable);
    // public System.Void DeallocateSharableInstances()
    // Offset: 0x26ACF08
    void DeallocateSharableInstances();
    // static public System.Boolean IsPositionLeft(BodyDockPositions/DropPositions pos)
    // Offset: 0x26AD42C
    static bool IsPositionLeft(::GlobalNamespace::BodyDockPositions::DropPositions pos);
    // public System.Int32 DropZoneStorageUsed(BodyDockPositions/DropPositions dropPosition)
    // Offset: 0x26AD444
    int DropZoneStorageUsed(::GlobalNamespace::BodyDockPositions::DropPositions dropPosition);
    // public TransferrableObject ItemPositionInUse(BodyDockPositions/DropPositions dropPosition)
    // Offset: 0x26AD68C
    ::GlobalNamespace::TransferrableObject* ItemPositionInUse(::GlobalNamespace::BodyDockPositions::DropPositions dropPosition);
    // private System.Int32 EnableTransferrableItem(System.Int32 allItemsIndex, BodyDockPositions/DropPositions startingPosition, TransferrableObject/PositionState startingState)
    // Offset: 0x26AD974
    int EnableTransferrableItem(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions startingPosition, ::GlobalNamespace::TransferrableObject::PositionState startingState);
    // public BodyDockPositions/DropPositions ItemActive(System.Int32 allItemsIndex)
    // Offset: 0x26ADE10
    ::GlobalNamespace::BodyDockPositions::DropPositions ItemActive(int allItemsIndex);
    // static public BodyDockPositions/DropPositions OfflineItemActive(System.Int32 allItemsIndex)
    // Offset: 0x26ADE9C
    static ::GlobalNamespace::BodyDockPositions::DropPositions OfflineItemActive(int allItemsIndex);
    // public System.Void DisableTransferrableItem(System.Int32 index)
    // Offset: 0x26ADBD0
    void DisableTransferrableItem(int index);
    // public System.Void DisableAllTransferableItems()
    // Offset: 0x26AE080
    void DisableAllTransferableItems();
    // private System.Boolean AllItemsIndexValid(System.Int32 allItemsIndex)
    // Offset: 0x26AE228
    bool AllItemsIndexValid(int allItemsIndex);
    // public System.Boolean PositionAvailable(System.Int32 allItemIndex, BodyDockPositions/DropPositions startPos)
    // Offset: 0x26AE25C
    bool PositionAvailable(int allItemIndex, ::GlobalNamespace::BodyDockPositions::DropPositions startPos);
    // public BodyDockPositions/DropPositions FirstAvailablePosition(System.Int32 allItemIndex)
    // Offset: 0x26AE29C
    ::GlobalNamespace::BodyDockPositions::DropPositions FirstAvailablePosition(int allItemIndex);
    // public System.Int32 TransferrableItemDisable(System.Int32 allItemsIndex)
    // Offset: 0x26AE2FC
    int TransferrableItemDisable(int allItemsIndex);
    // public System.Void TransferrableItemDisableAtPosition(BodyDockPositions/DropPositions dropPositions)
    // Offset: 0x26AE334
    void TransferrableItemDisableAtPosition(::GlobalNamespace::BodyDockPositions::DropPositions dropPositions);
    // public System.Void TransferrableItemEnableAtPosition(System.String itemName, BodyDockPositions/DropPositions dropPosition)
    // Offset: 0x26AE35C
    void TransferrableItemEnableAtPosition(::StringW itemName, ::GlobalNamespace::BodyDockPositions::DropPositions dropPosition);
    // public System.Boolean TransferrableItemActive(System.String transferrableItemName)
    // Offset: 0x26AE620
    bool TransferrableItemActive(::StringW transferrableItemName);
    // public System.Boolean TransferrableItemActiveAtPos(System.String transferrableItemName, BodyDockPositions/DropPositions dropPosition)
    // Offset: 0x26AE7CC
    bool TransferrableItemActiveAtPos(::StringW transferrableItemName, ::GlobalNamespace::BodyDockPositions::DropPositions dropPosition);
    // public System.Boolean TransferrableItemActive(System.Int32 allItemsIndex)
    // Offset: 0x26AE7B4
    bool TransferrableItemActive(int allItemsIndex);
    // public TransferrableObject TransferrableItem(System.Int32 allItemsIndex)
    // Offset: 0x26AE970
    ::GlobalNamespace::TransferrableObject* TransferrableItem(int allItemsIndex);
    // public BodyDockPositions/DropPositions TransferrableItemPosition(System.Int32 allItemsIndex)
    // Offset: 0x26AE96C
    ::GlobalNamespace::BodyDockPositions::DropPositions TransferrableItemPosition(int allItemsIndex);
    // public System.Boolean DisableTransferrableItem(System.String transferrableItemName)
    // Offset: 0x26AE9A0
    bool DisableTransferrableItem(::StringW transferrableItemName);
    // public BodyDockPositions/DropPositions OppositePosition(BodyDockPositions/DropPositions pos)
    // Offset: 0x26AEB0C
    ::GlobalNamespace::BodyDockPositions::DropPositions OppositePosition(::GlobalNamespace::BodyDockPositions::DropPositions pos);
    // public BodyDockPositions/DockingResult ToggleWithHandedness(System.String transferrableItemName, System.Boolean isLeftHand, System.Boolean bothHands)
    // Offset: 0x26AEB58
    ::GlobalNamespace::BodyDockPositions::DockingResult* ToggleWithHandedness(::StringW transferrableItemName, bool isLeftHand, bool bothHands);
    // public BodyDockPositions/DockingResult ToggleTransferrableItem(System.String transferrableItemName, BodyDockPositions/DropPositions startingPos, System.Boolean bothHands)
    // Offset: 0x26AED5C
    ::GlobalNamespace::BodyDockPositions::DockingResult* ToggleTransferrableItem(::StringW transferrableItemName, ::GlobalNamespace::BodyDockPositions::DropPositions startingPos, bool bothHands);
    // private System.Void MoveTransferableItem(System.Int32 allItemsIndex, BodyDockPositions/DropPositions newPosition, TransferrableObject/PositionState newPositionState)
    // Offset: 0x26AF1A0
    void MoveTransferableItem(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions newPosition, ::GlobalNamespace::TransferrableObject::PositionState newPositionState);
    // public System.Void EnableTransferrableGameObject(System.Int32 allItemsIndex, BodyDockPositions/DropPositions dropZone, TransferrableObject/PositionState startingPosition)
    // Offset: 0x26ADCF8
    void EnableTransferrableGameObject(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions dropZone, ::GlobalNamespace::TransferrableObject::PositionState startingPosition);
    // public System.Void RefreshTransferrableItems()
    // Offset: 0x26A911C
    void RefreshTransferrableItems();
    // public System.Int32 ReturnTransferrableItemIndex(System.Int32 allItemsIndex)
    // Offset: 0x26AF330
    int ReturnTransferrableItemIndex(int allItemsIndex);
    // public System.Collections.Generic.List`1<System.Int32> TransferrableObjectIndexFromName(System.String transObjectName)
    // Offset: 0x26AE47C
    ::System::Collections::Generic::List_1<int>* TransferrableObjectIndexFromName(::StringW transObjectName);
    // private TransferrableObject/PositionState MapDropPositionToState(BodyDockPositions/DropPositions pos)
    // Offset: 0x26AD92C
    ::GlobalNamespace::TransferrableObject::PositionState MapDropPositionToState(::GlobalNamespace::BodyDockPositions::DropPositions pos);
    // System.Int32 get_PreviousLeftHandThrowableIndex()
    // Offset: 0x26AF39C
    int get_PreviousLeftHandThrowableIndex();
    // System.Int32 get_PreviousRightHandThrowableIndex()
    // Offset: 0x26AF3C4
    int get_PreviousRightHandThrowableIndex();
    // System.Single get_PreviousLeftHandThrowableDisabledTime()
    // Offset: 0x26AF3F0
    float get_PreviousLeftHandThrowableDisabledTime();
    // System.Single get_PreviousRightHandThrowableDisabledTime()
    // Offset: 0x26AF418
    float get_PreviousRightHandThrowableDisabledTime();
    // private System.Void UpdateHandState()
    // Offset: 0x26AF1E8
    void UpdateHandState();
    // UnityEngine.GameObject GetLeftHandThrowable()
    // Offset: 0x26AF444
    ::UnityEngine::GameObject* GetLeftHandThrowable();
    // UnityEngine.GameObject GetLeftHandThrowable(System.Int32 throwableIndex)
    // Offset: 0x26AF470
    ::UnityEngine::GameObject* GetLeftHandThrowable(int throwableIndex);
    // UnityEngine.GameObject GetRightHandThrowable()
    // Offset: 0x26AF51C
    ::UnityEngine::GameObject* GetRightHandThrowable();
    // UnityEngine.GameObject GetRightHandThrowable(System.Int32 throwableIndex)
    // Offset: 0x26AF548
    ::UnityEngine::GameObject* GetRightHandThrowable(int throwableIndex);
    // public System.Void .ctor()
    // Offset: 0x26AF5F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BodyDockPositions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BodyDockPositions*, creationType>()));
    }
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x26ACEB4
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnLeftRoom()
    // Offset: 0x26AD410
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
  }; // BodyDockPositions
  #pragma pack(pop)
  static check_size<sizeof(BodyDockPositions), 176 + sizeof(::ArrayW<float>)> __GlobalNamespace_BodyDockPositionsSizeCheck;
  static_assert(sizeof(BodyDockPositions) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::get_allObjects
// Il2CppName: get_allObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::TransferrableObject*> (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::get_allObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "get_allObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::set_allObjects
// Il2CppName: set_allObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(::ArrayW<::GlobalNamespace::TransferrableObject*>)>(&GlobalNamespace::BodyDockPositions::set_allObjects)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "TransferrableObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "set_allObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::AllocateSharableInstance
// Il2CppName: AllocateSharableInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::WorldShareableItem* (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions, ::Photon::Realtime::Player*)>(&GlobalNamespace::BodyDockPositions::AllocateSharableInstance)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "AllocateSharableInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, owner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DeallocateSharableInstance
// Il2CppName: DeallocateSharableInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::WorldShareableItem*)>(&GlobalNamespace::BodyDockPositions::DeallocateSharableInstance)> {
  static const MethodInfo* get() {
    static auto* worldShareable = &::il2cpp_utils::GetClassFromName("", "WorldShareableItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DeallocateSharableInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldShareable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DeallocateSharableInstances
// Il2CppName: DeallocateSharableInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::DeallocateSharableInstances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DeallocateSharableInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::IsPositionLeft
// Il2CppName: IsPositionLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::IsPositionLeft)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "IsPositionLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DropZoneStorageUsed
// Il2CppName: DropZoneStorageUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::DropZoneStorageUsed)> {
  static const MethodInfo* get() {
    static auto* dropPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DropZoneStorageUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dropPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::ItemPositionInUse
// Il2CppName: ItemPositionInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject* (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::ItemPositionInUse)> {
  static const MethodInfo* get() {
    static auto* dropPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "ItemPositionInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dropPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::EnableTransferrableItem
// Il2CppName: EnableTransferrableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)(int, ::GlobalNamespace::BodyDockPositions::DropPositions, ::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::BodyDockPositions::EnableTransferrableItem)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startingPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    static auto* startingState = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "EnableTransferrableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex, startingPosition, startingState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::ItemActive
// Il2CppName: ItemActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::ItemActive)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "ItemActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::OfflineItemActive
// Il2CppName: OfflineItemActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (*)(int)>(&GlobalNamespace::BodyDockPositions::OfflineItemActive)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "OfflineItemActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DisableTransferrableItem
// Il2CppName: DisableTransferrableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::DisableTransferrableItem)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DisableTransferrableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DisableAllTransferableItems
// Il2CppName: DisableAllTransferableItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::DisableAllTransferableItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DisableAllTransferableItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::AllItemsIndexValid
// Il2CppName: AllItemsIndexValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::AllItemsIndexValid)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "AllItemsIndexValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::PositionAvailable
// Il2CppName: PositionAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(int, ::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::PositionAvailable)> {
  static const MethodInfo* get() {
    static auto* allItemIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startPos = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "PositionAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemIndex, startPos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::FirstAvailablePosition
// Il2CppName: FirstAvailablePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::FirstAvailablePosition)> {
  static const MethodInfo* get() {
    static auto* allItemIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "FirstAvailablePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemDisable
// Il2CppName: TransferrableItemDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::TransferrableItemDisable)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemDisableAtPosition
// Il2CppName: TransferrableItemDisableAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::TransferrableItemDisableAtPosition)> {
  static const MethodInfo* get() {
    static auto* dropPositions = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemDisableAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dropPositions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemEnableAtPosition
// Il2CppName: TransferrableItemEnableAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(::StringW, ::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::TransferrableItemEnableAtPosition)> {
  static const MethodInfo* get() {
    static auto* itemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dropPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemEnableAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemName, dropPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemActive
// Il2CppName: TransferrableItemActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(::StringW)>(&GlobalNamespace::BodyDockPositions::TransferrableItemActive)> {
  static const MethodInfo* get() {
    static auto* transferrableItemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableItemName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemActiveAtPos
// Il2CppName: TransferrableItemActiveAtPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(::StringW, ::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::TransferrableItemActiveAtPos)> {
  static const MethodInfo* get() {
    static auto* transferrableItemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dropPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemActiveAtPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableItemName, dropPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemActive
// Il2CppName: TransferrableItemActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::TransferrableItemActive)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItem
// Il2CppName: TransferrableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject* (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::TransferrableItem)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableItemPosition
// Il2CppName: TransferrableItemPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::TransferrableItemPosition)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableItemPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::DisableTransferrableItem
// Il2CppName: DisableTransferrableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BodyDockPositions::*)(::StringW)>(&GlobalNamespace::BodyDockPositions::DisableTransferrableItem)> {
  static const MethodInfo* get() {
    static auto* transferrableItemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "DisableTransferrableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableItemName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::OppositePosition
// Il2CppName: OppositePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::OppositePosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "OppositePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::ToggleWithHandedness
// Il2CppName: ToggleWithHandedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DockingResult* (GlobalNamespace::BodyDockPositions::*)(::StringW, bool, bool)>(&GlobalNamespace::BodyDockPositions::ToggleWithHandedness)> {
  static const MethodInfo* get() {
    static auto* transferrableItemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bothHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "ToggleWithHandedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableItemName, isLeftHand, bothHands});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::ToggleTransferrableItem
// Il2CppName: ToggleTransferrableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DockingResult* (GlobalNamespace::BodyDockPositions::*)(::StringW, ::GlobalNamespace::BodyDockPositions::DropPositions, bool)>(&GlobalNamespace::BodyDockPositions::ToggleTransferrableItem)> {
  static const MethodInfo* get() {
    static auto* transferrableItemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startingPos = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    static auto* bothHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "ToggleTransferrableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableItemName, startingPos, bothHands});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::MoveTransferableItem
// Il2CppName: MoveTransferableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(int, ::GlobalNamespace::BodyDockPositions::DropPositions, ::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::BodyDockPositions::MoveTransferableItem)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    static auto* newPositionState = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "MoveTransferableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex, newPosition, newPositionState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::EnableTransferrableGameObject
// Il2CppName: EnableTransferrableGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(int, ::GlobalNamespace::BodyDockPositions::DropPositions, ::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::BodyDockPositions::EnableTransferrableGameObject)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dropZone = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    static auto* startingPosition = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "EnableTransferrableGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex, dropZone, startingPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::RefreshTransferrableItems
// Il2CppName: RefreshTransferrableItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::RefreshTransferrableItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "RefreshTransferrableItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::ReturnTransferrableItemIndex
// Il2CppName: ReturnTransferrableItemIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::ReturnTransferrableItemIndex)> {
  static const MethodInfo* get() {
    static auto* allItemsIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "ReturnTransferrableItemIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allItemsIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::TransferrableObjectIndexFromName
// Il2CppName: TransferrableObjectIndexFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<int>* (GlobalNamespace::BodyDockPositions::*)(::StringW)>(&GlobalNamespace::BodyDockPositions::TransferrableObjectIndexFromName)> {
  static const MethodInfo* get() {
    static auto* transObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "TransferrableObjectIndexFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transObjectName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::MapDropPositionToState
// Il2CppName: MapDropPositionToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject::PositionState (GlobalNamespace::BodyDockPositions::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::BodyDockPositions::MapDropPositionToState)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "MapDropPositionToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableIndex
// Il2CppName: get_PreviousLeftHandThrowableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "get_PreviousLeftHandThrowableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableIndex
// Il2CppName: get_PreviousRightHandThrowableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "get_PreviousRightHandThrowableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableDisabledTime
// Il2CppName: get_PreviousLeftHandThrowableDisabledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableDisabledTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "get_PreviousLeftHandThrowableDisabledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableDisabledTime
// Il2CppName: get_PreviousRightHandThrowableDisabledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableDisabledTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "get_PreviousRightHandThrowableDisabledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::UpdateHandState
// Il2CppName: UpdateHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::UpdateHandState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "UpdateHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::GetLeftHandThrowable
// Il2CppName: GetLeftHandThrowable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::GetLeftHandThrowable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "GetLeftHandThrowable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::GetLeftHandThrowable
// Il2CppName: GetLeftHandThrowable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::GetLeftHandThrowable)> {
  static const MethodInfo* get() {
    static auto* throwableIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "GetLeftHandThrowable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwableIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::GetRightHandThrowable
// Il2CppName: GetRightHandThrowable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::GetRightHandThrowable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "GetRightHandThrowable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::GetRightHandThrowable
// Il2CppName: GetRightHandThrowable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BodyDockPositions::*)(int)>(&GlobalNamespace::BodyDockPositions::GetRightHandThrowable)> {
  static const MethodInfo* get() {
    static auto* throwableIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "GetRightHandThrowable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwableIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::BodyDockPositions::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BodyDockPositions::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BodyDockPositions::*)()>(&GlobalNamespace::BodyDockPositions::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BodyDockPositions*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
