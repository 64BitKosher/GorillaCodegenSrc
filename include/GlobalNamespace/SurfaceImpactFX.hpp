// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/MainModule
#include "UnityEngine/ParticleSystem_MainModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SurfaceImpactFX
  class SurfaceImpactFX;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SurfaceImpactFX);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SurfaceImpactFX*, "", "SurfaceImpactFX");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: SurfaceImpactFX
  // [TokenAttribute] Offset: FFFFFFFF
  class SurfaceImpactFX : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.ParticleSystem particleFX
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* particleFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Single startingGravityModifier
    // Size: 0x4
    // Offset: 0x28
    float startingGravityModifier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 startingScale
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 startingScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.ParticleSystem/MainModule fxMainModule
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::ParticleSystem::MainModule fxMainModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::MainModule) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem particleFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleFX();
    // Get instance field reference: public System.Single startingGravityModifier
    [[deprecated("Use field access instead!")]] float& dyn_startingGravityModifier();
    // Get instance field reference: public UnityEngine.Vector3 startingScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingScale();
    // Get instance field reference: private UnityEngine.ParticleSystem/MainModule fxMainModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& dyn_fxMainModule();
    // public System.Void Awake()
    // Offset: 0x279FE20
    void Awake();
    // public System.Void SetScale(System.Single scale)
    // Offset: 0x279FF70
    void SetScale(float scale);
    // public System.Void .ctor()
    // Offset: 0x279FFCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SurfaceImpactFX* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SurfaceImpactFX*, creationType>()));
    }
  }; // SurfaceImpactFX
  #pragma pack(pop)
  static check_size<sizeof(SurfaceImpactFX), 56 + sizeof(::UnityEngine::ParticleSystem::MainModule)> __GlobalNamespace_SurfaceImpactFXSizeCheck;
  static_assert(sizeof(SurfaceImpactFX) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SurfaceImpactFX::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SurfaceImpactFX::*)()>(&GlobalNamespace::SurfaceImpactFX::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SurfaceImpactFX*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SurfaceImpactFX::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SurfaceImpactFX::*)(float)>(&GlobalNamespace::SurfaceImpactFX::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SurfaceImpactFX*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SurfaceImpactFX::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
