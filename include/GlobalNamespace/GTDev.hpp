// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: MethodBase
  class MethodBase;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: BuildSafe
namespace BuildSafe {
  // Forward declaring type: SessionState
  class SessionState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: StackTrace
  class StackTrace;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTDev
  class GTDev;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTDev);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDev*, "", "GTDev");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: GTDev
  // [TokenAttribute] Offset: FFFFFFFF
  class GTDev : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::GTDev::HideInCallStackAttribute
    class HideInCallStackAttribute;
    // Nested type: ::GlobalNamespace::GTDev::LogEntry
    struct LogEntry;
    // Nested type: ::GlobalNamespace::GTDev::$$c
    class $$c;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GTDev/LogEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct LogEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String channel
      // Size: 0x8
      // Offset: 0x0
      ::StringW channel;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.DateTime time
      // Size: 0x8
      // Offset: 0x8
      ::System::DateTime time;
      // Field size check
      static_assert(sizeof(::System::DateTime) == 0x8);
      // public System.String message
      // Size: 0x8
      // Offset: 0x10
      ::StringW message;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: LogEntry
      constexpr LogEntry(::StringW channel_ = {}, ::System::DateTime time_ = {}, ::StringW message_ = {}) noexcept : channel{channel_}, time{time_}, message{message_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String channel
      [[deprecated("Use field access instead!")]] ::StringW& dyn_channel();
      // Get instance field reference: public System.DateTime time
      [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_time();
      // Get instance field reference: public System.String message
      [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    }; // GTDev/LogEntry
    #pragma pack(pop)
    static check_size<sizeof(GTDev::LogEntry), 16 + sizeof(::StringW)> __GlobalNamespace_GTDev_LogEntrySizeCheck;
    static_assert(sizeof(GTDev::LogEntry) == 0x18);
    // Get static field: static private System.Action`1<GTDev/LogEntry> OnLogEntry
    static ::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* _get_OnLogEntry();
    // Set static field: static private System.Action`1<GTDev/LogEntry> OnLogEntry
    static void _set_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value);
    // Get static field: static private System.Int32 gDevID
    static int _get_gDevID();
    // Set static field: static private System.Int32 gDevID
    static void _set_gDevID(int value);
    // Get static field: static private System.Boolean gHasDevID
    static bool _get_gHasDevID();
    // Set static field: static private System.Boolean gHasDevID
    static void _set_gHasDevID(bool value);
    // Get static field: static private System.String gProjectFolder
    static ::StringW _get_gProjectFolder();
    // Set static field: static private System.String gProjectFolder
    static void _set_gProjectFolder(::StringW value);
    // Get static field: static private System.Reflection.FieldInfo gFetchProjectFolder
    static ::System::Reflection::FieldInfo* _get_gFetchProjectFolder();
    // Set static field: static private System.Reflection.FieldInfo gFetchProjectFolder
    static void _set_gFetchProjectFolder(::System::Reflection::FieldInfo* value);
    // Get static field: static private System.Boolean gProjectFolderSet
    static bool _get_gProjectFolderSet();
    // Set static field: static private System.Boolean gProjectFolderSet
    static void _set_gProjectFolderSet(bool value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Reflection.MethodBase> gIgnoreMethods
    static ::System::Collections::Generic::HashSet_1<::System::Reflection::MethodBase*>* _get_gIgnoreMethods();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Reflection.MethodBase> gIgnoreMethods
    static void _set_gIgnoreMethods(::System::Collections::Generic::HashSet_1<::System::Reflection::MethodBase*>* value);
    // Get static field: static public readonly BuildSafe.SessionState SessionState
    static ::BuildSafe::SessionState* _get_SessionState();
    // Set static field: static public readonly BuildSafe.SessionState SessionState
    static void _set_SessionState(::BuildSafe::SessionState* value);
    // static private System.Void InitializeOnLoad()
    // Offset: 0x279B470
    static void InitializeOnLoad();
    // static public System.Void Log(System.String msg, System.String channel)
    // Offset: 0x279B96C
    static void Log(::StringW msg, ::StringW channel);
    // static public System.Void Log(System.String msg, UnityEngine.Object context, System.String channel)
    // Offset: 0x279BC60
    static void Log(::StringW msg, ::UnityEngine::Object* context, ::StringW channel);
    // static public System.Void LogError(System.String msg, System.String channel)
    // Offset: 0x279BD2C
    static void LogError(::StringW msg, ::StringW channel);
    // static public System.Void LogError(System.String msg, UnityEngine.Object context, System.String channel)
    // Offset: 0x279BDF8
    static void LogError(::StringW msg, ::UnityEngine::Object* context, ::StringW channel);
    // static public System.Void LogWarning(System.String msg, System.String channel)
    // Offset: 0x279BEC4
    static void LogWarning(::StringW msg, ::StringW channel);
    // static public System.Void LogWarning(System.String msg, UnityEngine.Object context, System.String channel)
    // Offset: 0x279BF90
    static void LogWarning(::StringW msg, ::UnityEngine::Object* context, ::StringW channel);
    // static public System.Void LogSilent(System.String msg, System.String channel)
    // Offset: 0x279C05C
    static void LogSilent(::StringW msg, ::StringW channel);
    // static public System.Void LogSilent(System.String msg, UnityEngine.Object context, System.String channel)
    // Offset: 0x279C0DC
    static void LogSilent(::StringW msg, ::UnityEngine::Object* context, ::StringW channel);
    // static public System.Void LogEditorOnly(System.String msg, System.String channel)
    // Offset: 0x279C15C
    static void LogEditorOnly(::StringW msg, ::StringW channel);
    // static public System.Void LogEditorOnly(System.String msg, UnityEngine.Object context, System.String channel)
    // Offset: 0x279C228
    static void LogEditorOnly(::StringW msg, ::UnityEngine::Object* context, ::StringW channel);
    // static public System.Void CallEditorOnly(System.Action call)
    // Offset: 0x279C2F4
    static void CallEditorOnly(::System::Action* call);
    // static public System.Void add_OnLogEntry(System.Action`1<GTDev/LogEntry> value)
    // Offset: 0x279C310
    static void add_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value);
    // static public System.Void remove_OnLogEntry(System.Action`1<GTDev/LogEntry> value)
    // Offset: 0x279C400
    static void remove_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value);
    // static public System.Int32 get_DevID()
    // Offset: 0x279C4F0
    static int get_DevID();
    // static private System.Int32 FetchDevID()
    // Offset: 0x279B4BC
    static int FetchDevID();
    // static private System.Void _Log(System.Action`1<System.Object> call, System.String msg, UnityEngine.Object ctx, System.String chl, System.String clr)
    // Offset: 0x279BA38
    static void _Log(::System::Action_1<::Il2CppObject*>* call, ::StringW msg, ::UnityEngine::Object* ctx, ::StringW chl, ::StringW clr);
    // static private System.String get_projectFolder()
    // Offset: 0x279CC68
    static ::StringW get_projectFolder();
    // static private System.Void CacheProjectFolder()
    // Offset: 0x279CCF0
    static void CacheProjectFolder();
    // static private System.Boolean IsIgnoredMethod(System.Reflection.MethodBase method)
    // Offset: 0x279CF78
    static bool IsIgnoredMethod(::System::Reflection::MethodBase* method);
    // static private System.String ExtractFormattedStackTrace(System.Diagnostics.StackTrace stackTrace)
    // Offset: 0x279C53C
    static ::StringW ExtractFormattedStackTrace(::System::Diagnostics::StackTrace* stackTrace);
    // static private System.Void .cctor()
    // Offset: 0x279D0D0
    static void _cctor();
  }; // GTDev
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDev::LogEntry, "", "GTDev/LogEntry");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTDev::InitializeOnLoad
// Il2CppName: InitializeOnLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTDev::InitializeOnLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "InitializeOnLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::GTDev::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*, ::StringW)>(&GlobalNamespace::GTDev::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, context, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::GTDev::LogError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*, ::StringW)>(&GlobalNamespace::GTDev::LogError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, context, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::GTDev::LogWarning)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*, ::StringW)>(&GlobalNamespace::GTDev::LogWarning)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, context, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogSilent
// Il2CppName: LogSilent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::GTDev::LogSilent)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogSilent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogSilent
// Il2CppName: LogSilent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*, ::StringW)>(&GlobalNamespace::GTDev::LogSilent)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogSilent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, context, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogEditorOnly
// Il2CppName: LogEditorOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::GTDev::LogEditorOnly)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogEditorOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::LogEditorOnly
// Il2CppName: LogEditorOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*, ::StringW)>(&GlobalNamespace::GTDev::LogEditorOnly)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "LogEditorOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, context, channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::CallEditorOnly
// Il2CppName: CallEditorOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::GTDev::CallEditorOnly)> {
  static const MethodInfo* get() {
    static auto* call = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "CallEditorOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{call});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::add_OnLogEntry
// Il2CppName: add_OnLogEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>*)>(&GlobalNamespace::GTDev::add_OnLogEntry)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GTDev/LogEntry")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "add_OnLogEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::remove_OnLogEntry
// Il2CppName: remove_OnLogEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>*)>(&GlobalNamespace::GTDev::remove_OnLogEntry)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GTDev/LogEntry")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "remove_OnLogEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::get_DevID
// Il2CppName: get_DevID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::GTDev::get_DevID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "get_DevID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::FetchDevID
// Il2CppName: FetchDevID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::GTDev::FetchDevID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "FetchDevID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::_Log
// Il2CppName: _Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Il2CppObject*>*, ::StringW, ::UnityEngine::Object*, ::StringW, ::StringW)>(&GlobalNamespace::GTDev::_Log)> {
  static const MethodInfo* get() {
    static auto* call = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ctx = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* chl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* clr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "_Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{call, msg, ctx, chl, clr});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::get_projectFolder
// Il2CppName: get_projectFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::GTDev::get_projectFolder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "get_projectFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::CacheProjectFolder
// Il2CppName: CacheProjectFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTDev::CacheProjectFolder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "CacheProjectFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::IsIgnoredMethod
// Il2CppName: IsIgnoredMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MethodBase*)>(&GlobalNamespace::GTDev::IsIgnoredMethod)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "IsIgnoredMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::ExtractFormattedStackTrace
// Il2CppName: ExtractFormattedStackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Diagnostics::StackTrace*)>(&GlobalNamespace::GTDev::ExtractFormattedStackTrace)> {
  static const MethodInfo* get() {
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "StackTrace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), "ExtractFormattedStackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stackTrace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDev::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTDev::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDev*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
