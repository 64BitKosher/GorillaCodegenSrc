// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ParentedObjectStressTestMain
  class ParentedObjectStressTestMain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ParentedObjectStressTestMain);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ParentedObjectStressTestMain*, "", "ParentedObjectStressTestMain");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ParentedObjectStressTestMain
  // [TokenAttribute] Offset: FFFFFFFF
  class ParentedObjectStressTestMain : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject Object
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* Object;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 NumObjects
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 NumObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Spacing
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 Spacing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.GameObject Object
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Object();
    // Get instance field reference: public UnityEngine.Vector3 NumObjects
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_NumObjects();
    // Get instance field reference: public UnityEngine.Vector3 Spacing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Spacing();
    // public System.Void Start()
    // Offset: 0x2680784
    void Start();
    // public System.Void .ctor()
    // Offset: 0x2680984
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParentedObjectStressTestMain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParentedObjectStressTestMain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParentedObjectStressTestMain*, creationType>()));
    }
  }; // ParentedObjectStressTestMain
  #pragma pack(pop)
  static check_size<sizeof(ParentedObjectStressTestMain), 52 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_ParentedObjectStressTestMainSizeCheck;
  static_assert(sizeof(ParentedObjectStressTestMain) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ParentedObjectStressTestMain::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ParentedObjectStressTestMain::*)()>(&GlobalNamespace::ParentedObjectStressTestMain::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParentedObjectStressTestMain*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ParentedObjectStressTestMain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
