// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StringFormatter
  class StringFormatter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StringFormatter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StringFormatter*, "", "StringFormatter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: StringFormatter
  // [TokenAttribute] Offset: FFFFFFFF
  class StringFormatter : public ::Il2CppObject {
    public:
    public:
    // private System.String[] spans
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> spans;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Int32[] indices
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> indices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Get static field: static private System.Text.StringBuilder builder
    static ::System::Text::StringBuilder* _get_builder();
    // Set static field: static private System.Text.StringBuilder builder
    static void _set_builder(::System::Text::StringBuilder* value);
    // Get instance field reference: private System.String[] spans
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_spans();
    // Get instance field reference: private System.Int32[] indices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_indices();
    // public System.Void .ctor(System.String[] spans, System.Int32[] indices)
    // Offset: 0x28965CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringFormatter* New_ctor(::ArrayW<::StringW> spans, ::ArrayW<int> indices) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringFormatter*, creationType>(spans, indices)));
    }
    // public System.String Format(System.String term1)
    // Offset: 0x2896610
    ::StringW Format(::StringW term1);
    // public System.String Format(System.Func`1<System.String> term1)
    // Offset: 0x289674C
    ::StringW Format(::System::Func_1<::StringW>* term1);
    // public System.String Format(System.String term1, System.String term2)
    // Offset: 0x288D658
    ::StringW Format(::StringW term1, ::StringW term2);
    // public System.String Format(System.Func`1<System.String> term1, System.Func`1<System.String> term2)
    // Offset: 0x288D7DC
    ::StringW Format(::System::Func_1<::StringW>* term1, ::System::Func_1<::StringW>* term2);
    // public System.String Format(params System.String[] terms)
    // Offset: 0x28968A8
    ::StringW Format(::ArrayW<::StringW> terms);
    // static public StringFormatter Parse(System.String input)
    // Offset: 0x288D35C
    static ::GlobalNamespace::StringFormatter* Parse(::StringW input);
    // static private System.Void .cctor()
    // Offset: 0x2896A20
    static void _cctor();
  }; // StringFormatter
  #pragma pack(pop)
  static check_size<sizeof(StringFormatter), 24 + sizeof(::ArrayW<int>)> __GlobalNamespace_StringFormatterSizeCheck;
  static_assert(sizeof(StringFormatter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StringFormatter::*)(::StringW)>(&GlobalNamespace::StringFormatter::Format)> {
  static const MethodInfo* get() {
    static auto* term1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term1});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StringFormatter::*)(::System::Func_1<::StringW>*)>(&GlobalNamespace::StringFormatter::Format)> {
  static const MethodInfo* get() {
    static auto* term1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term1});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StringFormatter::*)(::StringW, ::StringW)>(&GlobalNamespace::StringFormatter::Format)> {
  static const MethodInfo* get() {
    static auto* term1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* term2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term1, term2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StringFormatter::*)(::System::Func_1<::StringW>*, ::System::Func_1<::StringW>*)>(&GlobalNamespace::StringFormatter::Format)> {
  static const MethodInfo* get() {
    static auto* term1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* term2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term1, term2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StringFormatter::*)(::ArrayW<::StringW>)>(&GlobalNamespace::StringFormatter::Format)> {
  static const MethodInfo* get() {
    static auto* terms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terms});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::StringFormatter* (*)(::StringW)>(&GlobalNamespace::StringFormatter::Parse)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringFormatter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::StringFormatter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringFormatter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
