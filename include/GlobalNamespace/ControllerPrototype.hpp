// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: Fusion.Changed`1
#include "Fusion/Changed_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkCharacterControllerPrototype
  class NetworkCharacterControllerPrototype;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRigidbody
  class NetworkRigidbody;
  // Forward declaring type: NetworkRigidbody2D
  class NetworkRigidbody2D;
  // Forward declaring type: NetworkTransform
  class NetworkTransform;
  // Forward declaring type: ChangedDelegate`1<T>
  template<typename T>
  class ChangedDelegate_1;
  // Forward declaring type: NetworkBehaviourCallbacks`1<T>
  template<typename T>
  class NetworkBehaviourCallbacks_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ControllerPrototype
  class ControllerPrototype;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ControllerPrototype);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ControllerPrototype*, "", "ControllerPrototype");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: ControllerPrototype
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class ControllerPrototype : public ::Fusion::NetworkBehaviour {
    public:
    public:
    // protected NetworkCharacterControllerPrototype _ncc
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::NetworkCharacterControllerPrototype* ncc;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkCharacterControllerPrototype*) == 0x8);
    // protected Fusion.NetworkRigidbody _nrb
    // Size: 0x8
    // Offset: 0x80
    ::Fusion::NetworkRigidbody* nrb;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRigidbody*) == 0x8);
    // protected Fusion.NetworkRigidbody2D _nrb2d
    // Size: 0x8
    // Offset: 0x88
    ::Fusion::NetworkRigidbody2D* nrb2d;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRigidbody2D*) == 0x8);
    // protected Fusion.NetworkTransform _nt
    // Size: 0x8
    // Offset: 0x90
    ::Fusion::NetworkTransform* nt;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform*) == 0x8);
    // private UnityEngine.Vector3 _MovementDirection
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 MovementDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean TransformLocal
    // Size: 0x1
    // Offset: 0xA4
    bool TransformLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TransformLocal and: Speed
    char __padding5[0x3] = {};
    // public System.Single Speed
    // Size: 0x4
    // Offset: 0xA8
    float Speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static Fusion.Changed`1<ControllerPrototype> $IL2CPP_CHANGED
    static ::Fusion::Changed_1<::GlobalNamespace::ControllerPrototype*> _get_$IL2CPP_CHANGED();
    // Set static field: static Fusion.Changed`1<ControllerPrototype> $IL2CPP_CHANGED
    static void _set_$IL2CPP_CHANGED(::Fusion::Changed_1<::GlobalNamespace::ControllerPrototype*> value);
    // Get static field: static Fusion.ChangedDelegate`1<ControllerPrototype> $IL2CPP_CHANGED_DELEGATE
    static ::Fusion::ChangedDelegate_1<::GlobalNamespace::ControllerPrototype*>* _get_$IL2CPP_CHANGED_DELEGATE();
    // Set static field: static Fusion.ChangedDelegate`1<ControllerPrototype> $IL2CPP_CHANGED_DELEGATE
    static void _set_$IL2CPP_CHANGED_DELEGATE(::Fusion::ChangedDelegate_1<::GlobalNamespace::ControllerPrototype*>* value);
    // Get static field: static Fusion.NetworkBehaviourCallbacks`1<ControllerPrototype> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static ::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::ControllerPrototype*>* _get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS();
    // Set static field: static Fusion.NetworkBehaviourCallbacks`1<ControllerPrototype> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static void _set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS(::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::ControllerPrototype*>* value);
    // Get instance field reference: protected NetworkCharacterControllerPrototype _ncc
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkCharacterControllerPrototype*& dyn__ncc();
    // Get instance field reference: protected Fusion.NetworkRigidbody _nrb
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRigidbody*& dyn__nrb();
    // Get instance field reference: protected Fusion.NetworkRigidbody2D _nrb2d
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRigidbody2D*& dyn__nrb2d();
    // Get instance field reference: protected Fusion.NetworkTransform _nt
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform*& dyn__nt();
    // Get instance field reference: private UnityEngine.Vector3 _MovementDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__MovementDirection();
    // Get instance field reference: public System.Boolean TransformLocal
    [[deprecated("Use field access instead!")]] bool& dyn_TransformLocal();
    // Get instance field reference: public System.Single Speed
    [[deprecated("Use field access instead!")]] float& dyn_Speed();
    // public UnityEngine.Vector3 get_MovementDirection()
    // Offset: 0x295ADF8
    ::UnityEngine::Vector3 get_MovementDirection();
    // public System.Void set_MovementDirection(UnityEngine.Vector3 value)
    // Offset: 0x295AE7C
    void set_MovementDirection(::UnityEngine::Vector3 value);
    // private System.Boolean get_ShowSpeed()
    // Offset: 0x295AF5C
    bool get_ShowSpeed();
    // public System.Void Awake()
    // Offset: 0x295AFFC
    void Awake();
    // private System.Void CacheComponents()
    // Offset: 0x295B000
    void CacheComponents();
    // public System.Void .ctor()
    // Offset: 0x295B7C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerPrototype* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ControllerPrototype::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerPrototype*, creationType>()));
    }
    // public override System.Void Spawned()
    // Offset: 0x295B1B4
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Spawned()
    void Spawned();
    // public override System.Void FixedUpdateNetwork()
    // Offset: 0x295B1B8
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::FixedUpdateNetwork()
    void FixedUpdateNetwork();
    // public override System.Void CopyBackingFieldsToState(System.Boolean )
    // Offset: 0x295B7D4
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyBackingFieldsToState(System.Boolean )
    void CopyBackingFieldsToState(bool param_0);
    // public override System.Void CopyStateToBackingFields()
    // Offset: 0x295B7E0
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyStateToBackingFields()
    void CopyStateToBackingFields();
  }; // ControllerPrototype
  #pragma pack(pop)
  static check_size<sizeof(ControllerPrototype), 168 + sizeof(float)> __GlobalNamespace_ControllerPrototypeSizeCheck;
  static_assert(sizeof(ControllerPrototype) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::get_MovementDirection
// Il2CppName: get_MovementDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::get_MovementDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "get_MovementDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::set_MovementDirection
// Il2CppName: set_MovementDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ControllerPrototype::set_MovementDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "set_MovementDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::get_ShowSpeed
// Il2CppName: get_ShowSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::get_ShowSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "get_ShowSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::CacheComponents
// Il2CppName: CacheComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::CacheComponents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "CacheComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::FixedUpdateNetwork
// Il2CppName: FixedUpdateNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::FixedUpdateNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "FixedUpdateNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)(bool)>(&GlobalNamespace::ControllerPrototype::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerPrototype::CopyStateToBackingFields
// Il2CppName: CopyStateToBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerPrototype::*)()>(&GlobalNamespace::ControllerPrototype::CopyStateToBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerPrototype*), "CopyStateToBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
