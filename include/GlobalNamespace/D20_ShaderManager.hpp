// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: D20_ShaderManager
  class D20_ShaderManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::D20_ShaderManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::D20_ShaderManager*, "", "D20_ShaderManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: D20_ShaderManager
  // [TokenAttribute] Offset: FFFFFFFF
  class D20_ShaderManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6
    class $UpdateVelocityCoroutine$d__6;
    public:
    // private UnityEngine.Rigidbody rb
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody* rb;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single updateInterval
    // Size: 0x4
    // Offset: 0x34
    float updateInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: velocity and: material
    char __padding3[0x4] = {};
    // private UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Rigidbody rb
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rb();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: public System.Single updateInterval
    [[deprecated("Use field access instead!")]] float& dyn_updateInterval();
    // Get instance field reference: public UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: private UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // private System.Void Start()
    // Offset: 0x278912C
    void Start();
    // private System.Collections.IEnumerator UpdateVelocityCoroutine()
    // Offset: 0x2789234
    ::System::Collections::IEnumerator* UpdateVelocityCoroutine();
    // public System.Void .ctor()
    // Offset: 0x27892C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static D20_ShaderManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<D20_ShaderManager*, creationType>()));
    }
  }; // D20_ShaderManager
  #pragma pack(pop)
  static check_size<sizeof(D20_ShaderManager), 72 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_D20_ShaderManagerSizeCheck;
  static_assert(sizeof(D20_ShaderManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::D20_ShaderManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::D20_ShaderManager::*)()>(&GlobalNamespace::D20_ShaderManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::D20_ShaderManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::D20_ShaderManager::UpdateVelocityCoroutine
// Il2CppName: UpdateVelocityCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::D20_ShaderManager::*)()>(&GlobalNamespace::D20_ShaderManager::UpdateVelocityCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::D20_ShaderManager*), "UpdateVelocityCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::D20_ShaderManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
