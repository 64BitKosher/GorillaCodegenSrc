// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ProxyType
#include "GlobalNamespace/ProxyType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Type because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InvalidType
  class InvalidType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InvalidType);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InvalidType*, "", "InvalidType");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: InvalidType
  // [TokenAttribute] Offset: FFFFFFFF
  class InvalidType : public ::GlobalNamespace::ProxyType {
    public:
    public:
    // private System.Type _self
    // Size: 0x8
    // Offset: 0x28
    ::System::Type* self;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private System.Type _self
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__self();
    // public override System.String get_Name()
    // Offset: 0x279D880
    // Implemented from: ProxyType
    // Base method: System.String ProxyType::get_Name()
    ::StringW get_Name();
    // public override System.String get_FullName()
    // Offset: 0x279D8A0
    // Implemented from: ProxyType
    // Base method: System.String ProxyType::get_FullName()
    ::StringW get_FullName();
    // public override System.String get_AssemblyQualifiedName()
    // Offset: 0x279D8C4
    // Implemented from: ProxyType
    // Base method: System.String ProxyType::get_AssemblyQualifiedName()
    ::StringW get_AssemblyQualifiedName();
    // public System.Void .ctor()
    // Offset: 0x279D8E8
    // Implemented from: ProxyType
    // Base method: System.Void ProxyType::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidType* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvalidType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidType*, creationType>()));
    }
  }; // InvalidType
  #pragma pack(pop)
  static check_size<sizeof(InvalidType), 40 + sizeof(::System::Type*)> __GlobalNamespace_InvalidTypeSizeCheck;
  static_assert(sizeof(InvalidType) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InvalidType::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::InvalidType::*)()>(&GlobalNamespace::InvalidType::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvalidType*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvalidType::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::InvalidType::*)()>(&GlobalNamespace::InvalidType::get_FullName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvalidType*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvalidType::get_AssemblyQualifiedName
// Il2CppName: get_AssemblyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::InvalidType::*)()>(&GlobalNamespace::InvalidType::get_AssemblyQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvalidType*), "get_AssemblyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvalidType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
