// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: SplineWalkerMode
#include "GlobalNamespace/SplineWalkerMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
  // Forward declaring type: LinearSpline
  class LinearSpline;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SplineWalker
  class SplineWalker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SplineWalker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SplineWalker*, "", "SplineWalker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: SplineWalker
  // [TokenAttribute] Offset: FFFFFFFF
  class SplineWalker : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public BezierSpline spline
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BezierSpline* spline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BezierSpline*) == 0x8);
    // public LinearSpline linearSpline
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::LinearSpline* linearSpline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LinearSpline*) == 0x8);
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x30
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean lookForward
    // Size: 0x1
    // Offset: 0x34
    bool lookForward;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lookForward and: mode
    char __padding3[0x3] = {};
    // public SplineWalkerMode mode
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::SplineWalkerMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SplineWalkerMode) == 0x4);
    // public System.Boolean walkLinearPath
    // Size: 0x1
    // Offset: 0x3C
    bool walkLinearPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useWorldPosition
    // Size: 0x1
    // Offset: 0x3D
    bool useWorldPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useWorldPosition and: progress
    char __padding6[0x2] = {};
    // public System.Single progress
    // Size: 0x4
    // Offset: 0x40
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean goingForward
    // Size: 0x1
    // Offset: 0x44
    bool goingForward;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean DoNetworkSync
    // Size: 0x1
    // Offset: 0x45
    bool DoNetworkSync;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DoNetworkSync and: view
    char __padding9[0x2] = {};
    // private Photon.Pun.PhotonView _view
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Pun::PhotonView* view;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public BezierSpline spline
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& dyn_spline();
    // Get instance field reference: public LinearSpline linearSpline
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LinearSpline*& dyn_linearSpline();
    // Get instance field reference: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: public System.Boolean lookForward
    [[deprecated("Use field access instead!")]] bool& dyn_lookForward();
    // Get instance field reference: public SplineWalkerMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SplineWalkerMode& dyn_mode();
    // Get instance field reference: public System.Boolean walkLinearPath
    [[deprecated("Use field access instead!")]] bool& dyn_walkLinearPath();
    // Get instance field reference: public System.Boolean useWorldPosition
    [[deprecated("Use field access instead!")]] bool& dyn_useWorldPosition();
    // Get instance field reference: public System.Single progress
    [[deprecated("Use field access instead!")]] float& dyn_progress();
    // Get instance field reference: private System.Boolean goingForward
    [[deprecated("Use field access instead!")]] bool& dyn_goingForward();
    // Get instance field reference: public System.Boolean DoNetworkSync
    [[deprecated("Use field access instead!")]] bool& dyn_DoNetworkSync();
    // Get instance field reference: private Photon.Pun.PhotonView _view
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn__view();
    // private System.Void Awake()
    // Offset: 0x277EE44
    void Awake();
    // private System.Void Update()
    // Offset: 0x277EE9C
    void Update();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x277F10C
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x277F12C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SplineWalker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SplineWalker*, creationType>()));
    }
  }; // SplineWalker
  #pragma pack(pop)
  static check_size<sizeof(SplineWalker), 72 + sizeof(::Photon::Pun::PhotonView*)> __GlobalNamespace_SplineWalkerSizeCheck;
  static_assert(sizeof(SplineWalker) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SplineWalker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SplineWalker::*)()>(&GlobalNamespace::SplineWalker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SplineWalker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SplineWalker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SplineWalker::*)()>(&GlobalNamespace::SplineWalker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SplineWalker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SplineWalker::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SplineWalker::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SplineWalker::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SplineWalker*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SplineWalker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
