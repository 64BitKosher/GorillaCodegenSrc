// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WaterSplashEffect
  class WaterSplashEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WaterSplashEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WaterSplashEffect*, "", "WaterSplashEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: WaterSplashEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterSplashEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.ParticleSystem[] bigSplashParticleSystems
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::ParticleSystem*> bigSplashParticleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // public UnityEngine.ParticleSystem[] smallSplashParticleSystems
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::ParticleSystem*> smallSplashParticleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // public System.Single bigSplashBaseGravityMultiplier
    // Size: 0x4
    // Offset: 0x30
    float bigSplashBaseGravityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bigSplashBaseStartSpeed
    // Size: 0x4
    // Offset: 0x34
    float bigSplashBaseStartSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bigSplashBaseSimulationSpeed
    // Size: 0x4
    // Offset: 0x38
    float bigSplashBaseSimulationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smallSplashBaseGravityMultiplier
    // Size: 0x4
    // Offset: 0x3C
    float smallSplashBaseGravityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smallSplashBaseStartSpeed
    // Size: 0x4
    // Offset: 0x40
    float smallSplashBaseStartSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smallSplashBaseSimulationSpeed
    // Size: 0x4
    // Offset: 0x44
    float smallSplashBaseSimulationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lifeTime
    // Size: 0x4
    // Offset: 0x48
    float lifeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single startTime
    // Size: 0x4
    // Offset: 0x4C
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip[] bigSplashAudioClips
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::AudioClip*> bigSplashAudioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public UnityEngine.AudioClip[] smallSplashEntryAudioClips
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::AudioClip*> smallSplashEntryAudioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public UnityEngine.AudioClip[] smallSplashExitAudioClips
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::AudioClip*> smallSplashExitAudioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume waterVolume
    // Size: 0x8
    // Offset: 0x70
    ::GorillaLocomotion::Swimming::WaterVolume* waterVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    public:
    // Get static field: static private System.Int32 lastPlayedBigSplashAudioClipIndex
    static int _get_lastPlayedBigSplashAudioClipIndex();
    // Set static field: static private System.Int32 lastPlayedBigSplashAudioClipIndex
    static void _set_lastPlayedBigSplashAudioClipIndex(int value);
    // Get static field: static private System.Int32 lastPlayedSmallSplashEntryAudioClipIndex
    static int _get_lastPlayedSmallSplashEntryAudioClipIndex();
    // Set static field: static private System.Int32 lastPlayedSmallSplashEntryAudioClipIndex
    static void _set_lastPlayedSmallSplashEntryAudioClipIndex(int value);
    // Get static field: static private System.Int32 lastPlayedSmallSplashExitAudioClipIndex
    static int _get_lastPlayedSmallSplashExitAudioClipIndex();
    // Set static field: static private System.Int32 lastPlayedSmallSplashExitAudioClipIndex
    static void _set_lastPlayedSmallSplashExitAudioClipIndex(int value);
    // Get instance field reference: public UnityEngine.ParticleSystem[] bigSplashParticleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_bigSplashParticleSystems();
    // Get instance field reference: public UnityEngine.ParticleSystem[] smallSplashParticleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_smallSplashParticleSystems();
    // Get instance field reference: public System.Single bigSplashBaseGravityMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_bigSplashBaseGravityMultiplier();
    // Get instance field reference: public System.Single bigSplashBaseStartSpeed
    [[deprecated("Use field access instead!")]] float& dyn_bigSplashBaseStartSpeed();
    // Get instance field reference: public System.Single bigSplashBaseSimulationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_bigSplashBaseSimulationSpeed();
    // Get instance field reference: public System.Single smallSplashBaseGravityMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_smallSplashBaseGravityMultiplier();
    // Get instance field reference: public System.Single smallSplashBaseStartSpeed
    [[deprecated("Use field access instead!")]] float& dyn_smallSplashBaseStartSpeed();
    // Get instance field reference: public System.Single smallSplashBaseSimulationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_smallSplashBaseSimulationSpeed();
    // Get instance field reference: public System.Single lifeTime
    [[deprecated("Use field access instead!")]] float& dyn_lifeTime();
    // Get instance field reference: private System.Single startTime
    [[deprecated("Use field access instead!")]] float& dyn_startTime();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip[] bigSplashAudioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_bigSplashAudioClips();
    // Get instance field reference: public UnityEngine.AudioClip[] smallSplashEntryAudioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_smallSplashEntryAudioClips();
    // Get instance field reference: public UnityEngine.AudioClip[] smallSplashExitAudioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_smallSplashExitAudioClips();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume waterVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_waterVolume();
    // private System.Void OnEnable()
    // Offset: 0x28995D0
    void OnEnable();
    // public System.Void Destroy()
    // Offset: 0x28995EC
    void Destroy();
    // public System.Void PlayEffect(System.Boolean isBigSplash, System.Boolean isEntry, System.Single scale, GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x28996E8
    void PlayEffect(bool isBigSplash, bool isEntry, float scale, ::GorillaLocomotion::Swimming::WaterVolume* volume);
    // private System.Void Update()
    // Offset: 0x2899C40
    void Update();
    // private System.Void DeactivateParticleSystems(UnityEngine.ParticleSystem[] particleSystems)
    // Offset: 0x2899678
    void DeactivateParticleSystems(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems);
    // private System.Void PlayParticleEffects(UnityEngine.ParticleSystem[] particleSystems)
    // Offset: 0x2899A74
    void PlayParticleEffects(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems);
    // private System.Void SetParticleEffectParameters(UnityEngine.ParticleSystem[] particleSystems, System.Single scale, System.Single baseGravMultiplier, System.Single baseStartSpeed, System.Single baseSimulationSpeed, GorillaLocomotion.Swimming.WaterVolume waterVolume)
    // Offset: 0x289981C
    void SetParticleEffectParameters(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems, float scale, float baseGravMultiplier, float baseStartSpeed, float baseSimulationSpeed, ::GorillaLocomotion::Swimming::WaterVolume* waterVolume);
    // private System.Void PlayRandomAudioClipWithoutRepeats(UnityEngine.AudioClip[] audioClips, ref System.Int32 lastPlayedAudioClipIndex)
    // Offset: 0x2899B00
    void PlayRandomAudioClipWithoutRepeats(::ArrayW<::UnityEngine::AudioClip*> audioClips, ByRef<int> lastPlayedAudioClipIndex);
    // public System.Void .ctor()
    // Offset: 0x2899E54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterSplashEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterSplashEffect*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2899E70
    static void _cctor();
  }; // WaterSplashEffect
  #pragma pack(pop)
  static check_size<sizeof(WaterSplashEffect), 112 + sizeof(::GorillaLocomotion::Swimming::WaterVolume*)> __GlobalNamespace_WaterSplashEffectSizeCheck;
  static_assert(sizeof(WaterSplashEffect) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)()>(&GlobalNamespace::WaterSplashEffect::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)()>(&GlobalNamespace::WaterSplashEffect::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::PlayEffect
// Il2CppName: PlayEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)(bool, bool, float, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GlobalNamespace::WaterSplashEffect::PlayEffect)> {
  static const MethodInfo* get() {
    static auto* isBigSplash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isEntry = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "PlayEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isBigSplash, isEntry, scale, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)()>(&GlobalNamespace::WaterSplashEffect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::DeactivateParticleSystems
// Il2CppName: DeactivateParticleSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)(::ArrayW<::UnityEngine::ParticleSystem*>)>(&GlobalNamespace::WaterSplashEffect::DeactivateParticleSystems)> {
  static const MethodInfo* get() {
    static auto* particleSystems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "DeactivateParticleSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particleSystems});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::PlayParticleEffects
// Il2CppName: PlayParticleEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)(::ArrayW<::UnityEngine::ParticleSystem*>)>(&GlobalNamespace::WaterSplashEffect::PlayParticleEffects)> {
  static const MethodInfo* get() {
    static auto* particleSystems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "PlayParticleEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particleSystems});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::SetParticleEffectParameters
// Il2CppName: SetParticleEffectParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)(::ArrayW<::UnityEngine::ParticleSystem*>, float, float, float, float, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GlobalNamespace::WaterSplashEffect::SetParticleEffectParameters)> {
  static const MethodInfo* get() {
    static auto* particleSystems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem"), 1)->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* baseGravMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* baseStartSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* baseSimulationSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* waterVolume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "SetParticleEffectParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particleSystems, scale, baseGravMultiplier, baseStartSpeed, baseSimulationSpeed, waterVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::PlayRandomAudioClipWithoutRepeats
// Il2CppName: PlayRandomAudioClipWithoutRepeats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterSplashEffect::*)(::ArrayW<::UnityEngine::AudioClip*>, ByRef<int>)>(&GlobalNamespace::WaterSplashEffect::PlayRandomAudioClipWithoutRepeats)> {
  static const MethodInfo* get() {
    static auto* audioClips = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip"), 1)->byval_arg;
    static auto* lastPlayedAudioClipIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), "PlayRandomAudioClipWithoutRepeats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClips, lastPlayedAudioClipIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WaterSplashEffect::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::WaterSplashEffect::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterSplashEffect*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
