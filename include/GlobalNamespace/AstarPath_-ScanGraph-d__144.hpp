// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AstarPath
#include "GlobalNamespace/AstarPath.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Pathfinding.Progress
#include "Pathfinding/Progress.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavGraph
  class NavGraph;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath::$ScanGraph$d__144);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::$ScanGraph$d__144*, "", "AstarPath/<ScanGraph>d__144");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath/<ScanGraph>d__144
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class AstarPath::$ScanGraph$d__144 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>, public ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private Pathfinding.Progress <>2__current
    // Size: 0x10
    // Offset: 0x18
    ::Pathfinding::Progress $$2__current;
    // Field size check
    static_assert(sizeof(::Pathfinding::Progress) == 0x10);
    // private System.Int32 <>l__initialThreadId
    // Size: 0x4
    // Offset: 0x28
    int $$l__initialThreadId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$l__initialThreadId and: graph
    char __padding2[0x4] = {};
    // private Pathfinding.NavGraph graph
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::NavGraph* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavGraph*) == 0x8);
    // public Pathfinding.NavGraph <>3__graph
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::NavGraph* $$3__graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavGraph*) == 0x8);
    // private AstarPath/<>c__DisplayClass144_0 <>8__1
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::AstarPath::$$c__DisplayClass144_0* $$8__1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath::$$c__DisplayClass144_0*) == 0x8);
    // private System.Collections.Generic.IEnumerator`1<Pathfinding.Progress> <>7__wrap1
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>* $$7__wrap1;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>
    operator ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>
    operator ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private Pathfinding.Progress <>2__current
    [[deprecated("Use field access instead!")]] ::Pathfinding::Progress& dyn_$$2__current();
    // Get instance field reference: private System.Int32 <>l__initialThreadId
    [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId();
    // Get instance field reference: private Pathfinding.NavGraph graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavGraph*& dyn_graph();
    // Get instance field reference: public Pathfinding.NavGraph <>3__graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavGraph*& dyn_$$3__graph();
    // Get instance field reference: private AstarPath/<>c__DisplayClass144_0 <>8__1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath::$$c__DisplayClass144_0*& dyn_$$8__1();
    // Get instance field reference: private System.Collections.Generic.IEnumerator`1<Pathfinding.Progress> <>7__wrap1
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>*& dyn_$$7__wrap1();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2985868
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath::$ScanGraph$d__144* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::$ScanGraph$d__144::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath::$ScanGraph$d__144*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2987CC0
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2987CDC
    bool MoveNext();
    // private System.Void <>m__Finally1()
    // Offset: 0x29883B0
    void $$m__Finally1();
    // private Pathfinding.Progress System.Collections.Generic.IEnumerator<Pathfinding.Progress>.get_Current()
    // Offset: 0x2988460
    ::Pathfinding::Progress System_Collections_Generic_IEnumerator$Pathfinding_Progress$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x298846C
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x29884A4
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // private System.Collections.Generic.IEnumerator`1<Pathfinding.Progress> System.Collections.Generic.IEnumerable<Pathfinding.Progress>.GetEnumerator()
    // Offset: 0x2988500
    ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>* System_Collections_Generic_IEnumerable$Pathfinding_Progress$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x29885A4
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // AstarPath/<ScanGraph>d__144
  #pragma pack(pop)
  static check_size<sizeof(AstarPath::$ScanGraph$d__144), 72 + sizeof(::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>*)> __GlobalNamespace_AstarPath_$ScanGraph$d__144SizeCheck;
  static_assert(sizeof(AstarPath::$ScanGraph$d__144) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::$$m__Finally1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_Generic_IEnumerator$Pathfinding_Progress$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<Pathfinding.Progress>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Progress (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_Generic_IEnumerator$Pathfinding_Progress$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.Collections.Generic.IEnumerator<Pathfinding.Progress>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_Generic_IEnumerable$Pathfinding_Progress$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<Pathfinding.Progress>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::Pathfinding::Progress>* (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_Generic_IEnumerable$Pathfinding_Progress$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.Collections.Generic.IEnumerable<Pathfinding.Progress>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AstarPath::$ScanGraph$d__144::*)()>(&GlobalNamespace::AstarPath::$ScanGraph$d__144::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$ScanGraph$d__144*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
