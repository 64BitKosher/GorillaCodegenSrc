// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
// Including type: GorillaControllerType
#include "GlobalNamespace/GorillaControllerType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ControllerInputPoller
  class ControllerInputPoller;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ControllerInputPoller);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ControllerInputPoller*, "", "ControllerInputPoller");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE4
  #pragma pack(push, 1)
  // Autogenerated type: ControllerInputPoller
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerInputPoller : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single leftControllerIndexFloat
    // Size: 0x4
    // Offset: 0x20
    float leftControllerIndexFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single leftControllerGripFloat
    // Size: 0x4
    // Offset: 0x24
    float leftControllerGripFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightControllerIndexFloat
    // Size: 0x4
    // Offset: 0x28
    float rightControllerIndexFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightControllerGripFloat
    // Size: 0x4
    // Offset: 0x2C
    float rightControllerGripFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single leftControllerIndexTouch
    // Size: 0x4
    // Offset: 0x30
    float leftControllerIndexTouch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightControllerIndexTouch
    // Size: 0x4
    // Offset: 0x34
    float rightControllerIndexTouch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightStickLRFloat
    // Size: 0x4
    // Offset: 0x38
    float rightStickLRFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 leftControllerPosition
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 leftControllerPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightControllerPosition
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 rightControllerPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 headPosition
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 headPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion leftControllerRotation
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Quaternion leftControllerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion rightControllerRotation
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Quaternion rightControllerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion headRotation
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion headRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.XR.InputDevice leftControllerDevice
    // Size: 0x9
    // Offset: 0x90
    ::UnityEngine::XR::InputDevice leftControllerDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: leftControllerDevice and: rightControllerDevice
    char __padding13[0x7] = {};
    // public UnityEngine.XR.InputDevice rightControllerDevice
    // Size: 0x9
    // Offset: 0xA0
    ::UnityEngine::XR::InputDevice rightControllerDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: rightControllerDevice and: headDevice
    char __padding14[0x7] = {};
    // public UnityEngine.XR.InputDevice headDevice
    // Size: 0x9
    // Offset: 0xB0
    ::UnityEngine::XR::InputDevice headDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: headDevice and: leftControllerPrimaryButton
    char __padding15[0x7] = {};
    // public System.Boolean leftControllerPrimaryButton
    // Size: 0x1
    // Offset: 0xC0
    bool leftControllerPrimaryButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftControllerSecondaryButton
    // Size: 0x1
    // Offset: 0xC1
    bool leftControllerSecondaryButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightControllerPrimaryButton
    // Size: 0x1
    // Offset: 0xC2
    bool rightControllerPrimaryButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightControllerSecondaryButton
    // Size: 0x1
    // Offset: 0xC3
    bool rightControllerSecondaryButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftControllerPrimaryButtonTouch
    // Size: 0x1
    // Offset: 0xC4
    bool leftControllerPrimaryButtonTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftControllerSecondaryButtonTouch
    // Size: 0x1
    // Offset: 0xC5
    bool leftControllerSecondaryButtonTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightControllerPrimaryButtonTouch
    // Size: 0x1
    // Offset: 0xC6
    bool rightControllerPrimaryButtonTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightControllerSecondaryButtonTouch
    // Size: 0x1
    // Offset: 0xC7
    bool rightControllerSecondaryButtonTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftGrab
    // Size: 0x1
    // Offset: 0xC8
    bool leftGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftGrabRelease
    // Size: 0x1
    // Offset: 0xC9
    bool leftGrabRelease;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightGrab
    // Size: 0x1
    // Offset: 0xCA
    bool rightGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightGrabRelease
    // Size: 0x1
    // Offset: 0xCB
    bool rightGrabRelease;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftGrabMomentary
    // Size: 0x1
    // Offset: 0xCC
    bool leftGrabMomentary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean leftGrabReleaseMomentary
    // Size: 0x1
    // Offset: 0xCD
    bool leftGrabReleaseMomentary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightGrabMomentary
    // Size: 0x1
    // Offset: 0xCE
    bool rightGrabMomentary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightGrabReleaseMomentary
    // Size: 0x1
    // Offset: 0xCF
    bool rightGrabReleaseMomentary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private GorillaControllerType <controllerType>k__BackingField
    // Size: 0x4
    // Offset: 0xD0
    ::GlobalNamespace::GorillaControllerType controllerType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaControllerType) == 0x4);
    // public UnityEngine.Vector2 leftControllerPrimary2DAxis
    // Size: 0x8
    // Offset: 0xD4
    ::UnityEngine::Vector2 leftControllerPrimary2DAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 rightControllerPrimary2DAxis
    // Size: 0x8
    // Offset: 0xDC
    ::UnityEngine::Vector2 rightControllerPrimary2DAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get static field: static public ControllerInputPoller instance
    static ::GlobalNamespace::ControllerInputPoller* _get_instance();
    // Set static field: static public ControllerInputPoller instance
    static void _set_instance(::GlobalNamespace::ControllerInputPoller* value);
    // Get instance field reference: public System.Single leftControllerIndexFloat
    [[deprecated("Use field access instead!")]] float& dyn_leftControllerIndexFloat();
    // Get instance field reference: public System.Single leftControllerGripFloat
    [[deprecated("Use field access instead!")]] float& dyn_leftControllerGripFloat();
    // Get instance field reference: public System.Single rightControllerIndexFloat
    [[deprecated("Use field access instead!")]] float& dyn_rightControllerIndexFloat();
    // Get instance field reference: public System.Single rightControllerGripFloat
    [[deprecated("Use field access instead!")]] float& dyn_rightControllerGripFloat();
    // Get instance field reference: public System.Single leftControllerIndexTouch
    [[deprecated("Use field access instead!")]] float& dyn_leftControllerIndexTouch();
    // Get instance field reference: public System.Single rightControllerIndexTouch
    [[deprecated("Use field access instead!")]] float& dyn_rightControllerIndexTouch();
    // Get instance field reference: public System.Single rightStickLRFloat
    [[deprecated("Use field access instead!")]] float& dyn_rightStickLRFloat();
    // Get instance field reference: public UnityEngine.Vector3 leftControllerPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftControllerPosition();
    // Get instance field reference: public UnityEngine.Vector3 rightControllerPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightControllerPosition();
    // Get instance field reference: public UnityEngine.Vector3 headPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headPosition();
    // Get instance field reference: public UnityEngine.Quaternion leftControllerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_leftControllerRotation();
    // Get instance field reference: public UnityEngine.Quaternion rightControllerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rightControllerRotation();
    // Get instance field reference: public UnityEngine.Quaternion headRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headRotation();
    // Get instance field reference: public UnityEngine.XR.InputDevice leftControllerDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_leftControllerDevice();
    // Get instance field reference: public UnityEngine.XR.InputDevice rightControllerDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_rightControllerDevice();
    // Get instance field reference: public UnityEngine.XR.InputDevice headDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_headDevice();
    // Get instance field reference: public System.Boolean leftControllerPrimaryButton
    [[deprecated("Use field access instead!")]] bool& dyn_leftControllerPrimaryButton();
    // Get instance field reference: public System.Boolean leftControllerSecondaryButton
    [[deprecated("Use field access instead!")]] bool& dyn_leftControllerSecondaryButton();
    // Get instance field reference: public System.Boolean rightControllerPrimaryButton
    [[deprecated("Use field access instead!")]] bool& dyn_rightControllerPrimaryButton();
    // Get instance field reference: public System.Boolean rightControllerSecondaryButton
    [[deprecated("Use field access instead!")]] bool& dyn_rightControllerSecondaryButton();
    // Get instance field reference: public System.Boolean leftControllerPrimaryButtonTouch
    [[deprecated("Use field access instead!")]] bool& dyn_leftControllerPrimaryButtonTouch();
    // Get instance field reference: public System.Boolean leftControllerSecondaryButtonTouch
    [[deprecated("Use field access instead!")]] bool& dyn_leftControllerSecondaryButtonTouch();
    // Get instance field reference: public System.Boolean rightControllerPrimaryButtonTouch
    [[deprecated("Use field access instead!")]] bool& dyn_rightControllerPrimaryButtonTouch();
    // Get instance field reference: public System.Boolean rightControllerSecondaryButtonTouch
    [[deprecated("Use field access instead!")]] bool& dyn_rightControllerSecondaryButtonTouch();
    // Get instance field reference: public System.Boolean leftGrab
    [[deprecated("Use field access instead!")]] bool& dyn_leftGrab();
    // Get instance field reference: public System.Boolean leftGrabRelease
    [[deprecated("Use field access instead!")]] bool& dyn_leftGrabRelease();
    // Get instance field reference: public System.Boolean rightGrab
    [[deprecated("Use field access instead!")]] bool& dyn_rightGrab();
    // Get instance field reference: public System.Boolean rightGrabRelease
    [[deprecated("Use field access instead!")]] bool& dyn_rightGrabRelease();
    // Get instance field reference: public System.Boolean leftGrabMomentary
    [[deprecated("Use field access instead!")]] bool& dyn_leftGrabMomentary();
    // Get instance field reference: public System.Boolean leftGrabReleaseMomentary
    [[deprecated("Use field access instead!")]] bool& dyn_leftGrabReleaseMomentary();
    // Get instance field reference: public System.Boolean rightGrabMomentary
    [[deprecated("Use field access instead!")]] bool& dyn_rightGrabMomentary();
    // Get instance field reference: public System.Boolean rightGrabReleaseMomentary
    [[deprecated("Use field access instead!")]] bool& dyn_rightGrabReleaseMomentary();
    // Get instance field reference: private GorillaControllerType <controllerType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaControllerType& dyn_$controllerType$k__BackingField();
    // Get instance field reference: public UnityEngine.Vector2 leftControllerPrimary2DAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_leftControllerPrimary2DAxis();
    // Get instance field reference: public UnityEngine.Vector2 rightControllerPrimary2DAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_rightControllerPrimary2DAxis();
    // public GorillaControllerType get_controllerType()
    // Offset: 0x26F104C
    ::GlobalNamespace::GorillaControllerType get_controllerType();
    // private System.Void set_controllerType(GorillaControllerType value)
    // Offset: 0x26F1054
    void set_controllerType(::GlobalNamespace::GorillaControllerType value);
    // private System.Void Awake()
    // Offset: 0x26F105C
    void Awake();
    // private System.Void Update()
    // Offset: 0x26F1188
    void Update();
    // private System.Void CalculateGrabState(System.Single grabValue, ref System.Boolean grab, ref System.Boolean grabRelease, ref System.Boolean grabMomentary, ref System.Boolean grabReleaseMomentary, System.Single grabThreshold, System.Single grabReleaseThreshold)
    // Offset: 0x26F173C
    void CalculateGrabState(float grabValue, ByRef<bool> grab, ByRef<bool> grabRelease, ByRef<bool> grabMomentary, ByRef<bool> grabReleaseMomentary, float grabThreshold, float grabReleaseThreshold);
    // static public System.Boolean GetGrab(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1798
    static bool GetGrab(::UnityEngine::XR::XRNode node);
    // static public System.Boolean GetGrabRelease(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1838
    static bool GetGrabRelease(::UnityEngine::XR::XRNode node);
    // static public System.Boolean GetGrabMomentary(UnityEngine.XR.XRNode node)
    // Offset: 0x26F18DC
    static bool GetGrabMomentary(::UnityEngine::XR::XRNode node);
    // static public System.Boolean GetGrabReleaseMomentary(UnityEngine.XR.XRNode node)
    // Offset: 0x26F197C
    static bool GetGrabReleaseMomentary(::UnityEngine::XR::XRNode node);
    // static public UnityEngine.Vector2 Primary2DAxis(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1A20
    static ::UnityEngine::Vector2 Primary2DAxis(::UnityEngine::XR::XRNode node);
    // static public System.Boolean PrimaryButtonPress(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1A9C
    static bool PrimaryButtonPress(::UnityEngine::XR::XRNode node);
    // static public System.Boolean SecondaryButtonPress(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1B3C
    static bool SecondaryButtonPress(::UnityEngine::XR::XRNode node);
    // static public System.Boolean PrimaryButtonTouch(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1BE0
    static bool PrimaryButtonTouch(::UnityEngine::XR::XRNode node);
    // static public System.Boolean SecondaryButtonTouch(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1C80
    static bool SecondaryButtonTouch(::UnityEngine::XR::XRNode node);
    // static public System.Single GripFloat(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1D24
    static float GripFloat(::UnityEngine::XR::XRNode node);
    // static public System.Single TriggerFloat(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1DBC
    static float TriggerFloat(::UnityEngine::XR::XRNode node);
    // static public System.Single TriggerTouch(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1E54
    static float TriggerTouch(::UnityEngine::XR::XRNode node);
    // static public UnityEngine.Vector3 DevicePosition(UnityEngine.XR.XRNode node)
    // Offset: 0x26F0EE8
    static ::UnityEngine::Vector3 DevicePosition(::UnityEngine::XR::XRNode node);
    // static public UnityEngine.Quaternion DeviceRotation(UnityEngine.XR.XRNode node)
    // Offset: 0x26F1EE8
    static ::UnityEngine::Quaternion DeviceRotation(::UnityEngine::XR::XRNode node);
    // static public System.Boolean PositionValid(UnityEngine.XR.XRNode node)
    // Offset: 0x26F2018
    static bool PositionValid(::UnityEngine::XR::XRNode node);
    // public System.Void .ctor()
    // Offset: 0x26F2124
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerInputPoller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ControllerInputPoller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerInputPoller*, creationType>()));
    }
  }; // ControllerInputPoller
  #pragma pack(pop)
  static check_size<sizeof(ControllerInputPoller), 220 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_ControllerInputPollerSizeCheck;
  static_assert(sizeof(ControllerInputPoller) == 0xE4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::get_controllerType
// Il2CppName: get_controllerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaControllerType (GlobalNamespace::ControllerInputPoller::*)()>(&GlobalNamespace::ControllerInputPoller::get_controllerType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "get_controllerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::set_controllerType
// Il2CppName: set_controllerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerInputPoller::*)(::GlobalNamespace::GorillaControllerType)>(&GlobalNamespace::ControllerInputPoller::set_controllerType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GorillaControllerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "set_controllerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerInputPoller::*)()>(&GlobalNamespace::ControllerInputPoller::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerInputPoller::*)()>(&GlobalNamespace::ControllerInputPoller::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::CalculateGrabState
// Il2CppName: CalculateGrabState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerInputPoller::*)(float, ByRef<bool>, ByRef<bool>, ByRef<bool>, ByRef<bool>, float, float)>(&GlobalNamespace::ControllerInputPoller::CalculateGrabState)> {
  static const MethodInfo* get() {
    static auto* grabValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* grab = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* grabRelease = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* grabMomentary = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* grabReleaseMomentary = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* grabThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* grabReleaseThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "CalculateGrabState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabValue, grab, grabRelease, grabMomentary, grabReleaseMomentary, grabThreshold, grabReleaseThreshold});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::GetGrab
// Il2CppName: GetGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::GetGrab)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "GetGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::GetGrabRelease
// Il2CppName: GetGrabRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::GetGrabRelease)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "GetGrabRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::GetGrabMomentary
// Il2CppName: GetGrabMomentary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::GetGrabMomentary)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "GetGrabMomentary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::GetGrabReleaseMomentary
// Il2CppName: GetGrabReleaseMomentary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::GetGrabReleaseMomentary)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "GetGrabReleaseMomentary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::Primary2DAxis
// Il2CppName: Primary2DAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::Primary2DAxis)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "Primary2DAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::PrimaryButtonPress
// Il2CppName: PrimaryButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::PrimaryButtonPress)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "PrimaryButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::SecondaryButtonPress
// Il2CppName: SecondaryButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::SecondaryButtonPress)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "SecondaryButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::PrimaryButtonTouch
// Il2CppName: PrimaryButtonTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::PrimaryButtonTouch)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "PrimaryButtonTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::SecondaryButtonTouch
// Il2CppName: SecondaryButtonTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::SecondaryButtonTouch)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "SecondaryButtonTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::GripFloat
// Il2CppName: GripFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::GripFloat)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "GripFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::TriggerFloat
// Il2CppName: TriggerFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::TriggerFloat)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "TriggerFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::TriggerTouch
// Il2CppName: TriggerTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::TriggerTouch)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "TriggerTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::DevicePosition
// Il2CppName: DevicePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::DevicePosition)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "DevicePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::DeviceRotation
// Il2CppName: DeviceRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::DeviceRotation)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "DeviceRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::PositionValid
// Il2CppName: PositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::ControllerInputPoller::PositionValid)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerInputPoller*), "PositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerInputPoller::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
