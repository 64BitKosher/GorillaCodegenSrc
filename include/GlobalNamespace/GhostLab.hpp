// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBuildValidation
#include "GlobalNamespace/IBuildValidation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GhostLabReliableState
  class GhostLabReliableState;
  // Forward declaring type: IDCardScanner
  class IDCardScanner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GhostLab
  class GhostLab;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GhostLab);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GhostLab*, "", "GhostLab");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: GhostLab
  // [TokenAttribute] Offset: FFFFFFFF
  class GhostLab : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IBuildValidation*/ {
    public:
    // Nested type: ::GlobalNamespace::GhostLab::EntranceDoorsState
    struct EntranceDoorsState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GhostLab/EntranceDoorsState
    // [TokenAttribute] Offset: FFFFFFFF
    struct EntranceDoorsState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EntranceDoorsState
      constexpr EntranceDoorsState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GhostLab/EntranceDoorsState BothClosed
      static constexpr const int BothClosed = 0;
      // Get static field: static public GhostLab/EntranceDoorsState BothClosed
      static ::GlobalNamespace::GhostLab::EntranceDoorsState _get_BothClosed();
      // Set static field: static public GhostLab/EntranceDoorsState BothClosed
      static void _set_BothClosed(::GlobalNamespace::GhostLab::EntranceDoorsState value);
      // static field const value: static public GhostLab/EntranceDoorsState InnerDoorOpen
      static constexpr const int InnerDoorOpen = 1;
      // Get static field: static public GhostLab/EntranceDoorsState InnerDoorOpen
      static ::GlobalNamespace::GhostLab::EntranceDoorsState _get_InnerDoorOpen();
      // Set static field: static public GhostLab/EntranceDoorsState InnerDoorOpen
      static void _set_InnerDoorOpen(::GlobalNamespace::GhostLab::EntranceDoorsState value);
      // static field const value: static public GhostLab/EntranceDoorsState OuterDoorOpen
      static constexpr const int OuterDoorOpen = 2;
      // Get static field: static public GhostLab/EntranceDoorsState OuterDoorOpen
      static ::GlobalNamespace::GhostLab::EntranceDoorsState _get_OuterDoorOpen();
      // Set static field: static public GhostLab/EntranceDoorsState OuterDoorOpen
      static void _set_OuterDoorOpen(::GlobalNamespace::GhostLab::EntranceDoorsState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GhostLab/EntranceDoorsState
    #pragma pack(pop)
    static check_size<sizeof(GhostLab::EntranceDoorsState), 0 + sizeof(int)> __GlobalNamespace_GhostLab_EntranceDoorsStateSizeCheck;
    static_assert(sizeof(GhostLab::EntranceDoorsState) == 0x4);
    public:
    // public IDCardScanner entranceDoorScanner
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IDCardScanner* entranceDoorScanner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IDCardScanner*) == 0x8);
    // public UnityEngine.Transform outerDoor
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* outerDoor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform innerDoor
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* innerDoor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 doorTravelDistance
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 doorTravelDistance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single doorMoveSpeed
    // Size: 0x4
    // Offset: 0x44
    float doorMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single singleDoorMoveSpeed
    // Size: 0x4
    // Offset: 0x48
    float singleDoorMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public GhostLab/EntranceDoorsState doorState
    // Size: 0x4
    // Offset: 0x4C
    ::GlobalNamespace::GhostLab::EntranceDoorsState doorState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLab::EntranceDoorsState) == 0x4);
    // public GhostLabReliableState relState
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::GhostLabReliableState* relState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLabReliableState*) == 0x8);
    // public UnityEngine.Transform toggleDoorsParent
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* toggleDoorsParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform[] slidingDoor
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Transform*> slidingDoor;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Vector3 singleDoorTravelDistance
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 singleDoorTravelDistance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: singleDoorTravelDistance and: doorOpen
    char __padding10[0x4] = {};
    // private System.Boolean[] doorOpen
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<bool> doorOpen;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBuildValidation
    operator ::GlobalNamespace::IBuildValidation() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBuildValidation*>(this);
    }
    // Get instance field reference: public IDCardScanner entranceDoorScanner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IDCardScanner*& dyn_entranceDoorScanner();
    // Get instance field reference: public UnityEngine.Transform outerDoor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_outerDoor();
    // Get instance field reference: public UnityEngine.Transform innerDoor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_innerDoor();
    // Get instance field reference: public UnityEngine.Vector3 doorTravelDistance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_doorTravelDistance();
    // Get instance field reference: public System.Single doorMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_doorMoveSpeed();
    // Get instance field reference: public System.Single singleDoorMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_singleDoorMoveSpeed();
    // Get instance field reference: public GhostLab/EntranceDoorsState doorState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab::EntranceDoorsState& dyn_doorState();
    // Get instance field reference: public GhostLabReliableState relState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLabReliableState*& dyn_relState();
    // Get instance field reference: public UnityEngine.Transform toggleDoorsParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_toggleDoorsParent();
    // Get instance field reference: public UnityEngine.Transform[] slidingDoor
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_slidingDoor();
    // Get instance field reference: public UnityEngine.Vector3 singleDoorTravelDistance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_singleDoorTravelDistance();
    // Get instance field reference: private System.Boolean[] doorOpen
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_doorOpen();
    // private System.Void Awake()
    // Offset: 0x26958C4
    void Awake();
    // public System.Boolean BuildValidationCheck()
    // Offset: 0x26959A4
    bool BuildValidationCheck();
    // public System.Void DoorButtonPress(System.Int32 buttonIndex, System.Boolean forSingleDoor)
    // Offset: 0x2695DC0
    void DoorButtonPress(int buttonIndex, bool forSingleDoor);
    // public System.Void UpdateDoorState(System.Int32 buttonIndex)
    // Offset: 0x2695FF4
    void UpdateDoorState(int buttonIndex);
    // public System.Void UpdateEntranceDoorsState(System.Int32 buttonIndex)
    // Offset: 0x2695E10
    void UpdateEntranceDoorsState(int buttonIndex);
    // public System.Void Update()
    // Offset: 0x269658C
    void Update();
    // private System.Void SynchStates()
    // Offset: 0x2696A48
    void SynchStates();
    // public System.Boolean IsDoorMoving(System.Boolean singleDoor, System.Int32 index)
    // Offset: 0x26955EC
    bool IsDoorMoving(bool singleDoor, int index);
    // public System.Void .ctor()
    // Offset: 0x2696AC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GhostLab* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GhostLab*, creationType>()));
    }
  }; // GhostLab
  #pragma pack(pop)
  static check_size<sizeof(GhostLab), 120 + sizeof(::ArrayW<bool>)> __GlobalNamespace_GhostLabSizeCheck;
  static_assert(sizeof(GhostLab) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GhostLab::EntranceDoorsState, "", "GhostLab/EntranceDoorsState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)()>(&GlobalNamespace::GhostLab::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::BuildValidationCheck
// Il2CppName: BuildValidationCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GhostLab::*)()>(&GlobalNamespace::GhostLab::BuildValidationCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "BuildValidationCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::DoorButtonPress
// Il2CppName: DoorButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)(int, bool)>(&GlobalNamespace::GhostLab::DoorButtonPress)> {
  static const MethodInfo* get() {
    static auto* buttonIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* forSingleDoor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "DoorButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonIndex, forSingleDoor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::UpdateDoorState
// Il2CppName: UpdateDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)(int)>(&GlobalNamespace::GhostLab::UpdateDoorState)> {
  static const MethodInfo* get() {
    static auto* buttonIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "UpdateDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::UpdateEntranceDoorsState
// Il2CppName: UpdateEntranceDoorsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)(int)>(&GlobalNamespace::GhostLab::UpdateEntranceDoorsState)> {
  static const MethodInfo* get() {
    static auto* buttonIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "UpdateEntranceDoorsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)()>(&GlobalNamespace::GhostLab::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::SynchStates
// Il2CppName: SynchStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLab::*)()>(&GlobalNamespace::GhostLab::SynchStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "SynchStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::IsDoorMoving
// Il2CppName: IsDoorMoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GhostLab::*)(bool, int)>(&GlobalNamespace::GhostLab::IsDoorMoving)> {
  static const MethodInfo* get() {
    static auto* singleDoor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLab*), "IsDoorMoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{singleDoor, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLab::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
