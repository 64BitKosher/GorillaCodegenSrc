// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAsset
  class TextAsset;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegalAgreementBodyText
  class LegalAgreementBodyText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegalAgreementBodyText);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreementBodyText*, "", "LegalAgreementBodyText");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: LegalAgreementBodyText
  // [TokenAttribute] Offset: FFFFFFFF
  class LegalAgreementBodyText : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LegalAgreementBodyText::State
    struct State;
    // Nested type: ::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10
    struct $UpdateTextFromPlayFabTitleData$d__10;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LegalAgreementBodyText/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LegalAgreementBodyText/State Ready
      static constexpr const int Ready = 0;
      // Get static field: static public LegalAgreementBodyText/State Ready
      static ::GlobalNamespace::LegalAgreementBodyText::State _get_Ready();
      // Set static field: static public LegalAgreementBodyText/State Ready
      static void _set_Ready(::GlobalNamespace::LegalAgreementBodyText::State value);
      // static field const value: static public LegalAgreementBodyText/State Loading
      static constexpr const int Loading = 1;
      // Get static field: static public LegalAgreementBodyText/State Loading
      static ::GlobalNamespace::LegalAgreementBodyText::State _get_Loading();
      // Set static field: static public LegalAgreementBodyText/State Loading
      static void _set_Loading(::GlobalNamespace::LegalAgreementBodyText::State value);
      // static field const value: static public LegalAgreementBodyText/State Error
      static constexpr const int Error = 2;
      // Get static field: static public LegalAgreementBodyText/State Error
      static ::GlobalNamespace::LegalAgreementBodyText::State _get_Error();
      // Set static field: static public LegalAgreementBodyText/State Error
      static void _set_Error(::GlobalNamespace::LegalAgreementBodyText::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LegalAgreementBodyText/State
    #pragma pack(pop)
    static check_size<sizeof(LegalAgreementBodyText::State), 0 + sizeof(int)> __GlobalNamespace_LegalAgreementBodyText_StateSizeCheck;
    static_assert(sizeof(LegalAgreementBodyText::State) == 0x4);
    public:
    // private UnityEngine.UI.Text textBox
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* textBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.TextAsset textAsset
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::TextAsset* textAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // private UnityEngine.RectTransform rectTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UI.Text> textCollection
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>* textCollection;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*) == 0x8);
    // private System.String cachedText
    // Size: 0x8
    // Offset: 0x40
    ::StringW cachedText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private LegalAgreementBodyText/State state
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::LegalAgreementBodyText::State state;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LegalAgreementBodyText::State) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.UI.Text textBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_textBox();
    // Get instance field reference: private UnityEngine.TextAsset textAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_textAsset();
    // Get instance field reference: private UnityEngine.RectTransform rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_rectTransform();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UI.Text> textCollection
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*& dyn_textCollection();
    // Get instance field reference: private System.String cachedText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cachedText();
    // Get instance field reference: private LegalAgreementBodyText/State state
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementBodyText::State& dyn_state();
    // private System.Void Awake()
    // Offset: 0x27523B0
    void Awake();
    // public System.Void SetText(System.String text)
    // Offset: 0x2752454
    void SetText(::StringW text);
    // public System.Void ClearText()
    // Offset: 0x2752724
    void ClearText();
    // public System.Threading.Tasks.Task`1<System.Boolean> UpdateTextFromPlayFabTitleData(System.String key, System.String version)
    // Offset: 0x27528A4
    ::System::Threading::Tasks::Task_1<bool>* UpdateTextFromPlayFabTitleData(::StringW key, ::StringW version);
    // private System.Void OnPlayFabError(PlayFab.PlayFabError obj)
    // Offset: 0x27529E0
    void OnPlayFabError(::PlayFab::PlayFabError* obj);
    // private System.Void OnTitleDataReceived(System.String text)
    // Offset: 0x2752A7C
    void OnTitleDataReceived(::StringW text);
    // public System.Single get_Height()
    // Offset: 0x2752A9C
    float get_Height();
    // public System.Void .ctor()
    // Offset: 0x2752AC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegalAgreementBodyText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegalAgreementBodyText*, creationType>()));
    }
  }; // LegalAgreementBodyText
  #pragma pack(pop)
  static check_size<sizeof(LegalAgreementBodyText), 72 + sizeof(::GlobalNamespace::LegalAgreementBodyText::State)> __GlobalNamespace_LegalAgreementBodyTextSizeCheck;
  static_assert(sizeof(LegalAgreementBodyText) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreementBodyText::State, "", "LegalAgreementBodyText/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreementBodyText::*)()>(&GlobalNamespace::LegalAgreementBodyText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreementBodyText::*)(::StringW)>(&GlobalNamespace::LegalAgreementBodyText::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::ClearText
// Il2CppName: ClearText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreementBodyText::*)()>(&GlobalNamespace::LegalAgreementBodyText::ClearText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "ClearText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::UpdateTextFromPlayFabTitleData
// Il2CppName: UpdateTextFromPlayFabTitleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (GlobalNamespace::LegalAgreementBodyText::*)(::StringW, ::StringW)>(&GlobalNamespace::LegalAgreementBodyText::UpdateTextFromPlayFabTitleData)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "UpdateTextFromPlayFabTitleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, version});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::OnPlayFabError
// Il2CppName: OnPlayFabError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreementBodyText::*)(::PlayFab::PlayFabError*)>(&GlobalNamespace::LegalAgreementBodyText::OnPlayFabError)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "OnPlayFabError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::OnTitleDataReceived
// Il2CppName: OnTitleDataReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreementBodyText::*)(::StringW)>(&GlobalNamespace::LegalAgreementBodyText::OnTitleDataReceived)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "OnTitleDataReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LegalAgreementBodyText::*)()>(&GlobalNamespace::LegalAgreementBodyText::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreementBodyText*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementBodyText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
