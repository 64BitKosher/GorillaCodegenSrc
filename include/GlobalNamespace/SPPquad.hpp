// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRPassthroughLayer
  class OVRPassthroughLayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SPPquad
  class SPPquad;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SPPquad);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SPPquad*, "", "SPPquad");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: SPPquad
  // [TokenAttribute] Offset: FFFFFFFF
  class SPPquad : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private OVRPassthroughLayer passthroughLayer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRPassthroughLayer* passthroughLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer*) == 0x8);
    // public UnityEngine.MeshFilter projectionObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshFilter* projectionObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private OVRInput/Controller controllerHand
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRInput::Controller controllerHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    public:
    // Get instance field reference: private OVRPassthroughLayer passthroughLayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer*& dyn_passthroughLayer();
    // Get instance field reference: public UnityEngine.MeshFilter projectionObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_projectionObject();
    // Get instance field reference: private OVRInput/Controller controllerHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_controllerHand();
    // private System.Void Start()
    // Offset: 0x293C9F8
    void Start();
    // public System.Void Grab(OVRInput/Controller grabHand)
    // Offset: 0x293CC50
    void Grab(::GlobalNamespace::OVRInput::Controller grabHand);
    // public System.Void Release()
    // Offset: 0x293CC9C
    void Release();
    // public System.Void .ctor()
    // Offset: 0x293CCDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPPquad* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SPPquad::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPPquad*, creationType>()));
    }
  }; // SPPquad
  #pragma pack(pop)
  static check_size<sizeof(SPPquad), 48 + sizeof(::GlobalNamespace::OVRInput::Controller)> __GlobalNamespace_SPPquadSizeCheck;
  static_assert(sizeof(SPPquad) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SPPquad::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SPPquad::*)()>(&GlobalNamespace::SPPquad::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SPPquad*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SPPquad::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SPPquad::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::SPPquad::Grab)> {
  static const MethodInfo* get() {
    static auto* grabHand = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SPPquad*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SPPquad::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SPPquad::*)()>(&GlobalNamespace::SPPquad::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SPPquad*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SPPquad::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
