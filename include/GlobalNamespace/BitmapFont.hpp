// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: TextAsset
  class TextAsset;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BitmapFont
  class BitmapFont;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BitmapFont);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BitmapFont*, "", "BitmapFont");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: BitmapFont
  // [TokenAttribute] Offset: FFFFFFFF
  class BitmapFont : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::BitmapFont::SymbolData
    struct SymbolData;
    // Nested type: ::GlobalNamespace::BitmapFont::$$c
    class $$c;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BitmapFont/SymbolData
    // [TokenAttribute] Offset: FFFFFFFF
    struct SymbolData/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Char character
      // Size: 0x2
      // Offset: 0x0
      ::Il2CppChar character;
      // Field size check
      static_assert(sizeof(::Il2CppChar) == 0x2);
      // Padding between fields: character and: id
      char __padding0[0x2] = {};
      // public System.Int32 id
      // Size: 0x4
      // Offset: 0x4
      int id;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 width
      // Size: 0x4
      // Offset: 0x8
      int width;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 height
      // Size: 0x4
      // Offset: 0xC
      int height;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 x
      // Size: 0x4
      // Offset: 0x10
      int x;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 y
      // Size: 0x4
      // Offset: 0x14
      int y;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 xadvance
      // Size: 0x4
      // Offset: 0x18
      int xadvance;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 yoffset
      // Size: 0x4
      // Offset: 0x1C
      int yoffset;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SymbolData
      constexpr SymbolData(::Il2CppChar character_ = {}, int id_ = {}, int width_ = {}, int height_ = {}, int x_ = {}, int y_ = {}, int xadvance_ = {}, int yoffset_ = {}) noexcept : character{character_}, id{id_}, width{width_}, height{height_}, x{x_}, y{y_}, xadvance{xadvance_}, yoffset{yoffset_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Char character
      [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_character();
      // Get instance field reference: public System.Int32 id
      [[deprecated("Use field access instead!")]] int& dyn_id();
      // Get instance field reference: public System.Int32 width
      [[deprecated("Use field access instead!")]] int& dyn_width();
      // Get instance field reference: public System.Int32 height
      [[deprecated("Use field access instead!")]] int& dyn_height();
      // Get instance field reference: public System.Int32 x
      [[deprecated("Use field access instead!")]] int& dyn_x();
      // Get instance field reference: public System.Int32 y
      [[deprecated("Use field access instead!")]] int& dyn_y();
      // Get instance field reference: public System.Int32 xadvance
      [[deprecated("Use field access instead!")]] int& dyn_xadvance();
      // Get instance field reference: public System.Int32 yoffset
      [[deprecated("Use field access instead!")]] int& dyn_yoffset();
    }; // BitmapFont/SymbolData
    #pragma pack(pop)
    static check_size<sizeof(BitmapFont::SymbolData), 28 + sizeof(int)> __GlobalNamespace_BitmapFont_SymbolDataSizeCheck;
    static_assert(sizeof(BitmapFont::SymbolData) == 0x20);
    public:
    // public UnityEngine.Texture2D fontImage
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture2D* fontImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.TextAsset fontJson
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::TextAsset* fontJson;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public System.Int32 symbolPixelsPerUnit
    // Size: 0x4
    // Offset: 0x28
    int symbolPixelsPerUnit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: symbolPixelsPerUnit and: characterMap
    char __padding2[0x4] = {};
    // public System.String characterMap
    // Size: 0x8
    // Offset: 0x30
    ::StringW characterMap;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public BitmapFont/SymbolData[] symbols
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::BitmapFont::SymbolData> symbols;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BitmapFont::SymbolData>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Char,BitmapFont/SymbolData> _charToSymbol
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::BitmapFont::SymbolData>* charToSymbol;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::BitmapFont::SymbolData>*) == 0x8);
    // private UnityEngine.Color[] _empty
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Color> empty;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Texture2D fontImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_fontImage();
    // Get instance field reference: public UnityEngine.TextAsset fontJson
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_fontJson();
    // Get instance field reference: public System.Int32 symbolPixelsPerUnit
    [[deprecated("Use field access instead!")]] int& dyn_symbolPixelsPerUnit();
    // Get instance field reference: public System.String characterMap
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterMap();
    // Get instance field reference: public BitmapFont/SymbolData[] symbols
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BitmapFont::SymbolData>& dyn_symbols();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Char,BitmapFont/SymbolData> _charToSymbol
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::BitmapFont::SymbolData>*& dyn__charToSymbol();
    // Get instance field reference: private UnityEngine.Color[] _empty
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__empty();
    // private System.Void OnEnable()
    // Offset: 0x2974A00
    void OnEnable();
    // public System.Void RenderToTexture(UnityEngine.Texture2D target, System.String text)
    // Offset: 0x2974BA8
    void RenderToTexture(::UnityEngine::Texture2D* target, ::StringW text);
    // public System.Void .ctor()
    // Offset: 0x2974E24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitmapFont* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitmapFont*, creationType>()));
    }
  }; // BitmapFont
  #pragma pack(pop)
  static check_size<sizeof(BitmapFont), 72 + sizeof(::ArrayW<::UnityEngine::Color>)> __GlobalNamespace_BitmapFontSizeCheck;
  static_assert(sizeof(BitmapFont) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BitmapFont::SymbolData, "", "BitmapFont/SymbolData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BitmapFont::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BitmapFont::*)()>(&GlobalNamespace::BitmapFont::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitmapFont*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BitmapFont::RenderToTexture
// Il2CppName: RenderToTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BitmapFont::*)(::UnityEngine::Texture2D*, ::StringW)>(&GlobalNamespace::BitmapFont::RenderToTexture)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitmapFont*), "RenderToTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BitmapFont::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
