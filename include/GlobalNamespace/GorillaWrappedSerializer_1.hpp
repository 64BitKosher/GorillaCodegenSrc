// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
// Including type: Photon.Pun.IOnPhotonViewPreNetDestroy
#include "Photon/Pun/IOnPhotonViewPreNetDestroy.hpp"
// Including type: Fusion.Changed`1
#include "Fusion/Changed_1.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: INetworkStruct
  class INetworkStruct;
  // Forward declaring type: NetworkObject
  class NetworkObject;
  // Forward declaring type: ChangedDelegate`1<T>
  template<typename T>
  class ChangedDelegate_1;
  // Forward declaring type: NetworkBehaviourCallbacks`1<T>
  template<typename T>
  class NetworkBehaviourCallbacks_1;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IWrappedSerializable
  class IWrappedSerializable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaWrappedSerializer`1<T>
  template<typename T>
  class GorillaWrappedSerializer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::GorillaWrappedSerializer_1, "", "GorillaWrappedSerializer`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaWrappedSerializer`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  template<typename T>
  class GorillaWrappedSerializer_1 : public ::Fusion::NetworkBehaviour/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IPunInstantiateMagicCallback, public ::Photon::Pun::IOnPhotonViewPreNetDestroy*/ {
    public:
    public:
    // protected System.Boolean successfullInstantiate
    // Size: 0x1
    // Offset: 0x0
    bool successfullInstantiate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private IWrappedSerializable serializeTarget
    // Size: 0x8
    // Offset: 0x0
    ::GlobalNamespace::IWrappedSerializable* serializeTarget;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IWrappedSerializable*) == 0x8);
    // private System.Type targetType
    // Size: 0x8
    // Offset: 0x0
    ::System::Type* targetType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // protected UnityEngine.GameObject targetObject
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::GameObject* targetObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // protected Fusion.NetworkObject networkObject
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::NetworkObject* networkObject;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObject*) == 0x8);
    // private T <data>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T data;
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewPreNetDestroy
    operator ::Photon::Pun::IOnPhotonViewPreNetDestroy() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewPreNetDestroy*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static Fusion.Changed`1<GorillaWrappedSerializer`1> $IL2CPP_CHANGED
    static ::Fusion::Changed_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*> _get_$IL2CPP_CHANGED() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_get_$IL2CPP_CHANGED");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::Changed_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_CHANGED"));
    }
    // Autogenerated static field setter
    // Set static field: static Fusion.Changed`1<GorillaWrappedSerializer`1> $IL2CPP_CHANGED
    static void _set_$IL2CPP_CHANGED(::Fusion::Changed_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_set_$IL2CPP_CHANGED");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_CHANGED", value));
    }
    // Autogenerated static field getter
    // Get static field: static Fusion.ChangedDelegate`1<GorillaWrappedSerializer`1> $IL2CPP_CHANGED_DELEGATE
    static ::Fusion::ChangedDelegate_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>* _get_$IL2CPP_CHANGED_DELEGATE() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_get_$IL2CPP_CHANGED_DELEGATE");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::ChangedDelegate_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_CHANGED_DELEGATE"));
    }
    // Autogenerated static field setter
    // Set static field: static Fusion.ChangedDelegate`1<GorillaWrappedSerializer`1> $IL2CPP_CHANGED_DELEGATE
    static void _set_$IL2CPP_CHANGED_DELEGATE(::Fusion::ChangedDelegate_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_set_$IL2CPP_CHANGED_DELEGATE");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_CHANGED_DELEGATE", value));
    }
    // Autogenerated static field getter
    // Get static field: static Fusion.NetworkBehaviourCallbacks`1<GorillaWrappedSerializer`1> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static ::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>* _get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS"));
    }
    // Autogenerated static field setter
    // Set static field: static Fusion.NetworkBehaviourCallbacks`1<GorillaWrappedSerializer`1> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static void _set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS(::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::GorillaWrappedSerializer_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::_set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GorillaWrappedSerializer_1<T>*>::get(), "$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS", value));
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Boolean successfullInstantiate
    [[deprecated("Use field access instead!")]] bool& dyn_successfullInstantiate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_successfullInstantiate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "successfullInstantiate"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private IWrappedSerializable serializeTarget
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IWrappedSerializable*& dyn_serializeTarget() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_serializeTarget");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serializeTarget"))->offset;
      return *reinterpret_cast<::GlobalNamespace::IWrappedSerializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Type targetType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_targetType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_targetType");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetType"))->offset;
      return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected UnityEngine.GameObject targetObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_targetObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_targetObject");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetObject"))->offset;
      return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_photonView");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonView"))->offset;
      return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected Fusion.NetworkObject networkObject
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject*& dyn_networkObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_networkObject");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkObject"))->offset;
      return *reinterpret_cast<::Fusion::NetworkObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T <data>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$data$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::dyn_$data$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<data>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected T get_data()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::get_data");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // protected System.Void set_data(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_data(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::set_data");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_IsLocallyOwned()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsLocallyOwned() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::get_IsLocallyOwned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsLocallyOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Photon_Pun_IPunInstantiateMagicCallback_OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
    }
    // private System.Void ProcessSpawn(PhotonMessageInfoWrapped wrappedInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessSpawn(::GlobalNamespace::PhotonMessageInfoWrapped wrappedInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::ProcessSpawn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSpawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wrappedInfo)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, wrappedInfo);
    }
    // protected System.Boolean OnSpawnSetupCheck(PhotonMessageInfoWrapped wrappedInfo, out UnityEngine.GameObject outTargetObject, out System.Type outTargetType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool OnSpawnSetupCheck(::GlobalNamespace::PhotonMessageInfoWrapped wrappedInfo, ByRef<::UnityEngine::GameObject*> outTargetObject, ByRef<::System::Type*> outTargetType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::OnSpawnSetupCheck");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, wrappedInfo, byref(outTargetObject), byref(outTargetType));
    }
    // protected System.Void OnSuccesfullySpawned(PhotonMessageInfoWrapped info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSuccesfullySpawned(::GlobalNamespace::PhotonMessageInfoWrapped info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::OnSuccesfullySpawned");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
    }
    // private System.Void FailedToSpawn()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FailedToSpawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::FailedToSpawn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FailedToSpawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void OnFailedSpawn()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnFailedSpawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::OnFailedSpawn");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::Photon.Pun.IPunObservable.OnPhotonSerializeView");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
    }
    // private System.Void Photon.Pun.IOnPhotonViewPreNetDestroy.OnPreNetDestroy(Photon.Pun.PhotonView rootView)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Photon_Pun_IOnPhotonViewPreNetDestroy_OnPreNetDestroy(::Photon::Pun::PhotonView* rootView) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::Photon.Pun.IOnPhotonViewPreNetDestroy.OnPreNetDestroy");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rootView);
    }
    // protected System.Void OnBeforeDespawn()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeDespawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::OnBeforeDespawn");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaWrappedSerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaWrappedSerializer_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaWrappedSerializer_1<T>*, creationType>()));
    }
    // public override System.Void Spawned()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Spawned()
    void Spawned() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::Spawned");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkBehaviour*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public override System.Void FixedUpdateNetwork()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::FixedUpdateNetwork()
    void FixedUpdateNetwork() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::FixedUpdateNetwork");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkBehaviour*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public override System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    void Despawned(::Fusion::NetworkRunner* runner, bool hasState) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::Despawned");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkBehaviour*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, runner, hasState);
    }
    // public override System.Void CopyBackingFieldsToState(System.Boolean )
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyBackingFieldsToState(System.Boolean )
    void CopyBackingFieldsToState(bool param_0) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::CopyBackingFieldsToState");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkBehaviour*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, param_0);
    }
    // public override System.Void CopyStateToBackingFields()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyStateToBackingFields()
    void CopyStateToBackingFields() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWrappedSerializer_1::CopyStateToBackingFields");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkBehaviour*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // GorillaWrappedSerializer`1
  // Could not write size check! Type: GorillaWrappedSerializer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
