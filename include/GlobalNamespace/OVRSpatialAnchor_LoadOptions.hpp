// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRSpatialAnchor
#include "GlobalNamespace/OVRSpatialAnchor.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRSpace/StorageLocation
#include "GlobalNamespace/OVRSpace_StorageLocation.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: OVRSpaceQuery
#include "GlobalNamespace/OVRSpaceQuery.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::LoadOptions, "", "OVRSpatialAnchor/LoadOptions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRSpatialAnchor/LoadOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRSpatialAnchor::LoadOptions/*, public ::System::ValueType*/ {
    public:
    public:
    // private OVRSpace/StorageLocation <StorageLocation>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRSpace::StorageLocation StorageLocation;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpace::StorageLocation) == 0x4);
    // private System.Int32 <MaxAnchorCount>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int MaxAnchorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Double <Timeout>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    double Timeout;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Collections.Generic.IReadOnlyList`1<System.Guid> _uuids
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IReadOnlyList_1<::System::Guid>* uuids;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::System::Guid>*) == 0x8);
    public:
    // Creating value type constructor for type: LoadOptions
    constexpr LoadOptions(::GlobalNamespace::OVRSpace::StorageLocation StorageLocation_ = {}, int MaxAnchorCount_ = {}, double Timeout_ = {}, ::System::Collections::Generic::IReadOnlyList_1<::System::Guid>* uuids_ = {}) noexcept : StorageLocation{StorageLocation_}, MaxAnchorCount{MaxAnchorCount_}, Timeout{Timeout_}, uuids{uuids_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 MaxSupported
    static constexpr const int MaxSupported = 1024;
    // Get static field: static public System.Int32 MaxSupported
    static int _get_MaxSupported();
    // Set static field: static public System.Int32 MaxSupported
    static void _set_MaxSupported(int value);
    // Get instance field reference: private OVRSpace/StorageLocation <StorageLocation>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace::StorageLocation& dyn_$StorageLocation$k__BackingField();
    // Get instance field reference: private System.Int32 <MaxAnchorCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxAnchorCount$k__BackingField();
    // Get instance field reference: private System.Double <Timeout>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$Timeout$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<System.Guid> _uuids
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::System::Guid>*& dyn__uuids();
    // public OVRSpace/StorageLocation get_StorageLocation()
    // Offset: 0x492E324
    ::GlobalNamespace::OVRSpace::StorageLocation get_StorageLocation();
    // public System.Void set_StorageLocation(OVRSpace/StorageLocation value)
    // Offset: 0x492E32C
    void set_StorageLocation(::GlobalNamespace::OVRSpace::StorageLocation value);
    // public System.Int32 get_MaxAnchorCount()
    // Offset: 0x492E334
    int get_MaxAnchorCount();
    // public System.Void set_MaxAnchorCount(System.Int32 value)
    // Offset: 0x492E33C
    void set_MaxAnchorCount(int value);
    // public System.Double get_Timeout()
    // Offset: 0x492E344
    double get_Timeout();
    // public System.Void set_Timeout(System.Double value)
    // Offset: 0x492E34C
    void set_Timeout(double value);
    // public System.Collections.Generic.IReadOnlyList`1<System.Guid> get_Uuids()
    // Offset: 0x492E354
    ::System::Collections::Generic::IReadOnlyList_1<::System::Guid>* get_Uuids();
    // public System.Void set_Uuids(System.Collections.Generic.IReadOnlyList`1<System.Guid> value)
    // Offset: 0x492E35C
    void set_Uuids(::System::Collections::Generic::IReadOnlyList_1<::System::Guid>* value);
    // OVRSpaceQuery/Options ToQueryOptions()
    // Offset: 0x492D7D0
    ::GlobalNamespace::OVRSpaceQuery::Options ToQueryOptions();
  }; // OVRSpatialAnchor/LoadOptions
  #pragma pack(pop)
  static check_size<sizeof(OVRSpatialAnchor::LoadOptions), 16 + sizeof(::System::Collections::Generic::IReadOnlyList_1<::System::Guid>*)> __GlobalNamespace_OVRSpatialAnchor_LoadOptionsSizeCheck;
  static_assert(sizeof(OVRSpatialAnchor::LoadOptions) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_StorageLocation
// Il2CppName: get_StorageLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSpace::StorageLocation (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)()>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_StorageLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "get_StorageLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_StorageLocation
// Il2CppName: set_StorageLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)(::GlobalNamespace::OVRSpace::StorageLocation)>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_StorageLocation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRSpace/StorageLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "set_StorageLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_MaxAnchorCount
// Il2CppName: get_MaxAnchorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)()>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_MaxAnchorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "get_MaxAnchorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_MaxAnchorCount
// Il2CppName: set_MaxAnchorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)(int)>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_MaxAnchorCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "set_MaxAnchorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)()>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_Timeout
// Il2CppName: set_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)(double)>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_Timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "set_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_Uuids
// Il2CppName: get_Uuids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::System::Guid>* (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)()>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::get_Uuids)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "get_Uuids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_Uuids
// Il2CppName: set_Uuids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)(::System::Collections::Generic::IReadOnlyList_1<::System::Guid>*)>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::set_Uuids)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "set_Uuids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadOptions::ToQueryOptions
// Il2CppName: ToQueryOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSpaceQuery::Options (GlobalNamespace::OVRSpatialAnchor::LoadOptions::*)()>(&GlobalNamespace::OVRSpatialAnchor::LoadOptions::ToQueryOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor::LoadOptions), "ToQueryOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
