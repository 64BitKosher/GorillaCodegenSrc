// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin::OVRP_1_68_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::OVRP_1_68_0*, "", "OVRPlugin/OVRP_1_68_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/OVRP_1_68_0
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPlugin::OVRP_1_68_0 : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Version version
    static ::System::Version* _get_version();
    // Set static field: static public readonly System.Version version
    static void _set_version(::System::Version* value);
    // static field const value: static public System.Int32 OVRP_RENDER_MODEL_MAX_PATH_LENGTH
    static constexpr const int OVRP_RENDER_MODEL_MAX_PATH_LENGTH = 256;
    // Get static field: static public System.Int32 OVRP_RENDER_MODEL_MAX_PATH_LENGTH
    static int _get_OVRP_RENDER_MODEL_MAX_PATH_LENGTH();
    // Set static field: static public System.Int32 OVRP_RENDER_MODEL_MAX_PATH_LENGTH
    static void _set_OVRP_RENDER_MODEL_MAX_PATH_LENGTH(int value);
    // static field const value: static public System.Int32 OVRP_RENDER_MODEL_MAX_NAME_LENGTH
    static constexpr const int OVRP_RENDER_MODEL_MAX_NAME_LENGTH = 64;
    // Get static field: static public System.Int32 OVRP_RENDER_MODEL_MAX_NAME_LENGTH
    static int _get_OVRP_RENDER_MODEL_MAX_NAME_LENGTH();
    // Set static field: static public System.Int32 OVRP_RENDER_MODEL_MAX_NAME_LENGTH
    static void _set_OVRP_RENDER_MODEL_MAX_NAME_LENGTH(int value);
    // static public OVRPlugin/Result ovrp_LoadRenderModel(System.UInt64 modelKey, System.UInt32 bufferInputCapacity, ref System.UInt32 bufferCountOutput, System.IntPtr buffer)
    // Offset: 0x4913B2C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_LoadRenderModel(uint64_t modelKey, uint bufferInputCapacity, ByRef<uint> bufferCountOutput, ::System::IntPtr buffer);
    // static public OVRPlugin/Result ovrp_GetRenderModelPaths(System.UInt32 index, System.IntPtr path)
    // Offset: 0x4913BC8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetRenderModelPaths(uint index, ::System::IntPtr path);
    // static public OVRPlugin/Result ovrp_GetRenderModelProperties(System.String path, out OVRPlugin/RenderModelPropertiesInternal properties)
    // Offset: 0x4913C4C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetRenderModelProperties(::StringW path, ByRef<::GlobalNamespace::OVRPlugin::RenderModelPropertiesInternal> properties);
    // static public OVRPlugin/Result ovrp_SetInsightPassthroughKeyboardHandsIntensity(System.Int32 layerId, OVRPlugin/InsightPassthroughKeyboardHandsIntensity intensity)
    // Offset: 0x4913D50
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetInsightPassthroughKeyboardHandsIntensity(int layerId, ::GlobalNamespace::OVRPlugin::InsightPassthroughKeyboardHandsIntensity intensity);
    // static public OVRPlugin/Result ovrp_StartKeyboardTracking(System.UInt64 trackedKeyboardId)
    // Offset: 0x4913DE4
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StartKeyboardTracking(uint64_t trackedKeyboardId);
    // static public OVRPlugin/Result ovrp_StopKeyboardTracking()
    // Offset: 0x4913E60
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StopKeyboardTracking();
    // static public OVRPlugin/Result ovrp_GetSystemKeyboardDescription(OVRPlugin/TrackedKeyboardQueryFlags keyboardQueryFlags, out OVRPlugin/KeyboardDescription keyboardDescription)
    // Offset: 0x4913EC8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetSystemKeyboardDescription(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<::GlobalNamespace::OVRPlugin::KeyboardDescription> keyboardDescription);
    // static public OVRPlugin/Result ovrp_GetKeyboardState(OVRPlugin/Step stepId, System.Int32 frameIndex, out OVRPlugin/KeyboardState keyboardState)
    // Offset: 0x4913FC8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetKeyboardState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::KeyboardState> keyboardState);
    // static private System.Void .cctor()
    // Offset: 0x491405C
    static void _cctor();
  }; // OVRPlugin/OVRP_1_68_0
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_LoadRenderModel
// Il2CppName: ovrp_LoadRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint64_t, uint, ByRef<uint>, ::System::IntPtr)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_LoadRenderModel)> {
  static const MethodInfo* get() {
    static auto* modelKey = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bufferInputCapacity = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bufferCountOutput = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_LoadRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modelKey, bufferInputCapacity, bufferCountOutput, buffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetRenderModelPaths
// Il2CppName: ovrp_GetRenderModelPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint, ::System::IntPtr)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetRenderModelPaths)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_GetRenderModelPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetRenderModelProperties
// Il2CppName: ovrp_GetRenderModelProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::RenderModelPropertiesInternal>)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetRenderModelProperties)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/RenderModelPropertiesInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_GetRenderModelProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, properties});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_SetInsightPassthroughKeyboardHandsIntensity
// Il2CppName: ovrp_SetInsightPassthroughKeyboardHandsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(int, ::GlobalNamespace::OVRPlugin::InsightPassthroughKeyboardHandsIntensity)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_SetInsightPassthroughKeyboardHandsIntensity)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughKeyboardHandsIntensity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_SetInsightPassthroughKeyboardHandsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_StartKeyboardTracking
// Il2CppName: ovrp_StartKeyboardTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_StartKeyboardTracking)> {
  static const MethodInfo* get() {
    static auto* trackedKeyboardId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_StartKeyboardTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackedKeyboardId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_StopKeyboardTracking
// Il2CppName: ovrp_StopKeyboardTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_StopKeyboardTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_StopKeyboardTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetSystemKeyboardDescription
// Il2CppName: ovrp_GetSystemKeyboardDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags, ByRef<::GlobalNamespace::OVRPlugin::KeyboardDescription>)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetSystemKeyboardDescription)> {
  static const MethodInfo* get() {
    static auto* keyboardQueryFlags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackedKeyboardQueryFlags")->byval_arg;
    static auto* keyboardDescription = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/KeyboardDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_GetSystemKeyboardDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyboardQueryFlags, keyboardDescription});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetKeyboardState
// Il2CppName: ovrp_GetKeyboardState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::KeyboardState>)>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::ovrp_GetKeyboardState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keyboardState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/KeyboardState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), "ovrp_GetKeyboardState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, keyboardState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_68_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_68_0::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_68_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
