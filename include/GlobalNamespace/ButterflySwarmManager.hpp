// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: XSceneRef
#include "GlobalNamespace/XSceneRef.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: AnimatedButterfly
#include "GlobalNamespace/AnimatedButterfly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SRand
  struct SRand;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ButterflySwarmManager
  class ButterflySwarmManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ButterflySwarmManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ButterflySwarmManager*, "", "ButterflySwarmManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: ButterflySwarmManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ButterflySwarmManager : public ::Photon::Pun::MonoBehaviourPun {
    public:
    public:
    // private XSceneRef[] perchSections
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::XSceneRef> perchSections;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::XSceneRef>) == 0x8);
    // private System.Int32 loopSizePerBee
    // Size: 0x4
    // Offset: 0x30
    int loopSizePerBee;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 numBees
    // Size: 0x4
    // Offset: 0x34
    int numBees;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.MeshRenderer beePrefab
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* beePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Single maxFlapSpeed
    // Size: 0x4
    // Offset: 0x40
    float maxFlapSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minFlapSpeed
    // Size: 0x4
    // Offset: 0x44
    float minFlapSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <PerchedFlapSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float PerchedFlapSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <PerchedFlapPhase>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    float PerchedFlapPhase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float BeeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeMaxTravelTime>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    float BeeMaxTravelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeAcceleration>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    float BeeAcceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeJitterStrength>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    float BeeJitterStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeJitterDamping>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    float BeeJitterDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeMaxJitterRadius>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    float BeeMaxJitterRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeNearDestinationRadius>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    float BeeNearDestinationRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <DestRotationAlignmentSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    float DestRotationAlignmentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <TravellingLocalRotationEuler>k__BackingField
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 TravellingLocalRotationEuler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <TravellingLocalRotation>k__BackingField
    // Size: 0x10
    // Offset: 0x7C
    ::UnityEngine::Quaternion TravellingLocalRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single <AvoidPointRadius>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    float AvoidPointRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeMinFlowerDuration>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    float BeeMinFlowerDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BeeMaxFlowerDuration>k__BackingField
    // Size: 0x4
    // Offset: 0x94
    float BeeMaxFlowerDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color[] <BeeColors>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::Color> BeeColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Collections.Generic.List`1<AnimatedButterfly> butterflies
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly>* butterflies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.GameObject>> allPerchZones
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>* allPerchZones;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*) == 0x8);
    public:
    // Get instance field reference: private XSceneRef[] perchSections
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::XSceneRef>& dyn_perchSections();
    // Get instance field reference: private System.Int32 loopSizePerBee
    [[deprecated("Use field access instead!")]] int& dyn_loopSizePerBee();
    // Get instance field reference: private System.Int32 numBees
    [[deprecated("Use field access instead!")]] int& dyn_numBees();
    // Get instance field reference: private UnityEngine.MeshRenderer beePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_beePrefab();
    // Get instance field reference: private System.Single maxFlapSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxFlapSpeed();
    // Get instance field reference: private System.Single minFlapSpeed
    [[deprecated("Use field access instead!")]] float& dyn_minFlapSpeed();
    // Get instance field reference: private System.Single <PerchedFlapSpeed>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$PerchedFlapSpeed$k__BackingField();
    // Get instance field reference: private System.Single <PerchedFlapPhase>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$PerchedFlapPhase$k__BackingField();
    // Get instance field reference: private System.Single <BeeSpeed>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeSpeed$k__BackingField();
    // Get instance field reference: private System.Single <BeeMaxTravelTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeMaxTravelTime$k__BackingField();
    // Get instance field reference: private System.Single <BeeAcceleration>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeAcceleration$k__BackingField();
    // Get instance field reference: private System.Single <BeeJitterStrength>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeJitterStrength$k__BackingField();
    // Get instance field reference: private System.Single <BeeJitterDamping>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeJitterDamping$k__BackingField();
    // Get instance field reference: private System.Single <BeeMaxJitterRadius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeMaxJitterRadius$k__BackingField();
    // Get instance field reference: private System.Single <BeeNearDestinationRadius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeNearDestinationRadius$k__BackingField();
    // Get instance field reference: private System.Single <DestRotationAlignmentSpeed>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$DestRotationAlignmentSpeed$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <TravellingLocalRotationEuler>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TravellingLocalRotationEuler$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <TravellingLocalRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$TravellingLocalRotation$k__BackingField();
    // Get instance field reference: private System.Single <AvoidPointRadius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$AvoidPointRadius$k__BackingField();
    // Get instance field reference: private System.Single <BeeMinFlowerDuration>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeMinFlowerDuration$k__BackingField();
    // Get instance field reference: private System.Single <BeeMaxFlowerDuration>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BeeMaxFlowerDuration$k__BackingField();
    // Get instance field reference: private UnityEngine.Color[] <BeeColors>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_$BeeColors$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<AnimatedButterfly> butterflies
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly>*& dyn_butterflies();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.GameObject>> allPerchZones
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*& dyn_allPerchZones();
    // public System.Single get_PerchedFlapSpeed()
    // Offset: 0x2787DF0
    float get_PerchedFlapSpeed();
    // private System.Void set_PerchedFlapSpeed(System.Single value)
    // Offset: 0x2787DF8
    void set_PerchedFlapSpeed(float value);
    // public System.Single get_PerchedFlapPhase()
    // Offset: 0x2787E00
    float get_PerchedFlapPhase();
    // private System.Void set_PerchedFlapPhase(System.Single value)
    // Offset: 0x2787E08
    void set_PerchedFlapPhase(float value);
    // public System.Single get_BeeSpeed()
    // Offset: 0x2787E10
    float get_BeeSpeed();
    // private System.Void set_BeeSpeed(System.Single value)
    // Offset: 0x2787E18
    void set_BeeSpeed(float value);
    // public System.Single get_BeeMaxTravelTime()
    // Offset: 0x2787E20
    float get_BeeMaxTravelTime();
    // private System.Void set_BeeMaxTravelTime(System.Single value)
    // Offset: 0x2787E28
    void set_BeeMaxTravelTime(float value);
    // public System.Single get_BeeAcceleration()
    // Offset: 0x2787E30
    float get_BeeAcceleration();
    // private System.Void set_BeeAcceleration(System.Single value)
    // Offset: 0x2787E38
    void set_BeeAcceleration(float value);
    // public System.Single get_BeeJitterStrength()
    // Offset: 0x2787E40
    float get_BeeJitterStrength();
    // private System.Void set_BeeJitterStrength(System.Single value)
    // Offset: 0x2787E48
    void set_BeeJitterStrength(float value);
    // public System.Single get_BeeJitterDamping()
    // Offset: 0x2787E50
    float get_BeeJitterDamping();
    // private System.Void set_BeeJitterDamping(System.Single value)
    // Offset: 0x2787E58
    void set_BeeJitterDamping(float value);
    // public System.Single get_BeeMaxJitterRadius()
    // Offset: 0x2787E60
    float get_BeeMaxJitterRadius();
    // private System.Void set_BeeMaxJitterRadius(System.Single value)
    // Offset: 0x2787E68
    void set_BeeMaxJitterRadius(float value);
    // public System.Single get_BeeNearDestinationRadius()
    // Offset: 0x2787E70
    float get_BeeNearDestinationRadius();
    // private System.Void set_BeeNearDestinationRadius(System.Single value)
    // Offset: 0x2787E78
    void set_BeeNearDestinationRadius(float value);
    // public System.Single get_DestRotationAlignmentSpeed()
    // Offset: 0x2787E80
    float get_DestRotationAlignmentSpeed();
    // private System.Void set_DestRotationAlignmentSpeed(System.Single value)
    // Offset: 0x2787E88
    void set_DestRotationAlignmentSpeed(float value);
    // public UnityEngine.Vector3 get_TravellingLocalRotationEuler()
    // Offset: 0x2787E90
    ::UnityEngine::Vector3 get_TravellingLocalRotationEuler();
    // private System.Void set_TravellingLocalRotationEuler(UnityEngine.Vector3 value)
    // Offset: 0x2787E9C
    void set_TravellingLocalRotationEuler(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_TravellingLocalRotation()
    // Offset: 0x2787EA8
    ::UnityEngine::Quaternion get_TravellingLocalRotation();
    // private System.Void set_TravellingLocalRotation(UnityEngine.Quaternion value)
    // Offset: 0x2787EB4
    void set_TravellingLocalRotation(::UnityEngine::Quaternion value);
    // public System.Single get_AvoidPointRadius()
    // Offset: 0x2787EC0
    float get_AvoidPointRadius();
    // private System.Void set_AvoidPointRadius(System.Single value)
    // Offset: 0x2787EC8
    void set_AvoidPointRadius(float value);
    // public System.Single get_BeeMinFlowerDuration()
    // Offset: 0x2787ED0
    float get_BeeMinFlowerDuration();
    // private System.Void set_BeeMinFlowerDuration(System.Single value)
    // Offset: 0x2787ED8
    void set_BeeMinFlowerDuration(float value);
    // public System.Single get_BeeMaxFlowerDuration()
    // Offset: 0x2787EE0
    float get_BeeMaxFlowerDuration();
    // private System.Void set_BeeMaxFlowerDuration(System.Single value)
    // Offset: 0x2787EE8
    void set_BeeMaxFlowerDuration(float value);
    // public UnityEngine.Color[] get_BeeColors()
    // Offset: 0x2787EF0
    ::ArrayW<::UnityEngine::Color> get_BeeColors();
    // private System.Void set_BeeColors(UnityEngine.Color[] value)
    // Offset: 0x2787EF8
    void set_BeeColors(::ArrayW<::UnityEngine::Color> value);
    // private System.Void Awake()
    // Offset: 0x2787F00
    void Awake();
    // private System.Void Start()
    // Offset: 0x278811C
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x2788B38
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x2788BF8
    void Update();
    // private System.Void OnSeedChange()
    // Offset: 0x278865C
    void OnSeedChange();
    // private System.Void PickPoints(System.Int32 n, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.GameObject>> pickBuffer, ref SRand rand, System.Collections.Generic.List`1<UnityEngine.GameObject> resultBuffer)
    // Offset: 0x2788D68
    void PickPoints(int n, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>* pickBuffer, ByRef<::GlobalNamespace::SRand> rand, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* resultBuffer);
    // public System.Void .ctor()
    // Offset: 0x2788FB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButterflySwarmManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButterflySwarmManager*, creationType>()));
    }
  }; // ButterflySwarmManager
  #pragma pack(pop)
  static check_size<sizeof(ButterflySwarmManager), 168 + sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*)> __GlobalNamespace_ButterflySwarmManagerSizeCheck;
  static_assert(sizeof(ButterflySwarmManager) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_PerchedFlapSpeed
// Il2CppName: get_PerchedFlapSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_PerchedFlapSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_PerchedFlapSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_PerchedFlapSpeed
// Il2CppName: set_PerchedFlapSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_PerchedFlapSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_PerchedFlapSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_PerchedFlapPhase
// Il2CppName: get_PerchedFlapPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_PerchedFlapPhase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_PerchedFlapPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_PerchedFlapPhase
// Il2CppName: set_PerchedFlapPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_PerchedFlapPhase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_PerchedFlapPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeSpeed
// Il2CppName: get_BeeSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeSpeed
// Il2CppName: set_BeeSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeMaxTravelTime
// Il2CppName: get_BeeMaxTravelTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeMaxTravelTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeMaxTravelTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeMaxTravelTime
// Il2CppName: set_BeeMaxTravelTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeMaxTravelTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeMaxTravelTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeAcceleration
// Il2CppName: get_BeeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeAcceleration
// Il2CppName: set_BeeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeJitterStrength
// Il2CppName: get_BeeJitterStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeJitterStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeJitterStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeJitterStrength
// Il2CppName: set_BeeJitterStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeJitterStrength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeJitterStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeJitterDamping
// Il2CppName: get_BeeJitterDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeJitterDamping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeJitterDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeJitterDamping
// Il2CppName: set_BeeJitterDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeJitterDamping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeJitterDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeMaxJitterRadius
// Il2CppName: get_BeeMaxJitterRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeMaxJitterRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeMaxJitterRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeMaxJitterRadius
// Il2CppName: set_BeeMaxJitterRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeMaxJitterRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeMaxJitterRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeNearDestinationRadius
// Il2CppName: get_BeeNearDestinationRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeNearDestinationRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeNearDestinationRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeNearDestinationRadius
// Il2CppName: set_BeeNearDestinationRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeNearDestinationRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeNearDestinationRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_DestRotationAlignmentSpeed
// Il2CppName: get_DestRotationAlignmentSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_DestRotationAlignmentSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_DestRotationAlignmentSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_DestRotationAlignmentSpeed
// Il2CppName: set_DestRotationAlignmentSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_DestRotationAlignmentSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_DestRotationAlignmentSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotationEuler
// Il2CppName: get_TravellingLocalRotationEuler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotationEuler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_TravellingLocalRotationEuler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotationEuler
// Il2CppName: set_TravellingLocalRotationEuler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotationEuler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_TravellingLocalRotationEuler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotation
// Il2CppName: get_TravellingLocalRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_TravellingLocalRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotation
// Il2CppName: set_TravellingLocalRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_TravellingLocalRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_AvoidPointRadius
// Il2CppName: get_AvoidPointRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_AvoidPointRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_AvoidPointRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_AvoidPointRadius
// Il2CppName: set_AvoidPointRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_AvoidPointRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_AvoidPointRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeMinFlowerDuration
// Il2CppName: get_BeeMinFlowerDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeMinFlowerDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeMinFlowerDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeMinFlowerDuration
// Il2CppName: set_BeeMinFlowerDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeMinFlowerDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeMinFlowerDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeMaxFlowerDuration
// Il2CppName: get_BeeMaxFlowerDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeMaxFlowerDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeMaxFlowerDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeMaxFlowerDuration
// Il2CppName: set_BeeMaxFlowerDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(float)>(&GlobalNamespace::ButterflySwarmManager::set_BeeMaxFlowerDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeMaxFlowerDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::get_BeeColors
// Il2CppName: get_BeeColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::get_BeeColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "get_BeeColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::set_BeeColors
// Il2CppName: set_BeeColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(::ArrayW<::UnityEngine::Color>)>(&GlobalNamespace::ButterflySwarmManager::set_BeeColors)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "set_BeeColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::OnSeedChange
// Il2CppName: OnSeedChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)()>(&GlobalNamespace::ButterflySwarmManager::OnSeedChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "OnSeedChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::PickPoints
// Il2CppName: PickPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ButterflySwarmManager::*)(int, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*, ByRef<::GlobalNamespace::SRand>, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&GlobalNamespace::ButterflySwarmManager::PickPoints)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pickBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})})->byval_arg;
    static auto* rand = &::il2cpp_utils::GetClassFromName("", "SRand")->this_arg;
    static auto* resultBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ButterflySwarmManager*), "PickPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, pickBuffer, rand, resultBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ButterflySwarmManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
