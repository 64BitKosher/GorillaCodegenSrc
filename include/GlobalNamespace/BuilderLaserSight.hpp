// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderLaserSight
  class BuilderLaserSight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderLaserSight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderLaserSight*, "", "BuilderLaserSight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BuilderLaserSight
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderLaserSight : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.LineRenderer lineRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.LineRenderer lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_lineRenderer();
    // public System.Void Awake()
    // Offset: 0x26E09C0
    void Awake();
    // public System.Void SetPoints(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0x26E0AB0
    void SetPoints(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public System.Void Show(System.Boolean show)
    // Offset: 0x26E0B44
    void Show(bool show);
    // public System.Void .ctor()
    // Offset: 0x26E0BDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderLaserSight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderLaserSight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderLaserSight*, creationType>()));
    }
  }; // BuilderLaserSight
  #pragma pack(pop)
  static check_size<sizeof(BuilderLaserSight), 32 + sizeof(::UnityEngine::LineRenderer*)> __GlobalNamespace_BuilderLaserSightSizeCheck;
  static_assert(sizeof(BuilderLaserSight) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderLaserSight::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderLaserSight::*)()>(&GlobalNamespace::BuilderLaserSight::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderLaserSight*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderLaserSight::SetPoints
// Il2CppName: SetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderLaserSight::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::BuilderLaserSight::SetPoints)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderLaserSight*), "SetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderLaserSight::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderLaserSight::*)(bool)>(&GlobalNamespace::BuilderLaserSight::Show)> {
  static const MethodInfo* get() {
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderLaserSight*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{show});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderLaserSight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
