// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SubEmitterListener
  class SubEmitterListener;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SubEmitterListener);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SubEmitterListener*, "", "SubEmitterListener");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: SubEmitterListener
  // [TokenAttribute] Offset: FFFFFFFF
  class SubEmitterListener : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.ParticleSystem target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem subEmitter
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ParticleSystem* subEmitter;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Int32 subEmitterIndex
    // Size: 0x4
    // Offset: 0x30
    int subEmitterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: subEmitterIndex and: onSubEmit
    char __padding2[0x4] = {};
    // public UnityEngine.Events.UnityEvent onSubEmit
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* onSubEmit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public System.Single intervalScale
    // Size: 0x4
    // Offset: 0x40
    float intervalScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single interval
    // Size: 0x4
    // Offset: 0x44
    float interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _canListen
    // Size: 0x1
    // Offset: 0x48
    bool canListen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _listening
    // Size: 0x1
    // Offset: 0x49
    bool listening;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _listenOnce
    // Size: 0x1
    // Offset: 0x4A
    bool listenOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: listenOnce and: sinceLastEmit
    char __padding8[0x5] = {};
    // private TimeSince _sinceLastEmit
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::TimeSince sinceLastEmit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem target
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_target();
    // Get instance field reference: public UnityEngine.ParticleSystem subEmitter
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_subEmitter();
    // Get instance field reference: public System.Int32 subEmitterIndex
    [[deprecated("Use field access instead!")]] int& dyn_subEmitterIndex();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onSubEmit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onSubEmit();
    // Get instance field reference: public System.Single intervalScale
    [[deprecated("Use field access instead!")]] float& dyn_intervalScale();
    // Get instance field reference: public System.Single interval
    [[deprecated("Use field access instead!")]] float& dyn_interval();
    // Get instance field reference: private System.Boolean _canListen
    [[deprecated("Use field access instead!")]] bool& dyn__canListen();
    // Get instance field reference: private System.Boolean _listening
    [[deprecated("Use field access instead!")]] bool& dyn__listening();
    // Get instance field reference: private System.Boolean _listenOnce
    [[deprecated("Use field access instead!")]] bool& dyn__listenOnce();
    // Get instance field reference: private TimeSince _sinceLastEmit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn__sinceLastEmit();
    // private System.Void OnEnable()
    // Offset: 0x27514DC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2751684
    void OnDisable();
    // public System.Void ListenStart()
    // Offset: 0x275168C
    void ListenStart();
    // public System.Void ListenStop()
    // Offset: 0x27516EC
    void ListenStop();
    // public System.Void ListenOnce()
    // Offset: 0x27516F0
    void ListenOnce();
    // private System.Void Update()
    // Offset: 0x2751724
    void Update();
    // protected System.Void OnSubEmit()
    // Offset: 0x2751804
    void OnSubEmit();
    // public System.Void Enable()
    // Offset: 0x27516BC
    void Enable();
    // public System.Void Disable()
    // Offset: 0x2751654
    void Disable();
    // public System.Void .ctor()
    // Offset: 0x2751818
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubEmitterListener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubEmitterListener*, creationType>()));
    }
  }; // SubEmitterListener
  #pragma pack(pop)
  static check_size<sizeof(SubEmitterListener), 80 + sizeof(::GlobalNamespace::TimeSince)> __GlobalNamespace_SubEmitterListenerSizeCheck;
  static_assert(sizeof(SubEmitterListener) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::ListenStart
// Il2CppName: ListenStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::ListenStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "ListenStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::ListenStop
// Il2CppName: ListenStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::ListenStop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "ListenStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::ListenOnce
// Il2CppName: ListenOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::ListenOnce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "ListenOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::OnSubEmit
// Il2CppName: OnSubEmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::OnSubEmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "OnSubEmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SubEmitterListener::*)()>(&GlobalNamespace::SubEmitterListener::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubEmitterListener*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SubEmitterListener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
