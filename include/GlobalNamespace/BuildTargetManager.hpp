// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRManager
  class OVRManager;
  // Forward declaring type: GorillaTagger
  class GorillaTagger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuildTargetManager
  class BuildTargetManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuildTargetManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuildTargetManager*, "", "BuildTargetManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: BuildTargetManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BuildTargetManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BuildTargetManager::BuildTowards
    struct BuildTowards;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BuildTargetManager/BuildTowards
    // [TokenAttribute] Offset: FFFFFFFF
    struct BuildTowards/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BuildTowards
      constexpr BuildTowards(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BuildTargetManager/BuildTowards Steam
      static constexpr const int Steam = 0;
      // Get static field: static public BuildTargetManager/BuildTowards Steam
      static ::GlobalNamespace::BuildTargetManager::BuildTowards _get_Steam();
      // Set static field: static public BuildTargetManager/BuildTowards Steam
      static void _set_Steam(::GlobalNamespace::BuildTargetManager::BuildTowards value);
      // static field const value: static public BuildTargetManager/BuildTowards OculusPC
      static constexpr const int OculusPC = 1;
      // Get static field: static public BuildTargetManager/BuildTowards OculusPC
      static ::GlobalNamespace::BuildTargetManager::BuildTowards _get_OculusPC();
      // Set static field: static public BuildTargetManager/BuildTowards OculusPC
      static void _set_OculusPC(::GlobalNamespace::BuildTargetManager::BuildTowards value);
      // static field const value: static public BuildTargetManager/BuildTowards Quest
      static constexpr const int Quest = 2;
      // Get static field: static public BuildTargetManager/BuildTowards Quest
      static ::GlobalNamespace::BuildTargetManager::BuildTowards _get_Quest();
      // Set static field: static public BuildTargetManager/BuildTowards Quest
      static void _set_Quest(::GlobalNamespace::BuildTargetManager::BuildTowards value);
      // static field const value: static public BuildTargetManager/BuildTowards Viveport
      static constexpr const int Viveport = 3;
      // Get static field: static public BuildTargetManager/BuildTowards Viveport
      static ::GlobalNamespace::BuildTargetManager::BuildTowards _get_Viveport();
      // Set static field: static public BuildTargetManager/BuildTowards Viveport
      static void _set_Viveport(::GlobalNamespace::BuildTargetManager::BuildTowards value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BuildTargetManager/BuildTowards
    #pragma pack(pop)
    static check_size<sizeof(BuildTargetManager::BuildTowards), 0 + sizeof(int)> __GlobalNamespace_BuildTargetManager_BuildTowardsSizeCheck;
    static_assert(sizeof(BuildTargetManager::BuildTowards) == 0x4);
    public:
    // public BuildTargetManager/BuildTowards newBuildTarget
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::BuildTargetManager::BuildTowards newBuildTarget;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildTargetManager::BuildTowards) == 0x4);
    // public System.Boolean isBeta
    // Size: 0x1
    // Offset: 0x24
    bool isBeta;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isQA
    // Size: 0x1
    // Offset: 0x25
    bool isQA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean spoofIDs
    // Size: 0x1
    // Offset: 0x26
    bool spoofIDs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean spoofChild
    // Size: 0x1
    // Offset: 0x27
    bool spoofChild;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean enableAllCosmetics
    // Size: 0x1
    // Offset: 0x28
    bool enableAllCosmetics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableAllCosmetics and: ovrManager
    char __padding5[0x7] = {};
    // public OVRManager ovrManager
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OVRManager* ovrManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager*) == 0x8);
    // private System.String path
    // Size: 0x8
    // Offset: 0x38
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public BuildTargetManager/BuildTowards currentBuildTargetDONOTCHANGE
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::BuildTargetManager::BuildTowards currentBuildTargetDONOTCHANGE;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildTargetManager::BuildTowards) == 0x4);
    // Padding between fields: currentBuildTargetDONOTCHANGE and: gorillaTagger
    char __padding8[0x4] = {};
    // public GorillaTagger gorillaTagger
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::GorillaTagger* gorillaTagger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTagger*) == 0x8);
    // public UnityEngine.GameObject[] betaDisableObjects
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::GameObject*> betaDisableObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] betaEnableObjects
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::GameObject*> betaEnableObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Get instance field reference: public BuildTargetManager/BuildTowards newBuildTarget
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuildTargetManager::BuildTowards& dyn_newBuildTarget();
    // Get instance field reference: public System.Boolean isBeta
    [[deprecated("Use field access instead!")]] bool& dyn_isBeta();
    // Get instance field reference: public System.Boolean isQA
    [[deprecated("Use field access instead!")]] bool& dyn_isQA();
    // Get instance field reference: public System.Boolean spoofIDs
    [[deprecated("Use field access instead!")]] bool& dyn_spoofIDs();
    // Get instance field reference: public System.Boolean spoofChild
    [[deprecated("Use field access instead!")]] bool& dyn_spoofChild();
    // Get instance field reference: public System.Boolean enableAllCosmetics
    [[deprecated("Use field access instead!")]] bool& dyn_enableAllCosmetics();
    // Get instance field reference: public OVRManager ovrManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager*& dyn_ovrManager();
    // Get instance field reference: private System.String path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
    // Get instance field reference: public BuildTargetManager/BuildTowards currentBuildTargetDONOTCHANGE
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuildTargetManager::BuildTowards& dyn_currentBuildTargetDONOTCHANGE();
    // Get instance field reference: public GorillaTagger gorillaTagger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTagger*& dyn_gorillaTagger();
    // Get instance field reference: public UnityEngine.GameObject[] betaDisableObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_betaDisableObjects();
    // Get instance field reference: public UnityEngine.GameObject[] betaEnableObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_betaEnableObjects();
    // public System.String GetPath()
    // Offset: 0x27722E0
    ::StringW GetPath();
    // public System.Void .ctor()
    // Offset: 0x27722E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuildTargetManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuildTargetManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuildTargetManager*, creationType>()));
    }
  }; // BuildTargetManager
  #pragma pack(pop)
  static check_size<sizeof(BuildTargetManager), 88 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __GlobalNamespace_BuildTargetManagerSizeCheck;
  static_assert(sizeof(BuildTargetManager) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuildTargetManager::BuildTowards, "", "BuildTargetManager/BuildTowards");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuildTargetManager::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BuildTargetManager::*)()>(&GlobalNamespace::BuildTargetManager::GetPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildTargetManager*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildTargetManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
