// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MothershipHttpHeader
  class MothershipHttpHeader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HeadersVector
  class HeadersVector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeadersVector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeadersVector*, "", "HeadersVector");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: HeadersVector
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class HeadersVector : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::MothershipHttpHeader*>*/ {
    public:
    // Nested type: ::GlobalNamespace::HeadersVector::HeadersVectorEnumerator
    class HeadersVectorEnumerator;
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::MothershipHttpHeader*>
    operator ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::MothershipHttpHeader*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::MothershipHttpHeader*>*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x2675AF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeadersVector* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadersVector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeadersVector*, creationType>(cPtr, cMemoryOwn)));
    }
    // public System.Void Dispose()
    // Offset: 0x2675BF0
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x2675C5C
    void Dispose(bool disposing);
    // public MothershipHttpHeader get_Item(System.Int32 index)
    // Offset: 0x2675E28
    ::GlobalNamespace::MothershipHttpHeader* get_Item(int index);
    // public System.Int32 get_Count()
    // Offset: 0x2675F30
    int get_Count();
    // private System.Collections.Generic.IEnumerator`1<MothershipHttpHeader> global::System.Collections.Generic.IEnumerable<MothershipHttpHeader>.GetEnumerator()
    // Offset: 0x2675FFC
    ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>* global::System_Collections_Generic_IEnumerable$MothershipHttpHeader$_GetEnumerator();
    // private System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x26760B8
    ::System::Collections::IEnumerator* global::System_Collections_IEnumerable_GetEnumerator();
    // public HeadersVector/HeadersVectorEnumerator GetEnumerator()
    // Offset: 0x2676110
    ::GlobalNamespace::HeadersVector::HeadersVectorEnumerator* GetEnumerator();
    // private System.UInt32 size()
    // Offset: 0x2675F34
    uint size();
    // private MothershipHttpHeader getitem(System.Int32 index)
    // Offset: 0x2675E2C
    ::GlobalNamespace::MothershipHttpHeader* getitem(int index);
    // protected override System.Void Finalize()
    // Offset: 0x2675B50
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // HeadersVector
  #pragma pack(pop)
  static check_size<sizeof(HeadersVector), 32 + sizeof(bool)> __GlobalNamespace_HeadersVectorSizeCheck;
  static_assert(sizeof(HeadersVector) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadersVector::*)(bool)>(&GlobalNamespace::HeadersVector::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MothershipHttpHeader* (GlobalNamespace::HeadersVector::*)(int)>(&GlobalNamespace::HeadersVector::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::global::System_Collections_Generic_IEnumerable$MothershipHttpHeader$_GetEnumerator
// Il2CppName: global::System.Collections.Generic.IEnumerable<MothershipHttpHeader>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>* (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::global::System_Collections_Generic_IEnumerable$MothershipHttpHeader$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "global::System.Collections.Generic.IEnumerable<MothershipHttpHeader>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::global::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: global::System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::global::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "global::System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::HeadersVector::HeadersVectorEnumerator* (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::size
// Il2CppName: size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::getitem
// Il2CppName: getitem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MothershipHttpHeader* (GlobalNamespace::HeadersVector::*)(int)>(&GlobalNamespace::HeadersVector::getitem)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "getitem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadersVector::*)()>(&GlobalNamespace::HeadersVector::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
