// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ThermalReceiver
  class ThermalReceiver;
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MagicRingCosmetic
  class MagicRingCosmetic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MagicRingCosmetic);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicRingCosmetic*, "", "MagicRingCosmetic");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: MagicRingCosmetic
  // [TokenAttribute] Offset: FFFFFFFF
  class MagicRingCosmetic : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MagicRingCosmetic::FadeState
    struct FadeState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MagicRingCosmetic/FadeState
    // [TokenAttribute] Offset: FFFFFFFF
    struct FadeState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FadeState
      constexpr FadeState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MagicRingCosmetic/FadeState FadedOut
      static constexpr const int FadedOut = 0;
      // Get static field: static public MagicRingCosmetic/FadeState FadedOut
      static ::GlobalNamespace::MagicRingCosmetic::FadeState _get_FadedOut();
      // Set static field: static public MagicRingCosmetic/FadeState FadedOut
      static void _set_FadedOut(::GlobalNamespace::MagicRingCosmetic::FadeState value);
      // static field const value: static public MagicRingCosmetic/FadeState FadedIn
      static constexpr const int FadedIn = 1;
      // Get static field: static public MagicRingCosmetic/FadeState FadedIn
      static ::GlobalNamespace::MagicRingCosmetic::FadeState _get_FadedIn();
      // Set static field: static public MagicRingCosmetic/FadeState FadedIn
      static void _set_FadedIn(::GlobalNamespace::MagicRingCosmetic::FadeState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MagicRingCosmetic/FadeState
    #pragma pack(pop)
    static check_size<sizeof(MagicRingCosmetic::FadeState), 0 + sizeof(int)> __GlobalNamespace_MagicRingCosmetic_FadeStateSizeCheck;
    static_assert(sizeof(MagicRingCosmetic::FadeState) == 0x4);
    public:
    // public ThermalReceiver thermalReceiver
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::ThermalReceiver* thermalReceiver;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThermalReceiver*) == 0x8);
    // public UnityEngine.Renderer ringRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* ringRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Single fadeInTemperatureThreshold
    // Size: 0x4
    // Offset: 0x30
    float fadeInTemperatureThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeOutTemperatureThreshold
    // Size: 0x4
    // Offset: 0x34
    float fadeOutTemperatureThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeTime
    // Size: 0x4
    // Offset: 0x38
    float fadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeTime and: fadeInSounds
    char __padding4[0x4] = {};
    // public SoundBankPlayer fadeInSounds
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SoundBankPlayer* fadeInSounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public SoundBankPlayer fadeOutSounds
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SoundBankPlayer* fadeOutSounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // private MagicRingCosmetic/FadeState fadeState
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::MagicRingCosmetic::FadeState fadeState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicRingCosmetic::FadeState) == 0x4);
    // private System.Int32 emissionColorShaderPropID
    // Size: 0x4
    // Offset: 0x54
    int emissionColorShaderPropID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color defaultEmissiveColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color defaultEmissiveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single emissiveAmount
    // Size: 0x4
    // Offset: 0x68
    float emissiveAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: emissiveAmount and: materialPropertyBlock
    char __padding10[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock materialPropertyBlock
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::MaterialPropertyBlock* materialPropertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get instance field reference: public ThermalReceiver thermalReceiver
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThermalReceiver*& dyn_thermalReceiver();
    // Get instance field reference: public UnityEngine.Renderer ringRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_ringRenderer();
    // Get instance field reference: public System.Single fadeInTemperatureThreshold
    [[deprecated("Use field access instead!")]] float& dyn_fadeInTemperatureThreshold();
    // Get instance field reference: public System.Single fadeOutTemperatureThreshold
    [[deprecated("Use field access instead!")]] float& dyn_fadeOutTemperatureThreshold();
    // Get instance field reference: public System.Single fadeTime
    [[deprecated("Use field access instead!")]] float& dyn_fadeTime();
    // Get instance field reference: public SoundBankPlayer fadeInSounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_fadeInSounds();
    // Get instance field reference: public SoundBankPlayer fadeOutSounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_fadeOutSounds();
    // Get instance field reference: private MagicRingCosmetic/FadeState fadeState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicRingCosmetic::FadeState& dyn_fadeState();
    // Get instance field reference: private System.Int32 emissionColorShaderPropID
    [[deprecated("Use field access instead!")]] int& dyn_emissionColorShaderPropID();
    // Get instance field reference: private UnityEngine.Color defaultEmissiveColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_defaultEmissiveColor();
    // Get instance field reference: private System.Single emissiveAmount
    [[deprecated("Use field access instead!")]] float& dyn_emissiveAmount();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock materialPropertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_materialPropertyBlock();
    // protected System.Void Awake()
    // Offset: 0x26A06FC
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0x26A0790
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26A08BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MagicRingCosmetic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MagicRingCosmetic*, creationType>()));
    }
  }; // MagicRingCosmetic
  #pragma pack(pop)
  static check_size<sizeof(MagicRingCosmetic), 112 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GlobalNamespace_MagicRingCosmeticSizeCheck;
  static_assert(sizeof(MagicRingCosmetic) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicRingCosmetic::FadeState, "", "MagicRingCosmetic/FadeState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MagicRingCosmetic::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicRingCosmetic::*)()>(&GlobalNamespace::MagicRingCosmetic::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicRingCosmetic*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicRingCosmetic::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicRingCosmetic::*)()>(&GlobalNamespace::MagicRingCosmetic::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicRingCosmetic*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicRingCosmetic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
