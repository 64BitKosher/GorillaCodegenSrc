// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SkeletonPathingNode
  class SkeletonPathingNode;
  // Forward declaring type: SecondLookSkeletonSynchValues
  class SecondLookSkeletonSynchValues;
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Skipping declaration: GhostState because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SecondLookSkeleton
  class SecondLookSkeleton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SecondLookSkeleton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SecondLookSkeleton*, "", "SecondLookSkeleton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x180
  #pragma pack(push, 1)
  // Autogenerated type: SecondLookSkeleton
  // [TokenAttribute] Offset: FFFFFFFF
  class SecondLookSkeleton : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SecondLookSkeleton::GhostState
    struct GhostState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SecondLookSkeleton/GhostState
    // [TokenAttribute] Offset: FFFFFFFF
    struct GhostState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GhostState
      constexpr GhostState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SecondLookSkeleton/GhostState Unactivated
      static constexpr const int Unactivated = 0;
      // Get static field: static public SecondLookSkeleton/GhostState Unactivated
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_Unactivated();
      // Set static field: static public SecondLookSkeleton/GhostState Unactivated
      static void _set_Unactivated(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState Activated
      static constexpr const int Activated = 1;
      // Get static field: static public SecondLookSkeleton/GhostState Activated
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_Activated();
      // Set static field: static public SecondLookSkeleton/GhostState Activated
      static void _set_Activated(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState Patrolling
      static constexpr const int Patrolling = 2;
      // Get static field: static public SecondLookSkeleton/GhostState Patrolling
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_Patrolling();
      // Set static field: static public SecondLookSkeleton/GhostState Patrolling
      static void _set_Patrolling(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState Chasing
      static constexpr const int Chasing = 3;
      // Get static field: static public SecondLookSkeleton/GhostState Chasing
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_Chasing();
      // Set static field: static public SecondLookSkeleton/GhostState Chasing
      static void _set_Chasing(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState CaughtPlayer
      static constexpr const int CaughtPlayer = 4;
      // Get static field: static public SecondLookSkeleton/GhostState CaughtPlayer
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_CaughtPlayer();
      // Set static field: static public SecondLookSkeleton/GhostState CaughtPlayer
      static void _set_CaughtPlayer(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState PlayerThrown
      static constexpr const int PlayerThrown = 5;
      // Get static field: static public SecondLookSkeleton/GhostState PlayerThrown
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_PlayerThrown();
      // Set static field: static public SecondLookSkeleton/GhostState PlayerThrown
      static void _set_PlayerThrown(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // static field const value: static public SecondLookSkeleton/GhostState Reset
      static constexpr const int Reset = 6;
      // Get static field: static public SecondLookSkeleton/GhostState Reset
      static ::GlobalNamespace::SecondLookSkeleton::GhostState _get_Reset();
      // Set static field: static public SecondLookSkeleton/GhostState Reset
      static void _set_Reset(::GlobalNamespace::SecondLookSkeleton::GhostState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SecondLookSkeleton/GhostState
    #pragma pack(pop)
    static check_size<sizeof(SecondLookSkeleton::GhostState), 0 + sizeof(int)> __GlobalNamespace_SecondLookSkeleton_GhostStateSizeCheck;
    static_assert(sizeof(SecondLookSkeleton::GhostState) == 0x4);
    public:
    // public UnityEngine.Transform[] angerPoint
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> angerPoint;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public System.Int32 angerPointIndex
    // Size: 0x4
    // Offset: 0x28
    int angerPointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: angerPointIndex and: pathPoints
    char __padding1[0x4] = {};
    // public SkeletonPathingNode[] pathPoints
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::SkeletonPathingNode*> pathPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SkeletonPathingNode*>) == 0x8);
    // public SkeletonPathingNode[] exitPoints
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::SkeletonPathingNode*> exitPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SkeletonPathingNode*>) == 0x8);
    // public UnityEngine.Transform heightOffset
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* heightOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean firstLookActivated
    // Size: 0x1
    // Offset: 0x48
    bool firstLookActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean lookedAway
    // Size: 0x1
    // Offset: 0x49
    bool lookedAway;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean currentlyLooking
    // Size: 0x1
    // Offset: 0x4A
    bool currentlyLooking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: currentlyLooking and: ghostActivationDistance
    char __padding7[0x1] = {};
    // public System.Single ghostActivationDistance
    // Size: 0x4
    // Offset: 0x4C
    float ghostActivationDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject spookyGhost
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* spookyGhost;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single timeFirstAppeared
    // Size: 0x4
    // Offset: 0x58
    float timeFirstAppeared;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeToFirstDisappear
    // Size: 0x4
    // Offset: 0x5C
    float timeToFirstDisappear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SecondLookSkeleton/GhostState currentState
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::SecondLookSkeleton::GhostState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SecondLookSkeleton::GhostState) == 0x4);
    // Padding between fields: currentState and: spookyText
    char __padding12[0x4] = {};
    // public UnityEngine.GameObject spookyText
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* spookyText;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single patrolSpeed
    // Size: 0x4
    // Offset: 0x70
    float patrolSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chaseSpeed
    // Size: 0x4
    // Offset: 0x74
    float chaseSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single caughtSpeed
    // Size: 0x4
    // Offset: 0x78
    float caughtSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: caughtSpeed and: firstNode
    char __padding16[0x4] = {};
    // public SkeletonPathingNode firstNode
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::SkeletonPathingNode* firstNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SkeletonPathingNode*) == 0x8);
    // public SkeletonPathingNode currentNode
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::SkeletonPathingNode* currentNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SkeletonPathingNode*) == 0x8);
    // public SkeletonPathingNode nextNode
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::SkeletonPathingNode* nextNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SkeletonPathingNode*) == 0x8);
    // public UnityEngine.Transform lookSource
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Transform* lookSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform playerTransform
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* playerTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single reachNodeDist
    // Size: 0x4
    // Offset: 0xA8
    float reachNodeDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxRotSpeed
    // Size: 0x4
    // Offset: 0xAC
    float maxRotSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hapticStrength
    // Size: 0x4
    // Offset: 0xB0
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hapticDuration
    // Size: 0x4
    // Offset: 0xB4
    float hapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 offsetGrabPosition
    // Size: 0xC
    // Offset: 0xB8
    ::UnityEngine::Vector3 offsetGrabPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single throwForce
    // Size: 0x4
    // Offset: 0xC4
    float throwForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public System.Single bodyHeightOffset
    // Size: 0x4
    // Offset: 0xD0
    float bodyHeightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeThrown
    // Size: 0x4
    // Offset: 0xD4
    float timeThrown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeThrownCooldown
    // Size: 0x4
    // Offset: 0xD8
    float timeThrownCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single catchDistance
    // Size: 0x4
    // Offset: 0xDC
    float catchDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSeeDistance
    // Size: 0x4
    // Offset: 0xE0
    float maxSeeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxSeeDistance and: rHits
    char __padding33[0x4] = {};
    // private UnityEngine.RaycastHit[] rHits
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::UnityEngine::RaycastHit> rHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask playerMask
    // Size: 0x4
    // Offset: 0xF4
    ::UnityEngine::LayerMask playerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip initialScream
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::AudioClip* initialScream;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip patrolLoop
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::AudioClip* patrolLoop;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip chaseLoop
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::AudioClip* chaseLoop;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip grabbedSound
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::AudioClip* grabbedSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip carryingLoop
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::AudioClip* carryingLoop;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip throwSound
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::AudioClip* throwSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public System.Collections.Generic.List`1<SkeletonPathingNode> resetChaseHistory
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::GlobalNamespace::SkeletonPathingNode*>* resetChaseHistory;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SkeletonPathingNode*>*) == 0x8);
    // private SecondLookSkeletonSynchValues synchValues
    // Size: 0x8
    // Offset: 0x138
    ::GlobalNamespace::SecondLookSkeletonSynchValues* synchValues;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SecondLookSkeletonSynchValues*) == 0x8);
    // private System.Boolean localCaught
    // Size: 0x1
    // Offset: 0x140
    bool localCaught;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean localThrown
    // Size: 0x1
    // Offset: 0x141
    bool localThrown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: localThrown and: playersSeen
    char __padding47[0x6] = {};
    // public System.Collections.Generic.List`1<NetPlayer> playersSeen
    // Size: 0x8
    // Offset: 0x148
    ::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>* playersSeen;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>*) == 0x8);
    // public System.Boolean tapped
    // Size: 0x1
    // Offset: 0x150
    bool tapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean initialized
    // Size: 0x1
    // Offset: 0x151
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: closest
    char __padding50[0x2] = {};
    // private UnityEngine.RaycastHit closest
    // Size: 0x2C
    // Offset: 0x154
    ::UnityEngine::RaycastHit closest;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    public:
    // Get instance field reference: public UnityEngine.Transform[] angerPoint
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_angerPoint();
    // Get instance field reference: public System.Int32 angerPointIndex
    [[deprecated("Use field access instead!")]] int& dyn_angerPointIndex();
    // Get instance field reference: public SkeletonPathingNode[] pathPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& dyn_pathPoints();
    // Get instance field reference: public SkeletonPathingNode[] exitPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& dyn_exitPoints();
    // Get instance field reference: public UnityEngine.Transform heightOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_heightOffset();
    // Get instance field reference: private System.Boolean firstLookActivated
    [[deprecated("Use field access instead!")]] bool& dyn_firstLookActivated();
    // Get instance field reference: private System.Boolean lookedAway
    [[deprecated("Use field access instead!")]] bool& dyn_lookedAway();
    // Get instance field reference: private System.Boolean currentlyLooking
    [[deprecated("Use field access instead!")]] bool& dyn_currentlyLooking();
    // Get instance field reference: public System.Single ghostActivationDistance
    [[deprecated("Use field access instead!")]] float& dyn_ghostActivationDistance();
    // Get instance field reference: public UnityEngine.GameObject spookyGhost
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spookyGhost();
    // Get instance field reference: public System.Single timeFirstAppeared
    [[deprecated("Use field access instead!")]] float& dyn_timeFirstAppeared();
    // Get instance field reference: public System.Single timeToFirstDisappear
    [[deprecated("Use field access instead!")]] float& dyn_timeToFirstDisappear();
    // Get instance field reference: public SecondLookSkeleton/GhostState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton::GhostState& dyn_currentState();
    // Get instance field reference: public UnityEngine.GameObject spookyText
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spookyText();
    // Get instance field reference: public System.Single patrolSpeed
    [[deprecated("Use field access instead!")]] float& dyn_patrolSpeed();
    // Get instance field reference: public System.Single chaseSpeed
    [[deprecated("Use field access instead!")]] float& dyn_chaseSpeed();
    // Get instance field reference: public System.Single caughtSpeed
    [[deprecated("Use field access instead!")]] float& dyn_caughtSpeed();
    // Get instance field reference: public SkeletonPathingNode firstNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& dyn_firstNode();
    // Get instance field reference: public SkeletonPathingNode currentNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& dyn_currentNode();
    // Get instance field reference: public SkeletonPathingNode nextNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& dyn_nextNode();
    // Get instance field reference: public UnityEngine.Transform lookSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lookSource();
    // Get instance field reference: private UnityEngine.Transform playerTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playerTransform();
    // Get instance field reference: public System.Single reachNodeDist
    [[deprecated("Use field access instead!")]] float& dyn_reachNodeDist();
    // Get instance field reference: public System.Single maxRotSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxRotSpeed();
    // Get instance field reference: public System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: public System.Single hapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_hapticDuration();
    // Get instance field reference: public UnityEngine.Vector3 offsetGrabPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offsetGrabPosition();
    // Get instance field reference: public System.Single throwForce
    [[deprecated("Use field access instead!")]] float& dyn_throwForce();
    // Get instance field reference: public UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: public System.Single bodyHeightOffset
    [[deprecated("Use field access instead!")]] float& dyn_bodyHeightOffset();
    // Get instance field reference: private System.Single timeThrown
    [[deprecated("Use field access instead!")]] float& dyn_timeThrown();
    // Get instance field reference: public System.Single timeThrownCooldown
    [[deprecated("Use field access instead!")]] float& dyn_timeThrownCooldown();
    // Get instance field reference: public System.Single catchDistance
    [[deprecated("Use field access instead!")]] float& dyn_catchDistance();
    // Get instance field reference: public System.Single maxSeeDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxSeeDistance();
    // Get instance field reference: private UnityEngine.RaycastHit[] rHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_rHits();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public UnityEngine.LayerMask playerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_playerMask();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip initialScream
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_initialScream();
    // Get instance field reference: public UnityEngine.AudioClip patrolLoop
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_patrolLoop();
    // Get instance field reference: public UnityEngine.AudioClip chaseLoop
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_chaseLoop();
    // Get instance field reference: public UnityEngine.AudioClip grabbedSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_grabbedSound();
    // Get instance field reference: public UnityEngine.AudioClip carryingLoop
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_carryingLoop();
    // Get instance field reference: public UnityEngine.AudioClip throwSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_throwSound();
    // Get instance field reference: public System.Collections.Generic.List`1<SkeletonPathingNode> resetChaseHistory
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SkeletonPathingNode*>*& dyn_resetChaseHistory();
    // Get instance field reference: private SecondLookSkeletonSynchValues synchValues
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeletonSynchValues*& dyn_synchValues();
    // Get instance field reference: private System.Boolean localCaught
    [[deprecated("Use field access instead!")]] bool& dyn_localCaught();
    // Get instance field reference: private System.Boolean localThrown
    [[deprecated("Use field access instead!")]] bool& dyn_localThrown();
    // Get instance field reference: public System.Collections.Generic.List`1<NetPlayer> playersSeen
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>*& dyn_playersSeen();
    // Get instance field reference: public System.Boolean tapped
    [[deprecated("Use field access instead!")]] bool& dyn_tapped();
    // Get instance field reference: public System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: private UnityEngine.RaycastHit closest
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_closest();
    // private System.Void Start()
    // Offset: 0x2697280
    void Start();
    // private System.Void Update()
    // Offset: 0x2697B44
    void Update();
    // public System.Void ChangeState(SecondLookSkeleton/GhostState newState)
    // Offset: 0x26974E8
    void ChangeState(::GlobalNamespace::SecondLookSkeleton::GhostState newState);
    // private System.Void ProcessGhostState()
    // Offset: 0x2697B48
    void ProcessGhostState();
    // private System.Void CaughtPlayerUpdate()
    // Offset: 0x269851C
    void CaughtPlayerUpdate();
    // private System.Void SetTappedState()
    // Offset: 0x26985A8
    void SetTappedState();
    // private System.Void FollowPosition()
    // Offset: 0x26987CC
    void FollowPosition();
    // private System.Void CheckActivateGhost()
    // Offset: 0x2697F84
    void CheckActivateGhost();
    // private System.Boolean CanSeePlayer()
    // Offset: 0x26997EC
    bool CanSeePlayer();
    // private System.Boolean CanSeePlayerWithResults(out UnityEngine.RaycastHit closest)
    // Offset: 0x26997F4
    bool CanSeePlayerWithResults(ByRef<::UnityEngine::RaycastHit> closest);
    // private System.Void ActivateGhost()
    // Offset: 0x26996FC
    void ActivateGhost();
    // private System.Void StartChasing()
    // Offset: 0x26982D0
    void StartChasing();
    // private System.Boolean CheckPlayerSeen()
    // Offset: 0x2698048
    bool CheckPlayerSeen();
    // public System.Void RemoteActivateGhost()
    // Offset: 0x2699ACC
    void RemoteActivateGhost();
    // public System.Void RemotePlayerSeen(NetPlayer player)
    // Offset: 0x2699AF8
    void RemotePlayerSeen(::GlobalNamespace::NetPlayer* player);
    // public System.Void RemotePlayerCaught(NetPlayer player)
    // Offset: 0x2699BE8
    void RemotePlayerCaught(::GlobalNamespace::NetPlayer* player);
    // private System.Boolean IsCurrentlyLooking()
    // Offset: 0x26995A0
    bool IsCurrentlyLooking();
    // private System.Void PatrolMove()
    // Offset: 0x2698288
    void PatrolMove();
    // private System.Void CheckReachedNextNode(System.Boolean forChuck, System.Boolean forChase)
    // Offset: 0x269A094
    void CheckReachedNextNode(bool forChuck, bool forChase);
    // private System.Void ChaseMove()
    // Offset: 0x26983D8
    void ChaseMove();
    // private System.Void CaughtMove()
    // Offset: 0x2698CD0
    void CaughtMove();
    // private System.Void SyncNodes()
    // Offset: 0x2697E58
    void SyncNodes();
    // public System.Void SetNodes()
    // Offset: 0x2697EE4
    void SetNodes();
    // private System.Boolean GhostAtExit()
    // Offset: 0x269894C
    bool GhostAtExit();
    // private System.Void GhostMove(UnityEngine.Transform target, System.Single speed)
    // Offset: 0x2699D28
    void GhostMove(::UnityEngine::Transform* target, float speed);
    // private System.Void DeactivateGhost()
    // Offset: 0x2698CC8
    void DeactivateGhost();
    // private System.Boolean CanGrab()
    // Offset: 0x26982F8
    bool CanGrab();
    // private System.Void GrabPlayer()
    // Offset: 0x2698420
    void GrabPlayer();
    // private System.Void FloatPlayer()
    // Offset: 0x2698D18
    void FloatPlayer();
    // private System.Void ChuckPlayer()
    // Offset: 0x2698A54
    void ChuckPlayer();
    // private System.Void SetHeightOffset()
    // Offset: 0x26992E0
    void SetHeightOffset();
    // private System.Boolean IsMine()
    // Offset: 0x2697DB8
    bool IsMine();
    // public System.Void .ctor()
    // Offset: 0x269A9D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecondLookSkeleton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecondLookSkeleton*, creationType>()));
    }
  }; // SecondLookSkeleton
  #pragma pack(pop)
  static check_size<sizeof(SecondLookSkeleton), 340 + sizeof(::UnityEngine::RaycastHit)> __GlobalNamespace_SecondLookSkeletonSizeCheck;
  static_assert(sizeof(SecondLookSkeleton) == 0x180);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SecondLookSkeleton::GhostState, "", "SecondLookSkeleton/GhostState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::ChangeState
// Il2CppName: ChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)(::GlobalNamespace::SecondLookSkeleton::GhostState)>(&GlobalNamespace::SecondLookSkeleton::ChangeState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "SecondLookSkeleton/GhostState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "ChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::ProcessGhostState
// Il2CppName: ProcessGhostState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::ProcessGhostState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "ProcessGhostState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CaughtPlayerUpdate
// Il2CppName: CaughtPlayerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CaughtPlayerUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CaughtPlayerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::SetTappedState
// Il2CppName: SetTappedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::SetTappedState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "SetTappedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::FollowPosition
// Il2CppName: FollowPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::FollowPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "FollowPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CheckActivateGhost
// Il2CppName: CheckActivateGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CheckActivateGhost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CheckActivateGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CanSeePlayer
// Il2CppName: CanSeePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CanSeePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CanSeePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CanSeePlayerWithResults
// Il2CppName: CanSeePlayerWithResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)(ByRef<::UnityEngine::RaycastHit>)>(&GlobalNamespace::SecondLookSkeleton::CanSeePlayerWithResults)> {
  static const MethodInfo* get() {
    static auto* closest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CanSeePlayerWithResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::ActivateGhost
// Il2CppName: ActivateGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::ActivateGhost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "ActivateGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::StartChasing
// Il2CppName: StartChasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::StartChasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "StartChasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CheckPlayerSeen
// Il2CppName: CheckPlayerSeen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CheckPlayerSeen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CheckPlayerSeen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::RemoteActivateGhost
// Il2CppName: RemoteActivateGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::RemoteActivateGhost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "RemoteActivateGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::RemotePlayerSeen
// Il2CppName: RemotePlayerSeen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::SecondLookSkeleton::RemotePlayerSeen)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "RemotePlayerSeen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::RemotePlayerCaught
// Il2CppName: RemotePlayerCaught
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::SecondLookSkeleton::RemotePlayerCaught)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "RemotePlayerCaught", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::IsCurrentlyLooking
// Il2CppName: IsCurrentlyLooking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::IsCurrentlyLooking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "IsCurrentlyLooking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::PatrolMove
// Il2CppName: PatrolMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::PatrolMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "PatrolMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CheckReachedNextNode
// Il2CppName: CheckReachedNextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)(bool, bool)>(&GlobalNamespace::SecondLookSkeleton::CheckReachedNextNode)> {
  static const MethodInfo* get() {
    static auto* forChuck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forChase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CheckReachedNextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forChuck, forChase});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::ChaseMove
// Il2CppName: ChaseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::ChaseMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "ChaseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CaughtMove
// Il2CppName: CaughtMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CaughtMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CaughtMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::SyncNodes
// Il2CppName: SyncNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::SyncNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "SyncNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::SetNodes
// Il2CppName: SetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::SetNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "SetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::GhostAtExit
// Il2CppName: GhostAtExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::GhostAtExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "GhostAtExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::GhostMove
// Il2CppName: GhostMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::SecondLookSkeleton::GhostMove)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "GhostMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, speed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::DeactivateGhost
// Il2CppName: DeactivateGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::DeactivateGhost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "DeactivateGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::CanGrab
// Il2CppName: CanGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::CanGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "CanGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::GrabPlayer
// Il2CppName: GrabPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::GrabPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "GrabPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::FloatPlayer
// Il2CppName: FloatPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::FloatPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "FloatPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::ChuckPlayer
// Il2CppName: ChuckPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::ChuckPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "ChuckPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::SetHeightOffset
// Il2CppName: SetHeightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::SetHeightOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "SetHeightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::IsMine
// Il2CppName: IsMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SecondLookSkeleton::*)()>(&GlobalNamespace::SecondLookSkeleton::IsMine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeleton*), "IsMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeleton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
