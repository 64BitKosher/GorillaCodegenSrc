// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: JsonUtils
  class JsonUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::JsonUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::JsonUtils*, "", "JsonUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: JsonUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class JsonUtils : public ::Il2CppObject {
    public:
    // static public System.String ToJson(T obj, System.Boolean indent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW ToJson(T obj, bool indent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JsonUtils::ToJson");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "JsonUtils", "ToJson", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(indent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, obj, indent);
    }
    // static public T FromJson(System.String s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T FromJson(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JsonUtils::FromJson");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "JsonUtils", "FromJson", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, s);
    }
  }; // JsonUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::JsonUtils::ToJson
// Il2CppName: ToJson
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::JsonUtils::FromJson
// Il2CppName: FromJson
// Cannot write MetadataGetter for generic methods!
