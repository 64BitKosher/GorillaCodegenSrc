// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Gorillanalytics
#include "GlobalNamespace/Gorillanalytics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0*, "", "Gorillanalytics/<>c__DisplayClass10_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Gorillanalytics/<>c__DisplayClass10_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class Gorillanalytics::$$c__DisplayClass10_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String gameMode
    // Size: 0x8
    // Offset: 0x10
    ::StringW gameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return gameMode;
    }
    // Get instance field reference: public System.String gameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameMode();
    // public System.Void .ctor()
    // Offset: 0x271167C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gorillanalytics::$$c__DisplayClass10_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gorillanalytics::$$c__DisplayClass10_0*, creationType>()));
    }
    // System.Boolean <GetMapModeQueue>b__0(System.String s)
    // Offset: 0x27117CC
    bool $GetMapModeQueue$b__0(::StringW s);
    // System.Boolean <GetMapModeQueue>b__1(System.String s)
    // Offset: 0x27117E8
    bool $GetMapModeQueue$b__1(::StringW s);
    // System.Boolean <GetMapModeQueue>b__2(System.String s)
    // Offset: 0x2711804
    bool $GetMapModeQueue$b__2(::StringW s);
  }; // Gorillanalytics/<>c__DisplayClass10_0
  #pragma pack(pop)
  static check_size<sizeof(Gorillanalytics::$$c__DisplayClass10_0), 16 + sizeof(::StringW)> __GlobalNamespace_Gorillanalytics_$$c__DisplayClass10_0SizeCheck;
  static_assert(sizeof(Gorillanalytics::$$c__DisplayClass10_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__0
// Il2CppName: <GetMapModeQueue>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::*)(::StringW)>(&GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__0)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0*), "<GetMapModeQueue>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__1
// Il2CppName: <GetMapModeQueue>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::*)(::StringW)>(&GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__1)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0*), "<GetMapModeQueue>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__2
// Il2CppName: <GetMapModeQueue>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::*)(::StringW)>(&GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0::$GetMapModeQueue$b__2)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0*), "<GetMapModeQueue>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
