// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ManipulatableObject
#include "GlobalNamespace/ManipulatableObject.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ManipulatableLever
  class ManipulatableLever;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ManipulatableLever);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ManipulatableLever*, "", "ManipulatableLever");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: ManipulatableLever
  // [TokenAttribute] Offset: FFFFFFFF
  class ManipulatableLever : public ::GlobalNamespace::ManipulatableObject {
    public:
    // Nested type: ::GlobalNamespace::ManipulatableLever::LeverNotch
    class LeverNotch;
    public:
    // private System.Single breakDistance
    // Size: 0x4
    // Offset: 0x38
    float breakDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: breakDistance and: leverGrip
    char __padding0[0x4] = {};
    // private UnityEngine.Transform leverGrip
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* leverGrip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single maxAngle
    // Size: 0x4
    // Offset: 0x48
    float maxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minAngle
    // Size: 0x4
    // Offset: 0x4C
    float minAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private ManipulatableLever/LeverNotch[] notches
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::ManipulatableLever::LeverNotch*> notches;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ManipulatableLever::LeverNotch*>) == 0x8);
    // private UnityEngine.Matrix4x4 localSpace
    // Size: 0x40
    // Offset: 0x58
    ::UnityEngine::Matrix4x4 localSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get instance field reference: private System.Single breakDistance
    [[deprecated("Use field access instead!")]] float& dyn_breakDistance();
    // Get instance field reference: private UnityEngine.Transform leverGrip
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leverGrip();
    // Get instance field reference: private System.Single maxAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxAngle();
    // Get instance field reference: private System.Single minAngle
    [[deprecated("Use field access instead!")]] float& dyn_minAngle();
    // Get instance field reference: private ManipulatableLever/LeverNotch[] notches
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ManipulatableLever::LeverNotch*>& dyn_notches();
    // Get instance field reference: private UnityEngine.Matrix4x4 localSpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_localSpace();
    // private System.Void Awake()
    // Offset: 0x26B6A84
    void Awake();
    // public System.Void SetValue(System.Single value)
    // Offset: 0x26B6D88
    void SetValue(float value);
    // public System.Void SetNotch(System.Int32 notchValue)
    // Offset: 0x26B6E14
    void SetNotch(int notchValue);
    // public System.Single GetValue()
    // Offset: 0x26B6E88
    float GetValue();
    // public System.Int32 GetNotch()
    // Offset: 0x26B6F10
    int GetNotch();
    // protected override System.Boolean ShouldHandDetach(UnityEngine.GameObject hand)
    // Offset: 0x26B6AD8
    // Implemented from: ManipulatableObject
    // Base method: System.Boolean ManipulatableObject::ShouldHandDetach(UnityEngine.GameObject hand)
    bool ShouldHandDetach(::UnityEngine::GameObject* hand);
    // protected override System.Void OnHeldUpdate(UnityEngine.GameObject hand)
    // Offset: 0x26B6B70
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::OnHeldUpdate(UnityEngine.GameObject hand)
    void OnHeldUpdate(::UnityEngine::GameObject* hand);
    // public System.Void .ctor()
    // Offset: 0x26B6F90
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManipulatableLever* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManipulatableLever*, creationType>()));
    }
  }; // ManipulatableLever
  #pragma pack(pop)
  static check_size<sizeof(ManipulatableLever), 88 + sizeof(::UnityEngine::Matrix4x4)> __GlobalNamespace_ManipulatableLeverSizeCheck;
  static_assert(sizeof(ManipulatableLever) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableLever::*)()>(&GlobalNamespace::ManipulatableLever::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableLever::*)(float)>(&GlobalNamespace::ManipulatableLever::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::SetNotch
// Il2CppName: SetNotch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableLever::*)(int)>(&GlobalNamespace::ManipulatableLever::SetNotch)> {
  static const MethodInfo* get() {
    static auto* notchValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "SetNotch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notchValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ManipulatableLever::*)()>(&GlobalNamespace::ManipulatableLever::GetValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::GetNotch
// Il2CppName: GetNotch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ManipulatableLever::*)()>(&GlobalNamespace::ManipulatableLever::GetNotch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "GetNotch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::ShouldHandDetach
// Il2CppName: ShouldHandDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ManipulatableLever::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableLever::ShouldHandDetach)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "ShouldHandDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::OnHeldUpdate
// Il2CppName: OnHeldUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableLever::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableLever::OnHeldUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableLever*), "OnHeldUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableLever::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
