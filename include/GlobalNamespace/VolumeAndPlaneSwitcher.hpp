// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: GeometryType because it is already included!
  // Forward declaring type: OVRSceneAnchor
  class OVRSceneAnchor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VolumeAndPlaneSwitcher
  class VolumeAndPlaneSwitcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VolumeAndPlaneSwitcher);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VolumeAndPlaneSwitcher*, "", "VolumeAndPlaneSwitcher");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VolumeAndPlaneSwitcher
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class VolumeAndPlaneSwitcher : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType
    struct GeometryType;
    // Nested type: ::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair
    struct LabelGeometryPair;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VolumeAndPlaneSwitcher/GeometryType
    // [TokenAttribute] Offset: FFFFFFFF
    struct GeometryType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GeometryType
      constexpr GeometryType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VolumeAndPlaneSwitcher/GeometryType Plane
      static constexpr const int Plane = 0;
      // Get static field: static public VolumeAndPlaneSwitcher/GeometryType Plane
      static ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType _get_Plane();
      // Set static field: static public VolumeAndPlaneSwitcher/GeometryType Plane
      static void _set_Plane(::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType value);
      // static field const value: static public VolumeAndPlaneSwitcher/GeometryType Volume
      static constexpr const int Volume = 1;
      // Get static field: static public VolumeAndPlaneSwitcher/GeometryType Volume
      static ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType _get_Volume();
      // Set static field: static public VolumeAndPlaneSwitcher/GeometryType Volume
      static void _set_Volume(::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // VolumeAndPlaneSwitcher/GeometryType
    #pragma pack(pop)
    static check_size<sizeof(VolumeAndPlaneSwitcher::GeometryType), 0 + sizeof(int)> __GlobalNamespace_VolumeAndPlaneSwitcher_GeometryTypeSizeCheck;
    static_assert(sizeof(VolumeAndPlaneSwitcher::GeometryType) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: VolumeAndPlaneSwitcher/LabelGeometryPair
    // [TokenAttribute] Offset: FFFFFFFF
    struct LabelGeometryPair/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String label
      // Size: 0x8
      // Offset: 0x0
      ::StringW label;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public VolumeAndPlaneSwitcher/GeometryType desiredGeometryType
      // Size: 0x4
      // Offset: 0x8
      ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType desiredGeometryType;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType) == 0x4);
      public:
      // Creating value type constructor for type: LabelGeometryPair
      constexpr LabelGeometryPair(::StringW label_ = {}, ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType desiredGeometryType_ = {}) noexcept : label{label_}, desiredGeometryType{desiredGeometryType_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String label
      [[deprecated("Use field access instead!")]] ::StringW& dyn_label();
      // Get instance field reference: public VolumeAndPlaneSwitcher/GeometryType desiredGeometryType
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType& dyn_desiredGeometryType();
    }; // VolumeAndPlaneSwitcher/LabelGeometryPair
    #pragma pack(pop)
    static check_size<sizeof(VolumeAndPlaneSwitcher::LabelGeometryPair), 8 + sizeof(::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType)> __GlobalNamespace_VolumeAndPlaneSwitcher_LabelGeometryPairSizeCheck;
    static_assert(sizeof(VolumeAndPlaneSwitcher::LabelGeometryPair) == 0xC);
    public:
    // public OVRSceneAnchor planePrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRSceneAnchor* planePrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneAnchor*) == 0x8);
    // public OVRSceneAnchor volumePrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRSceneAnchor* volumePrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneAnchor*) == 0x8);
    // public System.Collections.Generic.List`1<VolumeAndPlaneSwitcher/LabelGeometryPair> desiredSwitches
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair>* desiredSwitches;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair>*) == 0x8);
    public:
    // Get instance field reference: public OVRSceneAnchor planePrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneAnchor*& dyn_planePrefab();
    // Get instance field reference: public OVRSceneAnchor volumePrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneAnchor*& dyn_volumePrefab();
    // Get instance field reference: public System.Collections.Generic.List`1<VolumeAndPlaneSwitcher/LabelGeometryPair> desiredSwitches
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair>*& dyn_desiredSwitches();
    // private System.Void ReplaceAnchor(OVRSceneAnchor prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 localScale)
    // Offset: 0x29495B0
    void ReplaceAnchor(::GlobalNamespace::OVRSceneAnchor* prefab, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 localScale);
    // private System.Void Start()
    // Offset: 0x29499DC
    void Start();
    // private System.Void GetVolumeFromTopPlane(UnityEngine.Transform plane, UnityEngine.Vector2 dimensions, System.Single height, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out UnityEngine.Vector3 localScale)
    // Offset: 0x294A310
    void GetVolumeFromTopPlane(::UnityEngine::Transform* plane, ::UnityEngine::Vector2 dimensions, float height, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> localScale);
    // private System.Void GetTopPlaneFromVolume(UnityEngine.Transform volume, UnityEngine.Vector3 dimensions, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out UnityEngine.Vector3 localScale)
    // Offset: 0x294A1E8
    void GetTopPlaneFromVolume(::UnityEngine::Transform* volume, ::UnityEngine::Vector3 dimensions, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> localScale);
    // public System.Void .ctor()
    // Offset: 0x294A390
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeAndPlaneSwitcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VolumeAndPlaneSwitcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeAndPlaneSwitcher*, creationType>()));
    }
  }; // VolumeAndPlaneSwitcher
  #pragma pack(pop)
  static check_size<sizeof(VolumeAndPlaneSwitcher), 48 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair>*)> __GlobalNamespace_VolumeAndPlaneSwitcherSizeCheck;
  static_assert(sizeof(VolumeAndPlaneSwitcher) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VolumeAndPlaneSwitcher::LabelGeometryPair, "", "VolumeAndPlaneSwitcher/LabelGeometryPair");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VolumeAndPlaneSwitcher::GeometryType, "", "VolumeAndPlaneSwitcher/GeometryType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VolumeAndPlaneSwitcher::ReplaceAnchor
// Il2CppName: ReplaceAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VolumeAndPlaneSwitcher::*)(::GlobalNamespace::OVRSceneAnchor*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&GlobalNamespace::VolumeAndPlaneSwitcher::ReplaceAnchor)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("", "OVRSceneAnchor")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VolumeAndPlaneSwitcher*), "ReplaceAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, rotation, localScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VolumeAndPlaneSwitcher::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VolumeAndPlaneSwitcher::*)()>(&GlobalNamespace::VolumeAndPlaneSwitcher::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VolumeAndPlaneSwitcher*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VolumeAndPlaneSwitcher::GetVolumeFromTopPlane
// Il2CppName: GetVolumeFromTopPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VolumeAndPlaneSwitcher::*)(::UnityEngine::Transform*, ::UnityEngine::Vector2, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::VolumeAndPlaneSwitcher::GetVolumeFromTopPlane)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VolumeAndPlaneSwitcher*), "GetVolumeFromTopPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane, dimensions, height, position, rotation, localScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VolumeAndPlaneSwitcher::GetTopPlaneFromVolume
// Il2CppName: GetTopPlaneFromVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VolumeAndPlaneSwitcher::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::VolumeAndPlaneSwitcher::GetTopPlaneFromVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VolumeAndPlaneSwitcher*), "GetTopPlaneFromVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, dimensions, position, rotation, localScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VolumeAndPlaneSwitcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
