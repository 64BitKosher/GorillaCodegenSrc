// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
// Including type: GTSubZone
#include "GlobalNamespace/GTSubZone.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneKey
  struct ZoneKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneKey, "", "ZoneKey");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ZoneKey
  // [TokenAttribute] Offset: FFFFFFFF
  struct ZoneKey/*, public ::System::ValueType, public ::System::IEquatable_1<::GlobalNamespace::ZoneKey>, public ::System::IComparable_1<::GlobalNamespace::ZoneKey>, public ::System::IComparable*/ {
    public:
    public:
    // public GTZone zoneId
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::GTZone zoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // public GTSubZone subZoneId
    // Size: 0x4
    // Offset: 0x4
    ::GlobalNamespace::GTSubZone subZoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTSubZone) == 0x4);
    public:
    // Creating value type constructor for type: ZoneKey
    constexpr ZoneKey(::GlobalNamespace::GTZone zoneId_ = {}, ::GlobalNamespace::GTSubZone subZoneId_ = {}) noexcept : zoneId{zoneId_}, subZoneId{subZoneId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::ZoneKey>
    operator ::System::IEquatable_1<::GlobalNamespace::ZoneKey>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::ZoneKey>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::GlobalNamespace::ZoneKey>
    operator ::System::IComparable_1<::GlobalNamespace::ZoneKey>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::GlobalNamespace::ZoneKey>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Get static field: static public readonly ZoneKey Null
    static ::GlobalNamespace::ZoneKey _get_Null();
    // Set static field: static public readonly ZoneKey Null
    static void _set_Null(::GlobalNamespace::ZoneKey value);
    // Get instance field reference: public GTZone zoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zoneId();
    // Get instance field reference: public GTSubZone subZoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& dyn_subZoneId();
    // public System.Int32 get_intValue()
    // Offset: 0x27A8A1C
    int get_intValue();
    // public System.String get_zoneName()
    // Offset: 0x27A8BA8
    ::StringW get_zoneName();
    // public System.String get_subZoneName()
    // Offset: 0x27A8BF0
    ::StringW get_subZoneName();
    // public System.Void .ctor(GTZone zone, GTSubZone subZone)
    // Offset: 0x27A8C38
    // ABORTED: conflicts with another method.  ZoneKey(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone);
    // static public ZoneKey GetKey(GTZone zone, GTSubZone subZone)
    // Offset: 0x27A8D8C
    static ::GlobalNamespace::ZoneKey GetKey(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone);
    // static public System.Int32 ToIntValue(GTZone zone, GTSubZone subZone)
    // Offset: 0x27A8A78
    static int ToIntValue(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone);
    // public System.Boolean Equals(ZoneKey other)
    // Offset: 0x27A8D98
    bool Equals(::GlobalNamespace::ZoneKey other);
    // public System.Int32 CompareTo(ZoneKey other)
    // Offset: 0x27A8EB0
    int CompareTo(::GlobalNamespace::ZoneKey other);
    // public System.Int32 CompareTo(System.Object obj)
    // Offset: 0x27A8F40
    int CompareTo(::Il2CppObject* obj);
    // static public System.Int32 op_Explicit(ZoneKey key)
    // Offset: 0x27A9034
    explicit operator int();
    // static private System.Void .cctor()
    // Offset: 0x27A904C
    static void _cctor();
    // public override System.Int32 GetHashCode()
    // Offset: 0x27A8C40
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x27A8C44
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x27A8DFC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // ZoneKey
  #pragma pack(pop)
  static check_size<sizeof(ZoneKey), 4 + sizeof(::GlobalNamespace::GTSubZone)> __GlobalNamespace_ZoneKeySizeCheck;
  static_assert(sizeof(ZoneKey) == 0x8);
  // static public System.Boolean op_Equality(ZoneKey x, ZoneKey y)
  // Offset: 0x27A8E74
  bool operator ==(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
  // static public System.Boolean op_Inequality(ZoneKey x, ZoneKey y)
  // Offset: 0x27A8E90
  bool operator !=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
  // static public System.Boolean op_LessThan(ZoneKey x, ZoneKey y)
  // Offset: 0x27A8FB8
  bool operator <(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
  // static public System.Boolean op_GreaterThan(ZoneKey x, ZoneKey y)
  // Offset: 0x27A8FD4
  bool operator >(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
  // static public System.Boolean op_LessThanOrEqual(ZoneKey x, ZoneKey y)
  // Offset: 0x27A8FF4
  bool operator <=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
  // static public System.Boolean op_GreaterThanOrEqual(ZoneKey x, ZoneKey y)
  // Offset: 0x27A9014
  bool operator >=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::get_intValue
// Il2CppName: get_intValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneKey::*)()>(&GlobalNamespace::ZoneKey::get_intValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "get_intValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::get_zoneName
// Il2CppName: get_zoneName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ZoneKey::*)()>(&GlobalNamespace::ZoneKey::get_zoneName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "get_zoneName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::get_subZoneName
// Il2CppName: get_subZoneName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ZoneKey::*)()>(&GlobalNamespace::ZoneKey::get_subZoneName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "get_subZoneName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::ZoneKey
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::GetKey
// Il2CppName: GetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneKey (*)(::GlobalNamespace::GTZone, ::GlobalNamespace::GTSubZone)>(&GlobalNamespace::ZoneKey::GetKey)> {
  static const MethodInfo* get() {
    static auto* zone = &::il2cpp_utils::GetClassFromName("", "GTZone")->byval_arg;
    static auto* subZone = &::il2cpp_utils::GetClassFromName("", "GTSubZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "GetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zone, subZone});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::ToIntValue
// Il2CppName: ToIntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::GTZone, ::GlobalNamespace::GTSubZone)>(&GlobalNamespace::ZoneKey::ToIntValue)> {
  static const MethodInfo* get() {
    static auto* zone = &::il2cpp_utils::GetClassFromName("", "GTZone")->byval_arg;
    static auto* subZone = &::il2cpp_utils::GetClassFromName("", "GTSubZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "ToIntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zone, subZone});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneKey::*)(::GlobalNamespace::ZoneKey)>(&GlobalNamespace::ZoneKey::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "ZoneKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneKey::*)(::GlobalNamespace::ZoneKey)>(&GlobalNamespace::ZoneKey::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "ZoneKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneKey::*)(::Il2CppObject*)>(&GlobalNamespace::ZoneKey::CompareTo)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator int
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ZoneKey::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneKey::*)()>(&GlobalNamespace::ZoneKey::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ZoneKey::*)()>(&GlobalNamespace::ZoneKey::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneKey::*)(::Il2CppObject*)>(&GlobalNamespace::ZoneKey::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneKey::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
