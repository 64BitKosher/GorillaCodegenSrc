// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRVirtualKeyboard
#include "GlobalNamespace/OVRVirtualKeyboard.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRVirtualKeyboard::InputSource, "", "OVRVirtualKeyboard/InputSource");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: OVRVirtualKeyboard/InputSource
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRVirtualKeyboard::InputSource/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InputSource
    constexpr InputSource(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public OVRVirtualKeyboard/InputSource ControllerLeft
    static constexpr const int ControllerLeft = 0;
    // Get static field: static public OVRVirtualKeyboard/InputSource ControllerLeft
    static ::GlobalNamespace::OVRVirtualKeyboard::InputSource _get_ControllerLeft();
    // Set static field: static public OVRVirtualKeyboard/InputSource ControllerLeft
    static void _set_ControllerLeft(::GlobalNamespace::OVRVirtualKeyboard::InputSource value);
    // static field const value: static public OVRVirtualKeyboard/InputSource ControllerRight
    static constexpr const int ControllerRight = 1;
    // Get static field: static public OVRVirtualKeyboard/InputSource ControllerRight
    static ::GlobalNamespace::OVRVirtualKeyboard::InputSource _get_ControllerRight();
    // Set static field: static public OVRVirtualKeyboard/InputSource ControllerRight
    static void _set_ControllerRight(::GlobalNamespace::OVRVirtualKeyboard::InputSource value);
    // static field const value: static public OVRVirtualKeyboard/InputSource HandLeft
    static constexpr const int HandLeft = 2;
    // Get static field: static public OVRVirtualKeyboard/InputSource HandLeft
    static ::GlobalNamespace::OVRVirtualKeyboard::InputSource _get_HandLeft();
    // Set static field: static public OVRVirtualKeyboard/InputSource HandLeft
    static void _set_HandLeft(::GlobalNamespace::OVRVirtualKeyboard::InputSource value);
    // static field const value: static public OVRVirtualKeyboard/InputSource HandRight
    static constexpr const int HandRight = 3;
    // Get static field: static public OVRVirtualKeyboard/InputSource HandRight
    static ::GlobalNamespace::OVRVirtualKeyboard::InputSource _get_HandRight();
    // Set static field: static public OVRVirtualKeyboard/InputSource HandRight
    static void _set_HandRight(::GlobalNamespace::OVRVirtualKeyboard::InputSource value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // OVRVirtualKeyboard/InputSource
  #pragma pack(pop)
  static check_size<sizeof(OVRVirtualKeyboard::InputSource), 0 + sizeof(int)> __GlobalNamespace_OVRVirtualKeyboard_InputSourceSizeCheck;
  static_assert(sizeof(OVRVirtualKeyboard::InputSource) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
