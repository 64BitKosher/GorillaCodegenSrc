// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRSpace
  struct OVRSpace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpace, "", "OVRSpace");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRSpace
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRSpace/*, public ::System::ValueType, public ::System::IEquatable_1<::GlobalNamespace::OVRSpace>*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRSpace::StorageLocation
    struct StorageLocation;
    public:
    // private readonly System.UInt64 <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: OVRSpace
    constexpr OVRSpace(uint64_t Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRSpace>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRSpace>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRSpace>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return Handle;
    }
    // Get instance field reference: private readonly System.UInt64 <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$Handle$k__BackingField();
    // public System.UInt64 get_Handle()
    // Offset: 0x4928998
    uint64_t get_Handle();
    // public System.Boolean TryGetUuid(out System.Guid uuid)
    // Offset: 0x49289A0
    bool TryGetUuid(ByRef<::System::Guid> uuid);
    // public System.Boolean get_Valid()
    // Offset: 0x491A9DC
    bool get_Valid();
    // public System.Void .ctor(System.UInt64 handle)
    // Offset: 0x4928A0C
    // ABORTED: conflicts with another method.  OVRSpace(uint64_t handle);
    // public System.Boolean Equals(OVRSpace other)
    // Offset: 0x4928A98
    bool Equals(::GlobalNamespace::OVRSpace other);
    // public override System.String ToString()
    // Offset: 0x4928A14
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x4928AA8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4928B20
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // OVRSpace
  #pragma pack(pop)
  static check_size<sizeof(OVRSpace), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRSpaceSizeCheck;
  static_assert(sizeof(OVRSpace) == 0x8);
  // static public System.Boolean op_Equality(OVRSpace lhs, OVRSpace rhs)
  // Offset: 0x4928B40
  bool operator ==(const ::GlobalNamespace::OVRSpace& lhs, const ::GlobalNamespace::OVRSpace& rhs);
  // static public System.Boolean op_Inequality(OVRSpace lhs, OVRSpace rhs)
  // Offset: 0x4928B4C
  bool operator !=(const ::GlobalNamespace::OVRSpace& lhs, const ::GlobalNamespace::OVRSpace& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRSpace::*)()>(&GlobalNamespace::OVRSpace::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::TryGetUuid
// Il2CppName: TryGetUuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpace::*)(ByRef<::System::Guid>)>(&GlobalNamespace::OVRSpace::TryGetUuid)> {
  static const MethodInfo* get() {
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "TryGetUuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::get_Valid
// Il2CppName: get_Valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpace::*)()>(&GlobalNamespace::OVRSpace::get_Valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "get_Valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::OVRSpace
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpace::*)(::GlobalNamespace::OVRSpace)>(&GlobalNamespace::OVRSpace::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OVRSpace::*)()>(&GlobalNamespace::OVRSpace::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpace::*)(::Il2CppObject*)>(&GlobalNamespace::OVRSpace::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRSpace::*)()>(&GlobalNamespace::OVRSpace::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpace), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRSpace::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
