// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.ParticleSystem/Particle
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Behaviour because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Bubbler
  class Bubbler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Bubbler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Bubbler*, "", "Bubbler");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: Bubbler
  // [TokenAttribute] Offset: FFFFFFFF
  class Bubbler : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::Bubbler::BubblerState
    struct BubblerState;
    public:
    // private System.Boolean _worksInWater
    // Size: 0x1
    // Offset: 0x2C9
    bool worksInWater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.ParticleSystem bubbleParticleSystem
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::ParticleSystem* bubbleParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem/Particle[] bubbleParticleArray
    // Size: 0x8
    // Offset: 0x2D8
    ::ArrayW<::UnityEngine::ParticleSystem::Particle> bubbleParticleArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::Particle>) == 0x8);
    // public UnityEngine.AudioSource bubblerAudio
    // Size: 0x8
    // Offset: 0x2E0
    ::UnityEngine::AudioSource* bubblerAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource popBubbleAudio
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::AudioSource* popBubbleAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> currentParticles
    // Size: 0x8
    // Offset: 0x2F0
    ::System::Collections::Generic::List_1<uint>* currentParticles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
    // Size: 0x8
    // Offset: 0x2F8
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>* particleInfoDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Vector3 outPosition
    // Size: 0xC
    // Offset: 0x300
    ::UnityEngine::Vector3 outPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean allBubblesPopped
    // Size: 0x1
    // Offset: 0x30C
    bool allBubblesPopped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableActivation
    // Size: 0x1
    // Offset: 0x30D
    bool disableActivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableDeactivation
    // Size: 0x1
    // Offset: 0x30E
    bool disableDeactivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single rotationSpeed
    // Size: 0x4
    // Offset: 0x310
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject fan
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::GameObject* fan;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single ongoingStrength
    // Size: 0x4
    // Offset: 0x320
    float ongoingStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single triggerStrength
    // Size: 0x4
    // Offset: 0x324
    float triggerStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialTriggerPull
    // Size: 0x4
    // Offset: 0x328
    float initialTriggerPull;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialTriggerDuration
    // Size: 0x4
    // Offset: 0x32C
    float initialTriggerDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasBubblerAudio
    // Size: 0x1
    // Offset: 0x330
    bool hasBubblerAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasPopBubbleAudio
    // Size: 0x1
    // Offset: 0x331
    bool hasPopBubbleAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Behaviour[] behavioursToEnableWhenTriggerPressed
    // Size: 0x8
    // Offset: 0x338
    ::ArrayW<::UnityEngine::Behaviour*> behavioursToEnableWhenTriggerPressed;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Behaviour*>) == 0x8);
    // private System.Boolean hasParticleSystem
    // Size: 0x1
    // Offset: 0x340
    bool hasParticleSystem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasFan
    // Size: 0x1
    // Offset: 0x341
    bool hasFan;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean _worksInWater
    [[deprecated("Use field access instead!")]] bool& dyn__worksInWater();
    // Get instance field reference: public UnityEngine.ParticleSystem bubbleParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_bubbleParticleSystem();
    // Get instance field reference: private UnityEngine.ParticleSystem/Particle[] bubbleParticleArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& dyn_bubbleParticleArray();
    // Get instance field reference: public UnityEngine.AudioSource bubblerAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_bubblerAudio();
    // Get instance field reference: public UnityEngine.AudioSource popBubbleAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_popBubbleAudio();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> currentParticles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& dyn_currentParticles();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*& dyn_particleInfoDict();
    // Get instance field reference: private UnityEngine.Vector3 outPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_outPosition();
    // Get instance field reference: private System.Boolean allBubblesPopped
    [[deprecated("Use field access instead!")]] bool& dyn_allBubblesPopped();
    // Get instance field reference: public System.Boolean disableActivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableActivation();
    // Get instance field reference: public System.Boolean disableDeactivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableDeactivation();
    // Get instance field reference: public System.Single rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotationSpeed();
    // Get instance field reference: public UnityEngine.GameObject fan
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fan();
    // Get instance field reference: public System.Single ongoingStrength
    [[deprecated("Use field access instead!")]] float& dyn_ongoingStrength();
    // Get instance field reference: public System.Single triggerStrength
    [[deprecated("Use field access instead!")]] float& dyn_triggerStrength();
    // Get instance field reference: private System.Single initialTriggerPull
    [[deprecated("Use field access instead!")]] float& dyn_initialTriggerPull();
    // Get instance field reference: private System.Single initialTriggerDuration
    [[deprecated("Use field access instead!")]] float& dyn_initialTriggerDuration();
    // Get instance field reference: private System.Boolean hasBubblerAudio
    [[deprecated("Use field access instead!")]] bool& dyn_hasBubblerAudio();
    // Get instance field reference: private System.Boolean hasPopBubbleAudio
    [[deprecated("Use field access instead!")]] bool& dyn_hasPopBubbleAudio();
    // Get instance field reference: public UnityEngine.Behaviour[] behavioursToEnableWhenTriggerPressed
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& dyn_behavioursToEnableWhenTriggerPressed();
    // Get instance field reference: private System.Boolean hasParticleSystem
    [[deprecated("Use field access instead!")]] bool& dyn_hasParticleSystem();
    // Get instance field reference: private System.Boolean hasFan
    [[deprecated("Use field access instead!")]] bool& dyn_hasFan();
    // private System.Void InitToDefault()
    // Offset: 0x26D90A4
    void InitToDefault();
    // public override System.Void OnSpawn()
    // Offset: 0x26D8D50
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public override System.Void OnEnable()
    // Offset: 0x26D8F40
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26D911C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Void ResetToDefaultState()
    // Offset: 0x26D91F8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::ResetToDefaultState()
    void ResetToDefaultState();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x26D9214
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26D9288
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public override System.Void OnActivate()
    // Offset: 0x26D9A2C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public override System.Void OnDeactivate()
    // Offset: 0x26D9A4C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDeactivate()
    void OnDeactivate();
    // public override System.Boolean CanActivate()
    // Offset: 0x26D9A6C
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanActivate()
    bool CanActivate();
    // public override System.Boolean CanDeactivate()
    // Offset: 0x26D9A7C
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanDeactivate()
    bool CanDeactivate();
    // public System.Void .ctor()
    // Offset: 0x26D9A8C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Bubbler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Bubbler*, creationType>()));
    }
  }; // Bubbler
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::InitToDefault
// Il2CppName: InitToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::InitToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "InitToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Bubbler::*)()>(&GlobalNamespace::Bubbler::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Bubbler*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Bubbler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
