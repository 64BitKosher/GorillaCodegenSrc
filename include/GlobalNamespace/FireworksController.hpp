// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TimeOfDayEvent
  class TimeOfDayEvent;
  // Forward declaring type: Firework
  class Firework;
  // Skipping declaration: ExplosionEvent because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FireworksController
  class FireworksController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FireworksController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FireworksController*, "", "FireworksController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: FireworksController
  // [TokenAttribute] Offset: FFFFFFFF
  class FireworksController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FireworksController::ExplosionEvent
    struct ExplosionEvent;
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: FireworksController/ExplosionEvent
    // [TokenAttribute] Offset: FFFFFFFF
    struct ExplosionEvent/*, public ::System::ValueType*/ {
      public:
      public:
      // public TimeSince timeSince
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::TimeSince timeSince;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
      // public System.Double delay
      // Size: 0x8
      // Offset: 0x8
      double delay;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Int32 explosionIndex
      // Size: 0x4
      // Offset: 0x10
      int explosionIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 burstIndex
      // Size: 0x4
      // Offset: 0x14
      int burstIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean active
      // Size: 0x1
      // Offset: 0x18
      bool active;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: active and: firework
      char __padding4[0x7] = {};
      // public Firework firework
      // Size: 0x8
      // Offset: 0x20
      ::GlobalNamespace::Firework* firework;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::Firework*) == 0x8);
      public:
      // Creating value type constructor for type: ExplosionEvent
      constexpr ExplosionEvent(::GlobalNamespace::TimeSince timeSince_ = {}, double delay_ = {}, int explosionIndex_ = {}, int burstIndex_ = {}, bool active_ = {}, ::GlobalNamespace::Firework* firework_ = {}) noexcept : timeSince{timeSince_}, delay{delay_}, explosionIndex{explosionIndex_}, burstIndex{burstIndex_}, active{active_}, firework{firework_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public TimeSince timeSince
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn_timeSince();
      // Get instance field reference: public System.Double delay
      [[deprecated("Use field access instead!")]] double& dyn_delay();
      // Get instance field reference: public System.Int32 explosionIndex
      [[deprecated("Use field access instead!")]] int& dyn_explosionIndex();
      // Get instance field reference: public System.Int32 burstIndex
      [[deprecated("Use field access instead!")]] int& dyn_burstIndex();
      // Get instance field reference: public System.Boolean active
      [[deprecated("Use field access instead!")]] bool& dyn_active();
      // Get instance field reference: public Firework firework
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::Firework*& dyn_firework();
    }; // FireworksController/ExplosionEvent
    #pragma pack(pop)
    static check_size<sizeof(FireworksController::ExplosionEvent), 32 + sizeof(::GlobalNamespace::Firework*)> __GlobalNamespace_FireworksController_ExplosionEventSizeCheck;
    static_assert(sizeof(FireworksController::ExplosionEvent) == 0x28);
    public:
    // public Firework[] fireworks
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::Firework*> fireworks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::Firework*>) == 0x8);
    // public UnityEngine.AudioClip[] whistles
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::AudioClip*> whistles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public UnityEngine.AudioClip[] bursts
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::AudioClip*> bursts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public System.Single whistleVolumeMin
    // Size: 0x4
    // Offset: 0x38
    float whistleVolumeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single whistleVolumeMax
    // Size: 0x4
    // Offset: 0x3C
    float whistleVolumeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minWhistleDelay
    // Size: 0x4
    // Offset: 0x40
    float minWhistleDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minWhistleDelay and: lastWhistle
    char __padding5[0x4] = {};
    // private UnityEngine.AudioClip _lastWhistle
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioClip* lastWhistle;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip _lastBurst
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioClip* lastBurst;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private Firework[] _launchOrder
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::GlobalNamespace::Firework*> launchOrder;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::Firework*>) == 0x8);
    // private SRand _rnd
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::SRand rnd;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SRand) == 0x8);
    // private FireworksController/ExplosionEvent[] _explosionQueue
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::GlobalNamespace::FireworksController::ExplosionEvent> explosionQueue;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::FireworksController::ExplosionEvent>) == 0x8);
    // private TimeSince _timeSinceLastWhistle
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::TimeSince timeSinceLastWhistle;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    // public System.String seed
    // Size: 0x8
    // Offset: 0x78
    ::StringW seed;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt32 roundNumVolleys
    // Size: 0x4
    // Offset: 0x80
    uint roundNumVolleys;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 roundLength
    // Size: 0x4
    // Offset: 0x84
    uint roundLength;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private TimeOfDayEvent _fireworksEvent
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::TimeOfDayEvent* fireworksEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeOfDayEvent*) == 0x8);
    public:
    // Get instance field reference: public Firework[] fireworks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Firework*>& dyn_fireworks();
    // Get instance field reference: public UnityEngine.AudioClip[] whistles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_whistles();
    // Get instance field reference: public UnityEngine.AudioClip[] bursts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_bursts();
    // Get instance field reference: public System.Single whistleVolumeMin
    [[deprecated("Use field access instead!")]] float& dyn_whistleVolumeMin();
    // Get instance field reference: public System.Single whistleVolumeMax
    [[deprecated("Use field access instead!")]] float& dyn_whistleVolumeMax();
    // Get instance field reference: public System.Single minWhistleDelay
    [[deprecated("Use field access instead!")]] float& dyn_minWhistleDelay();
    // Get instance field reference: private UnityEngine.AudioClip _lastWhistle
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__lastWhistle();
    // Get instance field reference: private UnityEngine.AudioClip _lastBurst
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__lastBurst();
    // Get instance field reference: private Firework[] _launchOrder
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Firework*>& dyn__launchOrder();
    // Get instance field reference: private SRand _rnd
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SRand& dyn__rnd();
    // Get instance field reference: private FireworksController/ExplosionEvent[] _explosionQueue
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FireworksController::ExplosionEvent>& dyn__explosionQueue();
    // Get instance field reference: private TimeSince _timeSinceLastWhistle
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn__timeSinceLastWhistle();
    // Get instance field reference: public System.String seed
    [[deprecated("Use field access instead!")]] ::StringW& dyn_seed();
    // Get instance field reference: public System.UInt32 roundNumVolleys
    [[deprecated("Use field access instead!")]] uint& dyn_roundNumVolleys();
    // Get instance field reference: public System.UInt32 roundLength
    [[deprecated("Use field access instead!")]] uint& dyn_roundLength();
    // Get instance field reference: private TimeOfDayEvent _fireworksEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeOfDayEvent*& dyn__fireworksEvent();
    // private System.Void Awake()
    // Offset: 0x279F368
    void Awake();
    // public System.Void LaunchVolley()
    // Offset: 0x279F3E8
    void LaunchVolley();
    // public System.Void LaunchVolleyRound()
    // Offset: 0x279F4F0
    void LaunchVolleyRound();
    // public System.Void Launch(Firework fw)
    // Offset: 0x279E824
    void Launch(::GlobalNamespace::Firework* fw);
    // private System.Void PostExplosionEvent(FireworksController/ExplosionEvent ev)
    // Offset: 0x279F644
    void PostExplosionEvent(::GlobalNamespace::FireworksController::ExplosionEvent ev);
    // private System.Void Update()
    // Offset: 0x279F6BC
    void Update();
    // private System.Void ProcessEvents()
    // Offset: 0x279F6C0
    void ProcessEvents();
    // private System.Void DoExplosion(FireworksController/ExplosionEvent ev)
    // Offset: 0x279F800
    void DoExplosion(::GlobalNamespace::FireworksController::ExplosionEvent ev);
    // public System.Void RenderGizmo(Firework fw, UnityEngine.Color c)
    // Offset: 0x279EFC4
    void RenderGizmo(::GlobalNamespace::Firework* fw, ::UnityEngine::Color c);
    // public System.Void .ctor()
    // Offset: 0x279F98C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireworksController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireworksController*, creationType>()));
    }
  }; // FireworksController
  #pragma pack(pop)
  static check_size<sizeof(FireworksController), 136 + sizeof(::GlobalNamespace::TimeOfDayEvent*)> __GlobalNamespace_FireworksControllerSizeCheck;
  static_assert(sizeof(FireworksController) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FireworksController::ExplosionEvent, "", "FireworksController/ExplosionEvent");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)()>(&GlobalNamespace::FireworksController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::LaunchVolley
// Il2CppName: LaunchVolley
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)()>(&GlobalNamespace::FireworksController::LaunchVolley)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "LaunchVolley", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::LaunchVolleyRound
// Il2CppName: LaunchVolleyRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)()>(&GlobalNamespace::FireworksController::LaunchVolleyRound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "LaunchVolleyRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::Launch
// Il2CppName: Launch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)(::GlobalNamespace::Firework*)>(&GlobalNamespace::FireworksController::Launch)> {
  static const MethodInfo* get() {
    static auto* fw = &::il2cpp_utils::GetClassFromName("", "Firework")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "Launch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fw});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::PostExplosionEvent
// Il2CppName: PostExplosionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)(::GlobalNamespace::FireworksController::ExplosionEvent)>(&GlobalNamespace::FireworksController::PostExplosionEvent)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("", "FireworksController/ExplosionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "PostExplosionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)()>(&GlobalNamespace::FireworksController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::ProcessEvents
// Il2CppName: ProcessEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)()>(&GlobalNamespace::FireworksController::ProcessEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "ProcessEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::DoExplosion
// Il2CppName: DoExplosion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)(::GlobalNamespace::FireworksController::ExplosionEvent)>(&GlobalNamespace::FireworksController::DoExplosion)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("", "FireworksController/ExplosionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "DoExplosion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::RenderGizmo
// Il2CppName: RenderGizmo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireworksController::*)(::GlobalNamespace::Firework*, ::UnityEngine::Color)>(&GlobalNamespace::FireworksController::RenderGizmo)> {
  static const MethodInfo* get() {
    static auto* fw = &::il2cpp_utils::GetClassFromName("", "Firework")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireworksController*), "RenderGizmo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fw, c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireworksController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
