// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: GorillaTag.CosmeticSystem.GTHardCodedBones/SturdyEBone
#include "GorillaTag/CosmeticSystem/GTHardCodedBones_SturdyEBone.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaPosRotConstraint
  struct GorillaPosRotConstraint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaPosRotConstraint, "", "GorillaPosRotConstraint");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaPosRotConstraint
  // [TokenAttribute] Offset: FFFFFFFF
  struct GorillaPosRotConstraint/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Transform follower
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* follower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public GorillaTag.CosmeticSystem.GTHardCodedBones/SturdyEBone sourceGorillaBone
    // Size: 0x10
    // Offset: 0x8
    ::GorillaTag::CosmeticSystem::GTHardCodedBones::SturdyEBone sourceGorillaBone;
    // Field size check
    static_assert(sizeof(::GorillaTag::CosmeticSystem::GTHardCodedBones::SturdyEBone) == 0x10);
    // public UnityEngine.Transform source
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.String sourceRelativePath
    // Size: 0x8
    // Offset: 0x20
    ::StringW sourceRelativePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Vector3 positionOffset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotationOffset
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Quaternion rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: GorillaPosRotConstraint
    constexpr GorillaPosRotConstraint(::UnityEngine::Transform* follower_ = {}, ::GorillaTag::CosmeticSystem::GTHardCodedBones::SturdyEBone sourceGorillaBone_ = {}, ::UnityEngine::Transform* source_ = {}, ::StringW sourceRelativePath_ = {}, ::UnityEngine::Vector3 positionOffset_ = {}, ::UnityEngine::Quaternion rotationOffset_ = {}) noexcept : follower{follower_}, sourceGorillaBone{sourceGorillaBone_}, source{source_}, sourceRelativePath{sourceRelativePath_}, positionOffset{positionOffset_}, rotationOffset{rotationOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Transform follower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_follower();
    // Get instance field reference: public GorillaTag.CosmeticSystem.GTHardCodedBones/SturdyEBone sourceGorillaBone
    [[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::GTHardCodedBones::SturdyEBone& dyn_sourceGorillaBone();
    // Get instance field reference: public UnityEngine.Transform source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_source();
    // Get instance field reference: public System.String sourceRelativePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sourceRelativePath();
    // Get instance field reference: public UnityEngine.Vector3 positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_positionOffset();
    // Get instance field reference: public UnityEngine.Quaternion rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotationOffset();
  }; // GorillaPosRotConstraint
  #pragma pack(pop)
  static check_size<sizeof(GorillaPosRotConstraint), 52 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_GorillaPosRotConstraintSizeCheck;
  static_assert(sizeof(GorillaPosRotConstraint) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
