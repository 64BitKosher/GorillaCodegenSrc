// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlagForLighting
  class FlagForLighting;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlagForLighting);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlagForLighting*, "", "FlagForLighting");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: FlagForLighting
  // [TokenAttribute] Offset: FFFFFFFF
  class FlagForLighting : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FlagForLighting::TimeOfDay
    struct TimeOfDay;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FlagForLighting/TimeOfDay
    // [TokenAttribute] Offset: FFFFFFFF
    struct TimeOfDay/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TimeOfDay
      constexpr TimeOfDay(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FlagForLighting/TimeOfDay Sunrise
      static constexpr const int Sunrise = 0;
      // Get static field: static public FlagForLighting/TimeOfDay Sunrise
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_Sunrise();
      // Set static field: static public FlagForLighting/TimeOfDay Sunrise
      static void _set_Sunrise(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay TenAM
      static constexpr const int TenAM = 1;
      // Get static field: static public FlagForLighting/TimeOfDay TenAM
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_TenAM();
      // Set static field: static public FlagForLighting/TimeOfDay TenAM
      static void _set_TenAM(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay Noon
      static constexpr const int Noon = 2;
      // Get static field: static public FlagForLighting/TimeOfDay Noon
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_Noon();
      // Set static field: static public FlagForLighting/TimeOfDay Noon
      static void _set_Noon(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay ThreePM
      static constexpr const int ThreePM = 3;
      // Get static field: static public FlagForLighting/TimeOfDay ThreePM
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_ThreePM();
      // Set static field: static public FlagForLighting/TimeOfDay ThreePM
      static void _set_ThreePM(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay Sunset
      static constexpr const int Sunset = 4;
      // Get static field: static public FlagForLighting/TimeOfDay Sunset
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_Sunset();
      // Set static field: static public FlagForLighting/TimeOfDay Sunset
      static void _set_Sunset(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay Night
      static constexpr const int Night = 5;
      // Get static field: static public FlagForLighting/TimeOfDay Night
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_Night();
      // Set static field: static public FlagForLighting/TimeOfDay Night
      static void _set_Night(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay RainingDay
      static constexpr const int RainingDay = 6;
      // Get static field: static public FlagForLighting/TimeOfDay RainingDay
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_RainingDay();
      // Set static field: static public FlagForLighting/TimeOfDay RainingDay
      static void _set_RainingDay(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay RainingNight
      static constexpr const int RainingNight = 7;
      // Get static field: static public FlagForLighting/TimeOfDay RainingNight
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_RainingNight();
      // Set static field: static public FlagForLighting/TimeOfDay RainingNight
      static void _set_RainingNight(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // static field const value: static public FlagForLighting/TimeOfDay None
      static constexpr const int None = 8;
      // Get static field: static public FlagForLighting/TimeOfDay None
      static ::GlobalNamespace::FlagForLighting::TimeOfDay _get_None();
      // Set static field: static public FlagForLighting/TimeOfDay None
      static void _set_None(::GlobalNamespace::FlagForLighting::TimeOfDay value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FlagForLighting/TimeOfDay
    #pragma pack(pop)
    static check_size<sizeof(FlagForLighting::TimeOfDay), 0 + sizeof(int)> __GlobalNamespace_FlagForLighting_TimeOfDaySizeCheck;
    static_assert(sizeof(FlagForLighting::TimeOfDay) == 0x4);
    public:
    // public FlagForLighting/TimeOfDay myTimeOfDay
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::FlagForLighting::TimeOfDay myTimeOfDay;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FlagForLighting::TimeOfDay) == 0x4);
    public:
    // Get instance field reference: public FlagForLighting/TimeOfDay myTimeOfDay
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FlagForLighting::TimeOfDay& dyn_myTimeOfDay();
    // public System.Void .ctor()
    // Offset: 0x27767DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlagForLighting* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagForLighting::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlagForLighting*, creationType>()));
    }
  }; // FlagForLighting
  #pragma pack(pop)
  static check_size<sizeof(FlagForLighting), 32 + sizeof(::GlobalNamespace::FlagForLighting::TimeOfDay)> __GlobalNamespace_FlagForLightingSizeCheck;
  static_assert(sizeof(FlagForLighting) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlagForLighting::TimeOfDay, "", "FlagForLighting/TimeOfDay");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlagForLighting::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
