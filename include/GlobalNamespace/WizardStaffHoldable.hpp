// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WizardStaffHoldable
  class WizardStaffHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WizardStaffHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WizardStaffHoldable*, "", "WizardStaffHoldable");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: WizardStaffHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class WizardStaffHoldable : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // public UnityEngine.GameObject effectsGameObject
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::GameObject* effectsGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform tipTransform
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::Transform* tipTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single tipCollisionRadius
    // Size: 0x4
    // Offset: 0x2E0
    float tipCollisionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask tipCollisionLayerMask
    // Size: 0x4
    // Offset: 0x2E4
    ::UnityEngine::LayerMask tipCollisionLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x2E8
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // public System.Single cooldown
    // Size: 0x4
    // Offset: 0x2F0
    float cooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minSlamVelocity
    // Size: 0x4
    // Offset: 0x2F4
    float minSlamVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minSlamAngle
    // Size: 0x4
    // Offset: 0x2F8
    float minSlamAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single cooldownRemaining
    // Size: 0x4
    // Offset: 0x2FC
    float cooldownRemaining;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hitLastFrame
    // Size: 0x1
    // Offset: 0x300
    bool hitLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 tipTargetLocalPosition
    // Size: 0xC
    // Offset: 0x304
    ::UnityEngine::Vector3 tipTargetLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean hasEffectsGameObject
    // Size: 0x1
    // Offset: 0x310
    bool hasEffectsGameObject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean effectsHaveBeenPlayed
    // Size: 0x1
    // Offset: 0x311
    bool effectsHaveBeenPlayed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.GameObject effectsGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_effectsGameObject();
    // Get instance field reference: public UnityEngine.Transform tipTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tipTransform();
    // Get instance field reference: public System.Single tipCollisionRadius
    [[deprecated("Use field access instead!")]] float& dyn_tipCollisionRadius();
    // Get instance field reference: public UnityEngine.LayerMask tipCollisionLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_tipCollisionLayerMask();
    // Get instance field reference: public GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // Get instance field reference: public System.Single cooldown
    [[deprecated("Use field access instead!")]] float& dyn_cooldown();
    // Get instance field reference: public System.Single minSlamVelocity
    [[deprecated("Use field access instead!")]] float& dyn_minSlamVelocity();
    // Get instance field reference: public System.Single minSlamAngle
    [[deprecated("Use field access instead!")]] float& dyn_minSlamAngle();
    // Get instance field reference: private System.Single cooldownRemaining
    [[deprecated("Use field access instead!")]] float& dyn_cooldownRemaining();
    // Get instance field reference: private System.Boolean hitLastFrame
    [[deprecated("Use field access instead!")]] bool& dyn_hitLastFrame();
    // Get instance field reference: private UnityEngine.Vector3 tipTargetLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tipTargetLocalPosition();
    // Get instance field reference: private System.Boolean hasEffectsGameObject
    [[deprecated("Use field access instead!")]] bool& dyn_hasEffectsGameObject();
    // Get instance field reference: private System.Boolean effectsHaveBeenPlayed
    [[deprecated("Use field access instead!")]] bool& dyn_effectsHaveBeenPlayed();
    // private System.Void InitToDefault()
    // Offset: 0x26A09E0
    void InitToDefault();
    // public override System.Void OnSpawn()
    // Offset: 0x26A0928
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public override System.Void OnEnable()
    // Offset: 0x26A09C4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void ResetToDefaultState()
    // Offset: 0x26A0A20
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::ResetToDefaultState()
    void ResetToDefaultState();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x26A0A3C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26A0C84
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // protected override System.Void LateUpdateReplicated()
    // Offset: 0x26A0E7C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateReplicated()
    void LateUpdateReplicated();
    // public System.Void .ctor()
    // Offset: 0x26A0EB0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WizardStaffHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WizardStaffHoldable*, creationType>()));
    }
  }; // WizardStaffHoldable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::InitToDefault
// Il2CppName: InitToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::InitToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "InitToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WizardStaffHoldable::*)()>(&GlobalNamespace::WizardStaffHoldable::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WizardStaffHoldable*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WizardStaffHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
