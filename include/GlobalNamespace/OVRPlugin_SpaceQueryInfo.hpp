// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/SpaceQueryType
#include "GlobalNamespace/OVRPlugin_SpaceQueryType.hpp"
// Including type: OVRPlugin/SpaceStorageLocation
#include "GlobalNamespace/OVRPlugin_SpaceStorageLocation.hpp"
// Including type: OVRPlugin/SpaceQueryActionType
#include "GlobalNamespace/OVRPlugin_SpaceQueryActionType.hpp"
// Including type: OVRPlugin/SpaceQueryFilterType
#include "GlobalNamespace/OVRPlugin_SpaceQueryFilterType.hpp"
// Including type: OVRPlugin/SpaceFilterInfoIds
#include "GlobalNamespace/OVRPlugin_SpaceFilterInfoIds.hpp"
// Including type: OVRPlugin/SpaceFilterInfoComponents
#include "GlobalNamespace/OVRPlugin_SpaceFilterInfoComponents.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::SpaceQueryInfo, "", "OVRPlugin/SpaceQueryInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/SpaceQueryInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::SpaceQueryInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/SpaceQueryType QueryType
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::SpaceQueryType QueryType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceQueryType) == 0x4);
    // public System.Int32 MaxQuerySpaces
    // Size: 0x4
    // Offset: 0x4
    int MaxQuerySpaces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Double Timeout
    // Size: 0x8
    // Offset: 0x8
    double Timeout;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public OVRPlugin/SpaceStorageLocation Location
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::OVRPlugin::SpaceStorageLocation Location;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceStorageLocation) == 0x4);
    // public OVRPlugin/SpaceQueryActionType ActionType
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::OVRPlugin::SpaceQueryActionType ActionType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceQueryActionType) == 0x4);
    // public OVRPlugin/SpaceQueryFilterType FilterType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRPlugin::SpaceQueryFilterType FilterType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceQueryFilterType) == 0x4);
    // Padding between fields: FilterType and: IdInfo
    char __padding5[0x4] = {};
    // public OVRPlugin/SpaceFilterInfoIds IdInfo
    // Size: 0xC
    // Offset: 0x20
    ::GlobalNamespace::OVRPlugin::SpaceFilterInfoIds IdInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceFilterInfoIds) == 0xC);
    // Padding between fields: IdInfo and: ComponentsInfo
    char __padding6[0x4] = {};
    // public OVRPlugin/SpaceFilterInfoComponents ComponentsInfo
    // Size: 0xC
    // Offset: 0x30
    ::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents ComponentsInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents) == 0xC);
    public:
    // Creating value type constructor for type: SpaceQueryInfo
    constexpr SpaceQueryInfo(::GlobalNamespace::OVRPlugin::SpaceQueryType QueryType_ = {}, int MaxQuerySpaces_ = {}, double Timeout_ = {}, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation Location_ = {}, ::GlobalNamespace::OVRPlugin::SpaceQueryActionType ActionType_ = {}, ::GlobalNamespace::OVRPlugin::SpaceQueryFilterType FilterType_ = {}, ::GlobalNamespace::OVRPlugin::SpaceFilterInfoIds IdInfo_ = {}, ::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents ComponentsInfo_ = {}) noexcept : QueryType{QueryType_}, MaxQuerySpaces{MaxQuerySpaces_}, Timeout{Timeout_}, Location{Location_}, ActionType{ActionType_}, FilterType{FilterType_}, IdInfo{IdInfo_}, ComponentsInfo{ComponentsInfo_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/SpaceQueryType QueryType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceQueryType& dyn_QueryType();
    // Get instance field reference: public System.Int32 MaxQuerySpaces
    [[deprecated("Use field access instead!")]] int& dyn_MaxQuerySpaces();
    // Get instance field reference: public System.Double Timeout
    [[deprecated("Use field access instead!")]] double& dyn_Timeout();
    // Get instance field reference: public OVRPlugin/SpaceStorageLocation Location
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceStorageLocation& dyn_Location();
    // Get instance field reference: public OVRPlugin/SpaceQueryActionType ActionType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceQueryActionType& dyn_ActionType();
    // Get instance field reference: public OVRPlugin/SpaceQueryFilterType FilterType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceQueryFilterType& dyn_FilterType();
    // Get instance field reference: public OVRPlugin/SpaceFilterInfoIds IdInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceFilterInfoIds& dyn_IdInfo();
    // Get instance field reference: public OVRPlugin/SpaceFilterInfoComponents ComponentsInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents& dyn_ComponentsInfo();
  }; // OVRPlugin/SpaceQueryInfo
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::SpaceQueryInfo), 48 + sizeof(::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents)> __GlobalNamespace_OVRPlugin_SpaceQueryInfoSizeCheck;
  static_assert(sizeof(OVRPlugin::SpaceQueryInfo) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
