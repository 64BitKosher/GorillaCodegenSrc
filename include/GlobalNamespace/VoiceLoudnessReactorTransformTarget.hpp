// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VoiceLoudnessReactorTransformTarget
  class VoiceLoudnessReactorTransformTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VoiceLoudnessReactorTransformTarget);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VoiceLoudnessReactorTransformTarget*, "", "VoiceLoudnessReactorTransformTarget");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: VoiceLoudnessReactorTransformTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceLoudnessReactorTransformTarget : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 initial
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 initial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Max
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 Max;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x30
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean UseSmoothedLoudness
    // Size: 0x1
    // Offset: 0x34
    bool UseSmoothedLoudness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Transform transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transform();
    // Get instance field reference: private UnityEngine.Vector3 initial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initial();
    // Get instance field reference: public UnityEngine.Vector3 Max
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Max();
    // Get instance field reference: public System.Single Scale
    [[deprecated("Use field access instead!")]] float& dyn_Scale();
    // Get instance field reference: public System.Boolean UseSmoothedLoudness
    [[deprecated("Use field access instead!")]] bool& dyn_UseSmoothedLoudness();
    // public UnityEngine.Vector3 get_Initial()
    // Offset: 0x27A6660
    ::UnityEngine::Vector3 get_Initial();
    // public System.Void set_Initial(UnityEngine.Vector3 value)
    // Offset: 0x27A666C
    void set_Initial(::UnityEngine::Vector3 value);
    // public System.Void .ctor()
    // Offset: 0x27A6678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLoudnessReactorTransformTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLoudnessReactorTransformTarget*, creationType>()));
    }
  }; // VoiceLoudnessReactorTransformTarget
  #pragma pack(pop)
  static check_size<sizeof(VoiceLoudnessReactorTransformTarget), 52 + sizeof(bool)> __GlobalNamespace_VoiceLoudnessReactorTransformTargetSizeCheck;
  static_assert(sizeof(VoiceLoudnessReactorTransformTarget) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorTransformTarget::get_Initial
// Il2CppName: get_Initial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::VoiceLoudnessReactorTransformTarget::*)()>(&GlobalNamespace::VoiceLoudnessReactorTransformTarget::get_Initial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorTransformTarget*), "get_Initial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorTransformTarget::set_Initial
// Il2CppName: set_Initial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactorTransformTarget::*)(::UnityEngine::Vector3)>(&GlobalNamespace::VoiceLoudnessReactorTransformTarget::set_Initial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorTransformTarget*), "set_Initial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorTransformTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
