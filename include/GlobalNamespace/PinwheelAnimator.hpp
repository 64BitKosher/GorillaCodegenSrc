// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PinwheelAnimator
  class PinwheelAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PinwheelAnimator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PinwheelAnimator*, "", "PinwheelAnimator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: PinwheelAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class PinwheelAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform spinnerTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* spinnerTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single maxSpinSpeed
    // Size: 0x4
    // Offset: 0x28
    float maxSpinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single spinSpeedMultiplier
    // Size: 0x4
    // Offset: 0x2C
    float spinSpeedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single damping
    // Size: 0x4
    // Offset: 0x30
    float damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 oldPos
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 oldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single spinSpeed
    // Size: 0x4
    // Offset: 0x40
    float spinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform spinnerTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_spinnerTransform();
    // Get instance field reference: public System.Single maxSpinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpinSpeed();
    // Get instance field reference: public System.Single spinSpeedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeedMultiplier();
    // Get instance field reference: public System.Single damping
    [[deprecated("Use field access instead!")]] float& dyn_damping();
    // Get instance field reference: private UnityEngine.Vector3 oldPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_oldPos();
    // Get instance field reference: private System.Single spinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeed();
    // protected System.Void OnEnable()
    // Offset: 0x26A014C
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x26A017C
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26A0400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PinwheelAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PinwheelAnimator*, creationType>()));
    }
  }; // PinwheelAnimator
  #pragma pack(pop)
  static check_size<sizeof(PinwheelAnimator), 64 + sizeof(float)> __GlobalNamespace_PinwheelAnimatorSizeCheck;
  static_assert(sizeof(PinwheelAnimator) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PinwheelAnimator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PinwheelAnimator::*)()>(&GlobalNamespace::PinwheelAnimator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PinwheelAnimator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PinwheelAnimator::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PinwheelAnimator::*)()>(&GlobalNamespace::PinwheelAnimator::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PinwheelAnimator*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PinwheelAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
