// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/Rectf
#include "GlobalNamespace/OVRPlugin_Rectf.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::RectfPair, "", "OVRPlugin/RectfPair");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/RectfPair
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct OVRPlugin::RectfPair/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/Rectf Rect0
    // Size: 0x10
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::Rectf Rect0;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Rectf) == 0x10);
    // public OVRPlugin/Rectf Rect1
    // Size: 0x10
    // Offset: 0x10
    ::GlobalNamespace::OVRPlugin::Rectf Rect1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Rectf) == 0x10);
    public:
    // Creating value type constructor for type: RectfPair
    constexpr RectfPair(::GlobalNamespace::OVRPlugin::Rectf Rect0_ = {}, ::GlobalNamespace::OVRPlugin::Rectf Rect1_ = {}) noexcept : Rect0{Rect0_}, Rect1{Rect1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/Rectf Rect0
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Rectf& dyn_Rect0();
    // Get instance field reference: public OVRPlugin/Rectf Rect1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Rectf& dyn_Rect1();
    // public OVRPlugin/Rectf get_Item(System.Int32 i)
    // Offset: 0x4905A00
    ::GlobalNamespace::OVRPlugin::Rectf get_Item(int i);
    // public System.Void set_Item(System.Int32 i, OVRPlugin/Rectf value)
    // Offset: 0x4905AC4
    void set_Item(int i, ::GlobalNamespace::OVRPlugin::Rectf value);
  }; // OVRPlugin/RectfPair
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::RectfPair), 16 + sizeof(::GlobalNamespace::OVRPlugin::Rectf)> __GlobalNamespace_OVRPlugin_RectfPairSizeCheck;
  static_assert(sizeof(OVRPlugin::RectfPair) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RectfPair::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Rectf (GlobalNamespace::OVRPlugin::RectfPair::*)(int)>(&GlobalNamespace::OVRPlugin::RectfPair::get_Item)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::RectfPair), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RectfPair::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPlugin::RectfPair::*)(int, ::GlobalNamespace::OVRPlugin::Rectf)>(&GlobalNamespace::OVRPlugin::RectfPair::set_Item)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Rectf")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::RectfPair), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, value});
  }
};
