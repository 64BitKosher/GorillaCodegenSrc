// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TriggerOnSpeed
  class TriggerOnSpeed;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TriggerOnSpeed);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TriggerOnSpeed*, "", "TriggerOnSpeed");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: TriggerOnSpeed
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerOnSpeed : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    public:
    // private System.Single speedThreshold
    // Size: 0x4
    // Offset: 0x20
    float speedThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: speedThreshold and: onFaster
    char __padding0[0x4] = {};
    // private UnityEngine.Events.UnityEvent onFaster
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* onFaster;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent onSlower
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onSlower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // private System.Boolean wasFaster
    // Size: 0x1
    // Offset: 0x40
    bool wasFaster;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x41
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get instance field reference: private System.Single speedThreshold
    [[deprecated("Use field access instead!")]] float& dyn_speedThreshold();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onFaster
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onFaster();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onSlower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onSlower();
    // Get instance field reference: private GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // Get instance field reference: private System.Boolean wasFaster
    [[deprecated("Use field access instead!")]] bool& dyn_wasFaster();
    // Get instance field reference: private System.Boolean <TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$TickRunning$k__BackingField();
    // private System.Void OnEnable()
    // Offset: 0x278C8EC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x278C958
    void OnDisable();
    // public System.Void Tick()
    // Offset: 0x278C9C4
    void Tick();
    // public System.Boolean get_TickRunning()
    // Offset: 0x278CA2C
    bool get_TickRunning();
    // public System.Void set_TickRunning(System.Boolean value)
    // Offset: 0x278CA34
    void set_TickRunning(bool value);
    // public System.Void .ctor()
    // Offset: 0x278CA40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerOnSpeed* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerOnSpeed*, creationType>()));
    }
  }; // TriggerOnSpeed
  #pragma pack(pop)
  static check_size<sizeof(TriggerOnSpeed), 65 + sizeof(bool)> __GlobalNamespace_TriggerOnSpeedSizeCheck;
  static_assert(sizeof(TriggerOnSpeed) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnSpeed::*)()>(&GlobalNamespace::TriggerOnSpeed::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnSpeed*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnSpeed::*)()>(&GlobalNamespace::TriggerOnSpeed::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnSpeed*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnSpeed::*)()>(&GlobalNamespace::TriggerOnSpeed::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnSpeed*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::get_TickRunning
// Il2CppName: get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TriggerOnSpeed::*)()>(&GlobalNamespace::TriggerOnSpeed::get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnSpeed*), "get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::set_TickRunning
// Il2CppName: set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnSpeed::*)(bool)>(&GlobalNamespace::TriggerOnSpeed::set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnSpeed*), "set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnSpeed::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
