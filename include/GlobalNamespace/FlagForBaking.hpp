// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlagForBaking
  class FlagForBaking;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlagForBaking);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlagForBaking*, "", "FlagForBaking");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: FlagForBaking
  // [TokenAttribute] Offset: FFFFFFFF
  class FlagForBaking : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean enableForBaking
    // Size: 0x1
    // Offset: 0x20
    bool enableForBaking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean enableForBaking
    [[deprecated("Use field access instead!")]] bool& dyn_enableForBaking();
    // public System.Void .ctor()
    // Offset: 0x27767D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlagForBaking* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagForBaking::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlagForBaking*, creationType>()));
    }
  }; // FlagForBaking
  #pragma pack(pop)
  static check_size<sizeof(FlagForBaking), 32 + sizeof(bool)> __GlobalNamespace_FlagForBakingSizeCheck;
  static_assert(sizeof(FlagForBaking) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlagForBaking::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
