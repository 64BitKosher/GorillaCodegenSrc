// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FaceExpressionStatus, "", "OVRPlugin/FaceExpressionStatus");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/FaceExpressionStatus
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::FaceExpressionStatus/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean IsValid
    // Size: 0x1
    // Offset: 0x0
    bool IsValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsEyeFollowingBlendshapesValid
    // Size: 0x1
    // Offset: 0x1
    bool IsEyeFollowingBlendshapesValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: FaceExpressionStatus
    constexpr FaceExpressionStatus(bool IsValid_ = {}, bool IsEyeFollowingBlendshapesValid_ = {}) noexcept : IsValid{IsValid_}, IsEyeFollowingBlendshapesValid{IsEyeFollowingBlendshapesValid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean IsValid
    [[deprecated("Use field access instead!")]] bool& dyn_IsValid();
    // Get instance field reference: public System.Boolean IsEyeFollowingBlendshapesValid
    [[deprecated("Use field access instead!")]] bool& dyn_IsEyeFollowingBlendshapesValid();
  }; // OVRPlugin/FaceExpressionStatus
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::FaceExpressionStatus), 1 + sizeof(bool)> __GlobalNamespace_OVRPlugin_FaceExpressionStatusSizeCheck;
  static_assert(sizeof(OVRPlugin::FaceExpressionStatus) == 0x2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
