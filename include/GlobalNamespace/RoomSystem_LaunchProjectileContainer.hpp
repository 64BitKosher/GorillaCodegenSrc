// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RoomSystem
#include "GlobalNamespace/RoomSystem.hpp"
// Including type: RoomSystem/ImpactFxContainer
#include "GlobalNamespace/RoomSystem_ImpactFxContainer.hpp"
// Including type: RoomSystem/ProjectileSource
#include "GlobalNamespace/RoomSystem_ProjectileSource.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomSystem::LaunchProjectileContainer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystem::LaunchProjectileContainer*, "", "RoomSystem/LaunchProjectileContainer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: RoomSystem/LaunchProjectileContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomSystem::LaunchProjectileContainer : public ::GlobalNamespace::RoomSystem::ImpactFxContainer {
    public:
    public:
    // public UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public RoomSystem/ProjectileSource projectileSource
    // Size: 0x4
    // Offset: 0x44
    ::GlobalNamespace::RoomSystem::ProjectileSource projectileSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomSystem::ProjectileSource) == 0x4);
    // public System.Boolean overridecolour
    // Size: 0x1
    // Offset: 0x48
    bool overridecolour;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overridecolour and: messageInfo
    char __padding2[0x7] = {};
    // public Photon.Pun.PhotonMessageInfo messageInfo
    // Size: 0x18
    // Offset: 0x50
    ::Photon::Pun::PhotonMessageInfo messageInfo;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonMessageInfo) == 0x18);
    public:
    // Get instance field reference: public UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: public RoomSystem/ProjectileSource projectileSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomSystem::ProjectileSource& dyn_projectileSource();
    // Get instance field reference: public System.Boolean overridecolour
    [[deprecated("Use field access instead!")]] bool& dyn_overridecolour();
    // Get instance field reference: public Photon.Pun.PhotonMessageInfo messageInfo
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonMessageInfo& dyn_messageInfo();
    // public override System.Void OnPlayFX()
    // Offset: 0x2770608
    // Implemented from: RoomSystem/ImpactFxContainer
    // Base method: System.Void ImpactFxContainer::OnPlayFX()
    void OnPlayFX();
    // public System.Void .ctor()
    // Offset: 0x2770B48
    // Implemented from: RoomSystem/ImpactFxContainer
    // Base method: System.Void ImpactFxContainer::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomSystem::LaunchProjectileContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomSystem::LaunchProjectileContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomSystem::LaunchProjectileContainer*, creationType>()));
    }
  }; // RoomSystem/LaunchProjectileContainer
  #pragma pack(pop)
  static check_size<sizeof(RoomSystem::LaunchProjectileContainer), 80 + sizeof(::Photon::Pun::PhotonMessageInfo)> __GlobalNamespace_RoomSystem_LaunchProjectileContainerSizeCheck;
  static_assert(sizeof(RoomSystem::LaunchProjectileContainer) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::LaunchProjectileContainer::OnPlayFX
// Il2CppName: OnPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::LaunchProjectileContainer::*)()>(&GlobalNamespace::RoomSystem::LaunchProjectileContainer::OnPlayFX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem::LaunchProjectileContainer*), "OnPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::LaunchProjectileContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
