// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Gorillanalytics
#include "GlobalNamespace/Gorillanalytics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Gorillanalytics::UploadData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Gorillanalytics::UploadData*, "", "Gorillanalytics/UploadData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Gorillanalytics/UploadData
  // [TokenAttribute] Offset: FFFFFFFF
  class Gorillanalytics::UploadData : public ::Il2CppObject {
    public:
    public:
    // public System.String version
    // Size: 0x8
    // Offset: 0x10
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Double upload_chance
    // Size: 0x8
    // Offset: 0x18
    double upload_chance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.String map
    // Size: 0x8
    // Offset: 0x20
    ::StringW map;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String mode
    // Size: 0x8
    // Offset: 0x28
    ::StringW mode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String queue
    // Size: 0x8
    // Offset: 0x30
    ::StringW queue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 player_count
    // Size: 0x4
    // Offset: 0x38
    int player_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single pos_x
    // Size: 0x4
    // Offset: 0x3C
    float pos_x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pos_y
    // Size: 0x4
    // Offset: 0x40
    float pos_y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pos_z
    // Size: 0x4
    // Offset: 0x44
    float pos_z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single vel_x
    // Size: 0x4
    // Offset: 0x48
    float vel_x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single vel_y
    // Size: 0x4
    // Offset: 0x4C
    float vel_y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single vel_z
    // Size: 0x4
    // Offset: 0x50
    float vel_z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: vel_z and: cosmetics_owned
    char __padding11[0x4] = {};
    // public System.String cosmetics_owned
    // Size: 0x8
    // Offset: 0x58
    ::StringW cosmetics_owned;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String cosmetics_worn
    // Size: 0x8
    // Offset: 0x60
    ::StringW cosmetics_worn;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_version();
    // Get instance field reference: public System.Double upload_chance
    [[deprecated("Use field access instead!")]] double& dyn_upload_chance();
    // Get instance field reference: public System.String map
    [[deprecated("Use field access instead!")]] ::StringW& dyn_map();
    // Get instance field reference: public System.String mode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mode();
    // Get instance field reference: public System.String queue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_queue();
    // Get instance field reference: public System.Int32 player_count
    [[deprecated("Use field access instead!")]] int& dyn_player_count();
    // Get instance field reference: public System.Single pos_x
    [[deprecated("Use field access instead!")]] float& dyn_pos_x();
    // Get instance field reference: public System.Single pos_y
    [[deprecated("Use field access instead!")]] float& dyn_pos_y();
    // Get instance field reference: public System.Single pos_z
    [[deprecated("Use field access instead!")]] float& dyn_pos_z();
    // Get instance field reference: public System.Single vel_x
    [[deprecated("Use field access instead!")]] float& dyn_vel_x();
    // Get instance field reference: public System.Single vel_y
    [[deprecated("Use field access instead!")]] float& dyn_vel_y();
    // Get instance field reference: public System.Single vel_z
    [[deprecated("Use field access instead!")]] float& dyn_vel_z();
    // Get instance field reference: public System.String cosmetics_owned
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cosmetics_owned();
    // Get instance field reference: public System.String cosmetics_worn
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cosmetics_worn();
    // public System.Void .ctor()
    // Offset: 0x2711704
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gorillanalytics::UploadData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Gorillanalytics::UploadData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gorillanalytics::UploadData*, creationType>()));
    }
  }; // Gorillanalytics/UploadData
  #pragma pack(pop)
  static check_size<sizeof(Gorillanalytics::UploadData), 96 + sizeof(::StringW)> __GlobalNamespace_Gorillanalytics_UploadDataSizeCheck;
  static_assert(sizeof(Gorillanalytics::UploadData) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::UploadData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
