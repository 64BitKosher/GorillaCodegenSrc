// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BlinkingText
  class BlinkingText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BlinkingText);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BlinkingText*, "", "BlinkingText");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: BlinkingText
  // [TokenAttribute] Offset: FFFFFFFF
  class BlinkingText : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single cycleTime
    // Size: 0x4
    // Offset: 0x20
    float cycleTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dutyCycle
    // Size: 0x4
    // Offset: 0x24
    float dutyCycle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isOn
    // Size: 0x1
    // Offset: 0x28
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOn and: lastTime
    char __padding2[0x3] = {};
    // private System.Single lastTime
    // Size: 0x4
    // Offset: 0x2C
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.UI.Text textComponent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* textComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Get instance field reference: public System.Single cycleTime
    [[deprecated("Use field access instead!")]] float& dyn_cycleTime();
    // Get instance field reference: public System.Single dutyCycle
    [[deprecated("Use field access instead!")]] float& dyn_dutyCycle();
    // Get instance field reference: private System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // Get instance field reference: private System.Single lastTime
    [[deprecated("Use field access instead!")]] float& dyn_lastTime();
    // Get instance field reference: private UnityEngine.UI.Text textComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_textComponent();
    // private System.Void Awake()
    // Offset: 0x2695210
    void Awake();
    // private System.Void Update()
    // Offset: 0x2695268
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2695308
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlinkingText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlinkingText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlinkingText*, creationType>()));
    }
  }; // BlinkingText
  #pragma pack(pop)
  static check_size<sizeof(BlinkingText), 48 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_BlinkingTextSizeCheck;
  static_assert(sizeof(BlinkingText) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BlinkingText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BlinkingText::*)()>(&GlobalNamespace::BlinkingText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BlinkingText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BlinkingText::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BlinkingText::*)()>(&GlobalNamespace::BlinkingText::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BlinkingText*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BlinkingText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
