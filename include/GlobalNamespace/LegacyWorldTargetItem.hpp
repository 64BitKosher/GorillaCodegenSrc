// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegacyWorldTargetItem
  class LegacyWorldTargetItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegacyWorldTargetItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegacyWorldTargetItem*, "", "LegacyWorldTargetItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: LegacyWorldTargetItem
  // [TokenAttribute] Offset: FFFFFFFF
  class LegacyWorldTargetItem : public ::Il2CppObject {
    public:
    public:
    // public Photon.Realtime.Player owner
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* owner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Int32 itemIdx
    // Size: 0x4
    // Offset: 0x18
    int itemIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public Photon.Realtime.Player owner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_owner();
    // Get instance field reference: public System.Int32 itemIdx
    [[deprecated("Use field access instead!")]] int& dyn_itemIdx();
    // public System.Boolean IsValid()
    // Offset: 0x296C950
    bool IsValid();
    // public System.Void Invalidate()
    // Offset: 0x296C974
    void Invalidate();
    // public System.Void .ctor()
    // Offset: 0x296C988
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegacyWorldTargetItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldTargetItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegacyWorldTargetItem*, creationType>()));
    }
  }; // LegacyWorldTargetItem
  #pragma pack(pop)
  static check_size<sizeof(LegacyWorldTargetItem), 24 + sizeof(int)> __GlobalNamespace_LegacyWorldTargetItemSizeCheck;
  static_assert(sizeof(LegacyWorldTargetItem) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegacyWorldTargetItem::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyWorldTargetItem::*)()>(&GlobalNamespace::LegacyWorldTargetItem::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyWorldTargetItem*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyWorldTargetItem::Invalidate
// Il2CppName: Invalidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyWorldTargetItem::*)()>(&GlobalNamespace::LegacyWorldTargetItem::Invalidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyWorldTargetItem*), "Invalidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyWorldTargetItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
