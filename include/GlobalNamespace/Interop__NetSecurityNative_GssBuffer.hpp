// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Interop/NetSecurityNative
#include "GlobalNamespace/Interop__NetSecurityNative.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Interop_::NetSecurityNative::GssBuffer, "", "Interop/NetSecurityNative/GssBuffer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Interop/NetSecurityNative/GssBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct Interop_::NetSecurityNative::GssBuffer/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // System.UInt64 _length
    // Size: 0x8
    // Offset: 0x0
    uint64_t length;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.IntPtr _data
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr data;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: GssBuffer
    constexpr GssBuffer(uint64_t length_ = {}, ::System::IntPtr data_ = {}) noexcept : length{length_}, data{data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: System.UInt64 _length
    [[deprecated("Use field access instead!")]] uint64_t& dyn__length();
    // Get instance field reference: System.IntPtr _data
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__data();
    // System.Int32 Copy(System.Byte[] destination, System.Int32 offset)
    // Offset: 0x4BEF5C8
    int Copy(::ArrayW<uint8_t> destination, int offset);
    // System.Byte[] ToByteArray()
    // Offset: 0x4BEF748
    ::ArrayW<uint8_t> ToByteArray();
    // public System.Void Dispose()
    // Offset: 0x4BEF89C
    void Dispose();
  }; // Interop/NetSecurityNative/GssBuffer
  #pragma pack(pop)
  static check_size<sizeof(Interop_::NetSecurityNative::GssBuffer), 8 + sizeof(::System::IntPtr)> __GlobalNamespace_Interop__NetSecurityNative_GssBufferSizeCheck;
  static_assert(sizeof(Interop_::NetSecurityNative::GssBuffer) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::*)(::ArrayW<uint8_t>, int)>(&GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::Copy)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Interop_::NetSecurityNative::GssBuffer), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, offset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::*)()>(&GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::ToByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Interop_::NetSecurityNative::GssBuffer), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::*)()>(&GlobalNamespace::Interop_::NetSecurityNative::GssBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Interop_::NetSecurityNative::GssBuffer), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
