// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.ContactPoint
#include "UnityEngine/ContactPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaHandClimber
  class GorillaHandClimber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransferrableBall
  class TransferrableBall;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransferrableBall);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableBall*, "", "TransferrableBall");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TransferrableBall
  // [TokenAttribute] Offset: FFFFFFFF
  class TransferrableBall : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::TransferrableBall::$$c
    class $$c;
    public:
    // public System.Single ballRadius
    // Size: 0x4
    // Offset: 0x2CC
    float ballRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single depenetrationSpeed
    // Size: 0x4
    // Offset: 0x2D0
    float depenetrationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hitSpeedThreshold
    // Size: 0x4
    // Offset: 0x2D4
    float hitSpeedThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxHitSpeed
    // Size: 0x4
    // Offset: 0x2D8
    float maxHitSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 hitSpeedToHitMultiplierMinMax
    // Size: 0x8
    // Offset: 0x2DC
    ::UnityEngine::Vector2 hitSpeedToHitMultiplierMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.AnimationCurve hitMultiplierCurve
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::AnimationCurve* hitMultiplierCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Single hitTorqueMultiplier
    // Size: 0x4
    // Offset: 0x2F0
    float hitTorqueMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reflectOffHandAmount
    // Size: 0x4
    // Offset: 0x2F4
    float reflectOffHandAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minHitSpeedThreshold
    // Size: 0x4
    // Offset: 0x2F8
    float minHitSpeedThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single surfaceGripDistance
    // Size: 0x4
    // Offset: 0x2FC
    float surfaceGripDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 reflectOffHandSpeedInputMinMax
    // Size: 0x8
    // Offset: 0x300
    ::UnityEngine::Vector2 reflectOffHandSpeedInputMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 reflectOffHandAmountOutputMinMax
    // Size: 0x8
    // Offset: 0x308
    ::UnityEngine::Vector2 reflectOffHandAmountOutputMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public SoundBankPlayer hitSoundBank
    // Size: 0x8
    // Offset: 0x310
    ::GlobalNamespace::SoundBankPlayer* hitSoundBank;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public UnityEngine.Vector2 hitSpeedToAudioMinMax
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::Vector2 hitSpeedToAudioMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single handHitAudioMultiplier
    // Size: 0x4
    // Offset: 0x320
    float handHitAudioMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 hitSoundPitchMinMax
    // Size: 0x8
    // Offset: 0x324
    ::UnityEngine::Vector2 hitSoundPitchMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 hitSoundVolumeMinMax
    // Size: 0x8
    // Offset: 0x32C
    ::UnityEngine::Vector2 hitSoundVolumeMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Boolean allowHeadButting
    // Size: 0x1
    // Offset: 0x334
    bool allowHeadButting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single headButtRadius
    // Size: 0x4
    // Offset: 0x338
    float headButtRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single headButtHitMultiplier
    // Size: 0x4
    // Offset: 0x33C
    float headButtHitMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single gravityCounterAmount
    // Size: 0x4
    // Offset: 0x340
    float gravityCounterAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean debugDraw
    // Size: 0x1
    // Offset: 0x344
    bool debugDraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Dictionary`2<GorillaLocomotion.Climbing.GorillaHandClimber,System.Int32> handClimberMap
    // Size: 0x8
    // Offset: 0x348
    ::System::Collections::Generic::Dictionary_2<::GorillaLocomotion::Climbing::GorillaHandClimber*, int>* handClimberMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GorillaLocomotion::Climbing::GorillaHandClimber*, int>*) == 0x8);
    // private UnityEngine.SphereCollider playerHeadCollider
    // Size: 0x8
    // Offset: 0x350
    ::UnityEngine::SphereCollider* playerHeadCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // private UnityEngine.ContactPoint[] collisionContacts
    // Size: 0x8
    // Offset: 0x358
    ::ArrayW<::UnityEngine::ContactPoint> collisionContacts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ContactPoint>) == 0x8);
    // private System.Int32 collisionContactsCount
    // Size: 0x4
    // Offset: 0x360
    int collisionContactsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single handRadius
    // Size: 0x4
    // Offset: 0x364
    float handRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single depenetrationBias
    // Size: 0x4
    // Offset: 0x368
    float depenetrationBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean leftHandOverlapping
    // Size: 0x1
    // Offset: 0x36C
    bool leftHandOverlapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rightHandOverlapping
    // Size: 0x1
    // Offset: 0x36D
    bool rightHandOverlapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean headOverlapping
    // Size: 0x1
    // Offset: 0x36E
    bool headOverlapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean onGround
    // Size: 0x1
    // Offset: 0x36F
    bool onGround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.ContactPoint groundContact
    // Size: 0x30
    // Offset: 0x370
    ::UnityEngine::ContactPoint groundContact;
    // Field size check
    static_assert(sizeof(::UnityEngine::ContactPoint) == 0x30);
    // private System.Boolean applyFrictionHolding
    // Size: 0x1
    // Offset: 0x3A0
    bool applyFrictionHolding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 frictionHoldLocalPosLeft
    // Size: 0xC
    // Offset: 0x3A4
    ::UnityEngine::Vector3 frictionHoldLocalPosLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion frictionHoldLocalRotLeft
    // Size: 0x10
    // Offset: 0x3B0
    ::UnityEngine::Quaternion frictionHoldLocalRotLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 frictionHoldLocalPosRight
    // Size: 0xC
    // Offset: 0x3C0
    ::UnityEngine::Vector3 frictionHoldLocalPosRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion frictionHoldLocalRotRight
    // Size: 0x10
    // Offset: 0x3CC
    ::UnityEngine::Quaternion frictionHoldLocalRotRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single hitSoundSpamLastHitTime
    // Size: 0x4
    // Offset: 0x3DC
    float hitSoundSpamLastHitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 hitSoundSpamCount
    // Size: 0x4
    // Offset: 0x3E0
    int hitSoundSpamCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 hitSoundSpamLimit
    // Size: 0x4
    // Offset: 0x3E4
    int hitSoundSpamLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single hitSoundSpamCooldownResetTime
    // Size: 0x4
    // Offset: 0x3E8
    float hitSoundSpamCooldownResetTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.String gorillaHeadTriggerTag
    // Size: 0x8
    // Offset: 0x3F0
    ::StringW gorillaHeadTriggerTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Single ballRadius
    [[deprecated("Use field access instead!")]] float& dyn_ballRadius();
    // Get instance field reference: public System.Single depenetrationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_depenetrationSpeed();
    // Get instance field reference: public System.Single hitSpeedThreshold
    [[deprecated("Use field access instead!")]] float& dyn_hitSpeedThreshold();
    // Get instance field reference: public System.Single maxHitSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxHitSpeed();
    // Get instance field reference: public UnityEngine.Vector2 hitSpeedToHitMultiplierMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_hitSpeedToHitMultiplierMinMax();
    // Get instance field reference: public UnityEngine.AnimationCurve hitMultiplierCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_hitMultiplierCurve();
    // Get instance field reference: public System.Single hitTorqueMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_hitTorqueMultiplier();
    // Get instance field reference: public System.Single reflectOffHandAmount
    [[deprecated("Use field access instead!")]] float& dyn_reflectOffHandAmount();
    // Get instance field reference: public System.Single minHitSpeedThreshold
    [[deprecated("Use field access instead!")]] float& dyn_minHitSpeedThreshold();
    // Get instance field reference: public System.Single surfaceGripDistance
    [[deprecated("Use field access instead!")]] float& dyn_surfaceGripDistance();
    // Get instance field reference: public UnityEngine.Vector2 reflectOffHandSpeedInputMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_reflectOffHandSpeedInputMinMax();
    // Get instance field reference: public UnityEngine.Vector2 reflectOffHandAmountOutputMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_reflectOffHandAmountOutputMinMax();
    // Get instance field reference: public SoundBankPlayer hitSoundBank
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_hitSoundBank();
    // Get instance field reference: public UnityEngine.Vector2 hitSpeedToAudioMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_hitSpeedToAudioMinMax();
    // Get instance field reference: public System.Single handHitAudioMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_handHitAudioMultiplier();
    // Get instance field reference: public UnityEngine.Vector2 hitSoundPitchMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_hitSoundPitchMinMax();
    // Get instance field reference: public UnityEngine.Vector2 hitSoundVolumeMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_hitSoundVolumeMinMax();
    // Get instance field reference: public System.Boolean allowHeadButting
    [[deprecated("Use field access instead!")]] bool& dyn_allowHeadButting();
    // Get instance field reference: public System.Single headButtRadius
    [[deprecated("Use field access instead!")]] float& dyn_headButtRadius();
    // Get instance field reference: public System.Single headButtHitMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_headButtHitMultiplier();
    // Get instance field reference: public System.Single gravityCounterAmount
    [[deprecated("Use field access instead!")]] float& dyn_gravityCounterAmount();
    // Get instance field reference: public System.Boolean debugDraw
    [[deprecated("Use field access instead!")]] bool& dyn_debugDraw();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<GorillaLocomotion.Climbing.GorillaHandClimber,System.Int32> handClimberMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GorillaLocomotion::Climbing::GorillaHandClimber*, int>*& dyn_handClimberMap();
    // Get instance field reference: private UnityEngine.SphereCollider playerHeadCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_playerHeadCollider();
    // Get instance field reference: private UnityEngine.ContactPoint[] collisionContacts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint>& dyn_collisionContacts();
    // Get instance field reference: private System.Int32 collisionContactsCount
    [[deprecated("Use field access instead!")]] int& dyn_collisionContactsCount();
    // Get instance field reference: private System.Single handRadius
    [[deprecated("Use field access instead!")]] float& dyn_handRadius();
    // Get instance field reference: private System.Single depenetrationBias
    [[deprecated("Use field access instead!")]] float& dyn_depenetrationBias();
    // Get instance field reference: private System.Boolean leftHandOverlapping
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandOverlapping();
    // Get instance field reference: private System.Boolean rightHandOverlapping
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandOverlapping();
    // Get instance field reference: private System.Boolean headOverlapping
    [[deprecated("Use field access instead!")]] bool& dyn_headOverlapping();
    // Get instance field reference: private System.Boolean onGround
    [[deprecated("Use field access instead!")]] bool& dyn_onGround();
    // Get instance field reference: private UnityEngine.ContactPoint groundContact
    [[deprecated("Use field access instead!")]] ::UnityEngine::ContactPoint& dyn_groundContact();
    // Get instance field reference: private System.Boolean applyFrictionHolding
    [[deprecated("Use field access instead!")]] bool& dyn_applyFrictionHolding();
    // Get instance field reference: private UnityEngine.Vector3 frictionHoldLocalPosLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_frictionHoldLocalPosLeft();
    // Get instance field reference: private UnityEngine.Quaternion frictionHoldLocalRotLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_frictionHoldLocalRotLeft();
    // Get instance field reference: private UnityEngine.Vector3 frictionHoldLocalPosRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_frictionHoldLocalPosRight();
    // Get instance field reference: private UnityEngine.Quaternion frictionHoldLocalRotRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_frictionHoldLocalRotRight();
    // Get instance field reference: private System.Single hitSoundSpamLastHitTime
    [[deprecated("Use field access instead!")]] float& dyn_hitSoundSpamLastHitTime();
    // Get instance field reference: private System.Int32 hitSoundSpamCount
    [[deprecated("Use field access instead!")]] int& dyn_hitSoundSpamCount();
    // Get instance field reference: private System.Int32 hitSoundSpamLimit
    [[deprecated("Use field access instead!")]] int& dyn_hitSoundSpamLimit();
    // Get instance field reference: private System.Single hitSoundSpamCooldownResetTime
    [[deprecated("Use field access instead!")]] float& dyn_hitSoundSpamCooldownResetTime();
    // Get instance field reference: private System.String gorillaHeadTriggerTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gorillaHeadTriggerTag();
    // private System.Void TakeOwnershipAndEnablePhysics()
    // Offset: 0x26C09E4
    void TakeOwnershipAndEnablePhysics();
    // private System.Boolean CheckCollisionWithHand(UnityEngine.Vector3 handCenter, UnityEngine.Quaternion handRotation, UnityEngine.Vector3 palmForward, out UnityEngine.Vector3 hitPoint, out UnityEngine.Vector3 hitNormal, out System.Single penetrationDist)
    // Offset: 0x26BFC00
    bool CheckCollisionWithHand(::UnityEngine::Vector3 handCenter, ::UnityEngine::Quaternion handRotation, ::UnityEngine::Vector3 palmForward, ByRef<::UnityEngine::Vector3> hitPoint, ByRef<::UnityEngine::Vector3> hitNormal, ByRef<float> penetrationDist);
    // private System.Boolean CheckCollisionWithHead(UnityEngine.SphereCollider headCollider, out UnityEngine.Vector3 hitPoint, out UnityEngine.Vector3 hitNormal, out System.Single penetrationDist)
    // Offset: 0x26C0844
    bool CheckCollisionWithHead(::UnityEngine::SphereCollider* headCollider, ByRef<::UnityEngine::Vector3> hitPoint, ByRef<::UnityEngine::Vector3> hitNormal, ByRef<float> penetrationDist);
    // private System.Boolean ApplyHit(UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitDir, System.Single hitSpeed)
    // Offset: 0x26C0180
    bool ApplyHit(::UnityEngine::Vector3 hitPoint, ::UnityEngine::Vector3 hitDir, float hitSpeed);
    // private System.Void PlayHitSound(System.Single hitSpeed)
    // Offset: 0x26C0B64
    void PlayHitSound(float hitSpeed);
    // private System.Void FixedUpdate()
    // Offset: 0x26C0CD8
    void FixedUpdate();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x26C0D6C
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x26C0F48
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x26C1078
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void OnCollisionStay(UnityEngine.Collision collision)
    // Offset: 0x26C1114
    void OnCollisionStay(::UnityEngine::Collision* collision);
    // public override System.Void LateUpdate()
    // Offset: 0x26BDBFC
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdate()
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26C125C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferrableBall* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferrableBall*, creationType>()));
    }
  }; // TransferrableBall
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::TakeOwnershipAndEnablePhysics
// Il2CppName: TakeOwnershipAndEnablePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)()>(&GlobalNamespace::TransferrableBall::TakeOwnershipAndEnablePhysics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "TakeOwnershipAndEnablePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::CheckCollisionWithHand
// Il2CppName: CheckCollisionWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&GlobalNamespace::TransferrableBall::CheckCollisionWithHand)> {
  static const MethodInfo* get() {
    static auto* handCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* handRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* palmForward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hitNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* penetrationDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "CheckCollisionWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handCenter, handRotation, palmForward, hitPoint, hitNormal, penetrationDist});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::CheckCollisionWithHead
// Il2CppName: CheckCollisionWithHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableBall::*)(::UnityEngine::SphereCollider*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&GlobalNamespace::TransferrableBall::CheckCollisionWithHead)> {
  static const MethodInfo* get() {
    static auto* headCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "SphereCollider")->byval_arg;
    static auto* hitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hitNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* penetrationDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "CheckCollisionWithHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headCollider, hitPoint, hitNormal, penetrationDist});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::ApplyHit
// Il2CppName: ApplyHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::TransferrableBall::ApplyHit)> {
  static const MethodInfo* get() {
    static auto* hitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "ApplyHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPoint, hitDir, hitSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::PlayHitSound
// Il2CppName: PlayHitSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)(float)>(&GlobalNamespace::TransferrableBall::PlayHitSound)> {
  static const MethodInfo* get() {
    static auto* hitSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "PlayHitSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)()>(&GlobalNamespace::TransferrableBall::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Collider*)>(&GlobalNamespace::TransferrableBall::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Collider*)>(&GlobalNamespace::TransferrableBall::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Collision*)>(&GlobalNamespace::TransferrableBall::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::OnCollisionStay
// Il2CppName: OnCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)(::UnityEngine::Collision*)>(&GlobalNamespace::TransferrableBall::OnCollisionStay)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "OnCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableBall::*)()>(&GlobalNamespace::TransferrableBall::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableBall*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableBall::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
