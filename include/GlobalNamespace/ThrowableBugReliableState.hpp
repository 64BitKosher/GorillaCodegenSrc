// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBugReliableState
  class ThrowableBugReliableState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThrowableBugReliableState);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBugReliableState*, "", "ThrowableBugReliableState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: ThrowableBugReliableState
  // [TokenAttribute] Offset: FFFFFFFF
  class ThrowableBugReliableState : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IRequestableOwnershipGuardCallbacks, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public UnityEngine.Vector3 travelingDirection
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 travelingDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks
    operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 travelingDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_travelingDirection();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x27A5480
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnOwnershipTransferred(Photon.Realtime.Player toPlayer, Photon.Realtime.Player fromPlayer)
    // Offset: 0x27A554C
    void OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer);
    // public System.Boolean OnOwnershipRequest(Photon.Realtime.Player fromPlayer)
    // Offset: 0x27A5584
    bool OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer);
    // public System.Void OnMyOwnerLeft()
    // Offset: 0x27A55BC
    void OnMyOwnerLeft();
    // public System.Boolean OnMasterClientAssistedTakeoverRequest(Photon.Realtime.Player fromPlayer, Photon.Realtime.Player toPlayer)
    // Offset: 0x27A55F4
    bool OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer);
    // public System.Void OnMyCreatorLeft()
    // Offset: 0x27A562C
    void OnMyCreatorLeft();
    // public System.Void .ctor()
    // Offset: 0x27A5664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThrowableBugReliableState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThrowableBugReliableState*, creationType>()));
    }
  }; // ThrowableBugReliableState
  #pragma pack(pop)
  static check_size<sizeof(ThrowableBugReliableState), 32 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_ThrowableBugReliableStateSizeCheck;
  static_assert(sizeof(ThrowableBugReliableState) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugReliableState::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::ThrowableBugReliableState::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnOwnershipTransferred
// Il2CppName: OnOwnershipTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugReliableState::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::ThrowableBugReliableState::OnOwnershipTransferred)> {
  static const MethodInfo* get() {
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnOwnershipTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toPlayer, fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnOwnershipRequest
// Il2CppName: OnOwnershipRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ThrowableBugReliableState::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::ThrowableBugReliableState::OnOwnershipRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnOwnershipRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnMyOwnerLeft
// Il2CppName: OnMyOwnerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugReliableState::*)()>(&GlobalNamespace::ThrowableBugReliableState::OnMyOwnerLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnMyOwnerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnMasterClientAssistedTakeoverRequest
// Il2CppName: OnMasterClientAssistedTakeoverRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ThrowableBugReliableState::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::ThrowableBugReliableState::OnMasterClientAssistedTakeoverRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnMasterClientAssistedTakeoverRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer, toPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::OnMyCreatorLeft
// Il2CppName: OnMyCreatorLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugReliableState::*)()>(&GlobalNamespace::ThrowableBugReliableState::OnMyCreatorLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugReliableState*), "OnMyCreatorLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugReliableState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
