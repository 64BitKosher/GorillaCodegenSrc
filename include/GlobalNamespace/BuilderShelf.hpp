// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderTable
  class BuilderTable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderShelf
  class BuilderShelf;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderShelf);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderShelf*, "", "BuilderShelf");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BuilderShelf
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderShelf : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BuilderShelf::BuildPieceSpawn
    class BuildPieceSpawn;
    public:
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single separation
    // Size: 0x4
    // Offset: 0x24
    float separation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform center
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Material overrideMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* overrideMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderShelf/BuildPieceSpawn> buildPieceSpawns
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf::BuildPieceSpawn*>* buildPieceSpawns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf::BuildPieceSpawn*>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public System.Single separation
    [[deprecated("Use field access instead!")]] float& dyn_separation();
    // Get instance field reference: public UnityEngine.Transform center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_center();
    // Get instance field reference: public UnityEngine.Material overrideMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_overrideMaterial();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderShelf/BuildPieceSpawn> buildPieceSpawns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf::BuildPieceSpawn*>*& dyn_buildPieceSpawns();
    // public System.Void BuildItems(GorillaTagScripts.BuilderTable table)
    // Offset: 0x26EE7EC
    void BuildItems(::GorillaTagScripts::BuilderTable* table);
    // public System.Void GetSpawnLocation(System.Int32 slot, BuilderShelf/BuildPieceSpawn spawn, out UnityEngine.Vector3 spawnPosition, out UnityEngine.Quaternion spawnRotation)
    // Offset: 0x26EE9D0
    void GetSpawnLocation(int slot, ::GlobalNamespace::BuilderShelf::BuildPieceSpawn* spawn, ByRef<::UnityEngine::Vector3> spawnPosition, ByRef<::UnityEngine::Quaternion> spawnRotation);
    // public System.Void .ctor()
    // Offset: 0x26EEBF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderShelf* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderShelf::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderShelf*, creationType>()));
    }
  }; // BuilderShelf
  #pragma pack(pop)
  static check_size<sizeof(BuilderShelf), 56 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf::BuildPieceSpawn*>*)> __GlobalNamespace_BuilderShelfSizeCheck;
  static_assert(sizeof(BuilderShelf) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderShelf::BuildItems
// Il2CppName: BuildItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderShelf::*)(::GorillaTagScripts::BuilderTable*)>(&GlobalNamespace::BuilderShelf::BuildItems)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderShelf*), "BuildItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderShelf::GetSpawnLocation
// Il2CppName: GetSpawnLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderShelf::*)(int, ::GlobalNamespace::BuilderShelf::BuildPieceSpawn*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&GlobalNamespace::BuilderShelf::GetSpawnLocation)> {
  static const MethodInfo* get() {
    static auto* slot = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* spawn = &::il2cpp_utils::GetClassFromName("", "BuilderShelf/BuildPieceSpawn")->byval_arg;
    static auto* spawnPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* spawnRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderShelf*), "GetSpawnLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slot, spawn, spawnPosition, spawnRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderShelf::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
