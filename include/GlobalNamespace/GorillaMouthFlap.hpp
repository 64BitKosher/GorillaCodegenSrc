// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MouthFlapLevel
#include "GlobalNamespace/MouthFlapLevel.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaSpeakerLoudness
  class GorillaSpeakerLoudness;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaMouthFlap
  class GorillaMouthFlap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaMouthFlap);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaMouthFlap*, "", "GorillaMouthFlap");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaMouthFlap
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaMouthFlap : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject targetFace
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* targetFace;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public MouthFlapLevel[] mouthFlapLevels
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::MouthFlapLevel> mouthFlapLevels;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MouthFlapLevel>) == 0x8);
    // public MouthFlapLevel noMicFace
    // Size: 0x14
    // Offset: 0x30
    ::GlobalNamespace::MouthFlapLevel noMicFace;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MouthFlapLevel) == 0x14);
    // Padding between fields: noMicFace and: useMicEnabled
    char __padding2[0x4] = {};
    // private System.Boolean useMicEnabled
    // Size: 0x1
    // Offset: 0x48
    bool useMicEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useMicEnabled and: activeFlipbookIndex
    char __padding3[0x3] = {};
    // private System.Int32 activeFlipbookIndex
    // Size: 0x4
    // Offset: 0x4C
    int activeFlipbookIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single activeFlipbookPlayTime
    // Size: 0x4
    // Offset: 0x50
    float activeFlipbookPlayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: activeFlipbookPlayTime and: speaker
    char __padding5[0x4] = {};
    // private GorillaSpeakerLoudness speaker
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::GorillaSpeakerLoudness* speaker;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSpeakerLoudness*) == 0x8);
    // private ShaderHashId _MouthMap
    // Size: 0xC
    // Offset: 0x60
    ::GlobalNamespace::ShaderHashId MouthMap;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.GameObject targetFace
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_targetFace();
    // Get instance field reference: public MouthFlapLevel[] mouthFlapLevels
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MouthFlapLevel>& dyn_mouthFlapLevels();
    // Get instance field reference: public MouthFlapLevel noMicFace
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MouthFlapLevel& dyn_noMicFace();
    // Get instance field reference: private System.Boolean useMicEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_useMicEnabled();
    // Get instance field reference: private System.Int32 activeFlipbookIndex
    [[deprecated("Use field access instead!")]] int& dyn_activeFlipbookIndex();
    // Get instance field reference: private System.Single activeFlipbookPlayTime
    [[deprecated("Use field access instead!")]] float& dyn_activeFlipbookPlayTime();
    // Get instance field reference: private GorillaSpeakerLoudness speaker
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& dyn_speaker();
    // Get instance field reference: private ShaderHashId _MouthMap
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__MouthMap();
    // private System.Void Start()
    // Offset: 0x2710960
    void Start();
    // public System.Void InvokeUpdate()
    // Offset: 0x27109B8
    void InvokeUpdate();
    // private System.Void CheckMouthflapChange(System.Boolean isMicEnabled, System.Single currentLoudness)
    // Offset: 0x2710AFC
    void CheckMouthflapChange(bool isMicEnabled, float currentLoudness);
    // private System.Void UpdateMouthFlapFlipbook(MouthFlapLevel mouthFlap)
    // Offset: 0x2710B88
    void UpdateMouthFlapFlipbook(::GlobalNamespace::MouthFlapLevel mouthFlap);
    // public System.Void .ctor()
    // Offset: 0x2710CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaMouthFlap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMouthFlap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaMouthFlap*, creationType>()));
    }
  }; // GorillaMouthFlap
  #pragma pack(pop)
  static check_size<sizeof(GorillaMouthFlap), 96 + sizeof(::GlobalNamespace::ShaderHashId)> __GlobalNamespace_GorillaMouthFlapSizeCheck;
  static_assert(sizeof(GorillaMouthFlap) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaMouthFlap::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMouthFlap::*)()>(&GlobalNamespace::GorillaMouthFlap::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMouthFlap*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMouthFlap::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMouthFlap::*)()>(&GlobalNamespace::GorillaMouthFlap::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMouthFlap*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMouthFlap::CheckMouthflapChange
// Il2CppName: CheckMouthflapChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMouthFlap::*)(bool, float)>(&GlobalNamespace::GorillaMouthFlap::CheckMouthflapChange)> {
  static const MethodInfo* get() {
    static auto* isMicEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* currentLoudness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMouthFlap*), "CheckMouthflapChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMicEnabled, currentLoudness});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMouthFlap::UpdateMouthFlapFlipbook
// Il2CppName: UpdateMouthFlapFlipbook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMouthFlap::*)(::GlobalNamespace::MouthFlapLevel)>(&GlobalNamespace::GorillaMouthFlap::UpdateMouthFlapFlipbook)> {
  static const MethodInfo* get() {
    static auto* mouthFlap = &::il2cpp_utils::GetClassFromName("", "MouthFlapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMouthFlap*), "UpdateMouthFlapFlipbook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouthFlap});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMouthFlap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
