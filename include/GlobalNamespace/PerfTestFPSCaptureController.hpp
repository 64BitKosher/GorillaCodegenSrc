// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SerializablePerformanceReport`1<T>
  template<typename T>
  class SerializablePerformanceReport_1;
  // Forward declaring type: ScenePerformanceData
  class ScenePerformanceData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PerfTestFPSCaptureController
  class PerfTestFPSCaptureController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PerfTestFPSCaptureController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PerfTestFPSCaptureController*, "", "PerfTestFPSCaptureController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: PerfTestFPSCaptureController
  // [TokenAttribute] Offset: FFFFFFFF
  // [GTStripGameObjectFromBuildAttribute] Offset: FFFFFFFF
  class PerfTestFPSCaptureController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private SerializablePerformanceReport`1<ScenePerformanceData> performanceSummary
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::SerializablePerformanceReport_1<::GlobalNamespace::ScenePerformanceData*>* performanceSummary;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SerializablePerformanceReport_1<::GlobalNamespace::ScenePerformanceData*>*) == 0x8);
    // public System.Single captureWaitTime
    // Size: 0x4
    // Offset: 0x28
    float captureWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private SerializablePerformanceReport`1<ScenePerformanceData> performanceSummary
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SerializablePerformanceReport_1<::GlobalNamespace::ScenePerformanceData*>*& dyn_performanceSummary();
    // Get instance field reference: public System.Single captureWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_captureWaitTime();
    // public System.Void .ctor()
    // Offset: 0x289D654
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PerfTestFPSCaptureController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerfTestFPSCaptureController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PerfTestFPSCaptureController*, creationType>()));
    }
  }; // PerfTestFPSCaptureController
  #pragma pack(pop)
  static check_size<sizeof(PerfTestFPSCaptureController), 40 + sizeof(float)> __GlobalNamespace_PerfTestFPSCaptureControllerSizeCheck;
  static_assert(sizeof(PerfTestFPSCaptureController) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PerfTestFPSCaptureController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
