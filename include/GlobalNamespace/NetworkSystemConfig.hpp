// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkSystemConfig
  struct NetworkSystemConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkSystemConfig, "", "NetworkSystemConfig");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: NetworkSystemConfig
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkSystemConfig/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 MaxPlayerCount
    // Size: 0x4
    // Offset: 0x0
    int MaxPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetworkSystemConfig
    constexpr NetworkSystemConfig(int MaxPlayerCount_ = {}) noexcept : MaxPlayerCount{MaxPlayerCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return MaxPlayerCount;
    }
    // Get static field: static private System.String gameVersionType
    static ::StringW _get_gameVersionType();
    // Set static field: static private System.String gameVersionType
    static void _set_gameVersionType(::StringW value);
    // Get static field: static public System.Int32 majorVersion
    static int _get_majorVersion();
    // Set static field: static public System.Int32 majorVersion
    static void _set_majorVersion(int value);
    // Get static field: static public System.Int32 minorVersion
    static int _get_minorVersion();
    // Set static field: static public System.Int32 minorVersion
    static void _set_minorVersion(int value);
    // Get static field: static public System.Int32 minorVersion2
    static int _get_minorVersion2();
    // Set static field: static public System.Int32 minorVersion2
    static void _set_minorVersion2(int value);
    // Get static field: static public System.String GameVersionString
    static ::StringW _get_GameVersionString();
    // Set static field: static public System.String GameVersionString
    static void _set_GameVersionString(::StringW value);
    // Get instance field reference: public System.Int32 MaxPlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_MaxPlayerCount();
    // static public System.String get_AppVersion()
    // Offset: 0x290F354
    static ::StringW get_AppVersion();
    // static public System.String get_BundleVersion()
    // Offset: 0x290F514
    static ::StringW get_BundleVersion();
    // static public System.String get_GameVersionType()
    // Offset: 0x290F68C
    static ::StringW get_GameVersionType();
    // static public System.Int32 get_GameMajorVersion()
    // Offset: 0x290F6E4
    static int get_GameMajorVersion();
    // static public System.Int32 get_GameMinorVersion()
    // Offset: 0x290F73C
    static int get_GameMinorVersion();
    // static public System.Int32 get_GameMinorVersion2()
    // Offset: 0x290F794
    static int get_GameMinorVersion2();
    // static private System.Void .cctor()
    // Offset: 0x290F7EC
    static void _cctor();
  }; // NetworkSystemConfig
  #pragma pack(pop)
  static check_size<sizeof(NetworkSystemConfig), 0 + sizeof(int)> __GlobalNamespace_NetworkSystemConfigSizeCheck;
  static_assert(sizeof(NetworkSystemConfig) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_AppVersion
// Il2CppName: get_AppVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::NetworkSystemConfig::get_AppVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_AppVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_BundleVersion
// Il2CppName: get_BundleVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::NetworkSystemConfig::get_BundleVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_BundleVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_GameVersionType
// Il2CppName: get_GameVersionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::NetworkSystemConfig::get_GameVersionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_GameVersionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_GameMajorVersion
// Il2CppName: get_GameMajorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::NetworkSystemConfig::get_GameMajorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_GameMajorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_GameMinorVersion
// Il2CppName: get_GameMinorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::NetworkSystemConfig::get_GameMinorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_GameMinorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::get_GameMinorVersion2
// Il2CppName: get_GameMinorVersion2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::NetworkSystemConfig::get_GameMinorVersion2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), "get_GameMinorVersion2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystemConfig::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::NetworkSystemConfig::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystemConfig), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
