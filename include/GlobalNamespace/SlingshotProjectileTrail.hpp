// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TrailRenderer
  class TrailRenderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectileTrail
  class SlingshotProjectileTrail;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlingshotProjectileTrail);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlingshotProjectileTrail*, "", "SlingshotProjectileTrail");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: SlingshotProjectileTrail
  // [TokenAttribute] Offset: FFFFFFFF
  class SlingshotProjectileTrail : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.TrailRenderer trailRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::TrailRenderer* trailRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::TrailRenderer*) == 0x8);
    // public UnityEngine.Color defaultColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color orangeColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color orangeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color blueColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color blueColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.GameObject followObject
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* followObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform followXform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* followXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single timeToDie
    // Size: 0x4
    // Offset: 0x68
    float timeToDie;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialScale
    // Size: 0x4
    // Offset: 0x6C
    float initialScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialWidthMultiplier
    // Size: 0x4
    // Offset: 0x70
    float initialWidthMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.TrailRenderer trailRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::TrailRenderer*& dyn_trailRenderer();
    // Get instance field reference: public UnityEngine.Color defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_defaultColor();
    // Get instance field reference: public UnityEngine.Color orangeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_orangeColor();
    // Get instance field reference: public UnityEngine.Color blueColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_blueColor();
    // Get instance field reference: private UnityEngine.GameObject followObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_followObject();
    // Get instance field reference: private UnityEngine.Transform followXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_followXform();
    // Get instance field reference: private System.Single timeToDie
    [[deprecated("Use field access instead!")]] float& dyn_timeToDie();
    // Get instance field reference: private System.Single initialScale
    [[deprecated("Use field access instead!")]] float& dyn_initialScale();
    // Get instance field reference: private System.Single initialWidthMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_initialWidthMultiplier();
    // private System.Void Awake()
    // Offset: 0x29728B8
    void Awake();
    // public System.Void AttachTrail(UnityEngine.GameObject obj, System.Boolean blueTeam, System.Boolean redTeam)
    // Offset: 0x296E664
    void AttachTrail(::UnityEngine::GameObject* obj, bool blueTeam, bool redTeam);
    // protected System.Void LateUpdate()
    // Offset: 0x297293C
    void LateUpdate();
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x29728E0
    void SetColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x2972AE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlingshotProjectileTrail* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlingshotProjectileTrail*, creationType>()));
    }
  }; // SlingshotProjectileTrail
  #pragma pack(pop)
  static check_size<sizeof(SlingshotProjectileTrail), 112 + sizeof(float)> __GlobalNamespace_SlingshotProjectileTrailSizeCheck;
  static_assert(sizeof(SlingshotProjectileTrail) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileTrail::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileTrail::*)()>(&GlobalNamespace::SlingshotProjectileTrail::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileTrail*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileTrail::AttachTrail
// Il2CppName: AttachTrail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileTrail::*)(::UnityEngine::GameObject*, bool, bool)>(&GlobalNamespace::SlingshotProjectileTrail::AttachTrail)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* blueTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* redTeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileTrail*), "AttachTrail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, blueTeam, redTeam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileTrail::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileTrail::*)()>(&GlobalNamespace::SlingshotProjectileTrail::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileTrail*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileTrail::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileTrail::*)(::UnityEngine::Color)>(&GlobalNamespace::SlingshotProjectileTrail::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileTrail*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileTrail::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
