// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin::OVRP_1_86_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::OVRP_1_86_0*, "", "OVRPlugin/OVRP_1_86_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/OVRP_1_86_0
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPlugin::OVRP_1_86_0 : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Version version
    static ::System::Version* _get_version();
    // Set static field: static public readonly System.Version version
    static void _set_version(::System::Version* value);
    // static public OVRPlugin/Result ovrp_SetControllerDrivenHandPoses(OVRPlugin/Bool controllerDrivenHandPoses)
    // Offset: 0x49173DC
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetControllerDrivenHandPoses(::GlobalNamespace::OVRPlugin::Bool controllerDrivenHandPoses);
    // static public OVRPlugin/Result ovrp_IsControllerDrivenHandPosesEnabled(ref OVRPlugin/Bool enabled)
    // Offset: 0x4917458
    static ::GlobalNamespace::OVRPlugin::Result ovrp_IsControllerDrivenHandPosesEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> enabled);
    // static public OVRPlugin/Result ovrp_AreHandPosesGeneratedByControllerData(OVRPlugin/Step stepId, OVRPlugin/Node nodeId, ref OVRPlugin/Bool isGeneratedByControllerData)
    // Offset: 0x49174D4
    static ::GlobalNamespace::OVRPlugin::Result ovrp_AreHandPosesGeneratedByControllerData(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Bool> isGeneratedByControllerData);
    // static public OVRPlugin/Result ovrp_SetMultimodalHandsControllersSupported(OVRPlugin/Bool supported)
    // Offset: 0x4917568
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetMultimodalHandsControllersSupported(::GlobalNamespace::OVRPlugin::Bool supported);
    // static public OVRPlugin/Result ovrp_IsMultimodalHandsControllersSupported(ref OVRPlugin/Bool supported)
    // Offset: 0x49175E4
    static ::GlobalNamespace::OVRPlugin::Result ovrp_IsMultimodalHandsControllersSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> supported);
    // static public OVRPlugin/Result ovrp_GetCurrentDetachedInteractionProfile(OVRPlugin/Hand hand, out OVRPlugin/InteractionProfile interactionProfile)
    // Offset: 0x4917660
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetCurrentDetachedInteractionProfile(::GlobalNamespace::OVRPlugin::Hand hand, ByRef<::GlobalNamespace::OVRPlugin::InteractionProfile> interactionProfile);
    // static public OVRPlugin/Result ovrp_GetControllerIsInHand(OVRPlugin/Step stepId, OVRPlugin/Node nodeId, ref OVRPlugin/Bool isInHand)
    // Offset: 0x49176E4
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetControllerIsInHand(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Bool> isInHand);
    // static private System.Void .cctor()
    // Offset: 0x4917778
    static void _cctor();
  }; // OVRPlugin/OVRP_1_86_0
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_SetControllerDrivenHandPoses
// Il2CppName: ovrp_SetControllerDrivenHandPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_SetControllerDrivenHandPoses)> {
  static const MethodInfo* get() {
    static auto* controllerDrivenHandPoses = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_SetControllerDrivenHandPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerDrivenHandPoses});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_IsControllerDrivenHandPosesEnabled
// Il2CppName: ovrp_IsControllerDrivenHandPosesEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_IsControllerDrivenHandPosesEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_IsControllerDrivenHandPosesEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_AreHandPosesGeneratedByControllerData
// Il2CppName: ovrp_AreHandPosesGeneratedByControllerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Node, ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_AreHandPosesGeneratedByControllerData)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* isGeneratedByControllerData = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_AreHandPosesGeneratedByControllerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, nodeId, isGeneratedByControllerData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_SetMultimodalHandsControllersSupported
// Il2CppName: ovrp_SetMultimodalHandsControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_SetMultimodalHandsControllersSupported)> {
  static const MethodInfo* get() {
    static auto* supported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_SetMultimodalHandsControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{supported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_IsMultimodalHandsControllersSupported
// Il2CppName: ovrp_IsMultimodalHandsControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_IsMultimodalHandsControllersSupported)> {
  static const MethodInfo* get() {
    static auto* supported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_IsMultimodalHandsControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{supported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_GetCurrentDetachedInteractionProfile
// Il2CppName: ovrp_GetCurrentDetachedInteractionProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Hand, ByRef<::GlobalNamespace::OVRPlugin::InteractionProfile>)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_GetCurrentDetachedInteractionProfile)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    static auto* interactionProfile = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InteractionProfile")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_GetCurrentDetachedInteractionProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, interactionProfile});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_GetControllerIsInHand
// Il2CppName: ovrp_GetControllerIsInHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Node, ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::ovrp_GetControllerIsInHand)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* isInHand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), "ovrp_GetControllerIsInHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, nodeId, isInHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_86_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_86_0::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_86_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
