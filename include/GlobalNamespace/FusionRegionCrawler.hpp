// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Fusion.INetworkRunnerCallbacks
#include "Fusion/INetworkRunnerCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: SessionInfo
  class SessionInfo;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: NetworkInput
  struct NetworkInput;
  // Forward declaring type: ShutdownReason
  struct ShutdownReason;
  // Forward declaring type: SimulationMessagePtr
  struct SimulationMessagePtr;
  // Forward declaring type: HostMigrationToken
  class HostMigrationToken;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionRegionCrawler
  class FusionRegionCrawler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionRegionCrawler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionRegionCrawler*, "", "FusionRegionCrawler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: FusionRegionCrawler
  // [TokenAttribute] Offset: FFFFFFFF
  class FusionRegionCrawler : public ::UnityEngine::MonoBehaviour/*, public ::Fusion::INetworkRunnerCallbacks*/ {
    public:
    // Nested type: ::GlobalNamespace::FusionRegionCrawler::PlayerCountUpdated
    class PlayerCountUpdated;
    // Nested type: ::GlobalNamespace::FusionRegionCrawler::$OccasionalUpdate$d__12
    class $OccasionalUpdate$d__12;
    // Nested type: ::GlobalNamespace::FusionRegionCrawler::$UpdatePlayerCount$d__13
    class $UpdatePlayerCount$d__13;
    public:
    // public FusionRegionCrawler/PlayerCountUpdated OnPlayerCountUpdated
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::FusionRegionCrawler::PlayerCountUpdated* OnPlayerCountUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionRegionCrawler::PlayerCountUpdated*) == 0x8);
    // private Fusion.NetworkRunner regionRunner
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::NetworkRunner* regionRunner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.SessionInfo> sessionInfoCache
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionInfoCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*) == 0x8);
    // private System.Boolean waitingForSessionListUpdate
    // Size: 0x1
    // Offset: 0x38
    bool waitingForSessionListUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForSessionListUpdate and: globalPlayerCount
    char __padding3[0x3] = {};
    // private System.Int32 globalPlayerCount
    // Size: 0x4
    // Offset: 0x3C
    int globalPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single UpdateFrequency
    // Size: 0x4
    // Offset: 0x40
    float UpdateFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean refreshPlayerCountAutomatically
    // Size: 0x1
    // Offset: 0x44
    bool refreshPlayerCountAutomatically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: refreshPlayerCountAutomatically and: tempSessionPlayerCount
    char __padding6[0x3] = {};
    // private System.Int32 tempSessionPlayerCount
    // Size: 0x4
    // Offset: 0x48
    int tempSessionPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Fusion::INetworkRunnerCallbacks
    operator ::Fusion::INetworkRunnerCallbacks() noexcept {
      return *reinterpret_cast<::Fusion::INetworkRunnerCallbacks*>(this);
    }
    // Get instance field reference: public FusionRegionCrawler/PlayerCountUpdated OnPlayerCountUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionRegionCrawler::PlayerCountUpdated*& dyn_OnPlayerCountUpdated();
    // Get instance field reference: private Fusion.NetworkRunner regionRunner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn_regionRunner();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.SessionInfo> sessionInfoCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*& dyn_sessionInfoCache();
    // Get instance field reference: private System.Boolean waitingForSessionListUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForSessionListUpdate();
    // Get instance field reference: private System.Int32 globalPlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_globalPlayerCount();
    // Get instance field reference: private System.Single UpdateFrequency
    [[deprecated("Use field access instead!")]] float& dyn_UpdateFrequency();
    // Get instance field reference: private System.Boolean refreshPlayerCountAutomatically
    [[deprecated("Use field access instead!")]] bool& dyn_refreshPlayerCountAutomatically();
    // Get instance field reference: private System.Int32 tempSessionPlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_tempSessionPlayerCount();
    // public System.Int32 get_PlayerCountGlobal()
    // Offset: 0x28A01C0
    int get_PlayerCountGlobal();
    // public System.Void Start()
    // Offset: 0x28A01C8
    void Start();
    // public System.Collections.IEnumerator OccasionalUpdate()
    // Offset: 0x28A02C8
    ::System::Collections::IEnumerator* OccasionalUpdate();
    // public System.Collections.IEnumerator UpdatePlayerCount()
    // Offset: 0x28A033C
    ::System::Collections::IEnumerator* UpdatePlayerCount();
    // public System.Void OnSessionListUpdated(Fusion.NetworkRunner runner, System.Collections.Generic.List`1<Fusion.SessionInfo> sessionList)
    // Offset: 0x28A03B0
    void OnSessionListUpdated(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionList);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnPlayerJoined(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x28A03DC
    void Fusion_INetworkRunnerCallbacks_OnPlayerJoined(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnPlayerLeft(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x28A03E0
    void Fusion_INetworkRunnerCallbacks_OnPlayerLeft(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnInput(Fusion.NetworkRunner runner, Fusion.NetworkInput input)
    // Offset: 0x28A03E4
    void Fusion_INetworkRunnerCallbacks_OnInput(::Fusion::NetworkRunner* runner, ::Fusion::NetworkInput input);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnInputMissing(Fusion.NetworkRunner runner, Fusion.PlayerRef player, Fusion.NetworkInput input)
    // Offset: 0x28A03E8
    void Fusion_INetworkRunnerCallbacks_OnInputMissing(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::Fusion::NetworkInput input);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnShutdown(Fusion.NetworkRunner runner, Fusion.ShutdownReason shutdownReason)
    // Offset: 0x28A03EC
    void Fusion_INetworkRunnerCallbacks_OnShutdown(::Fusion::NetworkRunner* runner, ::Fusion::ShutdownReason shutdownReason);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectedToServer(Fusion.NetworkRunner runner)
    // Offset: 0x28A03F0
    void Fusion_INetworkRunnerCallbacks_OnConnectedToServer(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer(Fusion.NetworkRunner runner)
    // Offset: 0x28A03F4
    void Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectRequest(Fusion.NetworkRunner runner, Fusion.NetworkRunnerCallbackArgs/ConnectRequest request, System.Byte[] token)
    // Offset: 0x28A03F8
    void Fusion_INetworkRunnerCallbacks_OnConnectRequest(::Fusion::NetworkRunner* runner, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest* request, ::ArrayW<uint8_t> token);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectFailed(Fusion.NetworkRunner runner, Fusion.Sockets.NetAddress remoteAddress, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0x28A03FC
    void Fusion_INetworkRunnerCallbacks_OnConnectFailed(::Fusion::NetworkRunner* runner, ::Fusion::Sockets::NetAddress remoteAddress, ::Fusion::Sockets::NetConnectFailedReason reason);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage(Fusion.NetworkRunner runner, Fusion.SimulationMessagePtr message)
    // Offset: 0x28A0400
    void Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage(::Fusion::NetworkRunner* runner, ::Fusion::SimulationMessagePtr message);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSessionListUpdated(Fusion.NetworkRunner runner, System.Collections.Generic.List`1<Fusion.SessionInfo> sessionList)
    // Offset: 0x28A0404
    void Fusion_INetworkRunnerCallbacks_OnSessionListUpdated(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionList);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse(Fusion.NetworkRunner runner, System.Collections.Generic.Dictionary`2<System.String,System.Object> data)
    // Offset: 0x28A0408
    void Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* data);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnHostMigration(Fusion.NetworkRunner runner, Fusion.HostMigrationToken hostMigrationToken)
    // Offset: 0x28A040C
    void Fusion_INetworkRunnerCallbacks_OnHostMigration(::Fusion::NetworkRunner* runner, ::Fusion::HostMigrationToken* hostMigrationToken);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnReliableDataReceived(Fusion.NetworkRunner runner, Fusion.PlayerRef player, System.ArraySegment`1<System.Byte> data)
    // Offset: 0x28A0410
    void Fusion_INetworkRunnerCallbacks_OnReliableDataReceived(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::System::ArraySegment_1<uint8_t> data);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSceneLoadDone(Fusion.NetworkRunner runner)
    // Offset: 0x28A0414
    void Fusion_INetworkRunnerCallbacks_OnSceneLoadDone(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSceneLoadStart(Fusion.NetworkRunner runner)
    // Offset: 0x28A0418
    void Fusion_INetworkRunnerCallbacks_OnSceneLoadStart(::Fusion::NetworkRunner* runner);
    // public System.Void .ctor()
    // Offset: 0x28A041C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionRegionCrawler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionRegionCrawler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionRegionCrawler*, creationType>()));
    }
  }; // FusionRegionCrawler
  #pragma pack(pop)
  static check_size<sizeof(FusionRegionCrawler), 72 + sizeof(int)> __GlobalNamespace_FusionRegionCrawlerSizeCheck;
  static_assert(sizeof(FusionRegionCrawler) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::get_PlayerCountGlobal
// Il2CppName: get_PlayerCountGlobal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionRegionCrawler::*)()>(&GlobalNamespace::FusionRegionCrawler::get_PlayerCountGlobal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "get_PlayerCountGlobal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)()>(&GlobalNamespace::FusionRegionCrawler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::OccasionalUpdate
// Il2CppName: OccasionalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::FusionRegionCrawler::*)()>(&GlobalNamespace::FusionRegionCrawler::OccasionalUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "OccasionalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::UpdatePlayerCount
// Il2CppName: UpdatePlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::FusionRegionCrawler::*)()>(&GlobalNamespace::FusionRegionCrawler::UpdatePlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "UpdatePlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::OnSessionListUpdated
// Il2CppName: OnSessionListUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*)>(&GlobalNamespace::FusionRegionCrawler::OnSessionListUpdated)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "OnSessionListUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, sessionList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnPlayerJoined
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnPlayerLeft
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnInput
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkInput)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnInput)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnInputMissing
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnInputMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::Fusion::NetworkInput)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnInputMissing)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnInputMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnShutdown
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::ShutdownReason)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnShutdown)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* shutdownReason = &::il2cpp_utils::GetClassFromName("Fusion", "ShutdownReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, shutdownReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectedToServer
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectedToServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectRequest
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest*, ::ArrayW<uint8_t>)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectRequest)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerCallbackArgs/ConnectRequest")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, request, token});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectFailed
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnConnectFailed)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnConnectFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, remoteAddress, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::SimulationMessagePtr)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessagePtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSessionListUpdated
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSessionListUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSessionListUpdated)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnSessionListUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, sessionList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnHostMigration
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::HostMigrationToken*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnHostMigration)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* hostMigrationToken = &::il2cpp_utils::GetClassFromName("Fusion", "HostMigrationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, hostMigrationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnReliableDataReceived
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnReliableDataReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::System::ArraySegment_1<uint8_t>)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnReliableDataReceived)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnReliableDataReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSceneLoadDone
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSceneLoadDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSceneLoadDone)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnSceneLoadDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSceneLoadStart
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSceneLoadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionRegionCrawler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionRegionCrawler::Fusion_INetworkRunnerCallbacks_OnSceneLoadStart)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionRegionCrawler*), "Fusion.INetworkRunnerCallbacks.OnSceneLoadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionRegionCrawler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
