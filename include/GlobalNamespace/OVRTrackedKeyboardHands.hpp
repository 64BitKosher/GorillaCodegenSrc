// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: OVRTrackedKeyboard
#include "GlobalNamespace/OVRTrackedKeyboard.hpp"
// Including type: OVRSkeleton/BoneId
#include "GlobalNamespace/OVRSkeleton_BoneId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Forward declaring type: OVRHand
  class OVRHand;
  // Skipping declaration: OVRSkeleton because it is already included!
  // Forward declaring type: OVRSkeletonRenderer
  class OVRSkeletonRenderer;
  // Forward declaring type: OVRMeshRenderer
  class OVRMeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTrackedKeyboardHands
  class OVRTrackedKeyboardHands;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTrackedKeyboardHands);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboardHands*, "", "OVRTrackedKeyboardHands");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: OVRTrackedKeyboardHands
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTrackedKeyboardHands : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboardHands::HandBoneMapping
    struct HandBoneMapping;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent
    struct TrackedKeyboardHandsVisibilityChangedEvent;
    // Size: 0x38
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRTrackedKeyboardHands/HandBoneMapping
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandBoneMapping/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Transform LeftHandTransform
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Transform* LeftHandTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public UnityEngine.Transform LeftPresenceTransform
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Transform* LeftPresenceTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public UnityEngine.Transform RightHandTransform
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Transform* RightHandTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public UnityEngine.Transform RightPresenceTransform
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::Transform* RightPresenceTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public OVRSkeleton/BoneId BoneName
      // Size: 0x4
      // Offset: 0x20
      ::GlobalNamespace::OVRSkeleton::BoneId BoneName;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRSkeleton::BoneId) == 0x4);
      // Padding between fields: BoneName and: HandPresenceLeftBoneName
      char __padding4[0x4] = {};
      // public System.String HandPresenceLeftBoneName
      // Size: 0x8
      // Offset: 0x28
      ::StringW HandPresenceLeftBoneName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String HandPresenceRightBoneName
      // Size: 0x8
      // Offset: 0x30
      ::StringW HandPresenceRightBoneName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: HandBoneMapping
      constexpr HandBoneMapping(::UnityEngine::Transform* LeftHandTransform_ = {}, ::UnityEngine::Transform* LeftPresenceTransform_ = {}, ::UnityEngine::Transform* RightHandTransform_ = {}, ::UnityEngine::Transform* RightPresenceTransform_ = {}, ::GlobalNamespace::OVRSkeleton::BoneId BoneName_ = {}, ::StringW HandPresenceLeftBoneName_ = {}, ::StringW HandPresenceRightBoneName_ = {}) noexcept : LeftHandTransform{LeftHandTransform_}, LeftPresenceTransform{LeftPresenceTransform_}, RightHandTransform{RightHandTransform_}, RightPresenceTransform{RightPresenceTransform_}, BoneName{BoneName_}, HandPresenceLeftBoneName{HandPresenceLeftBoneName_}, HandPresenceRightBoneName{HandPresenceRightBoneName_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Transform LeftHandTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_LeftHandTransform();
      // Get instance field reference: public UnityEngine.Transform LeftPresenceTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_LeftPresenceTransform();
      // Get instance field reference: public UnityEngine.Transform RightHandTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_RightHandTransform();
      // Get instance field reference: public UnityEngine.Transform RightPresenceTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_RightPresenceTransform();
      // Get instance field reference: public OVRSkeleton/BoneId BoneName
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton::BoneId& dyn_BoneName();
      // Get instance field reference: public System.String HandPresenceLeftBoneName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_HandPresenceLeftBoneName();
      // Get instance field reference: public System.String HandPresenceRightBoneName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_HandPresenceRightBoneName();
    }; // OVRTrackedKeyboardHands/HandBoneMapping
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboardHands::HandBoneMapping), 48 + sizeof(::StringW)> __GlobalNamespace_OVRTrackedKeyboardHands_HandBoneMappingSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboardHands::HandBoneMapping) == 0x38);
    // Size: 0x2
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRTrackedKeyboardHands/TrackedKeyboardHandsVisibilityChangedEvent
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedKeyboardHandsVisibilityChangedEvent/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean leftVisible
      // Size: 0x1
      // Offset: 0x0
      bool leftVisible;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean rightVisible
      // Size: 0x1
      // Offset: 0x1
      bool rightVisible;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: TrackedKeyboardHandsVisibilityChangedEvent
      constexpr TrackedKeyboardHandsVisibilityChangedEvent(bool leftVisible_ = {}, bool rightVisible_ = {}) noexcept : leftVisible{leftVisible_}, rightVisible{rightVisible_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean leftVisible
      [[deprecated("Use field access instead!")]] bool& dyn_leftVisible();
      // Get instance field reference: public System.Boolean rightVisible
      [[deprecated("Use field access instead!")]] bool& dyn_rightVisible();
    }; // OVRTrackedKeyboardHands/TrackedKeyboardHandsVisibilityChangedEvent
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent), 1 + sizeof(bool)> __GlobalNamespace_OVRTrackedKeyboardHands_TrackedKeyboardHandsVisibilityChangedEventSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent) == 0x2);
    public:
    // public UnityEngine.GameObject LeftHandPresence
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* LeftHandPresence;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject RightHandPresence
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* RightHandPresence;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean handPresenceInitialized_
    // Size: 0x1
    // Offset: 0x30
    bool handPresenceInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Transform leftHandRoot_
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* leftHandRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform rightHandRoot_
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* rightHandRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public OVRTrackedKeyboard KeyboardTracker
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::OVRTrackedKeyboard* KeyboardTracker;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTrackedKeyboard*) == 0x8);
    // private OVRCameraRig cameraRig_
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::OVRCameraRig* cameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private OVRHand leftHand_
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::OVRHand* leftHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private OVRSkeleton leftHandSkeleton_
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::OVRSkeleton* leftHandSkeleton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeleton*) == 0x8);
    // private OVRSkeletonRenderer leftHandSkeletonRenderer_
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::OVRSkeletonRenderer* leftHandSkeletonRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeletonRenderer*) == 0x8);
    // private UnityEngine.GameObject leftHandSkeletonRendererGO_
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* leftHandSkeletonRendererGO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer leftHandSkinnedMeshRenderer_
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::SkinnedMeshRenderer* leftHandSkinnedMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private OVRMeshRenderer leftHandMeshRenderer_
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::OVRMeshRenderer* leftHandMeshRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRMeshRenderer*) == 0x8);
    // private OVRHand rightHand_
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::OVRHand* rightHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private OVRSkeleton rightHandSkeleton_
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::OVRSkeleton* rightHandSkeleton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeleton*) == 0x8);
    // private OVRSkeletonRenderer rightHandSkeletonRenderer_
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::OVRSkeletonRenderer* rightHandSkeletonRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeletonRenderer*) == 0x8);
    // private UnityEngine.GameObject rightHandSkeletonRendererGO_
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GameObject* rightHandSkeletonRendererGO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OVRMeshRenderer rightHandMeshRenderer_
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::OVRMeshRenderer* rightHandMeshRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRMeshRenderer*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer rightHandSkinnedMeshRenderer_
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::SkinnedMeshRenderer* rightHandSkinnedMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private System.Boolean <RightHandOverKeyboard>k__BackingField
    // Size: 0x1
    // Offset: 0xB8
    bool RightHandOverKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <LeftHandOverKeyboard>k__BackingField
    // Size: 0x1
    // Offset: 0xB9
    bool LeftHandOverKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<OVRTrackedKeyboardHands/TrackedKeyboardHandsVisibilityChangedEvent> lastVisibilityEvent_
    // Size: 0xFFFFFFFF
    // Offset: 0xBA
    ::System::Nullable_1<::GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent> lastVisibilityEvent;
    // private readonly OVRTrackedKeyboardHands/HandBoneMapping[] boneMappings_
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::GlobalNamespace::OVRTrackedKeyboardHands::HandBoneMapping> boneMappings;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRTrackedKeyboardHands::HandBoneMapping>) == 0x8);
    // public UnityEngine.Material HandsMaterial
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Material* HandsMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 keyboardPositionID_
    // Size: 0x4
    // Offset: 0xD0
    int keyboardPositionID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 keyboardRotationID_
    // Size: 0x4
    // Offset: 0xD4
    int keyboardRotationID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 keyboardScaleID_
    // Size: 0x4
    // Offset: 0xD8
    int keyboardScaleID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Single handInnerAlphaThreshold_
    static float _get_handInnerAlphaThreshold_();
    // Set static field: static private readonly System.Single handInnerAlphaThreshold_
    static void _set_handInnerAlphaThreshold_(float value);
    // Get static field: static private readonly System.Single handOuterAlphaThreshold_
    static float _get_handOuterAlphaThreshold_();
    // Set static field: static private readonly System.Single handOuterAlphaThreshold_
    static void _set_handOuterAlphaThreshold_(float value);
    // Get static field: static private readonly System.Single maximumPassthroughHandsDistance_
    static float _get_maximumPassthroughHandsDistance_();
    // Set static field: static private readonly System.Single maximumPassthroughHandsDistance_
    static void _set_maximumPassthroughHandsDistance_(float value);
    // Get static field: static private readonly System.Single minimumModelHandsDistance_
    static float _get_minimumModelHandsDistance_();
    // Set static field: static private readonly System.Single minimumModelHandsDistance_
    static void _set_minimumModelHandsDistance_(float value);
    // static field const value: static private System.Single XSCALE
    static constexpr const float XSCALE = 0.73;
    // Get static field: static private System.Single XSCALE
    static float _get_XSCALE();
    // Set static field: static private System.Single XSCALE
    static void _set_XSCALE(float value);
    // static field const value: static private System.Single YSCALE
    static constexpr const float YSCALE = 0.8;
    // Get static field: static private System.Single YSCALE
    static float _get_YSCALE();
    // Set static field: static private System.Single YSCALE
    static void _set_YSCALE(float value);
    // static field const value: static private System.Single FORWARD_OFFSET
    static constexpr const float FORWARD_OFFSET = -0.02;
    // Get static field: static private System.Single FORWARD_OFFSET
    static float _get_FORWARD_OFFSET();
    // Set static field: static private System.Single FORWARD_OFFSET
    static void _set_FORWARD_OFFSET(float value);
    // Get instance field reference: public UnityEngine.GameObject LeftHandPresence
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_LeftHandPresence();
    // Get instance field reference: public UnityEngine.GameObject RightHandPresence
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_RightHandPresence();
    // Get instance field reference: private System.Boolean handPresenceInitialized_
    [[deprecated("Use field access instead!")]] bool& dyn_handPresenceInitialized_();
    // Get instance field reference: private UnityEngine.Transform leftHandRoot_
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandRoot_();
    // Get instance field reference: private UnityEngine.Transform rightHandRoot_
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandRoot_();
    // Get instance field reference: public OVRTrackedKeyboard KeyboardTracker
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTrackedKeyboard*& dyn_KeyboardTracker();
    // Get instance field reference: private OVRCameraRig cameraRig_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn_cameraRig_();
    // Get instance field reference: private OVRHand leftHand_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn_leftHand_();
    // Get instance field reference: private OVRSkeleton leftHandSkeleton_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& dyn_leftHandSkeleton_();
    // Get instance field reference: private OVRSkeletonRenderer leftHandSkeletonRenderer_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeletonRenderer*& dyn_leftHandSkeletonRenderer_();
    // Get instance field reference: private UnityEngine.GameObject leftHandSkeletonRendererGO_
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftHandSkeletonRendererGO_();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer leftHandSkinnedMeshRenderer_
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_leftHandSkinnedMeshRenderer_();
    // Get instance field reference: private OVRMeshRenderer leftHandMeshRenderer_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMeshRenderer*& dyn_leftHandMeshRenderer_();
    // Get instance field reference: private OVRHand rightHand_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn_rightHand_();
    // Get instance field reference: private OVRSkeleton rightHandSkeleton_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& dyn_rightHandSkeleton_();
    // Get instance field reference: private OVRSkeletonRenderer rightHandSkeletonRenderer_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeletonRenderer*& dyn_rightHandSkeletonRenderer_();
    // Get instance field reference: private UnityEngine.GameObject rightHandSkeletonRendererGO_
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightHandSkeletonRendererGO_();
    // Get instance field reference: private OVRMeshRenderer rightHandMeshRenderer_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRMeshRenderer*& dyn_rightHandMeshRenderer_();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer rightHandSkinnedMeshRenderer_
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_rightHandSkinnedMeshRenderer_();
    // Get instance field reference: private System.Boolean <RightHandOverKeyboard>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$RightHandOverKeyboard$k__BackingField();
    // Get instance field reference: private System.Boolean <LeftHandOverKeyboard>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$LeftHandOverKeyboard$k__BackingField();
    // Get instance field reference: private System.Nullable`1<OVRTrackedKeyboardHands/TrackedKeyboardHandsVisibilityChangedEvent> lastVisibilityEvent_
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent>& dyn_lastVisibilityEvent_();
    // Get instance field reference: private readonly OVRTrackedKeyboardHands/HandBoneMapping[] boneMappings_
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRTrackedKeyboardHands::HandBoneMapping>& dyn_boneMappings_();
    // Get instance field reference: public UnityEngine.Material HandsMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_HandsMaterial();
    // Get instance field reference: private System.Int32 keyboardPositionID_
    [[deprecated("Use field access instead!")]] int& dyn_keyboardPositionID_();
    // Get instance field reference: private System.Int32 keyboardRotationID_
    [[deprecated("Use field access instead!")]] int& dyn_keyboardRotationID_();
    // Get instance field reference: private System.Int32 keyboardScaleID_
    [[deprecated("Use field access instead!")]] int& dyn_keyboardScaleID_();
    // public System.Boolean get_RightHandOverKeyboard()
    // Offset: 0x49332FC
    bool get_RightHandOverKeyboard();
    // private System.Void set_RightHandOverKeyboard(System.Boolean value)
    // Offset: 0x4933304
    void set_RightHandOverKeyboard(bool value);
    // public System.Boolean get_LeftHandOverKeyboard()
    // Offset: 0x4933310
    bool get_LeftHandOverKeyboard();
    // private System.Void set_LeftHandOverKeyboard(System.Boolean value)
    // Offset: 0x4933318
    void set_LeftHandOverKeyboard(bool value);
    // private System.Void Awake()
    // Offset: 0x4933324
    void Awake();
    // private System.Void Start()
    // Offset: 0x4933528
    void Start();
    // private System.Boolean get_AreControllersActive()
    // Offset: 0x4933AAC
    bool get_AreControllersActive();
    // private System.Void LateUpdate()
    // Offset: 0x4933AE8
    void LateUpdate();
    // private System.Boolean ShouldEnablePassthrough(System.Single distance)
    // Offset: 0x4934690
    bool ShouldEnablePassthrough(float distance);
    // private System.Boolean ShouldEnableModel(System.Single distance)
    // Offset: 0x49346FC
    bool ShouldEnableModel(float distance);
    // private System.Single GetHandDistanceToKeyboard(OVRSkeleton handSkeleton)
    // Offset: 0x49343C0
    float GetHandDistanceToKeyboard(::GlobalNamespace::OVRSkeleton* handSkeleton);
    // private System.Single ComputeOpacity(System.Single distance, System.Single innerThreshold, System.Single outerThreshold)
    // Offset: 0x4934994
    float ComputeOpacity(float distance, float innerThreshold, float outerThreshold);
    // private System.Void SetHandModelsEnabled(System.Boolean enableLeftModel, System.Boolean enableRightModel)
    // Offset: 0x4934768
    void SetHandModelsEnabled(bool enableLeftModel, bool enableRightModel);
    // private System.Void RetargetHandTrackingToHandPresence()
    // Offset: 0x4933918
    void RetargetHandTrackingToHandPresence();
    // private System.Void StopHandPresence()
    // Offset: 0x49349B8
    void StopHandPresence();
    // private System.Void DisableHandObjects()
    // Offset: 0x49342D4
    void DisableHandObjects();
    // public System.Void TrackedKeyboardActiveUpdated(OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent e)
    // Offset: 0x49349E8
    void TrackedKeyboardActiveUpdated(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent e);
    // public System.Void TrackedKeyboardVisibilityChanged(OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent e)
    // Offset: 0x49349F4
    void TrackedKeyboardVisibilityChanged(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent e);
    // public System.Void .ctor()
    // Offset: 0x4934B8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRTrackedKeyboardHands* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTrackedKeyboardHands::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRTrackedKeyboardHands*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4935908
    static void _cctor();
  }; // OVRTrackedKeyboardHands
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardHandsVisibilityChangedEvent, "", "OVRTrackedKeyboardHands/TrackedKeyboardHandsVisibilityChangedEvent");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboardHands::HandBoneMapping, "", "OVRTrackedKeyboardHands/HandBoneMapping");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::get_RightHandOverKeyboard
// Il2CppName: get_RightHandOverKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::get_RightHandOverKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "get_RightHandOverKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::set_RightHandOverKeyboard
// Il2CppName: set_RightHandOverKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboardHands::set_RightHandOverKeyboard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "set_RightHandOverKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::get_LeftHandOverKeyboard
// Il2CppName: get_LeftHandOverKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::get_LeftHandOverKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "get_LeftHandOverKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::set_LeftHandOverKeyboard
// Il2CppName: set_LeftHandOverKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboardHands::set_LeftHandOverKeyboard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "set_LeftHandOverKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::get_AreControllersActive
// Il2CppName: get_AreControllersActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::get_AreControllersActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "get_AreControllersActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::ShouldEnablePassthrough
// Il2CppName: ShouldEnablePassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardHands::*)(float)>(&GlobalNamespace::OVRTrackedKeyboardHands::ShouldEnablePassthrough)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "ShouldEnablePassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::ShouldEnableModel
// Il2CppName: ShouldEnableModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardHands::*)(float)>(&GlobalNamespace::OVRTrackedKeyboardHands::ShouldEnableModel)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "ShouldEnableModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::GetHandDistanceToKeyboard
// Il2CppName: GetHandDistanceToKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRTrackedKeyboardHands::*)(::GlobalNamespace::OVRSkeleton*)>(&GlobalNamespace::OVRTrackedKeyboardHands::GetHandDistanceToKeyboard)> {
  static const MethodInfo* get() {
    static auto* handSkeleton = &::il2cpp_utils::GetClassFromName("", "OVRSkeleton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "GetHandDistanceToKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handSkeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::ComputeOpacity
// Il2CppName: ComputeOpacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRTrackedKeyboardHands::*)(float, float, float)>(&GlobalNamespace::OVRTrackedKeyboardHands::ComputeOpacity)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* innerThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outerThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "ComputeOpacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance, innerThreshold, outerThreshold});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::SetHandModelsEnabled
// Il2CppName: SetHandModelsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)(bool, bool)>(&GlobalNamespace::OVRTrackedKeyboardHands::SetHandModelsEnabled)> {
  static const MethodInfo* get() {
    static auto* enableLeftModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableRightModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "SetHandModelsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableLeftModel, enableRightModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::RetargetHandTrackingToHandPresence
// Il2CppName: RetargetHandTrackingToHandPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::RetargetHandTrackingToHandPresence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "RetargetHandTrackingToHandPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::StopHandPresence
// Il2CppName: StopHandPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::StopHandPresence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "StopHandPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::DisableHandObjects
// Il2CppName: DisableHandObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::DisableHandObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "DisableHandObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardActiveUpdated
// Il2CppName: TrackedKeyboardActiveUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent)>(&GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardActiveUpdated)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "TrackedKeyboardActiveUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardVisibilityChanged
// Il2CppName: TrackedKeyboardVisibilityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardHands::*)(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent)>(&GlobalNamespace::OVRTrackedKeyboardHands::TrackedKeyboardVisibilityChanged)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), "TrackedKeyboardVisibilityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardHands::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRTrackedKeyboardHands::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardHands*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
