// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ComponentMember
  class ComponentMember;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ComponentMember);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ComponentMember*, "", "ComponentMember");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ComponentMember
  // [TokenAttribute] Offset: FFFFFFFF
  class ComponentMember : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Boolean <IsStarred>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool IsStarred;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsStarred and: Color
    char __padding1[0x7] = {};
    // private readonly System.String <Color>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Color;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Func`1<System.String> getValue
    // Size: 0x8
    // Offset: 0x28
    ::System::Func_1<::StringW>* getValue;
    // Field size check
    static_assert(sizeof(::System::Func_1<::StringW>*) == 0x8);
    // public System.String computedPrefix
    // Size: 0x8
    // Offset: 0x30
    ::StringW computedPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String computedSuffix
    // Size: 0x8
    // Offset: 0x38
    ::StringW computedSuffix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <IsStarred>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsStarred$k__BackingField();
    // Get instance field reference: private readonly System.String <Color>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Color$k__BackingField();
    // Get instance field reference: private System.Func`1<System.String> getValue
    [[deprecated("Use field access instead!")]] ::System::Func_1<::StringW>*& dyn_getValue();
    // Get instance field reference: public System.String computedPrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_computedPrefix();
    // Get instance field reference: public System.String computedSuffix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_computedSuffix();
    // public System.String get_Name()
    // Offset: 0x279AC90
    ::StringW get_Name();
    // public System.String get_Value()
    // Offset: 0x279AC98
    ::StringW get_Value();
    // public System.Boolean get_IsStarred()
    // Offset: 0x279ACBC
    bool get_IsStarred();
    // public System.String get_Color()
    // Offset: 0x279ACC4
    ::StringW get_Color();
    // public System.Void .ctor(System.String name, System.Func`1<System.String> getValue, System.Boolean isStarred, System.String color)
    // Offset: 0x279ACCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ComponentMember* New_ctor(::StringW name, ::System::Func_1<::StringW>* getValue, bool isStarred, ::StringW color) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ComponentMember*, creationType>(name, getValue, isStarred, color)));
    }
  }; // ComponentMember
  #pragma pack(pop)
  static check_size<sizeof(ComponentMember), 56 + sizeof(::StringW)> __GlobalNamespace_ComponentMemberSizeCheck;
  static_assert(sizeof(ComponentMember) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ComponentMember::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ComponentMember::*)()>(&GlobalNamespace::ComponentMember::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentMember*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentMember::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ComponentMember::*)()>(&GlobalNamespace::ComponentMember::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentMember*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentMember::get_IsStarred
// Il2CppName: get_IsStarred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ComponentMember::*)()>(&GlobalNamespace::ComponentMember::get_IsStarred)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentMember*), "get_IsStarred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentMember::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ComponentMember::*)()>(&GlobalNamespace::ComponentMember::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentMember*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentMember::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
