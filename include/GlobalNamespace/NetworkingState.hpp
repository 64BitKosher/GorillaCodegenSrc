// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkingState
  struct NetworkingState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkingState, "", "NetworkingState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: NetworkingState
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkingState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetworkingState
    constexpr NetworkingState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public NetworkingState IsOwner
    static constexpr const int IsOwner = 0;
    // Get static field: static public NetworkingState IsOwner
    static ::GlobalNamespace::NetworkingState _get_IsOwner();
    // Set static field: static public NetworkingState IsOwner
    static void _set_IsOwner(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState IsBlindClient
    static constexpr const int IsBlindClient = 1;
    // Get static field: static public NetworkingState IsBlindClient
    static ::GlobalNamespace::NetworkingState _get_IsBlindClient();
    // Set static field: static public NetworkingState IsBlindClient
    static void _set_IsBlindClient(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState IsClient
    static constexpr const int IsClient = 2;
    // Get static field: static public NetworkingState IsClient
    static ::GlobalNamespace::NetworkingState _get_IsClient();
    // Set static field: static public NetworkingState IsClient
    static void _set_IsClient(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState ForcefullyTakingOver
    static constexpr const int ForcefullyTakingOver = 3;
    // Get static field: static public NetworkingState ForcefullyTakingOver
    static ::GlobalNamespace::NetworkingState _get_ForcefullyTakingOver();
    // Set static field: static public NetworkingState ForcefullyTakingOver
    static void _set_ForcefullyTakingOver(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState RequestingOwnership
    static constexpr const int RequestingOwnership = 4;
    // Get static field: static public NetworkingState RequestingOwnership
    static ::GlobalNamespace::NetworkingState _get_RequestingOwnership();
    // Set static field: static public NetworkingState RequestingOwnership
    static void _set_RequestingOwnership(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState RequestingOwnershipWaitingForSight
    static constexpr const int RequestingOwnershipWaitingForSight = 5;
    // Get static field: static public NetworkingState RequestingOwnershipWaitingForSight
    static ::GlobalNamespace::NetworkingState _get_RequestingOwnershipWaitingForSight();
    // Set static field: static public NetworkingState RequestingOwnershipWaitingForSight
    static void _set_RequestingOwnershipWaitingForSight(::GlobalNamespace::NetworkingState value);
    // static field const value: static public NetworkingState ForcefullyTakingOverWaitingForSight
    static constexpr const int ForcefullyTakingOverWaitingForSight = 6;
    // Get static field: static public NetworkingState ForcefullyTakingOverWaitingForSight
    static ::GlobalNamespace::NetworkingState _get_ForcefullyTakingOverWaitingForSight();
    // Set static field: static public NetworkingState ForcefullyTakingOverWaitingForSight
    static void _set_ForcefullyTakingOverWaitingForSight(::GlobalNamespace::NetworkingState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // NetworkingState
  #pragma pack(pop)
  static check_size<sizeof(NetworkingState), 0 + sizeof(int)> __GlobalNamespace_NetworkingStateSizeCheck;
  static_assert(sizeof(NetworkingState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
