// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRInput
#include "GlobalNamespace/OVRInput.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRInput::HapticsAmplitudeEnvelopeVibration, "", "OVRInput/HapticsAmplitudeEnvelopeVibration");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRInput/HapticsAmplitudeEnvelopeVibration
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRInput::HapticsAmplitudeEnvelopeVibration/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 SamplesCount
    // Size: 0x4
    // Offset: 0x0
    int SamplesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: SamplesCount and: Samples
    char __padding0[0x4] = {};
    // public System.Single[] Samples
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<float> Samples;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single Duration
    // Size: 0x4
    // Offset: 0x10
    float Duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: HapticsAmplitudeEnvelopeVibration
    constexpr HapticsAmplitudeEnvelopeVibration(int SamplesCount_ = {}, ::ArrayW<float> Samples_ = ::ArrayW<float>(static_cast<void*>(nullptr)), float Duration_ = {}) noexcept : SamplesCount{SamplesCount_}, Samples{Samples_}, Duration{Duration_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 SamplesCount
    [[deprecated("Use field access instead!")]] int& dyn_SamplesCount();
    // Get instance field reference: public System.Single[] Samples
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_Samples();
    // Get instance field reference: public System.Single Duration
    [[deprecated("Use field access instead!")]] float& dyn_Duration();
  }; // OVRInput/HapticsAmplitudeEnvelopeVibration
  #pragma pack(pop)
  static check_size<sizeof(OVRInput::HapticsAmplitudeEnvelopeVibration), 16 + sizeof(float)> __GlobalNamespace_OVRInput_HapticsAmplitudeEnvelopeVibrationSizeCheck;
  static_assert(sizeof(OVRInput::HapticsAmplitudeEnvelopeVibration) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
