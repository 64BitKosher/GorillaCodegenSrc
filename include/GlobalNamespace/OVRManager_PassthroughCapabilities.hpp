// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PassthroughCapabilities
  class OVRManager_PassthroughCapabilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRManager_PassthroughCapabilities);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRManager_PassthroughCapabilities*, "", "OVRManager/PassthroughCapabilities");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OVRManager/PassthroughCapabilities
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRManager_PassthroughCapabilities : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Boolean <SupportsPassthrough>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool SupportsPassthrough;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean <SupportsColorPassthrough>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool SupportsColorPassthrough;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SupportsColorPassthrough and: MaxColorLutResolution
    char __padding1[0x2] = {};
    // private readonly System.UInt32 <MaxColorLutResolution>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    uint MaxColorLutResolution;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: private readonly System.Boolean <SupportsPassthrough>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SupportsPassthrough$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <SupportsColorPassthrough>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SupportsColorPassthrough$k__BackingField();
    // Get instance field reference: private readonly System.UInt32 <MaxColorLutResolution>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$MaxColorLutResolution$k__BackingField();
    // public System.Boolean get_SupportsPassthrough()
    // Offset: 0x48E10B8
    bool get_SupportsPassthrough();
    // public System.Boolean get_SupportsColorPassthrough()
    // Offset: 0x48E10C0
    bool get_SupportsColorPassthrough();
    // public System.UInt32 get_MaxColorLutResolution()
    // Offset: 0x48E10C8
    uint get_MaxColorLutResolution();
    // public System.Void .ctor(System.Boolean supportsPassthrough, System.Boolean supportsColorPassthrough, System.UInt32 maxColorLutResolution)
    // Offset: 0x48E095C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRManager_PassthroughCapabilities* New_ctor(bool supportsPassthrough, bool supportsColorPassthrough, uint maxColorLutResolution) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRManager_PassthroughCapabilities::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRManager_PassthroughCapabilities*, creationType>(supportsPassthrough, supportsColorPassthrough, maxColorLutResolution)));
    }
  }; // OVRManager/PassthroughCapabilities
  #pragma pack(pop)
  static check_size<sizeof(OVRManager_PassthroughCapabilities), 20 + sizeof(uint)> __GlobalNamespace_OVRManager_PassthroughCapabilitiesSizeCheck;
  static_assert(sizeof(OVRManager_PassthroughCapabilities) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRManager_PassthroughCapabilities::get_SupportsPassthrough
// Il2CppName: get_SupportsPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager_PassthroughCapabilities::*)()>(&GlobalNamespace::OVRManager_PassthroughCapabilities::get_SupportsPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager_PassthroughCapabilities*), "get_SupportsPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager_PassthroughCapabilities::get_SupportsColorPassthrough
// Il2CppName: get_SupportsColorPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager_PassthroughCapabilities::*)()>(&GlobalNamespace::OVRManager_PassthroughCapabilities::get_SupportsColorPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager_PassthroughCapabilities*), "get_SupportsColorPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager_PassthroughCapabilities::get_MaxColorLutResolution
// Il2CppName: get_MaxColorLutResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::OVRManager_PassthroughCapabilities::*)()>(&GlobalNamespace::OVRManager_PassthroughCapabilities::get_MaxColorLutResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager_PassthroughCapabilities*), "get_MaxColorLutResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager_PassthroughCapabilities::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
