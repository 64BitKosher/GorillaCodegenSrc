// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: RoomOptions
  class RoomOptions;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomConfig
  class RoomConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomConfig);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomConfig*, "", "RoomConfig");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RoomConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomConfig : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean isPublic
    // Size: 0x1
    // Offset: 0x10
    bool isPublic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isJoinable
    // Size: 0x1
    // Offset: 0x11
    bool isJoinable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Byte MaxPlayers
    // Size: 0x1
    // Offset: 0x12
    uint8_t MaxPlayers;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: MaxPlayers and: customProps
    char __padding2[0x5] = {};
    // public ExitGames.Client.Photon.Hashtable customProps
    // Size: 0x8
    // Offset: 0x18
    ::ExitGames::Client::Photon::Hashtable* customProps;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::Hashtable*) == 0x8);
    // public System.Boolean createIfMissing
    // Size: 0x1
    // Offset: 0x20
    bool createIfMissing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: createIfMissing and: joinFriendIDs
    char __padding4[0x7] = {};
    // public System.String[] joinFriendIDs
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> joinFriendIDs;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // static field const value: static public System.String Room_GameModePropKey
    static constexpr const char* Room_GameModePropKey = "gameMode";
    // Get static field: static public System.String Room_GameModePropKey
    static ::StringW _get_Room_GameModePropKey();
    // Set static field: static public System.String Room_GameModePropKey
    static void _set_Room_GameModePropKey(::StringW value);
    // static field const value: static public System.String Room_PlatformPropKey
    static constexpr const char* Room_PlatformPropKey = "platform";
    // Get static field: static public System.String Room_PlatformPropKey
    static ::StringW _get_Room_PlatformPropKey();
    // Set static field: static public System.String Room_PlatformPropKey
    static void _set_Room_PlatformPropKey(::StringW value);
    // Get instance field reference: public System.Boolean isPublic
    [[deprecated("Use field access instead!")]] bool& dyn_isPublic();
    // Get instance field reference: public System.Boolean isJoinable
    [[deprecated("Use field access instead!")]] bool& dyn_isJoinable();
    // Get instance field reference: public System.Byte MaxPlayers
    [[deprecated("Use field access instead!")]] uint8_t& dyn_MaxPlayers();
    // Get instance field reference: public ExitGames.Client.Photon.Hashtable customProps
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::Hashtable*& dyn_customProps();
    // Get instance field reference: public System.Boolean createIfMissing
    [[deprecated("Use field access instead!")]] bool& dyn_createIfMissing();
    // Get instance field reference: public System.String[] joinFriendIDs
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_joinFriendIDs();
    // public System.Boolean get_IsJoiningWithFriends()
    // Offset: 0x2911B08
    bool get_IsJoiningWithFriends();
    // public System.Void SetFriendIDs(System.Collections.Generic.List`1<System.String> friendIDs)
    // Offset: 0x2911B28
    void SetFriendIDs(::System::Collections::Generic::List_1<::StringW>* friendIDs);
    // public Photon.Realtime.RoomOptions ToPUNOpts()
    // Offset: 0x2911CD4
    ::Photon::Realtime::RoomOptions* ToPUNOpts();
    // public System.Void SetFusionOpts(Fusion.NetworkRunner runnerInst)
    // Offset: 0x290D124
    void SetFusionOpts(::Fusion::NetworkRunner* runnerInst);
    // static public RoomConfig SPConfig()
    // Offset: 0x290EB1C
    static ::GlobalNamespace::RoomConfig* SPConfig();
    // static public RoomConfig AnyPublicConfig()
    // Offset: 0x2911FA4
    static ::GlobalNamespace::RoomConfig* AnyPublicConfig();
    // private System.String[] AutoCustomLobbyProps()
    // Offset: 0x2911D7C
    ::ArrayW<::StringW> AutoCustomLobbyProps();
    // public System.Void .ctor()
    // Offset: 0x2911F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomConfig*, creationType>()));
    }
  }; // RoomConfig
  #pragma pack(pop)
  static check_size<sizeof(RoomConfig), 40 + sizeof(::ArrayW<::StringW>)> __GlobalNamespace_RoomConfigSizeCheck;
  static_assert(sizeof(RoomConfig) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::get_IsJoiningWithFriends
// Il2CppName: get_IsJoiningWithFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomConfig::*)()>(&GlobalNamespace::RoomConfig::get_IsJoiningWithFriends)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "get_IsJoiningWithFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::SetFriendIDs
// Il2CppName: SetFriendIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomConfig::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::RoomConfig::SetFriendIDs)> {
  static const MethodInfo* get() {
    static auto* friendIDs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "SetFriendIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendIDs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::ToPUNOpts
// Il2CppName: ToPUNOpts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::RoomOptions* (GlobalNamespace::RoomConfig::*)()>(&GlobalNamespace::RoomConfig::ToPUNOpts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "ToPUNOpts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::SetFusionOpts
// Il2CppName: SetFusionOpts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomConfig::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::RoomConfig::SetFusionOpts)> {
  static const MethodInfo* get() {
    static auto* runnerInst = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "SetFusionOpts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runnerInst});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::SPConfig
// Il2CppName: SPConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RoomConfig* (*)()>(&GlobalNamespace::RoomConfig::SPConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "SPConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::AnyPublicConfig
// Il2CppName: AnyPublicConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RoomConfig* (*)()>(&GlobalNamespace::RoomConfig::AnyPublicConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "AnyPublicConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::AutoCustomLobbyProps
// Il2CppName: AutoCustomLobbyProps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (GlobalNamespace::RoomConfig::*)()>(&GlobalNamespace::RoomConfig::AutoCustomLobbyProps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomConfig*), "AutoCustomLobbyProps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
