// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UIMatchRotation
  class UIMatchRotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UIMatchRotation);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UIMatchRotation*, "", "UIMatchRotation");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: UIMatchRotation
  // [TokenAttribute] Offset: FFFFFFFF
  class UIMatchRotation : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::UIMatchRotation::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UIMatchRotation/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UIMatchRotation/State Ready
      static constexpr const int Ready = 0;
      // Get static field: static public UIMatchRotation/State Ready
      static ::GlobalNamespace::UIMatchRotation::State _get_Ready();
      // Set static field: static public UIMatchRotation/State Ready
      static void _set_Ready(::GlobalNamespace::UIMatchRotation::State value);
      // static field const value: static public UIMatchRotation/State Rotating
      static constexpr const int Rotating = 1;
      // Get static field: static public UIMatchRotation/State Rotating
      static ::GlobalNamespace::UIMatchRotation::State _get_Rotating();
      // Set static field: static public UIMatchRotation/State Rotating
      static void _set_Rotating(::GlobalNamespace::UIMatchRotation::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UIMatchRotation/State
    #pragma pack(pop)
    static check_size<sizeof(UIMatchRotation::State), 0 + sizeof(int)> __GlobalNamespace_UIMatchRotation_StateSizeCheck;
    static_assert(sizeof(UIMatchRotation::State) == 0x4);
    public:
    // private UnityEngine.Transform referenceTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* referenceTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single threshold
    // Size: 0x4
    // Offset: 0x28
    float threshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lerpSpeed
    // Size: 0x4
    // Offset: 0x2C
    float lerpSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UIMatchRotation/State state
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::UIMatchRotation::State state;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UIMatchRotation::State) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform referenceTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_referenceTransform();
    // Get instance field reference: private System.Single threshold
    [[deprecated("Use field access instead!")]] float& dyn_threshold();
    // Get instance field reference: private System.Single lerpSpeed
    [[deprecated("Use field access instead!")]] float& dyn_lerpSpeed();
    // Get instance field reference: private UIMatchRotation/State state
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UIMatchRotation::State& dyn_state();
    // private System.Void Start()
    // Offset: 0x2782E30
    void Start();
    // private System.Void Update()
    // Offset: 0x2782F6C
    void Update();
    // private UnityEngine.Vector3 x0z(UnityEngine.Vector3 vector)
    // Offset: 0x2782EA8
    ::UnityEngine::Vector3 x0z(::UnityEngine::Vector3 vector);
    // public System.Void .ctor()
    // Offset: 0x27830F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIMatchRotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIMatchRotation*, creationType>()));
    }
  }; // UIMatchRotation
  #pragma pack(pop)
  static check_size<sizeof(UIMatchRotation), 48 + sizeof(::GlobalNamespace::UIMatchRotation::State)> __GlobalNamespace_UIMatchRotationSizeCheck;
  static_assert(sizeof(UIMatchRotation) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UIMatchRotation::State, "", "UIMatchRotation/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UIMatchRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIMatchRotation::*)()>(&GlobalNamespace::UIMatchRotation::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIMatchRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIMatchRotation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIMatchRotation::*)()>(&GlobalNamespace::UIMatchRotation::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIMatchRotation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIMatchRotation::x0z
// Il2CppName: x0z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::UIMatchRotation::*)(::UnityEngine::Vector3)>(&GlobalNamespace::UIMatchRotation::x0z)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIMatchRotation*), "x0z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIMatchRotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
