// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTagScripts.BuilderPotentialPlacement
#include "GorillaTagScripts/BuilderPotentialPlacement.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.OverlapSphereCommand
#include "UnityEngine/OverlapSphereCommand.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
  // Forward declaring type: EquipmentInteractor
  class EquipmentInteractor;
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
  // Forward declaring type: BuilderLaserSight
  class BuilderLaserSight;
  // Forward declaring type: BuilderBumpGlow
  class BuilderBumpGlow;
  // Skipping declaration: HandState because it is already included!
  // Forward declaring type: HoldableObject
  class HoldableObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderAttachGridPlane
  class BuilderAttachGridPlane;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderPieceInteractor
  class BuilderPieceInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderPieceInteractor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderPieceInteractor*, "", "BuilderPieceInteractor");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: BuilderPieceInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderPieceInteractor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BuilderPieceInteractor::HandType
    struct HandType;
    // Nested type: ::GlobalNamespace::BuilderPieceInteractor::HandState
    struct HandState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BuilderPieceInteractor/HandState
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HandState
      constexpr HandState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BuilderPieceInteractor/HandState Invalid
      static constexpr const int Invalid = -1;
      // Get static field: static public BuilderPieceInteractor/HandState Invalid
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_Invalid();
      // Set static field: static public BuilderPieceInteractor/HandState Invalid
      static void _set_Invalid(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // static field const value: static public BuilderPieceInteractor/HandState Empty
      static constexpr const int Empty = 0;
      // Get static field: static public BuilderPieceInteractor/HandState Empty
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_Empty();
      // Set static field: static public BuilderPieceInteractor/HandState Empty
      static void _set_Empty(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // static field const value: static public BuilderPieceInteractor/HandState Grabbed
      static constexpr const int Grabbed = 1;
      // Get static field: static public BuilderPieceInteractor/HandState Grabbed
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_Grabbed();
      // Set static field: static public BuilderPieceInteractor/HandState Grabbed
      static void _set_Grabbed(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // static field const value: static public BuilderPieceInteractor/HandState PotentialGrabbed
      static constexpr const int PotentialGrabbed = 2;
      // Get static field: static public BuilderPieceInteractor/HandState PotentialGrabbed
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_PotentialGrabbed();
      // Set static field: static public BuilderPieceInteractor/HandState PotentialGrabbed
      static void _set_PotentialGrabbed(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // static field const value: static public BuilderPieceInteractor/HandState WaitingForSnap
      static constexpr const int WaitingForSnap = 3;
      // Get static field: static public BuilderPieceInteractor/HandState WaitingForSnap
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_WaitingForSnap();
      // Set static field: static public BuilderPieceInteractor/HandState WaitingForSnap
      static void _set_WaitingForSnap(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // static field const value: static public BuilderPieceInteractor/HandState WaitingForUnSnap
      static constexpr const int WaitingForUnSnap = 4;
      // Get static field: static public BuilderPieceInteractor/HandState WaitingForUnSnap
      static ::GlobalNamespace::BuilderPieceInteractor::HandState _get_WaitingForUnSnap();
      // Set static field: static public BuilderPieceInteractor/HandState WaitingForUnSnap
      static void _set_WaitingForUnSnap(::GlobalNamespace::BuilderPieceInteractor::HandState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BuilderPieceInteractor/HandState
    #pragma pack(pop)
    static check_size<sizeof(BuilderPieceInteractor::HandState), 0 + sizeof(int)> __GlobalNamespace_BuilderPieceInteractor_HandStateSizeCheck;
    static_assert(sizeof(BuilderPieceInteractor::HandState) == 0x4);
    public:
    // public EquipmentInteractor equipmentInteractor
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::EquipmentInteractor* equipmentInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EquipmentInteractor*) == 0x8);
    // public GorillaVelocityEstimator velocityEstimatorLeft
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimatorLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // public GorillaVelocityEstimator velocityEstimatorRight
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimatorRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // public BuilderLaserSight laserSightLeft
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BuilderLaserSight* laserSightLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderLaserSight*) == 0x8);
    // public BuilderLaserSight laserSightRight
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::BuilderLaserSight* laserSightRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderLaserSight*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaVelocityEstimator> velocityEstimator
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>* velocityEstimator;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPieceInteractor/HandState> handState
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPieceInteractor::HandState>* handState;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPieceInteractor::HandState>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPiece> heldPiece
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* heldPiece;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPiece> potentialHeldPiece
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* potentialHeldPiece;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Single> potentialGrabbedOffsetDist
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<float>* potentialGrabbedOffsetDist;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Quaternion> heldInitialRot
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>* heldInitialRot;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Quaternion> heldCurrentRot
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>* heldCurrentRot;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> heldInitialPos
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* heldInitialPos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> heldCurrentPos
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* heldCurrentPos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderPotentialPlacement> delayedPotentialPlacement
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>* delayedPotentialPlacement;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Single> delayedPlacementTime
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<float>* delayedPlacementTime;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderPotentialPlacement> prevPotentialPlacement
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>* prevPotentialPlacement;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderLaserSight> laserSight
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderLaserSight*>* laserSight;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderLaserSight*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesLeft
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* collisionDisabledPiecesLeft;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesRight
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* collisionDisabledPiecesRight;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public Unity.Collections.NativeArray`1<UnityEngine.OverlapSphereCommand> checkPiecesInSphere
    // Size: 0xFFFFFFFF
    // Offset: 0xC0
    ::Unity::Collections::NativeArray_1<::UnityEngine::OverlapSphereCommand> checkPiecesInSphere;
    // public Unity.Collections.NativeArray`1<UnityEngine.ColliderHit> checkPiecesInSphereResults
    // Size: 0xFFFFFFFF
    // Offset: 0xD0
    ::Unity::Collections::NativeArray_1<::UnityEngine::ColliderHit> checkPiecesInSphereResults;
    // public Unity.Jobs.JobHandle checkNearbyPiecesHandle
    // Size: 0xC
    // Offset: 0xE0
    ::Unity::Jobs::JobHandle checkNearbyPiecesHandle;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    // public BuilderBumpGlow glowBumpPrefab
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::BuilderBumpGlow* glowBumpPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderBumpGlow*) == 0x8);
    // public System.Collections.Generic.List`1<System.Collections.Generic.List`1<BuilderBumpGlow>> glowBumps
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>*>* glowBumps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>*>*) == 0x8);
    // private System.Boolean inDropZone
    // Size: 0x1
    // Offset: 0x100
    bool inDropZone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public BuilderPieceInteractor instance
    static ::GlobalNamespace::BuilderPieceInteractor* _get_instance();
    // Set static field: static public BuilderPieceInteractor instance
    static void _set_instance(::GlobalNamespace::BuilderPieceInteractor* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // static field const value: static private System.Int32 NUM_HANDS
    static constexpr const int NUM_HANDS = 2;
    // Get static field: static private System.Int32 NUM_HANDS
    static int _get_NUM_HANDS();
    // Set static field: static private System.Int32 NUM_HANDS
    static void _set_NUM_HANDS(int value);
    // Get static field: static private System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane>[] localGridPlanes
    static ::ArrayW<::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*> _get_localGridPlanes();
    // Set static field: static private System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane>[] localGridPlanes
    static void _set_localGridPlanes(::ArrayW<::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*> value);
    // static field const value: static private System.Int32 MAX_SPHERE_CHECK_RESULTS
    static constexpr const int MAX_SPHERE_CHECK_RESULTS = 1024;
    // Get static field: static private System.Int32 MAX_SPHERE_CHECK_RESULTS
    static int _get_MAX_SPHERE_CHECK_RESULTS();
    // Set static field: static private System.Int32 MAX_SPHERE_CHECK_RESULTS
    static void _set_MAX_SPHERE_CHECK_RESULTS(int value);
    // Get static field: static private System.Collections.Generic.HashSet`1<BuilderPiece> tempPieceSet
    static ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BuilderPiece*>* _get_tempPieceSet();
    // Set static field: static private System.Collections.Generic.HashSet`1<BuilderPiece> tempPieceSet
    static void _set_tempPieceSet(::System::Collections::Generic::HashSet_1<::GlobalNamespace::BuilderPiece*>* value);
    // Get static field: static private UnityEngine.RaycastHit[] tempHitResults
    static ::ArrayW<::UnityEngine::RaycastHit> _get_tempHitResults();
    // Set static field: static private UnityEngine.RaycastHit[] tempHitResults
    static void _set_tempHitResults(::ArrayW<::UnityEngine::RaycastHit> value);
    // static field const value: static private System.Single PIECE_DISTANCE_DISABLE
    static constexpr const float PIECE_DISTANCE_DISABLE = 0.15;
    // Get static field: static private System.Single PIECE_DISTANCE_DISABLE
    static float _get_PIECE_DISTANCE_DISABLE();
    // Set static field: static private System.Single PIECE_DISTANCE_DISABLE
    static void _set_PIECE_DISTANCE_DISABLE(float value);
    // static field const value: static private System.Single PIECE_DISTANCE_ENABLE
    static constexpr const float PIECE_DISTANCE_ENABLE = 0.2;
    // Get static field: static private System.Single PIECE_DISTANCE_ENABLE
    static float _get_PIECE_DISTANCE_ENABLE();
    // Set static field: static private System.Single PIECE_DISTANCE_ENABLE
    static void _set_PIECE_DISTANCE_ENABLE(float value);
    // Get static field: static private UnityEngine.Collider[] tempDisableColliders
    static ::ArrayW<::UnityEngine::Collider*> _get_tempDisableColliders();
    // Set static field: static private UnityEngine.Collider[] tempDisableColliders
    static void _set_tempDisableColliders(::ArrayW<::UnityEngine::Collider*> value);
    // Get instance field reference: public EquipmentInteractor equipmentInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& dyn_equipmentInteractor();
    // Get instance field reference: public GorillaVelocityEstimator velocityEstimatorLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimatorLeft();
    // Get instance field reference: public GorillaVelocityEstimator velocityEstimatorRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimatorRight();
    // Get instance field reference: public BuilderLaserSight laserSightLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderLaserSight*& dyn_laserSightLeft();
    // Get instance field reference: public BuilderLaserSight laserSightRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderLaserSight*& dyn_laserSightRight();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaVelocityEstimator> velocityEstimator
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>*& dyn_velocityEstimator();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPieceInteractor/HandState> handState
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPieceInteractor::HandState>*& dyn_handState();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> heldPiece
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_heldPiece();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> potentialHeldPiece
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_potentialHeldPiece();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Single> potentialGrabbedOffsetDist
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_potentialGrabbedOffsetDist();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Quaternion> heldInitialRot
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*& dyn_heldInitialRot();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Quaternion> heldCurrentRot
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*& dyn_heldCurrentRot();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> heldInitialPos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_heldInitialPos();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> heldCurrentPos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_heldCurrentPos();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderPotentialPlacement> delayedPotentialPlacement
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>*& dyn_delayedPotentialPlacement();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Single> delayedPlacementTime
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_delayedPlacementTime();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderPotentialPlacement> prevPotentialPlacement
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderPotentialPlacement>*& dyn_prevPotentialPlacement();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderLaserSight> laserSight
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderLaserSight*>*& dyn_laserSight();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesLeft
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_collisionDisabledPiecesLeft();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesRight
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_collisionDisabledPiecesRight();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.OverlapSphereCommand> checkPiecesInSphere
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::OverlapSphereCommand>& dyn_checkPiecesInSphere();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.ColliderHit> checkPiecesInSphereResults
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::ColliderHit>& dyn_checkPiecesInSphereResults();
    // Get instance field reference: public Unity.Jobs.JobHandle checkNearbyPiecesHandle
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_checkNearbyPiecesHandle();
    // Get instance field reference: public BuilderBumpGlow glowBumpPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderBumpGlow*& dyn_glowBumpPrefab();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<BuilderBumpGlow>> glowBumps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>*>*& dyn_glowBumps();
    // Get instance field reference: private System.Boolean inDropZone
    [[deprecated("Use field access instead!")]] bool& dyn_inDropZone();
    // private System.Void Awake()
    // Offset: 0x26E3D4C
    void Awake();
    // private System.Void CalcLocalGridPlanes()
    // Offset: 0x26E4CAC
    void CalcLocalGridPlanes();
    // private System.Void OnDestroy()
    // Offset: 0x26E516C
    void OnDestroy();
    // public System.Void OnLateUpdate()
    // Offset: 0x26E5284
    void OnLateUpdate();
    // private System.Void SetHandState(System.Int32 handIndex, BuilderPieceInteractor/HandState newState)
    // Offset: 0x26E83A4
    void SetHandState(int handIndex, ::GlobalNamespace::BuilderPieceInteractor::HandState newState);
    // public System.Void SetInDropZone(System.Boolean inPieceDropZone)
    // Offset: 0x26E840C
    void SetInDropZone(bool inPieceDropZone);
    // private System.Void UpdateHandState(BuilderPieceInteractor/HandType handType, UnityEngine.Transform handTransform, UnityEngine.Vector3 palmForwardLocal, UnityEngine.Transform handAttachPoint, System.Boolean isGrabbing, System.Boolean wasGrabPressed, HoldableObject heldEquipment, System.Boolean grabDisabled, System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes)
    // Offset: 0x26E557C
    void UpdateHandState(::GlobalNamespace::BuilderPieceInteractor::HandType handType, ::UnityEngine::Transform* handTransform, ::UnityEngine::Vector3 palmForwardLocal, ::UnityEngine::Transform* handAttachPoint, bool isGrabbing, bool wasGrabPressed, ::GlobalNamespace::HoldableObject* heldEquipment, bool grabDisabled, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* gridPlanes);
    // private System.Void ClearGlowBumps(System.Int32 handIndex)
    // Offset: 0x26E859C
    void ClearGlowBumps(int handIndex);
    // private System.Void AddGlowBumps(System.Int32 handIndex, GorillaTagScripts.BuilderPotentialPlacement potentialPlacement)
    // Offset: 0x26E8768
    void AddGlowBumps(int handIndex, ::GorillaTagScripts::BuilderPotentialPlacement potentialPlacement);
    // private System.Void UpdateGlowBumps(System.Int32 handIndex, System.Single intensity)
    // Offset: 0x26E8E28
    void UpdateGlowBumps(int handIndex, float intensity);
    // private System.Void UpdatePullApartOffset(System.Int32 handIndex, BuilderPiece potentialGrabPiece, UnityEngine.Vector3 pullApartDiff)
    // Offset: 0x26E8F5C
    void UpdatePullApartOffset(int handIndex, ::GlobalNamespace::BuilderPiece* potentialGrabPiece, ::UnityEngine::Vector3 pullApartDiff);
    // private System.Void ClearUnSnapOffset(System.Int32 handIndex, BuilderPiece potentialGrabPiece)
    // Offset: 0x26E8EF0
    void ClearUnSnapOffset(int handIndex, ::GlobalNamespace::BuilderPiece* potentialGrabPiece);
    // public System.Void RemovePieceFromHeld(BuilderPiece piece)
    // Offset: 0x26E9294
    void RemovePieceFromHeld(::GlobalNamespace::BuilderPiece* piece);
    // private System.Void CalcPieceLocalPosAndRot(UnityEngine.Vector3 worldPosition, UnityEngine.Quaternion worldRotation, UnityEngine.Transform attachPoint, out UnityEngine.Vector3 localPosition, out UnityEngine.Quaternion localRotation)
    // Offset: 0x26E8418
    void CalcPieceLocalPosAndRot(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Quaternion worldRotation, ::UnityEngine::Transform* attachPoint, ByRef<::UnityEngine::Vector3> localPosition, ByRef<::UnityEngine::Quaternion> localRotation);
    // public System.Void DisableCollisionsWithHands()
    // Offset: 0x26E93F8
    void DisableCollisionsWithHands();
    // private System.Void DisableCollisionsWithHand(System.Boolean leftHand)
    // Offset: 0x26E9418
    void DisableCollisionsWithHand(bool leftHand);
    // public System.Void UpdatePieceDisables()
    // Offset: 0x26E8384
    void UpdatePieceDisables();
    // public System.Void UpdatePieceDisablesForHand(System.Boolean leftHand)
    // Offset: 0x26E976C
    void UpdatePieceDisablesForHand(bool leftHand);
    // public System.Void .ctor()
    // Offset: 0x26E9A0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderPieceInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderPieceInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderPieceInteractor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26E9AB8
    static void _cctor();
  }; // BuilderPieceInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderPieceInteractor::HandState, "", "BuilderPieceInteractor/HandState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::CalcLocalGridPlanes
// Il2CppName: CalcLocalGridPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::CalcLocalGridPlanes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "CalcLocalGridPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::OnLateUpdate
// Il2CppName: OnLateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::OnLateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "OnLateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::SetHandState
// Il2CppName: SetHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int, ::GlobalNamespace::BuilderPieceInteractor::HandState)>(&GlobalNamespace::BuilderPieceInteractor::SetHandState)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "BuilderPieceInteractor/HandState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "SetHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex, newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::SetInDropZone
// Il2CppName: SetInDropZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(bool)>(&GlobalNamespace::BuilderPieceInteractor::SetInDropZone)> {
  static const MethodInfo* get() {
    static auto* inPieceDropZone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "SetInDropZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPieceDropZone});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::UpdateHandState
// Il2CppName: UpdateHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(::GlobalNamespace::BuilderPieceInteractor::HandType, ::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Transform*, bool, bool, ::GlobalNamespace::HoldableObject*, bool, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*)>(&GlobalNamespace::BuilderPieceInteractor::UpdateHandState)> {
  static const MethodInfo* get() {
    static auto* handType = &::il2cpp_utils::GetClassFromName("", "BuilderPieceInteractor/HandType")->byval_arg;
    static auto* handTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* palmForwardLocal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* handAttachPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* isGrabbing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* wasGrabPressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* heldEquipment = &::il2cpp_utils::GetClassFromName("", "HoldableObject")->byval_arg;
    static auto* grabDisabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* gridPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "UpdateHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handType, handTransform, palmForwardLocal, handAttachPoint, isGrabbing, wasGrabPressed, heldEquipment, grabDisabled, gridPlanes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::ClearGlowBumps
// Il2CppName: ClearGlowBumps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int)>(&GlobalNamespace::BuilderPieceInteractor::ClearGlowBumps)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "ClearGlowBumps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::AddGlowBumps
// Il2CppName: AddGlowBumps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int, ::GorillaTagScripts::BuilderPotentialPlacement)>(&GlobalNamespace::BuilderPieceInteractor::AddGlowBumps)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* potentialPlacement = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderPotentialPlacement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "AddGlowBumps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex, potentialPlacement});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::UpdateGlowBumps
// Il2CppName: UpdateGlowBumps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int, float)>(&GlobalNamespace::BuilderPieceInteractor::UpdateGlowBumps)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "UpdateGlowBumps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::UpdatePullApartOffset
// Il2CppName: UpdatePullApartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int, ::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3)>(&GlobalNamespace::BuilderPieceInteractor::UpdatePullApartOffset)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* potentialGrabPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* pullApartDiff = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "UpdatePullApartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex, potentialGrabPiece, pullApartDiff});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::ClearUnSnapOffset
// Il2CppName: ClearUnSnapOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(int, ::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderPieceInteractor::ClearUnSnapOffset)> {
  static const MethodInfo* get() {
    static auto* handIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* potentialGrabPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "ClearUnSnapOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIndex, potentialGrabPiece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::RemovePieceFromHeld
// Il2CppName: RemovePieceFromHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderPieceInteractor::RemovePieceFromHeld)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "RemovePieceFromHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::CalcPieceLocalPosAndRot
// Il2CppName: CalcPieceLocalPosAndRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Transform*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&GlobalNamespace::BuilderPieceInteractor::CalcPieceLocalPosAndRot)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* attachPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "CalcPieceLocalPosAndRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, worldRotation, attachPoint, localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::DisableCollisionsWithHands
// Il2CppName: DisableCollisionsWithHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::DisableCollisionsWithHands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "DisableCollisionsWithHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::DisableCollisionsWithHand
// Il2CppName: DisableCollisionsWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(bool)>(&GlobalNamespace::BuilderPieceInteractor::DisableCollisionsWithHand)> {
  static const MethodInfo* get() {
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "DisableCollisionsWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::UpdatePieceDisables
// Il2CppName: UpdatePieceDisables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)()>(&GlobalNamespace::BuilderPieceInteractor::UpdatePieceDisables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "UpdatePieceDisables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::UpdatePieceDisablesForHand
// Il2CppName: UpdatePieceDisablesForHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPieceInteractor::*)(bool)>(&GlobalNamespace::BuilderPieceInteractor::UpdatePieceDisablesForHand)> {
  static const MethodInfo* get() {
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), "UpdatePieceDisablesForHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BuilderPieceInteractor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BuilderPieceInteractor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPieceInteractor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
