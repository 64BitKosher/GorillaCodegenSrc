// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughLayer
#include "GlobalNamespace/OVRPassthroughLayer.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRPassthroughColorLut
  class OVRPassthroughColorLut;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughLayer::StylesHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughLayer::StylesHandler*, "", "OVRPassthroughLayer/StylesHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughLayer/StylesHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPassthroughLayer::StylesHandler : public ::Il2CppObject {
    public:
    public:
    // private OVRPassthroughLayer/NoneStyleHandler _noneHandler
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::OVRPassthroughLayer::NoneStyleHandler* noneHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::NoneStyleHandler*) == 0x8);
    // private OVRPassthroughLayer/ColorLutHandler _lutHandler
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::OVRPassthroughLayer::ColorLutHandler* lutHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::ColorLutHandler*) == 0x8);
    // private OVRPassthroughLayer/InterpolatedColorLutHandler _interpolatedLutHandler
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler* interpolatedLutHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*) == 0x8);
    // private OVRPassthroughLayer/MonoToRgbaStyleHandler _monoToRgbaHandler
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler* monoToRgbaHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*) == 0x8);
    // private OVRPassthroughLayer/MonoToMonoStyleHandler _monoToMonoHandler
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OVRPassthroughLayer::MonoToMonoStyleHandler* monoToMonoHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::MonoToMonoStyleHandler*) == 0x8);
    // private OVRPassthroughLayer/BCSStyleHandler _bcsHandler
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::OVRPassthroughLayer::BCSStyleHandler* bcsHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::BCSStyleHandler*) == 0x8);
    // private System.Runtime.InteropServices.GCHandle _colorMapDataHandle
    // Size: 0x8
    // Offset: 0x40
    ::System::Runtime::InteropServices::GCHandle colorMapDataHandle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x8);
    // private System.Byte[] _colorMapData
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> colorMapData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public OVRPassthroughLayer/IStyleHandler CurrentStyleHandler
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler* CurrentStyleHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::IStyleHandler*) == 0x8);
    public:
    // Get instance field reference: private OVRPassthroughLayer/NoneStyleHandler _noneHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::NoneStyleHandler*& dyn__noneHandler();
    // Get instance field reference: private OVRPassthroughLayer/ColorLutHandler _lutHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::ColorLutHandler*& dyn__lutHandler();
    // Get instance field reference: private OVRPassthroughLayer/InterpolatedColorLutHandler _interpolatedLutHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*& dyn__interpolatedLutHandler();
    // Get instance field reference: private OVRPassthroughLayer/MonoToRgbaStyleHandler _monoToRgbaHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::MonoToRgbaStyleHandler*& dyn__monoToRgbaHandler();
    // Get instance field reference: private OVRPassthroughLayer/MonoToMonoStyleHandler _monoToMonoHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::MonoToMonoStyleHandler*& dyn__monoToMonoHandler();
    // Get instance field reference: private OVRPassthroughLayer/BCSStyleHandler _bcsHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::BCSStyleHandler*& dyn__bcsHandler();
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle _colorMapDataHandle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn__colorMapDataHandle();
    // Get instance field reference: private System.Byte[] _colorMapData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__colorMapData();
    // Get instance field reference: public OVRPassthroughLayer/IStyleHandler CurrentStyleHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler*& dyn_CurrentStyleHandler();
    // public System.Void .ctor()
    // Offset: 0x48EB8F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughLayer::StylesHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughLayer::StylesHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughLayer::StylesHandler*, creationType>()));
    }
    // public System.Void SetStyleHandler(OVRPlugin/InsightPassthroughColorMapType type)
    // Offset: 0x48E93D0
    void SetStyleHandler(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType type);
    // private OVRPassthroughLayer/IStyleHandler GetStyleHandler(OVRPlugin/InsightPassthroughColorMapType type)
    // Offset: 0x48EBCF0
    ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler* GetStyleHandler(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType type);
    // public System.Void SetColorLutHandler(OVRPassthroughColorLut lut, System.Single weight)
    // Offset: 0x48E8A40
    void SetColorLutHandler(::GlobalNamespace::OVRPassthroughColorLut* lut, float weight);
    // System.Void SetInterpolatedColorLutHandler(OVRPassthroughColorLut lutSource, OVRPassthroughColorLut lutTarget, System.Single weight)
    // Offset: 0x48E8BD0
    void SetInterpolatedColorLutHandler(::GlobalNamespace::OVRPassthroughColorLut* lutSource, ::GlobalNamespace::OVRPassthroughColorLut* lutTarget, float weight);
    // System.Void SetMonoToRgbaHandler(UnityEngine.Color[] values)
    // Offset: 0x48E8868
    void SetMonoToRgbaHandler(::ArrayW<::UnityEngine::Color> values);
    // System.Void SetMonoToMonoHandler(System.Byte[] values)
    // Offset: 0x48E9050
    void SetMonoToMonoHandler(::ArrayW<uint8_t> values);
  }; // OVRPassthroughLayer/StylesHandler
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughLayer::StylesHandler), 80 + sizeof(::GlobalNamespace::OVRPassthroughLayer::IStyleHandler*)> __GlobalNamespace_OVRPassthroughLayer_StylesHandlerSizeCheck;
  static_assert(sizeof(OVRPassthroughLayer::StylesHandler) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetStyleHandler
// Il2CppName: SetStyleHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetStyleHandler)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughColorMapType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "SetStyleHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::GetStyleHandler
// Il2CppName: GetStyleHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPassthroughLayer::IStyleHandler* (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::GetStyleHandler)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughColorMapType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "GetStyleHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetColorLutHandler
// Il2CppName: SetColorLutHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::GlobalNamespace::OVRPassthroughColorLut*, float)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetColorLutHandler)> {
  static const MethodInfo* get() {
    static auto* lut = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "SetColorLutHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lut, weight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetInterpolatedColorLutHandler
// Il2CppName: SetInterpolatedColorLutHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::GlobalNamespace::OVRPassthroughColorLut*, ::GlobalNamespace::OVRPassthroughColorLut*, float)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetInterpolatedColorLutHandler)> {
  static const MethodInfo* get() {
    static auto* lutSource = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    static auto* lutTarget = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "SetInterpolatedColorLutHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lutSource, lutTarget, weight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetMonoToRgbaHandler
// Il2CppName: SetMonoToRgbaHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::ArrayW<::UnityEngine::Color>)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetMonoToRgbaHandler)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "SetMonoToRgbaHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetMonoToMonoHandler
// Il2CppName: SetMonoToMonoHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::StylesHandler::*)(::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughLayer::StylesHandler::SetMonoToMonoHandler)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::StylesHandler*), "SetMonoToMonoHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
