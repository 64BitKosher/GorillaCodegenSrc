// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaGameManager
#include "GlobalNamespace/GorillaGameManager.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: BattleStatus because it is already included!
  // Skipping declaration: BattleState because it is already included!
  // Forward declaring type: GameModeSerializer
  class GameModeSerializer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: GorillaGameModes
namespace GorillaGameModes {
  // Forward declaring type: GameModeType
  struct GameModeType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaBattleManager
  class GorillaBattleManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaBattleManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaBattleManager*, "", "GorillaBattleManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: GorillaBattleManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaBattleManager : public ::GlobalNamespace::GorillaGameManager {
    public:
    // Nested type: ::GlobalNamespace::GorillaBattleManager::BattleStatus
    struct BattleStatus;
    // Nested type: ::GlobalNamespace::GorillaBattleManager::BattleState
    struct BattleState;
    // Nested type: ::GlobalNamespace::GorillaBattleManager::$$c__DisplayClass81_0
    class $$c__DisplayClass81_0;
    // Nested type: ::GlobalNamespace::GorillaBattleManager::$StartBattleCountdown$d__45
    class $StartBattleCountdown$d__45;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaBattleManager/BattleStatus
    // [TokenAttribute] Offset: FFFFFFFF
    struct BattleStatus/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BattleStatus
      constexpr BattleStatus(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaBattleManager/BattleStatus RedTeam
      static constexpr const int RedTeam = 1;
      // Get static field: static public GorillaBattleManager/BattleStatus RedTeam
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_RedTeam();
      // Set static field: static public GorillaBattleManager/BattleStatus RedTeam
      static void _set_RedTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus BlueTeam
      static constexpr const int BlueTeam = 2;
      // Get static field: static public GorillaBattleManager/BattleStatus BlueTeam
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_BlueTeam();
      // Set static field: static public GorillaBattleManager/BattleStatus BlueTeam
      static void _set_BlueTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus Normal
      static constexpr const int Normal = 4;
      // Get static field: static public GorillaBattleManager/BattleStatus Normal
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_Normal();
      // Set static field: static public GorillaBattleManager/BattleStatus Normal
      static void _set_Normal(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus Hit
      static constexpr const int Hit = 8;
      // Get static field: static public GorillaBattleManager/BattleStatus Hit
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_Hit();
      // Set static field: static public GorillaBattleManager/BattleStatus Hit
      static void _set_Hit(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus Stunned
      static constexpr const int Stunned = 16;
      // Get static field: static public GorillaBattleManager/BattleStatus Stunned
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_Stunned();
      // Set static field: static public GorillaBattleManager/BattleStatus Stunned
      static void _set_Stunned(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus Grace
      static constexpr const int Grace = 32;
      // Get static field: static public GorillaBattleManager/BattleStatus Grace
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_Grace();
      // Set static field: static public GorillaBattleManager/BattleStatus Grace
      static void _set_Grace(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus Eliminated
      static constexpr const int Eliminated = 64;
      // Get static field: static public GorillaBattleManager/BattleStatus Eliminated
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_Eliminated();
      // Set static field: static public GorillaBattleManager/BattleStatus Eliminated
      static void _set_Eliminated(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // static field const value: static public GorillaBattleManager/BattleStatus None
      static constexpr const int None = 0;
      // Get static field: static public GorillaBattleManager/BattleStatus None
      static ::GlobalNamespace::GorillaBattleManager::BattleStatus _get_None();
      // Set static field: static public GorillaBattleManager/BattleStatus None
      static void _set_None(::GlobalNamespace::GorillaBattleManager::BattleStatus value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaBattleManager/BattleStatus
    #pragma pack(pop)
    static check_size<sizeof(GorillaBattleManager::BattleStatus), 0 + sizeof(int)> __GlobalNamespace_GorillaBattleManager_BattleStatusSizeCheck;
    static_assert(sizeof(GorillaBattleManager::BattleStatus) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaBattleManager/BattleState
    // [TokenAttribute] Offset: FFFFFFFF
    struct BattleState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BattleState
      constexpr BattleState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaBattleManager/BattleState NotEnoughPlayers
      static constexpr const int NotEnoughPlayers = 0;
      // Get static field: static public GorillaBattleManager/BattleState NotEnoughPlayers
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_NotEnoughPlayers();
      // Set static field: static public GorillaBattleManager/BattleState NotEnoughPlayers
      static void _set_NotEnoughPlayers(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState GameEnd
      static constexpr const int GameEnd = 1;
      // Get static field: static public GorillaBattleManager/BattleState GameEnd
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_GameEnd();
      // Set static field: static public GorillaBattleManager/BattleState GameEnd
      static void _set_GameEnd(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState GameEndWaiting
      static constexpr const int GameEndWaiting = 2;
      // Get static field: static public GorillaBattleManager/BattleState GameEndWaiting
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_GameEndWaiting();
      // Set static field: static public GorillaBattleManager/BattleState GameEndWaiting
      static void _set_GameEndWaiting(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState StartCountdown
      static constexpr const int StartCountdown = 3;
      // Get static field: static public GorillaBattleManager/BattleState StartCountdown
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_StartCountdown();
      // Set static field: static public GorillaBattleManager/BattleState StartCountdown
      static void _set_StartCountdown(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState CountingDownToStart
      static constexpr const int CountingDownToStart = 4;
      // Get static field: static public GorillaBattleManager/BattleState CountingDownToStart
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_CountingDownToStart();
      // Set static field: static public GorillaBattleManager/BattleState CountingDownToStart
      static void _set_CountingDownToStart(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState GameStart
      static constexpr const int GameStart = 5;
      // Get static field: static public GorillaBattleManager/BattleState GameStart
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_GameStart();
      // Set static field: static public GorillaBattleManager/BattleState GameStart
      static void _set_GameStart(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // static field const value: static public GorillaBattleManager/BattleState GameRunning
      static constexpr const int GameRunning = 6;
      // Get static field: static public GorillaBattleManager/BattleState GameRunning
      static ::GlobalNamespace::GorillaBattleManager::BattleState _get_GameRunning();
      // Set static field: static public GorillaBattleManager/BattleState GameRunning
      static void _set_GameRunning(::GlobalNamespace::GorillaBattleManager::BattleState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaBattleManager/BattleState
    #pragma pack(pop)
    static check_size<sizeof(GorillaBattleManager::BattleState), 0 + sizeof(int)> __GlobalNamespace_GorillaBattleManager_BattleStateSizeCheck;
    static_assert(sizeof(GorillaBattleManager::BattleState) == 0x4);
    public:
    // private System.Single playerMin
    // Size: 0x4
    // Offset: 0xD8
    float playerMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagCoolDown
    // Size: 0x4
    // Offset: 0xDC
    float tagCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> playerLives
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::Dictionary_2<int, int>* playerLives;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int32,GorillaBattleManager/BattleStatus> playerStatusDict
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>* playerStatusDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Single> playerHitTimes
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Dictionary_2<int, float>* playerHitTimes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, float>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Single> playerStunTimes
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::Dictionary_2<int, float>* playerStunTimes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, float>*) == 0x8);
    // public System.Int32[] playerActorNumberArray
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<int> playerActorNumberArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] playerLivesArray
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<int> playerLivesArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public GorillaBattleManager/BattleStatus[] playerStatusArray
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::GlobalNamespace::GorillaBattleManager::BattleStatus> playerStatusArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaBattleManager::BattleStatus>) == 0x8);
    // public System.Boolean teamBattle
    // Size: 0x1
    // Offset: 0x118
    bool teamBattle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: teamBattle and: countDownTime
    char __padding9[0x3] = {};
    // public System.Int32 countDownTime
    // Size: 0x4
    // Offset: 0x11C
    int countDownTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single timeBattleEnded
    // Size: 0x4
    // Offset: 0x120
    float timeBattleEnded;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hitCooldown
    // Size: 0x4
    // Offset: 0x124
    float hitCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stunGracePeriod
    // Size: 0x4
    // Offset: 0x128
    float stunGracePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: stunGracePeriod and: objRef
    char __padding13[0x4] = {};
    // public System.Object objRef
    // Size: 0x8
    // Offset: 0x130
    ::Il2CppObject* objRef;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean playerInList
    // Size: 0x1
    // Offset: 0x138
    bool playerInList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean coroutineRunning
    // Size: 0x1
    // Offset: 0x139
    bool coroutineRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: coroutineRunning and: lives
    char __padding16[0x2] = {};
    // private System.Int32 lives
    // Size: 0x4
    // Offset: 0x13C
    int lives;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 outLives
    // Size: 0x4
    // Offset: 0x140
    int outLives;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bcount
    // Size: 0x4
    // Offset: 0x144
    int bcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rcount
    // Size: 0x4
    // Offset: 0x148
    int rcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 randInt
    // Size: 0x4
    // Offset: 0x14C
    int randInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single outHitTime
    // Size: 0x4
    // Offset: 0x150
    float outHitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: outHitTime and: tempView
    char __padding22[0x4] = {};
    // private Photon.Pun.PhotonView tempView
    // Size: 0x8
    // Offset: 0x158
    ::Photon::Pun::PhotonView* tempView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>[] keyValuePairs
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, int>> keyValuePairs;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, int>>) == 0x8);
    // private System.Collections.Generic.KeyValuePair`2<System.Int32,GorillaBattleManager/BattleStatus>[] keyValuePairsStatus
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>> keyValuePairsStatus;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>>) == 0x8);
    // private GorillaBattleManager/BattleStatus tempStatus
    // Size: 0x4
    // Offset: 0x170
    ::GlobalNamespace::GorillaBattleManager::BattleStatus tempStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaBattleManager::BattleStatus) == 0x4);
    // private GorillaBattleManager/BattleState currentState
    // Size: 0x4
    // Offset: 0x174
    ::GlobalNamespace::GorillaBattleManager::BattleState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaBattleManager::BattleState) == 0x4);
    public:
    // Get static field: static System.String ssString
    static ::StringW _get_ssString();
    // Set static field: static System.String ssString
    static void _set_ssString(::StringW value);
    // Get instance field reference: private System.Single playerMin
    [[deprecated("Use field access instead!")]] float& dyn_playerMin();
    // Get instance field reference: public System.Single tagCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tagCoolDown();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> playerLives
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_playerLives();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,GorillaBattleManager/BattleStatus> playerStatusDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>*& dyn_playerStatusDict();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,System.Single> playerHitTimes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, float>*& dyn_playerHitTimes();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,System.Single> playerStunTimes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, float>*& dyn_playerStunTimes();
    // Get instance field reference: public System.Int32[] playerActorNumberArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_playerActorNumberArray();
    // Get instance field reference: public System.Int32[] playerLivesArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_playerLivesArray();
    // Get instance field reference: public GorillaBattleManager/BattleStatus[] playerStatusArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaBattleManager::BattleStatus>& dyn_playerStatusArray();
    // Get instance field reference: public System.Boolean teamBattle
    [[deprecated("Use field access instead!")]] bool& dyn_teamBattle();
    // Get instance field reference: public System.Int32 countDownTime
    [[deprecated("Use field access instead!")]] int& dyn_countDownTime();
    // Get instance field reference: private System.Single timeBattleEnded
    [[deprecated("Use field access instead!")]] float& dyn_timeBattleEnded();
    // Get instance field reference: public System.Single hitCooldown
    [[deprecated("Use field access instead!")]] float& dyn_hitCooldown();
    // Get instance field reference: public System.Single stunGracePeriod
    [[deprecated("Use field access instead!")]] float& dyn_stunGracePeriod();
    // Get instance field reference: public System.Object objRef
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_objRef();
    // Get instance field reference: private System.Boolean playerInList
    [[deprecated("Use field access instead!")]] bool& dyn_playerInList();
    // Get instance field reference: private System.Boolean coroutineRunning
    [[deprecated("Use field access instead!")]] bool& dyn_coroutineRunning();
    // Get instance field reference: private System.Int32 lives
    [[deprecated("Use field access instead!")]] int& dyn_lives();
    // Get instance field reference: private System.Int32 outLives
    [[deprecated("Use field access instead!")]] int& dyn_outLives();
    // Get instance field reference: private System.Int32 bcount
    [[deprecated("Use field access instead!")]] int& dyn_bcount();
    // Get instance field reference: private System.Int32 rcount
    [[deprecated("Use field access instead!")]] int& dyn_rcount();
    // Get instance field reference: private System.Int32 randInt
    [[deprecated("Use field access instead!")]] int& dyn_randInt();
    // Get instance field reference: private System.Single outHitTime
    [[deprecated("Use field access instead!")]] float& dyn_outHitTime();
    // Get instance field reference: private Photon.Pun.PhotonView tempView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_tempView();
    // Get instance field reference: private System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>[] keyValuePairs
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, int>>& dyn_keyValuePairs();
    // Get instance field reference: private System.Collections.Generic.KeyValuePair`2<System.Int32,GorillaBattleManager/BattleStatus>[] keyValuePairsStatus
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::KeyValuePair_2<int, ::GlobalNamespace::GorillaBattleManager::BattleStatus>>& dyn_keyValuePairsStatus();
    // Get instance field reference: private GorillaBattleManager/BattleStatus tempStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager::BattleStatus& dyn_tempStatus();
    // Get instance field reference: private GorillaBattleManager/BattleState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager::BattleState& dyn_currentState();
    // private System.Void ActivateBattleBalloons(System.Boolean enable)
    // Offset: 0x27009B4
    void ActivateBattleBalloons(bool enable);
    // private System.Boolean HasFlag(GorillaBattleManager/BattleStatus state, GorillaBattleManager/BattleStatus statusFlag)
    // Offset: 0x2700AC0
    bool HasFlag(::GlobalNamespace::GorillaBattleManager::BattleStatus state, ::GlobalNamespace::GorillaBattleManager::BattleStatus statusFlag);
    // private System.Void ActivateDefaultSlingShot()
    // Offset: 0x2700B14
    void ActivateDefaultSlingShot();
    // private System.Void VerifyPlayersInDict(System.Collections.Generic.Dictionary`2<System.Int32,T> dict)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void VerifyPlayersInDict(::System::Collections::Generic::Dictionary_2<int, T>* dict) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaBattleManager::VerifyPlayersInDict");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyPlayersInDict", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dict)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, dict);
    }
    // private System.Void Transition(GorillaBattleManager/BattleState newState)
    // Offset: 0x2701604
    void Transition(::GlobalNamespace::GorillaBattleManager::BattleState newState);
    // public System.Void UpdateBattleState()
    // Offset: 0x2700FF0
    void UpdateBattleState();
    // private System.Boolean CheckForGameEnd()
    // Offset: 0x27016E0
    bool CheckForGameEnd();
    // public System.Collections.IEnumerator StartBattleCountdown()
    // Offset: 0x2701F44
    ::System::Collections::IEnumerator* StartBattleCountdown();
    // public System.Void StartBattle()
    // Offset: 0x2701FB0
    void StartBattle();
    // private System.Boolean EndBattleGame()
    // Offset: 0x2701A90
    bool EndBattleGame();
    // public System.Boolean BattleEnd()
    // Offset: 0x2701B88
    bool BattleEnd();
    // public System.Boolean SlingshotHit(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x2702434
    bool SlingshotHit(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public System.Void ReportSlingshotHit(Photon.Realtime.Player taggedPlayer, UnityEngine.Vector3 hitLocation, System.Int32 projectileCount, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x27024B4
    void ReportSlingshotHit(::Photon::Realtime::Player* taggedPlayer, ::UnityEngine::Vector3 hitLocation, int projectileCount, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Int32 GetPlayerLives(Photon.Realtime.Player player)
    // Offset: 0x2702A74
    int GetPlayerLives(::Photon::Realtime::Player* player);
    // public System.Boolean PlayerInHitCooldown(Photon.Realtime.Player player)
    // Offset: 0x2702AEC
    bool PlayerInHitCooldown(::Photon::Realtime::Player* player);
    // public System.Boolean PlayerInStunCooldown(Photon.Realtime.Player player)
    // Offset: 0x2702C04
    bool PlayerInStunCooldown(::Photon::Realtime::Player* player);
    // public GorillaBattleManager/BattleStatus GetPlayerStatus(Photon.Realtime.Player player)
    // Offset: 0x2702B8C
    ::GlobalNamespace::GorillaBattleManager::BattleStatus GetPlayerStatus(::Photon::Realtime::Player* player);
    // public System.Boolean OnRedTeam(GorillaBattleManager/BattleStatus status)
    // Offset: 0x270434C
    bool OnRedTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus status);
    // public System.Boolean OnRedTeam(Photon.Realtime.Player player)
    // Offset: 0x2704354
    bool OnRedTeam(::Photon::Realtime::Player* player);
    // public System.Boolean OnBlueTeam(GorillaBattleManager/BattleStatus status)
    // Offset: 0x2704368
    bool OnBlueTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus status);
    // public System.Boolean OnBlueTeam(Photon.Realtime.Player player)
    // Offset: 0x2704370
    bool OnBlueTeam(::Photon::Realtime::Player* player);
    // public System.Boolean OnNoTeam(GorillaBattleManager/BattleStatus status)
    // Offset: 0x2704384
    bool OnNoTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus status);
    // public System.Boolean OnNoTeam(Photon.Realtime.Player player)
    // Offset: 0x2704390
    bool OnNoTeam(::Photon::Realtime::Player* player);
    // public System.Boolean OnSameTeam(GorillaBattleManager/BattleStatus playerA, GorillaBattleManager/BattleStatus playerB)
    // Offset: 0x27043B0
    bool OnSameTeam(::GlobalNamespace::GorillaBattleManager::BattleStatus playerA, ::GlobalNamespace::GorillaBattleManager::BattleStatus playerB);
    // public System.Boolean OnSameTeam(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x2702A38
    bool OnSameTeam(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public System.Boolean LocalCanHit(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x27043C0
    bool LocalCanHit(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // private System.Void CopyBattleDictToArray()
    // Offset: 0x2700E0C
    void CopyBattleDictToArray();
    // private System.Void CopyArrayToBattleDict()
    // Offset: 0x27037F0
    void CopyArrayToBattleDict();
    // private GorillaBattleManager/BattleStatus SetFlag(GorillaBattleManager/BattleStatus currState, GorillaBattleManager/BattleStatus flag)
    // Offset: 0x2704400
    ::GlobalNamespace::GorillaBattleManager::BattleStatus SetFlag(::GlobalNamespace::GorillaBattleManager::BattleStatus currState, ::GlobalNamespace::GorillaBattleManager::BattleStatus flag);
    // private GorillaBattleManager/BattleStatus SetFlagExclusive(GorillaBattleManager/BattleStatus currState, GorillaBattleManager/BattleStatus flag)
    // Offset: 0x2704408
    ::GlobalNamespace::GorillaBattleManager::BattleStatus SetFlagExclusive(::GlobalNamespace::GorillaBattleManager::BattleStatus currState, ::GlobalNamespace::GorillaBattleManager::BattleStatus flag);
    // private GorillaBattleManager/BattleStatus ClearFlag(GorillaBattleManager/BattleStatus currState, GorillaBattleManager/BattleStatus flag)
    // Offset: 0x2704410
    ::GlobalNamespace::GorillaBattleManager::BattleStatus ClearFlag(::GlobalNamespace::GorillaBattleManager::BattleStatus currState, ::GlobalNamespace::GorillaBattleManager::BattleStatus flag);
    // private System.Boolean FlagIsSet(GorillaBattleManager/BattleStatus currState, GorillaBattleManager/BattleStatus flag)
    // Offset: 0x2704418
    bool FlagIsSet(::GlobalNamespace::GorillaBattleManager::BattleStatus currState, ::GlobalNamespace::GorillaBattleManager::BattleStatus flag);
    // public System.Void RandomizeTeams()
    // Offset: 0x2701BB4
    void RandomizeTeams();
    // public System.Void AddPlayerToCorrectTeam(Photon.Realtime.Player newPlayer)
    // Offset: 0x2702FA4
    void AddPlayerToCorrectTeam(::Photon::Realtime::Player* newPlayer);
    // private System.Void InitializePlayerStatus()
    // Offset: 0x27019B4
    void InitializePlayerStatus();
    // private System.Void UpdatePlayerStatus()
    // Offset: 0x270219C
    void UpdatePlayerStatus();
    // static private System.Void .cctor()
    // Offset: 0x27046FC
    static void _cctor();
    // public override GorillaGameModes.GameModeType GameType()
    // Offset: 0x2700ACC
    // Implemented from: GorillaGameManager
    // Base method: GorillaGameModes.GameModeType GorillaGameManager::GameType()
    ::GorillaGameModes::GameModeType GameType();
    // public override System.String GameModeName()
    // Offset: 0x2700AD4
    // Implemented from: GorillaGameManager
    // Base method: System.String GorillaGameManager::GameModeName()
    ::StringW GameModeName();
    // public override System.Void Awake()
    // Offset: 0x2700C7C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::Awake()
    void Awake();
    // public override System.Void StartPlaying()
    // Offset: 0x2700C8C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::StartPlaying()
    void StartPlaying();
    // public override System.Void StopPlaying()
    // Offset: 0x2701240
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::StopPlaying()
    void StopPlaying();
    // public override System.Void Reset()
    // Offset: 0x2701458
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::Reset()
    void Reset();
    // override System.Void NetworkLinkSetup(GameModeSerializer netSerializer)
    // Offset: 0x2701584
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::NetworkLinkSetup(GameModeSerializer netSerializer)
    void NetworkLinkSetup(::GlobalNamespace::GameModeSerializer* netSerializer);
    // public override System.Void HitPlayer(Photon.Realtime.Player player)
    // Offset: 0x2702CAC
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::HitPlayer(Photon.Realtime.Player player)
    void HitPlayer(::Photon::Realtime::Player* player);
    // public override System.Boolean CanAffectPlayer(Photon.Realtime.Player player, System.Boolean thisFrame)
    // Offset: 0x2702DB8
    // Implemented from: GorillaGameManager
    // Base method: System.Boolean GorillaGameManager::CanAffectPlayer(Photon.Realtime.Player player, System.Boolean thisFrame)
    bool CanAffectPlayer(::Photon::Realtime::Player* player, bool thisFrame);
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x2702E38
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x270332C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2703480
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    void OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public override System.Void OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2703600
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    void OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public override System.Int32 MyMatIndex(Photon.Realtime.Player forPlayer)
    // Offset: 0x2703A3C
    // Implemented from: GorillaGameManager
    // Base method: System.Int32 GorillaGameManager::MyMatIndex(Photon.Realtime.Player forPlayer)
    int MyMatIndex(::Photon::Realtime::Player* forPlayer);
    // public override System.Single[] LocalPlayerSpeed()
    // Offset: 0x2703AC8
    // Implemented from: GorillaGameManager
    // Base method: System.Single[] GorillaGameManager::LocalPlayerSpeed()
    ::ArrayW<float> LocalPlayerSpeed();
    // public override System.Void Tick()
    // Offset: 0x2703BF0
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::Tick()
    void Tick();
    // public override System.Void InfrequentUpdate()
    // Offset: 0x2703F54
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::InfrequentUpdate()
    void InfrequentUpdate();
    // public override System.Boolean LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x27043A8
    // Implemented from: GorillaGameManager
    // Base method: System.Boolean GorillaGameManager::LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    bool LocalCanTag(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public System.Void .ctor()
    // Offset: 0x270442C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaBattleManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaBattleManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaBattleManager*, creationType>()));
    }
  }; // GorillaBattleManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaBattleManager), 372 + sizeof(::GlobalNamespace::GorillaBattleManager::BattleState)> __GlobalNamespace_GorillaBattleManagerSizeCheck;
  static_assert(sizeof(GorillaBattleManager) == 0x178);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaBattleManager::BattleState, "", "GorillaBattleManager/BattleState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaBattleManager::BattleStatus, "", "GorillaBattleManager/BattleStatus");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::ActivateBattleBalloons
// Il2CppName: ActivateBattleBalloons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(bool)>(&GlobalNamespace::GorillaBattleManager::ActivateBattleBalloons)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "ActivateBattleBalloons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::HasFlag)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* statusFlag = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, statusFlag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::ActivateDefaultSlingShot
// Il2CppName: ActivateDefaultSlingShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::ActivateDefaultSlingShot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "ActivateDefaultSlingShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::VerifyPlayersInDict
// Il2CppName: VerifyPlayersInDict
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::Transition
// Il2CppName: Transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleState)>(&GlobalNamespace::GorillaBattleManager::Transition)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "Transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::UpdateBattleState
// Il2CppName: UpdateBattleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::UpdateBattleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "UpdateBattleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::CheckForGameEnd
// Il2CppName: CheckForGameEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::CheckForGameEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "CheckForGameEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::StartBattleCountdown
// Il2CppName: StartBattleCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::StartBattleCountdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "StartBattleCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::StartBattle
// Il2CppName: StartBattle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::StartBattle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "StartBattle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::EndBattleGame
// Il2CppName: EndBattleGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::EndBattleGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "EndBattleGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::BattleEnd
// Il2CppName: BattleEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::BattleEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "BattleEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::SlingshotHit
// Il2CppName: SlingshotHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::SlingshotHit)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "SlingshotHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::ReportSlingshotHit
// Il2CppName: ReportSlingshotHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, ::UnityEngine::Vector3, int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaBattleManager::ReportSlingshotHit)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* hitLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "ReportSlingshotHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, hitLocation, projectileCount, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::GetPlayerLives
// Il2CppName: GetPlayerLives
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::GetPlayerLives)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "GetPlayerLives", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::PlayerInHitCooldown
// Il2CppName: PlayerInHitCooldown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::PlayerInHitCooldown)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "PlayerInHitCooldown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::PlayerInStunCooldown
// Il2CppName: PlayerInStunCooldown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::PlayerInStunCooldown)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "PlayerInStunCooldown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::GetPlayerStatus
// Il2CppName: GetPlayerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaBattleManager::BattleStatus (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::GetPlayerStatus)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "GetPlayerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnRedTeam
// Il2CppName: OnRedTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::OnRedTeam)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnRedTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnRedTeam
// Il2CppName: OnRedTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnRedTeam)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnRedTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnBlueTeam
// Il2CppName: OnBlueTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::OnBlueTeam)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnBlueTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnBlueTeam
// Il2CppName: OnBlueTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnBlueTeam)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnBlueTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnNoTeam
// Il2CppName: OnNoTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::OnNoTeam)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnNoTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnNoTeam
// Il2CppName: OnNoTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnNoTeam)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnNoTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnSameTeam
// Il2CppName: OnSameTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::OnSameTeam)> {
  static const MethodInfo* get() {
    static auto* playerA = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* playerB = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnSameTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerA, playerB});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnSameTeam
// Il2CppName: OnSameTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnSameTeam)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnSameTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::LocalCanHit
// Il2CppName: LocalCanHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::LocalCanHit)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "LocalCanHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::CopyBattleDictToArray
// Il2CppName: CopyBattleDictToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::CopyBattleDictToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "CopyBattleDictToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::CopyArrayToBattleDict
// Il2CppName: CopyArrayToBattleDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::CopyArrayToBattleDict)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "CopyArrayToBattleDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::SetFlag
// Il2CppName: SetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaBattleManager::BattleStatus (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::SetFlag)> {
  static const MethodInfo* get() {
    static auto* currState = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "SetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currState, flag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::SetFlagExclusive
// Il2CppName: SetFlagExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaBattleManager::BattleStatus (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::SetFlagExclusive)> {
  static const MethodInfo* get() {
    static auto* currState = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "SetFlagExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currState, flag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::ClearFlag
// Il2CppName: ClearFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaBattleManager::BattleStatus (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::ClearFlag)> {
  static const MethodInfo* get() {
    static auto* currState = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "ClearFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currState, flag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::FlagIsSet
// Il2CppName: FlagIsSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GorillaBattleManager::BattleStatus, ::GlobalNamespace::GorillaBattleManager::BattleStatus)>(&GlobalNamespace::GorillaBattleManager::FlagIsSet)> {
  static const MethodInfo* get() {
    static auto* currState = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("", "GorillaBattleManager/BattleStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "FlagIsSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currState, flag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::RandomizeTeams
// Il2CppName: RandomizeTeams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::RandomizeTeams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "RandomizeTeams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::AddPlayerToCorrectTeam
// Il2CppName: AddPlayerToCorrectTeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::AddPlayerToCorrectTeam)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "AddPlayerToCorrectTeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::InitializePlayerStatus
// Il2CppName: InitializePlayerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::InitializePlayerStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "InitializePlayerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::UpdatePlayerStatus
// Il2CppName: UpdatePlayerStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::UpdatePlayerStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "UpdatePlayerStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaBattleManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::GameType
// Il2CppName: GameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaGameModes::GameModeType (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::GameType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "GameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::GameModeName
// Il2CppName: GameModeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::GameModeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "GameModeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::StartPlaying
// Il2CppName: StartPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::StartPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "StartPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::StopPlaying
// Il2CppName: StopPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::StopPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "StopPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::NetworkLinkSetup
// Il2CppName: NetworkLinkSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::GlobalNamespace::GameModeSerializer*)>(&GlobalNamespace::GorillaBattleManager::NetworkLinkSetup)> {
  static const MethodInfo* get() {
    static auto* netSerializer = &::il2cpp_utils::GetClassFromName("", "GameModeSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "NetworkLinkSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netSerializer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::HitPlayer
// Il2CppName: HitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::HitPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "HitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::CanAffectPlayer
// Il2CppName: CanAffectPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaBattleManager::CanAffectPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* thisFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "CanAffectPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, thisFrame});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnSerializeWrite
// Il2CppName: OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaBattleManager::OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::OnSerializeRead
// Il2CppName: OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaBattleManager::OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::MyMatIndex
// Il2CppName: MyMatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::MyMatIndex)> {
  static const MethodInfo* get() {
    static auto* forPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "MyMatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::LocalPlayerSpeed
// Il2CppName: LocalPlayerSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::LocalPlayerSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "LocalPlayerSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBattleManager::*)()>(&GlobalNamespace::GorillaBattleManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::LocalCanTag
// Il2CppName: LocalCanTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaBattleManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaBattleManager::LocalCanTag)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBattleManager*), "LocalCanTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaBattleManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
