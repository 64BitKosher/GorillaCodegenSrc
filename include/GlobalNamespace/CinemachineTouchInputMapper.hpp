// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CinemachineTouchInputMapper
  class CinemachineTouchInputMapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CinemachineTouchInputMapper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CinemachineTouchInputMapper*, "", "CinemachineTouchInputMapper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CinemachineTouchInputMapper
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineTouchInputMapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single TouchSensitivityX
    // Size: 0x4
    // Offset: 0x20
    float TouchSensitivityX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single TouchSensitivityY
    // Size: 0x4
    // Offset: 0x24
    float TouchSensitivityY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String TouchXInputMapTo
    // Size: 0x8
    // Offset: 0x28
    ::StringW TouchXInputMapTo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String TouchYInputMapTo
    // Size: 0x8
    // Offset: 0x30
    ::StringW TouchYInputMapTo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Single TouchSensitivityX
    [[deprecated("Use field access instead!")]] float& dyn_TouchSensitivityX();
    // Get instance field reference: public System.Single TouchSensitivityY
    [[deprecated("Use field access instead!")]] float& dyn_TouchSensitivityY();
    // Get instance field reference: public System.String TouchXInputMapTo
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TouchXInputMapTo();
    // Get instance field reference: public System.String TouchYInputMapTo
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TouchYInputMapTo();
    // private System.Void Start()
    // Offset: 0x2A7CF3C
    void Start();
    // private System.Single GetInputAxis(System.String axisName)
    // Offset: 0x2A7CFE8
    float GetInputAxis(::StringW axisName);
    // public System.Void .ctor()
    // Offset: 0x2A7D0AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineTouchInputMapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineTouchInputMapper*, creationType>()));
    }
  }; // CinemachineTouchInputMapper
  #pragma pack(pop)
  static check_size<sizeof(CinemachineTouchInputMapper), 48 + sizeof(::StringW)> __GlobalNamespace_CinemachineTouchInputMapperSizeCheck;
  static_assert(sizeof(CinemachineTouchInputMapper) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CinemachineTouchInputMapper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CinemachineTouchInputMapper::*)()>(&GlobalNamespace::CinemachineTouchInputMapper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineTouchInputMapper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineTouchInputMapper::GetInputAxis
// Il2CppName: GetInputAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CinemachineTouchInputMapper::*)(::StringW)>(&GlobalNamespace::CinemachineTouchInputMapper::GetInputAxis)> {
  static const MethodInfo* get() {
    static auto* axisName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineTouchInputMapper*), "GetInputAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axisName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineTouchInputMapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
