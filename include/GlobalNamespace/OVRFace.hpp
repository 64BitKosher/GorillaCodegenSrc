// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRFaceExpressions
#include "GlobalNamespace/OVRFaceExpressions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRFace
  class OVRFace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRFace);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRFace*, "", "OVRFace");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: OVRFace
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class OVRFace : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected internal OVRFaceExpressions _faceExpressions
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRFaceExpressions* faceExpressions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRFaceExpressions*) == 0x8);
    // protected internal System.Single _blendShapeStrengthMultiplier
    // Size: 0x4
    // Offset: 0x28
    float blendShapeStrengthMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blendShapeStrengthMultiplier and: skinnedMeshRenderer
    char __padding1[0x4] = {};
    // private UnityEngine.SkinnedMeshRenderer _skinnedMeshRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::SkinnedMeshRenderer* skinnedMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    public:
    // Get instance field reference: protected internal OVRFaceExpressions _faceExpressions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRFaceExpressions*& dyn__faceExpressions();
    // Get instance field reference: protected internal System.Single _blendShapeStrengthMultiplier
    [[deprecated("Use field access instead!")]] float& dyn__blendShapeStrengthMultiplier();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer _skinnedMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn__skinnedMeshRenderer();
    // public OVRFaceExpressions get_FaceExpressions()
    // Offset: 0x4947E44
    ::GlobalNamespace::OVRFaceExpressions* get_FaceExpressions();
    // public System.Void set_FaceExpressions(OVRFaceExpressions value)
    // Offset: 0x4947E4C
    void set_FaceExpressions(::GlobalNamespace::OVRFaceExpressions* value);
    // public System.Single get_BlendShapeStrengthMultiplier()
    // Offset: 0x4947E54
    float get_BlendShapeStrengthMultiplier();
    // public System.Void set_BlendShapeStrengthMultiplier(System.Single value)
    // Offset: 0x4947E5C
    void set_BlendShapeStrengthMultiplier(float value);
    // UnityEngine.SkinnedMeshRenderer RetrieveSkinnedMeshRenderer()
    // Offset: 0x4947E64
    ::UnityEngine::SkinnedMeshRenderer* RetrieveSkinnedMeshRenderer();
    // protected UnityEngine.SkinnedMeshRenderer get_SkinnedMesh()
    // Offset: 0x4947EAC
    ::UnityEngine::SkinnedMeshRenderer* get_SkinnedMesh();
    // protected System.Void Awake()
    // Offset: 0x4947EB4
    void Awake();
    // OVRFaceExpressions SearchFaceExpressions()
    // Offset: 0x4947FD8
    ::GlobalNamespace::OVRFaceExpressions* SearchFaceExpressions();
    // protected System.Void Start()
    // Offset: 0x49451D0
    void Start();
    // protected System.Void Update()
    // Offset: 0x4948030
    void Update();
    // protected internal OVRFaceExpressions/FaceExpression GetFaceExpression(System.Int32 blendShapeIndex)
    // Offset: 0x4948124
    ::GlobalNamespace::OVRFaceExpressions::FaceExpression GetFaceExpression(int blendShapeIndex);
    // protected internal System.Boolean GetWeightValue(System.Int32 blendShapeIndex, out System.Single weightValue)
    // Offset: 0x494812C
    bool GetWeightValue(int blendShapeIndex, ByRef<float> weightValue);
    // public System.Void .ctor()
    // Offset: 0x49453A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRFace* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRFace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRFace*, creationType>()));
    }
  }; // OVRFace
  #pragma pack(pop)
  static check_size<sizeof(OVRFace), 48 + sizeof(::UnityEngine::SkinnedMeshRenderer*)> __GlobalNamespace_OVRFaceSizeCheck;
  static_assert(sizeof(OVRFace) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::get_FaceExpressions
// Il2CppName: get_FaceExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions* (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::get_FaceExpressions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "get_FaceExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::set_FaceExpressions
// Il2CppName: set_FaceExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFace::*)(::GlobalNamespace::OVRFaceExpressions*)>(&GlobalNamespace::OVRFace::set_FaceExpressions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "set_FaceExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::get_BlendShapeStrengthMultiplier
// Il2CppName: get_BlendShapeStrengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::get_BlendShapeStrengthMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "get_BlendShapeStrengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::set_BlendShapeStrengthMultiplier
// Il2CppName: set_BlendShapeStrengthMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFace::*)(float)>(&GlobalNamespace::OVRFace::set_BlendShapeStrengthMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "set_BlendShapeStrengthMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::RetrieveSkinnedMeshRenderer
// Il2CppName: RetrieveSkinnedMeshRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SkinnedMeshRenderer* (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::RetrieveSkinnedMeshRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "RetrieveSkinnedMeshRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::get_SkinnedMesh
// Il2CppName: get_SkinnedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SkinnedMeshRenderer* (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::get_SkinnedMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "get_SkinnedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::SearchFaceExpressions
// Il2CppName: SearchFaceExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions* (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::SearchFaceExpressions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "SearchFaceExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFace::*)()>(&GlobalNamespace::OVRFace::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::GetFaceExpression
// Il2CppName: GetFaceExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions::FaceExpression (GlobalNamespace::OVRFace::*)(int)>(&GlobalNamespace::OVRFace::GetFaceExpression)> {
  static const MethodInfo* get() {
    static auto* blendShapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "GetFaceExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::GetWeightValue
// Il2CppName: GetWeightValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFace::*)(int, ByRef<float>)>(&GlobalNamespace::OVRFace::GetWeightValue)> {
  static const MethodInfo* get() {
    static auto* blendShapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weightValue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFace*), "GetWeightValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeIndex, weightValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
