// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HoldableObject
  class HoldableObject;
  // Forward declaring type: EquipmentInteractor
  class EquipmentInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InteractionPoint);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InteractionPoint*, "", "InteractionPoint");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: InteractionPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractionPoint : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // private HoldableObject parentHoldable
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::HoldableObject* parentHoldable;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HoldableObject*) == 0x8);
    // private System.Boolean <ignoreLeftHand>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool ignoreLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ignoreRightHand>k__BackingField
    // Size: 0x1
    // Offset: 0x29
    bool ignoreRightHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isNonSpawnedObject
    // Size: 0x1
    // Offset: 0x2A
    bool isNonSpawnedObject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNonSpawnedObject and: myCollider
    char __padding3[0x5] = {};
    // public UnityEngine.Collider myCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Collider* myCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public EquipmentInteractor interactor
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::EquipmentInteractor* interactor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EquipmentInteractor*) == 0x8);
    // public System.Boolean wasInLeft
    // Size: 0x1
    // Offset: 0x40
    bool wasInLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasInRight
    // Size: 0x1
    // Offset: 0x41
    bool wasInRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean forLocalPlayer
    // Size: 0x1
    // Offset: 0x42
    bool forLocalPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x43
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: private HoldableObject parentHoldable
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& dyn_parentHoldable();
    // Get instance field reference: private System.Boolean <ignoreLeftHand>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ignoreLeftHand$k__BackingField();
    // Get instance field reference: private System.Boolean <ignoreRightHand>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ignoreRightHand$k__BackingField();
    // Get instance field reference: private System.Boolean isNonSpawnedObject
    [[deprecated("Use field access instead!")]] bool& dyn_isNonSpawnedObject();
    // Get instance field reference: public UnityEngine.Collider myCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_myCollider();
    // Get instance field reference: public EquipmentInteractor interactor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& dyn_interactor();
    // Get instance field reference: public System.Boolean wasInLeft
    [[deprecated("Use field access instead!")]] bool& dyn_wasInLeft();
    // Get instance field reference: public System.Boolean wasInRight
    [[deprecated("Use field access instead!")]] bool& dyn_wasInRight();
    // Get instance field reference: public System.Boolean forLocalPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_forLocalPlayer();
    // Get instance field reference: private System.Boolean <IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSpawned$k__BackingField();
    // public System.Boolean get_ignoreLeftHand()
    // Offset: 0x2969584
    bool get_ignoreLeftHand();
    // private System.Void set_ignoreLeftHand(System.Boolean value)
    // Offset: 0x296958C
    void set_ignoreLeftHand(bool value);
    // public System.Boolean get_ignoreRightHand()
    // Offset: 0x2969598
    bool get_ignoreRightHand();
    // private System.Void set_ignoreRightHand(System.Boolean value)
    // Offset: 0x29695A0
    void set_ignoreRightHand(bool value);
    // public HoldableObject get_Holdable()
    // Offset: 0x29695AC
    ::GlobalNamespace::HoldableObject* get_Holdable();
    // public System.Boolean get_IsSpawned()
    // Offset: 0x29695B4
    bool get_IsSpawned();
    // public System.Void set_IsSpawned(System.Boolean value)
    // Offset: 0x29695BC
    void set_IsSpawned(bool value);
    // public System.Void OnSpawn()
    // Offset: 0x29695C8
    void OnSpawn();
    // public System.Void OnDespawn()
    // Offset: 0x2969754
    void OnDespawn();
    // private System.Void Awake()
    // Offset: 0x2969758
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x2969768
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x2969770
    void OnDisable();
    // public System.Void LateUpdate()
    // Offset: 0x2969840
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x2969C74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractionPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractionPoint*, creationType>()));
    }
  }; // InteractionPoint
  #pragma pack(pop)
  static check_size<sizeof(InteractionPoint), 67 + sizeof(bool)> __GlobalNamespace_InteractionPointSizeCheck;
  static_assert(sizeof(InteractionPoint) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::get_ignoreLeftHand
// Il2CppName: get_ignoreLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::get_ignoreLeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "get_ignoreLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::set_ignoreLeftHand
// Il2CppName: set_ignoreLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)(bool)>(&GlobalNamespace::InteractionPoint::set_ignoreLeftHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "set_ignoreLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::get_ignoreRightHand
// Il2CppName: get_ignoreRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::get_ignoreRightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "get_ignoreRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::set_ignoreRightHand
// Il2CppName: set_ignoreRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)(bool)>(&GlobalNamespace::InteractionPoint::set_ignoreRightHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "set_ignoreRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::get_Holdable
// Il2CppName: get_Holdable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::HoldableObject* (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::get_Holdable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "get_Holdable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::get_IsSpawned
// Il2CppName: get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::set_IsSpawned
// Il2CppName: set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)(bool)>(&GlobalNamespace::InteractionPoint::set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::OnDespawn
// Il2CppName: OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractionPoint::*)()>(&GlobalNamespace::InteractionPoint::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractionPoint*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractionPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
