// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTSturdyComponentRef`1<T>
  template<typename T>
  struct GTSturdyComponentRef_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::GTSturdyComponentRef_1, "", "GTSturdyComponentRef`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GTSturdyComponentRef`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct GTSturdyComponentRef_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private T _value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T value;
    // private System.String _relativePath
    // Size: 0x8
    // Offset: 0x0
    ::StringW relativePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Transform _baseXform
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* baseXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating value type constructor for type: GTSturdyComponentRef_1
    constexpr GTSturdyComponentRef_1(T value_ = {}, ::StringW relativePath_ = {}, ::UnityEngine::Transform* baseXform_ = {}) noexcept : value{value_}, relativePath{relativePath_}, baseXform{baseXform_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _value
    [[deprecated("Use field access instead!")]] T& dyn__value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::dyn__value");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String _relativePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__relativePath() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::dyn__relativePath");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_relativePath"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Transform _baseXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__baseXform() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::dyn__baseXform");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseXform"))->offset;
      return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public UnityEngine.Transform get_BaseXform()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Transform* get_BaseXform() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::get_BaseXform");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BaseXform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
    }
    // public System.Void set_BaseXform(UnityEngine.Transform value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_BaseXform(::UnityEngine::Transform* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::set_BaseXform");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_BaseXform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_Value(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Value(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSturdyComponentRef_1::set_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
  }; // GTSturdyComponentRef`1
  // Could not write size check! Type: GTSturdyComponentRef`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
