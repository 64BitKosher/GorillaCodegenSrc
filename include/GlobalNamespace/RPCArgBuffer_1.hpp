// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RPCArgBuffer`1<T>
  template<typename T>
  struct RPCArgBuffer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::RPCArgBuffer_1, "", "RPCArgBuffer`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: RPCArgBuffer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct RPCArgBuffer_1/*, public ::System::ValueType*/ {
    public:
    public:
    // public T Args
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T Args;
    // public System.Byte[] Data
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> Data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Int32 DataLength
    // Size: 0x4
    // Offset: 0x0
    int DataLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RPCArgBuffer_1
    constexpr RPCArgBuffer_1(T Args_ = {}, ::ArrayW<uint8_t> Data_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int DataLength_ = {}) noexcept : Args{Args_}, Data{Data_}, DataLength{DataLength_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public T Args
    [[deprecated("Use field access instead!")]] T& dyn_Args() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RPCArgBuffer_1::dyn_Args");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Args"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Byte[] Data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RPCArgBuffer_1::dyn_Data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
      return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 DataLength
    [[deprecated("Use field access instead!")]] int& dyn_DataLength() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RPCArgBuffer_1::dyn_DataLength");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DataLength"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(T argStruct)
    // Offset: 0xFFFFFFFFFFFFFFFF
    RPCArgBuffer_1(T argStruct) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RPCArgBuffer_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argStruct)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, argStruct);
    }
  }; // RPCArgBuffer`1
  // Could not write size check! Type: RPCArgBuffer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
