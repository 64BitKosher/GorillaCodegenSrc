// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaIKMgr
#include "GlobalNamespace/GorillaIKMgr.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobParallelFor
#include "Unity/Jobs/IJobParallelFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIKMgr::IKJob, "", "GorillaIKMgr/IKJob");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaIKMgr/IKJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct GorillaIKMgr::IKJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobParallelFor*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<GorillaIKMgr/IKInput> input
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKInput> input;
    // public Unity.Collections.NativeArray`1<GorillaIKMgr/IKOutput> output
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKOutput> output;
    public:
    // Creating value type constructor for type: IKJob
    constexpr IKJob(::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKInput> input_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKOutput> output_ = {}) noexcept : input{input_}, output{output_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobParallelFor
    operator ::Unity::Jobs::IJobParallelFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobParallelFor*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<GorillaIKMgr/IKInput> input
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKInput>& dyn_input();
    // Get instance field reference: public Unity.Collections.NativeArray`1<GorillaIKMgr/IKOutput> output
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKOutput>& dyn_output();
    // public System.Void Execute(System.Int32 i)
    // Offset: 0x270F848
    void Execute(int i);
  }; // GorillaIKMgr/IKJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::IKJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::IKJob::*)(int)>(&GlobalNamespace::GorillaIKMgr::IKJob::Execute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr::IKJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
