// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IWrappedSerializable
#include "GlobalNamespace/IWrappedSerializable.hpp"
// Including type: IPreDisable
#include "GlobalNamespace/IPreDisable.hpp"
// Including type: IUserCosmeticsCallback
#include "GlobalNamespace/IUserCosmeticsCallback.hpp"
// Including type: GorillaNetworking.CosmeticsController
#include "GorillaNetworking/CosmeticsController.hpp"
// Including type: Slingshot/SlingshotState
#include "GlobalNamespace/Slingshot_SlingshotState.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: GTBitOps/BitWriteInfo
#include "GlobalNamespace/GTBitOps_BitWriteInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRMap
  class VRMap;
  // Forward declaring type: VRMapThumb
  class VRMapThumb;
  // Forward declaring type: VRMapIndex
  class VRMapIndex;
  // Forward declaring type: VRMapMiddle
  class VRMapMiddle;
  // Forward declaring type: GorillaSkin
  class GorillaSkin;
  // Forward declaring type: ZoneEntity
  class ZoneEntity;
  // Forward declaring type: SizeManager
  class SizeManager;
  // Forward declaring type: NonCosmeticHandItem
  class NonCosmeticHandItem;
  // Forward declaring type: VRRigReliableState
  class VRRigReliableState;
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: BattleBalloons
  class BattleBalloons;
  // Skipping declaration: Slingshot because it is already included!
  // Forward declaring type: GorillaMouthFlap
  class GorillaMouthFlap;
  // Forward declaring type: GorillaSpeakerLoudness
  class GorillaSpeakerLoudness;
  // Forward declaring type: ReplacementVoice
  class ReplacementVoice;
  // Forward declaring type: GorillaEyeExpressions
  class GorillaEyeExpressions;
  // Forward declaring type: VRRigSerializer
  class VRRigSerializer;
  // Forward declaring type: FXSystemSettings
  class FXSystemSettings;
  // Skipping declaration: PartyMemberStatus because it is already included!
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: MicWrapper
  class MicWrapper;
}
// Forward declaring namespace: GorillaLocomotion::Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: GorillaRopeSwing
  class GorillaRopeSwing;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticItemRegistry
  class CosmeticItemRegistry;
  // Forward declaring type: FriendshipBracelet
  class FriendshipBracelet;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Voice::PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceView
  class PhotonVoiceView;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IAudioDesc
  class IAudioDesc;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Skipping declaration: PhotonMessageInfo because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetUserInventoryResult
  class GetUserInventoryResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRig);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRig*, "", "VRRig");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x538
  #pragma pack(push, 1)
  // Autogenerated type: VRRig
  // [TokenAttribute] Offset: FFFFFFFF
  class VRRig : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IWrappedSerializable, public ::GlobalNamespace::IPreDisable, public ::GlobalNamespace::IUserCosmeticsCallback*/ {
    public:
    // Nested type: ::GlobalNamespace::VRRig::PartyMemberStatus
    struct PartyMemberStatus;
    // Nested type: ::GlobalNamespace::VRRig::WearablePackedStateSlots
    struct WearablePackedStateSlots;
    // Nested type: ::GlobalNamespace::VRRig::VelocityTime
    struct VelocityTime;
    // Nested type: ::GlobalNamespace::VRRig::QAxis
    struct QAxis;
    // Nested type: ::GlobalNamespace::VRRig::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::VRRig::$OccasionalUpdate$d__227
    class $OccasionalUpdate$d__227;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: VRRig/PartyMemberStatus
    // [TokenAttribute] Offset: FFFFFFFF
    struct PartyMemberStatus/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PartyMemberStatus
      constexpr PartyMemberStatus(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public VRRig/PartyMemberStatus NeedsUpdate
      static constexpr const int NeedsUpdate = 0;
      // Get static field: static public VRRig/PartyMemberStatus NeedsUpdate
      static ::GlobalNamespace::VRRig::PartyMemberStatus _get_NeedsUpdate();
      // Set static field: static public VRRig/PartyMemberStatus NeedsUpdate
      static void _set_NeedsUpdate(::GlobalNamespace::VRRig::PartyMemberStatus value);
      // static field const value: static public VRRig/PartyMemberStatus InLocalParty
      static constexpr const int InLocalParty = 1;
      // Get static field: static public VRRig/PartyMemberStatus InLocalParty
      static ::GlobalNamespace::VRRig::PartyMemberStatus _get_InLocalParty();
      // Set static field: static public VRRig/PartyMemberStatus InLocalParty
      static void _set_InLocalParty(::GlobalNamespace::VRRig::PartyMemberStatus value);
      // static field const value: static public VRRig/PartyMemberStatus NotInLocalParty
      static constexpr const int NotInLocalParty = 2;
      // Get static field: static public VRRig/PartyMemberStatus NotInLocalParty
      static ::GlobalNamespace::VRRig::PartyMemberStatus _get_NotInLocalParty();
      // Set static field: static public VRRig/PartyMemberStatus NotInLocalParty
      static void _set_NotInLocalParty(::GlobalNamespace::VRRig::PartyMemberStatus value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // VRRig/PartyMemberStatus
    #pragma pack(pop)
    static check_size<sizeof(VRRig::PartyMemberStatus), 0 + sizeof(int)> __GlobalNamespace_VRRig_PartyMemberStatusSizeCheck;
    static_assert(sizeof(VRRig::PartyMemberStatus) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: VRRig/VelocityTime
    // [TokenAttribute] Offset: FFFFFFFF
    struct VelocityTime/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 vel
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 vel;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // Padding between fields: vel and: time
      char __padding0[0x4] = {};
      // public System.Double time
      // Size: 0x8
      // Offset: 0x10
      double time;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: VelocityTime
      constexpr VelocityTime(::UnityEngine::Vector3 vel_ = {}, double time_ = {}) noexcept : vel{vel_}, time{time_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 vel
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_vel();
      // Get instance field reference: public System.Double time
      [[deprecated("Use field access instead!")]] double& dyn_time();
      // public System.Void .ctor(UnityEngine.Vector3 velocity, System.Double velTime)
      // Offset: 0x26A6B5C
      // ABORTED: conflicts with another method.  VelocityTime(::UnityEngine::Vector3 velocity, double velTime);
    }; // VRRig/VelocityTime
    #pragma pack(pop)
    static check_size<sizeof(VRRig::VelocityTime), 16 + sizeof(double)> __GlobalNamespace_VRRig_VelocityTimeSizeCheck;
    static_assert(sizeof(VRRig::VelocityTime) == 0x18);
    public:
    // private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs
    // Size: 0x1
    // Offset: 0x20
    bool isListeningFor_OnPostInstantiateAllPrefabs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isListeningFor_OnPostInstantiateAllPrefabs and: head
    char __padding0[0x7] = {};
    // public VRMap head
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::VRMap* head;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMap*) == 0x8);
    // public VRMap rightHand
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::VRMap* rightHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMap*) == 0x8);
    // public VRMap leftHand
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::VRMap* leftHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMap*) == 0x8);
    // public VRMapThumb leftThumb
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::VRMapThumb* leftThumb;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapThumb*) == 0x8);
    // public VRMapIndex leftIndex
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::VRMapIndex* leftIndex;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapIndex*) == 0x8);
    // public VRMapMiddle leftMiddle
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::VRMapMiddle* leftMiddle;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapMiddle*) == 0x8);
    // public VRMapThumb rightThumb
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::VRMapThumb* rightThumb;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapThumb*) == 0x8);
    // public VRMapIndex rightIndex
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::VRMapIndex* rightIndex;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapIndex*) == 0x8);
    // public VRMapMiddle rightMiddle
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::VRMapMiddle* rightMiddle;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRMapMiddle*) == 0x8);
    // private System.Int32 previousGrabbedRope
    // Size: 0x4
    // Offset: 0x70
    int previousGrabbedRope;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 previousGrabbedRopeBoneIndex
    // Size: 0x4
    // Offset: 0x74
    int previousGrabbedRopeBoneIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean previousGrabbedRopeWasLeft
    // Size: 0x1
    // Offset: 0x78
    bool previousGrabbedRopeWasLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: previousGrabbedRopeWasLeft and: currentRopeSwing
    char __padding12[0x7] = {};
    // private GorillaLocomotion.Gameplay.GorillaRopeSwing currentRopeSwing
    // Size: 0x8
    // Offset: 0x80
    ::GorillaLocomotion::Gameplay::GorillaRopeSwing* currentRopeSwing;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Gameplay::GorillaRopeSwing*) == 0x8);
    // private UnityEngine.Transform currentHoldParent
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* currentHoldParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform currentRopeSwingTarget
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* currentRopeSwingTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single lastRopeGrabTimer
    // Size: 0x4
    // Offset: 0x98
    float lastRopeGrabTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean shouldLerpToRope
    // Size: 0x1
    // Offset: 0x9C
    bool shouldLerpToRope;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldLerpToRope and: grabbedRopeIndex
    char __padding17[0x3] = {};
    // public System.Int32 grabbedRopeIndex
    // Size: 0x4
    // Offset: 0xA0
    int grabbedRopeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 grabbedRopeBoneIndex
    // Size: 0x4
    // Offset: 0xA4
    int grabbedRopeBoneIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean grabbedRopeIsLeft
    // Size: 0x1
    // Offset: 0xA8
    bool grabbedRopeIsLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: grabbedRopeIsLeft and: grabbedRopeOffset
    char __padding20[0x3] = {};
    // public UnityEngine.Vector3 grabbedRopeOffset
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 grabbedRopeOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean isOfflineVRRig
    // Size: 0x1
    // Offset: 0xB8
    bool isOfflineVRRig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOfflineVRRig and: mainCamera
    char __padding22[0x7] = {};
    // public UnityEngine.GameObject mainCamera
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform playerOffsetTransform
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Transform* playerOffsetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Int32 SDKIndex
    // Size: 0x4
    // Offset: 0xD0
    int SDKIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isMyPlayer
    // Size: 0x1
    // Offset: 0xD4
    bool isMyPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMyPlayer and: leftHandPlayer
    char __padding26[0x3] = {};
    // public UnityEngine.AudioSource leftHandPlayer
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::AudioSource* leftHandPlayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource rightHandPlayer
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::AudioSource* rightHandPlayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource tagSound
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::AudioSource* tagSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single ratio
    // Size: 0x4
    // Offset: 0xF0
    float ratio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: ratio and: headConstraint
    char __padding30[0x4] = {};
    // public UnityEngine.Transform headConstraint
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Transform* headConstraint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 headBodyOffset
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 headBodyOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: headBodyOffset and: headMesh
    char __padding32[0x4] = {};
    // public UnityEngine.GameObject headMesh
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::GameObject* headMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 syncPos
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 syncPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 jobPos
    // Size: 0xC
    // Offset: 0x124
    ::UnityEngine::Vector3 jobPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion syncRotation
    // Size: 0x10
    // Offset: 0x130
    ::UnityEngine::Quaternion syncRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion jobRotation
    // Size: 0x10
    // Offset: 0x140
    ::UnityEngine::Quaternion jobRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.AudioClip[] clipToPlay
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::AudioClip*> clipToPlay;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public UnityEngine.AudioClip[] handTapSound
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::UnityEngine::AudioClip*> handTapSound;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public System.Int32 currentMatIndex
    // Size: 0x4
    // Offset: 0x160
    int currentMatIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 setMatIndex
    // Size: 0x4
    // Offset: 0x164
    int setMatIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 tempMatIndex
    // Size: 0x4
    // Offset: 0x168
    int tempMatIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single lerpValueFingers
    // Size: 0x4
    // Offset: 0x16C
    float lerpValueFingers;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lerpValueBody
    // Size: 0x4
    // Offset: 0x170
    float lerpValueBody;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lerpValueBody and: backpack
    char __padding44[0x4] = {};
    // public UnityEngine.GameObject backpack
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::GameObject* backpack;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform leftHandTransform
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::Transform* leftHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHandTransform
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Transform* rightHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer mainSkin
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::SkinnedMeshRenderer* mainSkin;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // public GorillaSkin defaultSkin
    // Size: 0x8
    // Offset: 0x198
    ::GlobalNamespace::GorillaSkin* defaultSkin;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSkin*) == 0x8);
    // public ZoneEntity zoneEntity
    // Size: 0x8
    // Offset: 0x1A0
    ::GlobalNamespace::ZoneEntity* zoneEntity;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneEntity*) == 0x8);
    // public UnityEngine.Material myDefaultSkinMaterialInstance
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Material* myDefaultSkinMaterialInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material scoreboardMaterial
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Material* scoreboardMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.GameObject spectatorSkin
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::GameObject* spectatorSkin;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 handSync
    // Size: 0x4
    // Offset: 0x1C0
    int handSync;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: handSync and: materialsToChangeTo
    char __padding54[0x4] = {};
    // public UnityEngine.Material[] materialsToChangeTo
    // Size: 0x8
    // Offset: 0x1C8
    ::ArrayW<::UnityEngine::Material*> materialsToChangeTo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public System.Single red
    // Size: 0x4
    // Offset: 0x1D0
    float red;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single green
    // Size: 0x4
    // Offset: 0x1D4
    float green;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single blue
    // Size: 0x4
    // Offset: 0x1D8
    float blue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blue and: playerName
    char __padding58[0x4] = {};
    // public System.String playerName
    // Size: 0x8
    // Offset: 0x1E0
    ::StringW playerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text playerText
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::UI::Text* playerText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.String playerNameVisible
    // Size: 0x8
    // Offset: 0x1F0
    ::StringW playerNameVisible;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean showName
    // Size: 0x1
    // Offset: 0x1F8
    bool showName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showName and: cosmeticsObjectRegistry
    char __padding62[0x7] = {};
    // public GorillaNetworking.CosmeticItemRegistry cosmeticsObjectRegistry
    // Size: 0x8
    // Offset: 0x200
    ::GorillaNetworking::CosmeticItemRegistry* cosmeticsObjectRegistry;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticItemRegistry*) == 0x8);
    // public UnityEngine.GameObject[] _cosmetics
    // Size: 0x8
    // Offset: 0x208
    ::ArrayW<::UnityEngine::GameObject*> cosmetics;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] _overrideCosmetics
    // Size: 0x8
    // Offset: 0x210
    ::ArrayW<::UnityEngine::GameObject*> overrideCosmetics;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.String concatStringOfCosmeticsAllowed
    // Size: 0x8
    // Offset: 0x218
    ::StringW concatStringOfCosmeticsAllowed;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean initializedCosmetics
    // Size: 0x1
    // Offset: 0x220
    bool initializedCosmetics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initializedCosmetics and: cosmeticSet
    char __padding67[0x7] = {};
    // public GorillaNetworking.CosmeticsController/CosmeticSet cosmeticSet
    // Size: 0x8
    // Offset: 0x228
    ::GorillaNetworking::CosmeticsController::CosmeticSet* cosmeticSet;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticSet*) == 0x8);
    // public GorillaNetworking.CosmeticsController/CosmeticSet tryOnSet
    // Size: 0x8
    // Offset: 0x230
    ::GorillaNetworking::CosmeticsController::CosmeticSet* tryOnSet;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticSet*) == 0x8);
    // public GorillaNetworking.CosmeticsController/CosmeticSet mergedSet
    // Size: 0x8
    // Offset: 0x238
    ::GorillaNetworking::CosmeticsController::CosmeticSet* mergedSet;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticSet*) == 0x8);
    // public GorillaNetworking.CosmeticsController/CosmeticSet prevSet
    // Size: 0x8
    // Offset: 0x240
    ::GorillaNetworking::CosmeticsController::CosmeticSet* prevSet;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticSet*) == 0x8);
    // private System.Int32 cosmeticRetries
    // Size: 0x4
    // Offset: 0x248
    int cosmeticRetries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentCosmeticTries
    // Size: 0x4
    // Offset: 0x24C
    int currentCosmeticTries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public SizeManager sizeManager
    // Size: 0x8
    // Offset: 0x250
    ::GlobalNamespace::SizeManager* sizeManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeManager*) == 0x8);
    // public System.Single pitchScale
    // Size: 0x4
    // Offset: 0x258
    float pitchScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pitchOffset
    // Size: 0x4
    // Offset: 0x25C
    float pitchOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean IsHaunted
    // Size: 0x1
    // Offset: 0x260
    bool IsHaunted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsHaunted and: HauntedVoicePitch
    char __padding77[0x3] = {};
    // public System.Single HauntedVoicePitch
    // Size: 0x4
    // Offset: 0x264
    float HauntedVoicePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HauntedHearingVolume
    // Size: 0x4
    // Offset: 0x268
    float HauntedHearingVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean UsingHauntedRing
    // Size: 0x1
    // Offset: 0x26C
    bool UsingHauntedRing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UsingHauntedRing and: HauntedRingVoicePitch
    char __padding80[0x3] = {};
    // public System.Single HauntedRingVoicePitch
    // Size: 0x4
    // Offset: 0x270
    float HauntedRingVoicePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: HauntedRingVoicePitch and: friendshipBraceletLeftHand
    char __padding81[0x4] = {};
    // public GorillaNetworking.FriendshipBracelet friendshipBraceletLeftHand
    // Size: 0x8
    // Offset: 0x278
    ::GorillaNetworking::FriendshipBracelet* friendshipBraceletLeftHand;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::FriendshipBracelet*) == 0x8);
    // public NonCosmeticHandItem nonCosmeticLeftHandItem
    // Size: 0x8
    // Offset: 0x280
    ::GlobalNamespace::NonCosmeticHandItem* nonCosmeticLeftHandItem;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NonCosmeticHandItem*) == 0x8);
    // public GorillaNetworking.FriendshipBracelet friendshipBraceletRightHand
    // Size: 0x8
    // Offset: 0x288
    ::GorillaNetworking::FriendshipBracelet* friendshipBraceletRightHand;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::FriendshipBracelet*) == 0x8);
    // public NonCosmeticHandItem nonCosmeticRightHandItem
    // Size: 0x8
    // Offset: 0x290
    ::GlobalNamespace::NonCosmeticHandItem* nonCosmeticRightHandItem;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NonCosmeticHandItem*) == 0x8);
    // public VRRigReliableState reliableState
    // Size: 0x8
    // Offset: 0x298
    ::GlobalNamespace::VRRigReliableState* reliableState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRigReliableState*) == 0x8);
    // private UnityEngine.Transform MouthPosition
    // Size: 0x8
    // Offset: 0x2A0
    ::UnityEngine::Transform* MouthPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // RigContainer rigContainer
    // Size: 0x8
    // Offset: 0x2A8
    ::GlobalNamespace::RigContainer* rigContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private UnityEngine.Vector3 remoteVelocity
    // Size: 0xC
    // Offset: 0x2B0
    ::UnityEngine::Vector3 remoteVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: remoteVelocity and: remoteLatestTimestamp
    char __padding89[0x4] = {};
    // private System.Double remoteLatestTimestamp
    // Size: 0x8
    // Offset: 0x2C0
    double remoteLatestTimestamp;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Vector3 remoteCorrectionNeeded
    // Size: 0xC
    // Offset: 0x2C8
    ::UnityEngine::Vector3 remoteCorrectionNeeded;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VRRig/PartyMemberStatus partyMemberStatus
    // Size: 0x4
    // Offset: 0x2D4
    ::GlobalNamespace::VRRig::PartyMemberStatus partyMemberStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig::PartyMemberStatus) == 0x4);
    // public System.Boolean inTryOnRoom
    // Size: 0x1
    // Offset: 0x2D8
    bool inTryOnRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean muted
    // Size: 0x1
    // Offset: 0x2D9
    bool muted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: muted and: scaleFactor
    char __padding94[0x2] = {};
    // public System.Single scaleFactor
    // Size: 0x4
    // Offset: 0x2DC
    float scaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastScaleFactor
    // Size: 0x4
    // Offset: 0x2E0
    float lastScaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSpawned
    // Size: 0x4
    // Offset: 0x2E4
    float timeSpawned;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single doNotLerpConstant
    // Size: 0x4
    // Offset: 0x2E8
    float doNotLerpConstant;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: doNotLerpConstant and: tempString
    char __padding98[0x4] = {};
    // public System.String tempString
    // Size: 0x8
    // Offset: 0x2F0
    ::StringW tempString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Realtime.Player tempPlayer
    // Size: 0x8
    // Offset: 0x2F8
    ::Photon::Realtime::Player* tempPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // Photon.Realtime.Player creator
    // Size: 0x8
    // Offset: 0x300
    ::Photon::Realtime::Player* creator;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // NetPlayer creatorWrapped
    // Size: 0x8
    // Offset: 0x308
    ::GlobalNamespace::NetPlayer* creatorWrapped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetPlayer*) == 0x8);
    // private VRRig tempRig
    // Size: 0x8
    // Offset: 0x310
    ::GlobalNamespace::VRRig* tempRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Single[] speedArray
    // Size: 0x8
    // Offset: 0x318
    ::ArrayW<float> speedArray;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Double handLerpValues
    // Size: 0x8
    // Offset: 0x320
    double handLerpValues;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x328
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: battleBalloons
    char __padding106[0x7] = {};
    // public BattleBalloons battleBalloons
    // Size: 0x8
    // Offset: 0x330
    ::GlobalNamespace::BattleBalloons* battleBalloons;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BattleBalloons*) == 0x8);
    // private System.Int32 tempInt
    // Size: 0x4
    // Offset: 0x338
    int tempInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tempInt and: myBodyDockPositions
    char __padding108[0x4] = {};
    // public BodyDockPositions myBodyDockPositions
    // Size: 0x8
    // Offset: 0x340
    ::GlobalNamespace::BodyDockPositions* myBodyDockPositions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions*) == 0x8);
    // public UnityEngine.ParticleSystem lavaParticleSystem
    // Size: 0x8
    // Offset: 0x348
    ::UnityEngine::ParticleSystem* lavaParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem rockParticleSystem
    // Size: 0x8
    // Offset: 0x350
    ::UnityEngine::ParticleSystem* rockParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem iceParticleSystem
    // Size: 0x8
    // Offset: 0x358
    ::UnityEngine::ParticleSystem* iceParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.String tempItemName
    // Size: 0x8
    // Offset: 0x360
    ::StringW tempItemName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.CosmeticsController/CosmeticItem tempItem
    // Size: 0x79
    // Offset: 0x368
    ::GorillaNetworking::CosmeticsController::CosmeticItem tempItem;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticItem) == 0x79);
    // Padding between fields: tempItem and: tempItemId
    char __padding114[0x7] = {};
    // public System.String tempItemId
    // Size: 0x8
    // Offset: 0x3E8
    ::StringW tempItemId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 tempItemCost
    // Size: 0x4
    // Offset: 0x3F0
    int tempItemCost;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 leftHandHoldableStatus
    // Size: 0x4
    // Offset: 0x3F4
    int leftHandHoldableStatus;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rightHandHoldableStatus
    // Size: 0x4
    // Offset: 0x3F8
    int rightHandHoldableStatus;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rightHandHoldableStatus and: musicDrums
    char __padding118[0x4] = {};
    // public UnityEngine.AudioSource[] musicDrums
    // Size: 0x8
    // Offset: 0x400
    ::ArrayW<::UnityEngine::AudioSource*> musicDrums;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // public TransferrableObject[] instrumentSelfOnly
    // Size: 0x8
    // Offset: 0x408
    ::ArrayW<::GlobalNamespace::TransferrableObject*> instrumentSelfOnly;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransferrableObject*>) == 0x8);
    // public UnityEngine.AudioSource geodeCrackingSound
    // Size: 0x8
    // Offset: 0x410
    ::UnityEngine::AudioSource* geodeCrackingSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single bonkTime
    // Size: 0x4
    // Offset: 0x418
    float bonkTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bonkCooldown
    // Size: 0x4
    // Offset: 0x41C
    float bonkCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VRRig tempVRRig
    // Size: 0x8
    // Offset: 0x420
    ::GlobalNamespace::VRRig* tempVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.GameObject huntComputer
    // Size: 0x8
    // Offset: 0x428
    ::UnityEngine::GameObject* huntComputer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject builderResizeWatch
    // Size: 0x8
    // Offset: 0x430
    ::UnityEngine::GameObject* builderResizeWatch;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public Slingshot slingshot
    // Size: 0x8
    // Offset: 0x438
    ::GlobalNamespace::Slingshot* slingshot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Slingshot*) == 0x8);
    // public Slingshot/SlingshotState slingshotState
    // Size: 0x4
    // Offset: 0x440
    ::GlobalNamespace::Slingshot::SlingshotState slingshotState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Slingshot::SlingshotState) == 0x4);
    // Padding between fields: slingshotState and: myPhotonVoiceView
    char __padding128[0x4] = {};
    // private Photon.Voice.PUN.PhotonVoiceView myPhotonVoiceView
    // Size: 0x8
    // Offset: 0x448
    ::Photon::Voice::PUN::PhotonVoiceView* myPhotonVoiceView;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PUN::PhotonVoiceView*) == 0x8);
    // private VRRig senderRig
    // Size: 0x8
    // Offset: 0x450
    ::GlobalNamespace::VRRig* senderRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean isInitialized
    // Size: 0x1
    // Offset: 0x458
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: velocityHistoryList
    char __padding131[0x7] = {};
    // private System.Collections.Generic.List`1<VRRig/VelocityTime> velocityHistoryList
    // Size: 0x8
    // Offset: 0x460
    ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig::VelocityTime>* velocityHistoryList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::VRRig::VelocityTime>*) == 0x8);
    // public System.Int32 velocityHistoryMaxLength
    // Size: 0x4
    // Offset: 0x468
    int velocityHistoryMaxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x46C
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single[] splashEffectTimes
    // Size: 0x8
    // Offset: 0x478
    ::ArrayW<float> splashEffectTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // UnityEngine.AudioSource voiceAudio
    // Size: 0x8
    // Offset: 0x480
    ::UnityEngine::AudioSource* voiceAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Boolean remoteUseReplacementVoice
    // Size: 0x1
    // Offset: 0x488
    bool remoteUseReplacementVoice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean localUseReplacementVoice
    // Size: 0x1
    // Offset: 0x489
    bool localUseReplacementVoice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: localUseReplacementVoice and: currentMicWrapper
    char __padding138[0x6] = {};
    // private Photon.Voice.Unity.MicWrapper currentMicWrapper
    // Size: 0x8
    // Offset: 0x490
    ::Photon::Voice::Unity::MicWrapper* currentMicWrapper;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::MicWrapper*) == 0x8);
    // private Photon.Voice.IAudioDesc audioDesc
    // Size: 0x8
    // Offset: 0x498
    ::Photon::Voice::IAudioDesc* audioDesc;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IAudioDesc*) == 0x8);
    // private System.Single speakingLoudness
    // Size: 0x4
    // Offset: 0x4A0
    float speakingLoudness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean shouldSendSpeakingLoudness
    // Size: 0x1
    // Offset: 0x4A4
    bool shouldSendSpeakingLoudness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldSendSpeakingLoudness and: replacementVoiceLoudnessThreshold
    char __padding142[0x3] = {};
    // public System.Single replacementVoiceLoudnessThreshold
    // Size: 0x4
    // Offset: 0x4A8
    float replacementVoiceLoudnessThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 replacementVoiceDetectionDelay
    // Size: 0x4
    // Offset: 0x4AC
    int replacementVoiceDetectionDelay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaMouthFlap myMouthFlap
    // Size: 0x8
    // Offset: 0x4B0
    ::GlobalNamespace::GorillaMouthFlap* myMouthFlap;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaMouthFlap*) == 0x8);
    // private GorillaSpeakerLoudness mySpeakerLoudness
    // Size: 0x8
    // Offset: 0x4B8
    ::GlobalNamespace::GorillaSpeakerLoudness* mySpeakerLoudness;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSpeakerLoudness*) == 0x8);
    // public ReplacementVoice myReplacementVoice
    // Size: 0x8
    // Offset: 0x4C0
    ::GlobalNamespace::ReplacementVoice* myReplacementVoice;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ReplacementVoice*) == 0x8);
    // private GorillaEyeExpressions myEyeExpressions
    // Size: 0x8
    // Offset: 0x4C8
    ::GlobalNamespace::GorillaEyeExpressions* myEyeExpressions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaEyeExpressions*) == 0x8);
    // Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x4D0
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // VRRigSerializer rigSerializer
    // Size: 0x8
    // Offset: 0x4D8
    ::GlobalNamespace::VRRigSerializer* rigSerializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRigSerializer*) == 0x8);
    // public NetPlayer OwningNetPlayer
    // Size: 0x8
    // Offset: 0x4E0
    ::GlobalNamespace::NetPlayer* OwningNetPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetPlayer*) == 0x8);
    // private FXSystemSettings sharedFXSettings
    // Size: 0x8
    // Offset: 0x4E8
    ::GlobalNamespace::FXSystemSettings* sharedFXSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FXSystemSettings*) == 0x8);
    // public FXSystemSettings fxSettings
    // Size: 0x8
    // Offset: 0x4F0
    ::GlobalNamespace::FXSystemSettings* fxSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FXSystemSettings*) == 0x8);
    // private System.Boolean playerWasHaunted
    // Size: 0x1
    // Offset: 0x4F8
    bool playerWasHaunted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerWasHaunted and: nonHauntedVolume
    char __padding154[0x3] = {};
    // private System.Single nonHauntedVolume
    // Size: 0x4
    // Offset: 0x4FC
    float nonHauntedVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color playerColor
    // Size: 0x10
    // Offset: 0x500
    ::UnityEngine::Color playerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean colorInitialized
    // Size: 0x1
    // Offset: 0x510
    bool colorInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: colorInitialized and: onColorInitialized
    char __padding157[0x7] = {};
    // private System.Action`1<UnityEngine.Color> onColorInitialized
    // Size: 0x8
    // Offset: 0x518
    ::System::Action_1<::UnityEngine::Color>* onColorInitialized;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    // private System.Action`1<UnityEngine.Color> OnColorChanged
    // Size: 0x8
    // Offset: 0x520
    ::System::Action_1<::UnityEngine::Color>* OnColorChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    // private System.Boolean canReport
    // Size: 0x1
    // Offset: 0x528
    bool canReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean pendingCosmeticUpdate
    // Size: 0x1
    // Offset: 0x529
    bool pendingCosmeticUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pendingCosmeticUpdate and: rawCosmeticString
    char __padding161[0x6] = {};
    // private System.String rawCosmeticString
    // Size: 0x8
    // Offset: 0x530
    ::StringW rawCosmeticString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IWrappedSerializable
    operator ::GlobalNamespace::IWrappedSerializable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IWrappedSerializable*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IPreDisable
    operator ::GlobalNamespace::IPreDisable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPreDisable*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IUserCosmeticsCallback
    operator ::GlobalNamespace::IUserCosmeticsCallback() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IUserCosmeticsCallback*>(this);
    }
    // Get static field: static public System.Action newPlayerJoined
    static ::System::Action* _get_newPlayerJoined();
    // Set static field: static public System.Action newPlayerJoined
    static void _set_newPlayerJoined(::System::Action* value);
    // static field const value: static private System.Single REMOTE_CORRECTION_RATE
    static constexpr const float REMOTE_CORRECTION_RATE = 5;
    // Get static field: static private System.Single REMOTE_CORRECTION_RATE
    static float _get_REMOTE_CORRECTION_RATE();
    // Set static field: static private System.Single REMOTE_CORRECTION_RATE
    static void _set_REMOTE_CORRECTION_RATE(float value);
    // static field const value: static private System.Boolean USE_NEW_NETCODE
    static constexpr const bool USE_NEW_NETCODE = false;
    // Get static field: static private System.Boolean USE_NEW_NETCODE
    static bool _get_USE_NEW_NETCODE();
    // Set static field: static private System.Boolean USE_NEW_NETCODE
    static void _set_USE_NEW_NETCODE(bool value);
    // Get static field: static public readonly GTBitOps/BitWriteInfo[] WearablePackedStatesBitWriteInfos
    static ::ArrayW<::GlobalNamespace::GTBitOps::BitWriteInfo> _get_WearablePackedStatesBitWriteInfos();
    // Set static field: static public readonly GTBitOps/BitWriteInfo[] WearablePackedStatesBitWriteInfos
    static void _set_WearablePackedStatesBitWriteInfos(::ArrayW<::GlobalNamespace::GTBitOps::BitWriteInfo> value);
    // static field const value: static public System.Int32 splashLimitCount
    static constexpr const int splashLimitCount = 4;
    // Get static field: static public System.Int32 splashLimitCount
    static int _get_splashLimitCount();
    // Set static field: static public System.Int32 splashLimitCount
    static void _set_splashLimitCount(int value);
    // static field const value: static public System.Single splashLimitCooldown
    static constexpr const float splashLimitCooldown = 0.5;
    // Get static field: static public System.Single splashLimitCooldown
    static float _get_splashLimitCooldown();
    // Set static field: static public System.Single splashLimitCooldown
    static void _set_splashLimitCooldown(float value);
    // static field const value: static private System.Single QPackMax
    static constexpr const float QPackMax = 0.707107;
    // Get static field: static private System.Single QPackMax
    static float _get_QPackMax();
    // Set static field: static private System.Single QPackMax
    static void _set_QPackMax(float value);
    // static field const value: static private System.Single QPackScale
    static constexpr const float QPackScale = 361.33145;
    // Get static field: static private System.Single QPackScale
    static float _get_QPackScale();
    // Set static field: static private System.Single QPackScale
    static void _set_QPackScale(float value);
    // static field const value: static private System.Single QPackInvScale
    static constexpr const float QPackInvScale = 0.0027675421;
    // Get static field: static private System.Single QPackInvScale
    static float _get_QPackInvScale();
    // Set static field: static private System.Single QPackInvScale
    static void _set_QPackInvScale(float value);
    // Get static field: static private VRRig gLocalRig
    static ::GlobalNamespace::VRRig* _get_gLocalRig();
    // Set static field: static private VRRig gLocalRig
    static void _set_gLocalRig(::GlobalNamespace::VRRig* value);
    // Get static field: static private System.Boolean bCachedLocalRig
    static bool _get_bCachedLocalRig();
    // Set static field: static private System.Boolean bCachedLocalRig
    static void _set_bCachedLocalRig(bool value);
    // Get instance field reference: private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs
    [[deprecated("Use field access instead!")]] bool& dyn__isListeningFor_OnPostInstantiateAllPrefabs();
    // Get instance field reference: public VRMap head
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& dyn_head();
    // Get instance field reference: public VRMap rightHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& dyn_rightHand();
    // Get instance field reference: public VRMap leftHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& dyn_leftHand();
    // Get instance field reference: public VRMapThumb leftThumb
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapThumb*& dyn_leftThumb();
    // Get instance field reference: public VRMapIndex leftIndex
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapIndex*& dyn_leftIndex();
    // Get instance field reference: public VRMapMiddle leftMiddle
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapMiddle*& dyn_leftMiddle();
    // Get instance field reference: public VRMapThumb rightThumb
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapThumb*& dyn_rightThumb();
    // Get instance field reference: public VRMapIndex rightIndex
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapIndex*& dyn_rightIndex();
    // Get instance field reference: public VRMapMiddle rightMiddle
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapMiddle*& dyn_rightMiddle();
    // Get instance field reference: private System.Int32 previousGrabbedRope
    [[deprecated("Use field access instead!")]] int& dyn_previousGrabbedRope();
    // Get instance field reference: private System.Int32 previousGrabbedRopeBoneIndex
    [[deprecated("Use field access instead!")]] int& dyn_previousGrabbedRopeBoneIndex();
    // Get instance field reference: private System.Boolean previousGrabbedRopeWasLeft
    [[deprecated("Use field access instead!")]] bool& dyn_previousGrabbedRopeWasLeft();
    // Get instance field reference: private GorillaLocomotion.Gameplay.GorillaRopeSwing currentRopeSwing
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::GorillaRopeSwing*& dyn_currentRopeSwing();
    // Get instance field reference: private UnityEngine.Transform currentHoldParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentHoldParent();
    // Get instance field reference: private UnityEngine.Transform currentRopeSwingTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentRopeSwingTarget();
    // Get instance field reference: private System.Single lastRopeGrabTimer
    [[deprecated("Use field access instead!")]] float& dyn_lastRopeGrabTimer();
    // Get instance field reference: private System.Boolean shouldLerpToRope
    [[deprecated("Use field access instead!")]] bool& dyn_shouldLerpToRope();
    // Get instance field reference: public System.Int32 grabbedRopeIndex
    [[deprecated("Use field access instead!")]] int& dyn_grabbedRopeIndex();
    // Get instance field reference: public System.Int32 grabbedRopeBoneIndex
    [[deprecated("Use field access instead!")]] int& dyn_grabbedRopeBoneIndex();
    // Get instance field reference: public System.Boolean grabbedRopeIsLeft
    [[deprecated("Use field access instead!")]] bool& dyn_grabbedRopeIsLeft();
    // Get instance field reference: public UnityEngine.Vector3 grabbedRopeOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_grabbedRopeOffset();
    // Get instance field reference: public System.Boolean isOfflineVRRig
    [[deprecated("Use field access instead!")]] bool& dyn_isOfflineVRRig();
    // Get instance field reference: public UnityEngine.GameObject mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mainCamera();
    // Get instance field reference: public UnityEngine.Transform playerOffsetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playerOffsetTransform();
    // Get instance field reference: public System.Int32 SDKIndex
    [[deprecated("Use field access instead!")]] int& dyn_SDKIndex();
    // Get instance field reference: public System.Boolean isMyPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_isMyPlayer();
    // Get instance field reference: public UnityEngine.AudioSource leftHandPlayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_leftHandPlayer();
    // Get instance field reference: public UnityEngine.AudioSource rightHandPlayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_rightHandPlayer();
    // Get instance field reference: public UnityEngine.AudioSource tagSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_tagSound();
    // Get instance field reference: private System.Single ratio
    [[deprecated("Use field access instead!")]] float& dyn_ratio();
    // Get instance field reference: public UnityEngine.Transform headConstraint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headConstraint();
    // Get instance field reference: public UnityEngine.Vector3 headBodyOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headBodyOffset();
    // Get instance field reference: public UnityEngine.GameObject headMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_headMesh();
    // Get instance field reference: public UnityEngine.Vector3 syncPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_syncPos();
    // Get instance field reference: public UnityEngine.Vector3 jobPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_jobPos();
    // Get instance field reference: public UnityEngine.Quaternion syncRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_syncRotation();
    // Get instance field reference: public UnityEngine.Quaternion jobRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_jobRotation();
    // Get instance field reference: public UnityEngine.AudioClip[] clipToPlay
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_clipToPlay();
    // Get instance field reference: public UnityEngine.AudioClip[] handTapSound
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_handTapSound();
    // Get instance field reference: public System.Int32 currentMatIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentMatIndex();
    // Get instance field reference: public System.Int32 setMatIndex
    [[deprecated("Use field access instead!")]] int& dyn_setMatIndex();
    // Get instance field reference: private System.Int32 tempMatIndex
    [[deprecated("Use field access instead!")]] int& dyn_tempMatIndex();
    // Get instance field reference: public System.Single lerpValueFingers
    [[deprecated("Use field access instead!")]] float& dyn_lerpValueFingers();
    // Get instance field reference: public System.Single lerpValueBody
    [[deprecated("Use field access instead!")]] float& dyn_lerpValueBody();
    // Get instance field reference: public UnityEngine.GameObject backpack
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_backpack();
    // Get instance field reference: public UnityEngine.Transform leftHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandTransform();
    // Get instance field reference: public UnityEngine.Transform rightHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandTransform();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer mainSkin
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_mainSkin();
    // Get instance field reference: public GorillaSkin defaultSkin
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& dyn_defaultSkin();
    // Get instance field reference: public ZoneEntity zoneEntity
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneEntity*& dyn_zoneEntity();
    // Get instance field reference: public UnityEngine.Material myDefaultSkinMaterialInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_myDefaultSkinMaterialInstance();
    // Get instance field reference: public UnityEngine.Material scoreboardMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_scoreboardMaterial();
    // Get instance field reference: public UnityEngine.GameObject spectatorSkin
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spectatorSkin();
    // Get instance field reference: public System.Int32 handSync
    [[deprecated("Use field access instead!")]] int& dyn_handSync();
    // Get instance field reference: public UnityEngine.Material[] materialsToChangeTo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_materialsToChangeTo();
    // Get instance field reference: public System.Single red
    [[deprecated("Use field access instead!")]] float& dyn_red();
    // Get instance field reference: public System.Single green
    [[deprecated("Use field access instead!")]] float& dyn_green();
    // Get instance field reference: public System.Single blue
    [[deprecated("Use field access instead!")]] float& dyn_blue();
    // Get instance field reference: public System.String playerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerName();
    // Get instance field reference: public UnityEngine.UI.Text playerText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerText();
    // Get instance field reference: public System.String playerNameVisible
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerNameVisible();
    // Get instance field reference: public System.Boolean showName
    [[deprecated("Use field access instead!")]] bool& dyn_showName();
    // Get instance field reference: public GorillaNetworking.CosmeticItemRegistry cosmeticsObjectRegistry
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticItemRegistry*& dyn_cosmeticsObjectRegistry();
    // Get instance field reference: public UnityEngine.GameObject[] _cosmetics
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__cosmetics();
    // Get instance field reference: public UnityEngine.GameObject[] _overrideCosmetics
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__overrideCosmetics();
    // Get instance field reference: public System.String concatStringOfCosmeticsAllowed
    [[deprecated("Use field access instead!")]] ::StringW& dyn_concatStringOfCosmeticsAllowed();
    // Get instance field reference: public System.Boolean initializedCosmetics
    [[deprecated("Use field access instead!")]] bool& dyn_initializedCosmetics();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticSet cosmeticSet
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& dyn_cosmeticSet();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticSet tryOnSet
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& dyn_tryOnSet();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticSet mergedSet
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& dyn_mergedSet();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticSet prevSet
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& dyn_prevSet();
    // Get instance field reference: private System.Int32 cosmeticRetries
    [[deprecated("Use field access instead!")]] int& dyn_cosmeticRetries();
    // Get instance field reference: private System.Int32 currentCosmeticTries
    [[deprecated("Use field access instead!")]] int& dyn_currentCosmeticTries();
    // Get instance field reference: public SizeManager sizeManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeManager*& dyn_sizeManager();
    // Get instance field reference: public System.Single pitchScale
    [[deprecated("Use field access instead!")]] float& dyn_pitchScale();
    // Get instance field reference: public System.Single pitchOffset
    [[deprecated("Use field access instead!")]] float& dyn_pitchOffset();
    // Get instance field reference: public System.Boolean IsHaunted
    [[deprecated("Use field access instead!")]] bool& dyn_IsHaunted();
    // Get instance field reference: public System.Single HauntedVoicePitch
    [[deprecated("Use field access instead!")]] float& dyn_HauntedVoicePitch();
    // Get instance field reference: public System.Single HauntedHearingVolume
    [[deprecated("Use field access instead!")]] float& dyn_HauntedHearingVolume();
    // Get instance field reference: public System.Boolean UsingHauntedRing
    [[deprecated("Use field access instead!")]] bool& dyn_UsingHauntedRing();
    // Get instance field reference: public System.Single HauntedRingVoicePitch
    [[deprecated("Use field access instead!")]] float& dyn_HauntedRingVoicePitch();
    // Get instance field reference: public GorillaNetworking.FriendshipBracelet friendshipBraceletLeftHand
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::FriendshipBracelet*& dyn_friendshipBraceletLeftHand();
    // Get instance field reference: public NonCosmeticHandItem nonCosmeticLeftHandItem
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NonCosmeticHandItem*& dyn_nonCosmeticLeftHandItem();
    // Get instance field reference: public GorillaNetworking.FriendshipBracelet friendshipBraceletRightHand
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::FriendshipBracelet*& dyn_friendshipBraceletRightHand();
    // Get instance field reference: public NonCosmeticHandItem nonCosmeticRightHandItem
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NonCosmeticHandItem*& dyn_nonCosmeticRightHandItem();
    // Get instance field reference: public VRRigReliableState reliableState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigReliableState*& dyn_reliableState();
    // Get instance field reference: private UnityEngine.Transform MouthPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_MouthPosition();
    // Get instance field reference: RigContainer rigContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_rigContainer();
    // Get instance field reference: private UnityEngine.Vector3 remoteVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_remoteVelocity();
    // Get instance field reference: private System.Double remoteLatestTimestamp
    [[deprecated("Use field access instead!")]] double& dyn_remoteLatestTimestamp();
    // Get instance field reference: private UnityEngine.Vector3 remoteCorrectionNeeded
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_remoteCorrectionNeeded();
    // Get instance field reference: private VRRig/PartyMemberStatus partyMemberStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig::PartyMemberStatus& dyn_partyMemberStatus();
    // Get instance field reference: public System.Boolean inTryOnRoom
    [[deprecated("Use field access instead!")]] bool& dyn_inTryOnRoom();
    // Get instance field reference: public System.Boolean muted
    [[deprecated("Use field access instead!")]] bool& dyn_muted();
    // Get instance field reference: public System.Single scaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_scaleFactor();
    // Get instance field reference: public System.Single lastScaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_lastScaleFactor();
    // Get instance field reference: private System.Single timeSpawned
    [[deprecated("Use field access instead!")]] float& dyn_timeSpawned();
    // Get instance field reference: public System.Single doNotLerpConstant
    [[deprecated("Use field access instead!")]] float& dyn_doNotLerpConstant();
    // Get instance field reference: public System.String tempString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempString();
    // Get instance field reference: private Photon.Realtime.Player tempPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempPlayer();
    // Get instance field reference: Photon.Realtime.Player creator
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_creator();
    // Get instance field reference: NetPlayer creatorWrapped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& dyn_creatorWrapped();
    // Get instance field reference: private VRRig tempRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_tempRig();
    // Get instance field reference: private System.Single[] speedArray
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_speedArray();
    // Get instance field reference: private System.Double handLerpValues
    [[deprecated("Use field access instead!")]] double& dyn_handLerpValues();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: public BattleBalloons battleBalloons
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BattleBalloons*& dyn_battleBalloons();
    // Get instance field reference: private System.Int32 tempInt
    [[deprecated("Use field access instead!")]] int& dyn_tempInt();
    // Get instance field reference: public BodyDockPositions myBodyDockPositions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& dyn_myBodyDockPositions();
    // Get instance field reference: public UnityEngine.ParticleSystem lavaParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_lavaParticleSystem();
    // Get instance field reference: public UnityEngine.ParticleSystem rockParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_rockParticleSystem();
    // Get instance field reference: public UnityEngine.ParticleSystem iceParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_iceParticleSystem();
    // Get instance field reference: public System.String tempItemName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempItemName();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticItem tempItem
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& dyn_tempItem();
    // Get instance field reference: public System.String tempItemId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempItemId();
    // Get instance field reference: public System.Int32 tempItemCost
    [[deprecated("Use field access instead!")]] int& dyn_tempItemCost();
    // Get instance field reference: public System.Int32 leftHandHoldableStatus
    [[deprecated("Use field access instead!")]] int& dyn_leftHandHoldableStatus();
    // Get instance field reference: public System.Int32 rightHandHoldableStatus
    [[deprecated("Use field access instead!")]] int& dyn_rightHandHoldableStatus();
    // Get instance field reference: public UnityEngine.AudioSource[] musicDrums
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_musicDrums();
    // Get instance field reference: public TransferrableObject[] instrumentSelfOnly
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject*>& dyn_instrumentSelfOnly();
    // Get instance field reference: public UnityEngine.AudioSource geodeCrackingSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_geodeCrackingSound();
    // Get instance field reference: public System.Single bonkTime
    [[deprecated("Use field access instead!")]] float& dyn_bonkTime();
    // Get instance field reference: public System.Single bonkCooldown
    [[deprecated("Use field access instead!")]] float& dyn_bonkCooldown();
    // Get instance field reference: private VRRig tempVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_tempVRRig();
    // Get instance field reference: public UnityEngine.GameObject huntComputer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_huntComputer();
    // Get instance field reference: public UnityEngine.GameObject builderResizeWatch
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_builderResizeWatch();
    // Get instance field reference: public Slingshot slingshot
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Slingshot*& dyn_slingshot();
    // Get instance field reference: public Slingshot/SlingshotState slingshotState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Slingshot::SlingshotState& dyn_slingshotState();
    // Get instance field reference: private Photon.Voice.PUN.PhotonVoiceView myPhotonVoiceView
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PUN::PhotonVoiceView*& dyn_myPhotonVoiceView();
    // Get instance field reference: private VRRig senderRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_senderRig();
    // Get instance field reference: private System.Boolean isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_isInitialized();
    // Get instance field reference: private System.Collections.Generic.List`1<VRRig/VelocityTime> velocityHistoryList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig::VelocityTime>*& dyn_velocityHistoryList();
    // Get instance field reference: public System.Int32 velocityHistoryMaxLength
    [[deprecated("Use field access instead!")]] int& dyn_velocityHistoryMaxLength();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: private System.Single[] splashEffectTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_splashEffectTimes();
    // Get instance field reference: UnityEngine.AudioSource voiceAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_voiceAudio();
    // Get instance field reference: public System.Boolean remoteUseReplacementVoice
    [[deprecated("Use field access instead!")]] bool& dyn_remoteUseReplacementVoice();
    // Get instance field reference: public System.Boolean localUseReplacementVoice
    [[deprecated("Use field access instead!")]] bool& dyn_localUseReplacementVoice();
    // Get instance field reference: private Photon.Voice.Unity.MicWrapper currentMicWrapper
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::MicWrapper*& dyn_currentMicWrapper();
    // Get instance field reference: private Photon.Voice.IAudioDesc audioDesc
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioDesc*& dyn_audioDesc();
    // Get instance field reference: private System.Single speakingLoudness
    [[deprecated("Use field access instead!")]] float& dyn_speakingLoudness();
    // Get instance field reference: public System.Boolean shouldSendSpeakingLoudness
    [[deprecated("Use field access instead!")]] bool& dyn_shouldSendSpeakingLoudness();
    // Get instance field reference: public System.Single replacementVoiceLoudnessThreshold
    [[deprecated("Use field access instead!")]] float& dyn_replacementVoiceLoudnessThreshold();
    // Get instance field reference: public System.Int32 replacementVoiceDetectionDelay
    [[deprecated("Use field access instead!")]] int& dyn_replacementVoiceDetectionDelay();
    // Get instance field reference: private GorillaMouthFlap myMouthFlap
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaMouthFlap*& dyn_myMouthFlap();
    // Get instance field reference: private GorillaSpeakerLoudness mySpeakerLoudness
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& dyn_mySpeakerLoudness();
    // Get instance field reference: public ReplacementVoice myReplacementVoice
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ReplacementVoice*& dyn_myReplacementVoice();
    // Get instance field reference: private GorillaEyeExpressions myEyeExpressions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaEyeExpressions*& dyn_myEyeExpressions();
    // Get instance field reference: Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView();
    // Get instance field reference: VRRigSerializer rigSerializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigSerializer*& dyn_rigSerializer();
    // Get instance field reference: public NetPlayer OwningNetPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& dyn_OwningNetPlayer();
    // Get instance field reference: private FXSystemSettings sharedFXSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FXSystemSettings*& dyn_sharedFXSettings();
    // Get instance field reference: public FXSystemSettings fxSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FXSystemSettings*& dyn_fxSettings();
    // Get instance field reference: private System.Boolean playerWasHaunted
    [[deprecated("Use field access instead!")]] bool& dyn_playerWasHaunted();
    // Get instance field reference: private System.Single nonHauntedVolume
    [[deprecated("Use field access instead!")]] float& dyn_nonHauntedVolume();
    // Get instance field reference: public UnityEngine.Color playerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_playerColor();
    // Get instance field reference: public System.Boolean colorInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_colorInitialized();
    // Get instance field reference: private System.Action`1<UnityEngine.Color> onColorInitialized
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& dyn_onColorInitialized();
    // Get instance field reference: private System.Action`1<UnityEngine.Color> OnColorChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& dyn_OnColorChanged();
    // Get instance field reference: private System.Boolean canReport
    [[deprecated("Use field access instead!")]] bool& dyn_canReport();
    // Get instance field reference: private System.Boolean pendingCosmeticUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_pendingCosmeticUpdate();
    // Get instance field reference: private System.String rawCosmeticString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rawCosmeticString();
    // private System.Void CosmeticsV2_Awake()
    // Offset: 0x2975CC8
    void CosmeticsV2_Awake();
    // private System.Void CosmeticsV2_OnDestroy()
    // Offset: 0x2975E68
    void CosmeticsV2_OnDestroy();
    // System.Void Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics()
    // Offset: 0x2975E48
    void Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics();
    // public UnityEngine.GameObject[] get_cosmetics()
    // Offset: 0x2976494
    ::ArrayW<::UnityEngine::GameObject*> get_cosmetics();
    // public System.Void set_cosmetics(UnityEngine.GameObject[] value)
    // Offset: 0x297649C
    void set_cosmetics(::ArrayW<::UnityEngine::GameObject*> value);
    // public UnityEngine.GameObject[] get_overrideCosmetics()
    // Offset: 0x29764AC
    ::ArrayW<::UnityEngine::GameObject*> get_overrideCosmetics();
    // public System.Void set_overrideCosmetics(UnityEngine.GameObject[] value)
    // Offset: 0x29764B4
    void set_overrideCosmetics(::ArrayW<::UnityEngine::GameObject*> value);
    // public System.Boolean get_HasBracelet()
    // Offset: 0x29764C4
    bool get_HasBracelet();
    // public UnityEngine.Vector3 GetMouthPosition()
    // Offset: 0x29764E0
    ::UnityEngine::Vector3 GetMouthPosition();
    // public VRRig/PartyMemberStatus GetPartyMemberStatus()
    // Offset: 0x29764FC
    ::GlobalNamespace::VRRig::PartyMemberStatus GetPartyMemberStatus();
    // public System.Boolean get_IsLocalPartyMember()
    // Offset: 0x29765BC
    bool get_IsLocalPartyMember();
    // public System.Void ClearPartyMemberStatus()
    // Offset: 0x29765D4
    void ClearPartyMemberStatus();
    // public System.Int32 ActiveTransferrableObjectIndex(System.Int32 idx)
    // Offset: 0x29765DC
    int ActiveTransferrableObjectIndex(int idx);
    // public System.Int32 ActiveTransferrableObjectIndexLength()
    // Offset: 0x2976614
    int ActiveTransferrableObjectIndexLength();
    // public System.Void SetActiveTransferrableObjectIndex(System.Int32 idx, System.Int32 v)
    // Offset: 0x2976638
    void SetActiveTransferrableObjectIndex(int idx, int v);
    // public TransferrableObject/PositionState TransferrablePosStates(System.Int32 idx)
    // Offset: 0x2976688
    ::GlobalNamespace::TransferrableObject::PositionState TransferrablePosStates(int idx);
    // public System.Void SetTransferrablePosStates(System.Int32 idx, TransferrableObject/PositionState v)
    // Offset: 0x29766C0
    void SetTransferrablePosStates(int idx, ::GlobalNamespace::TransferrableObject::PositionState v);
    // public TransferrableObject/ItemStates TransferrableItemStates(System.Int32 idx)
    // Offset: 0x2976710
    ::GlobalNamespace::TransferrableObject::ItemStates TransferrableItemStates(int idx);
    // public System.Void SetTransferrableItemStates(System.Int32 idx, TransferrableObject/ItemStates v)
    // Offset: 0x2976748
    void SetTransferrableItemStates(int idx, ::GlobalNamespace::TransferrableObject::ItemStates v);
    // public System.Void SetTransferrableDockPosition(System.Int32 idx, BodyDockPositions/DropPositions v)
    // Offset: 0x2976798
    void SetTransferrableDockPosition(int idx, ::GlobalNamespace::BodyDockPositions::DropPositions v);
    // public BodyDockPositions/DropPositions TransferrableDockPosition(System.Int32 idx)
    // Offset: 0x29767E8
    ::GlobalNamespace::BodyDockPositions::DropPositions TransferrableDockPosition(int idx);
    // public System.Int32 get_WearablePackedStates()
    // Offset: 0x2976820
    int get_WearablePackedStates();
    // public System.Void set_WearablePackedStates(System.Int32 value)
    // Offset: 0x297683C
    void set_WearablePackedStates(int value);
    // public System.Int32 get_LeftThrowableProjectileIndex()
    // Offset: 0x2976870
    int get_LeftThrowableProjectileIndex();
    // public System.Void set_LeftThrowableProjectileIndex(System.Int32 value)
    // Offset: 0x297688C
    void set_LeftThrowableProjectileIndex(int value);
    // public System.Int32 get_RightThrowableProjectileIndex()
    // Offset: 0x29768C0
    int get_RightThrowableProjectileIndex();
    // public System.Void set_RightThrowableProjectileIndex(System.Int32 value)
    // Offset: 0x29768DC
    void set_RightThrowableProjectileIndex(int value);
    // public UnityEngine.Color32 get_LeftThrowableProjectileColor()
    // Offset: 0x2976910
    ::UnityEngine::Color32 get_LeftThrowableProjectileColor();
    // public System.Void set_LeftThrowableProjectileColor(UnityEngine.Color32 value)
    // Offset: 0x297692C
    void set_LeftThrowableProjectileColor(::UnityEngine::Color32 value);
    // public UnityEngine.Color32 get_RightThrowableProjectileColor()
    // Offset: 0x29769E0
    ::UnityEngine::Color32 get_RightThrowableProjectileColor();
    // public System.Void set_RightThrowableProjectileColor(UnityEngine.Color32 value)
    // Offset: 0x29769FC
    void set_RightThrowableProjectileColor(::UnityEngine::Color32 value);
    // public UnityEngine.Color32 GetThrowableProjectileColor(System.Boolean isLeftHand)
    // Offset: 0x2976AB0
    ::UnityEngine::Color32 GetThrowableProjectileColor(bool isLeftHand);
    // public System.Void SetThrowableProjectileColor(System.Boolean isLeftHand, UnityEngine.Color32 color)
    // Offset: 0x2976AE0
    void SetThrowableProjectileColor(bool isLeftHand, ::UnityEngine::Color32 color);
    // public System.Void SetRandomThrowableModelIndex(System.Int32 randModelIndex)
    // Offset: 0x2976AF4
    void SetRandomThrowableModelIndex(int randModelIndex);
    // public System.Int32 GetRandomThrowableModelIndex()
    // Offset: 0x2976B2C
    int GetRandomThrowableModelIndex();
    // private System.Int32 get_RandomThrowableIndex()
    // Offset: 0x2976B48
    int get_RandomThrowableIndex();
    // private System.Void set_RandomThrowableIndex(System.Int32 value)
    // Offset: 0x2976AF8
    void set_RandomThrowableIndex(int value);
    // public System.Boolean get_IsMicEnabled()
    // Offset: 0x2976B64
    bool get_IsMicEnabled();
    // public System.Void set_IsMicEnabled(System.Boolean value)
    // Offset: 0x2976B80
    void set_IsMicEnabled(bool value);
    // public System.Int32 get_SizeLayerMask()
    // Offset: 0x2976BB8
    int get_SizeLayerMask();
    // public System.Void set_SizeLayerMask(System.Int32 value)
    // Offset: 0x2976BD4
    void set_SizeLayerMask(int value);
    // public Photon.Realtime.Player get_Creator()
    // Offset: 0x2976C08
    ::Photon::Realtime::Player* get_Creator();
    // System.Boolean get_Initialized()
    // Offset: 0x2976C10
    bool get_Initialized();
    // public System.Single get_SpeakingLoudness()
    // Offset: 0x2976C18
    float get_SpeakingLoudness();
    // public System.Void BuildInitialize()
    // Offset: 0x2976C20
    void BuildInitialize();
    // public System.Void BuildInitialize_AfterCosmeticsV2Instantiated()
    // Offset: 0x2976064
    void BuildInitialize_AfterCosmeticsV2Instantiated();
    // private System.Void Awake()
    // Offset: 0x2976E1C
    void Awake();
    // private System.Void EnsureInstantiatedMaterial()
    // Offset: 0x2977310
    void EnsureInstantiatedMaterial();
    // private System.Void ApplyColorCode()
    // Offset: 0x2977428
    void ApplyColorCode();
    // private System.Void SharedStart()
    // Offset: 0x2976F40
    void SharedStart();
    // private System.Collections.IEnumerator OccasionalUpdate()
    // Offset: 0x297752C
    ::System::Collections::IEnumerator* OccasionalUpdate();
    // public System.Boolean IsItemAllowed(System.String itemName)
    // Offset: 0x2977584
    bool IsItemAllowed(::StringW itemName);
    // public System.Void RemoteRigUpdate()
    // Offset: 0x2977730
    void RemoteRigUpdate();
    // private System.Void LateUpdate()
    // Offset: 0x2978188
    void LateUpdate();
    // public System.Void SetHeadBodyOffset()
    // Offset: 0x2975810
    void SetHeadBodyOffset();
    // public System.Void VRRigResize(System.Single ratioVar)
    // Offset: 0x2978C1C
    void VRRigResize(float ratioVar);
    // public System.Int32 ReturnHandPosition()
    // Offset: 0x2978C2C
    int ReturnHandPosition();
    // public System.Void OnDestroy()
    // Offset: 0x2978EC0
    void OnDestroy();
    // public System.Object OnSerializeWrite()
    // Offset: 0x29790C0
    ::Il2CppObject* OnSerializeWrite();
    // public System.Void OnSerializeRead(System.Object objectData)
    // Offset: 0x29794A8
    void OnSerializeRead(::Il2CppObject* objectData);
    // static public System.Int32 PackQuaternionForNetwork(UnityEngine.Quaternion q)
    // Offset: 0x2979C0C
    static int PackQuaternionForNetwork(::UnityEngine::Quaternion q);
    // static public UnityEngine.Quaternion UnpackQuaterionFromNetwork(System.Int32 data)
    // Offset: 0x297A030
    static ::UnityEngine::Quaternion UnpackQuaterionFromNetwork(int data);
    // static public System.Int64 PackHandPosRotForNetwork(UnityEngine.Vector3 localPos, UnityEngine.Quaternion rot)
    // Offset: 0x297A104
    static int64_t PackHandPosRotForNetwork(::UnityEngine::Vector3 localPos, ::UnityEngine::Quaternion rot);
    // static public System.Void UnpackHandPosRotFromNetwork(System.Int64 data, out UnityEngine.Vector3 localPos, out UnityEngine.Quaternion handRot)
    // Offset: 0x297A434
    static void UnpackHandPosRotFromNetwork(int64_t data, ByRef<::UnityEngine::Vector3> localPos, ByRef<::UnityEngine::Quaternion> handRot);
    // static public System.Int64 PackWorldPosForNetwork(UnityEngine.Vector3 worldPos)
    // Offset: 0x297A4F8
    static int64_t PackWorldPosForNetwork(::UnityEngine::Vector3 worldPos);
    // static public UnityEngine.Vector3 UnpackWorldPosFromNetwork(System.Int64 data)
    // Offset: 0x297A7B4
    static ::UnityEngine::Vector3 UnpackWorldPosFromNetwork(int64_t data);
    // private System.Void IWrappedSerializable.OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297A7F0
    void IWrappedSerializable_OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void IWrappedSerializable.OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297AD90
    void IWrappedSerializable_OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void UpdateExtrapolationTarget()
    // Offset: 0x297B210
    void UpdateExtrapolationTarget();
    // private System.Void UpdateRopeData()
    // Offset: 0x29797E4
    void UpdateRopeData();
    // static public System.Void AttachLocalPlayerToPhotonView(Photon.Pun.PhotonView view, UnityEngine.XR.XRNode xrNode, UnityEngine.Vector3 offset, UnityEngine.Vector3 velocity)
    // Offset: 0x297B3EC
    static void AttachLocalPlayerToPhotonView(::Photon::Pun::PhotonView* view, ::UnityEngine::XR::XRNode xrNode, ::UnityEngine::Vector3 offset, ::UnityEngine::Vector3 velocity);
    // static public System.Void DetachLocalPlayerFromPhotonView()
    // Offset: 0x297B530
    static void DetachLocalPlayerFromPhotonView();
    // private System.Void ClearRopeData()
    // Offset: 0x2978FDC
    void ClearRopeData();
    // public System.Void ChangeMaterial(System.Int32 materialIndex, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297B620
    void ChangeMaterial(int materialIndex, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void ChangeMaterialLocal(System.Int32 materialIndex)
    // Offset: 0x29789D8
    void ChangeMaterialLocal(int materialIndex);
    // public System.Void InitializeNoobMaterial(System.Single red, System.Single green, System.Single blue, PhotonMessageInfoWrapped info)
    // Offset: 0x297B6AC
    void InitializeNoobMaterial(float red, float green, float blue, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // public System.Void InitializeNoobMaterialLocal(System.Single red, System.Single green, System.Single blue)
    // Offset: 0x297BA00
    void InitializeNoobMaterialLocal(float red, float green, float blue);
    // public System.Void UpdateName(System.Boolean isSafety)
    // Offset: 0x297BC98
    void UpdateName(bool isSafety);
    // public System.String NormalizeName(System.Boolean doIt, System.String text)
    // Offset: 0x297BE08
    ::StringW NormalizeName(bool doIt, ::StringW text);
    // public System.Void SetJumpLimitLocal(System.Single maxJumpSpeed)
    // Offset: 0x297BFCC
    void SetJumpLimitLocal(float maxJumpSpeed);
    // public System.Void SetJumpMultiplierLocal(System.Single jumpMultiplier)
    // Offset: 0x297C024
    void SetJumpMultiplierLocal(float jumpMultiplier);
    // public System.Void RequestMaterialColor(System.Int32 askingPlayerID, PhotonMessageInfoWrapped info)
    // Offset: 0x297C07C
    void RequestMaterialColor(int askingPlayerID, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // public System.Void RequestCosmetics(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297C330
    void RequestCosmetics(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlayTagSoundLocal(System.Int32 soundIndex, System.Single soundVolume)
    // Offset: 0x297C614
    void PlayTagSoundLocal(int soundIndex, float soundVolume);
    // public System.Void Bonk(System.Int32 soundIndex, System.Single bonkPercent, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297C69C
    void Bonk(int soundIndex, float bonkPercent, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void AssignDrumToMusicDrums(System.Int32 drumIndex, UnityEngine.AudioSource drum)
    // Offset: 0x297C8A0
    void AssignDrumToMusicDrums(int drumIndex, ::UnityEngine::AudioSource* drum);
    // public System.Void PlayDrum(System.Int32 drumIndex, System.Single drumVolume, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297C964
    void PlayDrum(int drumIndex, float drumVolume, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void AssignInstrumentToInstrumentSelfOnly(System.Int32 instrumentSelfOnlyIndex, TransferrableObject instrument)
    // Offset: 0x297CC98
    void AssignInstrumentToInstrumentSelfOnly(int instrumentSelfOnlyIndex, ::GlobalNamespace::TransferrableObject* instrument);
    // public System.Void PlaySelfOnlyInstrument(System.Int32 selfOnlyIndex, System.Int32 noteIndex, System.Single instrumentVol, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297CD80
    void PlaySelfOnlyInstrument(int selfOnlyIndex, int noteIndex, float instrumentVol, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlayHandTapLocal(System.Int32 soundIndex, System.Boolean isLeftHand, System.Single tapVolume)
    // Offset: 0x297CFD0
    void PlayHandTapLocal(int soundIndex, bool isLeftHand, float tapVolume);
    // public System.Void PlaySplashEffect(UnityEngine.Vector3 splashPosition, UnityEngine.Quaternion splashRotation, System.Single splashScale, System.Single boundingRadius, System.Boolean bigSplash, System.Boolean enteringWater, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297D178
    void PlaySplashEffect(::UnityEngine::Vector3 splashPosition, ::UnityEngine::Quaternion splashRotation, float splashScale, float boundingRadius, bool bigSplash, bool enteringWater, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void EnableNonCosmeticHandItemRPC(System.Boolean enable, System.Boolean isLeftHand, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297D66C
    void EnableNonCosmeticHandItemRPC(bool enable, bool isLeftHand, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Boolean IsMakingFistLeft()
    // Offset: 0x297D870
    bool IsMakingFistLeft();
    // public System.Boolean IsMakingFistRight()
    // Offset: 0x297D8F4
    bool IsMakingFistRight();
    // public VRMap GetMakingFist(System.Boolean debug, out System.Boolean isLeftHand)
    // Offset: 0x297D978
    ::GlobalNamespace::VRMap* GetMakingFist(bool debug, ByRef<bool> isLeftHand);
    // public System.Void PlayGeodeEffect(UnityEngine.Vector3 hitPosition)
    // Offset: 0x297D9CC
    void PlayGeodeEffect(::UnityEngine::Vector3 hitPosition);
    // public System.Void PlayClimbSound(UnityEngine.AudioClip clip, System.Boolean isLeftHand)
    // Offset: 0x297DAB4
    void PlayClimbSound(::UnityEngine::AudioClip* clip, bool isLeftHand);
    // public System.Void UpdateCosmetics(System.String[] currentItems, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297DB5C
    void UpdateCosmetics(::ArrayW<::StringW> currentItems, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void UpdateCosmeticsWithTryon(System.String[] currentItems, System.String[] tryOnItems, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x297DD28
    void UpdateCosmeticsWithTryon(::ArrayW<::StringW> currentItems, ::ArrayW<::StringW> tryOnItems, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void LocalUpdateCosmetics(GorillaNetworking.CosmeticsController/CosmeticSet newSet)
    // Offset: 0x297DCF8
    void LocalUpdateCosmetics(::GorillaNetworking::CosmeticsController::CosmeticSet* newSet);
    // public System.Void LocalUpdateCosmeticsWithTryon(GorillaNetworking.CosmeticsController/CosmeticSet newSet, GorillaNetworking.CosmeticsController/CosmeticSet newTryOnSet)
    // Offset: 0x297DF18
    void LocalUpdateCosmeticsWithTryon(::GorillaNetworking::CosmeticsController::CosmeticSet* newSet, ::GorillaNetworking::CosmeticsController::CosmeticSet* newTryOnSet);
    // private System.Void CheckForEarlyAccess()
    // Offset: 0x2975FC8
    void CheckForEarlyAccess();
    // public System.Void SetCosmeticsActive()
    // Offset: 0x29762C4
    void SetCosmeticsActive();
    // public System.Void GetCosmeticsPlayFabCatalogData()
    // Offset: 0x297DF68
    void GetCosmeticsPlayFabCatalogData();
    // public System.Void GenerateFingerAngleLookupTables()
    // Offset: 0x297E12C
    void GenerateFingerAngleLookupTables();
    // private System.Void GenerateTableThumb(ref VRMapThumb thumb)
    // Offset: 0x297E780
    void GenerateTableThumb(ByRef<::GlobalNamespace::VRMapThumb*> thumb);
    // private System.Void GenerateTableIndex(ref VRMapIndex index)
    // Offset: 0x297E168
    void GenerateTableIndex(ByRef<::GlobalNamespace::VRMapIndex*> index);
    // private System.Void GenerateTableMiddle(ref VRMapMiddle middle)
    // Offset: 0x297E474
    void GenerateTableMiddle(ByRef<::GlobalNamespace::VRMapMiddle*> middle);
    // private UnityEngine.Quaternion SanitizeQuaternion(UnityEngine.Quaternion quat)
    // Offset: 0x29780D0
    ::UnityEngine::Quaternion SanitizeQuaternion(::UnityEngine::Quaternion quat);
    // private UnityEngine.Vector3 SanitizeVector3(UnityEngine.Vector3 vec)
    // Offset: 0x2977F8C
    ::UnityEngine::Vector3 SanitizeVector3(::UnityEngine::Vector3 vec);
    // private System.Void IncrementRPC(PhotonMessageInfoWrapped info, System.String sourceCall)
    // Offset: 0x297B940
    void IncrementRPC(::GlobalNamespace::PhotonMessageInfoWrapped info, ::StringW sourceCall);
    // private System.Void IncrementRPC(Photon.Pun.PhotonMessageInfo info, System.String sourceCall)
    // Offset: 0x297C538
    void IncrementRPC(::Photon::Pun::PhotonMessageInfo info, ::StringW sourceCall);
    // private System.Void AddVelocityToQueue(UnityEngine.Vector3 position, System.Double serverTime)
    // Offset: 0x2979A70
    void AddVelocityToQueue(::UnityEngine::Vector3 position, double serverTime);
    // private UnityEngine.Vector3 ReturnVelocityAtTime(System.Double timeToReturn)
    // Offset: 0x297EA34
    ::UnityEngine::Vector3 ReturnVelocityAtTime(double timeToReturn);
    // public UnityEngine.Vector3 LatestVelocity()
    // Offset: 0x297EC90
    ::UnityEngine::Vector3 LatestVelocity();
    // public System.Boolean CheckDistance(UnityEngine.Vector3 position, System.Single max)
    // Offset: 0x297ED50
    bool CheckDistance(::UnityEngine::Vector3 position, float max);
    // public System.Boolean CheckTagDistanceRollback(VRRig otherRig, System.Single max, System.Single timeInterval)
    // Offset: 0x297ED94
    bool CheckTagDistanceRollback(::GlobalNamespace::VRRig* otherRig, float max, float timeInterval);
    // public System.Void add_OnColorChanged(System.Action`1<UnityEngine.Color> value)
    // Offset: 0x297EEC0
    void add_OnColorChanged(::System::Action_1<::UnityEngine::Color>* value);
    // public System.Void remove_OnColorChanged(System.Action`1<UnityEngine.Color> value)
    // Offset: 0x297EF74
    void remove_OnColorChanged(::System::Action_1<::UnityEngine::Color>* value);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x297BB24
    void SetColor(::UnityEngine::Color color);
    // public System.Void OnColorInitialized(System.Action`1<UnityEngine.Color> action)
    // Offset: 0x297F028
    void OnColorInitialized(::System::Action_1<::UnityEngine::Color>* action);
    // private System.Void OnEnable()
    // Offset: 0x297F110
    void OnEnable();
    // private System.Void IPreDisable.PreDisable()
    // Offset: 0x297F22C
    void IPreDisable_PreDisable();
    // private System.Void OnDisable()
    // Offset: 0x297F64C
    void OnDisable();
    // public System.Void NetInitialize()
    // Offset: 0x297F870
    void NetInitialize();
    // public System.Void UpdateFriendshipBracelet()
    // Offset: 0x297FD2C
    void UpdateFriendshipBracelet();
    // public System.Void EnableHuntWatch(System.Boolean on)
    // Offset: 0x297F51C
    void EnableHuntWatch(bool on);
    // public System.Void EnableBattleCosmetics(System.Boolean on)
    // Offset: 0x297F61C
    void EnableBattleCosmetics(bool on);
    // public System.Void EnableBuilderResizeWatch(System.Boolean on)
    // Offset: 0x2980140
    void EnableBuilderResizeWatch(bool on);
    // private System.Void UpdateReplacementVoice()
    // Offset: 0x2979734
    void UpdateReplacementVoice();
    // public System.Boolean ShouldPlayReplacementVoice()
    // Offset: 0x2980224
    bool ShouldPlayReplacementVoice();
    // private System.Boolean IUserCosmeticsCallback.get_PendingUpdate()
    // Offset: 0x2980350
    bool IUserCosmeticsCallback_get_PendingUpdate();
    // private System.Void IUserCosmeticsCallback.set_PendingUpdate(System.Boolean value)
    // Offset: 0x2980358
    void IUserCosmeticsCallback_set_PendingUpdate(bool value);
    // private System.Boolean IUserCosmeticsCallback.OnGetUserCosmetics(System.String cosmetics)
    // Offset: 0x2980364
    bool IUserCosmeticsCallback_OnGetUserCosmetics(::StringW cosmetics);
    // static private System.Void CacheLocalRig()
    // Offset: 0x29804D0
    static void CacheLocalRig();
    // static public VRRig get_LocalRig()
    // Offset: 0x29805E4
    static ::GlobalNamespace::VRRig* get_LocalRig();
    // public System.Boolean get_isLocal()
    // Offset: 0x298063C
    bool get_isLocal();
    // public System.Void .ctor()
    // Offset: 0x29806CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRig*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29808B4
    static void _cctor();
    // private System.Void <GetCosmeticsPlayFabCatalogData>b__287_0(PlayFab.ClientModels.GetUserInventoryResult result)
    // Offset: 0x29809E0
    void $GetCosmeticsPlayFabCatalogData$b__287_0(::PlayFab::ClientModels::GetUserInventoryResult* result);
    // private System.Void <GetCosmeticsPlayFabCatalogData>b__287_1(PlayFab.PlayFabError error)
    // Offset: 0x2980C2C
    void $GetCosmeticsPlayFabCatalogData$b__287_1(::PlayFab::PlayFabError* error);
  }; // VRRig
  #pragma pack(pop)
  static check_size<sizeof(VRRig), 1328 + sizeof(::StringW)> __GlobalNamespace_VRRigSizeCheck;
  static_assert(sizeof(VRRig) == 0x538);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRig::VelocityTime, "", "VRRig/VelocityTime");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRig::PartyMemberStatus, "", "VRRig/PartyMemberStatus");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CosmeticsV2_Awake
// Il2CppName: CosmeticsV2_Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::CosmeticsV2_Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CosmeticsV2_Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CosmeticsV2_OnDestroy
// Il2CppName: CosmeticsV2_OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::CosmeticsV2_OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CosmeticsV2_OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics
// Il2CppName: Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_cosmetics
// Il2CppName: get_cosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_cosmetics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_cosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_cosmetics
// Il2CppName: set_cosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::ArrayW<::UnityEngine::GameObject*>)>(&GlobalNamespace::VRRig::set_cosmetics)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_cosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_overrideCosmetics
// Il2CppName: get_overrideCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_overrideCosmetics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_overrideCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_overrideCosmetics
// Il2CppName: set_overrideCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::ArrayW<::UnityEngine::GameObject*>)>(&GlobalNamespace::VRRig::set_overrideCosmetics)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_overrideCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_HasBracelet
// Il2CppName: get_HasBracelet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_HasBracelet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_HasBracelet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetMouthPosition
// Il2CppName: GetMouthPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::GetMouthPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetMouthPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetPartyMemberStatus
// Il2CppName: GetPartyMemberStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig::PartyMemberStatus (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::GetPartyMemberStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetPartyMemberStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_IsLocalPartyMember
// Il2CppName: get_IsLocalPartyMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_IsLocalPartyMember)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_IsLocalPartyMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ClearPartyMemberStatus
// Il2CppName: ClearPartyMemberStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ClearPartyMemberStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ClearPartyMemberStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ActiveTransferrableObjectIndex
// Il2CppName: ActiveTransferrableObjectIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::ActiveTransferrableObjectIndex)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ActiveTransferrableObjectIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ActiveTransferrableObjectIndexLength
// Il2CppName: ActiveTransferrableObjectIndexLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ActiveTransferrableObjectIndexLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ActiveTransferrableObjectIndexLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetActiveTransferrableObjectIndex
// Il2CppName: SetActiveTransferrableObjectIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, int)>(&GlobalNamespace::VRRig::SetActiveTransferrableObjectIndex)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetActiveTransferrableObjectIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, v});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::TransferrablePosStates
// Il2CppName: TransferrablePosStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject::PositionState (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::TransferrablePosStates)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "TransferrablePosStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetTransferrablePosStates
// Il2CppName: SetTransferrablePosStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::VRRig::SetTransferrablePosStates)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetTransferrablePosStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, v});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::TransferrableItemStates
// Il2CppName: TransferrableItemStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject::ItemStates (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::TransferrableItemStates)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "TransferrableItemStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetTransferrableItemStates
// Il2CppName: SetTransferrableItemStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::GlobalNamespace::TransferrableObject::ItemStates)>(&GlobalNamespace::VRRig::SetTransferrableItemStates)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/ItemStates")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetTransferrableItemStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, v});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetTransferrableDockPosition
// Il2CppName: SetTransferrableDockPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::VRRig::SetTransferrableDockPosition)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetTransferrableDockPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, v});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::TransferrableDockPosition
// Il2CppName: TransferrableDockPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BodyDockPositions::DropPositions (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::TransferrableDockPosition)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "TransferrableDockPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_WearablePackedStates
// Il2CppName: get_WearablePackedStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_WearablePackedStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_WearablePackedStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_WearablePackedStates
// Il2CppName: set_WearablePackedStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::set_WearablePackedStates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_WearablePackedStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_LeftThrowableProjectileIndex
// Il2CppName: get_LeftThrowableProjectileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_LeftThrowableProjectileIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_LeftThrowableProjectileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_LeftThrowableProjectileIndex
// Il2CppName: set_LeftThrowableProjectileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::set_LeftThrowableProjectileIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_LeftThrowableProjectileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_RightThrowableProjectileIndex
// Il2CppName: get_RightThrowableProjectileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_RightThrowableProjectileIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_RightThrowableProjectileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_RightThrowableProjectileIndex
// Il2CppName: set_RightThrowableProjectileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::set_RightThrowableProjectileIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_RightThrowableProjectileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_LeftThrowableProjectileColor
// Il2CppName: get_LeftThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_LeftThrowableProjectileColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_LeftThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_LeftThrowableProjectileColor
// Il2CppName: set_LeftThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Color32)>(&GlobalNamespace::VRRig::set_LeftThrowableProjectileColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_LeftThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_RightThrowableProjectileColor
// Il2CppName: get_RightThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_RightThrowableProjectileColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_RightThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_RightThrowableProjectileColor
// Il2CppName: set_RightThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Color32)>(&GlobalNamespace::VRRig::set_RightThrowableProjectileColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_RightThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetThrowableProjectileColor
// Il2CppName: GetThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::GetThrowableProjectileColor)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetThrowableProjectileColor
// Il2CppName: SetThrowableProjectileColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool, ::UnityEngine::Color32)>(&GlobalNamespace::VRRig::SetThrowableProjectileColor)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetThrowableProjectileColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetRandomThrowableModelIndex
// Il2CppName: SetRandomThrowableModelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::SetRandomThrowableModelIndex)> {
  static const MethodInfo* get() {
    static auto* randModelIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetRandomThrowableModelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{randModelIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetRandomThrowableModelIndex
// Il2CppName: GetRandomThrowableModelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::GetRandomThrowableModelIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetRandomThrowableModelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_RandomThrowableIndex
// Il2CppName: get_RandomThrowableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_RandomThrowableIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_RandomThrowableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_RandomThrowableIndex
// Il2CppName: set_RandomThrowableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::set_RandomThrowableIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_RandomThrowableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_IsMicEnabled
// Il2CppName: get_IsMicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_IsMicEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_IsMicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_IsMicEnabled
// Il2CppName: set_IsMicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::set_IsMicEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_IsMicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_SizeLayerMask
// Il2CppName: get_SizeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_SizeLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_SizeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::set_SizeLayerMask
// Il2CppName: set_SizeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::set_SizeLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "set_SizeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_Creator
// Il2CppName: get_Creator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_Creator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_Creator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_SpeakingLoudness
// Il2CppName: get_SpeakingLoudness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_SpeakingLoudness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_SpeakingLoudness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::BuildInitialize
// Il2CppName: BuildInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::BuildInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "BuildInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::BuildInitialize_AfterCosmeticsV2Instantiated
// Il2CppName: BuildInitialize_AfterCosmeticsV2Instantiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::BuildInitialize_AfterCosmeticsV2Instantiated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "BuildInitialize_AfterCosmeticsV2Instantiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::EnsureInstantiatedMaterial
// Il2CppName: EnsureInstantiatedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::EnsureInstantiatedMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "EnsureInstantiatedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ApplyColorCode
// Il2CppName: ApplyColorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ApplyColorCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ApplyColorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SharedStart
// Il2CppName: SharedStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::SharedStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SharedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OccasionalUpdate
// Il2CppName: OccasionalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::OccasionalUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OccasionalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IsItemAllowed
// Il2CppName: IsItemAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)(::StringW)>(&GlobalNamespace::VRRig::IsItemAllowed)> {
  static const MethodInfo* get() {
    static auto* itemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IsItemAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::RemoteRigUpdate
// Il2CppName: RemoteRigUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::RemoteRigUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "RemoteRigUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetHeadBodyOffset
// Il2CppName: SetHeadBodyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::SetHeadBodyOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetHeadBodyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::VRRigResize
// Il2CppName: VRRigResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(float)>(&GlobalNamespace::VRRig::VRRigResize)> {
  static const MethodInfo* get() {
    static auto* ratioVar = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "VRRigResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratioVar});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ReturnHandPosition
// Il2CppName: ReturnHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ReturnHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ReturnHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnSerializeWrite
// Il2CppName: OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::OnSerializeWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnSerializeRead
// Il2CppName: OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::Il2CppObject*)>(&GlobalNamespace::VRRig::OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* objectData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PackQuaternionForNetwork
// Il2CppName: PackQuaternionForNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Quaternion)>(&GlobalNamespace::VRRig::PackQuaternionForNetwork)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PackQuaternionForNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UnpackQuaterionFromNetwork
// Il2CppName: UnpackQuaterionFromNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(int)>(&GlobalNamespace::VRRig::UnpackQuaterionFromNetwork)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UnpackQuaterionFromNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PackHandPosRotForNetwork
// Il2CppName: PackHandPosRotForNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::VRRig::PackHandPosRotForNetwork)> {
  static const MethodInfo* get() {
    static auto* localPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PackHandPosRotForNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPos, rot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UnpackHandPosRotFromNetwork
// Il2CppName: UnpackHandPosRotFromNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&GlobalNamespace::VRRig::UnpackHandPosRotFromNetwork)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* localPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* handRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UnpackHandPosRotFromNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, localPos, handRot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PackWorldPosForNetwork
// Il2CppName: PackWorldPosForNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::UnityEngine::Vector3)>(&GlobalNamespace::VRRig::PackWorldPosForNetwork)> {
  static const MethodInfo* get() {
    static auto* worldPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PackWorldPosForNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UnpackWorldPosFromNetwork
// Il2CppName: UnpackWorldPosFromNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(int64_t)>(&GlobalNamespace::VRRig::UnpackWorldPosFromNetwork)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UnpackWorldPosFromNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeWrite
// Il2CppName: IWrappedSerializable.OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IWrappedSerializable.OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeRead
// Il2CppName: IWrappedSerializable.OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IWrappedSerializable.OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateExtrapolationTarget
// Il2CppName: UpdateExtrapolationTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::UpdateExtrapolationTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateExtrapolationTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateRopeData
// Il2CppName: UpdateRopeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::UpdateRopeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateRopeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::AttachLocalPlayerToPhotonView
// Il2CppName: AttachLocalPlayerToPhotonView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Pun::PhotonView*, ::UnityEngine::XR::XRNode, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::VRRig::AttachLocalPlayerToPhotonView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonView")->byval_arg;
    static auto* xrNode = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "AttachLocalPlayerToPhotonView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view, xrNode, offset, velocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::DetachLocalPlayerFromPhotonView
// Il2CppName: DetachLocalPlayerFromPhotonView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::VRRig::DetachLocalPlayerFromPhotonView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "DetachLocalPlayerFromPhotonView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ClearRopeData
// Il2CppName: ClearRopeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ClearRopeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ClearRopeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ChangeMaterial
// Il2CppName: ChangeMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::ChangeMaterial)> {
  static const MethodInfo* get() {
    static auto* materialIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ChangeMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialIndex, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ChangeMaterialLocal
// Il2CppName: ChangeMaterialLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int)>(&GlobalNamespace::VRRig::ChangeMaterialLocal)> {
  static const MethodInfo* get() {
    static auto* materialIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ChangeMaterialLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::InitializeNoobMaterial
// Il2CppName: InitializeNoobMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(float, float, float, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::VRRig::InitializeNoobMaterial)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "InitializeNoobMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::InitializeNoobMaterialLocal
// Il2CppName: InitializeNoobMaterialLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(float, float, float)>(&GlobalNamespace::VRRig::InitializeNoobMaterialLocal)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "InitializeNoobMaterialLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateName
// Il2CppName: UpdateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::UpdateName)> {
  static const MethodInfo* get() {
    static auto* isSafety = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSafety});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::NormalizeName
// Il2CppName: NormalizeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::VRRig::*)(bool, ::StringW)>(&GlobalNamespace::VRRig::NormalizeName)> {
  static const MethodInfo* get() {
    static auto* doIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "NormalizeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doIt, text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetJumpLimitLocal
// Il2CppName: SetJumpLimitLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(float)>(&GlobalNamespace::VRRig::SetJumpLimitLocal)> {
  static const MethodInfo* get() {
    static auto* maxJumpSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetJumpLimitLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxJumpSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetJumpMultiplierLocal
// Il2CppName: SetJumpMultiplierLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(float)>(&GlobalNamespace::VRRig::SetJumpMultiplierLocal)> {
  static const MethodInfo* get() {
    static auto* jumpMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetJumpMultiplierLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jumpMultiplier});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::RequestMaterialColor
// Il2CppName: RequestMaterialColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::VRRig::RequestMaterialColor)> {
  static const MethodInfo* get() {
    static auto* askingPlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "RequestMaterialColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{askingPlayerID, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::RequestCosmetics
// Il2CppName: RequestCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::RequestCosmetics)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "RequestCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlayTagSoundLocal
// Il2CppName: PlayTagSoundLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, float)>(&GlobalNamespace::VRRig::PlayTagSoundLocal)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlayTagSoundLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::Bonk
// Il2CppName: Bonk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::Bonk)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bonkPercent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "Bonk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, bonkPercent, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::AssignDrumToMusicDrums
// Il2CppName: AssignDrumToMusicDrums
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::UnityEngine::AudioSource*)>(&GlobalNamespace::VRRig::AssignDrumToMusicDrums)> {
  static const MethodInfo* get() {
    static auto* drumIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* drum = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "AssignDrumToMusicDrums", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumIndex, drum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlayDrum
// Il2CppName: PlayDrum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::PlayDrum)> {
  static const MethodInfo* get() {
    static auto* drumIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* drumVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlayDrum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumIndex, drumVolume, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::AssignInstrumentToInstrumentSelfOnly
// Il2CppName: AssignInstrumentToInstrumentSelfOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, ::GlobalNamespace::TransferrableObject*)>(&GlobalNamespace::VRRig::AssignInstrumentToInstrumentSelfOnly)> {
  static const MethodInfo* get() {
    static auto* instrumentSelfOnlyIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instrument = &::il2cpp_utils::GetClassFromName("", "TransferrableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "AssignInstrumentToInstrumentSelfOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrumentSelfOnlyIndex, instrument});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlaySelfOnlyInstrument
// Il2CppName: PlaySelfOnlyInstrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::PlaySelfOnlyInstrument)> {
  static const MethodInfo* get() {
    static auto* selfOnlyIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instrumentVol = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlaySelfOnlyInstrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selfOnlyIndex, noteIndex, instrumentVol, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlayHandTapLocal
// Il2CppName: PlayHandTapLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(int, bool, float)>(&GlobalNamespace::VRRig::PlayHandTapLocal)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tapVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlayHandTapLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, isLeftHand, tapVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlaySplashEffect
// Il2CppName: PlaySplashEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, bool, bool, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::PlaySplashEffect)> {
  static const MethodInfo* get() {
    static auto* splashPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* splashRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* splashScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* boundingRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bigSplash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enteringWater = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlaySplashEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{splashPosition, splashRotation, splashScale, boundingRadius, bigSplash, enteringWater, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::EnableNonCosmeticHandItemRPC
// Il2CppName: EnableNonCosmeticHandItemRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool, bool, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::EnableNonCosmeticHandItemRPC)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "EnableNonCosmeticHandItemRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable, isLeftHand, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IsMakingFistLeft
// Il2CppName: IsMakingFistLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::IsMakingFistLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IsMakingFistLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IsMakingFistRight
// Il2CppName: IsMakingFistRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::IsMakingFistRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IsMakingFistRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetMakingFist
// Il2CppName: GetMakingFist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRMap* (GlobalNamespace::VRRig::*)(bool, ByRef<bool>)>(&GlobalNamespace::VRRig::GetMakingFist)> {
  static const MethodInfo* get() {
    static auto* debug = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetMakingFist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debug, isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlayGeodeEffect
// Il2CppName: PlayGeodeEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Vector3)>(&GlobalNamespace::VRRig::PlayGeodeEffect)> {
  static const MethodInfo* get() {
    static auto* hitPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlayGeodeEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::PlayClimbSound
// Il2CppName: PlayClimbSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::AudioClip*, bool)>(&GlobalNamespace::VRRig::PlayClimbSound)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "PlayClimbSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateCosmetics
// Il2CppName: UpdateCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::ArrayW<::StringW>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::UpdateCosmetics)> {
  static const MethodInfo* get() {
    static auto* currentItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentItems, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateCosmeticsWithTryon
// Il2CppName: UpdateCosmeticsWithTryon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::ArrayW<::StringW>, ::ArrayW<::StringW>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRig::UpdateCosmeticsWithTryon)> {
  static const MethodInfo* get() {
    static auto* currentItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* tryOnItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateCosmeticsWithTryon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentItems, tryOnItems, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::LocalUpdateCosmetics
// Il2CppName: LocalUpdateCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::GorillaNetworking::CosmeticsController::CosmeticSet*)>(&GlobalNamespace::VRRig::LocalUpdateCosmetics)> {
  static const MethodInfo* get() {
    static auto* newSet = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "LocalUpdateCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSet});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::LocalUpdateCosmeticsWithTryon
// Il2CppName: LocalUpdateCosmeticsWithTryon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::GorillaNetworking::CosmeticsController::CosmeticSet*, ::GorillaNetworking::CosmeticsController::CosmeticSet*)>(&GlobalNamespace::VRRig::LocalUpdateCosmeticsWithTryon)> {
  static const MethodInfo* get() {
    static auto* newSet = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSet")->byval_arg;
    static auto* newTryOnSet = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "LocalUpdateCosmeticsWithTryon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSet, newTryOnSet});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CheckForEarlyAccess
// Il2CppName: CheckForEarlyAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::CheckForEarlyAccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CheckForEarlyAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetCosmeticsActive
// Il2CppName: SetCosmeticsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::SetCosmeticsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetCosmeticsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GetCosmeticsPlayFabCatalogData
// Il2CppName: GetCosmeticsPlayFabCatalogData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::GetCosmeticsPlayFabCatalogData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GetCosmeticsPlayFabCatalogData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GenerateFingerAngleLookupTables
// Il2CppName: GenerateFingerAngleLookupTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::GenerateFingerAngleLookupTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GenerateFingerAngleLookupTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GenerateTableThumb
// Il2CppName: GenerateTableThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(ByRef<::GlobalNamespace::VRMapThumb*>)>(&GlobalNamespace::VRRig::GenerateTableThumb)> {
  static const MethodInfo* get() {
    static auto* thumb = &::il2cpp_utils::GetClassFromName("", "VRMapThumb")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GenerateTableThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thumb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GenerateTableIndex
// Il2CppName: GenerateTableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(ByRef<::GlobalNamespace::VRMapIndex*>)>(&GlobalNamespace::VRRig::GenerateTableIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("", "VRMapIndex")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GenerateTableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::GenerateTableMiddle
// Il2CppName: GenerateTableMiddle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(ByRef<::GlobalNamespace::VRMapMiddle*>)>(&GlobalNamespace::VRRig::GenerateTableMiddle)> {
  static const MethodInfo* get() {
    static auto* middle = &::il2cpp_utils::GetClassFromName("", "VRMapMiddle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "GenerateTableMiddle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{middle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SanitizeQuaternion
// Il2CppName: SanitizeQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::VRRig::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::VRRig::SanitizeQuaternion)> {
  static const MethodInfo* get() {
    static auto* quat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SanitizeQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SanitizeVector3
// Il2CppName: SanitizeVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::VRRig::*)(::UnityEngine::Vector3)>(&GlobalNamespace::VRRig::SanitizeVector3)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SanitizeVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IncrementRPC
// Il2CppName: IncrementRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::GlobalNamespace::PhotonMessageInfoWrapped, ::StringW)>(&GlobalNamespace::VRRig::IncrementRPC)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    static auto* sourceCall = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IncrementRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, sourceCall});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IncrementRPC
// Il2CppName: IncrementRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::Photon::Pun::PhotonMessageInfo, ::StringW)>(&GlobalNamespace::VRRig::IncrementRPC)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    static auto* sourceCall = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IncrementRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, sourceCall});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::AddVelocityToQueue
// Il2CppName: AddVelocityToQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Vector3, double)>(&GlobalNamespace::VRRig::AddVelocityToQueue)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* serverTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "AddVelocityToQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, serverTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ReturnVelocityAtTime
// Il2CppName: ReturnVelocityAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::VRRig::*)(double)>(&GlobalNamespace::VRRig::ReturnVelocityAtTime)> {
  static const MethodInfo* get() {
    static auto* timeToReturn = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ReturnVelocityAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeToReturn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::LatestVelocity
// Il2CppName: LatestVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::LatestVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "LatestVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CheckDistance
// Il2CppName: CheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::VRRig::CheckDistance)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, max});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CheckTagDistanceRollback
// Il2CppName: CheckTagDistanceRollback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)(::GlobalNamespace::VRRig*, float, float)>(&GlobalNamespace::VRRig::CheckTagDistanceRollback)> {
  static const MethodInfo* get() {
    static auto* otherRig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeInterval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CheckTagDistanceRollback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherRig, max, timeInterval});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::add_OnColorChanged
// Il2CppName: add_OnColorChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::VRRig::add_OnColorChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "add_OnColorChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::remove_OnColorChanged
// Il2CppName: remove_OnColorChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::VRRig::remove_OnColorChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "remove_OnColorChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::UnityEngine::Color)>(&GlobalNamespace::VRRig::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnColorInitialized
// Il2CppName: OnColorInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::VRRig::OnColorInitialized)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnColorInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IPreDisable_PreDisable
// Il2CppName: IPreDisable.PreDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::IPreDisable_PreDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IPreDisable.PreDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::NetInitialize
// Il2CppName: NetInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::NetInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "NetInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateFriendshipBracelet
// Il2CppName: UpdateFriendshipBracelet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::UpdateFriendshipBracelet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateFriendshipBracelet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::EnableHuntWatch
// Il2CppName: EnableHuntWatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::EnableHuntWatch)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "EnableHuntWatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::EnableBattleCosmetics
// Il2CppName: EnableBattleCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::EnableBattleCosmetics)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "EnableBattleCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::EnableBuilderResizeWatch
// Il2CppName: EnableBuilderResizeWatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::EnableBuilderResizeWatch)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "EnableBuilderResizeWatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::UpdateReplacementVoice
// Il2CppName: UpdateReplacementVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::UpdateReplacementVoice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "UpdateReplacementVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::ShouldPlayReplacementVoice
// Il2CppName: ShouldPlayReplacementVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::ShouldPlayReplacementVoice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "ShouldPlayReplacementVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IUserCosmeticsCallback_get_PendingUpdate
// Il2CppName: IUserCosmeticsCallback.get_PendingUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::IUserCosmeticsCallback_get_PendingUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IUserCosmeticsCallback.get_PendingUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IUserCosmeticsCallback_set_PendingUpdate
// Il2CppName: IUserCosmeticsCallback.set_PendingUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(bool)>(&GlobalNamespace::VRRig::IUserCosmeticsCallback_set_PendingUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IUserCosmeticsCallback.set_PendingUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::IUserCosmeticsCallback_OnGetUserCosmetics
// Il2CppName: IUserCosmeticsCallback.OnGetUserCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)(::StringW)>(&GlobalNamespace::VRRig::IUserCosmeticsCallback_OnGetUserCosmetics)> {
  static const MethodInfo* get() {
    static auto* cosmetics = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "IUserCosmeticsCallback.OnGetUserCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cosmetics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::CacheLocalRig
// Il2CppName: CacheLocalRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::VRRig::CacheLocalRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "CacheLocalRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_LocalRig
// Il2CppName: get_LocalRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (*)()>(&GlobalNamespace::VRRig::get_LocalRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_LocalRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::get_isLocal
// Il2CppName: get_isLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRig::*)()>(&GlobalNamespace::VRRig::get_isLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "get_isLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VRRig::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::VRRig::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_0
// Il2CppName: <GetCosmeticsPlayFabCatalogData>b__287_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::PlayFab::ClientModels::GetUserInventoryResult*)>(&GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetUserInventoryResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "<GetCosmeticsPlayFabCatalogData>b__287_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_1
// Il2CppName: <GetCosmeticsPlayFabCatalogData>b__287_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRig::*)(::PlayFab::PlayFabError*)>(&GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_1)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRig*), "<GetCosmeticsPlayFabCatalogData>b__287_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
