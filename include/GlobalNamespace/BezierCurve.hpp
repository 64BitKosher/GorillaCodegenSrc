// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BezierCurve
  class BezierCurve;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BezierCurve);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BezierCurve*, "", "BezierCurve");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BezierCurve
  // [TokenAttribute] Offset: FFFFFFFF
  class BezierCurve : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Vector3[] points
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3[] points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_points();
    // public UnityEngine.Vector3 GetPoint(System.Single t)
    // Offset: 0x277ABE4
    ::UnityEngine::Vector3 GetPoint(float t);
    // public UnityEngine.Vector3 GetVelocity(System.Single t)
    // Offset: 0x277AC84
    ::UnityEngine::Vector3 GetVelocity(float t);
    // public UnityEngine.Vector3 GetDirection(System.Single t)
    // Offset: 0x277AD68
    ::UnityEngine::Vector3 GetDirection(float t);
    // public System.Void Reset()
    // Offset: 0x277AE3C
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x277AF00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierCurve* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierCurve*, creationType>()));
    }
  }; // BezierCurve
  #pragma pack(pop)
  static check_size<sizeof(BezierCurve), 32 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __GlobalNamespace_BezierCurveSizeCheck;
  static_assert(sizeof(BezierCurve) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BezierCurve::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierCurve::*)(float)>(&GlobalNamespace::BezierCurve::GetPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierCurve*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierCurve::GetVelocity
// Il2CppName: GetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierCurve::*)(float)>(&GlobalNamespace::BezierCurve::GetVelocity)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierCurve*), "GetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierCurve::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierCurve::*)(float)>(&GlobalNamespace::BezierCurve::GetDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierCurve*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierCurve::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierCurve::*)()>(&GlobalNamespace::BezierCurve::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierCurve*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
