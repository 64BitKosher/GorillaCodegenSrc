// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpinParametricAnimation
  class SpinParametricAnimation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpinParametricAnimation);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpinParametricAnimation*, "", "SpinParametricAnimation");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: SpinParametricAnimation
  // [TokenAttribute] Offset: FFFFFFFF
  class SpinParametricAnimation : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Vector3 axis
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 axis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean WorldSpaceRotation
    // Size: 0x1
    // Offset: 0x2C
    bool WorldSpaceRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WorldSpaceRotation and: revolutionsPerSecond
    char __padding1[0x3] = {};
    // public System.Single revolutionsPerSecond
    // Size: 0x4
    // Offset: 0x30
    float revolutionsPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: revolutionsPerSecond and: timeCurve
    char __padding2[0x4] = {};
    // public UnityEngine.AnimationCurve timeCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* timeCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _animationProgress
    // Size: 0x4
    // Offset: 0x40
    float animationProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _oldAngle
    // Size: 0x4
    // Offset: 0x44
    float oldAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 axis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_axis();
    // Get instance field reference: public System.Boolean WorldSpaceRotation
    [[deprecated("Use field access instead!")]] bool& dyn_WorldSpaceRotation();
    // Get instance field reference: public System.Single revolutionsPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_revolutionsPerSecond();
    // Get instance field reference: public UnityEngine.AnimationCurve timeCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_timeCurve();
    // Get instance field reference: private System.Single _animationProgress
    [[deprecated("Use field access instead!")]] float& dyn__animationProgress();
    // Get instance field reference: private System.Single _oldAngle
    [[deprecated("Use field access instead!")]] float& dyn__oldAngle();
    // protected System.Void OnEnable()
    // Offset: 0x28962C4
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x2896398
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x289655C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpinParametricAnimation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpinParametricAnimation*, creationType>()));
    }
  }; // SpinParametricAnimation
  #pragma pack(pop)
  static check_size<sizeof(SpinParametricAnimation), 68 + sizeof(float)> __GlobalNamespace_SpinParametricAnimationSizeCheck;
  static_assert(sizeof(SpinParametricAnimation) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpinParametricAnimation::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinParametricAnimation::*)()>(&GlobalNamespace::SpinParametricAnimation::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinParametricAnimation*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinParametricAnimation::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinParametricAnimation::*)()>(&GlobalNamespace::SpinParametricAnimation::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinParametricAnimation*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinParametricAnimation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
