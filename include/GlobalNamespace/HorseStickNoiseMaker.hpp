// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HorseStickNoiseMaker
  class HorseStickNoiseMaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HorseStickNoiseMaker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HorseStickNoiseMaker*, "", "HorseStickNoiseMaker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: HorseStickNoiseMaker
  // [TokenAttribute] Offset: FFFFFFFF
  class HorseStickNoiseMaker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single metersPerClip
    // Size: 0x4
    // Offset: 0x20
    float metersPerClip;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minSecBetweenClips
    // Size: 0x4
    // Offset: 0x24
    float minSecBetweenClips;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SoundBankPlayer soundBankPlayer
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::SoundBankPlayer* soundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public UnityEngine.Transform gorillaPlayerXform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* gorillaPlayerXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.String gorillaPlayerXform_path
    // Size: 0x8
    // Offset: 0x38
    ::StringW gorillaPlayerXform_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.ParticleSystem particleFX
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::ParticleSystem* particleFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Vector3 oldPos
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 oldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single timeSincePlay
    // Size: 0x4
    // Offset: 0x54
    float timeSincePlay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single distElapsed
    // Size: 0x4
    // Offset: 0x58
    float distElapsed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single metersPerClip
    [[deprecated("Use field access instead!")]] float& dyn_metersPerClip();
    // Get instance field reference: public System.Single minSecBetweenClips
    [[deprecated("Use field access instead!")]] float& dyn_minSecBetweenClips();
    // Get instance field reference: public SoundBankPlayer soundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_soundBankPlayer();
    // Get instance field reference: public UnityEngine.Transform gorillaPlayerXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_gorillaPlayerXform();
    // Get instance field reference: public System.String gorillaPlayerXform_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gorillaPlayerXform_path();
    // Get instance field reference: public UnityEngine.ParticleSystem particleFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleFX();
    // Get instance field reference: private UnityEngine.Vector3 oldPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_oldPos();
    // Get instance field reference: private System.Single timeSincePlay
    [[deprecated("Use field access instead!")]] float& dyn_timeSincePlay();
    // Get instance field reference: private System.Single distElapsed
    [[deprecated("Use field access instead!")]] float& dyn_distElapsed();
    // protected System.Void OnEnable()
    // Offset: 0x26A24A4
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x26A26D8
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26A2868
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HorseStickNoiseMaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HorseStickNoiseMaker*, creationType>()));
    }
  }; // HorseStickNoiseMaker
  #pragma pack(pop)
  static check_size<sizeof(HorseStickNoiseMaker), 88 + sizeof(float)> __GlobalNamespace_HorseStickNoiseMakerSizeCheck;
  static_assert(sizeof(HorseStickNoiseMaker) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HorseStickNoiseMaker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HorseStickNoiseMaker::*)()>(&GlobalNamespace::HorseStickNoiseMaker::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HorseStickNoiseMaker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HorseStickNoiseMaker::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HorseStickNoiseMaker::*)()>(&GlobalNamespace::HorseStickNoiseMaker::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HorseStickNoiseMaker*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HorseStickNoiseMaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
