// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: NetworkDebugStart/Stage
#include "GlobalNamespace/NetworkDebugStart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUISkin
  class GUISkin;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: NetworkDebugStart because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Enum because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkDebugStartGUI
  class NetworkDebugStartGUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkDebugStartGUI);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkDebugStartGUI*, "", "NetworkDebugStartGUI");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: NetworkDebugStartGUI
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class NetworkDebugStartGUI : public ::Fusion::Behaviour {
    public:
    public:
    // public System.Boolean EnableHotkeys
    // Size: 0x1
    // Offset: 0x20
    bool EnableHotkeys;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableHotkeys and: BaseSkin
    char __padding0[0x7] = {};
    // public UnityEngine.GUISkin BaseSkin
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GUISkin* BaseSkin;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUISkin*) == 0x8);
    // private NetworkDebugStart _networkDebugStart
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::NetworkDebugStart* networkDebugStart;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkDebugStart*) == 0x8);
    // private System.String _clientCount
    // Size: 0x8
    // Offset: 0x38
    ::StringW clientCount;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _isMultiplePeerMode
    // Size: 0x1
    // Offset: 0x40
    bool isMultiplePeerMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMultiplePeerMode and: nicifiedStageNames
    char __padding4[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<NetworkDebugStart/Stage,System.String> _nicifiedStageNames
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetworkDebugStart::Stage, ::StringW>* nicifiedStageNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetworkDebugStart::Stage, ::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean EnableHotkeys
    [[deprecated("Use field access instead!")]] bool& dyn_EnableHotkeys();
    // Get instance field reference: public UnityEngine.GUISkin BaseSkin
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUISkin*& dyn_BaseSkin();
    // Get instance field reference: private NetworkDebugStart _networkDebugStart
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkDebugStart*& dyn__networkDebugStart();
    // Get instance field reference: private System.String _clientCount
    [[deprecated("Use field access instead!")]] ::StringW& dyn__clientCount();
    // Get instance field reference: private System.Boolean _isMultiplePeerMode
    [[deprecated("Use field access instead!")]] bool& dyn__isMultiplePeerMode();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<NetworkDebugStart/Stage,System.String> _nicifiedStageNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetworkDebugStart::Stage, ::StringW>*& dyn__nicifiedStageNames();
    // protected System.Void OnValidate()
    // Offset: 0x295E548
    void OnValidate();
    // protected System.Void ValidateClientCount()
    // Offset: 0x295E54C
    void ValidateClientCount();
    // protected System.Int32 GetClientCount()
    // Offset: 0x295E610
    int GetClientCount();
    // protected System.Void Awake()
    // Offset: 0x295E6E8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x295E92C
    void Start();
    // protected NetworkDebugStart EnsureNetworkDebugStartExists()
    // Offset: 0x295E7AC
    ::GlobalNamespace::NetworkDebugStart* EnsureNetworkDebugStartExists();
    // private System.Void Update()
    // Offset: 0x295E95C
    void Update();
    // protected System.Void OnGUI()
    // Offset: 0x295EF0C
    void OnGUI();
    // private System.Void StartHostWithClients(NetworkDebugStart nds)
    // Offset: 0x295EAF4
    void StartHostWithClients(::GlobalNamespace::NetworkDebugStart* nds);
    // private System.Void StartServerWithClients(NetworkDebugStart nds)
    // Offset: 0x295EBE8
    void StartServerWithClients(::GlobalNamespace::NetworkDebugStart* nds);
    // private System.Void StartMultipleClients(NetworkDebugStart nds)
    // Offset: 0x295ECE4
    void StartMultipleClients(::GlobalNamespace::NetworkDebugStart* nds);
    // private System.Void StartMultipleAutoClients(NetworkDebugStart nds)
    // Offset: 0x295EDD8
    void StartMultipleAutoClients(::GlobalNamespace::NetworkDebugStart* nds);
    // private System.Void StartMultipleSharedClients(NetworkDebugStart nds)
    // Offset: 0x295EE18
    void StartMultipleSharedClients(::GlobalNamespace::NetworkDebugStart* nds);
    // static public System.Collections.Generic.Dictionary`2<T,System.String> ConvertEnumToNicifiedNameLookup(System.String prefix, System.Collections.Generic.Dictionary`2<T,System.String> nonalloc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::Dictionary_2<T, ::StringW>* ConvertEnumToNicifiedNameLookup(::StringW prefix, ::System::Collections::Generic::Dictionary_2<T, ::StringW>* nonalloc) {
      static_assert(std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkDebugStartGUI::ConvertEnumToNicifiedNameLookup");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetworkDebugStartGUI", "ConvertEnumToNicifiedNameLookup", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(nonalloc)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<T, ::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, prefix, nonalloc);
    }
    // public System.Void .ctor()
    // Offset: 0x295FC74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkDebugStartGUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkDebugStartGUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkDebugStartGUI*, creationType>()));
    }
  }; // NetworkDebugStartGUI
  #pragma pack(pop)
  static check_size<sizeof(NetworkDebugStartGUI), 72 + sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetworkDebugStart::Stage, ::StringW>*)> __GlobalNamespace_NetworkDebugStartGUISizeCheck;
  static_assert(sizeof(NetworkDebugStartGUI) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::ValidateClientCount
// Il2CppName: ValidateClientCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::ValidateClientCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "ValidateClientCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::GetClientCount
// Il2CppName: GetClientCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::GetClientCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "GetClientCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::EnsureNetworkDebugStartExists
// Il2CppName: EnsureNetworkDebugStartExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetworkDebugStart* (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::EnsureNetworkDebugStartExists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "EnsureNetworkDebugStartExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)()>(&GlobalNamespace::NetworkDebugStartGUI::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::StartHostWithClients
// Il2CppName: StartHostWithClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)(::GlobalNamespace::NetworkDebugStart*)>(&GlobalNamespace::NetworkDebugStartGUI::StartHostWithClients)> {
  static const MethodInfo* get() {
    static auto* nds = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "StartHostWithClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::StartServerWithClients
// Il2CppName: StartServerWithClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)(::GlobalNamespace::NetworkDebugStart*)>(&GlobalNamespace::NetworkDebugStartGUI::StartServerWithClients)> {
  static const MethodInfo* get() {
    static auto* nds = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "StartServerWithClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::StartMultipleClients
// Il2CppName: StartMultipleClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)(::GlobalNamespace::NetworkDebugStart*)>(&GlobalNamespace::NetworkDebugStartGUI::StartMultipleClients)> {
  static const MethodInfo* get() {
    static auto* nds = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "StartMultipleClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::StartMultipleAutoClients
// Il2CppName: StartMultipleAutoClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)(::GlobalNamespace::NetworkDebugStart*)>(&GlobalNamespace::NetworkDebugStartGUI::StartMultipleAutoClients)> {
  static const MethodInfo* get() {
    static auto* nds = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "StartMultipleAutoClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::StartMultipleSharedClients
// Il2CppName: StartMultipleSharedClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStartGUI::*)(::GlobalNamespace::NetworkDebugStart*)>(&GlobalNamespace::NetworkDebugStartGUI::StartMultipleSharedClients)> {
  static const MethodInfo* get() {
    static auto* nds = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStartGUI*), "StartMultipleSharedClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::ConvertEnumToNicifiedNameLookup
// Il2CppName: ConvertEnumToNicifiedNameLookup
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStartGUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
