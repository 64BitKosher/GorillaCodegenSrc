// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PushableSlider
  class PushableSlider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GrabbingColorPicker
  class GrabbingColorPicker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GrabbingColorPicker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GrabbingColorPicker*, "", "GrabbingColorPicker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: GrabbingColorPicker
  // [TokenAttribute] Offset: FFFFFFFF
  class GrabbingColorPicker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private PushableSlider R_PushSlider
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PushableSlider* R_PushSlider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PushableSlider*) == 0x8);
    // private PushableSlider G_PushSlider
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::PushableSlider* G_PushSlider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PushableSlider*) == 0x8);
    // private PushableSlider B_PushSlider
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::PushableSlider* B_PushSlider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PushableSlider*) == 0x8);
    // private UnityEngine.AudioSource R_SliderAudio
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* R_SliderAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource G_SliderAudio
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* G_SliderAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource B_SliderAudio
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioSource* B_SliderAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private TMPro.TextMeshProUGUI textR
    // Size: 0x8
    // Offset: 0x50
    ::TMPro::TextMeshProUGUI* textR;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI textG
    // Size: 0x8
    // Offset: 0x58
    ::TMPro::TextMeshProUGUI* textG;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI textB
    // Size: 0x8
    // Offset: 0x60
    ::TMPro::TextMeshProUGUI* textB;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private UnityEngine.GameObject ColorSwatch
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* ColorSwatch;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 Segment1
    // Size: 0x4
    // Offset: 0x70
    int Segment1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 Segment2
    // Size: 0x4
    // Offset: 0x74
    int Segment2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 Segment3
    // Size: 0x4
    // Offset: 0x78
    int Segment3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasUpdated
    // Size: 0x1
    // Offset: 0x7C
    bool hasUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private PushableSlider R_PushSlider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& dyn_R_PushSlider();
    // Get instance field reference: private PushableSlider G_PushSlider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& dyn_G_PushSlider();
    // Get instance field reference: private PushableSlider B_PushSlider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& dyn_B_PushSlider();
    // Get instance field reference: private UnityEngine.AudioSource R_SliderAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_R_SliderAudio();
    // Get instance field reference: private UnityEngine.AudioSource G_SliderAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_G_SliderAudio();
    // Get instance field reference: private UnityEngine.AudioSource B_SliderAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_B_SliderAudio();
    // Get instance field reference: private TMPro.TextMeshProUGUI textR
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_textR();
    // Get instance field reference: private TMPro.TextMeshProUGUI textG
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_textG();
    // Get instance field reference: private TMPro.TextMeshProUGUI textB
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_textB();
    // Get instance field reference: private UnityEngine.GameObject ColorSwatch
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ColorSwatch();
    // Get instance field reference: private System.Int32 Segment1
    [[deprecated("Use field access instead!")]] int& dyn_Segment1();
    // Get instance field reference: private System.Int32 Segment2
    [[deprecated("Use field access instead!")]] int& dyn_Segment2();
    // Get instance field reference: private System.Int32 Segment3
    [[deprecated("Use field access instead!")]] int& dyn_Segment3();
    // Get instance field reference: private System.Boolean hasUpdated
    [[deprecated("Use field access instead!")]] bool& dyn_hasUpdated();
    // private System.Void Start()
    // Offset: 0x26D3378
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x26D3A88
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x26D3C0C
    void Update();
    // private System.Void SetSliderColors(System.Single r, System.Single g, System.Single b)
    // Offset: 0x26D4488
    void SetSliderColors(float r, float g, float b);
    // private System.Void HandleLocalColorChanged(UnityEngine.Color newColor)
    // Offset: 0x26D47A4
    void HandleLocalColorChanged(::UnityEngine::Color newColor);
    // private System.Void UpdateDisplay()
    // Offset: 0x26D38D4
    void UpdateDisplay();
    // public System.Void .ctor()
    // Offset: 0x26D47A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrabbingColorPicker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrabbingColorPicker*, creationType>()));
    }
  }; // GrabbingColorPicker
  #pragma pack(pop)
  static check_size<sizeof(GrabbingColorPicker), 124 + sizeof(bool)> __GlobalNamespace_GrabbingColorPickerSizeCheck;
  static_assert(sizeof(GrabbingColorPicker) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)()>(&GlobalNamespace::GrabbingColorPicker::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)()>(&GlobalNamespace::GrabbingColorPicker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)()>(&GlobalNamespace::GrabbingColorPicker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::SetSliderColors
// Il2CppName: SetSliderColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)(float, float, float)>(&GlobalNamespace::GrabbingColorPicker::SetSliderColors)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "SetSliderColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, g, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::HandleLocalColorChanged
// Il2CppName: HandleLocalColorChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)(::UnityEngine::Color)>(&GlobalNamespace::GrabbingColorPicker::HandleLocalColorChanged)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "HandleLocalColorChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::UpdateDisplay
// Il2CppName: UpdateDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrabbingColorPicker::*)()>(&GlobalNamespace::GrabbingColorPicker::UpdateDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrabbingColorPicker*), "UpdateDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrabbingColorPicker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
