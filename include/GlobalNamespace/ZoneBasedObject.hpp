// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneBasedObject
  class ZoneBasedObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneBasedObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneBasedObject*, "", "ZoneBasedObject");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ZoneBasedObject
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneBasedObject : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GTZone[] zones
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::GTZone> zones;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GTZone>) == 0x8);
    public:
    // Get instance field reference: public GTZone[] zones
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTZone>& dyn_zones();
    // public System.Boolean IsLocalPlayerInZone()
    // Offset: 0x2745FF4
    bool IsLocalPlayerInZone();
    // static public ZoneBasedObject SelectRandomEligible(ZoneBasedObject[] objects, System.String overrideChoice)
    // Offset: 0x2746070
    static ::GlobalNamespace::ZoneBasedObject* SelectRandomEligible(::ArrayW<::GlobalNamespace::ZoneBasedObject*> objects, ::StringW overrideChoice);
    // public System.Void .ctor()
    // Offset: 0x2746E8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneBasedObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneBasedObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneBasedObject*, creationType>()));
    }
  }; // ZoneBasedObject
  #pragma pack(pop)
  static check_size<sizeof(ZoneBasedObject), 32 + sizeof(::ArrayW<::GlobalNamespace::GTZone>)> __GlobalNamespace_ZoneBasedObjectSizeCheck;
  static_assert(sizeof(ZoneBasedObject) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneBasedObject::IsLocalPlayerInZone
// Il2CppName: IsLocalPlayerInZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneBasedObject::*)()>(&GlobalNamespace::ZoneBasedObject::IsLocalPlayerInZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneBasedObject*), "IsLocalPlayerInZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneBasedObject::SelectRandomEligible
// Il2CppName: SelectRandomEligible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneBasedObject* (*)(::ArrayW<::GlobalNamespace::ZoneBasedObject*>, ::StringW)>(&GlobalNamespace::ZoneBasedObject::SelectRandomEligible)> {
  static const MethodInfo* get() {
    static auto* objects = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ZoneBasedObject"), 1)->byval_arg;
    static auto* overrideChoice = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneBasedObject*), "SelectRandomEligible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objects, overrideChoice});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneBasedObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
