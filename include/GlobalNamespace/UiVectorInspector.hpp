// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UiVectorInspector
  class UiVectorInspector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UiVectorInspector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UiVectorInspector*, "", "UiVectorInspector");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UiVectorInspector
  // [TokenAttribute] Offset: FFFFFFFF
  class UiVectorInspector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshProUGUI m_nameLabel
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* m_nameLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI m_valueLabel
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* m_valueLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshProUGUI m_nameLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_m_nameLabel();
    // Get instance field reference: private TMPro.TextMeshProUGUI m_valueLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_m_valueLabel();
    // public System.Void SetName(System.String name)
    // Offset: 0x294E7F0
    void SetName(::StringW name);
    // public System.Void SetValue(System.Boolean value)
    // Offset: 0x294E814
    void SetValue(bool value);
    // public System.Void .ctor()
    // Offset: 0x294E8C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UiVectorInspector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UiVectorInspector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UiVectorInspector*, creationType>()));
    }
  }; // UiVectorInspector
  #pragma pack(pop)
  static check_size<sizeof(UiVectorInspector), 40 + sizeof(::TMPro::TextMeshProUGUI*)> __GlobalNamespace_UiVectorInspectorSizeCheck;
  static_assert(sizeof(UiVectorInspector) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UiVectorInspector::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UiVectorInspector::*)(::StringW)>(&GlobalNamespace::UiVectorInspector::SetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UiVectorInspector*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UiVectorInspector::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UiVectorInspector::*)(bool)>(&GlobalNamespace::UiVectorInspector::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UiVectorInspector*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UiVectorInspector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
