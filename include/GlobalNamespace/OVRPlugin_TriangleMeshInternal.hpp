// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::TriangleMeshInternal, "", "OVRPlugin/TriangleMeshInternal");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/TriangleMeshInternal
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::TriangleMeshInternal/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 vertexCapacityInput
    // Size: 0x4
    // Offset: 0x0
    int vertexCapacityInput;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 vertexCountOutput
    // Size: 0x4
    // Offset: 0x4
    int vertexCountOutput;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.IntPtr vertices
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr vertices;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 indexCapacityInput
    // Size: 0x4
    // Offset: 0x10
    int indexCapacityInput;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 indexCountOutput
    // Size: 0x4
    // Offset: 0x14
    int indexCountOutput;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.IntPtr indices
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr indices;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: TriangleMeshInternal
    constexpr TriangleMeshInternal(int vertexCapacityInput_ = {}, int vertexCountOutput_ = {}, ::System::IntPtr vertices_ = {}, int indexCapacityInput_ = {}, int indexCountOutput_ = {}, ::System::IntPtr indices_ = {}) noexcept : vertexCapacityInput{vertexCapacityInput_}, vertexCountOutput{vertexCountOutput_}, vertices{vertices_}, indexCapacityInput{indexCapacityInput_}, indexCountOutput{indexCountOutput_}, indices{indices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 vertexCapacityInput
    [[deprecated("Use field access instead!")]] int& dyn_vertexCapacityInput();
    // Get instance field reference: public System.Int32 vertexCountOutput
    [[deprecated("Use field access instead!")]] int& dyn_vertexCountOutput();
    // Get instance field reference: public System.IntPtr vertices
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_vertices();
    // Get instance field reference: public System.Int32 indexCapacityInput
    [[deprecated("Use field access instead!")]] int& dyn_indexCapacityInput();
    // Get instance field reference: public System.Int32 indexCountOutput
    [[deprecated("Use field access instead!")]] int& dyn_indexCountOutput();
    // Get instance field reference: public System.IntPtr indices
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_indices();
  }; // OVRPlugin/TriangleMeshInternal
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::TriangleMeshInternal), 24 + sizeof(::System::IntPtr)> __GlobalNamespace_OVRPlugin_TriangleMeshInternalSizeCheck;
  static_assert(sizeof(OVRPlugin::TriangleMeshInternal) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
