// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: StaticHash
#include "GlobalNamespace/StaticHash.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StaticHash::DoubleInt64, "", "StaticHash/DoubleInt64");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: StaticHash/DoubleInt64
  // [TokenAttribute] Offset: FFFFFFFF
  struct StaticHash::DoubleInt64/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Double double
    // Size: 0x8
    // Offset: 0x0
    double _double;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int64 int64
    // Size: 0x8
    // Offset: 0x0
    int64_t int64;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: DoubleInt64
    constexpr DoubleInt64(double _double_ = {}, int64_t int64_ = {}) noexcept : _double{_double_}, int64{int64_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Double double
    [[deprecated("Use field access instead!")]] double& dyn_double();
    // Get instance field reference: public System.Int64 int64
    [[deprecated("Use field access instead!")]] int64_t& dyn_int64();
  }; // StaticHash/DoubleInt64
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
