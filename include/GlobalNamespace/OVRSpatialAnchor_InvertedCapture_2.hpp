// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRSpatialAnchor
#include "GlobalNamespace/OVRSpatialAnchor.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRTask`1
#include "GlobalNamespace/OVRTask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2, "", "OVRSpatialAnchor/InvertedCapture`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRSpatialAnchor/InvertedCapture`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename TResult, typename TCapture>
  struct OVRSpatialAnchor::InvertedCapture_2/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly TCapture _capture
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TCapture capture;
    // private readonly System.Action`2<TCapture,TResult> _callback
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_2<TCapture, TResult>* callback;
    // Field size check
    static_assert(sizeof(::System::Action_2<TCapture, TResult>*) == 0x8);
    public:
    // Creating value type constructor for type: InvertedCapture_2
    constexpr InvertedCapture_2(TCapture capture_ = {}, ::System::Action_2<TCapture, TResult>* callback_ = {}) noexcept : capture{capture_}, callback{callback_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Action`2<TResult,OVRSpatialAnchor/InvertedCapture`2<TResult,TCapture>> Delegate
    static ::System::Action_2<TResult, ::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>* _get_Delegate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::_get_Delegate");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_2<TResult, ::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>::get(), "Delegate")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Action`2<TResult,OVRSpatialAnchor/InvertedCapture`2<TResult,TCapture>> Delegate
    static void _set_Delegate(::System::Action_2<TResult, ::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::_set_Delegate");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>::get(), "Delegate", value)));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly TCapture _capture
    [[deprecated("Use field access instead!")]] TCapture& dyn__capture() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::dyn__capture");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capture"))->offset;
      return *reinterpret_cast<TCapture*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Action`2<TCapture,TResult> _callback
    [[deprecated("Use field access instead!")]] ::System::Action_2<TCapture, TResult>*& dyn__callback() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::dyn__callback");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
      return *reinterpret_cast<::System::Action_2<TCapture, TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Void .ctor(System.Action`2<TCapture,TResult> callback, TCapture capture)
    // Offset: 0xFFFFFFFFFFFFFFFF
    InvertedCapture_2(::System::Action_2<TCapture, TResult>* callback, TCapture capture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(capture)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, capture);
    }
    // static private System.Void Invoke(TResult result, OVRSpatialAnchor/InvertedCapture`2<TResult,TCapture> invertedCapture)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Invoke(TResult result, ::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture> invertedCapture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::Invoke");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>::get(), "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(invertedCapture)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, result, invertedCapture);
    }
    // static public System.Void ContinueTaskWith(OVRTask`1<TResult> task, System.Action`2<TCapture,TResult> onCompleted, TCapture state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void ContinueTaskWith(::GlobalNamespace::OVRTask_1<TResult> task, ::System::Action_2<TCapture, TResult>* onCompleted, TCapture state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::ContinueTaskWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>::get(), "ContinueTaskWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(onCompleted), ::il2cpp_utils::ExtractType(state)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task, onCompleted, state);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // OVRSpatialAnchor/InvertedCapture`2
  // Could not write size check! Type: OVRSpatialAnchor/InvertedCapture`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
