// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem/MainModule
#include "UnityEngine/ParticleSystem_MainModule.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VoiceLoudnessReactorParticleSystemTarget
  class VoiceLoudnessReactorParticleSystemTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*, "", "VoiceLoudnessReactorParticleSystemTarget");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VoiceLoudnessReactorParticleSystemTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceLoudnessReactorParticleSystemTarget : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.ParticleSystem particleSystem
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Boolean UseSmoothedLoudness
    // Size: 0x1
    // Offset: 0x18
    bool UseSmoothedLoudness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseSmoothedLoudness and: Scale
    char __padding1[0x3] = {};
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x1C
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialSpeed
    // Size: 0x4
    // Offset: 0x20
    float initialSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialRate
    // Size: 0x4
    // Offset: 0x24
    float initialRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialSize
    // Size: 0x4
    // Offset: 0x28
    float initialSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: initialSize and: speed
    char __padding5[0x4] = {};
    // public UnityEngine.AnimationCurve speed
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationCurve* speed;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rate
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* rate;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve size
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* size;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.ParticleSystem/MainModule Main
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::ParticleSystem::MainModule Main;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::MainModule) == 0x8);
    // public UnityEngine.ParticleSystem/EmissionModule Emission
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem::EmissionModule Emission;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleSystem();
    // Get instance field reference: public System.Boolean UseSmoothedLoudness
    [[deprecated("Use field access instead!")]] bool& dyn_UseSmoothedLoudness();
    // Get instance field reference: public System.Single Scale
    [[deprecated("Use field access instead!")]] float& dyn_Scale();
    // Get instance field reference: private System.Single initialSpeed
    [[deprecated("Use field access instead!")]] float& dyn_initialSpeed();
    // Get instance field reference: private System.Single initialRate
    [[deprecated("Use field access instead!")]] float& dyn_initialRate();
    // Get instance field reference: private System.Single initialSize
    [[deprecated("Use field access instead!")]] float& dyn_initialSize();
    // Get instance field reference: public UnityEngine.AnimationCurve speed
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_speed();
    // Get instance field reference: public UnityEngine.AnimationCurve rate
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rate();
    // Get instance field reference: public UnityEngine.AnimationCurve size
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_size();
    // Get instance field reference: public UnityEngine.ParticleSystem/MainModule Main
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& dyn_Main();
    // Get instance field reference: public UnityEngine.ParticleSystem/EmissionModule Emission
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn_Emission();
    // public System.Single get_InitialSpeed()
    // Offset: 0x27A6758
    float get_InitialSpeed();
    // public System.Void set_InitialSpeed(System.Single value)
    // Offset: 0x27A6760
    void set_InitialSpeed(float value);
    // public System.Single get_InitialRate()
    // Offset: 0x27A6768
    float get_InitialRate();
    // public System.Void set_InitialRate(System.Single value)
    // Offset: 0x27A6770
    void set_InitialRate(float value);
    // public System.Single get_InitialSize()
    // Offset: 0x27A6778
    float get_InitialSize();
    // public System.Void set_InitialSize(System.Single value)
    // Offset: 0x27A6780
    void set_InitialSize(float value);
    // public System.Void .ctor()
    // Offset: 0x27A6788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLoudnessReactorParticleSystemTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLoudnessReactorParticleSystemTarget*, creationType>()));
    }
  }; // VoiceLoudnessReactorParticleSystemTarget
  #pragma pack(pop)
  static check_size<sizeof(VoiceLoudnessReactorParticleSystemTarget), 80 + sizeof(::UnityEngine::ParticleSystem::EmissionModule)> __GlobalNamespace_VoiceLoudnessReactorParticleSystemTargetSizeCheck;
  static_assert(sizeof(VoiceLoudnessReactorParticleSystemTarget) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSpeed
// Il2CppName: get_InitialSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)()>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "get_InitialSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSpeed
// Il2CppName: set_InitialSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)(float)>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "set_InitialSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialRate
// Il2CppName: get_InitialRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)()>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "get_InitialRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialRate
// Il2CppName: set_InitialRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)(float)>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "set_InitialRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSize
// Il2CppName: get_InitialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)()>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "get_InitialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSize
// Il2CppName: set_InitialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::*)(float)>(&GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*), "set_InitialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
