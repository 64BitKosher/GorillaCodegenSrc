// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: RPCArgBuffer`1
#include "GlobalNamespace/RPCArgBuffer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: INetworkStruct
  class INetworkStruct;
  // Forward declaring type: SessionProperty
  class SessionProperty;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetCrossoverUtils
  class NetCrossoverUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetCrossoverUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetCrossoverUtils*, "", "NetCrossoverUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NetCrossoverUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class NetCrossoverUtils : public ::Il2CppObject {
    public:
    // static field const value: static private System.Int32 MaxParameterByteLength
    static constexpr const int MaxParameterByteLength = 2048;
    // Get static field: static private System.Int32 MaxParameterByteLength
    static int _get_MaxParameterByteLength();
    // Set static field: static private System.Int32 MaxParameterByteLength
    static void _set_MaxParameterByteLength(int value);
    // Get static field: static private System.Byte[] FixedBuffer
    static ::ArrayW<uint8_t> _get_FixedBuffer();
    // Set static field: static private System.Byte[] FixedBuffer
    static void _set_FixedBuffer(::ArrayW<uint8_t> value);
    // static public System.Void Prewarm()
    // Offset: 0x290EF18
    static void Prewarm();
    // static public System.Void WriteNetDataToBuffer(T data, Photon.Pun.PhotonStream stream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void WriteNetDataToBuffer(T data, ::Photon::Pun::PhotonStream* stream) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::INetworkStruct> && std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetCrossoverUtils::WriteNetDataToBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetCrossoverUtils", "WriteNetDataToBuffer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(stream)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, data, stream);
    }
    // static public T ReadNetDataFromBuffer(Photon.Pun.PhotonStream stream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T ReadNetDataFromBuffer(::Photon::Pun::PhotonStream* stream) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::INetworkStruct> && std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetCrossoverUtils::ReadNetDataFromBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetCrossoverUtils", "ReadNetDataFromBuffer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, stream);
    }
    // static public System.Void SerializeToRPCData(ref RPCArgBuffer`1<T> argBuffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void SerializeToRPCData(ByRef<::GlobalNamespace::RPCArgBuffer_1<T>> argBuffer) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetCrossoverUtils::SerializeToRPCData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetCrossoverUtils", "SerializeToRPCData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argBuffer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(argBuffer));
    }
    // static public System.Void PopulateWithRPCData(ref RPCArgBuffer`1<T> argBuffer, System.Byte[] data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void PopulateWithRPCData(ByRef<::GlobalNamespace::RPCArgBuffer_1<T>> argBuffer, ::ArrayW<uint8_t> data) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetCrossoverUtils::PopulateWithRPCData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NetCrossoverUtils", "PopulateWithRPCData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argBuffer), ::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(argBuffer), data);
    }
    // static public System.Collections.Generic.Dictionary`2<System.String,Fusion.SessionProperty> ToPropDict(ExitGames.Client.Photon.Hashtable hash)
    // Offset: 0x290CF44
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Fusion::SessionProperty*>* ToPropDict(::ExitGames::Client::Photon::Hashtable* hash);
  }; // NetCrossoverUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::Prewarm
// Il2CppName: Prewarm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::NetCrossoverUtils::Prewarm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetCrossoverUtils*), "Prewarm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::WriteNetDataToBuffer
// Il2CppName: WriteNetDataToBuffer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::ReadNetDataFromBuffer
// Il2CppName: ReadNetDataFromBuffer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::SerializeToRPCData
// Il2CppName: SerializeToRPCData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::PopulateWithRPCData
// Il2CppName: PopulateWithRPCData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetCrossoverUtils::ToPropDict
// Il2CppName: ToPropDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Fusion::SessionProperty*>* (*)(::ExitGames::Client::Photon::Hashtable*)>(&GlobalNamespace::NetCrossoverUtils::ToPropDict)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetCrossoverUtils*), "ToPropDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
