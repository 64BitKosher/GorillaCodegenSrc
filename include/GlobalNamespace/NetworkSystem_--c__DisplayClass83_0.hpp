// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NetworkSystem
#include "GlobalNamespace/NetworkSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetPlayer
  class NetPlayer;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0*, "", "NetworkSystem/<>c__DisplayClass83_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: NetworkSystem/<>c__DisplayClass83_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class NetworkSystem::$$c__DisplayClass83_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 playerActorNumber
    // Size: 0x4
    // Offset: 0x10
    int playerActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return playerActorNumber;
    }
    // Get instance field reference: public System.Int32 playerActorNumber
    [[deprecated("Use field access instead!")]] int& dyn_playerActorNumber();
    // public System.Void .ctor()
    // Offset: 0x2910F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkSystem::$$c__DisplayClass83_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkSystem::$$c__DisplayClass83_0*, creationType>()));
    }
    // System.Boolean <GetNetPlayerByID>b__0(NetPlayer a)
    // Offset: 0x291166C
    bool $GetNetPlayerByID$b__0(::GlobalNamespace::NetPlayer* a);
  }; // NetworkSystem/<>c__DisplayClass83_0
  #pragma pack(pop)
  static check_size<sizeof(NetworkSystem::$$c__DisplayClass83_0), 16 + sizeof(int)> __GlobalNamespace_NetworkSystem_$$c__DisplayClass83_0SizeCheck;
  static_assert(sizeof(NetworkSystem::$$c__DisplayClass83_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0::$GetNetPlayerByID$b__0
// Il2CppName: <GetNetPlayerByID>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0::*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0::$GetNetPlayerByID$b__0)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0*), "<GetNetPlayerByID>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
