// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SceneObject
  class SceneObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SceneObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SceneObject*, "", "SceneObject");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SceneObject
  // [TokenAttribute] Offset: FFFFFFFF
  class SceneObject : public ::Il2CppObject/*, public ::System::IEquatable_1<::GlobalNamespace::SceneObject*>*/ {
    public:
    public:
    // public System.Int32 classID
    // Size: 0x4
    // Offset: 0x10
    int classID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: classID and: fileID
    char __padding0[0x4] = {};
    // public System.UInt64 fileID
    // Size: 0x8
    // Offset: 0x18
    uint64_t fileID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.String typeString
    // Size: 0x8
    // Offset: 0x20
    ::StringW typeString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String json
    // Size: 0x8
    // Offset: 0x28
    ::StringW json;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::SceneObject*>
    operator ::System::IEquatable_1<::GlobalNamespace::SceneObject*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::SceneObject*>*>(this);
    }
    // Get instance field reference: public System.Int32 classID
    [[deprecated("Use field access instead!")]] int& dyn_classID();
    // Get instance field reference: public System.UInt64 fileID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_fileID();
    // Get instance field reference: public System.String typeString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_typeString();
    // Get instance field reference: public System.String json
    [[deprecated("Use field access instead!")]] ::StringW& dyn_json();
    // public System.Type GetObjectType()
    // Offset: 0x279E26C
    ::System::Type* GetObjectType();
    // public System.Void .ctor(System.Int32 classID, System.UInt64 fileID)
    // Offset: 0x279E378
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SceneObject* New_ctor(int classID, uint64_t fileID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SceneObject*, creationType>(classID, fileID)));
    }
    // public System.Boolean Equals(SceneObject other)
    // Offset: 0x279E440
    bool Equals(::GlobalNamespace::SceneObject* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x279E47C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x279E524
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // SceneObject
  #pragma pack(pop)
  static check_size<sizeof(SceneObject), 40 + sizeof(::StringW)> __GlobalNamespace_SceneObjectSizeCheck;
  static_assert(sizeof(SceneObject) == 0x30);
  // static public System.Boolean op_Equality(SceneObject x, SceneObject y)
  // Offset: 0x279E5B8
  bool operator ==(::GlobalNamespace::SceneObject* x, ::GlobalNamespace::SceneObject& y);
  // static public System.Boolean op_Inequality(SceneObject x, SceneObject y)
  // Offset: 0x279E5F8
  bool operator !=(::GlobalNamespace::SceneObject* x, ::GlobalNamespace::SceneObject& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::GetObjectType
// Il2CppName: GetObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (GlobalNamespace::SceneObject::*)()>(&GlobalNamespace::SceneObject::GetObjectType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneObject*), "GetObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SceneObject::*)(::GlobalNamespace::SceneObject*)>(&GlobalNamespace::SceneObject::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "SceneObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneObject*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SceneObject::*)(::Il2CppObject*)>(&GlobalNamespace::SceneObject::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneObject*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SceneObject::*)()>(&GlobalNamespace::SceneObject::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneObject*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::SceneObject::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
