// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaGameManager
#include "GlobalNamespace/GorillaGameManager.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: GorillaGameModes
namespace GorillaGameModes {
  // Forward declaring type: GameModeType
  struct GameModeType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTagManager
  class GorillaTagManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTagManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagManager*, "", "GorillaTagManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x148
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTagManager : public ::GlobalNamespace::GorillaGameManager {
    public:
    // Nested type: ::GlobalNamespace::GorillaTagManager::$InfectionEnd$d__24
    class $InfectionEnd$d__24;
    public:
    // public System.Single tagCoolDown
    // Size: 0x4
    // Offset: 0xD8
    float tagCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 infectedModeThreshold
    // Size: 0x4
    // Offset: 0xDC
    int infectedModeThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.List`1<Photon.Realtime.Player> currentInfected
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* currentInfected;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*) == 0x8);
    // public System.Int32[] currentInfectedArray
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<int> currentInfectedArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Photon.Realtime.Player currentIt
    // Size: 0x8
    // Offset: 0xF0
    ::Photon::Realtime::Player* currentIt;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Realtime.Player lastInfectedPlayer
    // Size: 0x8
    // Offset: 0xF8
    ::Photon::Realtime::Player* lastInfectedPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Double lastTag
    // Size: 0x8
    // Offset: 0x100
    double lastTag;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double timeInfectedGameEnded
    // Size: 0x8
    // Offset: 0x108
    double timeInfectedGameEnded;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Boolean waitingToStartNextInfectionGame
    // Size: 0x1
    // Offset: 0x110
    bool waitingToStartNextInfectionGame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isCurrentlyTag
    // Size: 0x1
    // Offset: 0x111
    bool isCurrentlyTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isCurrentlyTag and: tempItInt
    char __padding9[0x2] = {};
    // private System.Int32 tempItInt
    // Size: 0x4
    // Offset: 0x114
    int tempItInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 iterator1
    // Size: 0x4
    // Offset: 0x118
    int iterator1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: iterator1 and: tempPlayer
    char __padding11[0x4] = {};
    // private Photon.Realtime.Player tempPlayer
    // Size: 0x8
    // Offset: 0x120
    ::Photon::Realtime::Player* tempPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Boolean allInfected
    // Size: 0x1
    // Offset: 0x128
    bool allInfected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allInfected and: inspectorLocalPlayerSpeed
    char __padding13[0x7] = {};
    // public System.Single[] inspectorLocalPlayerSpeed
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<float> inspectorLocalPlayerSpeed;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private VRRig taggingRig
    // Size: 0x8
    // Offset: 0x138
    ::GlobalNamespace::VRRig* taggingRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private VRRig taggedRig
    // Size: 0x8
    // Offset: 0x140
    ::GlobalNamespace::VRRig* taggedRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    public:
    // static field const value: static public System.Byte ReportTagEvent
    static constexpr const uint8_t ReportTagEvent = 1u;
    // Get static field: static public System.Byte ReportTagEvent
    static uint8_t _get_ReportTagEvent();
    // Set static field: static public System.Byte ReportTagEvent
    static void _set_ReportTagEvent(uint8_t value);
    // static field const value: static public System.Byte ReportInfectionTagEvent
    static constexpr const uint8_t ReportInfectionTagEvent = 2u;
    // Get static field: static public System.Byte ReportInfectionTagEvent
    static uint8_t _get_ReportInfectionTagEvent();
    // Set static field: static public System.Byte ReportInfectionTagEvent
    static void _set_ReportInfectionTagEvent(uint8_t value);
    // Get instance field reference: public System.Single tagCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tagCoolDown();
    // Get instance field reference: public System.Int32 infectedModeThreshold
    [[deprecated("Use field access instead!")]] int& dyn_infectedModeThreshold();
    // Get instance field reference: public System.Collections.Generic.List`1<Photon.Realtime.Player> currentInfected
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*& dyn_currentInfected();
    // Get instance field reference: public System.Int32[] currentInfectedArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_currentInfectedArray();
    // Get instance field reference: public Photon.Realtime.Player currentIt
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentIt();
    // Get instance field reference: public Photon.Realtime.Player lastInfectedPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_lastInfectedPlayer();
    // Get instance field reference: public System.Double lastTag
    [[deprecated("Use field access instead!")]] double& dyn_lastTag();
    // Get instance field reference: public System.Double timeInfectedGameEnded
    [[deprecated("Use field access instead!")]] double& dyn_timeInfectedGameEnded();
    // Get instance field reference: public System.Boolean waitingToStartNextInfectionGame
    [[deprecated("Use field access instead!")]] bool& dyn_waitingToStartNextInfectionGame();
    // Get instance field reference: public System.Boolean isCurrentlyTag
    [[deprecated("Use field access instead!")]] bool& dyn_isCurrentlyTag();
    // Get instance field reference: private System.Int32 tempItInt
    [[deprecated("Use field access instead!")]] int& dyn_tempItInt();
    // Get instance field reference: private System.Int32 iterator1
    [[deprecated("Use field access instead!")]] int& dyn_iterator1();
    // Get instance field reference: private Photon.Realtime.Player tempPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempPlayer();
    // Get instance field reference: private System.Boolean allInfected
    [[deprecated("Use field access instead!")]] bool& dyn_allInfected();
    // Get instance field reference: public System.Single[] inspectorLocalPlayerSpeed
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_inspectorLocalPlayerSpeed();
    // Get instance field reference: private VRRig taggingRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_taggingRig();
    // Get instance field reference: private VRRig taggedRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_taggedRig();
    // public System.Void UpdateState()
    // Offset: 0x271E528
    void UpdateState();
    // public System.Collections.IEnumerator InfectionEnd()
    // Offset: 0x271EFD8
    ::System::Collections::IEnumerator* InfectionEnd();
    // public System.Void UpdateInfectionState()
    // Offset: 0x271EBEC
    void UpdateInfectionState();
    // public System.Void UpdateTagState(System.Boolean withTagFreeze)
    // Offset: 0x271F284
    void UpdateTagState(bool withTagFreeze);
    // private System.Void EndInfectionGame()
    // Offset: 0x271F06C
    void EndInfectionGame();
    // private System.Single InterpolatedInfectedJumpMultiplier(System.Int32 infectedCount)
    // Offset: 0x271F560
    float InterpolatedInfectedJumpMultiplier(int infectedCount);
    // private System.Single InterpolatedInfectedJumpSpeed(System.Int32 infectedCount)
    // Offset: 0x271F640
    float InterpolatedInfectedJumpSpeed(int infectedCount);
    // private System.Single InterpolatedNoobJumpMultiplier(System.Int32 infectedCount)
    // Offset: 0x271F720
    float InterpolatedNoobJumpMultiplier(int infectedCount);
    // private System.Single InterpolatedNoobJumpSpeed(System.Int32 infectedCount)
    // Offset: 0x271F810
    float InterpolatedNoobJumpSpeed(int infectedCount);
    // public System.Boolean IsInfected(Photon.Realtime.Player player)
    // Offset: 0x2720578
    bool IsInfected(::Photon::Realtime::Player* player);
    // private System.Void CopyInfectedListToArray()
    // Offset: 0x271EDE4
    void CopyInfectedListToArray();
    // private System.Void CopyInfectedArrayToList()
    // Offset: 0x2720964
    void CopyInfectedArrayToList();
    // public System.Void ChangeCurrentIt(Photon.Realtime.Player newCurrentIt, System.Boolean withTagFreeze)
    // Offset: 0x271E9EC
    void ChangeCurrentIt(::Photon::Realtime::Player* newCurrentIt, bool withTagFreeze);
    // public System.Void SetisCurrentlyTag(System.Boolean newTagSetting)
    // Offset: 0x271EA34
    void SetisCurrentlyTag(bool newTagSetting);
    // public System.Void AddInfectedPlayer(Photon.Realtime.Player infectedPlayer)
    // Offset: 0x271EAA4
    void AddInfectedPlayer(::Photon::Realtime::Player* infectedPlayer);
    // public System.Void AddInfectedPlayer(Photon.Realtime.Player infectedPlayer, System.Boolean withTagStop)
    // Offset: 0x2720354
    void AddInfectedPlayer(::Photon::Realtime::Player* infectedPlayer, bool withTagStop);
    // public System.Void ClearInfectionState()
    // Offset: 0x271E978
    void ClearInfectionState();
    // public System.Void CopyRoomDataToLocalData()
    // Offset: 0x2720C1C
    void CopyRoomDataToLocalData();
    // public override System.Void StartPlaying()
    // Offset: 0x271E350
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::StartPlaying()
    void StartPlaying();
    // public override System.Void StopPlaying()
    // Offset: 0x271E87C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::StopPlaying()
    void StopPlaying();
    // public override System.Void Reset()
    // Offset: 0x271E89C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::Reset()
    void Reset();
    // public override System.Void InfrequentUpdate()
    // Offset: 0x271EF48
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::InfrequentUpdate()
    void InfrequentUpdate();
    // public override System.Boolean LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x271F4AC
    // Implemented from: GorillaGameManager
    // Base method: System.Boolean GorillaGameManager::LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    bool LocalCanTag(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public override System.Void ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    // Offset: 0x271F8FC
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    void ReportTag(::Photon::Realtime::Player* taggedPlayer, ::Photon::Realtime::Player* taggingPlayer);
    // public override System.Void HitPlayer(Photon.Realtime.Player taggedPlayer)
    // Offset: 0x271FEFC
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::HitPlayer(Photon.Realtime.Player taggedPlayer)
    void HitPlayer(::Photon::Realtime::Player* taggedPlayer);
    // public override System.Boolean CanAffectPlayer(Photon.Realtime.Player player, System.Boolean thisFrame)
    // Offset: 0x27204B4
    // Implemented from: GorillaGameManager
    // Base method: System.Boolean GorillaGameManager::CanAffectPlayer(Photon.Realtime.Player player, System.Boolean thisFrame)
    bool CanAffectPlayer(::Photon::Realtime::Player* player, bool thisFrame);
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x2720628
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didTutorial)
    // Offset: 0x2720688
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didTutorial)
    void NewVRRig(::Photon::Realtime::Player* player, int vrrigPhotonViewID, bool didTutorial);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x272075C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x2720B88
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // public override System.Void OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2720C38
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    void OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public override System.Void OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2720F28
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    void OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public override GorillaGameModes.GameModeType GameType()
    // Offset: 0x2721350
    // Implemented from: GorillaGameManager
    // Base method: GorillaGameModes.GameModeType GorillaGameManager::GameType()
    ::GorillaGameModes::GameModeType GameType();
    // public override System.String GameModeName()
    // Offset: 0x2721358
    // Implemented from: GorillaGameManager
    // Base method: System.String GorillaGameManager::GameModeName()
    ::StringW GameModeName();
    // public override System.Int32 MyMatIndex(Photon.Realtime.Player forPlayer)
    // Offset: 0x2721398
    // Implemented from: GorillaGameManager
    // Base method: System.Int32 GorillaGameManager::MyMatIndex(Photon.Realtime.Player forPlayer)
    int MyMatIndex(::Photon::Realtime::Player* forPlayer);
    // public override System.Single[] LocalPlayerSpeed()
    // Offset: 0x272141C
    // Implemented from: GorillaGameManager
    // Base method: System.Single[] GorillaGameManager::LocalPlayerSpeed()
    ::ArrayW<float> LocalPlayerSpeed();
    // public System.Void .ctor()
    // Offset: 0x27215C8
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTagManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTagManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTagManager*, creationType>()));
    }
  }; // GorillaTagManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaTagManager), 320 + sizeof(::GlobalNamespace::VRRig*)> __GlobalNamespace_GorillaTagManagerSizeCheck;
  static_assert(sizeof(GorillaTagManager) == 0x148);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InfectionEnd
// Il2CppName: InfectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::InfectionEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InfectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateInfectionState
// Il2CppName: UpdateInfectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::UpdateInfectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateInfectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateTagState
// Il2CppName: UpdateTagState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(bool)>(&GlobalNamespace::GorillaTagManager::UpdateTagState)> {
  static const MethodInfo* get() {
    static auto* withTagFreeze = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateTagState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withTagFreeze});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::EndInfectionGame
// Il2CppName: EndInfectionGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::EndInfectionGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "EndInfectionGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpMultiplier
// Il2CppName: InterpolatedInfectedJumpMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpMultiplier)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedInfectedJumpMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpSpeed
// Il2CppName: InterpolatedInfectedJumpSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpSpeed)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedInfectedJumpSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpMultiplier
// Il2CppName: InterpolatedNoobJumpMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpMultiplier)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedNoobJumpMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpSpeed
// Il2CppName: InterpolatedNoobJumpSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpSpeed)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedNoobJumpSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::IsInfected
// Il2CppName: IsInfected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::IsInfected)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "IsInfected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyInfectedListToArray
// Il2CppName: CopyInfectedListToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyInfectedListToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyInfectedListToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyInfectedArrayToList
// Il2CppName: CopyInfectedArrayToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyInfectedArrayToList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyInfectedArrayToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ChangeCurrentIt
// Il2CppName: ChangeCurrentIt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaTagManager::ChangeCurrentIt)> {
  static const MethodInfo* get() {
    static auto* newCurrentIt = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* withTagFreeze = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ChangeCurrentIt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCurrentIt, withTagFreeze});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::SetisCurrentlyTag
// Il2CppName: SetisCurrentlyTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(bool)>(&GlobalNamespace::GorillaTagManager::SetisCurrentlyTag)> {
  static const MethodInfo* get() {
    static auto* newTagSetting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "SetisCurrentlyTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTagSetting});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::AddInfectedPlayer
// Il2CppName: AddInfectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::AddInfectedPlayer)> {
  static const MethodInfo* get() {
    static auto* infectedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "AddInfectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::AddInfectedPlayer
// Il2CppName: AddInfectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaTagManager::AddInfectedPlayer)> {
  static const MethodInfo* get() {
    static auto* infectedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* withTagStop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "AddInfectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedPlayer, withTagStop});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ClearInfectionState
// Il2CppName: ClearInfectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::ClearInfectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ClearInfectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyRoomDataToLocalData
// Il2CppName: CopyRoomDataToLocalData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyRoomDataToLocalData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyRoomDataToLocalData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::StartPlaying
// Il2CppName: StartPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::StartPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "StartPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::StopPlaying
// Il2CppName: StopPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::StopPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "StopPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::LocalCanTag
// Il2CppName: LocalCanTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::LocalCanTag)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "LocalCanTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ReportTag
// Il2CppName: ReportTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::ReportTag)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ReportTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, taggingPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::HitPlayer
// Il2CppName: HitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::HitPlayer)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "HitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CanAffectPlayer
// Il2CppName: CanAffectPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaTagManager::CanAffectPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* thisFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CanAffectPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, thisFrame});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::NewVRRig
// Il2CppName: NewVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, int, bool)>(&GlobalNamespace::GorillaTagManager::NewVRRig)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* vrrigPhotonViewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* didTutorial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "NewVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrigPhotonViewID, didTutorial});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnSerializeWrite
// Il2CppName: OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaTagManager::OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnSerializeRead
// Il2CppName: OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaTagManager::OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::GameType
// Il2CppName: GameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaGameModes::GameModeType (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::GameType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "GameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::GameModeName
// Il2CppName: GameModeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::GameModeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "GameModeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::MyMatIndex
// Il2CppName: MyMatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::MyMatIndex)> {
  static const MethodInfo* get() {
    static auto* forPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "MyMatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::LocalPlayerSpeed
// Il2CppName: LocalPlayerSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::LocalPlayerSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "LocalPlayerSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
