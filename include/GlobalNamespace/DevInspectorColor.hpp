// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevInspectorColor
  class DevInspectorColor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevInspectorColor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevInspectorColor*, "", "DevInspectorColor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: DevInspectorColor
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class DevInspectorColor : public ::System::Attribute {
    public:
    public:
    // private readonly System.String <Color>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Color;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Color;
    }
    // Get instance field reference: private readonly System.String <Color>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Color$k__BackingField();
    // public System.String get_Color()
    // Offset: 0x279AB90
    ::StringW get_Color();
    // public System.Void .ctor(System.String color)
    // Offset: 0x279AB98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevInspectorColor* New_ctor(::StringW color) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorColor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevInspectorColor*, creationType>(color)));
    }
  }; // DevInspectorColor
  #pragma pack(pop)
  static check_size<sizeof(DevInspectorColor), 16 + sizeof(::StringW)> __GlobalNamespace_DevInspectorColorSizeCheck;
  static_assert(sizeof(DevInspectorColor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevInspectorColor::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::DevInspectorColor::*)()>(&GlobalNamespace::DevInspectorColor::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevInspectorColor*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevInspectorColor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
