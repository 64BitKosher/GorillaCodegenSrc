// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: ChaseState because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine::AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshPath
  class NavMeshPath;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HalloweenGhostChaser
  class HalloweenGhostChaser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HalloweenGhostChaser);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HalloweenGhostChaser*, "", "HalloweenGhostChaser");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x208
  #pragma pack(push, 1)
  // Autogenerated type: HalloweenGhostChaser
  // [TokenAttribute] Offset: FFFFFFFF
  class HalloweenGhostChaser : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IOnPhotonViewOwnerChange*/ {
    public:
    // Nested type: ::GlobalNamespace::HalloweenGhostChaser::ChaseState
    struct ChaseState;
    // Nested type: ::GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0
    class $$c__DisplayClass73_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HalloweenGhostChaser/ChaseState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ChaseState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ChaseState
      constexpr ChaseState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HalloweenGhostChaser/ChaseState Dormant
      static constexpr const int Dormant = 1;
      // Get static field: static public HalloweenGhostChaser/ChaseState Dormant
      static ::GlobalNamespace::HalloweenGhostChaser::ChaseState _get_Dormant();
      // Set static field: static public HalloweenGhostChaser/ChaseState Dormant
      static void _set_Dormant(::GlobalNamespace::HalloweenGhostChaser::ChaseState value);
      // static field const value: static public HalloweenGhostChaser/ChaseState InitialRise
      static constexpr const int InitialRise = 2;
      // Get static field: static public HalloweenGhostChaser/ChaseState InitialRise
      static ::GlobalNamespace::HalloweenGhostChaser::ChaseState _get_InitialRise();
      // Set static field: static public HalloweenGhostChaser/ChaseState InitialRise
      static void _set_InitialRise(::GlobalNamespace::HalloweenGhostChaser::ChaseState value);
      // static field const value: static public HalloweenGhostChaser/ChaseState Gong
      static constexpr const int Gong = 4;
      // Get static field: static public HalloweenGhostChaser/ChaseState Gong
      static ::GlobalNamespace::HalloweenGhostChaser::ChaseState _get_Gong();
      // Set static field: static public HalloweenGhostChaser/ChaseState Gong
      static void _set_Gong(::GlobalNamespace::HalloweenGhostChaser::ChaseState value);
      // static field const value: static public HalloweenGhostChaser/ChaseState Chasing
      static constexpr const int Chasing = 8;
      // Get static field: static public HalloweenGhostChaser/ChaseState Chasing
      static ::GlobalNamespace::HalloweenGhostChaser::ChaseState _get_Chasing();
      // Set static field: static public HalloweenGhostChaser/ChaseState Chasing
      static void _set_Chasing(::GlobalNamespace::HalloweenGhostChaser::ChaseState value);
      // static field const value: static public HalloweenGhostChaser/ChaseState Grabbing
      static constexpr const int Grabbing = 16;
      // Get static field: static public HalloweenGhostChaser/ChaseState Grabbing
      static ::GlobalNamespace::HalloweenGhostChaser::ChaseState _get_Grabbing();
      // Set static field: static public HalloweenGhostChaser/ChaseState Grabbing
      static void _set_Grabbing(::GlobalNamespace::HalloweenGhostChaser::ChaseState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HalloweenGhostChaser/ChaseState
    #pragma pack(pop)
    static check_size<sizeof(HalloweenGhostChaser::ChaseState), 0 + sizeof(int)> __GlobalNamespace_HalloweenGhostChaser_ChaseStateSizeCheck;
    static_assert(sizeof(HalloweenGhostChaser::ChaseState) == 0x4);
    public:
    // public System.Single heightAboveNavmesh
    // Size: 0x4
    // Offset: 0x28
    float heightAboveNavmesh;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: heightAboveNavmesh and: followTarget
    char __padding0[0x4] = {};
    // public UnityEngine.Transform followTarget
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* followTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform childGhost
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* childGhost;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single velocityStep
    // Size: 0x4
    // Offset: 0x40
    float velocityStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentSpeed
    // Size: 0x4
    // Offset: 0x44
    float currentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocityIncreaseTime
    // Size: 0x4
    // Offset: 0x48
    float velocityIncreaseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single riseDistance
    // Size: 0x4
    // Offset: 0x4C
    float riseDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single summonDistance
    // Size: 0x4
    // Offset: 0x50
    float summonDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeEncircled
    // Size: 0x4
    // Offset: 0x54
    float timeEncircled;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastSummonCheck
    // Size: 0x4
    // Offset: 0x58
    float lastSummonCheck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeGongStarted
    // Size: 0x4
    // Offset: 0x5C
    float timeGongStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single summoningDuration
    // Size: 0x4
    // Offset: 0x60
    float summoningDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single summoningCheckCountdown
    // Size: 0x4
    // Offset: 0x64
    float summoningCheckCountdown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single gongDuration
    // Size: 0x4
    // Offset: 0x68
    float gongDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 summonCount
    // Size: 0x4
    // Offset: 0x6C
    int summonCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean wasSurroundedLastCheck
    // Size: 0x1
    // Offset: 0x70
    bool wasSurroundedLastCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasSurroundedLastCheck and: laugh
    char __padding15[0x7] = {};
    // public UnityEngine.AudioSource laugh
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AudioSource* laugh;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Collections.Generic.List`1<Photon.Realtime.Player> possibleTarget
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* possibleTarget;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*) == 0x8);
    // public UnityEngine.AudioClip defaultLaugh
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AudioClip* defaultLaugh;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip deepLaugh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::AudioClip* deepLaugh;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip gong
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::AudioClip* gong;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.Vector3 noisyOffset
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 noisyOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 leftArmGrabbingLocal
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 leftArmGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightArmGrabbingLocal
    // Size: 0xC
    // Offset: 0xB8
    ::UnityEngine::Vector3 rightArmGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 leftHandGrabbingLocal
    // Size: 0xC
    // Offset: 0xC4
    ::UnityEngine::Vector3 leftHandGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightHandGrabbingLocal
    // Size: 0xC
    // Offset: 0xD0
    ::UnityEngine::Vector3 rightHandGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 leftHandStartingLocal
    // Size: 0xC
    // Offset: 0xDC
    ::UnityEngine::Vector3 leftHandStartingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightHandStartingLocal
    // Size: 0xC
    // Offset: 0xE8
    ::UnityEngine::Vector3 rightHandStartingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 ghostOffsetGrabbingLocal
    // Size: 0xC
    // Offset: 0xF4
    ::UnityEngine::Vector3 ghostOffsetGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 ghostStartingEulerRotation
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 ghostStartingEulerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 ghostGrabbingEulerRotation
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 ghostGrabbingEulerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single maxTimeToNextHeadAngle
    // Size: 0x4
    // Offset: 0x118
    float maxTimeToNextHeadAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastHeadAngleTime
    // Size: 0x4
    // Offset: 0x11C
    float lastHeadAngleTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nextHeadAngleTime
    // Size: 0x4
    // Offset: 0x120
    float nextHeadAngleTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nextTimeToChasePlayer
    // Size: 0x4
    // Offset: 0x124
    float nextTimeToChasePlayer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxNextTimeToChasePlayer
    // Size: 0x4
    // Offset: 0x128
    float maxNextTimeToChasePlayer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeRiseStarted
    // Size: 0x4
    // Offset: 0x12C
    float timeRiseStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single totalTimeToRise
    // Size: 0x4
    // Offset: 0x130
    float totalTimeToRise;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single catchDistance
    // Size: 0x4
    // Offset: 0x134
    float catchDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabTime
    // Size: 0x4
    // Offset: 0x138
    float grabTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabDuration
    // Size: 0x4
    // Offset: 0x13C
    float grabDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabSpeed
    // Size: 0x4
    // Offset: 0x140
    float grabSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minGrabCooldown
    // Size: 0x4
    // Offset: 0x144
    float minGrabCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastSpeedIncreased
    // Size: 0x4
    // Offset: 0x148
    float lastSpeedIncreased;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastSpeedIncreased and: headEulerAngles
    char __padding43[0x4] = {};
    // public UnityEngine.Vector3[] headEulerAngles
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::Vector3> headEulerAngles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Transform skullTransform
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Transform* skullTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftArm
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::Transform* leftArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightArm
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Transform* rightArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHand
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Transform* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHand
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Transform* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform[] spawnTransforms
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::UnityEngine::Transform*> spawnTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Transform[] spawnTransformOffsets
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::UnityEngine::Transform*> spawnTransformOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public Photon.Realtime.Player targetPlayer
    // Size: 0x8
    // Offset: 0x190
    ::Photon::Realtime::Player* targetPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public UnityEngine.GameObject ghostBody
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::GameObject* ghostBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public HalloweenGhostChaser/ChaseState currentState
    // Size: 0x4
    // Offset: 0x1A0
    ::GlobalNamespace::HalloweenGhostChaser::ChaseState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HalloweenGhostChaser::ChaseState) == 0x4);
    // public HalloweenGhostChaser/ChaseState lastState
    // Size: 0x4
    // Offset: 0x1A4
    ::GlobalNamespace::HalloweenGhostChaser::ChaseState lastState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HalloweenGhostChaser::ChaseState) == 0x4);
    // public System.Int32 spawnIndex
    // Size: 0x4
    // Offset: 0x1A8
    int spawnIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: spawnIndex and: grabbedPlayer
    char __padding56[0x4] = {};
    // public Photon.Realtime.Player grabbedPlayer
    // Size: 0x8
    // Offset: 0x1B0
    ::Photon::Realtime::Player* grabbedPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public UnityEngine.Material ghostMaterial
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Material* ghostMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Color defaultColor
    // Size: 0x10
    // Offset: 0x1C0
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color summonedColor
    // Size: 0x10
    // Offset: 0x1D0
    ::UnityEngine::Color summonedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean isSummoned
    // Size: 0x1
    // Offset: 0x1E0
    bool isSummoned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean targetIsOnNavMesh
    // Size: 0x1
    // Offset: 0x1E1
    bool targetIsOnNavMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: targetIsOnNavMesh and: hapticStrength
    char __padding62[0x2] = {};
    // public System.Single hapticStrength
    // Size: 0x4
    // Offset: 0x1E4
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hapticDuration
    // Size: 0x4
    // Offset: 0x1E8
    float hapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: hapticDuration and: path
    char __padding64[0x4] = {};
    // private UnityEngine.AI.NavMeshPath path
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::AI::NavMeshPath* path;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshPath*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> points
    // Size: 0x8
    // Offset: 0x1F8
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Int32 currentTargetIdx
    // Size: 0x4
    // Offset: 0x200
    int currentTargetIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single nextPathTimestamp
    // Size: 0x4
    // Offset: 0x204
    float nextPathTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // static field const value: static private System.Single navMeshSampleRange
    static constexpr const float navMeshSampleRange = 5;
    // Get static field: static private System.Single navMeshSampleRange
    static float _get_navMeshSampleRange();
    // Set static field: static private System.Single navMeshSampleRange
    static void _set_navMeshSampleRange(float value);
    // Get instance field reference: public System.Single heightAboveNavmesh
    [[deprecated("Use field access instead!")]] float& dyn_heightAboveNavmesh();
    // Get instance field reference: public UnityEngine.Transform followTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_followTarget();
    // Get instance field reference: public UnityEngine.Transform childGhost
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_childGhost();
    // Get instance field reference: public System.Single velocityStep
    [[deprecated("Use field access instead!")]] float& dyn_velocityStep();
    // Get instance field reference: public System.Single currentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_currentSpeed();
    // Get instance field reference: public System.Single velocityIncreaseTime
    [[deprecated("Use field access instead!")]] float& dyn_velocityIncreaseTime();
    // Get instance field reference: public System.Single riseDistance
    [[deprecated("Use field access instead!")]] float& dyn_riseDistance();
    // Get instance field reference: public System.Single summonDistance
    [[deprecated("Use field access instead!")]] float& dyn_summonDistance();
    // Get instance field reference: public System.Single timeEncircled
    [[deprecated("Use field access instead!")]] float& dyn_timeEncircled();
    // Get instance field reference: public System.Single lastSummonCheck
    [[deprecated("Use field access instead!")]] float& dyn_lastSummonCheck();
    // Get instance field reference: public System.Single timeGongStarted
    [[deprecated("Use field access instead!")]] float& dyn_timeGongStarted();
    // Get instance field reference: public System.Single summoningDuration
    [[deprecated("Use field access instead!")]] float& dyn_summoningDuration();
    // Get instance field reference: public System.Single summoningCheckCountdown
    [[deprecated("Use field access instead!")]] float& dyn_summoningCheckCountdown();
    // Get instance field reference: public System.Single gongDuration
    [[deprecated("Use field access instead!")]] float& dyn_gongDuration();
    // Get instance field reference: public System.Int32 summonCount
    [[deprecated("Use field access instead!")]] int& dyn_summonCount();
    // Get instance field reference: public System.Boolean wasSurroundedLastCheck
    [[deprecated("Use field access instead!")]] bool& dyn_wasSurroundedLastCheck();
    // Get instance field reference: public UnityEngine.AudioSource laugh
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_laugh();
    // Get instance field reference: public System.Collections.Generic.List`1<Photon.Realtime.Player> possibleTarget
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*& dyn_possibleTarget();
    // Get instance field reference: public UnityEngine.AudioClip defaultLaugh
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_defaultLaugh();
    // Get instance field reference: public UnityEngine.AudioClip deepLaugh
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_deepLaugh();
    // Get instance field reference: public UnityEngine.AudioClip gong
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_gong();
    // Get instance field reference: public UnityEngine.Vector3 noisyOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_noisyOffset();
    // Get instance field reference: public UnityEngine.Vector3 leftArmGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftArmGrabbingLocal();
    // Get instance field reference: public UnityEngine.Vector3 rightArmGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightArmGrabbingLocal();
    // Get instance field reference: public UnityEngine.Vector3 leftHandGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandGrabbingLocal();
    // Get instance field reference: public UnityEngine.Vector3 rightHandGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandGrabbingLocal();
    // Get instance field reference: public UnityEngine.Vector3 leftHandStartingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandStartingLocal();
    // Get instance field reference: public UnityEngine.Vector3 rightHandStartingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandStartingLocal();
    // Get instance field reference: public UnityEngine.Vector3 ghostOffsetGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ghostOffsetGrabbingLocal();
    // Get instance field reference: public UnityEngine.Vector3 ghostStartingEulerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ghostStartingEulerRotation();
    // Get instance field reference: public UnityEngine.Vector3 ghostGrabbingEulerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ghostGrabbingEulerRotation();
    // Get instance field reference: public System.Single maxTimeToNextHeadAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxTimeToNextHeadAngle();
    // Get instance field reference: public System.Single lastHeadAngleTime
    [[deprecated("Use field access instead!")]] float& dyn_lastHeadAngleTime();
    // Get instance field reference: public System.Single nextHeadAngleTime
    [[deprecated("Use field access instead!")]] float& dyn_nextHeadAngleTime();
    // Get instance field reference: public System.Single nextTimeToChasePlayer
    [[deprecated("Use field access instead!")]] float& dyn_nextTimeToChasePlayer();
    // Get instance field reference: public System.Single maxNextTimeToChasePlayer
    [[deprecated("Use field access instead!")]] float& dyn_maxNextTimeToChasePlayer();
    // Get instance field reference: public System.Single timeRiseStarted
    [[deprecated("Use field access instead!")]] float& dyn_timeRiseStarted();
    // Get instance field reference: public System.Single totalTimeToRise
    [[deprecated("Use field access instead!")]] float& dyn_totalTimeToRise();
    // Get instance field reference: public System.Single catchDistance
    [[deprecated("Use field access instead!")]] float& dyn_catchDistance();
    // Get instance field reference: public System.Single grabTime
    [[deprecated("Use field access instead!")]] float& dyn_grabTime();
    // Get instance field reference: public System.Single grabDuration
    [[deprecated("Use field access instead!")]] float& dyn_grabDuration();
    // Get instance field reference: public System.Single grabSpeed
    [[deprecated("Use field access instead!")]] float& dyn_grabSpeed();
    // Get instance field reference: public System.Single minGrabCooldown
    [[deprecated("Use field access instead!")]] float& dyn_minGrabCooldown();
    // Get instance field reference: public System.Single lastSpeedIncreased
    [[deprecated("Use field access instead!")]] float& dyn_lastSpeedIncreased();
    // Get instance field reference: public UnityEngine.Vector3[] headEulerAngles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_headEulerAngles();
    // Get instance field reference: public UnityEngine.Transform skullTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_skullTransform();
    // Get instance field reference: public UnityEngine.Transform leftArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftArm();
    // Get instance field reference: public UnityEngine.Transform rightArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightArm();
    // Get instance field reference: public UnityEngine.Transform leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHand();
    // Get instance field reference: public UnityEngine.Transform rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHand();
    // Get instance field reference: public UnityEngine.Transform[] spawnTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_spawnTransforms();
    // Get instance field reference: public UnityEngine.Transform[] spawnTransformOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_spawnTransformOffsets();
    // Get instance field reference: public Photon.Realtime.Player targetPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_targetPlayer();
    // Get instance field reference: public UnityEngine.GameObject ghostBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ghostBody();
    // Get instance field reference: public HalloweenGhostChaser/ChaseState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HalloweenGhostChaser::ChaseState& dyn_currentState();
    // Get instance field reference: public HalloweenGhostChaser/ChaseState lastState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HalloweenGhostChaser::ChaseState& dyn_lastState();
    // Get instance field reference: public System.Int32 spawnIndex
    [[deprecated("Use field access instead!")]] int& dyn_spawnIndex();
    // Get instance field reference: public Photon.Realtime.Player grabbedPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_grabbedPlayer();
    // Get instance field reference: public UnityEngine.Material ghostMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_ghostMaterial();
    // Get instance field reference: public UnityEngine.Color defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_defaultColor();
    // Get instance field reference: public UnityEngine.Color summonedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_summonedColor();
    // Get instance field reference: public System.Boolean isSummoned
    [[deprecated("Use field access instead!")]] bool& dyn_isSummoned();
    // Get instance field reference: private System.Boolean targetIsOnNavMesh
    [[deprecated("Use field access instead!")]] bool& dyn_targetIsOnNavMesh();
    // Get instance field reference: public System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: public System.Single hapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_hapticDuration();
    // Get instance field reference: private UnityEngine.AI.NavMeshPath path
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshPath*& dyn_path();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> points
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_points();
    // Get instance field reference: public System.Int32 currentTargetIdx
    [[deprecated("Use field access instead!")]] int& dyn_currentTargetIdx();
    // Get instance field reference: private System.Single nextPathTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_nextPathTimestamp();
    // private System.Void Awake()
    // Offset: 0x2722AEC
    void Awake();
    // private System.Void InitializeGhost()
    // Offset: 0x2722B90
    void InitializeGhost();
    // private System.Void LateUpdate()
    // Offset: 0x2722D10
    void LateUpdate();
    // public System.Void UpdateState()
    // Offset: 0x27232C0
    void UpdateState();
    // private System.Void OnChangeState(HalloweenGhostChaser/ChaseState newState)
    // Offset: 0x272379C
    void OnChangeState(::GlobalNamespace::HalloweenGhostChaser::ChaseState newState);
    // private System.Void SetInitialSpawnPoint()
    // Offset: 0x2724708
    void SetInitialSpawnPoint();
    // private System.Void ChooseRandomTarget()
    // Offset: 0x27234B0
    void ChooseRandomTarget();
    // private System.Void SetInitialRotations()
    // Offset: 0x27245B4
    void SetInitialRotations();
    // private System.Void MoveHead()
    // Offset: 0x2723DE8
    void MoveHead();
    // private System.Void RiseHost()
    // Offset: 0x2723C4C
    void RiseHost();
    // private System.Void RiseGrabbedLocalPlayer()
    // Offset: 0x2724294
    void RiseGrabbedLocalPlayer();
    // public System.Void UpdateFollowPath(UnityEngine.Vector3 destination, System.Single currentSpeed)
    // Offset: 0x27248A4
    void UpdateFollowPath(::UnityEngine::Vector3 destination, float currentSpeed);
    // private System.Void GetNewPath(UnityEngine.Vector3 destination)
    // Offset: 0x2724C58
    void GetNewPath(::UnityEngine::Vector3 destination);
    // public System.Void ResetPath()
    // Offset: 0x2724888
    void ResetPath();
    // private System.Void ChaseHost()
    // Offset: 0x2723EA4
    void ChaseHost();
    // private System.Void MoveBodyShared()
    // Offset: 0x27241BC
    void MoveBodyShared();
    // private System.Void GrabBodyShared()
    // Offset: 0x27244D8
    void GrabBodyShared();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2724FA8
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x27252C8
    void Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // public System.Void .ctor()
    // Offset: 0x27253F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HalloweenGhostChaser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HalloweenGhostChaser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HalloweenGhostChaser*, creationType>()));
    }
    // public override System.Void OnJoinedRoom()
    // Offset: 0x272534C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
  }; // HalloweenGhostChaser
  #pragma pack(pop)
  static check_size<sizeof(HalloweenGhostChaser), 516 + sizeof(float)> __GlobalNamespace_HalloweenGhostChaserSizeCheck;
  static_assert(sizeof(HalloweenGhostChaser) == 0x208);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HalloweenGhostChaser::ChaseState, "", "HalloweenGhostChaser/ChaseState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::InitializeGhost
// Il2CppName: InitializeGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::InitializeGhost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "InitializeGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::OnChangeState
// Il2CppName: OnChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)(::GlobalNamespace::HalloweenGhostChaser::ChaseState)>(&GlobalNamespace::HalloweenGhostChaser::OnChangeState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "HalloweenGhostChaser/ChaseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "OnChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::SetInitialSpawnPoint
// Il2CppName: SetInitialSpawnPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::SetInitialSpawnPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "SetInitialSpawnPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::ChooseRandomTarget
// Il2CppName: ChooseRandomTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::ChooseRandomTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "ChooseRandomTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::SetInitialRotations
// Il2CppName: SetInitialRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::SetInitialRotations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "SetInitialRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::MoveHead
// Il2CppName: MoveHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::MoveHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "MoveHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::RiseHost
// Il2CppName: RiseHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::RiseHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "RiseHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::RiseGrabbedLocalPlayer
// Il2CppName: RiseGrabbedLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::RiseGrabbedLocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "RiseGrabbedLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::UpdateFollowPath
// Il2CppName: UpdateFollowPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::HalloweenGhostChaser::UpdateFollowPath)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* currentSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "UpdateFollowPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, currentSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::GetNewPath
// Il2CppName: GetNewPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)(::UnityEngine::Vector3)>(&GlobalNamespace::HalloweenGhostChaser::GetNewPath)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "GetNewPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::ResetPath
// Il2CppName: ResetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::ResetPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "ResetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::ChaseHost
// Il2CppName: ChaseHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::ChaseHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "ChaseHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::MoveBodyShared
// Il2CppName: MoveBodyShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::MoveBodyShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "MoveBodyShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::GrabBodyShared
// Il2CppName: GrabBodyShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::GrabBodyShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "GrabBodyShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::HalloweenGhostChaser::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange
// Il2CppName: Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::HalloweenGhostChaser::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenGhostChaser::*)()>(&GlobalNamespace::HalloweenGhostChaser::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
