// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRMeshJobs
#include "GlobalNamespace/OVRMeshJobs.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobParallelFor
#include "Unity/Jobs/IJobParallelFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: OVRPlugin/Vector3f
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Vector2f
#include "GlobalNamespace/OVRPlugin_Vector2f.hpp"
// Including type: OVRPlugin/Vector4f
#include "GlobalNamespace/OVRPlugin_Vector4f.hpp"
// Including type: OVRPlugin/Vector4s
#include "GlobalNamespace/OVRPlugin_Vector4s.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRMeshJobs::TransformToUnitySpaceJob, "", "OVRMeshJobs/TransformToUnitySpaceJob");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRMeshJobs/TransformToUnitySpaceJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRMeshJobs::TransformToUnitySpaceJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobParallelFor*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Vertices
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Vertices;
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Normals
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Normals;
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector2> UV
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> UV;
    // public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight> BoneWeights
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight> BoneWeights;
    // public Unity.Collections.NativeArray`1<OVRPlugin/Vector3f> MeshVerticesPosition
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f> MeshVerticesPosition;
    // public Unity.Collections.NativeArray`1<OVRPlugin/Vector3f> MeshNormals
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f> MeshNormals;
    // public Unity.Collections.NativeArray`1<OVRPlugin/Vector2f> MeshUV
    // Size: 0xFFFFFFFF
    // Offset: 0x60
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector2f> MeshUV;
    // public Unity.Collections.NativeArray`1<OVRPlugin/Vector4f> MeshBoneWeights
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4f> MeshBoneWeights;
    // public Unity.Collections.NativeArray`1<OVRPlugin/Vector4s> MeshBoneIndices
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4s> MeshBoneIndices;
    public:
    // Creating value type constructor for type: TransformToUnitySpaceJob
    constexpr TransformToUnitySpaceJob(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Vertices_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Normals_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> UV_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight> BoneWeights_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f> MeshVerticesPosition_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f> MeshNormals_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector2f> MeshUV_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4f> MeshBoneWeights_ = {}, ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4s> MeshBoneIndices_ = {}) noexcept : Vertices{Vertices_}, Normals{Normals_}, UV{UV_}, BoneWeights{BoneWeights_}, MeshVerticesPosition{MeshVerticesPosition_}, MeshNormals{MeshNormals_}, MeshUV{MeshUV_}, MeshBoneWeights{MeshBoneWeights_}, MeshBoneIndices{MeshBoneIndices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobParallelFor
    operator ::Unity::Jobs::IJobParallelFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobParallelFor*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Vertices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_Vertices();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Normals
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_Normals();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector2> UV
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2>& dyn_UV();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight> BoneWeights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight>& dyn_BoneWeights();
    // Get instance field reference: public Unity.Collections.NativeArray`1<OVRPlugin/Vector3f> MeshVerticesPosition
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f>& dyn_MeshVerticesPosition();
    // Get instance field reference: public Unity.Collections.NativeArray`1<OVRPlugin/Vector3f> MeshNormals
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector3f>& dyn_MeshNormals();
    // Get instance field reference: public Unity.Collections.NativeArray`1<OVRPlugin/Vector2f> MeshUV
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector2f>& dyn_MeshUV();
    // Get instance field reference: public Unity.Collections.NativeArray`1<OVRPlugin/Vector4f> MeshBoneWeights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4f>& dyn_MeshBoneWeights();
    // Get instance field reference: public Unity.Collections.NativeArray`1<OVRPlugin/Vector4s> MeshBoneIndices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::Vector4s>& dyn_MeshBoneIndices();
    // public System.Void Execute(System.Int32 index)
    // Offset: 0x494DB04
    void Execute(int index);
  }; // OVRMeshJobs/TransformToUnitySpaceJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRMeshJobs::TransformToUnitySpaceJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMeshJobs::TransformToUnitySpaceJob::*)(int)>(&GlobalNamespace::OVRMeshJobs::TransformToUnitySpaceJob::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMeshJobs::TransformToUnitySpaceJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
