// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SimpleResizable
  class SimpleResizable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SimpleResizable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SimpleResizable*, "", "SimpleResizable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: SimpleResizable
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class SimpleResizable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SimpleResizable::Method
    struct Method;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SimpleResizable/Method
    // [TokenAttribute] Offset: FFFFFFFF
    struct Method/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Method
      constexpr Method(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SimpleResizable/Method Adapt
      static constexpr const int Adapt = 0;
      // Get static field: static public SimpleResizable/Method Adapt
      static ::GlobalNamespace::SimpleResizable::Method _get_Adapt();
      // Set static field: static public SimpleResizable/Method Adapt
      static void _set_Adapt(::GlobalNamespace::SimpleResizable::Method value);
      // static field const value: static public SimpleResizable/Method AdaptWithAsymmetricalPadding
      static constexpr const int AdaptWithAsymmetricalPadding = 1;
      // Get static field: static public SimpleResizable/Method AdaptWithAsymmetricalPadding
      static ::GlobalNamespace::SimpleResizable::Method _get_AdaptWithAsymmetricalPadding();
      // Set static field: static public SimpleResizable/Method AdaptWithAsymmetricalPadding
      static void _set_AdaptWithAsymmetricalPadding(::GlobalNamespace::SimpleResizable::Method value);
      // static field const value: static public SimpleResizable/Method Scale
      static constexpr const int Scale = 2;
      // Get static field: static public SimpleResizable/Method Scale
      static ::GlobalNamespace::SimpleResizable::Method _get_Scale();
      // Set static field: static public SimpleResizable/Method Scale
      static void _set_Scale(::GlobalNamespace::SimpleResizable::Method value);
      // static field const value: static public SimpleResizable/Method None
      static constexpr const int None = 3;
      // Get static field: static public SimpleResizable/Method None
      static ::GlobalNamespace::SimpleResizable::Method _get_None();
      // Set static field: static public SimpleResizable/Method None
      static void _set_None(::GlobalNamespace::SimpleResizable::Method value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SimpleResizable/Method
    #pragma pack(pop)
    static check_size<sizeof(SimpleResizable::Method), 0 + sizeof(int)> __GlobalNamespace_SimpleResizable_MethodSizeCheck;
    static_assert(sizeof(SimpleResizable::Method) == 0x4);
    public:
    // public SimpleResizable/Method ScalingX
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::SimpleResizable::Method ScalingX;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SimpleResizable::Method) == 0x4);
    // public System.Single PaddingX
    // Size: 0x4
    // Offset: 0x24
    float PaddingX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PaddingXMax
    // Size: 0x4
    // Offset: 0x28
    float PaddingXMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SimpleResizable/Method ScalingY
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::SimpleResizable::Method ScalingY;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SimpleResizable::Method) == 0x4);
    // public System.Single PaddingY
    // Size: 0x4
    // Offset: 0x30
    float PaddingY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PaddingYMax
    // Size: 0x4
    // Offset: 0x34
    float PaddingYMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SimpleResizable/Method ScalingZ
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::SimpleResizable::Method ScalingZ;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SimpleResizable::Method) == 0x4);
    // public System.Single PaddingZ
    // Size: 0x4
    // Offset: 0x3C
    float PaddingZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PaddingZMax
    // Size: 0x4
    // Offset: 0x40
    float PaddingZMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <DefaultSize>k__BackingField
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 DefaultSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Mesh <OriginalMesh>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Mesh* OriginalMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Vector3 _oldSize
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 oldSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: oldSize and: meshFilter
    char __padding11[0x4] = {};
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Vector3 _newSize
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 newSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _updateInPlayMode
    // Size: 0x1
    // Offset: 0x7C
    bool updateInPlayMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateInPlayMode and: pivotTransform
    char __padding14[0x3] = {};
    // private UnityEngine.Transform _pivotTransform
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* pivotTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public SimpleResizable/Method ScalingX
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SimpleResizable::Method& dyn_ScalingX();
    // Get instance field reference: public System.Single PaddingX
    [[deprecated("Use field access instead!")]] float& dyn_PaddingX();
    // Get instance field reference: public System.Single PaddingXMax
    [[deprecated("Use field access instead!")]] float& dyn_PaddingXMax();
    // Get instance field reference: public SimpleResizable/Method ScalingY
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SimpleResizable::Method& dyn_ScalingY();
    // Get instance field reference: public System.Single PaddingY
    [[deprecated("Use field access instead!")]] float& dyn_PaddingY();
    // Get instance field reference: public System.Single PaddingYMax
    [[deprecated("Use field access instead!")]] float& dyn_PaddingYMax();
    // Get instance field reference: public SimpleResizable/Method ScalingZ
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SimpleResizable::Method& dyn_ScalingZ();
    // Get instance field reference: public System.Single PaddingZ
    [[deprecated("Use field access instead!")]] float& dyn_PaddingZ();
    // Get instance field reference: public System.Single PaddingZMax
    [[deprecated("Use field access instead!")]] float& dyn_PaddingZMax();
    // Get instance field reference: private UnityEngine.Vector3 <DefaultSize>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$DefaultSize$k__BackingField();
    // Get instance field reference: private UnityEngine.Mesh <OriginalMesh>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_$OriginalMesh$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _oldSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__oldSize();
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private UnityEngine.Vector3 _newSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__newSize();
    // Get instance field reference: private System.Boolean _updateInPlayMode
    [[deprecated("Use field access instead!")]] bool& dyn__updateInPlayMode();
    // Get instance field reference: private UnityEngine.Transform _pivotTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pivotTransform();
    // public UnityEngine.Vector3 get_PivotPosition()
    // Offset: 0x2948328
    ::UnityEngine::Vector3 get_PivotPosition();
    // public UnityEngine.Vector3 get_DefaultSize()
    // Offset: 0x2948344
    ::UnityEngine::Vector3 get_DefaultSize();
    // private System.Void set_DefaultSize(UnityEngine.Vector3 value)
    // Offset: 0x2948350
    void set_DefaultSize(::UnityEngine::Vector3 value);
    // public UnityEngine.Mesh get_OriginalMesh()
    // Offset: 0x294835C
    ::UnityEngine::Mesh* get_OriginalMesh();
    // private System.Void set_OriginalMesh(UnityEngine.Mesh value)
    // Offset: 0x2948364
    void set_OriginalMesh(::UnityEngine::Mesh* value);
    // public System.Void SetNewSize(UnityEngine.Vector3 newSize)
    // Offset: 0x294836C
    void SetNewSize(::UnityEngine::Vector3 newSize);
    // private System.Void Awake()
    // Offset: 0x2948378
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x29484D4
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x29485A8
    void Update();
    // private System.Void OnDrawGizmos()
    // Offset: 0x2948930
    void OnDrawGizmos();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x2948CB8
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x2949068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleResizable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleResizable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleResizable*, creationType>()));
    }
  }; // SimpleResizable
  #pragma pack(pop)
  static check_size<sizeof(SimpleResizable), 128 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_SimpleResizableSizeCheck;
  static_assert(sizeof(SimpleResizable) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SimpleResizable::Method, "", "SimpleResizable/Method");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::get_PivotPosition
// Il2CppName: get_PivotPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::get_PivotPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "get_PivotPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::get_DefaultSize
// Il2CppName: get_DefaultSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::get_DefaultSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "get_DefaultSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::set_DefaultSize
// Il2CppName: set_DefaultSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SimpleResizable::set_DefaultSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "set_DefaultSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::get_OriginalMesh
// Il2CppName: get_OriginalMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::get_OriginalMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "get_OriginalMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::set_OriginalMesh
// Il2CppName: set_OriginalMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)(::UnityEngine::Mesh*)>(&GlobalNamespace::SimpleResizable::set_OriginalMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "set_OriginalMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::SetNewSize
// Il2CppName: SetNewSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SimpleResizable::SetNewSize)> {
  static const MethodInfo* get() {
    static auto* newSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "SetNewSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizable::*)()>(&GlobalNamespace::SimpleResizable::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizable*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
