// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SoundIdRemapping
  class SoundIdRemapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SoundIdRemapping);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SoundIdRemapping*, "", "SoundIdRemapping");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: SoundIdRemapping
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundIdRemapping : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 soundIn
    // Size: 0x4
    // Offset: 0x10
    int soundIn;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 soundOut
    // Size: 0x4
    // Offset: 0x14
    int soundOut;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 soundIn
    [[deprecated("Use field access instead!")]] int& dyn_soundIn();
    // Get instance field reference: private System.Int32 soundOut
    [[deprecated("Use field access instead!")]] int& dyn_soundOut();
    // public System.Int32 get_SoundIn()
    // Offset: 0x2687150
    int get_SoundIn();
    // public System.Int32 get_SoundOut()
    // Offset: 0x2687158
    int get_SoundOut();
    // public System.Void .ctor()
    // Offset: 0x2687160
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundIdRemapping* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundIdRemapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundIdRemapping*, creationType>()));
    }
  }; // SoundIdRemapping
  #pragma pack(pop)
  static check_size<sizeof(SoundIdRemapping), 20 + sizeof(int)> __GlobalNamespace_SoundIdRemappingSizeCheck;
  static_assert(sizeof(SoundIdRemapping) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SoundIdRemapping::get_SoundIn
// Il2CppName: get_SoundIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SoundIdRemapping::*)()>(&GlobalNamespace::SoundIdRemapping::get_SoundIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundIdRemapping*), "get_SoundIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundIdRemapping::get_SoundOut
// Il2CppName: get_SoundOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SoundIdRemapping::*)()>(&GlobalNamespace::SoundIdRemapping::get_SoundOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundIdRemapping*), "get_SoundOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundIdRemapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
