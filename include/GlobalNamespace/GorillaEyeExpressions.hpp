// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaSpeakerLoudness
  class GorillaSpeakerLoudness;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaEyeExpressions
  class GorillaEyeExpressions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaEyeExpressions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaEyeExpressions*, "", "GorillaEyeExpressions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaEyeExpressions
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaEyeExpressions : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject targetFace
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* targetFace;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single screamVolume
    // Size: 0x4
    // Offset: 0x28
    float screamVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single screamDuration
    // Size: 0x4
    // Offset: 0x2C
    float screamDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 ScreamUV
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 ScreamUV;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private GorillaSpeakerLoudness loudness
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::GorillaSpeakerLoudness* loudness;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSpeakerLoudness*) == 0x8);
    // private System.Boolean IsEyeExpressionOverriden
    // Size: 0x1
    // Offset: 0x40
    bool IsEyeExpressionOverriden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsEyeExpressionOverriden and: overrideDuration
    char __padding5[0x3] = {};
    // private System.Single overrideDuration
    // Size: 0x4
    // Offset: 0x44
    float overrideDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 overrideUV
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Vector2 overrideUV;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private ShaderHashId _EyeOverrideUV
    // Size: 0xC
    // Offset: 0x50
    ::GlobalNamespace::ShaderHashId EyeOverrideUV;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: EyeOverrideUV and: EyeOverrideUVTransform
    char __padding8[0x4] = {};
    // private ShaderHashId _EyeOverrideUVTransform
    // Size: 0xC
    // Offset: 0x60
    ::GlobalNamespace::ShaderHashId EyeOverrideUVTransform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.GameObject targetFace
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_targetFace();
    // Get instance field reference: private System.Single screamVolume
    [[deprecated("Use field access instead!")]] float& dyn_screamVolume();
    // Get instance field reference: private System.Single screamDuration
    [[deprecated("Use field access instead!")]] float& dyn_screamDuration();
    // Get instance field reference: private UnityEngine.Vector2 ScreamUV
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_ScreamUV();
    // Get instance field reference: private GorillaSpeakerLoudness loudness
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& dyn_loudness();
    // Get instance field reference: private System.Boolean IsEyeExpressionOverriden
    [[deprecated("Use field access instead!")]] bool& dyn_IsEyeExpressionOverriden();
    // Get instance field reference: private System.Single overrideDuration
    [[deprecated("Use field access instead!")]] float& dyn_overrideDuration();
    // Get instance field reference: private UnityEngine.Vector2 overrideUV
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_overrideUV();
    // Get instance field reference: private ShaderHashId _EyeOverrideUV
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__EyeOverrideUV();
    // Get instance field reference: private ShaderHashId _EyeOverrideUVTransform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__EyeOverrideUVTransform();
    // private System.Void Start()
    // Offset: 0x2707194
    void Start();
    // public System.Void InvokeUpdate()
    // Offset: 0x27071EC
    void InvokeUpdate();
    // private System.Void CheckEyeEffects()
    // Offset: 0x2707204
    void CheckEyeEffects();
    // private System.Void UpdateEyeExpression()
    // Offset: 0x2707284
    void UpdateEyeExpression();
    // public System.Void .ctor()
    // Offset: 0x2707324
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaEyeExpressions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaEyeExpressions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaEyeExpressions*, creationType>()));
    }
  }; // GorillaEyeExpressions
  #pragma pack(pop)
  static check_size<sizeof(GorillaEyeExpressions), 96 + sizeof(::GlobalNamespace::ShaderHashId)> __GlobalNamespace_GorillaEyeExpressionsSizeCheck;
  static_assert(sizeof(GorillaEyeExpressions) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaEyeExpressions::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaEyeExpressions::*)()>(&GlobalNamespace::GorillaEyeExpressions::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaEyeExpressions*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaEyeExpressions::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaEyeExpressions::*)()>(&GlobalNamespace::GorillaEyeExpressions::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaEyeExpressions*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaEyeExpressions::CheckEyeEffects
// Il2CppName: CheckEyeEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaEyeExpressions::*)()>(&GlobalNamespace::GorillaEyeExpressions::CheckEyeEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaEyeExpressions*), "CheckEyeEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaEyeExpressions::UpdateEyeExpression
// Il2CppName: UpdateEyeExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaEyeExpressions::*)()>(&GlobalNamespace::GorillaEyeExpressions::UpdateEyeExpression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaEyeExpressions*), "UpdateEyeExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaEyeExpressions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
