// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LegalAgreementTextAsset
  class LegalAgreementTextAsset;
  // Forward declaring type: LegalAgreements
  class LegalAgreements;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegalAgreementCheck
  class LegalAgreementCheck;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegalAgreementCheck);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreementCheck*, "", "LegalAgreementCheck");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: LegalAgreementCheck
  // [TokenAttribute] Offset: FFFFFFFF
  class LegalAgreementCheck : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private LegalAgreementTextAsset[] agreements
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*> agreements;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>) == 0x8);
    // private System.Boolean testAgreement
    // Size: 0x1
    // Offset: 0x28
    bool testAgreement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testAgreement and: legalAgreements
    char __padding1[0x7] = {};
    // private LegalAgreements legalAgreements
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LegalAgreements* legalAgreements;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LegalAgreements*) == 0x8);
    public:
    // Get instance field reference: private LegalAgreementTextAsset[] agreements
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& dyn_agreements();
    // Get instance field reference: private System.Boolean testAgreement
    [[deprecated("Use field access instead!")]] bool& dyn_testAgreement();
    // Get instance field reference: private LegalAgreements legalAgreements
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& dyn_legalAgreements();
    // public System.Void .ctor()
    // Offset: 0x2752EF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegalAgreementCheck* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementCheck::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegalAgreementCheck*, creationType>()));
    }
  }; // LegalAgreementCheck
  #pragma pack(pop)
  static check_size<sizeof(LegalAgreementCheck), 48 + sizeof(::GlobalNamespace::LegalAgreements*)> __GlobalNamespace_LegalAgreementCheckSizeCheck;
  static_assert(sizeof(LegalAgreementCheck) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementCheck::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
