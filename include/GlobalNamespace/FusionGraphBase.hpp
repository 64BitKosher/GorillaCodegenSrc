// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: Fusion.StatsInternal.IFusionStatsView
#include "Fusion/StatsInternal/IFusionStatsView.hpp"
// Including type: Fusion.Simulation/Statistics/StatSourceTypes
#include "Fusion/Simulation_Statistics_StatSourceTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: IStatsBuffer
  class IStatsBuffer;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FusionStats
  class FusionStats;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionGraphBase
  class FusionGraphBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionGraphBase);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraphBase*, "", "FusionGraphBase");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: FusionGraphBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class FusionGraphBase : public ::Fusion::Behaviour/*, public ::Fusion::StatsInternal::IFusionStatsView*/ {
    public:
    // Nested type: ::GlobalNamespace::FusionGraphBase::StatsPer
    struct StatsPer;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionGraphBase/StatsPer
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatsPer/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatsPer
      constexpr StatsPer(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionGraphBase/StatsPer Default
      static constexpr const int Default = 0;
      // Get static field: static public FusionGraphBase/StatsPer Default
      static ::GlobalNamespace::FusionGraphBase::StatsPer _get_Default();
      // Set static field: static public FusionGraphBase/StatsPer Default
      static void _set_Default(::GlobalNamespace::FusionGraphBase::StatsPer value);
      // static field const value: static public FusionGraphBase/StatsPer Individual
      static constexpr const int Individual = 1;
      // Get static field: static public FusionGraphBase/StatsPer Individual
      static ::GlobalNamespace::FusionGraphBase::StatsPer _get_Individual();
      // Set static field: static public FusionGraphBase/StatsPer Individual
      static void _set_Individual(::GlobalNamespace::FusionGraphBase::StatsPer value);
      // static field const value: static public FusionGraphBase/StatsPer Tick
      static constexpr const int Tick = 2;
      // Get static field: static public FusionGraphBase/StatsPer Tick
      static ::GlobalNamespace::FusionGraphBase::StatsPer _get_Tick();
      // Set static field: static public FusionGraphBase/StatsPer Tick
      static void _set_Tick(::GlobalNamespace::FusionGraphBase::StatsPer value);
      // static field const value: static public FusionGraphBase/StatsPer Second
      static constexpr const int Second = 4;
      // Get static field: static public FusionGraphBase/StatsPer Second
      static ::GlobalNamespace::FusionGraphBase::StatsPer _get_Second();
      // Set static field: static public FusionGraphBase/StatsPer Second
      static void _set_Second(::GlobalNamespace::FusionGraphBase::StatsPer value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionGraphBase/StatsPer
    #pragma pack(pop)
    static check_size<sizeof(FusionGraphBase::StatsPer), 0 + sizeof(int)> __GlobalNamespace_FusionGraphBase_StatsPerSizeCheck;
    static_assert(sizeof(FusionGraphBase::StatsPer) == 0x4);
    public:
    // protected UnityEngine.UI.Text LabelTitle
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* LabelTitle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // protected UnityEngine.UI.Image BackImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Image* BackImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // protected Fusion.Simulation/Statistics/StatSourceTypes _statSourceType
    // Size: 0x4
    // Offset: 0x30
    ::Fusion::Simulation::Statistics::StatSourceTypes statSourceType;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::StatSourceTypes) == 0x4);
    // protected System.Int32 _statId
    // Size: 0x4
    // Offset: 0x34
    int statId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public FusionGraphBase/StatsPer StatsPerDefault
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::FusionGraphBase::StatsPer StatsPerDefault;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionGraphBase::StatsPer) == 0x4);
    // public System.Single WarnThreshold
    // Size: 0x4
    // Offset: 0x3C
    float WarnThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ErrorThreshold
    // Size: 0x4
    // Offset: 0x40
    float ErrorThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: ErrorThreshold and: statsBuffer
    char __padding6[0x4] = {};
    // protected Fusion.IStatsBuffer _statsBuffer
    // Size: 0x8
    // Offset: 0x48
    ::Fusion::IStatsBuffer* statsBuffer;
    // Field size check
    static_assert(sizeof(::Fusion::IStatsBuffer*) == 0x8);
    // protected System.Boolean _isOverlay
    // Size: 0x1
    // Offset: 0x50
    bool isOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOverlay and: fusionStats
    char __padding8[0x7] = {};
    // protected FusionStats _fusionStats
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::FusionStats* fusionStats;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionStats*) == 0x8);
    // protected System.Boolean _layoutDirty
    // Size: 0x1
    // Offset: 0x60
    bool layoutDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: layoutDirty and: CurrentPer
    char __padding10[0x3] = {};
    // protected Fusion.Simulation/Statistics/StatsPer CurrentPer
    // Size: 0x4
    // Offset: 0x64
    ::Fusion::Simulation::Statistics::StatsPer CurrentPer;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::StatsPer) == 0x4);
    // public Fusion.Simulation/Statistics/StatSourceInfo StatSourceInfo
    // Size: 0x44
    // Offset: 0x68
    ::Fusion::Simulation::Statistics::StatSourceInfo StatSourceInfo;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::StatSourceInfo) == 0x44);
    // Padding between fields: StatSourceInfo and: prevStatSourceType
    char __padding12[0x4] = {};
    // private Fusion.Simulation/Statistics/StatSourceTypes _prevStatSourceType
    // Size: 0x4
    // Offset: 0xB0
    ::Fusion::Simulation::Statistics::StatSourceTypes prevStatSourceType;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::StatSourceTypes) == 0x4);
    // private System.Int32 _prevStatId
    // Size: 0x4
    // Offset: 0xB4
    int prevStatId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Fusion::StatsInternal::IFusionStatsView
    operator ::Fusion::StatsInternal::IFusionStatsView() noexcept {
      return *reinterpret_cast<::Fusion::StatsInternal::IFusionStatsView*>(this);
    }
    // static field const value: static protected System.Int32 PAD
    static constexpr const int PAD = 10;
    // Get static field: static protected System.Int32 PAD
    static int _get_PAD();
    // Set static field: static protected System.Int32 PAD
    static void _set_PAD(int value);
    // static field const value: static protected System.Int32 MRGN
    static constexpr const int MRGN = 6;
    // Get static field: static protected System.Int32 MRGN
    static int _get_MRGN();
    // Set static field: static protected System.Int32 MRGN
    static void _set_MRGN(int value);
    // static field const value: static protected System.Int32 MAX_FONT_SIZE_WITH_GRAPH
    static constexpr const int MAX_FONT_SIZE_WITH_GRAPH = 24;
    // Get static field: static protected System.Int32 MAX_FONT_SIZE_WITH_GRAPH
    static int _get_MAX_FONT_SIZE_WITH_GRAPH();
    // Set static field: static protected System.Int32 MAX_FONT_SIZE_WITH_GRAPH
    static void _set_MAX_FONT_SIZE_WITH_GRAPH(int value);
    // Get instance field reference: protected UnityEngine.UI.Text LabelTitle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelTitle();
    // Get instance field reference: protected UnityEngine.UI.Image BackImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_BackImage();
    // Get instance field reference: protected Fusion.Simulation/Statistics/StatSourceTypes _statSourceType
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatSourceTypes& dyn__statSourceType();
    // Get instance field reference: protected System.Int32 _statId
    [[deprecated("Use field access instead!")]] int& dyn__statId();
    // Get instance field reference: public FusionGraphBase/StatsPer StatsPerDefault
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionGraphBase::StatsPer& dyn_StatsPerDefault();
    // Get instance field reference: public System.Single WarnThreshold
    [[deprecated("Use field access instead!")]] float& dyn_WarnThreshold();
    // Get instance field reference: public System.Single ErrorThreshold
    [[deprecated("Use field access instead!")]] float& dyn_ErrorThreshold();
    // Get instance field reference: protected Fusion.IStatsBuffer _statsBuffer
    [[deprecated("Use field access instead!")]] ::Fusion::IStatsBuffer*& dyn__statsBuffer();
    // Get instance field reference: protected System.Boolean _isOverlay
    [[deprecated("Use field access instead!")]] bool& dyn__isOverlay();
    // Get instance field reference: protected FusionStats _fusionStats
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionStats*& dyn__fusionStats();
    // Get instance field reference: protected System.Boolean _layoutDirty
    [[deprecated("Use field access instead!")]] bool& dyn__layoutDirty();
    // Get instance field reference: protected Fusion.Simulation/Statistics/StatsPer CurrentPer
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatsPer& dyn_CurrentPer();
    // Get instance field reference: public Fusion.Simulation/Statistics/StatSourceInfo StatSourceInfo
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatSourceInfo& dyn_StatSourceInfo();
    // Get instance field reference: private Fusion.Simulation/Statistics/StatSourceTypes _prevStatSourceType
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatSourceTypes& dyn__prevStatSourceType();
    // Get instance field reference: private System.Int32 _prevStatId
    [[deprecated("Use field access instead!")]] int& dyn__prevStatId();
    // public Fusion.Simulation/Statistics/StatSourceTypes get_StateSourceType()
    // Offset: 0x29580BC
    ::Fusion::Simulation::Statistics::StatSourceTypes get_StateSourceType();
    // public System.Void set_StateSourceType(Fusion.Simulation/Statistics/StatSourceTypes value)
    // Offset: 0x29580C4
    void set_StateSourceType(::Fusion::Simulation::Statistics::StatSourceTypes value);
    // public System.Int32 get_StatId()
    // Offset: 0x29580D8
    int get_StatId();
    // public System.Void set_StatId(System.Int32 value)
    // Offset: 0x29580E0
    void set_StatId(int value);
    // public Fusion.IStatsBuffer get_StatsBuffer()
    // Offset: 0x29580F4
    ::Fusion::IStatsBuffer* get_StatsBuffer();
    // public System.Void set_IsOverlay(System.Boolean value)
    // Offset: 0x2958124
    void set_IsOverlay(bool value);
    // public System.Boolean get_IsOverlay()
    // Offset: 0x295815C
    bool get_IsOverlay();
    // protected UnityEngine.Color get_BackColor()
    // Offset: 0x2958164
    ::UnityEngine::Color get_BackColor();
    // protected System.Type get_CastToStatType()
    // Offset: 0x29581D8
    ::System::Type* get_CastToStatType();
    // protected FusionStats LocateParentFusionStats()
    // Offset: 0x29582A0
    ::GlobalNamespace::FusionStats* LocateParentFusionStats();
    // public System.Void Initialize()
    // Offset: 0x2958348
    void Initialize();
    // public System.Void CyclePer()
    // Offset: 0x295834C
    void CyclePer();
    // public System.Void CalculateLayout()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CalculateLayout();
    // public System.Void Refresh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Refresh();
    // protected System.Boolean TryConnect()
    // Offset: 0x29583A4
    bool TryConnect();
    // protected System.Void ApplyTitleText()
    // Offset: 0x29588B8
    void ApplyTitleText();
    // protected System.Void CheckIfValidIncurrentMode(Fusion.NetworkRunner runner)
    // Offset: 0x2958710
    void CheckIfValidIncurrentMode(::Fusion::NetworkRunner* runner);
    // protected System.Void .ctor()
    // Offset: 0x29589D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionGraphBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionGraphBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionGraphBase*, creationType>()));
    }
    // private System.Boolean Fusion.StatsInternal.IFusionStatsView.get_isActiveAndEnabled()
    // Offset: 0x29589E4
    bool Fusion_StatsInternal_IFusionStatsView_get_isActiveAndEnabled();
    // private UnityEngine.Transform Fusion.StatsInternal.IFusionStatsView.get_transform()
    // Offset: 0x29589EC
    ::UnityEngine::Transform* Fusion_StatsInternal_IFusionStatsView_get_transform();
  }; // FusionGraphBase
  #pragma pack(pop)
  static check_size<sizeof(FusionGraphBase), 180 + sizeof(int)> __GlobalNamespace_FusionGraphBaseSizeCheck;
  static_assert(sizeof(FusionGraphBase) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraphBase::StatsPer, "", "FusionGraphBase/StatsPer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_StateSourceType
// Il2CppName: get_StateSourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceTypes (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_StateSourceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_StateSourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::set_StateSourceType
// Il2CppName: set_StateSourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)(::Fusion::Simulation::Statistics::StatSourceTypes)>(&GlobalNamespace::FusionGraphBase::set_StateSourceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/StatSourceTypes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "set_StateSourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_StatId
// Il2CppName: get_StatId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_StatId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_StatId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::set_StatId
// Il2CppName: set_StatId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)(int)>(&GlobalNamespace::FusionGraphBase::set_StatId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "set_StatId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_StatsBuffer
// Il2CppName: get_StatsBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::IStatsBuffer* (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_StatsBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_StatsBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::set_IsOverlay
// Il2CppName: set_IsOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)(bool)>(&GlobalNamespace::FusionGraphBase::set_IsOverlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "set_IsOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_IsOverlay
// Il2CppName: get_IsOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_IsOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_IsOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_BackColor
// Il2CppName: get_BackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_BackColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_BackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::get_CastToStatType
// Il2CppName: get_CastToStatType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::get_CastToStatType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "get_CastToStatType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::LocateParentFusionStats
// Il2CppName: LocateParentFusionStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionStats* (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::LocateParentFusionStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "LocateParentFusionStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::CyclePer
// Il2CppName: CyclePer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::CyclePer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "CyclePer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::CalculateLayout
// Il2CppName: CalculateLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::CalculateLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "CalculateLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::TryConnect
// Il2CppName: TryConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::TryConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "TryConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::ApplyTitleText
// Il2CppName: ApplyTitleText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::ApplyTitleText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "ApplyTitleText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::CheckIfValidIncurrentMode
// Il2CppName: CheckIfValidIncurrentMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraphBase::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionGraphBase::CheckIfValidIncurrentMode)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "CheckIfValidIncurrentMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::Fusion_StatsInternal_IFusionStatsView_get_isActiveAndEnabled
// Il2CppName: Fusion.StatsInternal.IFusionStatsView.get_isActiveAndEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::Fusion_StatsInternal_IFusionStatsView_get_isActiveAndEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "Fusion.StatsInternal.IFusionStatsView.get_isActiveAndEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraphBase::Fusion_StatsInternal_IFusionStatsView_get_transform
// Il2CppName: Fusion.StatsInternal.IFusionStatsView.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::FusionGraphBase::*)()>(&GlobalNamespace::FusionGraphBase::Fusion_StatsInternal_IFusionStatsView_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraphBase*), "Fusion.StatsInternal.IFusionStatsView.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
