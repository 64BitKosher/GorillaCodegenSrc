// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaPlayerLineButton
#include "GlobalNamespace/GorillaPlayerLineButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GorillaScoreBoard
  class GorillaScoreBoard;
  // Forward declaring type: RigContainer
  class RigContainer;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaPlayerScoreboardLine
  class GorillaPlayerScoreboardLine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaPlayerScoreboardLine);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaPlayerScoreboardLine*, "", "GorillaPlayerScoreboardLine");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: GorillaPlayerScoreboardLine
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaPlayerScoreboardLine : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaPlayerScoreboardLine::$$c
    class $$c;
    public:
    // public UnityEngine.UI.Text playerName
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* playerName;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text playerLevel
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* playerLevel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text playerMMR
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* playerMMR;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Image playerSwatch
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Image* playerSwatch;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.Texture infectedTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture* infectedTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public NetPlayer linePlayer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::NetPlayer* linePlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetPlayer*) == 0x8);
    // public VRRig playerVRRig
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::VRRig* playerVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public System.String playerLevelValue
    // Size: 0x8
    // Offset: 0x58
    ::StringW playerLevelValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playerMMRValue
    // Size: 0x8
    // Offset: 0x60
    ::StringW playerMMRValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playerNameValue
    // Size: 0x8
    // Offset: 0x68
    ::StringW playerNameValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playerNameVisible
    // Size: 0x8
    // Offset: 0x70
    ::StringW playerNameVisible;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 playerActorNumber
    // Size: 0x4
    // Offset: 0x78
    int playerActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: playerActorNumber and: muteButton
    char __padding11[0x4] = {};
    // public GorillaPlayerLineButton muteButton
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::GorillaPlayerLineButton* muteButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPlayerLineButton*) == 0x8);
    // public GorillaPlayerLineButton reportButton
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::GorillaPlayerLineButton* reportButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPlayerLineButton*) == 0x8);
    // public UnityEngine.GameObject hateSpeechButton
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* hateSpeechButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject toxicityButton
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* toxicityButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject cheatingButton
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GameObject* cheatingButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject cancelButton
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* cancelButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.SpriteRenderer speakerIcon
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::SpriteRenderer* speakerIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // public System.Boolean canPressNextReportButton
    // Size: 0x1
    // Offset: 0xB8
    bool canPressNextReportButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canPressNextReportButton and: texts
    char __padding19[0x7] = {};
    // public UnityEngine.UI.Text[] texts
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::UnityEngine::UI::Text*> texts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Text*>) == 0x8);
    // public UnityEngine.SpriteRenderer[] sprites
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::SpriteRenderer*> sprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SpriteRenderer*>) == 0x8);
    // public UnityEngine.MeshRenderer[] meshes
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::UnityEngine::MeshRenderer*> meshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // public UnityEngine.UI.Image[] images
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::UI::Image*> images;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Image*>) == 0x8);
    // private Photon.Voice.Unity.Recorder myRecorder
    // Size: 0x8
    // Offset: 0xE0
    ::Photon::Voice::Unity::Recorder* myRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private System.Boolean isMuteManual
    // Size: 0x1
    // Offset: 0xE8
    bool isMuteManual;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMuteManual and: mute
    char __padding25[0x3] = {};
    // private System.Int32 mute
    // Size: 0x4
    // Offset: 0xEC
    int mute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 emptyRigCount
    // Size: 0x4
    // Offset: 0xF0
    int emptyRigCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: emptyRigCount and: myRig
    char __padding27[0x4] = {};
    // public UnityEngine.GameObject myRig
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::GameObject* myRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean reportedCheating
    // Size: 0x1
    // Offset: 0x100
    bool reportedCheating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reportedToxicity
    // Size: 0x1
    // Offset: 0x101
    bool reportedToxicity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reportedHateSpeech
    // Size: 0x1
    // Offset: 0x102
    bool reportedHateSpeech;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reportInProgress
    // Size: 0x1
    // Offset: 0x103
    bool reportInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reportInProgress and: currentNickname
    char __padding32[0x4] = {};
    // private System.String currentNickname
    // Size: 0x8
    // Offset: 0x108
    ::StringW currentNickname;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean doneReporting
    // Size: 0x1
    // Offset: 0x110
    bool doneReporting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean lastVisible
    // Size: 0x1
    // Offset: 0x111
    bool lastVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastVisible and: parentScoreboard
    char __padding35[0x6] = {};
    // public GorillaScoreBoard parentScoreboard
    // Size: 0x8
    // Offset: 0x118
    ::GlobalNamespace::GorillaScoreBoard* parentScoreboard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaScoreBoard*) == 0x8);
    // public System.Single initTime
    // Size: 0x4
    // Offset: 0x120
    float initTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single emptyRigCooldown
    // Size: 0x4
    // Offset: 0x124
    float emptyRigCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // RigContainer rigContainer
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::RigContainer* rigContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    public:
    // Get static field: static private System.Int32[] targetActors
    static ::ArrayW<int> _get_targetActors();
    // Set static field: static private System.Int32[] targetActors
    static void _set_targetActors(::ArrayW<int> value);
    // Get instance field reference: public UnityEngine.UI.Text playerName
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerName();
    // Get instance field reference: public UnityEngine.UI.Text playerLevel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerLevel();
    // Get instance field reference: public UnityEngine.UI.Text playerMMR
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerMMR();
    // Get instance field reference: public UnityEngine.UI.Image playerSwatch
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_playerSwatch();
    // Get instance field reference: public UnityEngine.Texture infectedTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_infectedTexture();
    // Get instance field reference: public NetPlayer linePlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& dyn_linePlayer();
    // Get instance field reference: public VRRig playerVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_playerVRRig();
    // Get instance field reference: public System.String playerLevelValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerLevelValue();
    // Get instance field reference: public System.String playerMMRValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerMMRValue();
    // Get instance field reference: public System.String playerNameValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerNameValue();
    // Get instance field reference: public System.String playerNameVisible
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerNameVisible();
    // Get instance field reference: public System.Int32 playerActorNumber
    [[deprecated("Use field access instead!")]] int& dyn_playerActorNumber();
    // Get instance field reference: public GorillaPlayerLineButton muteButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerLineButton*& dyn_muteButton();
    // Get instance field reference: public GorillaPlayerLineButton reportButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerLineButton*& dyn_reportButton();
    // Get instance field reference: public UnityEngine.GameObject hateSpeechButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_hateSpeechButton();
    // Get instance field reference: public UnityEngine.GameObject toxicityButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_toxicityButton();
    // Get instance field reference: public UnityEngine.GameObject cheatingButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cheatingButton();
    // Get instance field reference: public UnityEngine.GameObject cancelButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cancelButton();
    // Get instance field reference: public UnityEngine.SpriteRenderer speakerIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_speakerIcon();
    // Get instance field reference: public System.Boolean canPressNextReportButton
    [[deprecated("Use field access instead!")]] bool& dyn_canPressNextReportButton();
    // Get instance field reference: public UnityEngine.UI.Text[] texts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Text*>& dyn_texts();
    // Get instance field reference: public UnityEngine.SpriteRenderer[] sprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SpriteRenderer*>& dyn_sprites();
    // Get instance field reference: public UnityEngine.MeshRenderer[] meshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_meshes();
    // Get instance field reference: public UnityEngine.UI.Image[] images
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Image*>& dyn_images();
    // Get instance field reference: private Photon.Voice.Unity.Recorder myRecorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_myRecorder();
    // Get instance field reference: private System.Boolean isMuteManual
    [[deprecated("Use field access instead!")]] bool& dyn_isMuteManual();
    // Get instance field reference: private System.Int32 mute
    [[deprecated("Use field access instead!")]] int& dyn_mute();
    // Get instance field reference: private System.Int32 emptyRigCount
    [[deprecated("Use field access instead!")]] int& dyn_emptyRigCount();
    // Get instance field reference: public UnityEngine.GameObject myRig
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_myRig();
    // Get instance field reference: public System.Boolean reportedCheating
    [[deprecated("Use field access instead!")]] bool& dyn_reportedCheating();
    // Get instance field reference: public System.Boolean reportedToxicity
    [[deprecated("Use field access instead!")]] bool& dyn_reportedToxicity();
    // Get instance field reference: public System.Boolean reportedHateSpeech
    [[deprecated("Use field access instead!")]] bool& dyn_reportedHateSpeech();
    // Get instance field reference: public System.Boolean reportInProgress
    [[deprecated("Use field access instead!")]] bool& dyn_reportInProgress();
    // Get instance field reference: private System.String currentNickname
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentNickname();
    // Get instance field reference: public System.Boolean doneReporting
    [[deprecated("Use field access instead!")]] bool& dyn_doneReporting();
    // Get instance field reference: public System.Boolean lastVisible
    [[deprecated("Use field access instead!")]] bool& dyn_lastVisible();
    // Get instance field reference: public GorillaScoreBoard parentScoreboard
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaScoreBoard*& dyn_parentScoreboard();
    // Get instance field reference: public System.Single initTime
    [[deprecated("Use field access instead!")]] float& dyn_initTime();
    // Get instance field reference: public System.Single emptyRigCooldown
    [[deprecated("Use field access instead!")]] float& dyn_emptyRigCooldown();
    // Get instance field reference: RigContainer rigContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_rigContainer();
    // public System.Void Start()
    // Offset: 0x273B648
    void Start();
    // public System.Void InitializeLine()
    // Offset: 0x273B658
    void InitializeLine();
    // public System.Void SetLineData(NetPlayer netPlayer)
    // Offset: 0x273BD14
    void SetLineData(::GlobalNamespace::NetPlayer* netPlayer);
    // public System.Void UpdateLine()
    // Offset: 0x273BE90
    void UpdateLine();
    // private System.Void UpdatePlayerText()
    // Offset: 0x273B9DC
    void UpdatePlayerText();
    // public System.Void PressButton(System.Boolean isOn, GorillaPlayerLineButton/ButtonType buttonType)
    // Offset: 0x273B1D0
    void PressButton(bool isOn, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType);
    // public System.Void SetReportState(System.Boolean reportState, GorillaPlayerLineButton/ButtonType buttonType)
    // Offset: 0x273CC40
    void SetReportState(bool reportState, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType);
    // static public System.Void ReportPlayer(System.String PlayerID, GorillaPlayerLineButton/ButtonType buttonType, System.String OtherPlayerNickName)
    // Offset: 0x273CE54
    static void ReportPlayer(::StringW PlayerID, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType, ::StringW OtherPlayerNickName);
    // static public System.Void MutePlayer(System.String PlayerID, System.String OtherPlayerNickName, System.Int32 muting)
    // Offset: 0x273C8A8
    static void MutePlayer(::StringW PlayerID, ::StringW OtherPlayerNickName, int muting);
    // public System.String NormalizeName(System.Boolean doIt, System.String text)
    // Offset: 0x273C64C
    ::StringW NormalizeName(bool doIt, ::StringW text);
    // public System.Void ResetData()
    // Offset: 0x273D304
    void ResetData();
    // private System.Void OnEnable()
    // Offset: 0x273D388
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x273D530
    void OnDisable();
    // private System.Void SwapToReportState(System.Boolean reportInProgress)
    // Offset: 0x273BC7C
    void SwapToReportState(bool reportInProgress);
    // public System.Void .ctor()
    // Offset: 0x273D684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaPlayerScoreboardLine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaPlayerScoreboardLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaPlayerScoreboardLine*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x273D6A0
    static void _cctor();
  }; // GorillaPlayerScoreboardLine
  #pragma pack(pop)
  static check_size<sizeof(GorillaPlayerScoreboardLine), 296 + sizeof(::GlobalNamespace::RigContainer*)> __GlobalNamespace_GorillaPlayerScoreboardLineSizeCheck;
  static_assert(sizeof(GorillaPlayerScoreboardLine) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::InitializeLine
// Il2CppName: InitializeLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::InitializeLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "InitializeLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::SetLineData
// Il2CppName: SetLineData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::GorillaPlayerScoreboardLine::SetLineData)> {
  static const MethodInfo* get() {
    static auto* netPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "SetLineData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLine
// Il2CppName: UpdateLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "UpdateLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::UpdatePlayerText
// Il2CppName: UpdatePlayerText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::UpdatePlayerText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "UpdatePlayerText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::PressButton
// Il2CppName: PressButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType)>(&GlobalNamespace::GorillaPlayerScoreboardLine::PressButton)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "PressButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn, buttonType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::SetReportState
// Il2CppName: SetReportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType)>(&GlobalNamespace::GorillaPlayerScoreboardLine::SetReportState)> {
  static const MethodInfo* get() {
    static auto* reportState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "SetReportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportState, buttonType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::ReportPlayer
// Il2CppName: ReportPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType, ::StringW)>(&GlobalNamespace::GorillaPlayerScoreboardLine::ReportPlayer)> {
  static const MethodInfo* get() {
    static auto* PlayerID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    static auto* OtherPlayerNickName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "ReportPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PlayerID, buttonType, OtherPlayerNickName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::MutePlayer
// Il2CppName: MutePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, int)>(&GlobalNamespace::GorillaPlayerScoreboardLine::MutePlayer)> {
  static const MethodInfo* get() {
    static auto* PlayerID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* OtherPlayerNickName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* muting = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "MutePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PlayerID, OtherPlayerNickName, muting});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::NormalizeName
// Il2CppName: NormalizeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::StringW)>(&GlobalNamespace::GorillaPlayerScoreboardLine::NormalizeName)> {
  static const MethodInfo* get() {
    static auto* doIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "NormalizeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doIt, text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::ResetData
// Il2CppName: ResetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::ResetData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "ResetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::SwapToReportState
// Il2CppName: SwapToReportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool)>(&GlobalNamespace::GorillaPlayerScoreboardLine::SwapToReportState)> {
  static const MethodInfo* get() {
    static auto* reportInProgress = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "SwapToReportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportInProgress});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
