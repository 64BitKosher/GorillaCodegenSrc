// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BuilderMaterialOptions
#include "GlobalNamespace/BuilderMaterialOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderMaterialOptions::Options);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderMaterialOptions::Options*, "", "BuilderMaterialOptions/Options");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: BuilderMaterialOptions/Options
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderMaterialOptions::Options : public ::Il2CppObject {
    public:
    public:
    // public System.String materialId
    // Size: 0x8
    // Offset: 0x10
    ::StringW materialId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 materialType
    // Size: 0x4
    // Offset: 0x20
    int materialType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String materialId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_materialId();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public System.Int32 materialType
    [[deprecated("Use field access instead!")]] int& dyn_materialType();
    // public System.Void .ctor()
    // Offset: 0x26E0E88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderMaterialOptions::Options* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderMaterialOptions::Options::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderMaterialOptions::Options*, creationType>()));
    }
  }; // BuilderMaterialOptions/Options
  #pragma pack(pop)
  static check_size<sizeof(BuilderMaterialOptions::Options), 32 + sizeof(int)> __GlobalNamespace_BuilderMaterialOptions_OptionsSizeCheck;
  static_assert(sizeof(BuilderMaterialOptions::Options) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderMaterialOptions::Options::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
