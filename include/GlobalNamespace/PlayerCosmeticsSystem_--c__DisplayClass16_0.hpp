// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayerCosmeticsSystem
#include "GlobalNamespace/PlayerCosmeticsSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetSharedGroupDataResult
  class GetSharedGroupDataResult;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0*, "", "PlayerCosmeticsSystem/<>c__DisplayClass16_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayerCosmeticsSystem/<>c__DisplayClass16_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlayerCosmeticsSystem::$$c__DisplayClass16_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 firstEntryId
    // Size: 0x4
    // Offset: 0x10
    int firstEntryId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: firstEntryId and: $$4__this
    char __padding0[0x4] = {};
    // public PlayerCosmeticsSystem <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PlayerCosmeticsSystem* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerCosmeticsSystem*) == 0x8);
    // public Photon.Realtime.Player player
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Realtime::Player* player;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 firstEntryId
    [[deprecated("Use field access instead!")]] int& dyn_firstEntryId();
    // Get instance field reference: public PlayerCosmeticsSystem <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerCosmeticsSystem*& dyn_$$4__this();
    // Get instance field reference: public Photon.Realtime.Player player
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_player();
    // public System.Void .ctor()
    // Offset: 0x27676E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerCosmeticsSystem::$$c__DisplayClass16_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerCosmeticsSystem::$$c__DisplayClass16_0*, creationType>()));
    }
    // System.Void <NewCosmeticsPath>b__0(PlayFab.ClientModels.GetSharedGroupDataResult result)
    // Offset: 0x27690A4
    void $NewCosmeticsPath$b__0(::PlayFab::ClientModels::GetSharedGroupDataResult* result);
  }; // PlayerCosmeticsSystem/<>c__DisplayClass16_0
  #pragma pack(pop)
  static check_size<sizeof(PlayerCosmeticsSystem::$$c__DisplayClass16_0), 32 + sizeof(::Photon::Realtime::Player*)> __GlobalNamespace_PlayerCosmeticsSystem_$$c__DisplayClass16_0SizeCheck;
  static_assert(sizeof(PlayerCosmeticsSystem::$$c__DisplayClass16_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0::$NewCosmeticsPath$b__0
// Il2CppName: <NewCosmeticsPath>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0::*)(::PlayFab::ClientModels::GetSharedGroupDataResult*)>(&GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0::$NewCosmeticsPath$b__0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetSharedGroupDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0*), "<NewCosmeticsPath>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
