// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PassthroughStyler
#include "GlobalNamespace/PassthroughStyler.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PassthroughStyler::$FadeTo$d__33);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PassthroughStyler::$FadeTo$d__33*, "", "PassthroughStyler/<FadeTo>d__33");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: PassthroughStyler/<FadeTo>d__33
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PassthroughStyler::$FadeTo$d__33 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public PassthroughStyler <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PassthroughStyler* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PassthroughStyler*) == 0x8);
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x28
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single styleValueMultiplier
    // Size: 0x4
    // Offset: 0x2C
    float styleValueMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <timer>5__2
    // Size: 0x4
    // Offset: 0x30
    float $timer$5__2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <brightness>5__3
    // Size: 0x4
    // Offset: 0x34
    float $brightness$5__3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <contrast>5__4
    // Size: 0x4
    // Offset: 0x38
    float $contrast$5__4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <saturation>5__5
    // Size: 0x4
    // Offset: 0x3C
    float $saturation$5__5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color <edgeCol>5__6
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color $edgeCol$5__6;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single <blend>5__7
    // Size: 0x4
    // Offset: 0x50
    float $blend$5__7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public PassthroughStyler <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PassthroughStyler*& dyn_$$4__this();
    // Get instance field reference: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: public System.Single styleValueMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_styleValueMultiplier();
    // Get instance field reference: private System.Single <timer>5__2
    [[deprecated("Use field access instead!")]] float& dyn_$timer$5__2();
    // Get instance field reference: private System.Single <brightness>5__3
    [[deprecated("Use field access instead!")]] float& dyn_$brightness$5__3();
    // Get instance field reference: private System.Single <contrast>5__4
    [[deprecated("Use field access instead!")]] float& dyn_$contrast$5__4();
    // Get instance field reference: private System.Single <saturation>5__5
    [[deprecated("Use field access instead!")]] float& dyn_$saturation$5__5();
    // Get instance field reference: private UnityEngine.Color <edgeCol>5__6
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$edgeCol$5__6();
    // Get instance field reference: private System.Single <blend>5__7
    [[deprecated("Use field access instead!")]] float& dyn_$blend$5__7();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x293BD04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PassthroughStyler::$FadeTo$d__33* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PassthroughStyler::$FadeTo$d__33::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PassthroughStyler::$FadeTo$d__33*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x293BDAC
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x293BDB0
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x293BF90
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x293BF98
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x293BFD0
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // PassthroughStyler/<FadeTo>d__33
  #pragma pack(pop)
  static check_size<sizeof(PassthroughStyler::$FadeTo$d__33), 80 + sizeof(float)> __GlobalNamespace_PassthroughStyler_$FadeTo$d__33SizeCheck;
  static_assert(sizeof(PassthroughStyler::$FadeTo$d__33) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::$FadeTo$d__33::*)()>(&GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler::$FadeTo$d__33*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PassthroughStyler::$FadeTo$d__33::*)()>(&GlobalNamespace::PassthroughStyler::$FadeTo$d__33::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler::$FadeTo$d__33*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::PassthroughStyler::$FadeTo$d__33::*)()>(&GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler::$FadeTo$d__33*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::$FadeTo$d__33::*)()>(&GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler::$FadeTo$d__33*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::PassthroughStyler::$FadeTo$d__33::*)()>(&GlobalNamespace::PassthroughStyler::$FadeTo$d__33::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler::$FadeTo$d__33*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
