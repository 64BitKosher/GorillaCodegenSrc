// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ThrowableBug/BugName
#include "GlobalNamespace/ThrowableBug.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBugBeacon
  class ThrowableBugBeacon;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThrowableBugBeacon);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBugBeacon*, "", "ThrowableBugBeacon");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ThrowableBugBeacon
  // [TokenAttribute] Offset: FFFFFFFF
  class ThrowableBugBeacon : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent
    class ThrowableBugBeaconEvent;
    // Nested type: ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent
    class ThrowableBugBeaconFloatEvent;
    public:
    // private System.Single range
    // Size: 0x4
    // Offset: 0x20
    float range;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private ThrowableBug/BugName bugName
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::ThrowableBug::BugName bugName;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBug::BugName) == 0x4);
    public:
    // Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnCall
    static ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* _get_OnCall();
    // Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnCall
    static void _set_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnDismiss
    static ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* _get_OnDismiss();
    // Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnDismiss
    static void _set_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnLock
    static ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* _get_OnLock();
    // Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnLock
    static void _set_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnUnlock
    static ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* _get_OnUnlock();
    // Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnUnlock
    static void _set_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconFloatEvent OnChangeSpeedMultiplier
    static ::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* _get_OnChangeSpeedMultiplier();
    // Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconFloatEvent OnChangeSpeedMultiplier
    static void _set_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value);
    // Get instance field reference: private System.Single range
    [[deprecated("Use field access instead!")]] float& dyn_range();
    // Get instance field reference: private ThrowableBug/BugName bugName
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::BugName& dyn_bugName();
    // static public System.Void add_OnCall(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A2864
    static void add_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void remove_OnCall(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A2E90
    static void remove_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void add_OnDismiss(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A291C
    static void add_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void remove_OnDismiss(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A2F48
    static void remove_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void add_OnLock(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A29D8
    static void add_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void remove_OnLock(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A3004
    static void remove_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void add_OnUnlock(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A2A94
    static void add_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void remove_OnUnlock(ThrowableBugBeacon/ThrowableBugBeaconEvent value)
    // Offset: 0x27A30C0
    static void remove_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value);
    // static public System.Void add_OnChangeSpeedMultiplier(ThrowableBugBeacon/ThrowableBugBeaconFloatEvent value)
    // Offset: 0x27A2C5C
    static void add_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value);
    // static public System.Void remove_OnChangeSpeedMultiplier(ThrowableBugBeacon/ThrowableBugBeaconFloatEvent value)
    // Offset: 0x27A317C
    static void remove_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value);
    // public ThrowableBug/BugName get_BugName()
    // Offset: 0x27A4E3C
    ::GlobalNamespace::ThrowableBug::BugName get_BugName();
    // public System.Single get_Range()
    // Offset: 0x27A4E44
    float get_Range();
    // public System.Void Call()
    // Offset: 0x27A4E4C
    void Call();
    // public System.Void Dismiss()
    // Offset: 0x27A4EB8
    void Dismiss();
    // public System.Void Lock()
    // Offset: 0x27A4F24
    void Lock();
    // public System.Void Unlock()
    // Offset: 0x27A4F90
    void Unlock();
    // public System.Void ChangeSpeedMultiplier(System.Single f)
    // Offset: 0x27A4FFC
    void ChangeSpeedMultiplier(float f);
    // private System.Void OnDisable()
    // Offset: 0x27A507C
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x27A50E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThrowableBugBeacon* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThrowableBugBeacon*, creationType>()));
    }
  }; // ThrowableBugBeacon
  #pragma pack(pop)
  static check_size<sizeof(ThrowableBugBeacon), 36 + sizeof(::GlobalNamespace::ThrowableBug::BugName)> __GlobalNamespace_ThrowableBugBeaconSizeCheck;
  static_assert(sizeof(ThrowableBugBeacon) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::add_OnCall
// Il2CppName: add_OnCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::add_OnCall)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "add_OnCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::remove_OnCall
// Il2CppName: remove_OnCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::remove_OnCall)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "remove_OnCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::add_OnDismiss
// Il2CppName: add_OnDismiss
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::add_OnDismiss)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "add_OnDismiss", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::remove_OnDismiss
// Il2CppName: remove_OnDismiss
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::remove_OnDismiss)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "remove_OnDismiss", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::add_OnLock
// Il2CppName: add_OnLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::add_OnLock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "add_OnLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::remove_OnLock
// Il2CppName: remove_OnLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::remove_OnLock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "remove_OnLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::add_OnUnlock
// Il2CppName: add_OnUnlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::add_OnUnlock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "add_OnUnlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::remove_OnUnlock
// Il2CppName: remove_OnUnlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*)>(&GlobalNamespace::ThrowableBugBeacon::remove_OnUnlock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "remove_OnUnlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::add_OnChangeSpeedMultiplier
// Il2CppName: add_OnChangeSpeedMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*)>(&GlobalNamespace::ThrowableBugBeacon::add_OnChangeSpeedMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconFloatEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "add_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::remove_OnChangeSpeedMultiplier
// Il2CppName: remove_OnChangeSpeedMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*)>(&GlobalNamespace::ThrowableBugBeacon::remove_OnChangeSpeedMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon/ThrowableBugBeaconFloatEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "remove_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::get_BugName
// Il2CppName: get_BugName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ThrowableBug::BugName (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::get_BugName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "get_BugName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::get_Range
// Il2CppName: get_Range
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::get_Range)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "get_Range", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::Call
// Il2CppName: Call
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::Call)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "Call", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::Dismiss
// Il2CppName: Dismiss
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::Dismiss)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "Dismiss", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::Lock
// Il2CppName: Lock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::Lock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "Lock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::Unlock
// Il2CppName: Unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::Unlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "Unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::ChangeSpeedMultiplier
// Il2CppName: ChangeSpeedMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)(float)>(&GlobalNamespace::ThrowableBugBeacon::ChangeSpeedMultiplier)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "ChangeSpeedMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeacon::*)()>(&GlobalNamespace::ThrowableBugBeacon::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeacon*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeacon::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
