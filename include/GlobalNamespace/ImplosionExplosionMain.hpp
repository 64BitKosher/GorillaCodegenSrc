// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorField
  class BoingReactorField;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ImplosionExplosionMain
  class ImplosionExplosionMain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ImplosionExplosionMain);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImplosionExplosionMain*, "", "ImplosionExplosionMain");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ImplosionExplosionMain
  // [TokenAttribute] Offset: FFFFFFFF
  class ImplosionExplosionMain : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BoingKit.BoingReactorField ReactorField
    // Size: 0x8
    // Offset: 0x20
    ::BoingKit::BoingReactorField* ReactorField;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingReactorField*) == 0x8);
    // public UnityEngine.GameObject Diamond
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* Diamond;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 NumDiamonds
    // Size: 0x4
    // Offset: 0x30
    int NumDiamonds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: NumDiamonds and: m_aaInstancedDiamondMatrix
    char __padding2[0x4] = {};
    // private UnityEngine.Matrix4x4[][] m_aaInstancedDiamondMatrix
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>> m_aaInstancedDiamondMatrix;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>>) == 0x8);
    // private UnityEngine.MaterialPropertyBlock m_diamondMaterialProps
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MaterialPropertyBlock* m_diamondMaterialProps;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32 kNumInstancedBushesPerDrawCall
    static int _get_kNumInstancedBushesPerDrawCall();
    // Set static field: static private readonly System.Int32 kNumInstancedBushesPerDrawCall
    static void _set_kNumInstancedBushesPerDrawCall(int value);
    // Get instance field reference: public BoingKit.BoingReactorField ReactorField
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingReactorField*& dyn_ReactorField();
    // Get instance field reference: public UnityEngine.GameObject Diamond
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Diamond();
    // Get instance field reference: public System.Int32 NumDiamonds
    [[deprecated("Use field access instead!")]] int& dyn_NumDiamonds();
    // Get instance field reference: private UnityEngine.Matrix4x4[][] m_aaInstancedDiamondMatrix
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>>& dyn_m_aaInstancedDiamondMatrix();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_diamondMaterialProps
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_diamondMaterialProps();
    // public System.Void Start()
    // Offset: 0x2682B10
    void Start();
    // public System.Void Update()
    // Offset: 0x2682E3C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2682FDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImplosionExplosionMain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImplosionExplosionMain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImplosionExplosionMain*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2682FE4
    static void _cctor();
  }; // ImplosionExplosionMain
  #pragma pack(pop)
  static check_size<sizeof(ImplosionExplosionMain), 64 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GlobalNamespace_ImplosionExplosionMainSizeCheck;
  static_assert(sizeof(ImplosionExplosionMain) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ImplosionExplosionMain::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImplosionExplosionMain::*)()>(&GlobalNamespace::ImplosionExplosionMain::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImplosionExplosionMain*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImplosionExplosionMain::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImplosionExplosionMain::*)()>(&GlobalNamespace::ImplosionExplosionMain::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImplosionExplosionMain*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImplosionExplosionMain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ImplosionExplosionMain::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ImplosionExplosionMain::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImplosionExplosionMain*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
