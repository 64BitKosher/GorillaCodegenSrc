// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SetMeshBarycentricCoordinates
  class SetMeshBarycentricCoordinates;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SetMeshBarycentricCoordinates);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SetMeshBarycentricCoordinates*, "", "SetMeshBarycentricCoordinates");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SetMeshBarycentricCoordinates
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class SetMeshBarycentricCoordinates : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SetMeshBarycentricCoordinates::$CheckMeshData$d__3
    class $CheckMeshData$d__3;
    public:
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // private System.Void Start()
    // Offset: 0x2947DC4
    void Start();
    // private System.Collections.IEnumerator CheckMeshData()
    // Offset: 0x2947E34
    ::System::Collections::IEnumerator* CheckMeshData();
    // private System.Void CreateBarycentricCoordinates()
    // Offset: 0x2947EC8
    void CreateBarycentricCoordinates();
    // public System.Void .ctor()
    // Offset: 0x294813C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetMeshBarycentricCoordinates* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetMeshBarycentricCoordinates::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetMeshBarycentricCoordinates*, creationType>()));
    }
  }; // SetMeshBarycentricCoordinates
  #pragma pack(pop)
  static check_size<sizeof(SetMeshBarycentricCoordinates), 40 + sizeof(::UnityEngine::Mesh*)> __GlobalNamespace_SetMeshBarycentricCoordinatesSizeCheck;
  static_assert(sizeof(SetMeshBarycentricCoordinates) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SetMeshBarycentricCoordinates::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetMeshBarycentricCoordinates::*)()>(&GlobalNamespace::SetMeshBarycentricCoordinates::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetMeshBarycentricCoordinates*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetMeshBarycentricCoordinates::CheckMeshData
// Il2CppName: CheckMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SetMeshBarycentricCoordinates::*)()>(&GlobalNamespace::SetMeshBarycentricCoordinates::CheckMeshData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetMeshBarycentricCoordinates*), "CheckMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetMeshBarycentricCoordinates::CreateBarycentricCoordinates
// Il2CppName: CreateBarycentricCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetMeshBarycentricCoordinates::*)()>(&GlobalNamespace::SetMeshBarycentricCoordinates::CreateBarycentricCoordinates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetMeshBarycentricCoordinates*), "CreateBarycentricCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetMeshBarycentricCoordinates::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
