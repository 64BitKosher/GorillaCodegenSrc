// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TestScript
  class TestScript;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TestScript);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TestScript*, "", "TestScript");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: TestScript
  // [TokenAttribute] Offset: FFFFFFFF
  // [GTStripGameObjectFromBuildAttribute] Offset: FFFFFFFF
  class TestScript : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject testDelete
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* testDelete;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject testDelete
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_testDelete();
    // public System.Int32 get_callbackOrder()
    // Offset: 0x277289C
    int get_callbackOrder();
    // public System.Void .ctor()
    // Offset: 0x27728A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestScript* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestScript::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestScript*, creationType>()));
    }
  }; // TestScript
  #pragma pack(pop)
  static check_size<sizeof(TestScript), 32 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_TestScriptSizeCheck;
  static_assert(sizeof(TestScript) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TestScript::get_callbackOrder
// Il2CppName: get_callbackOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TestScript::*)()>(&GlobalNamespace::TestScript::get_callbackOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestScript*), "get_callbackOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestScript::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
