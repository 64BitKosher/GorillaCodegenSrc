// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRPlugin/EyeGazesState
#include "GlobalNamespace/OVRPlugin_EyeGazesState.hpp"
// Including type: OVRPermissionsRequester/Permission
#include "GlobalNamespace/OVRPermissionsRequester.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVREyeGaze
  class OVREyeGaze;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVREyeGaze);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVREyeGaze*, "", "OVREyeGaze");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: OVREyeGaze
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVREyeGaze : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVREyeGaze::EyeId
    struct EyeId;
    // Nested type: ::GlobalNamespace::OVREyeGaze::EyeTrackingMode
    struct EyeTrackingMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVREyeGaze/EyeId
    // [TokenAttribute] Offset: FFFFFFFF
    struct EyeId/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EyeId
      constexpr EyeId(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVREyeGaze/EyeId Left
      static constexpr const int Left = 0;
      // Get static field: static public OVREyeGaze/EyeId Left
      static ::GlobalNamespace::OVREyeGaze::EyeId _get_Left();
      // Set static field: static public OVREyeGaze/EyeId Left
      static void _set_Left(::GlobalNamespace::OVREyeGaze::EyeId value);
      // static field const value: static public OVREyeGaze/EyeId Right
      static constexpr const int Right = 1;
      // Get static field: static public OVREyeGaze/EyeId Right
      static ::GlobalNamespace::OVREyeGaze::EyeId _get_Right();
      // Set static field: static public OVREyeGaze/EyeId Right
      static void _set_Right(::GlobalNamespace::OVREyeGaze::EyeId value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVREyeGaze/EyeId
    #pragma pack(pop)
    static check_size<sizeof(OVREyeGaze::EyeId), 0 + sizeof(int)> __GlobalNamespace_OVREyeGaze_EyeIdSizeCheck;
    static_assert(sizeof(OVREyeGaze::EyeId) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVREyeGaze/EyeTrackingMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct EyeTrackingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EyeTrackingMode
      constexpr EyeTrackingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVREyeGaze/EyeTrackingMode HeadSpace
      static constexpr const int HeadSpace = 0;
      // Get static field: static public OVREyeGaze/EyeTrackingMode HeadSpace
      static ::GlobalNamespace::OVREyeGaze::EyeTrackingMode _get_HeadSpace();
      // Set static field: static public OVREyeGaze/EyeTrackingMode HeadSpace
      static void _set_HeadSpace(::GlobalNamespace::OVREyeGaze::EyeTrackingMode value);
      // static field const value: static public OVREyeGaze/EyeTrackingMode WorldSpace
      static constexpr const int WorldSpace = 1;
      // Get static field: static public OVREyeGaze/EyeTrackingMode WorldSpace
      static ::GlobalNamespace::OVREyeGaze::EyeTrackingMode _get_WorldSpace();
      // Set static field: static public OVREyeGaze/EyeTrackingMode WorldSpace
      static void _set_WorldSpace(::GlobalNamespace::OVREyeGaze::EyeTrackingMode value);
      // static field const value: static public OVREyeGaze/EyeTrackingMode TrackingSpace
      static constexpr const int TrackingSpace = 2;
      // Get static field: static public OVREyeGaze/EyeTrackingMode TrackingSpace
      static ::GlobalNamespace::OVREyeGaze::EyeTrackingMode _get_TrackingSpace();
      // Set static field: static public OVREyeGaze/EyeTrackingMode TrackingSpace
      static void _set_TrackingSpace(::GlobalNamespace::OVREyeGaze::EyeTrackingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVREyeGaze/EyeTrackingMode
    #pragma pack(pop)
    static check_size<sizeof(OVREyeGaze::EyeTrackingMode), 0 + sizeof(int)> __GlobalNamespace_OVREyeGaze_EyeTrackingModeSizeCheck;
    static_assert(sizeof(OVREyeGaze::EyeTrackingMode) == 0x4);
    public:
    // public OVREyeGaze/EyeId Eye
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVREyeGaze::EyeId Eye;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVREyeGaze::EyeId) == 0x4);
    // private System.Single <Confidence>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float Confidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ConfidenceThreshold
    // Size: 0x4
    // Offset: 0x28
    float ConfidenceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean ApplyPosition
    // Size: 0x1
    // Offset: 0x2C
    bool ApplyPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ApplyRotation
    // Size: 0x1
    // Offset: 0x2D
    bool ApplyRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ApplyRotation and: currentEyeGazesState
    char __padding4[0x2] = {};
    // private OVRPlugin/EyeGazesState _currentEyeGazesState
    // Size: 0x10
    // Offset: 0x30
    ::GlobalNamespace::OVRPlugin::EyeGazesState currentEyeGazesState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::EyeGazesState) == 0x10);
    // public UnityEngine.Transform ReferenceFrame
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* ReferenceFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public OVREyeGaze/EyeTrackingMode TrackingMode
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::OVREyeGaze::EyeTrackingMode TrackingMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVREyeGaze::EyeTrackingMode) == 0x4);
    // private UnityEngine.Quaternion _initialRotationOffset
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Quaternion initialRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: initialRotationOffset and: viewTransform
    char __padding8[0x4] = {};
    // private UnityEngine.Transform _viewTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* viewTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Action`1<System.String> _onPermissionGranted
    // Size: 0x8
    // Offset: 0x68
    ::System::Action_1<::StringW>* onPermissionGranted;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    public:
    // static field const value: static private OVRPermissionsRequester/Permission EyeTrackingPermission
    static constexpr const int EyeTrackingPermission = 2;
    // Get static field: static private OVRPermissionsRequester/Permission EyeTrackingPermission
    static ::GlobalNamespace::OVRPermissionsRequester::Permission _get_EyeTrackingPermission();
    // Set static field: static private OVRPermissionsRequester/Permission EyeTrackingPermission
    static void _set_EyeTrackingPermission(::GlobalNamespace::OVRPermissionsRequester::Permission value);
    // Get static field: static private System.Int32 _trackingInstanceCount
    static int _get__trackingInstanceCount();
    // Set static field: static private System.Int32 _trackingInstanceCount
    static void _set__trackingInstanceCount(int value);
    // Get instance field reference: public OVREyeGaze/EyeId Eye
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVREyeGaze::EyeId& dyn_Eye();
    // Get instance field reference: private System.Single <Confidence>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Confidence$k__BackingField();
    // Get instance field reference: public System.Single ConfidenceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_ConfidenceThreshold();
    // Get instance field reference: public System.Boolean ApplyPosition
    [[deprecated("Use field access instead!")]] bool& dyn_ApplyPosition();
    // Get instance field reference: public System.Boolean ApplyRotation
    [[deprecated("Use field access instead!")]] bool& dyn_ApplyRotation();
    // Get instance field reference: private OVRPlugin/EyeGazesState _currentEyeGazesState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeGazesState& dyn__currentEyeGazesState();
    // Get instance field reference: public UnityEngine.Transform ReferenceFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ReferenceFrame();
    // Get instance field reference: public OVREyeGaze/EyeTrackingMode TrackingMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVREyeGaze::EyeTrackingMode& dyn_TrackingMode();
    // Get instance field reference: private UnityEngine.Quaternion _initialRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__initialRotationOffset();
    // Get instance field reference: private UnityEngine.Transform _viewTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__viewTransform();
    // Get instance field reference: private System.Action`1<System.String> _onPermissionGranted
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn__onPermissionGranted();
    // public System.Boolean get_EyeTrackingEnabled()
    // Offset: 0x48B9424
    bool get_EyeTrackingEnabled();
    // public System.Single get_Confidence()
    // Offset: 0x48B9474
    float get_Confidence();
    // private System.Void set_Confidence(System.Single value)
    // Offset: 0x48B947C
    void set_Confidence(float value);
    // private System.Void Awake()
    // Offset: 0x48B9484
    void Awake();
    // private System.Void Start()
    // Offset: 0x48B9508
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x48B97A0
    void OnEnable();
    // private System.Void OnPermissionGranted(System.String permissionId)
    // Offset: 0x48B98F0
    void OnPermissionGranted(::StringW permissionId);
    // private System.Boolean StartEyeTracking()
    // Offset: 0x48B9818
    bool StartEyeTracking();
    // private System.Void OnDisable()
    // Offset: 0x48B9950
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x48B99D8
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x48B99E4
    void Update();
    // private UnityEngine.Quaternion CalculateEyeRotation(UnityEngine.Quaternion eyeRotation)
    // Offset: 0x48B9BDC
    ::UnityEngine::Quaternion CalculateEyeRotation(::UnityEngine::Quaternion eyeRotation);
    // private System.Void PrepareHeadDirection()
    // Offset: 0x48B950C
    void PrepareHeadDirection();
    // public System.Void .ctor()
    // Offset: 0x48B9D9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVREyeGaze* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREyeGaze::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVREyeGaze*, creationType>()));
    }
  }; // OVREyeGaze
  #pragma pack(pop)
  static check_size<sizeof(OVREyeGaze), 104 + sizeof(::System::Action_1<::StringW>*)> __GlobalNamespace_OVREyeGazeSizeCheck;
  static_assert(sizeof(OVREyeGaze) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVREyeGaze::EyeTrackingMode, "", "OVREyeGaze/EyeTrackingMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVREyeGaze::EyeId, "", "OVREyeGaze/EyeId");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::get_EyeTrackingEnabled
// Il2CppName: get_EyeTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::get_EyeTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "get_EyeTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::get_Confidence
// Il2CppName: get_Confidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::get_Confidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "get_Confidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::set_Confidence
// Il2CppName: set_Confidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)(float)>(&GlobalNamespace::OVREyeGaze::set_Confidence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "set_Confidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::OnPermissionGranted
// Il2CppName: OnPermissionGranted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)(::StringW)>(&GlobalNamespace::OVREyeGaze::OnPermissionGranted)> {
  static const MethodInfo* get() {
    static auto* permissionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "OnPermissionGranted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permissionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::StartEyeTracking
// Il2CppName: StartEyeTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::StartEyeTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "StartEyeTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::CalculateEyeRotation
// Il2CppName: CalculateEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::OVREyeGaze::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::OVREyeGaze::CalculateEyeRotation)> {
  static const MethodInfo* get() {
    static auto* eyeRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "CalculateEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::PrepareHeadDirection
// Il2CppName: PrepareHeadDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVREyeGaze::*)()>(&GlobalNamespace::OVREyeGaze::PrepareHeadDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVREyeGaze*), "PrepareHeadDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVREyeGaze::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
