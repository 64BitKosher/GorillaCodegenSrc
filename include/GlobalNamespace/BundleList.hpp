// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BundleData
#include "GlobalNamespace/BundleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BundleList
  class BundleList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BundleList);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BundleList*, "", "BundleList");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BundleList
  // [TokenAttribute] Offset: FFFFFFFF
  class BundleList : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 activeBundleIdx
    // Size: 0x4
    // Offset: 0x10
    int activeBundleIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: activeBundleIdx and: data
    char __padding0[0x4] = {};
    // public BundleData[] data
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::BundleData> data;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BundleData>) == 0x8);
    public:
    // Get instance field reference: private System.Int32 activeBundleIdx
    [[deprecated("Use field access instead!")]] int& dyn_activeBundleIdx();
    // Get instance field reference: public BundleData[] data
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BundleData>& dyn_data();
    // public System.Void FromJson(System.String jsonString)
    // Offset: 0x26AA494
    void FromJson(::StringW jsonString);
    // public System.Boolean HasSku(System.String skuName, out System.Int32 idx)
    // Offset: 0x26AA6B4
    bool HasSku(::StringW skuName, ByRef<int> idx);
    // public BundleData ActiveBundle()
    // Offset: 0x26AA740
    ::GlobalNamespace::BundleData ActiveBundle();
    // public System.Void .ctor()
    // Offset: 0x26AA784
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BundleList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BundleList*, creationType>()));
    }
  }; // BundleList
  #pragma pack(pop)
  static check_size<sizeof(BundleList), 24 + sizeof(::ArrayW<::GlobalNamespace::BundleData>)> __GlobalNamespace_BundleListSizeCheck;
  static_assert(sizeof(BundleList) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BundleList::FromJson
// Il2CppName: FromJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BundleList::*)(::StringW)>(&GlobalNamespace::BundleList::FromJson)> {
  static const MethodInfo* get() {
    static auto* jsonString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BundleList*), "FromJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonString});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BundleList::HasSku
// Il2CppName: HasSku
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BundleList::*)(::StringW, ByRef<int>)>(&GlobalNamespace::BundleList::HasSku)> {
  static const MethodInfo* get() {
    static auto* skuName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BundleList*), "HasSku", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skuName, idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BundleList::ActiveBundle
// Il2CppName: ActiveBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BundleData (GlobalNamespace::BundleList::*)()>(&GlobalNamespace::BundleList::ActiveBundle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BundleList*), "ActiveBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BundleList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
