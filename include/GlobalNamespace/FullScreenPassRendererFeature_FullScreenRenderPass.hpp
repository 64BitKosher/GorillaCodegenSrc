// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FullScreenPassRendererFeature
#include "GlobalNamespace/FullScreenPassRendererFeature.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*, "", "FullScreenPassRendererFeature/FullScreenRenderPass");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: FullScreenPassRendererFeature/FullScreenRenderPass
  // [TokenAttribute] Offset: FFFFFFFF
  class FullScreenPassRendererFeature::FullScreenRenderPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData
    class PassData;
    public:
    // private UnityEngine.Material m_PassMaterial
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Material* m_PassMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 m_PassIndex
    // Size: 0x4
    // Offset: 0xE8
    int m_PassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_RequiresColor
    // Size: 0x1
    // Offset: 0xEC
    bool m_RequiresColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsBeforeTransparents
    // Size: 0x1
    // Offset: 0xED
    bool m_IsBeforeTransparents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private FullScreenPassRendererFeature/FullScreenRenderPass/PassData m_PassData
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData* m_PassData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData*) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_CopiedColor
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Rendering::RTHandle* m_CopiedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32 m_BlitTextureShaderID
    static int _get_m_BlitTextureShaderID();
    // Set static field: static private readonly System.Int32 m_BlitTextureShaderID
    static void _set_m_BlitTextureShaderID(int value);
    // Get instance field reference: private UnityEngine.Material m_PassMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_PassMaterial();
    // Get instance field reference: private System.Int32 m_PassIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_PassIndex();
    // Get instance field reference: private System.Boolean m_RequiresColor
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequiresColor();
    // Get instance field reference: private System.Boolean m_IsBeforeTransparents
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsBeforeTransparents();
    // Get instance field reference: private FullScreenPassRendererFeature/FullScreenRenderPass/PassData m_PassData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData*& dyn_m_PassData();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSampler();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_CopiedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CopiedColor();
    // public System.Void Setup(UnityEngine.Material mat, System.Int32 index, System.Boolean requiresColor, System.Boolean isBeforeTransparents, System.String featureName, in UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52699E0
    void Setup(::UnityEngine::Material* mat, int index, bool requiresColor, bool isBeforeTransparents, ::StringW featureName, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void Dispose()
    // Offset: 0x5269BA0
    void Dispose();
    // static private System.Void ExecutePass(FullScreenPassRendererFeature/FullScreenRenderPass/PassData passData, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Rendering.ScriptableRenderContext context)
    // Offset: 0x5269C9C
    static void ExecutePass(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData* passData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Rendering::ScriptableRenderContext> context);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5269BD0
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void .ctor()
    // Offset: 0x52697E8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullScreenPassRendererFeature::FullScreenRenderPass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullScreenPassRendererFeature::FullScreenRenderPass*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5269F7C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // FullScreenPassRendererFeature/FullScreenRenderPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::*)(::UnityEngine::Material*, int, bool, bool, ::StringW, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Setup)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* requiresColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isBeforeTransparents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* featureName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, index, requiresColor, isBeforeTransparents, featureName, renderingData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::*)()>(&GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Rendering::ScriptableRenderContext>)>(&GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* passData = &::il2cpp_utils::GetClassFromName("", "FullScreenPassRendererFeature/FullScreenRenderPass/PassData")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passData, renderingData, context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
