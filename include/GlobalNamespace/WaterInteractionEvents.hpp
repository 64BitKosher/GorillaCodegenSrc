// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WaterInteractionEvents
  class WaterInteractionEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WaterInteractionEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WaterInteractionEvents*, "", "WaterInteractionEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: WaterInteractionEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterInteractionEvents : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Events.UnityEvent onEnterWater
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* onEnterWater;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onExitWater
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* onExitWater;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.SphereCollider waterContactSphere
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::SphereCollider* waterContactSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> overlappingWaterVolumes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>* overlappingWaterVolumes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*) == 0x8);
    // private System.Boolean inWater
    // Size: 0x1
    // Offset: 0x40
    bool inWater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Events.UnityEvent onEnterWater
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onEnterWater();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onExitWater
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onExitWater();
    // Get instance field reference: private UnityEngine.SphereCollider waterContactSphere
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_waterContactSphere();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> overlappingWaterVolumes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*& dyn_overlappingWaterVolumes();
    // Get instance field reference: private System.Boolean inWater
    [[deprecated("Use field access instead!")]] bool& dyn_inWater();
    // private System.Void Update()
    // Offset: 0x27632D4
    void Update();
    // protected System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27635D8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // protected System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x276372C
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x2763820
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterInteractionEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterInteractionEvents*, creationType>()));
    }
  }; // WaterInteractionEvents
  #pragma pack(pop)
  static check_size<sizeof(WaterInteractionEvents), 64 + sizeof(bool)> __GlobalNamespace_WaterInteractionEventsSizeCheck;
  static_assert(sizeof(WaterInteractionEvents) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WaterInteractionEvents::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterInteractionEvents::*)()>(&GlobalNamespace::WaterInteractionEvents::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterInteractionEvents*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterInteractionEvents::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterInteractionEvents::*)(::UnityEngine::Collider*)>(&GlobalNamespace::WaterInteractionEvents::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterInteractionEvents*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterInteractionEvents::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterInteractionEvents::*)(::UnityEngine::Collider*)>(&GlobalNamespace::WaterInteractionEvents::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterInteractionEvents*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterInteractionEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
