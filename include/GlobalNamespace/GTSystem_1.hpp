// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <>c because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTSystem`1<T>
  template<typename T>
  class GTSystem_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::GTSystem_1, "", "GTSystem`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: GTSystem`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  template<typename T>
  class GTSystem_1 : public ::UnityEngine::MonoBehaviour/*, public ::System::Collections::Generic::IReadOnlyList_1<T>*/ {
    public:
    // Nested type: ::GlobalNamespace::GTSystem_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: GTSystem`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = GTSystem_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly GTSystem`1/<>c<T> <>9
      static typename ::GlobalNamespace::GTSystem_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::GTSystem_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename GTSystem_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly GTSystem`1/<>c<T> <>9
      static void _set_$$9(typename ::GlobalNamespace::GTSystem_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename GTSystem_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<T,System.Boolean> <>9__25_0
      static ::System::Func_2<T, bool>* _get_$$9__25_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::_get_$$9__25_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<T, bool>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename GTSystem_1<T>::$$c*>::get(), "<>9__25_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<T,System.Boolean> <>9__25_0
      static void _set_$$9__25_0(::System::Func_2<T, bool>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::_set_$$9__25_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename GTSystem_1<T>::$$c*>::get(), "<>9__25_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename GTSystem_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename GTSystem_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename GTSystem_1<T>::$$c*, creationType>()));
      }
      // System.Boolean <SetSingleton>b__25_0(T x)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $SetSingleton$b__25_0(T x) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::$$c::<SetSingleton>b__25_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetSingleton>b__25_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
      }
    }; // GTSystem`1/<>c
    // Could not write size check! Type: GTSystem`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // protected System.Collections.Generic.List`1<T> _instances
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* instances;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // private System.Boolean _networked
    // Size: 0x1
    // Offset: 0x0
    bool networked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Photon.Pun.PhotonView _photonView
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<T>
    operator ::System::Collections::Generic::IReadOnlyList_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private GTSystem`1<T> gSingleton
    static ::GlobalNamespace::GTSystem_1<T>* _get_gSingleton() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_get_gSingleton");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSystem_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gSingleton"));
    }
    // Autogenerated static field setter
    // Set static field: static private GTSystem`1<T> gSingleton
    static void _set_gSingleton(::GlobalNamespace::GTSystem_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_set_gSingleton");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gSingleton", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Boolean gInitializing
    static bool _get_gInitializing() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_get_gInitializing");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gInitializing"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Boolean gInitializing
    static void _set_gInitializing(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_set_gInitializing");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gInitializing", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Boolean gAppQuitting
    static bool _get_gAppQuitting() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_get_gAppQuitting");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gAppQuitting"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Boolean gAppQuitting
    static void _set_gAppQuitting(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_set_gAppQuitting");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gAppQuitting", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Collections.Generic.HashSet`1<T> gQueueRegister
    static ::System::Collections::Generic::HashSet_1<T>* _get_gQueueRegister() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_get_gQueueRegister");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gQueueRegister"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Collections.Generic.HashSet`1<T> gQueueRegister
    static void _set_gQueueRegister(::System::Collections::Generic::HashSet_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::_set_gQueueRegister");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "gQueueRegister", value));
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Collections.Generic.List`1<T> _instances
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn__instances() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::dyn__instances");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instances"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _networked
    [[deprecated("Use field access instead!")]] bool& dyn__networked() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::dyn__networked");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_networked"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Pun.PhotonView _photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn__photonView() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::dyn__photonView");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_photonView"))->offset;
      return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public Photon.Pun.PhotonView get_photonView()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Pun::PhotonView* get_photonView() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::get_photonView");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_photonView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Pun::PhotonView*, false>(this, ___internal__method);
    }
    // protected System.Void Awake()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Awake() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::Awake");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Tick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Tick() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::Tick");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void OnApplicationQuit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnApplicationQuit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::OnApplicationQuit");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void OnTick(System.Single dt, T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnTick(float dt, T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::OnTick");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dt, instance);
    }
    // private System.Boolean RegisterInstance(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool RegisterInstance(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::RegisterInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, instance);
    }
    // protected System.Void OnRegister(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnRegister(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::OnRegister");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, instance);
    }
    // private System.Boolean UnregisterInstance(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool UnregisterInstance(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::UnregisterInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, instance);
    }
    // protected System.Void OnUnregister(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnUnregister(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::OnUnregister");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, instance);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Int32 System.Collections.Generic.IReadOnlyCollection<T>.get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int System_Collections_Generic_IReadOnlyCollection$T$_get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::System.Collections.Generic.IReadOnlyCollection<T>.get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private T System.Collections.Generic.IReadOnlyList<T>.get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T System_Collections_Generic_IReadOnlyList$T$_get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::System.Collections.Generic.IReadOnlyList<T>.get_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTSystem_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // static public Photon.Pun.PhotonView get_PhotonView()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::Photon::Pun::PhotonView* get_PhotonView() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::get_PhotonView");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "get_PhotonView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Pun::PhotonView*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static protected System.Void SetSingleton(GTSystem`1<T> system)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void SetSingleton(::GlobalNamespace::GTSystem_1<T>* system) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::SetSingleton");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "SetSingleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
    }
    // static public System.Void Register(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Register(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::Register");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, instance);
    }
    // static public System.Void Unregister(T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Unregister(T instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::Unregister");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, instance);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTSystem_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTSystem_1<T>*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSystem_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GTSystem_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // GTSystem`1
  // Could not write size check! Type: GTSystem`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
