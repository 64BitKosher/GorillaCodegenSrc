// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AmbientSoundRandomizer
  class AmbientSoundRandomizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AmbientSoundRandomizer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AmbientSoundRandomizer*, "", "AmbientSoundRandomizer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AmbientSoundRandomizer
  // [TokenAttribute] Offset: FFFFFFFF
  class AmbientSoundRandomizer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.AudioSource[] audioSources
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::AudioSource*> audioSources;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // private UnityEngine.AudioClip[] audioClips
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::AudioClip*> audioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private System.Single baseTime
    // Size: 0x4
    // Offset: 0x30
    float baseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single randomModifier
    // Size: 0x4
    // Offset: 0x34
    float randomModifier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timer
    // Size: 0x4
    // Offset: 0x38
    float timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timerTarget
    // Size: 0x4
    // Offset: 0x3C
    float timerTarget;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.AudioSource[] audioSources
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_audioSources();
    // Get instance field reference: private UnityEngine.AudioClip[] audioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_audioClips();
    // Get instance field reference: private System.Single baseTime
    [[deprecated("Use field access instead!")]] float& dyn_baseTime();
    // Get instance field reference: private System.Single randomModifier
    [[deprecated("Use field access instead!")]] float& dyn_randomModifier();
    // Get instance field reference: private System.Single timer
    [[deprecated("Use field access instead!")]] float& dyn_timer();
    // Get instance field reference: private System.Single timerTarget
    [[deprecated("Use field access instead!")]] float& dyn_timerTarget();
    // private System.Void Button_Cache()
    // Offset: 0x27728B4
    void Button_Cache();
    // private System.Void Awake()
    // Offset: 0x277290C
    void Awake();
    // private System.Void Update()
    // Offset: 0x2772974
    void Update();
    // private System.Void SetTarget()
    // Offset: 0x2772940
    void SetTarget();
    // public System.Void .ctor()
    // Offset: 0x2772A80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmbientSoundRandomizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AmbientSoundRandomizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmbientSoundRandomizer*, creationType>()));
    }
  }; // AmbientSoundRandomizer
  #pragma pack(pop)
  static check_size<sizeof(AmbientSoundRandomizer), 60 + sizeof(float)> __GlobalNamespace_AmbientSoundRandomizerSizeCheck;
  static_assert(sizeof(AmbientSoundRandomizer) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AmbientSoundRandomizer::Button_Cache
// Il2CppName: Button_Cache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmbientSoundRandomizer::*)()>(&GlobalNamespace::AmbientSoundRandomizer::Button_Cache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmbientSoundRandomizer*), "Button_Cache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmbientSoundRandomizer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmbientSoundRandomizer::*)()>(&GlobalNamespace::AmbientSoundRandomizer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmbientSoundRandomizer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmbientSoundRandomizer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmbientSoundRandomizer::*)()>(&GlobalNamespace::AmbientSoundRandomizer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmbientSoundRandomizer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmbientSoundRandomizer::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmbientSoundRandomizer::*)()>(&GlobalNamespace::AmbientSoundRandomizer::SetTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmbientSoundRandomizer*), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmbientSoundRandomizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
