// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HalloweenGhostChaser
#include "GlobalNamespace/HalloweenGhostChaser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0*, "", "HalloweenGhostChaser/<>c__DisplayClass73_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: HalloweenGhostChaser/<>c__DisplayClass73_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class HalloweenGhostChaser::$$c__DisplayClass73_0 : public ::Il2CppObject {
    public:
    public:
    // public HalloweenGhostChaser <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::HalloweenGhostChaser* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HalloweenGhostChaser*) == 0x8);
    // public System.Int32 randomTarget
    // Size: 0x4
    // Offset: 0x18
    int randomTarget;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public HalloweenGhostChaser <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HalloweenGhostChaser*& dyn_$$4__this();
    // Get instance field reference: public System.Int32 randomTarget
    [[deprecated("Use field access instead!")]] int& dyn_randomTarget();
    // public System.Void .ctor()
    // Offset: 0x272489C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HalloweenGhostChaser::$$c__DisplayClass73_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HalloweenGhostChaser::$$c__DisplayClass73_0*, creationType>()));
    }
    // System.Boolean <ChooseRandomTarget>b__0(VRRig x)
    // Offset: 0x2725450
    bool $ChooseRandomTarget$b__0(::GlobalNamespace::VRRig* x);
  }; // HalloweenGhostChaser/<>c__DisplayClass73_0
  #pragma pack(pop)
  static check_size<sizeof(HalloweenGhostChaser::$$c__DisplayClass73_0), 24 + sizeof(int)> __GlobalNamespace_HalloweenGhostChaser_$$c__DisplayClass73_0SizeCheck;
  static_assert(sizeof(HalloweenGhostChaser::$$c__DisplayClass73_0) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0::$ChooseRandomTarget$b__0
// Il2CppName: <ChooseRandomTarget>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0::$ChooseRandomTarget$b__0)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenGhostChaser::$$c__DisplayClass73_0*), "<ChooseRandomTarget>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
