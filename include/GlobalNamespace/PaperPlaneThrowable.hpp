// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PhotonEvent
  class PhotonEvent;
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PaperPlaneThrowable
  class PaperPlaneThrowable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PaperPlaneThrowable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PaperPlaneThrowable*, "", "PaperPlaneThrowable");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: PaperPlaneThrowable
  // [TokenAttribute] Offset: FFFFFFFF
  class PaperPlaneThrowable : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.GameObject _projectilePrefab
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::GameObject* projectilePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single minThrowSpeed
    // Size: 0x4
    // Offset: 0x2E0
    float minThrowSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _lastWorldPos
    // Size: 0xC
    // Offset: 0x2E4
    ::UnityEngine::Vector3 lastWorldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _lastWorldRot
    // Size: 0x10
    // Offset: 0x2F0
    ::UnityEngine::Quaternion lastWorldRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _itemWorldVel
    // Size: 0xC
    // Offset: 0x300
    ::UnityEngine::Vector3 itemWorldVel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _itemWorldAngVel
    // Size: 0xC
    // Offset: 0x30C
    ::UnityEngine::Vector3 itemWorldAngVel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get static field: static private UnityEngine.Camera _playerView
    static ::UnityEngine::Camera* _get__playerView();
    // Set static field: static private UnityEngine.Camera _playerView
    static void _set__playerView(::UnityEngine::Camera* value);
    // Get static field: static private PhotonEvent gLaunchRPC
    static ::GlobalNamespace::PhotonEvent* _get_gLaunchRPC();
    // Set static field: static private PhotonEvent gLaunchRPC
    static void _set_gLaunchRPC(::GlobalNamespace::PhotonEvent* value);
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.GameObject _projectilePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__projectilePrefab();
    // Get instance field reference: private System.Single minThrowSpeed
    [[deprecated("Use field access instead!")]] float& dyn_minThrowSpeed();
    // Get instance field reference: private UnityEngine.Vector3 _lastWorldPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastWorldPos();
    // Get instance field reference: private UnityEngine.Quaternion _lastWorldRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__lastWorldRot();
    // Get instance field reference: private UnityEngine.Vector3 _itemWorldVel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__itemWorldVel();
    // Get instance field reference: private UnityEngine.Vector3 _itemWorldAngVel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__itemWorldAngVel();
    // private System.Void OnLaunchRPC(System.Int32 sender, System.Int32 receiver, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x26D6B38
    void OnLaunchRPC(int sender, int receiver, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // static private System.Int32 FetchViewID(PaperPlaneThrowable ppt)
    // Offset: 0x26D6F5C
    static int FetchViewID(::GlobalNamespace::PaperPlaneThrowable* ppt);
    // private System.Void LaunchProjectile(UnityEngine.Vector3 launchPos, UnityEngine.Quaternion launchRot, UnityEngine.Vector3 releaseVel)
    // Offset: 0x26D712C
    void LaunchProjectile(::UnityEngine::Vector3 launchPos, ::UnityEngine::Quaternion launchRot, ::UnityEngine::Vector3 releaseVel);
    // private System.Void OnProjectileHit(UnityEngine.Vector3 endPoint)
    // Offset: 0x26D7C40
    void OnProjectileHit(::UnityEngine::Vector3 endPoint);
    // static private UnityEngine.Vector3 CalcAngularVelocity(UnityEngine.Quaternion from, UnityEngine.Quaternion to, System.Single dt)
    // Offset: 0x26D7D98
    static ::UnityEngine::Vector3 CalcAngularVelocity(::UnityEngine::Quaternion from, ::UnityEngine::Quaternion to, float dt);
    // public override System.Void OnEnable()
    // Offset: 0x26D7380
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26D7560
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // protected override System.Void Start()
    // Offset: 0x26D7654
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x26D771C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26D7770
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x26D7C60
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // public override System.Void DropItem()
    // Offset: 0x26D7EB8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::DropItem()
    void DropItem();
    // public System.Void .ctor()
    // Offset: 0x26D7EC0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PaperPlaneThrowable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PaperPlaneThrowable*, creationType>()));
    }
  }; // PaperPlaneThrowable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnLaunchRPC
// Il2CppName: OnLaunchRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::PaperPlaneThrowable::OnLaunchRPC)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* receiver = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnLaunchRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, receiver, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::FetchViewID
// Il2CppName: FetchViewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::PaperPlaneThrowable*)>(&GlobalNamespace::PaperPlaneThrowable::FetchViewID)> {
  static const MethodInfo* get() {
    static auto* ppt = &::il2cpp_utils::GetClassFromName("", "PaperPlaneThrowable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "FetchViewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ppt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::LaunchProjectile
// Il2CppName: LaunchProjectile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&GlobalNamespace::PaperPlaneThrowable::LaunchProjectile)> {
  static const MethodInfo* get() {
    static auto* launchPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* launchRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* releaseVel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "LaunchProjectile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{launchPos, launchRot, releaseVel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnProjectileHit
// Il2CppName: OnProjectileHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)(::UnityEngine::Vector3)>(&GlobalNamespace::PaperPlaneThrowable::OnProjectileHit)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnProjectileHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::CalcAngularVelocity
// Il2CppName: CalcAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float)>(&GlobalNamespace::PaperPlaneThrowable::CalcAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "CalcAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, dt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)()>(&GlobalNamespace::PaperPlaneThrowable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)()>(&GlobalNamespace::PaperPlaneThrowable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)()>(&GlobalNamespace::PaperPlaneThrowable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::PaperPlaneThrowable::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PaperPlaneThrowable::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::PaperPlaneThrowable::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)()>(&GlobalNamespace::PaperPlaneThrowable::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::DropItem
// Il2CppName: DropItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PaperPlaneThrowable::*)()>(&GlobalNamespace::PaperPlaneThrowable::DropItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PaperPlaneThrowable*), "DropItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PaperPlaneThrowable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
