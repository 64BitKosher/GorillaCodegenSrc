// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GorillaTriggerColliderHandIndicator
  class GorillaTriggerColliderHandIndicator;
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Skipping declaration: Matrix4x4 because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OneStringGuitar
  class OneStringGuitar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OneStringGuitar);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OneStringGuitar*, "", "OneStringGuitar");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: OneStringGuitar
  // [TokenAttribute] Offset: FFFFFFFF
  class OneStringGuitar : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::OneStringGuitar::GuitarStates
    struct GuitarStates;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OneStringGuitar/GuitarStates
    // [TokenAttribute] Offset: FFFFFFFF
    struct GuitarStates/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GuitarStates
      constexpr GuitarStates(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OneStringGuitar/GuitarStates Club
      static constexpr const int Club = 1;
      // Get static field: static public OneStringGuitar/GuitarStates Club
      static ::GlobalNamespace::OneStringGuitar::GuitarStates _get_Club();
      // Set static field: static public OneStringGuitar/GuitarStates Club
      static void _set_Club(::GlobalNamespace::OneStringGuitar::GuitarStates value);
      // static field const value: static public OneStringGuitar/GuitarStates HeldReverseGrip
      static constexpr const int HeldReverseGrip = 2;
      // Get static field: static public OneStringGuitar/GuitarStates HeldReverseGrip
      static ::GlobalNamespace::OneStringGuitar::GuitarStates _get_HeldReverseGrip();
      // Set static field: static public OneStringGuitar/GuitarStates HeldReverseGrip
      static void _set_HeldReverseGrip(::GlobalNamespace::OneStringGuitar::GuitarStates value);
      // static field const value: static public OneStringGuitar/GuitarStates Playing
      static constexpr const int Playing = 4;
      // Get static field: static public OneStringGuitar/GuitarStates Playing
      static ::GlobalNamespace::OneStringGuitar::GuitarStates _get_Playing();
      // Set static field: static public OneStringGuitar/GuitarStates Playing
      static void _set_Playing(::GlobalNamespace::OneStringGuitar::GuitarStates value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OneStringGuitar/GuitarStates
    #pragma pack(pop)
    static check_size<sizeof(OneStringGuitar::GuitarStates), 0 + sizeof(int)> __GlobalNamespace_OneStringGuitar_GuitarStatesSizeCheck;
    static_assert(sizeof(OneStringGuitar::GuitarStates) == 0x4);
    public:
    // public UnityEngine.Vector3 chestOffsetLeft
    // Size: 0xC
    // Offset: 0x2CC
    ::UnityEngine::Vector3 chestOffsetLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 chestOffsetRight
    // Size: 0xC
    // Offset: 0x2D8
    ::UnityEngine::Vector3 chestOffsetRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion holdingOffsetRotationLeft
    // Size: 0x10
    // Offset: 0x2E4
    ::UnityEngine::Quaternion holdingOffsetRotationLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion holdingOffsetRotationRight
    // Size: 0x10
    // Offset: 0x2F4
    ::UnityEngine::Quaternion holdingOffsetRotationRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion chestRotationOffset
    // Size: 0x10
    // Offset: 0x304
    ::UnityEngine::Quaternion chestRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Collider currentChestCollider
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::Collider* currentChestCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public UnityEngine.Collider chestColliderLeft
    // Size: 0x8
    // Offset: 0x320
    ::UnityEngine::Collider* chestColliderLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public UnityEngine.Collider chestColliderRight
    // Size: 0x8
    // Offset: 0x328
    ::UnityEngine::Collider* chestColliderRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x330
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x338
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Transform parentHand
    // Size: 0x8
    // Offset: 0x340
    ::UnityEngine::Transform* parentHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform parentHandLeft
    // Size: 0x8
    // Offset: 0x348
    ::UnityEngine::Transform* parentHandLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform parentHandRight
    // Size: 0x8
    // Offset: 0x350
    ::UnityEngine::Transform* parentHandRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single unsnapDistance
    // Size: 0x4
    // Offset: 0x358
    float unsnapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single snapDistance
    // Size: 0x4
    // Offset: 0x35C
    float snapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 startPositionLeft
    // Size: 0xC
    // Offset: 0x360
    ::UnityEngine::Vector3 startPositionLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion startQuatLeft
    // Size: 0x10
    // Offset: 0x36C
    ::UnityEngine::Quaternion startQuatLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 reverseGripPositionLeft
    // Size: 0xC
    // Offset: 0x37C
    ::UnityEngine::Vector3 reverseGripPositionLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion reverseGripQuatLeft
    // Size: 0x10
    // Offset: 0x388
    ::UnityEngine::Quaternion reverseGripQuatLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 startPositionRight
    // Size: 0xC
    // Offset: 0x398
    ::UnityEngine::Vector3 startPositionRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion startQuatRight
    // Size: 0x10
    // Offset: 0x3A4
    ::UnityEngine::Quaternion startQuatRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 reverseGripPositionRight
    // Size: 0xC
    // Offset: 0x3B4
    ::UnityEngine::Vector3 reverseGripPositionRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion reverseGripQuatRight
    // Size: 0x10
    // Offset: 0x3C0
    ::UnityEngine::Quaternion reverseGripQuatRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Single angleLerpSnap
    // Size: 0x4
    // Offset: 0x3D0
    float angleLerpSnap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single vectorLerpSnap
    // Size: 0x4
    // Offset: 0x3D4
    float vectorLerpSnap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean angleSnapped
    // Size: 0x1
    // Offset: 0x3D8
    bool angleSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean positionSnapped
    // Size: 0x1
    // Offset: 0x3D9
    bool positionSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Transform chestTouch
    // Size: 0x8
    // Offset: 0x3E0
    ::UnityEngine::Transform* chestTouch;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 collidersHitCount
    // Size: 0x4
    // Offset: 0x3E8
    int collidersHitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Collider[] collidersHit
    // Size: 0x8
    // Offset: 0x3F0
    ::ArrayW<::UnityEngine::Collider*> collidersHit;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.RaycastHit[] raycastHits
    // Size: 0x8
    // Offset: 0x3F8
    ::ArrayW<::UnityEngine::RaycastHit> raycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList
    // Size: 0x8
    // Offset: 0x400
    ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>* raycastHitList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*) == 0x8);
    // private UnityEngine.RaycastHit nullHit
    // Size: 0x2C
    // Offset: 0x408
    ::UnityEngine::RaycastHit nullHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // public UnityEngine.Collider[] collidersToBeIn
    // Size: 0x8
    // Offset: 0x438
    ::ArrayW<::UnityEngine::Collider*> collidersToBeIn;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public UnityEngine.LayerMask interactableMask
    // Size: 0x4
    // Offset: 0x440
    ::UnityEngine::LayerMask interactableMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Int32 currentFretIndex
    // Size: 0x4
    // Offset: 0x444
    int currentFretIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastFretIndex
    // Size: 0x4
    // Offset: 0x448
    int lastFretIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Collider[] frets
    // Size: 0x8
    // Offset: 0x450
    ::ArrayW<::UnityEngine::Collider*> frets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> fretsList
    // Size: 0x8
    // Offset: 0x458
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* fretsList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public UnityEngine.AudioClip[] audioClips
    // Size: 0x8
    // Offset: 0x460
    ::ArrayW<::UnityEngine::AudioClip*> audioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private GorillaTriggerColliderHandIndicator leftHandIndicator
    // Size: 0x8
    // Offset: 0x468
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* leftHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator rightHandIndicator
    // Size: 0x8
    // Offset: 0x470
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* rightHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator fretHandIndicator
    // Size: 0x8
    // Offset: 0x478
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* fretHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator strumHandIndicator
    // Size: 0x8
    // Offset: 0x480
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* strumHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private System.Single sphereRadius
    // Size: 0x4
    // Offset: 0x488
    float sphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean anyHit
    // Size: 0x1
    // Offset: 0x48C
    bool anyHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean handIn
    // Size: 0x1
    // Offset: 0x48D
    bool handIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 spherecastSweep
    // Size: 0xC
    // Offset: 0x490
    ::UnityEngine::Vector3 spherecastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Collider strumCollider
    // Size: 0x8
    // Offset: 0x4A0
    ::UnityEngine::Collider* strumCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public System.Single maxVolume
    // Size: 0x4
    // Offset: 0x4A8
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVolume
    // Size: 0x4
    // Offset: 0x4AC
    float minVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxVelocity
    // Size: 0x4
    // Offset: 0x4B0
    float maxVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> strumList
    // Size: 0x8
    // Offset: 0x4B8
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* strumList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public System.Int32 selfInstrumentIndex
    // Size: 0x4
    // Offset: 0x4C0
    int selfInstrumentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private OneStringGuitar/GuitarStates lastState
    // Size: 0x4
    // Offset: 0x4C4
    ::GlobalNamespace::OneStringGuitar::GuitarStates lastState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OneStringGuitar::GuitarStates) == 0x4);
    // private UnityEngine.Vector3 startingLeftChestOffset
    // Size: 0xC
    // Offset: 0x4C8
    ::UnityEngine::Vector3 startingLeftChestOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 startingRightChestOffset
    // Size: 0xC
    // Offset: 0x4D4
    ::UnityEngine::Vector3 startingRightChestOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single startingUnsnapDistance
    // Size: 0x4
    // Offset: 0x4E0
    float startingUnsnapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 chestOffsetLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_chestOffsetLeft();
    // Get instance field reference: public UnityEngine.Vector3 chestOffsetRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_chestOffsetRight();
    // Get instance field reference: public UnityEngine.Quaternion holdingOffsetRotationLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_holdingOffsetRotationLeft();
    // Get instance field reference: public UnityEngine.Quaternion holdingOffsetRotationRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_holdingOffsetRotationRight();
    // Get instance field reference: public UnityEngine.Quaternion chestRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_chestRotationOffset();
    // Get instance field reference: public UnityEngine.Collider currentChestCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_currentChestCollider();
    // Get instance field reference: public UnityEngine.Collider chestColliderLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_chestColliderLeft();
    // Get instance field reference: public UnityEngine.Collider chestColliderRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_chestColliderRight();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.Transform parentHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parentHand();
    // Get instance field reference: private UnityEngine.Transform parentHandLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parentHandLeft();
    // Get instance field reference: private UnityEngine.Transform parentHandRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parentHandRight();
    // Get instance field reference: public System.Single unsnapDistance
    [[deprecated("Use field access instead!")]] float& dyn_unsnapDistance();
    // Get instance field reference: public System.Single snapDistance
    [[deprecated("Use field access instead!")]] float& dyn_snapDistance();
    // Get instance field reference: public UnityEngine.Vector3 startPositionLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPositionLeft();
    // Get instance field reference: public UnityEngine.Quaternion startQuatLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_startQuatLeft();
    // Get instance field reference: public UnityEngine.Vector3 reverseGripPositionLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_reverseGripPositionLeft();
    // Get instance field reference: public UnityEngine.Quaternion reverseGripQuatLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_reverseGripQuatLeft();
    // Get instance field reference: public UnityEngine.Vector3 startPositionRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPositionRight();
    // Get instance field reference: public UnityEngine.Quaternion startQuatRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_startQuatRight();
    // Get instance field reference: public UnityEngine.Vector3 reverseGripPositionRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_reverseGripPositionRight();
    // Get instance field reference: public UnityEngine.Quaternion reverseGripQuatRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_reverseGripQuatRight();
    // Get instance field reference: public System.Single angleLerpSnap
    [[deprecated("Use field access instead!")]] float& dyn_angleLerpSnap();
    // Get instance field reference: public System.Single vectorLerpSnap
    [[deprecated("Use field access instead!")]] float& dyn_vectorLerpSnap();
    // Get instance field reference: private System.Boolean angleSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_angleSnapped();
    // Get instance field reference: private System.Boolean positionSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_positionSnapped();
    // Get instance field reference: public UnityEngine.Transform chestTouch
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestTouch();
    // Get instance field reference: private System.Int32 collidersHitCount
    [[deprecated("Use field access instead!")]] int& dyn_collidersHitCount();
    // Get instance field reference: private UnityEngine.Collider[] collidersHit
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersHit();
    // Get instance field reference: private UnityEngine.RaycastHit[] raycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_raycastHits();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& dyn_raycastHitList();
    // Get instance field reference: private UnityEngine.RaycastHit nullHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_nullHit();
    // Get instance field reference: public UnityEngine.Collider[] collidersToBeIn
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersToBeIn();
    // Get instance field reference: public UnityEngine.LayerMask interactableMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_interactableMask();
    // Get instance field reference: public System.Int32 currentFretIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentFretIndex();
    // Get instance field reference: public System.Int32 lastFretIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastFretIndex();
    // Get instance field reference: public UnityEngine.Collider[] frets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_frets();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> fretsList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_fretsList();
    // Get instance field reference: public UnityEngine.AudioClip[] audioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_audioClips();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator leftHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_leftHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator rightHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_rightHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator fretHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_fretHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator strumHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_strumHandIndicator();
    // Get instance field reference: private System.Single sphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereRadius();
    // Get instance field reference: private System.Boolean anyHit
    [[deprecated("Use field access instead!")]] bool& dyn_anyHit();
    // Get instance field reference: private System.Boolean handIn
    [[deprecated("Use field access instead!")]] bool& dyn_handIn();
    // Get instance field reference: private UnityEngine.Vector3 spherecastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spherecastSweep();
    // Get instance field reference: public UnityEngine.Collider strumCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_strumCollider();
    // Get instance field reference: public System.Single maxVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxVolume();
    // Get instance field reference: public System.Single minVolume
    [[deprecated("Use field access instead!")]] float& dyn_minVolume();
    // Get instance field reference: public System.Single maxVelocity
    [[deprecated("Use field access instead!")]] float& dyn_maxVelocity();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> strumList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_strumList();
    // Get instance field reference: public System.Int32 selfInstrumentIndex
    [[deprecated("Use field access instead!")]] int& dyn_selfInstrumentIndex();
    // Get instance field reference: private OneStringGuitar/GuitarStates lastState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OneStringGuitar::GuitarStates& dyn_lastState();
    // Get instance field reference: private UnityEngine.Vector3 startingLeftChestOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingLeftChestOffset();
    // Get instance field reference: private UnityEngine.Vector3 startingRightChestOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingRightChestOffset();
    // Get instance field reference: private System.Single startingUnsnapDistance
    [[deprecated("Use field access instead!")]] float& dyn_startingUnsnapDistance();
    // private UnityEngine.Collider _GetChestColliderByPath(VRRig vrRig, System.String chestColliderLeftPath)
    // Offset: 0x26B8EF4
    ::UnityEngine::Collider* _GetChestColliderByPath(::GlobalNamespace::VRRig* vrRig, ::StringW chestColliderLeftPath);
    // private System.Boolean Unsnap()
    // Offset: 0x26BA264
    bool Unsnap();
    // private System.Void CheckFretFinger(UnityEngine.Transform finger)
    // Offset: 0x26BA338
    void CheckFretFinger(::UnityEngine::Transform* finger);
    // public System.Void UpdateNonPlayingPosition(UnityEngine.Vector3 positionTarget, UnityEngine.Quaternion rotationTarget)
    // Offset: 0x26B9FB8
    void UpdateNonPlayingPosition(::UnityEngine::Vector3 positionTarget, ::UnityEngine::Quaternion rotationTarget);
    // public System.Void GenerateVectorOffsetLeft()
    // Offset: 0x26BA714
    void GenerateVectorOffsetLeft();
    // public System.Void GenerateVectorOffsetRight()
    // Offset: 0x26BA7F0
    void GenerateVectorOffsetRight();
    // public System.Void GenerateReverseGripOffsetLeft()
    // Offset: 0x26BA8CC
    void GenerateReverseGripOffsetLeft();
    // public System.Void GenerateClubOffsetLeft()
    // Offset: 0x26BA928
    void GenerateClubOffsetLeft();
    // public System.Void GenerateReverseGripOffsetRight()
    // Offset: 0x26BA984
    void GenerateReverseGripOffsetRight();
    // public System.Void GenerateClubOffsetRight()
    // Offset: 0x26BA9E0
    void GenerateClubOffsetRight();
    // public System.Void TestClubPositionRight()
    // Offset: 0x26BAA3C
    void TestClubPositionRight();
    // public System.Void TestReverseGripPositionRight()
    // Offset: 0x26BAA94
    void TestReverseGripPositionRight();
    // public System.Void TestPlayingPositionRight()
    // Offset: 0x26BAAEC
    void TestPlayingPositionRight();
    // public override UnityEngine.Matrix4x4 GetDefaultTransformationMatrix()
    // Offset: 0x26B8AD4
    // Implemented from: TransferrableObject
    // Base method: UnityEngine.Matrix4x4 TransferrableObject::GetDefaultTransformationMatrix()
    ::UnityEngine::Matrix4x4 GetDefaultTransformationMatrix();
    // public override System.Void OnSpawn()
    // Offset: 0x26B8B2C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public override System.Void OnEnable()
    // Offset: 0x26B90C8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26B925C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26B9284
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26B92D8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public override System.Void PlayNote(System.Int32 note, System.Single volume)
    // Offset: 0x26BA5E8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::PlayNote(System.Int32 note, System.Single volume)
    void PlayNote(int note, float volume);
    // public override System.Boolean CanDeactivate()
    // Offset: 0x26BA690
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanDeactivate()
    bool CanDeactivate();
    // public override System.Boolean CanActivate()
    // Offset: 0x26BA6D4
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanActivate()
    bool CanActivate();
    // public override System.Void OnActivate()
    // Offset: 0x26BA6E8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public System.Void .ctor()
    // Offset: 0x26BAC84
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OneStringGuitar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OneStringGuitar*, creationType>()));
    }
  }; // OneStringGuitar
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OneStringGuitar::GuitarStates, "", "OneStringGuitar/GuitarStates");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::_GetChestColliderByPath
// Il2CppName: _GetChestColliderByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (GlobalNamespace::OneStringGuitar::*)(::GlobalNamespace::VRRig*, ::StringW)>(&GlobalNamespace::OneStringGuitar::_GetChestColliderByPath)> {
  static const MethodInfo* get() {
    static auto* vrRig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* chestColliderLeftPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "_GetChestColliderByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vrRig, chestColliderLeftPath});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::Unsnap
// Il2CppName: Unsnap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::Unsnap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "Unsnap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CheckFretFinger
// Il2CppName: CheckFretFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OneStringGuitar::CheckFretFinger)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CheckFretFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition
// Il2CppName: UpdateNonPlayingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition)> {
  static const MethodInfo* get() {
    static auto* positionTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotationTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "UpdateNonPlayingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionTarget, rotationTarget});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateVectorOffsetLeft
// Il2CppName: GenerateVectorOffsetLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateVectorOffsetLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateVectorOffsetLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateVectorOffsetRight
// Il2CppName: GenerateVectorOffsetRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateVectorOffsetRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateVectorOffsetRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetLeft
// Il2CppName: GenerateReverseGripOffsetLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateReverseGripOffsetLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateClubOffsetLeft
// Il2CppName: GenerateClubOffsetLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateClubOffsetLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateClubOffsetLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetRight
// Il2CppName: GenerateReverseGripOffsetRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateReverseGripOffsetRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateClubOffsetRight
// Il2CppName: GenerateClubOffsetRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateClubOffsetRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateClubOffsetRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::TestClubPositionRight
// Il2CppName: TestClubPositionRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::TestClubPositionRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "TestClubPositionRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::TestReverseGripPositionRight
// Il2CppName: TestReverseGripPositionRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::TestReverseGripPositionRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "TestReverseGripPositionRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::TestPlayingPositionRight
// Il2CppName: TestPlayingPositionRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::TestPlayingPositionRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "TestPlayingPositionRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GetDefaultTransformationMatrix
// Il2CppName: GetDefaultTransformationMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GetDefaultTransformationMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GetDefaultTransformationMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::OneStringGuitar::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(int, float)>(&GlobalNamespace::OneStringGuitar::PlayNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
