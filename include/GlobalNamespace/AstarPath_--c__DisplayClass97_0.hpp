// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AstarPath
#include "GlobalNamespace/AstarPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath::$$c__DisplayClass97_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::$$c__DisplayClass97_0*, "", "AstarPath/<>c__DisplayClass97_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath/<>c__DisplayClass97_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class AstarPath::$$c__DisplayClass97_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean ignoreSearchTree
    // Size: 0x1
    // Offset: 0x10
    bool ignoreSearchTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreSearchTree and: $$4__this
    char __padding0[0x7] = {};
    // public AstarPath <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AstarPath* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // public System.Action`1<Pathfinding.GraphNode> <>9__0
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::Pathfinding::GraphNode*>* $$9__0;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::GraphNode*>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean ignoreSearchTree
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreSearchTree();
    // Get instance field reference: public AstarPath <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_$$4__this();
    // Get instance field reference: public System.Action`1<Pathfinding.GraphNode> <>9__0
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::GraphNode*>*& dyn_$$9__0();
    // public System.Void .ctor()
    // Offset: 0x2983638
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath::$$c__DisplayClass97_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::$$c__DisplayClass97_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath::$$c__DisplayClass97_0*, creationType>()));
    }
    // System.Void <RecalculateDebugLimits>b__0(Pathfinding.GraphNode node)
    // Offset: 0x2986D04
    void $RecalculateDebugLimits$b__0(::Pathfinding::GraphNode* node);
  }; // AstarPath/<>c__DisplayClass97_0
  #pragma pack(pop)
  static check_size<sizeof(AstarPath::$$c__DisplayClass97_0), 32 + sizeof(::System::Action_1<::Pathfinding::GraphNode*>*)> __GlobalNamespace_AstarPath_$$c__DisplayClass97_0SizeCheck;
  static_assert(sizeof(AstarPath::$$c__DisplayClass97_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass97_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass97_0::$RecalculateDebugLimits$b__0
// Il2CppName: <RecalculateDebugLimits>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::$$c__DisplayClass97_0::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::$$c__DisplayClass97_0::$RecalculateDebugLimits$b__0)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$$c__DisplayClass97_0*), "<RecalculateDebugLimits>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
