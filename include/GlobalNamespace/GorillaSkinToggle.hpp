// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GorillaSkin
  class GorillaSkin;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaSkinToggle
  class GorillaSkinToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaSkinToggle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaSkinToggle*, "", "GorillaSkinToggle");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: GorillaSkinToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaSkinToggle : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // private VRRig _rig
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::VRRig* rig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private GorillaSkin _skin
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GorillaSkin* skin;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSkin*) == 0x8);
    // private GorillaSkin _default
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GorillaSkin* _default;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSkin*) == 0x8);
    // private System.Boolean _applied
    // Size: 0x1
    // Offset: 0x38
    bool applied;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x39
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: private VRRig _rig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn__rig();
    // Get instance field reference: private GorillaSkin _skin
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& dyn__skin();
    // Get instance field reference: private GorillaSkin _default
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& dyn__default();
    // Get instance field reference: private System.Boolean _applied
    [[deprecated("Use field access instead!")]] bool& dyn__applied();
    // Get instance field reference: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField();
    // public System.Boolean get_applied()
    // Offset: 0x278A7E0
    bool get_applied();
    // private System.Boolean GorillaTag.ISpawnable.get_IsSpawned()
    // Offset: 0x278A7E8
    bool GorillaTag_ISpawnable_get_IsSpawned();
    // private System.Void GorillaTag.ISpawnable.set_IsSpawned(System.Boolean value)
    // Offset: 0x278A7F0
    void GorillaTag_ISpawnable_set_IsSpawned(bool value);
    // private System.Void GorillaTag.ISpawnable.OnSpawn()
    // Offset: 0x278A7FC
    void GorillaTag_ISpawnable_OnSpawn();
    // private System.Void GorillaTag.ISpawnable.OnDespawn()
    // Offset: 0x278A858
    void GorillaTag_ISpawnable_OnDespawn();
    // private System.Void OnEnable()
    // Offset: 0x278A85C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x278A8AC
    void OnDisable();
    // public System.Void Apply()
    // Offset: 0x278A884
    void Apply();
    // public System.Void Remove()
    // Offset: 0x278A90C
    void Remove();
    // public System.Void .ctor()
    // Offset: 0x278AA2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaSkinToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaSkinToggle*, creationType>()));
    }
  }; // GorillaSkinToggle
  #pragma pack(pop)
  static check_size<sizeof(GorillaSkinToggle), 57 + sizeof(bool)> __GlobalNamespace_GorillaSkinToggleSizeCheck;
  static_assert(sizeof(GorillaSkinToggle) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::get_applied
// Il2CppName: get_applied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::get_applied)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "get_applied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_get_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "GorillaTag.ISpawnable.get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_set_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)(bool)>(&GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "GorillaTag.ISpawnable.set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnSpawn
// Il2CppName: GorillaTag.ISpawnable.OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "GorillaTag.ISpawnable.OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnDespawn
// Il2CppName: GorillaTag.ISpawnable.OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "GorillaTag.ISpawnable.OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSkinToggle::*)()>(&GlobalNamespace::GorillaSkinToggle::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkinToggle*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkinToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
