// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTBitOps
  class GTBitOps;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTBitOps);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTBitOps*, "", "GTBitOps");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: GTBitOps
  // [TokenAttribute] Offset: FFFFFFFF
  class GTBitOps : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::GTBitOps::BitWriteInfo
    struct BitWriteInfo;
    // static public System.Int32 GetValueMask(System.Int32 count)
    // Offset: 0x279B274
    static int GetValueMask(int count);
    // static public System.Int32 GetClearMask(System.Int32 index, System.Int32 valueMask)
    // Offset: 0x279B284
    static int GetClearMask(int index, int valueMask);
    // static public System.Int32 GetClearMaskByCount(System.Int32 index, System.Int32 count)
    // Offset: 0x279B290
    static int GetClearMaskByCount(int index, int count);
    // static public System.Int32 ReadBits(System.Int32 bits, System.Int32 index, System.Int32 valueMask)
    // Offset: 0x279B2A8
    static int ReadBits(int bits, int index, int valueMask);
    // static public System.Int32 ReadBits(System.Int32 bits, GTBitOps/BitWriteInfo info)
    // Offset: 0x279B2B4
    static int ReadBits(int bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info);
    // static public System.Int32 ReadBitsByCount(System.Int32 bits, System.Int32 index, System.Int32 count)
    // Offset: 0x279B2C4
    static int ReadBitsByCount(int bits, int index, int count);
    // static public System.Boolean ReadBit(System.Int32 bits, System.Int32 index)
    // Offset: 0x279B2D8
    static bool ReadBit(int bits, int index);
    // static public System.Void WriteBits(ref System.Int32 bits, GTBitOps/BitWriteInfo info, System.Int32 value)
    // Offset: 0x279B2E4
    static void WriteBits(ByRef<int> bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info, int value);
    // static public System.Int32 WriteBits(System.Int32 bits, GTBitOps/BitWriteInfo info, System.Int32 value)
    // Offset: 0x279B304
    static int WriteBits_(int bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info, int value);
    // static public System.Void WriteBits(ref System.Int32 bits, System.Int32 index, System.Int32 valueMask, System.Int32 clearMask, System.Int32 value)
    // Offset: 0x279B31C
    static void WriteBits(ByRef<int> bits, int index, int valueMask, int clearMask, int value);
    // static public System.Int32 WriteBits(System.Int32 bits, System.Int32 index, System.Int32 valueMask, System.Int32 clearMask, System.Int32 value)
    // Offset: 0x279B338
    static int WriteBits_(int bits, int index, int valueMask, int clearMask, int value);
    // static public System.Void WriteBitsByCount(ref System.Int32 bits, System.Int32 index, System.Int32 count, System.Int32 value)
    // Offset: 0x279B34C
    static void WriteBitsByCount(ByRef<int> bits, int index, int count, int value);
    // static public System.Int32 WriteBitsByCount(System.Int32 bits, System.Int32 index, System.Int32 count, System.Int32 value)
    // Offset: 0x279B378
    static int WriteBitsByCount_(int bits, int index, int count, int value);
    // static public System.Void WriteBit(ref System.Int32 bits, System.Int32 index, System.Boolean value)
    // Offset: 0x279B39C
    static void WriteBit(ByRef<int> bits, int index, bool value);
    // static public System.Int32 WriteBit(System.Int32 bits, System.Int32 index, System.Boolean value)
    // Offset: 0x279B3C0
    static int WriteBit_(int bits, int index, bool value);
    // static public System.String ToBinaryString(System.Int32 number)
    // Offset: 0x279B3DC
    static ::StringW ToBinaryString(int number);
  }; // GTBitOps
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::GetValueMask
// Il2CppName: GetValueMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::GTBitOps::GetValueMask)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "GetValueMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::GetClearMask
// Il2CppName: GetClearMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&GlobalNamespace::GTBitOps::GetClearMask)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "GetClearMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, valueMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::GetClearMaskByCount
// Il2CppName: GetClearMaskByCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&GlobalNamespace::GTBitOps::GetClearMaskByCount)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "GetClearMaskByCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::ReadBits
// Il2CppName: ReadBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&GlobalNamespace::GTBitOps::ReadBits)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "ReadBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, valueMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::ReadBits
// Il2CppName: ReadBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::GlobalNamespace::GTBitOps::BitWriteInfo)>(&GlobalNamespace::GTBitOps::ReadBits)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "GTBitOps/BitWriteInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "ReadBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::ReadBitsByCount
// Il2CppName: ReadBitsByCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&GlobalNamespace::GTBitOps::ReadBitsByCount)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "ReadBitsByCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::ReadBit
// Il2CppName: ReadBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&GlobalNamespace::GTBitOps::ReadBit)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "ReadBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBits
// Il2CppName: WriteBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ::GlobalNamespace::GTBitOps::BitWriteInfo, int)>(&GlobalNamespace::GTBitOps::WriteBits)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "GTBitOps/BitWriteInfo")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, info, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBits_
// Il2CppName: WriteBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::GlobalNamespace::GTBitOps::BitWriteInfo, int)>(&GlobalNamespace::GTBitOps::WriteBits_)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "GTBitOps/BitWriteInfo")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, info, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBits
// Il2CppName: WriteBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, int, int, int, int)>(&GlobalNamespace::GTBitOps::WriteBits)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, valueMask, clearMask, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBits_
// Il2CppName: WriteBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int)>(&GlobalNamespace::GTBitOps::WriteBits_)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, valueMask, clearMask, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBitsByCount
// Il2CppName: WriteBitsByCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, int, int, int)>(&GlobalNamespace::GTBitOps::WriteBitsByCount)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBitsByCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, count, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBitsByCount_
// Il2CppName: WriteBitsByCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int)>(&GlobalNamespace::GTBitOps::WriteBitsByCount_)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBitsByCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, count, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBit
// Il2CppName: WriteBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, int, bool)>(&GlobalNamespace::GTBitOps::WriteBit)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::WriteBit_
// Il2CppName: WriteBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, bool)>(&GlobalNamespace::GTBitOps::WriteBit_)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "WriteBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, index, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::ToBinaryString
// Il2CppName: ToBinaryString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&GlobalNamespace::GTBitOps::ToBinaryString)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTBitOps*), "ToBinaryString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
