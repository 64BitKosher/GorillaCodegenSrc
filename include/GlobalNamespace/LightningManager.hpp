// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightningManager
  class LightningManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightningManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightningManager*, "", "LightningManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: LightningManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LightningManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19
    class $LightningEffectRunner$d__19;
    public:
    // public System.Int32 lightMapIndex
    // Size: 0x4
    // Offset: 0x20
    int lightMapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single minTimeBetweenFlashes
    // Size: 0x4
    // Offset: 0x24
    float minTimeBetweenFlashes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxTimeBetweenFlashes
    // Size: 0x4
    // Offset: 0x28
    float maxTimeBetweenFlashes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single flashFadeInDuration
    // Size: 0x4
    // Offset: 0x2C
    float flashFadeInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single flashHoldDuration
    // Size: 0x4
    // Offset: 0x30
    float flashHoldDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single flashFadeOutDuration
    // Size: 0x4
    // Offset: 0x34
    float flashFadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AudioSource lightningAudio
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* lightningAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private SRand rng
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SRand rng;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SRand) == 0x8);
    // private System.Int64 currentHourlySeed
    // Size: 0x8
    // Offset: 0x48
    int64_t currentHourlySeed;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Collections.Generic.List`1<System.Single> lightningTimestampsRealtime
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<float>* lightningTimestampsRealtime;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // private System.Int32 nextLightningTimestampIndex
    // Size: 0x4
    // Offset: 0x58
    int nextLightningTimestampIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nextLightningTimestampIndex and: regularLightning
    char __padding10[0x4] = {};
    // public UnityEngine.AudioClip regularLightning
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* regularLightning;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip muffledLightning
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioClip* muffledLightning;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.Coroutine lightningRunner
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Coroutine* lightningRunner;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 lightMapIndex
    [[deprecated("Use field access instead!")]] int& dyn_lightMapIndex();
    // Get instance field reference: public System.Single minTimeBetweenFlashes
    [[deprecated("Use field access instead!")]] float& dyn_minTimeBetweenFlashes();
    // Get instance field reference: public System.Single maxTimeBetweenFlashes
    [[deprecated("Use field access instead!")]] float& dyn_maxTimeBetweenFlashes();
    // Get instance field reference: public System.Single flashFadeInDuration
    [[deprecated("Use field access instead!")]] float& dyn_flashFadeInDuration();
    // Get instance field reference: public System.Single flashHoldDuration
    [[deprecated("Use field access instead!")]] float& dyn_flashHoldDuration();
    // Get instance field reference: public System.Single flashFadeOutDuration
    [[deprecated("Use field access instead!")]] float& dyn_flashFadeOutDuration();
    // Get instance field reference: private UnityEngine.AudioSource lightningAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_lightningAudio();
    // Get instance field reference: private SRand rng
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SRand& dyn_rng();
    // Get instance field reference: private System.Int64 currentHourlySeed
    [[deprecated("Use field access instead!")]] int64_t& dyn_currentHourlySeed();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> lightningTimestampsRealtime
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_lightningTimestampsRealtime();
    // Get instance field reference: private System.Int32 nextLightningTimestampIndex
    [[deprecated("Use field access instead!")]] int& dyn_nextLightningTimestampIndex();
    // Get instance field reference: public UnityEngine.AudioClip regularLightning
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_regularLightning();
    // Get instance field reference: public UnityEngine.AudioClip muffledLightning
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_muffledLightning();
    // Get instance field reference: private UnityEngine.Coroutine lightningRunner
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_lightningRunner();
    // private System.Void Start()
    // Offset: 0x2756400
    void Start();
    // private System.Void OnTimeChanged()
    // Offset: 0x2756528
    void OnTimeChanged();
    // private System.Void GetHourStart(out System.Int64 seed, out System.Single timestampRealtime)
    // Offset: 0x27567BC
    void GetHourStart(ByRef<int64_t> seed, ByRef<float> timestampRealtime);
    // private System.Void InitializeRng()
    // Offset: 0x2756580
    void InitializeRng();
    // private System.Void DoLightningStrike()
    // Offset: 0x2756920
    void DoLightningStrike();
    // private System.Collections.IEnumerator LightningEffectRunner()
    // Offset: 0x2756750
    ::System::Collections::IEnumerator* LightningEffectRunner();
    // public System.Void .ctor()
    // Offset: 0x2756A08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightningManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightningManager*, creationType>()));
    }
  }; // LightningManager
  #pragma pack(pop)
  static check_size<sizeof(LightningManager), 112 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_LightningManagerSizeCheck;
  static_assert(sizeof(LightningManager) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningManager::*)()>(&GlobalNamespace::LightningManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::OnTimeChanged
// Il2CppName: OnTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningManager::*)()>(&GlobalNamespace::LightningManager::OnTimeChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "OnTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::GetHourStart
// Il2CppName: GetHourStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningManager::*)(ByRef<int64_t>, ByRef<float>)>(&GlobalNamespace::LightningManager::GetHourStart)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* timestampRealtime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "GetHourStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, timestampRealtime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::InitializeRng
// Il2CppName: InitializeRng
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningManager::*)()>(&GlobalNamespace::LightningManager::InitializeRng)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "InitializeRng", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::DoLightningStrike
// Il2CppName: DoLightningStrike
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningManager::*)()>(&GlobalNamespace::LightningManager::DoLightningStrike)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "DoLightningStrike", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::LightningEffectRunner
// Il2CppName: LightningEffectRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LightningManager::*)()>(&GlobalNamespace::LightningManager::LightningEffectRunner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningManager*), "LightningEffectRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
