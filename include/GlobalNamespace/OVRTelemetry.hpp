// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin/Qpl
#include "GlobalNamespace/OVRPlugin_Qpl.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRTelemetryMarker
  struct OVRTelemetryMarker;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTelemetry
  class OVRTelemetry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTelemetry);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTelemetry*, "", "OVRTelemetry");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRTelemetry
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class OVRTelemetry : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRTelemetry::MarkerPoint
    struct MarkerPoint;
    // Nested type: ::GlobalNamespace::OVRTelemetry::TelemetryClient
    class TelemetryClient;
    // Nested type: ::GlobalNamespace::OVRTelemetry::NullTelemetryClient
    class NullTelemetryClient;
    // Nested type: ::GlobalNamespace::OVRTelemetry::QPLTelemetryClient
    class QPLTelemetryClient;
    // Get static field: static private readonly OVRTelemetry/TelemetryClient InactiveClient
    static ::GlobalNamespace::OVRTelemetry::TelemetryClient* _get_InactiveClient();
    // Set static field: static private readonly OVRTelemetry/TelemetryClient InactiveClient
    static void _set_InactiveClient(::GlobalNamespace::OVRTelemetry::TelemetryClient* value);
    // Get static field: static public readonly OVRTelemetry/TelemetryClient ActiveClient
    static ::GlobalNamespace::OVRTelemetry::TelemetryClient* _get_ActiveClient();
    // Set static field: static public readonly OVRTelemetry/TelemetryClient ActiveClient
    static void _set_ActiveClient(::GlobalNamespace::OVRTelemetry::TelemetryClient* value);
    // Get static field: static private System.String _sdkVersionString
    static ::StringW _get__sdkVersionString();
    // Set static field: static private System.String _sdkVersionString
    static void _set__sdkVersionString(::StringW value);
    // static private System.Boolean get_IsActive()
    // Offset: 0x492F1F8
    static bool get_IsActive();
    // static public OVRTelemetry/TelemetryClient get_Client()
    // Offset: 0x492A3C4
    static ::GlobalNamespace::OVRTelemetry::TelemetryClient* get_Client();
    // static public OVRTelemetryMarker Start(System.Int32 markerId, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F218
    static ::GlobalNamespace::OVRTelemetryMarker Start(int markerId, int instanceKey, int64_t timestampMs);
    // static public System.Void SendEvent(System.Int32 markerId, OVRPlugin/Qpl/ResultType result)
    // Offset: 0x492F2B8
    static void SendEvent(int markerId, ::GlobalNamespace::OVRPlugin::Qpl::ResultType result);
    // static public OVRTelemetryMarker AddSDKVersionAnnotation(OVRTelemetryMarker marker)
    // Offset: 0x492F464
    static ::GlobalNamespace::OVRTelemetryMarker AddSDKVersionAnnotation(::GlobalNamespace::OVRTelemetryMarker marker);
    // static private System.Void .cctor()
    // Offset: 0x492F5E8
    static void _cctor();
  }; // OVRTelemetry
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::get_IsActive
// Il2CppName: get_IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRTelemetry::get_IsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), "get_IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::get_Client
// Il2CppName: get_Client
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetry::TelemetryClient* (*)()>(&GlobalNamespace::OVRTelemetry::get_Client)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), "get_Client", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (*)(int, int, int64_t)>(&GlobalNamespace::OVRTelemetry::Start)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* timestampMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, instanceKey, timestampMs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::GlobalNamespace::OVRPlugin::Qpl::ResultType)>(&GlobalNamespace::OVRTelemetry::SendEvent)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Qpl/ResultType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::AddSDKVersionAnnotation
// Il2CppName: AddSDKVersionAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (*)(::GlobalNamespace::OVRTelemetryMarker)>(&GlobalNamespace::OVRTelemetry::AddSDKVersionAnnotation)> {
  static const MethodInfo* get() {
    static auto* marker = &::il2cpp_utils::GetClassFromName("", "OVRTelemetryMarker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), "AddSDKVersionAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{marker});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRTelemetry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
