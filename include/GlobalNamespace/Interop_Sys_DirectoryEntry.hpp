// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Interop/Sys
#include "GlobalNamespace/Interop_Sys.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Interop/Sys/NodeType
#include "GlobalNamespace/Interop_Sys_NodeType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Interop::Sys::DirectoryEntry, "", "Interop/Sys/DirectoryEntry");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Interop/Sys/DirectoryEntry
  // [TokenAttribute] Offset: FFFFFFFF
  struct Interop::Sys::DirectoryEntry/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Byte* Name
    // Size: 0x8
    // Offset: 0x0
    uint8_t* Name;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // System.Int32 NameLength
    // Size: 0x4
    // Offset: 0x8
    int NameLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Interop/Sys/NodeType InodeType
    // Size: 0x4
    // Offset: 0xC
    ::GlobalNamespace::Interop::Sys::NodeType InodeType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Interop::Sys::NodeType) == 0x4);
    public:
    // Creating value type constructor for type: DirectoryEntry
    constexpr DirectoryEntry(uint8_t* Name_ = {}, int NameLength_ = {}, ::GlobalNamespace::Interop::Sys::NodeType InodeType_ = {}) noexcept : Name{Name_}, NameLength{NameLength_}, InodeType{InodeType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Byte* Name
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_Name();
    // Get instance field reference: System.Int32 NameLength
    [[deprecated("Use field access instead!")]] int& dyn_NameLength();
    // Get instance field reference: Interop/Sys/NodeType InodeType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Interop::Sys::NodeType& dyn_InodeType();
    // System.ReadOnlySpan`1<System.Char> GetName(System.Span`1<System.Char> buffer)
    // Offset: 0x44A04D8
    ::System::ReadOnlySpan_1<::Il2CppChar> GetName(::System::Span_1<::Il2CppChar> buffer);
  }; // Interop/Sys/DirectoryEntry
  #pragma pack(pop)
  static check_size<sizeof(Interop::Sys::DirectoryEntry), 12 + sizeof(::GlobalNamespace::Interop::Sys::NodeType)> __GlobalNamespace_Interop_Sys_DirectoryEntrySizeCheck;
  static_assert(sizeof(Interop::Sys::DirectoryEntry) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Interop::Sys::DirectoryEntry::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (GlobalNamespace::Interop::Sys::DirectoryEntry::*)(::System::Span_1<::Il2CppChar>)>(&GlobalNamespace::Interop::Sys::DirectoryEntry::GetName)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Interop::Sys::DirectoryEntry), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
