// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EdibleHoldable
  class EdibleHoldable;
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HotPepperEvents
  class HotPepperEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HotPepperEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HotPepperEvents*, "", "HotPepperEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: HotPepperEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class HotPepperEvents : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HotPepperEvents::EdibleState
    struct EdibleState;
    public:
    // private EdibleHoldable _pepper
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::EdibleHoldable* pepper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EdibleHoldable*) == 0x8);
    public:
    // Get instance field reference: private EdibleHoldable _pepper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable*& dyn__pepper();
    // private System.Void OnEnable()
    // Offset: 0x26D5BB0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x26D5CAC
    void OnDisable();
    // public System.Void OnBiteView(VRRig rig, System.Int32 nextState)
    // Offset: 0x26D5DA8
    void OnBiteView(::GlobalNamespace::VRRig* rig, int nextState);
    // public System.Void OnBiteWorld(VRRig rig, System.Int32 nextState)
    // Offset: 0x26D5E60
    void OnBiteWorld(::GlobalNamespace::VRRig* rig, int nextState);
    // public System.Void OnBite(VRRig rig, System.Int32 nextState, System.Boolean isViewRig)
    // Offset: 0x26D5DB0
    void OnBite(::GlobalNamespace::VRRig* rig, int nextState, bool isViewRig);
    // public System.Void .ctor()
    // Offset: 0x26D5EE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HotPepperEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HotPepperEvents*, creationType>()));
    }
  }; // HotPepperEvents
  #pragma pack(pop)
  static check_size<sizeof(HotPepperEvents), 32 + sizeof(::GlobalNamespace::EdibleHoldable*)> __GlobalNamespace_HotPepperEventsSizeCheck;
  static_assert(sizeof(HotPepperEvents) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HotPepperEvents::*)()>(&GlobalNamespace::HotPepperEvents::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HotPepperEvents*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HotPepperEvents::*)()>(&GlobalNamespace::HotPepperEvents::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HotPepperEvents*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::OnBiteView
// Il2CppName: OnBiteView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HotPepperEvents::*)(::GlobalNamespace::VRRig*, int)>(&GlobalNamespace::HotPepperEvents::OnBiteView)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* nextState = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HotPepperEvents*), "OnBiteView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig, nextState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::OnBiteWorld
// Il2CppName: OnBiteWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HotPepperEvents::*)(::GlobalNamespace::VRRig*, int)>(&GlobalNamespace::HotPepperEvents::OnBiteWorld)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* nextState = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HotPepperEvents*), "OnBiteWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig, nextState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::OnBite
// Il2CppName: OnBite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HotPepperEvents::*)(::GlobalNamespace::VRRig*, int, bool)>(&GlobalNamespace::HotPepperEvents::OnBite)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* nextState = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isViewRig = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HotPepperEvents*), "OnBite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig, nextState, isViewRig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HotPepperEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
