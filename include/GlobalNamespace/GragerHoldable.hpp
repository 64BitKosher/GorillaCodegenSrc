// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GragerHoldable
  class GragerHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GragerHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GragerHoldable*, "", "GragerHoldable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: GragerHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class GragerHoldable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 LocalCenterOfMass
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 LocalCenterOfMass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 LocalRotationAxis
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 LocalRotationAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 RotationCorrectionEuler
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 RotationCorrectionEuler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single drag
    // Size: 0x4
    // Offset: 0x44
    float drag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single gravity
    // Size: 0x4
    // Offset: 0x48
    float gravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single localFriction
    // Size: 0x4
    // Offset: 0x4C
    float localFriction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single distancePerClack
    // Size: 0x4
    // Offset: 0x50
    float distancePerClack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: distancePerClack and: clackAudio
    char __padding6[0x4] = {};
    // private UnityEngine.AudioSource clackAudio
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioSource* clackAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip[] allClacks
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::AudioClip*> allClacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private System.Single centerOfMassRadius
    // Size: 0x4
    // Offset: 0x68
    float centerOfMassRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastWorldPosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 lastWorldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastClackParentLocalPosition
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::Vector3 lastClackParentLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion RotationCorrection
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Quaternion RotationCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: private UnityEngine.Vector3 LocalCenterOfMass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LocalCenterOfMass();
    // Get instance field reference: private UnityEngine.Vector3 LocalRotationAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LocalRotationAxis();
    // Get instance field reference: private UnityEngine.Vector3 RotationCorrectionEuler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RotationCorrectionEuler();
    // Get instance field reference: private System.Single drag
    [[deprecated("Use field access instead!")]] float& dyn_drag();
    // Get instance field reference: private System.Single gravity
    [[deprecated("Use field access instead!")]] float& dyn_gravity();
    // Get instance field reference: private System.Single localFriction
    [[deprecated("Use field access instead!")]] float& dyn_localFriction();
    // Get instance field reference: private System.Single distancePerClack
    [[deprecated("Use field access instead!")]] float& dyn_distancePerClack();
    // Get instance field reference: private UnityEngine.AudioSource clackAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_clackAudio();
    // Get instance field reference: private UnityEngine.AudioClip[] allClacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_allClacks();
    // Get instance field reference: private System.Single centerOfMassRadius
    [[deprecated("Use field access instead!")]] float& dyn_centerOfMassRadius();
    // Get instance field reference: private UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: private UnityEngine.Vector3 lastWorldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastWorldPosition();
    // Get instance field reference: private UnityEngine.Vector3 lastClackParentLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastClackParentLocalPosition();
    // Get instance field reference: private UnityEngine.Quaternion RotationCorrection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_RotationCorrection();
    // private System.Void Start()
    // Offset: 0x278AA34
    void Start();
    // private System.Void Update()
    // Offset: 0x278ABF0
    void Update();
    // public System.Void .ctor()
    // Offset: 0x278B0F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GragerHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GragerHoldable*, creationType>()));
    }
  }; // GragerHoldable
  #pragma pack(pop)
  static check_size<sizeof(GragerHoldable), 144 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_GragerHoldableSizeCheck;
  static_assert(sizeof(GragerHoldable) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GragerHoldable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GragerHoldable::*)()>(&GlobalNamespace::GragerHoldable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GragerHoldable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GragerHoldable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GragerHoldable::*)()>(&GlobalNamespace::GragerHoldable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GragerHoldable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GragerHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
