// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TryOnBundleButton
  class TryOnBundleButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TryOnBundleButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TryOnBundleButton*, "", "TryOnBundleButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: TryOnBundleButton
  // [TokenAttribute] Offset: FFFFFFFF
  class TryOnBundleButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public System.Int32 buttonIndex
    // Size: 0x4
    // Offset: 0x70
    int buttonIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: buttonIndex and: playfabBundleID
    char __padding0[0x4] = {};
    // public System.String playfabBundleID
    // Size: 0x8
    // Offset: 0x78
    ::StringW playfabBundleID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Int32 buttonIndex
    [[deprecated("Use field access instead!")]] int& dyn_buttonIndex();
    // Get instance field reference: public System.String playfabBundleID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playfabBundleID();
    // public override System.Void ButtonActivationWithHand(System.Boolean isLeftHand)
    // Offset: 0x26CE65C
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivationWithHand(System.Boolean isLeftHand)
    void ButtonActivationWithHand(bool isLeftHand);
    // public override System.Void UpdateColor()
    // Offset: 0x26CE6E4
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::UpdateColor()
    void UpdateColor();
    // public System.Void .ctor()
    // Offset: 0x26CE7D8
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TryOnBundleButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundleButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TryOnBundleButton*, creationType>()));
    }
  }; // TryOnBundleButton
  #pragma pack(pop)
  static check_size<sizeof(TryOnBundleButton), 120 + sizeof(::StringW)> __GlobalNamespace_TryOnBundleButtonSizeCheck;
  static_assert(sizeof(TryOnBundleButton) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TryOnBundleButton::ButtonActivationWithHand
// Il2CppName: ButtonActivationWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TryOnBundleButton::*)(bool)>(&GlobalNamespace::TryOnBundleButton::ButtonActivationWithHand)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TryOnBundleButton*), "ButtonActivationWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TryOnBundleButton::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TryOnBundleButton::*)()>(&GlobalNamespace::TryOnBundleButton::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TryOnBundleButton*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TryOnBundleButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
