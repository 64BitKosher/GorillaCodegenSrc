// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IGorillaSerializeable
  class IGorillaSerializeable;
  // Forward declaring type: RPCNetworkBase
  class RPCNetworkBase;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaSerializer
  class GorillaSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaSerializer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaSerializer*, "", "GorillaSerializer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GorillaSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class GorillaSerializer : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IPunInstantiateMagicCallback*/ {
    public:
    public:
    // protected System.Boolean successfullInstantiate
    // Size: 0x1
    // Offset: 0x20
    bool successfullInstantiate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: successfullInstantiate and: serializeTarget
    char __padding0[0x7] = {};
    // protected IGorillaSerializeable serializeTarget
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::IGorillaSerializeable* serializeTarget;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IGorillaSerializeable*) == 0x8);
    // private System.Type targetType
    // Size: 0x8
    // Offset: 0x30
    ::System::Type* targetType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // protected UnityEngine.GameObject targetObject
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* targetObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Get instance field reference: protected System.Boolean successfullInstantiate
    [[deprecated("Use field access instead!")]] bool& dyn_successfullInstantiate();
    // Get instance field reference: protected IGorillaSerializeable serializeTarget
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IGorillaSerializeable*& dyn_serializeTarget();
    // Get instance field reference: private System.Type targetType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_targetType();
    // Get instance field reference: protected UnityEngine.GameObject targetObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_targetObject();
    // Get instance field reference: protected Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F82A0
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F8460
    void OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // protected System.Void OnSuccessfullInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F86CC
    void OnSuccessfullInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // protected System.Boolean OnInstantiateSetup(Photon.Pun.PhotonMessageInfo info, out UnityEngine.GameObject outTargetObject, out System.Type outTargetType)
    // Offset: 0x26F86D0
    bool OnInstantiateSetup(::Photon::Pun::PhotonMessageInfo info, ByRef<::UnityEngine::GameObject*> outTargetObject, ByRef<::System::Type*> outTargetType);
    // protected System.Boolean ValidOnSerialize(Photon.Pun.PhotonStream stream, in Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F878C
    bool ValidOnSerialize(::Photon::Pun::PhotonStream* stream, ByRef<::Photon::Pun::PhotonMessageInfo> info);
    // public T AddRPCComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T AddRPCComponent() {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::RPCNetworkBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSerializer::AddRPCComponent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaSerializer*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Void SendRPC(System.String rpcName, System.Boolean targetOthers, params System.Object[] data)
    // Offset: 0x26F87B4
    void SendRPC(::StringW rpcName, bool targetOthers, ::ArrayW<::Il2CppObject*> data);
    // public System.Void SendRPC(System.String rpcName, Photon.Realtime.Player targetPlayer, params System.Object[] data)
    // Offset: 0x26F87DC
    void SendRPC(::StringW rpcName, ::Photon::Realtime::Player* targetPlayer, ::ArrayW<::Il2CppObject*> data);
    // public System.Void .ctor()
    // Offset: 0x26F87F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaSerializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaSerializer*, creationType>()));
    }
  }; // GorillaSerializer
  #pragma pack(pop)
  static check_size<sizeof(GorillaSerializer), 64 + sizeof(::Photon::Pun::PhotonView*)> __GlobalNamespace_GorillaSerializerSizeCheck;
  static_assert(sizeof(GorillaSerializer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSerializer::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaSerializer::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::OnPhotonInstantiate
// Il2CppName: OnPhotonInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSerializer::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaSerializer::OnPhotonInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "OnPhotonInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::OnSuccessfullInstantiate
// Il2CppName: OnSuccessfullInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSerializer::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaSerializer::OnSuccessfullInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "OnSuccessfullInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::OnInstantiateSetup
// Il2CppName: OnInstantiateSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSerializer::*)(::Photon::Pun::PhotonMessageInfo, ByRef<::UnityEngine::GameObject*>, ByRef<::System::Type*>)>(&GlobalNamespace::GorillaSerializer::OnInstantiateSetup)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    static auto* outTargetObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->this_arg;
    static auto* outTargetType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "OnInstantiateSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, outTargetObject, outTargetType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::ValidOnSerialize
// Il2CppName: ValidOnSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaSerializer::*)(::Photon::Pun::PhotonStream*, ByRef<::Photon::Pun::PhotonMessageInfo>)>(&GlobalNamespace::GorillaSerializer::ValidOnSerialize)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "ValidOnSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::AddRPCComponent
// Il2CppName: AddRPCComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::SendRPC
// Il2CppName: SendRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSerializer::*)(::StringW, bool, ::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::GorillaSerializer::SendRPC)> {
  static const MethodInfo* get() {
    static auto* rpcName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetOthers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "SendRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rpcName, targetOthers, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::SendRPC
// Il2CppName: SendRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaSerializer::*)(::StringW, ::Photon::Realtime::Player*, ::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::GorillaSerializer::SendRPC)> {
  static const MethodInfo* get() {
    static auto* rpcName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSerializer*), "SendRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rpcName, targetPlayer, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
