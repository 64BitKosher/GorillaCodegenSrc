// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
// Including type: GorillaPosRotConstraint
#include "GlobalNamespace/GorillaPosRotConstraint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTPosRotConstraints
  class GTPosRotConstraints;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTPosRotConstraints);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTPosRotConstraints*, "", "GTPosRotConstraints");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: GTPosRotConstraints
  // [TokenAttribute] Offset: FFFFFFFF
  class GTPosRotConstraints : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // public GorillaPosRotConstraint[] constraints
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::GorillaPosRotConstraint> constraints;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaPosRotConstraint>) == 0x8);
    // private System.Boolean <IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: public GorillaPosRotConstraint[] constraints
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaPosRotConstraint>& dyn_constraints();
    // Get instance field reference: private System.Boolean <IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSpawned$k__BackingField();
    // public System.Boolean get_IsSpawned()
    // Offset: 0x288C1D0
    bool get_IsSpawned();
    // public System.Void set_IsSpawned(System.Boolean value)
    // Offset: 0x288C1D8
    void set_IsSpawned(bool value);
    // private System.Void GorillaTag.ISpawnable.OnSpawn()
    // Offset: 0x288C1E4
    void GorillaTag_ISpawnable_OnSpawn();
    // private System.Void GorillaTag.ISpawnable.OnDespawn()
    // Offset: 0x288CD2C
    void GorillaTag_ISpawnable_OnDespawn();
    // protected System.Void OnEnable()
    // Offset: 0x288CD30
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x288CD98
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x288CDEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTPosRotConstraints* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTPosRotConstraints*, creationType>()));
    }
  }; // GTPosRotConstraints
  #pragma pack(pop)
  static check_size<sizeof(GTPosRotConstraints), 40 + sizeof(bool)> __GlobalNamespace_GTPosRotConstraintsSizeCheck;
  static_assert(sizeof(GTPosRotConstraints) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::get_IsSpawned
// Il2CppName: get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTPosRotConstraints::*)()>(&GlobalNamespace::GTPosRotConstraints::get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::set_IsSpawned
// Il2CppName: set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTPosRotConstraints::*)(bool)>(&GlobalNamespace::GTPosRotConstraints::set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnSpawn
// Il2CppName: GorillaTag.ISpawnable.OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTPosRotConstraints::*)()>(&GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "GorillaTag.ISpawnable.OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnDespawn
// Il2CppName: GorillaTag.ISpawnable.OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTPosRotConstraints::*)()>(&GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "GorillaTag.ISpawnable.OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTPosRotConstraints::*)()>(&GlobalNamespace::GTPosRotConstraints::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTPosRotConstraints::*)()>(&GlobalNamespace::GTPosRotConstraints::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTPosRotConstraints*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTPosRotConstraints::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
