// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PassthroughBrush
  class PassthroughBrush;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PassthroughBrush);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PassthroughBrush*, "", "PassthroughBrush");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PassthroughBrush
  // [TokenAttribute] Offset: FFFFFFFF
  class PassthroughBrush : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PassthroughBrush::BrushState
    struct BrushState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PassthroughBrush/BrushState
    // [TokenAttribute] Offset: FFFFFFFF
    struct BrushState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BrushState
      constexpr BrushState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PassthroughBrush/BrushState Idle
      static constexpr const int Idle = 0;
      // Get static field: static public PassthroughBrush/BrushState Idle
      static ::GlobalNamespace::PassthroughBrush::BrushState _get_Idle();
      // Set static field: static public PassthroughBrush/BrushState Idle
      static void _set_Idle(::GlobalNamespace::PassthroughBrush::BrushState value);
      // static field const value: static public PassthroughBrush/BrushState Inking
      static constexpr const int Inking = 1;
      // Get static field: static public PassthroughBrush/BrushState Inking
      static ::GlobalNamespace::PassthroughBrush::BrushState _get_Inking();
      // Set static field: static public PassthroughBrush/BrushState Inking
      static void _set_Inking(::GlobalNamespace::PassthroughBrush::BrushState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // PassthroughBrush/BrushState
    #pragma pack(pop)
    static check_size<sizeof(PassthroughBrush::BrushState), 0 + sizeof(int)> __GlobalNamespace_PassthroughBrush_BrushStateSizeCheck;
    static_assert(sizeof(PassthroughBrush::BrushState) == 0x4);
    public:
    // public OVRInput/Controller controllerHand
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controllerHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: controllerHand and: lineSegmentPrefab
    char __padding0[0x4] = {};
    // public UnityEngine.GameObject lineSegmentPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* lineSegmentPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject lineContainer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* lineContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean forceActive
    // Size: 0x1
    // Offset: 0x38
    bool forceActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceActive and: currentLineSegment
    char __padding3[0x7] = {};
    // private UnityEngine.LineRenderer currentLineSegment
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::LineRenderer* currentLineSegment;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> inkPositions
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inkPositions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Single minInkDist
    // Size: 0x4
    // Offset: 0x50
    float minInkDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single strokeWidth
    // Size: 0x4
    // Offset: 0x54
    float strokeWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single strokeLength
    // Size: 0x4
    // Offset: 0x58
    float strokeLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private PassthroughBrush/BrushState brushStatus
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::PassthroughBrush::BrushState brushStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PassthroughBrush::BrushState) == 0x4);
    public:
    // Get instance field reference: public OVRInput/Controller controllerHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_controllerHand();
    // Get instance field reference: public UnityEngine.GameObject lineSegmentPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_lineSegmentPrefab();
    // Get instance field reference: public UnityEngine.GameObject lineContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_lineContainer();
    // Get instance field reference: public System.Boolean forceActive
    [[deprecated("Use field access instead!")]] bool& dyn_forceActive();
    // Get instance field reference: private UnityEngine.LineRenderer currentLineSegment
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_currentLineSegment();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> inkPositions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_inkPositions();
    // Get instance field reference: private System.Single minInkDist
    [[deprecated("Use field access instead!")]] float& dyn_minInkDist();
    // Get instance field reference: private System.Single strokeWidth
    [[deprecated("Use field access instead!")]] float& dyn_strokeWidth();
    // Get instance field reference: private System.Single strokeLength
    [[deprecated("Use field access instead!")]] float& dyn_strokeLength();
    // Get instance field reference: private PassthroughBrush/BrushState brushStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PassthroughBrush::BrushState& dyn_brushStatus();
    // private System.Void OnDisable()
    // Offset: 0x293A1D4
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0x293A1DC
    void LateUpdate();
    // private System.Void StartLine(UnityEngine.Vector3 inkPos)
    // Offset: 0x293A494
    void StartLine(::UnityEngine::Vector3 inkPos);
    // private System.Void UpdateLine(UnityEngine.Vector3 inkPos)
    // Offset: 0x293A6C4
    void UpdateLine(::UnityEngine::Vector3 inkPos);
    // public System.Void ClearLines()
    // Offset: 0x293A900
    void ClearLines();
    // public System.Void UndoInkLine()
    // Offset: 0x293A3AC
    void UndoInkLine();
    // public System.Void .ctor()
    // Offset: 0x293A9D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PassthroughBrush* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PassthroughBrush::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PassthroughBrush*, creationType>()));
    }
  }; // PassthroughBrush
  #pragma pack(pop)
  static check_size<sizeof(PassthroughBrush), 92 + sizeof(::GlobalNamespace::PassthroughBrush::BrushState)> __GlobalNamespace_PassthroughBrushSizeCheck;
  static_assert(sizeof(PassthroughBrush) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PassthroughBrush::BrushState, "", "PassthroughBrush/BrushState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)()>(&GlobalNamespace::PassthroughBrush::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)()>(&GlobalNamespace::PassthroughBrush::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::StartLine
// Il2CppName: StartLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)(::UnityEngine::Vector3)>(&GlobalNamespace::PassthroughBrush::StartLine)> {
  static const MethodInfo* get() {
    static auto* inkPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "StartLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inkPos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::UpdateLine
// Il2CppName: UpdateLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)(::UnityEngine::Vector3)>(&GlobalNamespace::PassthroughBrush::UpdateLine)> {
  static const MethodInfo* get() {
    static auto* inkPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "UpdateLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inkPos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::ClearLines
// Il2CppName: ClearLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)()>(&GlobalNamespace::PassthroughBrush::ClearLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "ClearLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::UndoInkLine
// Il2CppName: UndoInkLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughBrush::*)()>(&GlobalNamespace::PassthroughBrush::UndoInkLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughBrush*), "UndoInkLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughBrush::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
