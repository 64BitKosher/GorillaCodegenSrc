// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: RpcInfo
  struct RpcInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PhotonMessageInfoWrapped, "", "PhotonMessageInfoWrapped");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: PhotonMessageInfoWrapped
  // [TokenAttribute] Offset: FFFFFFFF
  struct PhotonMessageInfoWrapped/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 senderID
    // Size: 0x4
    // Offset: 0x0
    int senderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 sentTick
    // Size: 0x4
    // Offset: 0x4
    int sentTick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PhotonMessageInfoWrapped
    constexpr PhotonMessageInfoWrapped(int senderID_ = {}, int sentTick_ = {}) noexcept : senderID{senderID_}, sentTick{sentTick_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 senderID
    [[deprecated("Use field access instead!")]] int& dyn_senderID();
    // Get instance field reference: public System.Int32 sentTick
    [[deprecated("Use field access instead!")]] int& dyn_sentTick();
    // public System.Double get_SentServerTime()
    // Offset: 0x290EF94
    double get_SentServerTime();
    // public System.Void .ctor(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x290EFAC
    PhotonMessageInfoWrapped(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor(Fusion.RpcInfo info)
    // Offset: 0x290EFD0
    PhotonMessageInfoWrapped(::Fusion::RpcInfo info);
    // public System.Void .ctor(System.Int32 playerID, System.Int32 tick)
    // Offset: 0x290F004
    // ABORTED: conflicts with another method.  PhotonMessageInfoWrapped(int playerID, int tick);
  }; // PhotonMessageInfoWrapped
  #pragma pack(pop)
  static check_size<sizeof(PhotonMessageInfoWrapped), 4 + sizeof(int)> __GlobalNamespace_PhotonMessageInfoWrappedSizeCheck;
  static_assert(sizeof(PhotonMessageInfoWrapped) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PhotonMessageInfoWrapped::get_SentServerTime
// Il2CppName: get_SentServerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::PhotonMessageInfoWrapped::*)()>(&GlobalNamespace::PhotonMessageInfoWrapped::get_SentServerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonMessageInfoWrapped), "get_SentServerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonMessageInfoWrapped::PhotonMessageInfoWrapped
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonMessageInfoWrapped::PhotonMessageInfoWrapped
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonMessageInfoWrapped::PhotonMessageInfoWrapped
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
