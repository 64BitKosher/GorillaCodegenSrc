// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: Fusion.PlayerRef
#include "Fusion/PlayerRef.hpp"
// Including type: Fusion.Changed`1
#include "Fusion/Changed_1.hpp"
// Including type: Fusion.CodeGen.FixedStorage@17
#include "Fusion/CodeGen/FixedStorage@17.hpp"
// Including type: Fusion.CodeGen.FixedStorage@207
#include "Fusion/CodeGen/FixedStorage@207.hpp"
// Including type: Fusion._16
#include "Fusion/_16.hpp"
// Including type: Fusion.NetworkString`1
#include "Fusion/NetworkString_1.hpp"
// Including type: Fusion._32
#include "Fusion/_32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: PlayerInfo because it is already included!
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SerializableDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class SerializableDictionary_2;
  // Forward declaring type: ChangedDelegate`1<T>
  template<typename T>
  class ChangedDelegate_1;
  // Forward declaring type: NetworkBehaviourCallbacks`1<T>
  template<typename T>
  class NetworkBehaviourCallbacks_1;
  // Skipping declaration: NetworkDictionary`2 because it is already included!
  // Forward declaring type: RpcInfo
  struct RpcInfo;
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionPlayerProperties
  class FusionPlayerProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionPlayerProperties);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionPlayerProperties*, "", "FusionPlayerProperties");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: FusionPlayerProperties
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  class FusionPlayerProperties : public ::Fusion::NetworkBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FusionPlayerProperties::PlayerInfo
    struct PlayerInfo;
    // Nested type: ::GlobalNamespace::FusionPlayerProperties::PlayerAttributeOnChanged
    class PlayerAttributeOnChanged;
    // Size: 0x380
    #pragma pack(push, 1)
    // WARNING Layout: Explicit may not be correctly taken into account!
    // Autogenerated type: FusionPlayerProperties/PlayerInfo
    // [TokenAttribute] Offset: FFFFFFFF
    // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
    struct PlayerInfo/*, public ::System::ValueType, public ::Fusion::INetworkStruct*/ {
      public:
      public:
      // private Fusion.CodeGen.FixedStorage@17 _NickName
      // Size: 0x44
      // Offset: 0x0
      ::Fusion::CodeGen::FixedStorage@17 NickName;
      // Field size check
      static_assert(sizeof(::Fusion::CodeGen::FixedStorage@17) == 0x44);
      // private Fusion.CodeGen.FixedStorage@207 _properties
      // Size: 0x33C
      // Offset: 0x44
      ::Fusion::CodeGen::FixedStorage@207 properties;
      // Field size check
      static_assert(sizeof(::Fusion::CodeGen::FixedStorage@207) == 0x33C);
      public:
      // Creating value type constructor for type: PlayerInfo
      constexpr PlayerInfo(::Fusion::CodeGen::FixedStorage@17 NickName_ = {}, ::Fusion::CodeGen::FixedStorage@207 properties_ = {}) noexcept : NickName{NickName_}, properties{properties_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::Fusion::INetworkStruct
      operator ::Fusion::INetworkStruct() noexcept {
        return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
      }
      // Get instance field reference: private Fusion.CodeGen.FixedStorage@17 _NickName
      [[deprecated("Use field access instead!")]] ::Fusion::CodeGen::FixedStorage@17& dyn__NickName();
      // Get instance field reference: private Fusion.CodeGen.FixedStorage@207 _properties
      [[deprecated("Use field access instead!")]] ::Fusion::CodeGen::FixedStorage@207& dyn__properties();
      // public Fusion.NetworkString`1<Fusion._16> get_NickName()
      // Offset: 0x289F590
      ::Fusion::NetworkString_1<::Fusion::_16> get_NickName();
      // public System.Void set_NickName(Fusion.NetworkString`1<Fusion._16> value)
      // Offset: 0x28A0098
      void set_NickName(::Fusion::NetworkString_1<::Fusion::_16> value);
      // public Fusion.NetworkDictionary`2<Fusion.NetworkString`1<Fusion._32>,Fusion.NetworkString`1<Fusion._32>> get_properties()
      // Offset: 0x289FAD8
      ::Fusion::NetworkDictionary_2<::Fusion::NetworkString_1<::Fusion::_32>, ::Fusion::NetworkString_1<::Fusion::_32>> get_properties();
    }; // FusionPlayerProperties/PlayerInfo
    #pragma pack(pop)
    static check_size<sizeof(FusionPlayerProperties::PlayerInfo), 68 + sizeof(::Fusion::CodeGen::FixedStorage@207)> __GlobalNamespace_FusionPlayerProperties_PlayerInfoSizeCheck;
    static_assert(sizeof(FusionPlayerProperties::PlayerInfo) == 0x380);
    public:
    // public FusionPlayerProperties/PlayerAttributeOnChanged playerAttributeOnChanged
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::FusionPlayerProperties::PlayerAttributeOnChanged* playerAttributeOnChanged;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionPlayerProperties::PlayerAttributeOnChanged*) == 0x8);
    // private Fusion.SerializableDictionary`2<Fusion.PlayerRef,FusionPlayerProperties/PlayerInfo> _netPlayerAttributes
    // Size: 0x8
    // Offset: 0x80
    ::Fusion::SerializableDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo>* netPlayerAttributes;
    // Field size check
    static_assert(sizeof(::Fusion::SerializableDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo>*) == 0x8);
    public:
    // Get static field: static Fusion.Changed`1<FusionPlayerProperties> $IL2CPP_CHANGED
    static ::Fusion::Changed_1<::GlobalNamespace::FusionPlayerProperties*> _get_$IL2CPP_CHANGED();
    // Set static field: static Fusion.Changed`1<FusionPlayerProperties> $IL2CPP_CHANGED
    static void _set_$IL2CPP_CHANGED(::Fusion::Changed_1<::GlobalNamespace::FusionPlayerProperties*> value);
    // Get static field: static Fusion.ChangedDelegate`1<FusionPlayerProperties> $IL2CPP_CHANGED_DELEGATE
    static ::Fusion::ChangedDelegate_1<::GlobalNamespace::FusionPlayerProperties*>* _get_$IL2CPP_CHANGED_DELEGATE();
    // Set static field: static Fusion.ChangedDelegate`1<FusionPlayerProperties> $IL2CPP_CHANGED_DELEGATE
    static void _set_$IL2CPP_CHANGED_DELEGATE(::Fusion::ChangedDelegate_1<::GlobalNamespace::FusionPlayerProperties*>* value);
    // Get static field: static Fusion.NetworkBehaviourCallbacks`1<FusionPlayerProperties> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static ::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::FusionPlayerProperties*>* _get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS();
    // Set static field: static Fusion.NetworkBehaviourCallbacks`1<FusionPlayerProperties> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static void _set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS(::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::FusionPlayerProperties*>* value);
    // Get instance field reference: public FusionPlayerProperties/PlayerAttributeOnChanged playerAttributeOnChanged
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionPlayerProperties::PlayerAttributeOnChanged*& dyn_playerAttributeOnChanged();
    // Get instance field reference: private Fusion.SerializableDictionary`2<Fusion.PlayerRef,FusionPlayerProperties/PlayerInfo> _netPlayerAttributes
    [[deprecated("Use field access instead!")]] ::Fusion::SerializableDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo>*& dyn__netPlayerAttributes();
    // private Fusion.NetworkDictionary`2<Fusion.PlayerRef,FusionPlayerProperties/PlayerInfo> get_netPlayerAttributes()
    // Offset: 0x289EE40
    ::Fusion::NetworkDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo> get_netPlayerAttributes();
    // public FusionPlayerProperties/PlayerInfo get_PlayerProperties()
    // Offset: 0x289EF14
    ::GlobalNamespace::FusionPlayerProperties::PlayerInfo get_PlayerProperties();
    // static public System.Void AttributesChanged(Fusion.Changed`1<FusionPlayerProperties> changed)
    // Offset: 0x289EFF0
    static void AttributesChanged(::Fusion::Changed_1<::GlobalNamespace::FusionPlayerProperties*> changed);
    // private System.Void OnAttributesChanged()
    // Offset: 0x289F054
    void OnAttributesChanged();
    // public System.Void RPC_UpdatePlayerAttributes(FusionPlayerProperties/PlayerInfo newInfo, Fusion.RpcInfo info)
    // Offset: 0x289F070
    void RPC_UpdatePlayerAttributes(::GlobalNamespace::FusionPlayerProperties::PlayerInfo newInfo, ::Fusion::RpcInfo info);
    // public System.String GetDisplayName(Fusion.PlayerRef player)
    // Offset: 0x289F69C
    ::StringW GetDisplayName(::Fusion::PlayerRef player);
    // public System.String GetLocalDisplayName()
    // Offset: 0x289F7C4
    ::StringW GetLocalDisplayName();
    // public System.Boolean GetProperty(Fusion.PlayerRef player, System.String propertyName, out System.String propertyValue)
    // Offset: 0x289F8F4
    bool GetProperty(::Fusion::PlayerRef player, ::StringW propertyName, ByRef<::StringW> propertyValue);
    // public System.Boolean PlayerHasEntry(Fusion.PlayerRef player)
    // Offset: 0x289FB68
    bool PlayerHasEntry(::Fusion::PlayerRef player);
    // public System.Void RemovePlayerEntry(Fusion.PlayerRef player)
    // Offset: 0x289FBF8
    void RemovePlayerEntry(::Fusion::PlayerRef player);
    // public System.Void .ctor()
    // Offset: 0x289FDEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionPlayerProperties* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionPlayerProperties::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionPlayerProperties*, creationType>()));
    }
    // static protected System.Void RPC_UpdatePlayerAttributes@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)
    // Offset: 0x289FF68
    static void RPC_UpdatePlayerAttributes@Invoker(::Fusion::NetworkBehaviour* behaviour, ::Fusion::SimulationMessage* message);
    // public override System.Void Spawned()
    // Offset: 0x289F5D8
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Spawned()
    void Spawned();
    // public override System.Void CopyBackingFieldsToState(System.Boolean )
    // Offset: 0x289FDF4
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyBackingFieldsToState(System.Boolean )
    void CopyBackingFieldsToState(bool param_0);
    // public override System.Void CopyStateToBackingFields()
    // Offset: 0x289FEC0
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyStateToBackingFields()
    void CopyStateToBackingFields();
  }; // FusionPlayerProperties
  #pragma pack(pop)
  static check_size<sizeof(FusionPlayerProperties), 128 + sizeof(::Fusion::SerializableDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo>*)> __GlobalNamespace_FusionPlayerPropertiesSizeCheck;
  static_assert(sizeof(FusionPlayerProperties) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionPlayerProperties::PlayerInfo, "", "FusionPlayerProperties/PlayerInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::get_netPlayerAttributes
// Il2CppName: get_netPlayerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkDictionary_2<::Fusion::PlayerRef, ::GlobalNamespace::FusionPlayerProperties::PlayerInfo> (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::get_netPlayerAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "get_netPlayerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::get_PlayerProperties
// Il2CppName: get_PlayerProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionPlayerProperties::PlayerInfo (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::get_PlayerProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "get_PlayerProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::AttributesChanged
// Il2CppName: AttributesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Changed_1<::GlobalNamespace::FusionPlayerProperties*>)>(&GlobalNamespace::FusionPlayerProperties::AttributesChanged)> {
  static const MethodInfo* get() {
    static auto* changed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Fusion", "Changed`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionPlayerProperties")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "AttributesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::OnAttributesChanged
// Il2CppName: OnAttributesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::OnAttributesChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "OnAttributesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::RPC_UpdatePlayerAttributes
// Il2CppName: RPC_UpdatePlayerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)(::GlobalNamespace::FusionPlayerProperties::PlayerInfo, ::Fusion::RpcInfo)>(&GlobalNamespace::FusionPlayerProperties::RPC_UpdatePlayerAttributes)> {
  static const MethodInfo* get() {
    static auto* newInfo = &::il2cpp_utils::GetClassFromName("", "FusionPlayerProperties/PlayerInfo")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "RpcInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "RPC_UpdatePlayerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newInfo, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::GetDisplayName
// Il2CppName: GetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::FusionPlayerProperties::*)(::Fusion::PlayerRef)>(&GlobalNamespace::FusionPlayerProperties::GetDisplayName)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "GetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::GetLocalDisplayName
// Il2CppName: GetLocalDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::GetLocalDisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "GetLocalDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::GetProperty
// Il2CppName: GetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionPlayerProperties::*)(::Fusion::PlayerRef, ::StringW, ByRef<::StringW>)>(&GlobalNamespace::FusionPlayerProperties::GetProperty)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "GetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, propertyName, propertyValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::PlayerHasEntry
// Il2CppName: PlayerHasEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionPlayerProperties::*)(::Fusion::PlayerRef)>(&GlobalNamespace::FusionPlayerProperties::PlayerHasEntry)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "PlayerHasEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::RemovePlayerEntry
// Il2CppName: RemovePlayerEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)(::Fusion::PlayerRef)>(&GlobalNamespace::FusionPlayerProperties::RemovePlayerEntry)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "RemovePlayerEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::RPC_UpdatePlayerAttributes@Invoker
// Il2CppName: RPC_UpdatePlayerAttributes@Invoker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkBehaviour*, ::Fusion::SimulationMessage*)>(&GlobalNamespace::FusionPlayerProperties::RPC_UpdatePlayerAttributes@Invoker)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "RPC_UpdatePlayerAttributes@Invoker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)(bool)>(&GlobalNamespace::FusionPlayerProperties::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionPlayerProperties::CopyStateToBackingFields
// Il2CppName: CopyStateToBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionPlayerProperties::*)()>(&GlobalNamespace::FusionPlayerProperties::CopyStateToBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionPlayerProperties*), "CopyStateToBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
