// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ScienceExperimentSceneElements
  class ScienceExperimentSceneElements;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ScienceExperimentSceneElements);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScienceExperimentSceneElements*, "", "ScienceExperimentSceneElements");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ScienceExperimentSceneElements
  // [TokenAttribute] Offset: FFFFFFFF
  class ScienceExperimentSceneElements : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ScienceExperimentSceneElements::DisableByLiquidData
    struct DisableByLiquidData;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: ScienceExperimentSceneElements/DisableByLiquidData
    // [TokenAttribute] Offset: FFFFFFFF
    struct DisableByLiquidData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Transform target
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Transform* target;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public System.Single heightOffset
      // Size: 0x4
      // Offset: 0x8
      float heightOffset;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: DisableByLiquidData
      constexpr DisableByLiquidData(::UnityEngine::Transform* target_ = {}, float heightOffset_ = {}) noexcept : target{target_}, heightOffset{heightOffset_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Transform target
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
      // Get instance field reference: public System.Single heightOffset
      [[deprecated("Use field access instead!")]] float& dyn_heightOffset();
    }; // ScienceExperimentSceneElements/DisableByLiquidData
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentSceneElements::DisableByLiquidData), 8 + sizeof(float)> __GlobalNamespace_ScienceExperimentSceneElements_DisableByLiquidDataSizeCheck;
    static_assert(sizeof(ScienceExperimentSceneElements::DisableByLiquidData) == 0xC);
    public:
    // public System.Collections.Generic.List`1<ScienceExperimentSceneElements/DisableByLiquidData> disableByLiquidList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::ScienceExperimentSceneElements::DisableByLiquidData>* disableByLiquidList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ScienceExperimentSceneElements::DisableByLiquidData>*) == 0x8);
    // public UnityEngine.ParticleSystem sodaFizzParticles
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ParticleSystem* sodaFizzParticles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem sodaEruptionParticles
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ParticleSystem* sodaEruptionParticles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<ScienceExperimentSceneElements/DisableByLiquidData> disableByLiquidList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ScienceExperimentSceneElements::DisableByLiquidData>*& dyn_disableByLiquidList();
    // Get instance field reference: public UnityEngine.ParticleSystem sodaFizzParticles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_sodaFizzParticles();
    // Get instance field reference: public UnityEngine.ParticleSystem sodaEruptionParticles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_sodaEruptionParticles();
    // private System.Void Awake()
    // Offset: 0x272FA38
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x272FA9C
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x272FAF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScienceExperimentSceneElements* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScienceExperimentSceneElements::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScienceExperimentSceneElements*, creationType>()));
    }
  }; // ScienceExperimentSceneElements
  #pragma pack(pop)
  static check_size<sizeof(ScienceExperimentSceneElements), 48 + sizeof(::UnityEngine::ParticleSystem*)> __GlobalNamespace_ScienceExperimentSceneElementsSizeCheck;
  static_assert(sizeof(ScienceExperimentSceneElements) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScienceExperimentSceneElements::DisableByLiquidData, "", "ScienceExperimentSceneElements/DisableByLiquidData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScienceExperimentSceneElements::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScienceExperimentSceneElements::*)()>(&GlobalNamespace::ScienceExperimentSceneElements::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScienceExperimentSceneElements*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScienceExperimentSceneElements::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScienceExperimentSceneElements::*)()>(&GlobalNamespace::ScienceExperimentSceneElements::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScienceExperimentSceneElements*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScienceExperimentSceneElements::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
