// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightningDispatcherEvent
  class LightningDispatcherEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RandomLocalColliders
  class RandomLocalColliders;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RandomLocalColliders);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RandomLocalColliders*, "", "RandomLocalColliders");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: RandomLocalColliders
  // [TokenAttribute] Offset: FFFFFFFF
  class RandomLocalColliders : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single minseekFreq
    // Size: 0x4
    // Offset: 0x20
    float minseekFreq;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxseekFreq
    // Size: 0x4
    // Offset: 0x24
    float maxseekFreq;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minRadias
    // Size: 0x4
    // Offset: 0x28
    float minRadias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxRadias
    // Size: 0x4
    // Offset: 0x2C
    float maxRadias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LightningDispatcherEvent colliderFound
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LightningDispatcherEvent* colliderFound;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightningDispatcherEvent*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // private System.Single timeSinceSeek
    // Size: 0x4
    // Offset: 0x40
    float timeSinceSeek;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single seekFreq
    // Size: 0x4
    // Offset: 0x44
    float seekFreq;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private SRand rand
    static ::GlobalNamespace::SRand _get_rand();
    // Set static field: static private SRand rand
    static void _set_rand(::GlobalNamespace::SRand value);
    // Get instance field reference: private System.Single minseekFreq
    [[deprecated("Use field access instead!")]] float& dyn_minseekFreq();
    // Get instance field reference: private System.Single maxseekFreq
    [[deprecated("Use field access instead!")]] float& dyn_maxseekFreq();
    // Get instance field reference: private System.Single minRadias
    [[deprecated("Use field access instead!")]] float& dyn_minRadias();
    // Get instance field reference: private System.Single maxRadias
    [[deprecated("Use field access instead!")]] float& dyn_maxRadias();
    // Get instance field reference: private LightningDispatcherEvent colliderFound
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& dyn_colliderFound();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_colliders();
    // Get instance field reference: private System.Single timeSinceSeek
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceSeek();
    // Get instance field reference: private System.Single seekFreq
    [[deprecated("Use field access instead!")]] float& dyn_seekFreq();
    // private System.Void Start()
    // Offset: 0x27A1488
    void Start();
    // private System.Void Update()
    // Offset: 0x27A1544
    void Update();
    // private System.Void seek()
    // Offset: 0x27A15E0
    void seek();
    // public System.Void .ctor()
    // Offset: 0x27A196C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomLocalColliders* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomLocalColliders*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x27A1980
    static void _cctor();
  }; // RandomLocalColliders
  #pragma pack(pop)
  static check_size<sizeof(RandomLocalColliders), 68 + sizeof(float)> __GlobalNamespace_RandomLocalCollidersSizeCheck;
  static_assert(sizeof(RandomLocalColliders) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RandomLocalColliders::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomLocalColliders::*)()>(&GlobalNamespace::RandomLocalColliders::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomLocalColliders*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RandomLocalColliders::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomLocalColliders::*)()>(&GlobalNamespace::RandomLocalColliders::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomLocalColliders*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RandomLocalColliders::seek
// Il2CppName: seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomLocalColliders::*)()>(&GlobalNamespace::RandomLocalColliders::seek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomLocalColliders*), "seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RandomLocalColliders::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RandomLocalColliders::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RandomLocalColliders::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomLocalColliders*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
