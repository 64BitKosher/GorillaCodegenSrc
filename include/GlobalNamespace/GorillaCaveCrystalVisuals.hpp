// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: CrystalVisualsPreset
  class CrystalVisualsPreset;
  // Forward declaring type: GorillaCaveCrystalSetup
  class GorillaCaveCrystalSetup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaCaveCrystalVisuals
  class GorillaCaveCrystalVisuals;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaCaveCrystalVisuals);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaCaveCrystalVisuals*, "", "GorillaCaveCrystalVisuals");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: GorillaCaveCrystalVisuals
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaCaveCrystalVisuals : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GorillaTagScripts.CrystalVisualsPreset crysalPreset
    // Size: 0x8
    // Offset: 0x20
    ::GorillaTagScripts::CrystalVisualsPreset* crysalPreset;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::CrystalVisualsPreset*) == 0x8);
    // private System.Single _lerp
    // Size: 0x4
    // Offset: 0x28
    float lerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lerp and: renderer
    char __padding1[0x4] = {};
    // public UnityEngine.MeshRenderer _renderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.Material _sharedMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* sharedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Texture2D instanceAlbedo
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture2D* instanceAlbedo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x48
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: lastState
    char __padding5[0x3] = {};
    // private System.Int32 _lastState
    // Size: 0x4
    // Offset: 0x4C
    int lastState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaTagScripts.GorillaCaveCrystalSetup _setup
    // Size: 0x8
    // Offset: 0x50
    ::GorillaTagScripts::GorillaCaveCrystalSetup* setup;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::GorillaCaveCrystalSetup*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock _block
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::MaterialPropertyBlock* block;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private System.Boolean _ranSetupOnce
    // Size: 0x1
    // Offset: 0x60
    bool ranSetupOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public GorillaTagScripts.CrystalVisualsPreset crysalPreset
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::CrystalVisualsPreset*& dyn_crysalPreset();
    // Get instance field reference: private System.Single _lerp
    [[deprecated("Use field access instead!")]] float& dyn__lerp();
    // Get instance field reference: public UnityEngine.MeshRenderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__renderer();
    // Get instance field reference: public UnityEngine.Material _sharedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__sharedMaterial();
    // Get instance field reference: public UnityEngine.Texture2D instanceAlbedo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_instanceAlbedo();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // Get instance field reference: private System.Int32 _lastState
    [[deprecated("Use field access instead!")]] int& dyn__lastState();
    // Get instance field reference: public GorillaTagScripts.GorillaCaveCrystalSetup _setup
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::GorillaCaveCrystalSetup*& dyn__setup();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _block
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn__block();
    // Get instance field reference: private System.Boolean _ranSetupOnce
    [[deprecated("Use field access instead!")]] bool& dyn__ranSetupOnce();
    // public System.Single get_lerp()
    // Offset: 0x2705EB0
    float get_lerp();
    // public System.Void set_lerp(System.Single value)
    // Offset: 0x2705EB8
    void set_lerp(float value);
    // public System.Void Setup()
    // Offset: 0x2704F48
    void Setup();
    // private System.Void Start()
    // Offset: 0x27060E8
    void Start();
    // public System.Void UpdateAlbedo()
    // Offset: 0x2704CA0
    void UpdateAlbedo();
    // private System.Void Awake()
    // Offset: 0x2706104
    void Awake();
    // private System.Void Update()
    // Offset: 0x2705EC0
    void Update();
    // public System.Void ForceUpdate()
    // Offset: 0x2704DDC
    void ForceUpdate();
    // static private System.Void InitializeCrystals()
    // Offset: 0x270611C
    static void InitializeCrystals();
    // public System.Void .ctor()
    // Offset: 0x27061F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaCaveCrystalVisuals* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaCaveCrystalVisuals::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaCaveCrystalVisuals*, creationType>()));
    }
  }; // GorillaCaveCrystalVisuals
  #pragma pack(pop)
  static check_size<sizeof(GorillaCaveCrystalVisuals), 96 + sizeof(bool)> __GlobalNamespace_GorillaCaveCrystalVisualsSizeCheck;
  static_assert(sizeof(GorillaCaveCrystalVisuals) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::get_lerp
// Il2CppName: get_lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::get_lerp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "get_lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::set_lerp
// Il2CppName: set_lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)(float)>(&GlobalNamespace::GorillaCaveCrystalVisuals::set_lerp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "set_lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::UpdateAlbedo
// Il2CppName: UpdateAlbedo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::UpdateAlbedo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "UpdateAlbedo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCaveCrystalVisuals::*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::InitializeCrystals
// Il2CppName: InitializeCrystals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaCaveCrystalVisuals::InitializeCrystals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCaveCrystalVisuals*), "InitializeCrystals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCaveCrystalVisuals::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
