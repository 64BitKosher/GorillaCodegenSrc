// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BacktraceManager
  class BacktraceManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BacktraceManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BacktraceManager*, "", "BacktraceManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BacktraceManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BacktraceManager::$$c
    class $$c;
    public:
    // public System.Double backtraceSampleRate
    // Size: 0x8
    // Offset: 0x20
    double backtraceSampleRate;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: public System.Double backtraceSampleRate
    [[deprecated("Use field access instead!")]] double& dyn_backtraceSampleRate();
    // public System.Void Awake()
    // Offset: 0x2772FB8
    void Awake();
    // private System.Void Start()
    // Offset: 0x277306C
    void Start();
    // public System.Void .ctor()
    // Offset: 0x27731F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BacktraceManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceManager*, creationType>()));
    }
    // private Backtrace.Unity.Model.BacktraceData <Awake>b__1_0(Backtrace.Unity.Model.BacktraceData data)
    // Offset: 0x2773214
    ::Backtrace::Unity::Model::BacktraceData* $Awake$b__1_0(::Backtrace::Unity::Model::BacktraceData* data);
    // private System.Void <Start>b__2_0(System.String data)
    // Offset: 0x277328C
    void $Start$b__2_0(::StringW data);
  }; // BacktraceManager
  #pragma pack(pop)
  static check_size<sizeof(BacktraceManager), 32 + sizeof(double)> __GlobalNamespace_BacktraceManagerSizeCheck;
  static_assert(sizeof(BacktraceManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BacktraceManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BacktraceManager::*)()>(&GlobalNamespace::BacktraceManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BacktraceManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BacktraceManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BacktraceManager::*)()>(&GlobalNamespace::BacktraceManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BacktraceManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BacktraceManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BacktraceManager::$Awake$b__1_0
// Il2CppName: <Awake>b__1_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceData* (GlobalNamespace::BacktraceManager::*)(::Backtrace::Unity::Model::BacktraceData*)>(&GlobalNamespace::BacktraceManager::$Awake$b__1_0)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BacktraceManager*), "<Awake>b__1_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BacktraceManager::$Start$b__2_0
// Il2CppName: <Start>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BacktraceManager::*)(::StringW)>(&GlobalNamespace::BacktraceManager::$Start$b__2_0)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BacktraceManager*), "<Start>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
