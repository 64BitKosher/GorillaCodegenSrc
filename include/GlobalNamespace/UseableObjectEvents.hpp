// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PhotonEvent
  class PhotonEvent;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UseableObjectEvents
  class UseableObjectEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UseableObjectEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UseableObjectEvents*, "", "UseableObjectEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UseableObjectEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class UseableObjectEvents : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.String PlayerIdString
    // Size: 0x8
    // Offset: 0x20
    ::StringW PlayerIdString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 PlayerId
    // Size: 0x4
    // Offset: 0x28
    int PlayerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: PlayerId and: Activate
    char __padding1[0x4] = {};
    // public PhotonEvent Activate
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::PhotonEvent* Activate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhotonEvent*) == 0x8);
    // public PhotonEvent Deactivate
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::PhotonEvent* Deactivate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhotonEvent*) == 0x8);
    public:
    // Get instance field reference: private System.String PlayerIdString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PlayerIdString();
    // Get instance field reference: private System.Int32 PlayerId
    [[deprecated("Use field access instead!")]] int& dyn_PlayerId();
    // Get instance field reference: public PhotonEvent Activate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& dyn_Activate();
    // Get instance field reference: public PhotonEvent Deactivate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& dyn_Deactivate();
    // public System.Void Init(Photon.Realtime.Player player)
    // Offset: 0x26DC320
    void Init(::Photon::Realtime::Player* player);
    // private System.Void OnEnable()
    // Offset: 0x26DC8E4
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x26DC918
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x26DC94C
    void OnDestroy();
    // private System.Void DisposeEvents()
    // Offset: 0x26DC88C
    void DisposeEvents();
    // public System.Void .ctor()
    // Offset: 0x26DC950
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UseableObjectEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UseableObjectEvents*, creationType>()));
    }
  }; // UseableObjectEvents
  #pragma pack(pop)
  static check_size<sizeof(UseableObjectEvents), 56 + sizeof(::GlobalNamespace::PhotonEvent*)> __GlobalNamespace_UseableObjectEventsSizeCheck;
  static_assert(sizeof(UseableObjectEvents) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UseableObjectEvents::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::UseableObjectEvents::Init)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UseableObjectEvents*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UseableObjectEvents::*)()>(&GlobalNamespace::UseableObjectEvents::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UseableObjectEvents*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UseableObjectEvents::*)()>(&GlobalNamespace::UseableObjectEvents::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UseableObjectEvents*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UseableObjectEvents::*)()>(&GlobalNamespace::UseableObjectEvents::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UseableObjectEvents*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::DisposeEvents
// Il2CppName: DisposeEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UseableObjectEvents::*)()>(&GlobalNamespace::UseableObjectEvents::DisposeEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UseableObjectEvents*), "DisposeEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UseableObjectEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
