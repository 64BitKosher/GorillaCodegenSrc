// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HeadersVector
#include "GlobalNamespace/HeadersVector.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MothershipHttpHeader
  class MothershipHttpHeader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeadersVector::HeadersVectorEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeadersVector::HeadersVectorEnumerator*, "", "HeadersVector/HeadersVectorEnumerator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: HeadersVector/HeadersVectorEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class HeadersVector::HeadersVectorEnumerator : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>*/ {
    public:
    public:
    // private HeadersVector collectionRef
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::HeadersVector* collectionRef;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HeadersVector*) == 0x8);
    // private System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x18
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentIndex and: currentObject
    char __padding1[0x4] = {};
    // private System.Object currentObject
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* currentObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 currentSize
    // Size: 0x4
    // Offset: 0x28
    int currentSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>
    operator ::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::GlobalNamespace::MothershipHttpHeader*>*>(this);
    }
    // Get instance field reference: private HeadersVector collectionRef
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadersVector*& dyn_collectionRef();
    // Get instance field reference: private System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: private System.Object currentObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_currentObject();
    // Get instance field reference: private System.Int32 currentSize
    [[deprecated("Use field access instead!")]] int& dyn_currentSize();
    // public System.Void .ctor(HeadersVector collection)
    // Offset: 0x2676054
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeadersVector::HeadersVectorEnumerator* New_ctor(::GlobalNamespace::HeadersVector* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadersVector::HeadersVectorEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeadersVector::HeadersVectorEnumerator*, creationType>(collection)));
    }
    // public MothershipHttpHeader get_Current()
    // Offset: 0x26762C8
    ::GlobalNamespace::MothershipHttpHeader* get_Current();
    // private System.Object global::System.Collections.IEnumerator.get_Current()
    // Offset: 0x26763E4
    ::Il2CppObject* global::System_Collections_IEnumerator_get_Current();
    // public System.Boolean MoveNext()
    // Offset: 0x26763E8
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x2676460
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x26764F8
    void Dispose();
  }; // HeadersVector/HeadersVectorEnumerator
  #pragma pack(pop)
  static check_size<sizeof(HeadersVector::HeadersVectorEnumerator), 40 + sizeof(int)> __GlobalNamespace_HeadersVector_HeadersVectorEnumeratorSizeCheck;
  static_assert(sizeof(HeadersVector::HeadersVectorEnumerator) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MothershipHttpHeader* (GlobalNamespace::HeadersVector::HeadersVectorEnumerator::*)()>(&GlobalNamespace::HeadersVector::HeadersVectorEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector::HeadersVectorEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::global::System_Collections_IEnumerator_get_Current
// Il2CppName: global::System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::HeadersVector::HeadersVectorEnumerator::*)()>(&GlobalNamespace::HeadersVector::HeadersVectorEnumerator::global::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector::HeadersVectorEnumerator*), "global::System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::HeadersVector::HeadersVectorEnumerator::*)()>(&GlobalNamespace::HeadersVector::HeadersVectorEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector::HeadersVectorEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadersVector::HeadersVectorEnumerator::*)()>(&GlobalNamespace::HeadersVector::HeadersVectorEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector::HeadersVectorEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadersVector::HeadersVectorEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadersVector::HeadersVectorEnumerator::*)()>(&GlobalNamespace::HeadersVector::HeadersVectorEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadersVector::HeadersVectorEnumerator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
