// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TriggerEventNotifier
  class TriggerEventNotifier;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CompositeTriggerEvents
  class CompositeTriggerEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CompositeTriggerEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CompositeTriggerEvents*, "", "CompositeTriggerEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: CompositeTriggerEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class CompositeTriggerEvents : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::CompositeTriggerEvents::TriggerEvent
    class TriggerEvent;
    public:
    // private CompositeTriggerEvents/TriggerEvent CompositeTriggerEnter
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* CompositeTriggerEnter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*) == 0x8);
    // private CompositeTriggerEvents/TriggerEvent CompositeTriggerExit
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* CompositeTriggerExit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> individualTriggerColliders
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* individualTriggerColliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // private System.Collections.Generic.List`1<TriggerEventNotifier> triggerEventNotifiers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::TriggerEventNotifier*>* triggerEventNotifiers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::TriggerEventNotifier*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Collider,System.Int32> overlapMask
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, int>* overlapMask;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, int>*) == 0x8);
    public:
    // Get instance field reference: private CompositeTriggerEvents/TriggerEvent CompositeTriggerEnter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*& dyn_CompositeTriggerEnter();
    // Get instance field reference: private CompositeTriggerEvents/TriggerEvent CompositeTriggerExit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*& dyn_CompositeTriggerExit();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> individualTriggerColliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_individualTriggerColliders();
    // Get instance field reference: private System.Collections.Generic.List`1<TriggerEventNotifier> triggerEventNotifiers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::TriggerEventNotifier*>*& dyn_triggerEventNotifiers();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Collider,System.Int32> overlapMask
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, int>*& dyn_overlapMask();
    // public System.Void add_CompositeTriggerEnter(CompositeTriggerEvents/TriggerEvent value)
    // Offset: 0x277488C
    void add_CompositeTriggerEnter(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* value);
    // public System.Void remove_CompositeTriggerEnter(CompositeTriggerEvents/TriggerEvent value)
    // Offset: 0x2774928
    void remove_CompositeTriggerEnter(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* value);
    // public System.Void add_CompositeTriggerExit(CompositeTriggerEvents/TriggerEvent value)
    // Offset: 0x27749C4
    void add_CompositeTriggerExit(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* value);
    // public System.Void remove_CompositeTriggerExit(CompositeTriggerEvents/TriggerEvent value)
    // Offset: 0x2774A60
    void remove_CompositeTriggerExit(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent* value);
    // private System.Void Awake()
    // Offset: 0x2774AFC
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2774FB8
    void OnDestroy();
    // public System.Void TriggerEnterReceiver(TriggerEventNotifier notifier, UnityEngine.Collider other)
    // Offset: 0x277528C
    void TriggerEnterReceiver(::GlobalNamespace::TriggerEventNotifier* notifier, ::UnityEngine::Collider* other);
    // public System.Void TriggerExitReceiver(TriggerEventNotifier notifier, UnityEngine.Collider other)
    // Offset: 0x27753AC
    void TriggerExitReceiver(::GlobalNamespace::TriggerEventNotifier* notifier, ::UnityEngine::Collider* other);
    // public System.Void CompositeTriggerEnterReceiver(UnityEngine.Collider other)
    // Offset: 0x27754BC
    void CompositeTriggerEnterReceiver(::UnityEngine::Collider* other);
    // public System.Void CompositeTriggerExitReceiver(UnityEngine.Collider other)
    // Offset: 0x27754D8
    void CompositeTriggerExitReceiver(::UnityEngine::Collider* other);
    // private System.Boolean TestMaskIndex(System.Int32 mask, System.Int32 index)
    // Offset: 0x27754F4
    bool TestMaskIndex(int mask, int index);
    // private System.Int32 SetMaskIndexTrue(System.Int32 mask, System.Int32 index)
    // Offset: 0x277539C
    int SetMaskIndexTrue(int mask, int index);
    // private System.Int32 SetMaskIndexFalse(System.Int32 mask, System.Int32 index)
    // Offset: 0x27754AC
    int SetMaskIndexFalse(int mask, int index);
    // private System.String MaskToString(System.Int32 mask)
    // Offset: 0x2775500
    ::StringW MaskToString(int mask);
    // public System.Void .ctor()
    // Offset: 0x277559C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompositeTriggerEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CompositeTriggerEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompositeTriggerEvents*, creationType>()));
    }
  }; // CompositeTriggerEvents
  #pragma pack(pop)
  static check_size<sizeof(CompositeTriggerEvents), 64 + sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, int>*)> __GlobalNamespace_CompositeTriggerEventsSizeCheck;
  static_assert(sizeof(CompositeTriggerEvents) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::add_CompositeTriggerEnter
// Il2CppName: add_CompositeTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*)>(&GlobalNamespace::CompositeTriggerEvents::add_CompositeTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "CompositeTriggerEvents/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "add_CompositeTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::remove_CompositeTriggerEnter
// Il2CppName: remove_CompositeTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*)>(&GlobalNamespace::CompositeTriggerEvents::remove_CompositeTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "CompositeTriggerEvents/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "remove_CompositeTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::add_CompositeTriggerExit
// Il2CppName: add_CompositeTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*)>(&GlobalNamespace::CompositeTriggerEvents::add_CompositeTriggerExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "CompositeTriggerEvents/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "add_CompositeTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::remove_CompositeTriggerExit
// Il2CppName: remove_CompositeTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::CompositeTriggerEvents::TriggerEvent*)>(&GlobalNamespace::CompositeTriggerEvents::remove_CompositeTriggerExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "CompositeTriggerEvents/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "remove_CompositeTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)()>(&GlobalNamespace::CompositeTriggerEvents::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)()>(&GlobalNamespace::CompositeTriggerEvents::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::TriggerEnterReceiver
// Il2CppName: TriggerEnterReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::TriggerEventNotifier*, ::UnityEngine::Collider*)>(&GlobalNamespace::CompositeTriggerEvents::TriggerEnterReceiver)> {
  static const MethodInfo* get() {
    static auto* notifier = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "TriggerEnterReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notifier, other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::TriggerExitReceiver
// Il2CppName: TriggerExitReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::GlobalNamespace::TriggerEventNotifier*, ::UnityEngine::Collider*)>(&GlobalNamespace::CompositeTriggerEvents::TriggerExitReceiver)> {
  static const MethodInfo* get() {
    static auto* notifier = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "TriggerExitReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notifier, other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::CompositeTriggerEnterReceiver
// Il2CppName: CompositeTriggerEnterReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::UnityEngine::Collider*)>(&GlobalNamespace::CompositeTriggerEvents::CompositeTriggerEnterReceiver)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "CompositeTriggerEnterReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::CompositeTriggerExitReceiver
// Il2CppName: CompositeTriggerExitReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CompositeTriggerEvents::*)(::UnityEngine::Collider*)>(&GlobalNamespace::CompositeTriggerEvents::CompositeTriggerExitReceiver)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "CompositeTriggerExitReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::TestMaskIndex
// Il2CppName: TestMaskIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CompositeTriggerEvents::*)(int, int)>(&GlobalNamespace::CompositeTriggerEvents::TestMaskIndex)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "TestMaskIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::SetMaskIndexTrue
// Il2CppName: SetMaskIndexTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::CompositeTriggerEvents::*)(int, int)>(&GlobalNamespace::CompositeTriggerEvents::SetMaskIndexTrue)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "SetMaskIndexTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::SetMaskIndexFalse
// Il2CppName: SetMaskIndexFalse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::CompositeTriggerEvents::*)(int, int)>(&GlobalNamespace::CompositeTriggerEvents::SetMaskIndexFalse)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "SetMaskIndexFalse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::MaskToString
// Il2CppName: MaskToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CompositeTriggerEvents::*)(int)>(&GlobalNamespace::CompositeTriggerEvents::MaskToString)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CompositeTriggerEvents*), "MaskToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CompositeTriggerEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
