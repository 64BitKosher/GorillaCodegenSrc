// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LegalAgreements
#include "GlobalNamespace/LegalAgreements.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::CloudScriptModels
namespace PlayFab::CloudScriptModels {
  // Forward declaring type: ExecuteFunctionResult
  class ExecuteFunctionResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0*, "", "LegalAgreements/<>c__DisplayClass28_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: LegalAgreements/<>c__DisplayClass28_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class LegalAgreements::$$c__DisplayClass28_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 state
    // Size: 0x4
    // Offset: 0x10
    int state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return state;
    }
    // Get instance field reference: public System.Int32 state
    [[deprecated("Use field access instead!")]] int& dyn_state();
    // public System.Void .ctor()
    // Offset: 0x27539F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegalAgreements::$$c__DisplayClass28_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegalAgreements::$$c__DisplayClass28_0*, creationType>()));
    }
    // System.Void <SubmitAcceptedAgreements>b__0(PlayFab.CloudScriptModels.ExecuteFunctionResult result)
    // Offset: 0x27539FC
    void $SubmitAcceptedAgreements$b__0(::PlayFab::CloudScriptModels::ExecuteFunctionResult* result);
    // System.Void <SubmitAcceptedAgreements>b__1(PlayFab.PlayFabError error)
    // Offset: 0x2753A08
    void $SubmitAcceptedAgreements$b__1(::PlayFab::PlayFabError* error);
  }; // LegalAgreements/<>c__DisplayClass28_0
  #pragma pack(pop)
  static check_size<sizeof(LegalAgreements::$$c__DisplayClass28_0), 16 + sizeof(int)> __GlobalNamespace_LegalAgreements_$$c__DisplayClass28_0SizeCheck;
  static_assert(sizeof(LegalAgreements::$$c__DisplayClass28_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__0
// Il2CppName: <SubmitAcceptedAgreements>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::*)(::PlayFab::CloudScriptModels::ExecuteFunctionResult*)>(&GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0*), "<SubmitAcceptedAgreements>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__1
// Il2CppName: <SubmitAcceptedAgreements>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::*)(::PlayFab::PlayFabError*)>(&GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__1)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0*), "<SubmitAcceptedAgreements>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
