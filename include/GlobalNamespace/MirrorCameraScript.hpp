// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MirrorCameraScript
  class MirrorCameraScript;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MirrorCameraScript);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MirrorCameraScript*, "", "MirrorCameraScript");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MirrorCameraScript
  // [TokenAttribute] Offset: FFFFFFFF
  class MirrorCameraScript : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Camera mainCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.Camera mirrorCamera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* mirrorCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Camera mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mainCamera();
    // Get instance field reference: public UnityEngine.Camera mirrorCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mirrorCamera();
    // private System.Void Start()
    // Offset: 0x288DD94
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x288DECC
    void OnDestroy();
    // private System.Void MirrorCullingMaskChanged(System.Int32 newMask)
    // Offset: 0x288E018
    void MirrorCullingMaskChanged(int newMask);
    // private System.Void LateUpdate()
    // Offset: 0x288E034
    void LateUpdate();
    // private System.Void CalculateReflectionMatrix(ref UnityEngine.Matrix4x4 reflectionMatrix, UnityEngine.Vector4 plane)
    // Offset: 0x288E5C4
    void CalculateReflectionMatrix(ByRef<::UnityEngine::Matrix4x4> reflectionMatrix, ::UnityEngine::Vector4 plane);
    // private UnityEngine.Vector4 CameraSpacePlane(UnityEngine.Camera cam, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal, System.Single sideSign)
    // Offset: 0x288E65C
    ::UnityEngine::Vector4 CameraSpacePlane(::UnityEngine::Camera* cam, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 normal, float sideSign);
    // public System.Void .ctor()
    // Offset: 0x288E808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MirrorCameraScript* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MirrorCameraScript*, creationType>()));
    }
  }; // MirrorCameraScript
  #pragma pack(pop)
  static check_size<sizeof(MirrorCameraScript), 40 + sizeof(::UnityEngine::Camera*)> __GlobalNamespace_MirrorCameraScriptSizeCheck;
  static_assert(sizeof(MirrorCameraScript) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirrorCameraScript::*)()>(&GlobalNamespace::MirrorCameraScript::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirrorCameraScript::*)()>(&GlobalNamespace::MirrorCameraScript::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::MirrorCullingMaskChanged
// Il2CppName: MirrorCullingMaskChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirrorCameraScript::*)(int)>(&GlobalNamespace::MirrorCameraScript::MirrorCullingMaskChanged)> {
  static const MethodInfo* get() {
    static auto* newMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "MirrorCullingMaskChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirrorCameraScript::*)()>(&GlobalNamespace::MirrorCameraScript::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::CalculateReflectionMatrix
// Il2CppName: CalculateReflectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirrorCameraScript::*)(ByRef<::UnityEngine::Matrix4x4>, ::UnityEngine::Vector4)>(&GlobalNamespace::MirrorCameraScript::CalculateReflectionMatrix)> {
  static const MethodInfo* get() {
    static auto* reflectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "CalculateReflectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reflectionMatrix, plane});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::CameraSpacePlane
// Il2CppName: CameraSpacePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::MirrorCameraScript::*)(::UnityEngine::Camera*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::MirrorCameraScript::CameraSpacePlane)> {
  static const MethodInfo* get() {
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* sideSign = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirrorCameraScript*), "CameraSpacePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cam, pos, normal, sideSign});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirrorCameraScript::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
