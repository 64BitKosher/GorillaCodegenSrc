// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
// Including type: GTSubZone
#include "GlobalNamespace/GTSubZone.hpp"
// Including type: GroupJoinZone
#include "GlobalNamespace/GroupJoinZone.hpp"
// Including type: ZoneNode
#include "GlobalNamespace/ZoneNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneDef
  class ZoneDef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneDef);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneDef*, "", "ZoneDef");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: ZoneDef
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneDef : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GTZone zoneId
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GTZone zoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // public GTSubZone subZoneId
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::GTSubZone subZoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTSubZone) == 0x4);
    // public GroupJoinZone groupZone
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::GroupJoinZone groupZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // public GroupJoinZone excludeGroupZone
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::GroupJoinZone excludeGroupZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // public System.Boolean trackEnter
    // Size: 0x1
    // Offset: 0x30
    bool trackEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean trackExit
    // Size: 0x1
    // Offset: 0x31
    bool trackExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean trackStay
    // Size: 0x1
    // Offset: 0x32
    bool trackStay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trackStay and: priority
    char __padding6[0x1] = {};
    // public System.Int32 priority
    // Size: 0x4
    // Offset: 0x34
    int priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.BoxCollider[] colliders
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::BoxCollider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoxCollider*>) == 0x8);
    // public ZoneNode[] nodes
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::ZoneNode> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneNode>) == 0x8);
    // public UnityEngine.Bounds bounds
    // Size: 0x18
    // Offset: 0x48
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public ZoneDef[] zoneOverlaps
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GlobalNamespace::ZoneDef*> zoneOverlaps;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneDef*>) == 0x8);
    public:
    // Get instance field reference: public GTZone zoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zoneId();
    // Get instance field reference: public GTSubZone subZoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& dyn_subZoneId();
    // Get instance field reference: public GroupJoinZone groupZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_groupZone();
    // Get instance field reference: public GroupJoinZone excludeGroupZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_excludeGroupZone();
    // Get instance field reference: public System.Boolean trackEnter
    [[deprecated("Use field access instead!")]] bool& dyn_trackEnter();
    // Get instance field reference: public System.Boolean trackExit
    [[deprecated("Use field access instead!")]] bool& dyn_trackExit();
    // Get instance field reference: public System.Boolean trackStay
    [[deprecated("Use field access instead!")]] bool& dyn_trackStay();
    // Get instance field reference: public System.Int32 priority
    [[deprecated("Use field access instead!")]] int& dyn_priority();
    // Get instance field reference: public UnityEngine.BoxCollider[] colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoxCollider*>& dyn_colliders();
    // Get instance field reference: public ZoneNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneNode>& dyn_nodes();
    // Get instance field reference: public UnityEngine.Bounds bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bounds();
    // Get instance field reference: public ZoneDef[] zoneOverlaps
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneDef*>& dyn_zoneOverlaps();
    // public System.Void .ctor()
    // Offset: 0x27A7548
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneDef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneDef*, creationType>()));
    }
  }; // ZoneDef
  #pragma pack(pop)
  static check_size<sizeof(ZoneDef), 96 + sizeof(::ArrayW<::GlobalNamespace::ZoneDef*>)> __GlobalNamespace_ZoneDefSizeCheck;
  static_assert(sizeof(ZoneDef) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneDef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
