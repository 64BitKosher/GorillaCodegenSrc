// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: TransferrableObject/ItemStates
// Already included the same include: GlobalNamespace/TransferrableObject.hpp
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EquipmentInteractor
  class EquipmentInteractor;
  // Forward declaring type: VRRig
  class VRRig;
  // Skipping declaration: BodyDockPositions because it is already included!
  // Forward declaring type: VRRigAnchorOverrides
  class VRRigAnchorOverrides;
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegacyTransferrableObject
  class LegacyTransferrableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegacyTransferrableObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegacyTransferrableObject*, "", "LegacyTransferrableObject");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: LegacyTransferrableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class LegacyTransferrableObject : public ::GlobalNamespace::HoldableObject {
    public:
    // Nested type: ::GlobalNamespace::LegacyTransferrableObject::InterpolateState
    struct InterpolateState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LegacyTransferrableObject/InterpolateState
    // [TokenAttribute] Offset: FFFFFFFF
    struct InterpolateState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InterpolateState
      constexpr InterpolateState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LegacyTransferrableObject/InterpolateState None
      static constexpr const int None = 0;
      // Get static field: static public LegacyTransferrableObject/InterpolateState None
      static ::GlobalNamespace::LegacyTransferrableObject::InterpolateState _get_None();
      // Set static field: static public LegacyTransferrableObject/InterpolateState None
      static void _set_None(::GlobalNamespace::LegacyTransferrableObject::InterpolateState value);
      // static field const value: static public LegacyTransferrableObject/InterpolateState Interpolating
      static constexpr const int Interpolating = 1;
      // Get static field: static public LegacyTransferrableObject/InterpolateState Interpolating
      static ::GlobalNamespace::LegacyTransferrableObject::InterpolateState _get_Interpolating();
      // Set static field: static public LegacyTransferrableObject/InterpolateState Interpolating
      static void _set_Interpolating(::GlobalNamespace::LegacyTransferrableObject::InterpolateState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LegacyTransferrableObject/InterpolateState
    #pragma pack(pop)
    static check_size<sizeof(LegacyTransferrableObject::InterpolateState), 0 + sizeof(int)> __GlobalNamespace_LegacyTransferrableObject_InterpolateStateSizeCheck;
    static_assert(sizeof(LegacyTransferrableObject::InterpolateState) == 0x4);
    public:
    // protected EquipmentInteractor interactor
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::EquipmentInteractor* interactor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EquipmentInteractor*) == 0x8);
    // public VRRig myRig
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public VRRig myOnlineRig
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::VRRig* myOnlineRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public System.Boolean latched
    // Size: 0x1
    // Offset: 0x40
    bool latched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: latched and: indexTrigger
    char __padding3[0x3] = {};
    // private System.Single indexTrigger
    // Size: 0x4
    // Offset: 0x44
    float indexTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean testActivate
    // Size: 0x1
    // Offset: 0x48
    bool testActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testDeactivate
    // Size: 0x1
    // Offset: 0x49
    bool testDeactivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testDeactivate and: myThreshold
    char __padding6[0x2] = {};
    // public System.Single myThreshold
    // Size: 0x4
    // Offset: 0x4C
    float myThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hysterisis
    // Size: 0x4
    // Offset: 0x50
    float hysterisis;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean flipOnXForLeftHand
    // Size: 0x1
    // Offset: 0x54
    bool flipOnXForLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipOnYForLeftHand
    // Size: 0x1
    // Offset: 0x55
    bool flipOnYForLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipOnXForLeftArm
    // Size: 0x1
    // Offset: 0x56
    bool flipOnXForLeftArm;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableStealing
    // Size: 0x1
    // Offset: 0x57
    bool disableStealing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private TransferrableObject/PositionState initState
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::TransferrableObject::PositionState initState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public TransferrableObject/ItemStates itemState
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::TransferrableObject::ItemStates itemState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::ItemStates) == 0x4);
    // public BodyDockPositions/DropPositions storedZone
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::BodyDockPositions::DropPositions storedZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions::DropPositions) == 0x4);
    // protected TransferrableObject/PositionState previousState
    // Size: 0x4
    // Offset: 0x64
    ::GlobalNamespace::TransferrableObject::PositionState previousState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public TransferrableObject/PositionState currentState
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::TransferrableObject::PositionState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public BodyDockPositions/DropPositions dockPositions
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::BodyDockPositions::DropPositions dockPositions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions::DropPositions) == 0x4);
    // public VRRig targetRig
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::VRRig* targetRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public BodyDockPositions targetDock
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::BodyDockPositions* targetDock;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions*) == 0x8);
    // private VRRigAnchorOverrides anchorOverrides
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::VRRigAnchorOverrides* anchorOverrides;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRigAnchorOverrides*) == 0x8);
    // public System.Boolean canAutoGrabLeft
    // Size: 0x1
    // Offset: 0x88
    bool canAutoGrabLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean canAutoGrabRight
    // Size: 0x1
    // Offset: 0x89
    bool canAutoGrabRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canAutoGrabRight and: objectIndex
    char __padding23[0x2] = {};
    // public System.Int32 objectIndex
    // Size: 0x4
    // Offset: 0x8C
    int objectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Transform anchor
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* anchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public InteractionPoint gripInteractor
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::InteractionPoint* gripInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InteractionPoint*) == 0x8);
    // public UnityEngine.Transform grabAnchor
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* grabAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Int32 myIndex
    // Size: 0x4
    // Offset: 0xA8
    int myIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: myIndex and: gameObjectsActiveOnlyWhileHeld
    char __padding28[0x4] = {};
    // public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::GameObject*> gameObjectsActiveOnlyWhileHeld;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // protected UnityEngine.GameObject worldShareableInstance
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* worldShareableInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single interpTime
    // Size: 0x4
    // Offset: 0xC0
    float interpTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single interpDt
    // Size: 0x4
    // Offset: 0xC4
    float interpDt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 interpStartPos
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 interpStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion interpStartRot
    // Size: 0x10
    // Offset: 0xD4
    ::UnityEngine::Quaternion interpStartRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // protected System.Int32 enabledOnFrame
    // Size: 0x4
    // Offset: 0xE4
    int enabledOnFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 initOffset
    // Size: 0xC
    // Offset: 0xE8
    ::UnityEngine::Vector3 initOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion initRotation
    // Size: 0x10
    // Offset: 0xF4
    ::UnityEngine::Quaternion initRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean canDrop
    // Size: 0x1
    // Offset: 0x104
    bool canDrop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shareable
    // Size: 0x1
    // Offset: 0x105
    bool shareable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean detatchOnGrab
    // Size: 0x1
    // Offset: 0x106
    bool detatchOnGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wasHover
    // Size: 0x1
    // Offset: 0x107
    bool wasHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isHover
    // Size: 0x1
    // Offset: 0x108
    bool isHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean disableItem
    // Size: 0x1
    // Offset: 0x109
    bool disableItem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableItem and: interpState
    char __padding43[0x2] = {};
    // public LegacyTransferrableObject/InterpolateState interpState
    // Size: 0x4
    // Offset: 0x10C
    ::GlobalNamespace::LegacyTransferrableObject::InterpolateState interpState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LegacyTransferrableObject::InterpolateState) == 0x4);
    public:
    // static field const value: static public System.Int32 kPositionStateCount
    static constexpr const int kPositionStateCount = 8;
    // Get static field: static public System.Int32 kPositionStateCount
    static int _get_kPositionStateCount();
    // Set static field: static public System.Int32 kPositionStateCount
    static void _set_kPositionStateCount(int value);
    // Get instance field reference: protected EquipmentInteractor interactor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& dyn_interactor();
    // Get instance field reference: public VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: public VRRig myOnlineRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myOnlineRig();
    // Get instance field reference: public System.Boolean latched
    [[deprecated("Use field access instead!")]] bool& dyn_latched();
    // Get instance field reference: private System.Single indexTrigger
    [[deprecated("Use field access instead!")]] float& dyn_indexTrigger();
    // Get instance field reference: public System.Boolean testActivate
    [[deprecated("Use field access instead!")]] bool& dyn_testActivate();
    // Get instance field reference: public System.Boolean testDeactivate
    [[deprecated("Use field access instead!")]] bool& dyn_testDeactivate();
    // Get instance field reference: public System.Single myThreshold
    [[deprecated("Use field access instead!")]] float& dyn_myThreshold();
    // Get instance field reference: public System.Single hysterisis
    [[deprecated("Use field access instead!")]] float& dyn_hysterisis();
    // Get instance field reference: public System.Boolean flipOnXForLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnXForLeftHand();
    // Get instance field reference: public System.Boolean flipOnYForLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnYForLeftHand();
    // Get instance field reference: public System.Boolean flipOnXForLeftArm
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnXForLeftArm();
    // Get instance field reference: public System.Boolean disableStealing
    [[deprecated("Use field access instead!")]] bool& dyn_disableStealing();
    // Get instance field reference: private TransferrableObject/PositionState initState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_initState();
    // Get instance field reference: public TransferrableObject/ItemStates itemState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& dyn_itemState();
    // Get instance field reference: public BodyDockPositions/DropPositions storedZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& dyn_storedZone();
    // Get instance field reference: protected TransferrableObject/PositionState previousState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_previousState();
    // Get instance field reference: public TransferrableObject/PositionState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_currentState();
    // Get instance field reference: public BodyDockPositions/DropPositions dockPositions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& dyn_dockPositions();
    // Get instance field reference: public VRRig targetRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetRig();
    // Get instance field reference: public BodyDockPositions targetDock
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& dyn_targetDock();
    // Get instance field reference: private VRRigAnchorOverrides anchorOverrides
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigAnchorOverrides*& dyn_anchorOverrides();
    // Get instance field reference: public System.Boolean canAutoGrabLeft
    [[deprecated("Use field access instead!")]] bool& dyn_canAutoGrabLeft();
    // Get instance field reference: public System.Boolean canAutoGrabRight
    [[deprecated("Use field access instead!")]] bool& dyn_canAutoGrabRight();
    // Get instance field reference: public System.Int32 objectIndex
    [[deprecated("Use field access instead!")]] int& dyn_objectIndex();
    // Get instance field reference: public UnityEngine.Transform anchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_anchor();
    // Get instance field reference: public InteractionPoint gripInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& dyn_gripInteractor();
    // Get instance field reference: public UnityEngine.Transform grabAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_grabAnchor();
    // Get instance field reference: public System.Int32 myIndex
    [[deprecated("Use field access instead!")]] int& dyn_myIndex();
    // Get instance field reference: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjectsActiveOnlyWhileHeld();
    // Get instance field reference: protected UnityEngine.GameObject worldShareableInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_worldShareableInstance();
    // Get instance field reference: private System.Single interpTime
    [[deprecated("Use field access instead!")]] float& dyn_interpTime();
    // Get instance field reference: private System.Single interpDt
    [[deprecated("Use field access instead!")]] float& dyn_interpDt();
    // Get instance field reference: private UnityEngine.Vector3 interpStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_interpStartPos();
    // Get instance field reference: private UnityEngine.Quaternion interpStartRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_interpStartRot();
    // Get instance field reference: protected System.Int32 enabledOnFrame
    [[deprecated("Use field access instead!")]] int& dyn_enabledOnFrame();
    // Get instance field reference: private UnityEngine.Vector3 initOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initOffset();
    // Get instance field reference: private UnityEngine.Quaternion initRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initRotation();
    // Get instance field reference: public System.Boolean canDrop
    [[deprecated("Use field access instead!")]] bool& dyn_canDrop();
    // Get instance field reference: public System.Boolean shareable
    [[deprecated("Use field access instead!")]] bool& dyn_shareable();
    // Get instance field reference: public System.Boolean detatchOnGrab
    [[deprecated("Use field access instead!")]] bool& dyn_detatchOnGrab();
    // Get instance field reference: private System.Boolean wasHover
    [[deprecated("Use field access instead!")]] bool& dyn_wasHover();
    // Get instance field reference: private System.Boolean isHover
    [[deprecated("Use field access instead!")]] bool& dyn_isHover();
    // Get instance field reference: private System.Boolean disableItem
    [[deprecated("Use field access instead!")]] bool& dyn_disableItem();
    // Get instance field reference: public LegacyTransferrableObject/InterpolateState interpState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyTransferrableObject::InterpolateState& dyn_interpState();
    // protected System.Void Awake()
    // Offset: 0x26B47AC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x26B4800
    void Start();
    // private System.Void SpawnShareableObject()
    // Offset: 0x26B4B10
    void SpawnShareableObject();
    // public System.Void SetWorldShareableItem(UnityEngine.GameObject item)
    // Offset: 0x26B4F18
    void SetWorldShareableItem(::UnityEngine::GameObject* item);
    // protected System.Void OnWorldShareableItemSpawn()
    // Offset: 0x26B4F40
    void OnWorldShareableItemSpawn();
    // protected System.Void OnWorldShareableItemDeallocated(Photon.Realtime.Player player)
    // Offset: 0x26B4F44
    void OnWorldShareableItemDeallocated(::Photon::Realtime::Player* player);
    // public System.Void LateUpdate()
    // Offset: 0x26B4F48
    void LateUpdate();
    // protected UnityEngine.Transform DefaultAnchor()
    // Offset: 0x26B5054
    ::UnityEngine::Transform* DefaultAnchor();
    // private UnityEngine.Transform GetAnchor(TransferrableObject/PositionState pos)
    // Offset: 0x26B4A80
    ::UnityEngine::Transform* GetAnchor(::GlobalNamespace::TransferrableObject::PositionState pos);
    // protected System.Boolean Attached()
    // Offset: 0x26B50F0
    bool Attached();
    // private System.Void UpdateFollowXform()
    // Offset: 0x26B5138
    void UpdateFollowXform();
    // public System.Void DropItem()
    // Offset: 0x26B5794
    void DropItem();
    // protected System.Void LateUpdateShared()
    // Offset: 0x26B57B8
    void LateUpdateShared();
    // protected System.Void ResetXf()
    // Offset: 0x26B58D8
    void ResetXf();
    // protected System.Void ReDock()
    // Offset: 0x26B5A1C
    void ReDock();
    // private System.Void HandleLocalInput()
    // Offset: 0x26B5A4C
    void HandleLocalInput();
    // protected System.Void LateUpdateLocal()
    // Offset: 0x26B5BD0
    void LateUpdateLocal();
    // protected System.Void LateUpdateReplicated()
    // Offset: 0x26B5C80
    void LateUpdateReplicated();
    // public System.Void ResetToDefaultState()
    // Offset: 0x26B5E5C
    void ResetToDefaultState();
    // public System.Void OnHover(InteractionPoint pointHovered, UnityEngine.GameObject hoveringHand)
    // Offset: 0x26B64C8
    void OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand);
    // protected System.Void ActivateItemFX(System.Single hapticStrength, System.Single hapticDuration, System.Int32 soundIndex, System.Single soundVolume)
    // Offset: 0x26B6630
    void ActivateItemFX(float hapticStrength, float hapticDuration, int soundIndex, float soundVolume);
    // public System.Void PlayNote(System.Int32 note, System.Single volume)
    // Offset: 0x26B6794
    void PlayNote(int note, float volume);
    // public System.Boolean AutoGrabTrue(System.Boolean leftGrabbingHand)
    // Offset: 0x26B6798
    bool AutoGrabTrue(bool leftGrabbingHand);
    // public System.Boolean CanActivate()
    // Offset: 0x26B67AC
    bool CanActivate();
    // public System.Boolean CanDeactivate()
    // Offset: 0x26B67B4
    bool CanDeactivate();
    // public System.Void OnActivate()
    // Offset: 0x26B67BC
    void OnActivate();
    // public System.Void OnDeactivate()
    // Offset: 0x26B67C8
    void OnDeactivate();
    // public System.Boolean IsMyItem()
    // Offset: 0x26B67D0
    bool IsMyItem();
    // protected System.Boolean IsHeld()
    // Offset: 0x26B6858
    bool IsHeld();
    // public System.Boolean InHand()
    // Offset: 0x26B50D4
    bool InHand();
    // public System.Boolean Dropped()
    // Offset: 0x26B5128
    bool Dropped();
    // public System.Boolean InLeftHand()
    // Offset: 0x26B695C
    bool InLeftHand();
    // public System.Boolean InRightHand()
    // Offset: 0x26B696C
    bool InRightHand();
    // public System.Boolean OnChest()
    // Offset: 0x26B697C
    bool OnChest();
    // public System.Boolean OnShoulder()
    // Offset: 0x26B698C
    bool OnShoulder();
    // protected Photon.Realtime.Player OwningPlayer()
    // Offset: 0x26B69A8
    ::Photon::Realtime::Player* OwningPlayer();
    // public override System.Void OnEnable()
    // Offset: 0x26B4804
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26B4DD0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
    // public override System.Void OnJoinedRoom()
    // Offset: 0x26B4DF0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnLeftRoom()
    // Offset: 0x26B4E0C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x26B4EE0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x26B5E70
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26B60C4
    // Implemented from: HoldableObject
    // Base method: System.Boolean HoldableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public override System.Void DropItemCleanup()
    // Offset: 0x26B646C
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::DropItemCleanup()
    void DropItemCleanup();
    // public System.Void .ctor()
    // Offset: 0x26B6A5C
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegacyTransferrableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegacyTransferrableObject*, creationType>()));
    }
  }; // LegacyTransferrableObject
  #pragma pack(pop)
  static check_size<sizeof(LegacyTransferrableObject), 268 + sizeof(::GlobalNamespace::LegacyTransferrableObject::InterpolateState)> __GlobalNamespace_LegacyTransferrableObjectSizeCheck;
  static_assert(sizeof(LegacyTransferrableObject) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegacyTransferrableObject::InterpolateState, "", "LegacyTransferrableObject/InterpolateState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::SpawnShareableObject
// Il2CppName: SpawnShareableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::SpawnShareableObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "SpawnShareableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::SetWorldShareableItem
// Il2CppName: SetWorldShareableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LegacyTransferrableObject::SetWorldShareableItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "SetWorldShareableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemSpawn
// Il2CppName: OnWorldShareableItemSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnWorldShareableItemSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemDeallocated
// Il2CppName: OnWorldShareableItemDeallocated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemDeallocated)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnWorldShareableItemDeallocated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::DefaultAnchor
// Il2CppName: DefaultAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::DefaultAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "DefaultAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::GetAnchor
// Il2CppName: GetAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::LegacyTransferrableObject::*)(::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::LegacyTransferrableObject::GetAnchor)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "GetAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::Attached
// Il2CppName: Attached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::Attached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "Attached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::UpdateFollowXform
// Il2CppName: UpdateFollowXform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::UpdateFollowXform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "UpdateFollowXform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::DropItem
// Il2CppName: DropItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::DropItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "DropItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::ResetXf
// Il2CppName: ResetXf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::ResetXf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "ResetXf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::ReDock
// Il2CppName: ReDock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::ReDock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "ReDock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::HandleLocalInput
// Il2CppName: HandleLocalInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::HandleLocalInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "HandleLocalInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnHover
// Il2CppName: OnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::LegacyTransferrableObject::OnHover)> {
  static const MethodInfo* get() {
    static auto* pointHovered = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* hoveringHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointHovered, hoveringHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::ActivateItemFX
// Il2CppName: ActivateItemFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(float, float, int, float)>(&GlobalNamespace::LegacyTransferrableObject::ActivateItemFX)> {
  static const MethodInfo* get() {
    static auto* hapticStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* hapticDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "ActivateItemFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hapticStrength, hapticDuration, soundIndex, soundVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(int, float)>(&GlobalNamespace::LegacyTransferrableObject::PlayNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::AutoGrabTrue
// Il2CppName: AutoGrabTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)(bool)>(&GlobalNamespace::LegacyTransferrableObject::AutoGrabTrue)> {
  static const MethodInfo* get() {
    static auto* leftGrabbingHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "AutoGrabTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftGrabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::IsMyItem
// Il2CppName: IsMyItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::IsMyItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "IsMyItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::IsHeld
// Il2CppName: IsHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::IsHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "IsHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::InHand
// Il2CppName: InHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::InHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "InHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::Dropped
// Il2CppName: Dropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::Dropped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "Dropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::InLeftHand
// Il2CppName: InLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::InLeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "InLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::InRightHand
// Il2CppName: InRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::InRightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "InRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnChest
// Il2CppName: OnChest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnChest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnChest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnShoulder
// Il2CppName: OnShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnShoulder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OwningPlayer
// Il2CppName: OwningPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OwningPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OwningPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::LegacyTransferrableObject::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::LegacyTransferrableObject::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LegacyTransferrableObject::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::LegacyTransferrableObject::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::DropItemCleanup
// Il2CppName: DropItemCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegacyTransferrableObject::*)()>(&GlobalNamespace::LegacyTransferrableObject::DropItemCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegacyTransferrableObject*), "DropItemCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegacyTransferrableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
