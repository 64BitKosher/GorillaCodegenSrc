// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HalloweenWatcherEyes
  class HalloweenWatcherEyes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HalloweenWatcherEyes);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HalloweenWatcherEyes*, "", "HalloweenWatcherEyes");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HalloweenWatcherEyes
  // [TokenAttribute] Offset: FFFFFFFF
  class HalloweenWatcherEyes : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HalloweenWatcherEyes::$CheckIfNearPlayer$d__13
    class $CheckIfNearPlayer$d__13;
    public:
    // public System.Single timeBetweenUpdates
    // Size: 0x4
    // Offset: 0x20
    float timeBetweenUpdates;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single watchRange
    // Size: 0x4
    // Offset: 0x24
    float watchRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single watchMaxAngle
    // Size: 0x4
    // Offset: 0x28
    float watchMaxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lerpDuration
    // Size: 0x4
    // Offset: 0x2C
    float lerpDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single playersViewCenterAngle
    // Size: 0x4
    // Offset: 0x30
    float playersViewCenterAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single durationToBeNormalWhenPlayerLooks
    // Size: 0x4
    // Offset: 0x34
    float durationToBeNormalWhenPlayerLooks;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject leftEye
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* leftEye;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightEye
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* rightEye;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single playersViewCenterCosAngle
    // Size: 0x4
    // Offset: 0x48
    float playersViewCenterCosAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single watchMinCosAngle
    // Size: 0x4
    // Offset: 0x4C
    float watchMinCosAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pretendingToBeNormalUntilTimestamp
    // Size: 0x4
    // Offset: 0x50
    float pretendingToBeNormalUntilTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lerpValue
    // Size: 0x4
    // Offset: 0x54
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single timeBetweenUpdates
    [[deprecated("Use field access instead!")]] float& dyn_timeBetweenUpdates();
    // Get instance field reference: public System.Single watchRange
    [[deprecated("Use field access instead!")]] float& dyn_watchRange();
    // Get instance field reference: public System.Single watchMaxAngle
    [[deprecated("Use field access instead!")]] float& dyn_watchMaxAngle();
    // Get instance field reference: public System.Single lerpDuration
    [[deprecated("Use field access instead!")]] float& dyn_lerpDuration();
    // Get instance field reference: public System.Single playersViewCenterAngle
    [[deprecated("Use field access instead!")]] float& dyn_playersViewCenterAngle();
    // Get instance field reference: public System.Single durationToBeNormalWhenPlayerLooks
    [[deprecated("Use field access instead!")]] float& dyn_durationToBeNormalWhenPlayerLooks();
    // Get instance field reference: public UnityEngine.GameObject leftEye
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftEye();
    // Get instance field reference: public UnityEngine.GameObject rightEye
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightEye();
    // Get instance field reference: private System.Single playersViewCenterCosAngle
    [[deprecated("Use field access instead!")]] float& dyn_playersViewCenterCosAngle();
    // Get instance field reference: private System.Single watchMinCosAngle
    [[deprecated("Use field access instead!")]] float& dyn_watchMinCosAngle();
    // Get instance field reference: private System.Single pretendingToBeNormalUntilTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_pretendingToBeNormalUntilTimestamp();
    // Get instance field reference: private System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // private System.Void Start()
    // Offset: 0x2746E94
    void Start();
    // private System.Collections.IEnumerator CheckIfNearPlayer(System.Single initialSleep)
    // Offset: 0x2746F08
    ::System::Collections::IEnumerator* CheckIfNearPlayer(float initialSleep);
    // private System.Void Update()
    // Offset: 0x2746FAC
    void Update();
    // private System.Void LookNormal()
    // Offset: 0x2747360
    void LookNormal();
    // public System.Void .ctor()
    // Offset: 0x2747434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HalloweenWatcherEyes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HalloweenWatcherEyes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HalloweenWatcherEyes*, creationType>()));
    }
  }; // HalloweenWatcherEyes
  #pragma pack(pop)
  static check_size<sizeof(HalloweenWatcherEyes), 84 + sizeof(float)> __GlobalNamespace_HalloweenWatcherEyesSizeCheck;
  static_assert(sizeof(HalloweenWatcherEyes) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HalloweenWatcherEyes::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenWatcherEyes::*)()>(&GlobalNamespace::HalloweenWatcherEyes::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenWatcherEyes*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenWatcherEyes::CheckIfNearPlayer
// Il2CppName: CheckIfNearPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HalloweenWatcherEyes::*)(float)>(&GlobalNamespace::HalloweenWatcherEyes::CheckIfNearPlayer)> {
  static const MethodInfo* get() {
    static auto* initialSleep = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenWatcherEyes*), "CheckIfNearPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialSleep});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenWatcherEyes::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenWatcherEyes::*)()>(&GlobalNamespace::HalloweenWatcherEyes::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenWatcherEyes*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenWatcherEyes::LookNormal
// Il2CppName: LookNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HalloweenWatcherEyes::*)()>(&GlobalNamespace::HalloweenWatcherEyes::LookNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HalloweenWatcherEyes*), "LookNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HalloweenWatcherEyes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
