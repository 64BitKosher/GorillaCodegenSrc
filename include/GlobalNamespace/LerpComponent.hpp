// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LerpChangedEvent
  class LerpChangedEvent;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LerpComponent
  class LerpComponent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LerpComponent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LerpComponent*, "", "LerpComponent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: LerpComponent
  // [TokenAttribute] Offset: FFFFFFFF
  class LerpComponent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected System.Single _lerp
    // Size: 0x4
    // Offset: 0x20
    float lerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _lerpLength
    // Size: 0x4
    // Offset: 0x24
    float lerpLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected LerpChangedEvent _onLerpChanged
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::LerpChangedEvent* onLerpChanged;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LerpChangedEvent*) == 0x8);
    // protected System.Boolean _previewInEditor
    // Size: 0x1
    // Offset: 0x30
    bool previewInEditor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _previewing
    // Size: 0x1
    // Offset: 0x31
    bool previewing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _cancelPreview
    // Size: 0x1
    // Offset: 0x32
    bool cancelPreview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _rendering
    // Size: 0x1
    // Offset: 0x33
    bool rendering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 _lastState
    // Size: 0x4
    // Offset: 0x34
    int lastState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _prevLerpFrom
    // Size: 0x4
    // Offset: 0x38
    float prevLerpFrom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _prevLerpTo
    // Size: 0x4
    // Offset: 0x3C
    float prevLerpTo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: protected System.Single _lerp
    [[deprecated("Use field access instead!")]] float& dyn__lerp();
    // Get instance field reference: protected System.Single _lerpLength
    [[deprecated("Use field access instead!")]] float& dyn__lerpLength();
    // Get instance field reference: protected LerpChangedEvent _onLerpChanged
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LerpChangedEvent*& dyn__onLerpChanged();
    // Get instance field reference: protected System.Boolean _previewInEditor
    [[deprecated("Use field access instead!")]] bool& dyn__previewInEditor();
    // Get instance field reference: private System.Boolean _previewing
    [[deprecated("Use field access instead!")]] bool& dyn__previewing();
    // Get instance field reference: private System.Boolean _cancelPreview
    [[deprecated("Use field access instead!")]] bool& dyn__cancelPreview();
    // Get instance field reference: private System.Boolean _rendering
    [[deprecated("Use field access instead!")]] bool& dyn__rendering();
    // Get instance field reference: private System.Int32 _lastState
    [[deprecated("Use field access instead!")]] int& dyn__lastState();
    // Get instance field reference: private System.Single _prevLerpFrom
    [[deprecated("Use field access instead!")]] float& dyn__prevLerpFrom();
    // Get instance field reference: private System.Single _prevLerpTo
    [[deprecated("Use field access instead!")]] float& dyn__prevLerpTo();
    // public System.Single get_Lerp()
    // Offset: 0x274E7F8
    float get_Lerp();
    // public System.Void set_Lerp(System.Single value)
    // Offset: 0x274E800
    void set_Lerp(float value);
    // public System.Single get_LerpTime()
    // Offset: 0x274E8E8
    float get_LerpTime();
    // public System.Void set_LerpTime(System.Single value)
    // Offset: 0x274E8F0
    void set_LerpTime(float value);
    // protected System.Boolean get_CanRender()
    // Offset: 0x274E910
    bool get_CanRender();
    // protected System.Void OnLerp(System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnLerp(float t);
    // protected System.Void RenderLerp()
    // Offset: 0x274E918
    void RenderLerp();
    // protected System.Int32 GetState()
    // Offset: 0x274E928
    int GetState();
    // protected System.Void Validate()
    // Offset: 0x274E9C0
    void Validate();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x274E9D4
    void OnDrawGizmosSelected();
    // private System.Void TryEditorRender(System.Boolean playModeCheck)
    // Offset: 0x274E9D8
    void TryEditorRender(bool playModeCheck);
    // private System.Void LerpToOne()
    // Offset: 0x274E9DC
    void LerpToOne();
    // private System.Void LerpToZero()
    // Offset: 0x274E9E0
    void LerpToZero();
    // private System.Void StartPreview(System.Single lerpFrom, System.Single lerpTo)
    // Offset: 0x274E9E4
    void StartPreview(float lerpFrom, float lerpTo);
    // protected System.Void .ctor()
    // Offset: 0x274E9E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LerpComponent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LerpComponent*, creationType>()));
    }
  }; // LerpComponent
  #pragma pack(pop)
  static check_size<sizeof(LerpComponent), 60 + sizeof(float)> __GlobalNamespace_LerpComponentSizeCheck;
  static_assert(sizeof(LerpComponent) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::get_Lerp
// Il2CppName: get_Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::get_Lerp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "get_Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::set_Lerp
// Il2CppName: set_Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)(float)>(&GlobalNamespace::LerpComponent::set_Lerp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "set_Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::get_LerpTime
// Il2CppName: get_LerpTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::get_LerpTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "get_LerpTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::set_LerpTime
// Il2CppName: set_LerpTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)(float)>(&GlobalNamespace::LerpComponent::set_LerpTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "set_LerpTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::get_CanRender
// Il2CppName: get_CanRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::get_CanRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "get_CanRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::OnLerp
// Il2CppName: OnLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)(float)>(&GlobalNamespace::LerpComponent::OnLerp)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "OnLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::RenderLerp
// Il2CppName: RenderLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::RenderLerp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "RenderLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::GetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::TryEditorRender
// Il2CppName: TryEditorRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)(bool)>(&GlobalNamespace::LerpComponent::TryEditorRender)> {
  static const MethodInfo* get() {
    static auto* playModeCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "TryEditorRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playModeCheck});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::LerpToOne
// Il2CppName: LerpToOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::LerpToOne)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "LerpToOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::LerpToZero
// Il2CppName: LerpToZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)()>(&GlobalNamespace::LerpComponent::LerpToZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "LerpToZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::StartPreview
// Il2CppName: StartPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpComponent::*)(float, float)>(&GlobalNamespace::LerpComponent::StartPreview)> {
  static const MethodInfo* get() {
    static auto* lerpFrom = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lerpTo = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpComponent*), "StartPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lerpFrom, lerpTo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpComponent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
