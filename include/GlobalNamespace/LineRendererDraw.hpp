// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LineRendererDraw
  class LineRendererDraw;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LineRendererDraw);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LineRendererDraw*, "", "LineRendererDraw");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: LineRendererDraw
  // [TokenAttribute] Offset: FFFFFFFF
  class LineRendererDraw : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.LineRenderer lr
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::LineRenderer* lr;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // public UnityEngine.Transform[] points
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Transform*> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.LineRenderer lr
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_lr();
    // Get instance field reference: public UnityEngine.Transform[] points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_points();
    // public System.Void SetUpLine(UnityEngine.Transform[] points)
    // Offset: 0x289D6EC
    void SetUpLine(::ArrayW<::UnityEngine::Transform*> points);
    // private System.Void LateUpdate()
    // Offset: 0x289D730
    void LateUpdate();
    // public System.Void Enable(System.Boolean enable)
    // Offset: 0x289D7A8
    void Enable(bool enable);
    // public System.Void .ctor()
    // Offset: 0x289D7C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LineRendererDraw* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LineRendererDraw::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LineRendererDraw*, creationType>()));
    }
  }; // LineRendererDraw
  #pragma pack(pop)
  static check_size<sizeof(LineRendererDraw), 40 + sizeof(::ArrayW<::UnityEngine::Transform*>)> __GlobalNamespace_LineRendererDrawSizeCheck;
  static_assert(sizeof(LineRendererDraw) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LineRendererDraw::SetUpLine
// Il2CppName: SetUpLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LineRendererDraw::*)(::ArrayW<::UnityEngine::Transform*>)>(&GlobalNamespace::LineRendererDraw::SetUpLine)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LineRendererDraw*), "SetUpLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LineRendererDraw::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LineRendererDraw::*)()>(&GlobalNamespace::LineRendererDraw::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LineRendererDraw*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LineRendererDraw::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LineRendererDraw::*)(bool)>(&GlobalNamespace::LineRendererDraw::Enable)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LineRendererDraw*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LineRendererDraw::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
