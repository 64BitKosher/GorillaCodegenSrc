// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LocalActivateOnDateRange
  class LocalActivateOnDateRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LocalActivateOnDateRange);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocalActivateOnDateRange*, "", "LocalActivateOnDateRange");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: LocalActivateOnDateRange
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalActivateOnDateRange : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 activationYear
    // Size: 0x4
    // Offset: 0x20
    int activationYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 activationMonth
    // Size: 0x4
    // Offset: 0x24
    int activationMonth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 activationDay
    // Size: 0x4
    // Offset: 0x28
    int activationDay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 activationHour
    // Size: 0x4
    // Offset: 0x2C
    int activationHour;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 activationMinute
    // Size: 0x4
    // Offset: 0x30
    int activationMinute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 activationSecond
    // Size: 0x4
    // Offset: 0x34
    int activationSecond;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationYear
    // Size: 0x4
    // Offset: 0x38
    int deactivationYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationMonth
    // Size: 0x4
    // Offset: 0x3C
    int deactivationMonth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationDay
    // Size: 0x4
    // Offset: 0x40
    int deactivationDay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationHour
    // Size: 0x4
    // Offset: 0x44
    int deactivationHour;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationMinute
    // Size: 0x4
    // Offset: 0x48
    int deactivationMinute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deactivationSecond
    // Size: 0x4
    // Offset: 0x4C
    int deactivationSecond;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject[] gameObjectsToActivate
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::GameObject*> gameObjectsToActivate;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.Boolean isActive
    // Size: 0x1
    // Offset: 0x58
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: activationTime
    char __padding13[0x7] = {};
    // private System.DateTime activationTime
    // Size: 0x8
    // Offset: 0x60
    ::System::DateTime activationTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime deactivationTime
    // Size: 0x8
    // Offset: 0x68
    ::System::DateTime deactivationTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public System.Double dbgTimeUntilActivation
    // Size: 0x8
    // Offset: 0x70
    double dbgTimeUntilActivation;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double dbgTimeUntilDeactivation
    // Size: 0x8
    // Offset: 0x78
    double dbgTimeUntilDeactivation;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: public System.Int32 activationYear
    [[deprecated("Use field access instead!")]] int& dyn_activationYear();
    // Get instance field reference: public System.Int32 activationMonth
    [[deprecated("Use field access instead!")]] int& dyn_activationMonth();
    // Get instance field reference: public System.Int32 activationDay
    [[deprecated("Use field access instead!")]] int& dyn_activationDay();
    // Get instance field reference: public System.Int32 activationHour
    [[deprecated("Use field access instead!")]] int& dyn_activationHour();
    // Get instance field reference: public System.Int32 activationMinute
    [[deprecated("Use field access instead!")]] int& dyn_activationMinute();
    // Get instance field reference: public System.Int32 activationSecond
    [[deprecated("Use field access instead!")]] int& dyn_activationSecond();
    // Get instance field reference: public System.Int32 deactivationYear
    [[deprecated("Use field access instead!")]] int& dyn_deactivationYear();
    // Get instance field reference: public System.Int32 deactivationMonth
    [[deprecated("Use field access instead!")]] int& dyn_deactivationMonth();
    // Get instance field reference: public System.Int32 deactivationDay
    [[deprecated("Use field access instead!")]] int& dyn_deactivationDay();
    // Get instance field reference: public System.Int32 deactivationHour
    [[deprecated("Use field access instead!")]] int& dyn_deactivationHour();
    // Get instance field reference: public System.Int32 deactivationMinute
    [[deprecated("Use field access instead!")]] int& dyn_deactivationMinute();
    // Get instance field reference: public System.Int32 deactivationSecond
    [[deprecated("Use field access instead!")]] int& dyn_deactivationSecond();
    // Get instance field reference: public UnityEngine.GameObject[] gameObjectsToActivate
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjectsToActivate();
    // Get instance field reference: private System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: private System.DateTime activationTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_activationTime();
    // Get instance field reference: private System.DateTime deactivationTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_deactivationTime();
    // Get instance field reference: public System.Double dbgTimeUntilActivation
    [[deprecated("Use field access instead!")]] double& dyn_dbgTimeUntilActivation();
    // Get instance field reference: public System.Double dbgTimeUntilDeactivation
    [[deprecated("Use field access instead!")]] double& dyn_dbgTimeUntilDeactivation();
    // private System.Void Awake()
    // Offset: 0x288D9B0
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x288DA14
    void OnEnable();
    // private System.Void InitActiveTimes()
    // Offset: 0x288DA18
    void InitActiveTimes();
    // private System.Void LateUpdate()
    // Offset: 0x288DA80
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x288DBD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalActivateOnDateRange* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalActivateOnDateRange*, creationType>()));
    }
  }; // LocalActivateOnDateRange
  #pragma pack(pop)
  static check_size<sizeof(LocalActivateOnDateRange), 120 + sizeof(double)> __GlobalNamespace_LocalActivateOnDateRangeSizeCheck;
  static_assert(sizeof(LocalActivateOnDateRange) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocalActivateOnDateRange::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalActivateOnDateRange::*)()>(&GlobalNamespace::LocalActivateOnDateRange::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalActivateOnDateRange*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalActivateOnDateRange::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalActivateOnDateRange::*)()>(&GlobalNamespace::LocalActivateOnDateRange::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalActivateOnDateRange*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalActivateOnDateRange::InitActiveTimes
// Il2CppName: InitActiveTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalActivateOnDateRange::*)()>(&GlobalNamespace::LocalActivateOnDateRange::InitActiveTimes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalActivateOnDateRange*), "InitActiveTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalActivateOnDateRange::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalActivateOnDateRange::*)()>(&GlobalNamespace::LocalActivateOnDateRange::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalActivateOnDateRange*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalActivateOnDateRange::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
