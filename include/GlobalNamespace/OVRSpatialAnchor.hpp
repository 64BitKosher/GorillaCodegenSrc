// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRSpace
#include "GlobalNamespace/OVRSpace.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: OVRSpace/StorageLocation
#include "GlobalNamespace/OVRSpace_StorageLocation.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: OVRSpaceUser
#include "GlobalNamespace/OVRSpaceUser.hpp"
// Including type: OVRPlugin/SpaceComponentType
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: SaveOptions because it is already included!
  // Forward declaring type: OVRTask`1<TResult>
  template<typename TResult>
  struct OVRTask_1;
  // Skipping declaration: EraseOptions because it is already included!
  // Forward declaring type: OVRPose
  struct OVRPose;
  // Skipping declaration: OperationResult because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRSpatialAnchor
  class OVRSpatialAnchor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRSpatialAnchor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor*, "", "OVRSpatialAnchor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: OVRSpatialAnchor
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRSpatialAnchor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorDelegatePair
    struct MultiAnchorDelegatePair;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::LoadOptions
    struct LoadOptions;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor
    struct UnboundAnchor;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorActionType
    struct MultiAnchorActionType;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::Development
    class Development;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::SaveOptions
    struct SaveOptions;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::EraseOptions
    struct EraseOptions;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::OperationResult
    struct OperationResult;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::InvertedCapture_2<TResult, TCapture>
    template<typename TResult, typename TCapture>
    struct InvertedCapture_2;
    // Nested type: ::GlobalNamespace::OVRSpatialAnchor::$$c
    class $$c;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSpatialAnchor/MultiAnchorDelegatePair
    // [TokenAttribute] Offset: FFFFFFFF
    struct MultiAnchorDelegatePair/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Collections.Generic.List`1<OVRSpatialAnchor> Anchors
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* Anchors;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*) == 0x8);
      // public System.Action`2<System.Collections.Generic.ICollection`1<OVRSpatialAnchor>,OVRSpatialAnchor/OperationResult> Delegate
      // Size: 0x8
      // Offset: 0x8
      ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* Delegate;
      // Field size check
      static_assert(sizeof(::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*) == 0x8);
      public:
      // Creating value type constructor for type: MultiAnchorDelegatePair
      constexpr MultiAnchorDelegatePair(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* Anchors_ = {}, ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* Delegate_ = {}) noexcept : Anchors{Anchors_}, Delegate{Delegate_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Collections.Generic.List`1<OVRSpatialAnchor> Anchors
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*& dyn_Anchors();
      // Get instance field reference: public System.Action`2<System.Collections.Generic.ICollection`1<OVRSpatialAnchor>,OVRSpatialAnchor/OperationResult> Delegate
      [[deprecated("Use field access instead!")]] ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*& dyn_Delegate();
    }; // OVRSpatialAnchor/MultiAnchorDelegatePair
    #pragma pack(pop)
    static check_size<sizeof(OVRSpatialAnchor::MultiAnchorDelegatePair), 8 + sizeof(::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)> __GlobalNamespace_OVRSpatialAnchor_MultiAnchorDelegatePairSizeCheck;
    static_assert(sizeof(OVRSpatialAnchor::MultiAnchorDelegatePair) == 0x10);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSpatialAnchor/UnboundAnchor
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct UnboundAnchor/*, public ::System::ValueType*/ {
      public:
      public:
      // readonly OVRSpace _space
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::OVRSpace space;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRSpace) == 0x8);
      // private readonly System.Guid <Uuid>k__BackingField
      // Size: 0x10
      // Offset: 0x8
      ::System::Guid Uuid;
      // Field size check
      static_assert(sizeof(::System::Guid) == 0x10);
      public:
      // Creating value type constructor for type: UnboundAnchor
      constexpr UnboundAnchor(::GlobalNamespace::OVRSpace space_ = {}, ::System::Guid Uuid_ = {}) noexcept : space{space_}, Uuid{Uuid_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: readonly OVRSpace _space
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace& dyn__space();
      // Get instance field reference: private readonly System.Guid <Uuid>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Guid& dyn_$Uuid$k__BackingField();
      // public System.Guid get_Uuid()
      // Offset: 0x492E4DC
      ::System::Guid get_Uuid();
      // public System.Boolean get_Localized()
      // Offset: 0x492E4E8
      bool get_Localized();
      // public System.Boolean get_Localizing()
      // Offset: 0x492E580
      bool get_Localizing();
      // public UnityEngine.Pose get_Pose()
      // Offset: 0x492E620
      ::UnityEngine::Pose get_Pose();
      // public System.Void Localize(System.Action`2<OVRSpatialAnchor/UnboundAnchor,System.Boolean> onComplete, System.Double timeout)
      // Offset: 0x492E73C
      void Localize(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, bool>* onComplete, double timeout);
      // private System.Void ValidateLocalization()
      // Offset: 0x492E8F8
      void ValidateLocalization();
      // public OVRTask`1<System.Boolean> LocalizeAsync(System.Double timeout)
      // Offset: 0x492E810
      ::GlobalNamespace::OVRTask_1<bool> LocalizeAsync(double timeout);
      // private System.Void AddStorableAndShareableComponents()
      // Offset: 0x492EA8C
      void AddStorableAndShareableComponents();
      // public System.Void BindTo(OVRSpatialAnchor spatialAnchor)
      // Offset: 0x492EB3C
      void BindTo(::GlobalNamespace::OVRSpatialAnchor* spatialAnchor);
      // System.Void .ctor(OVRSpace space, System.Guid uuid)
      // Offset: 0x492E15C
      // ABORTED: conflicts with another method.  UnboundAnchor(::GlobalNamespace::OVRSpace space, ::System::Guid uuid);
    }; // OVRSpatialAnchor/UnboundAnchor
    #pragma pack(pop)
    static check_size<sizeof(OVRSpatialAnchor::UnboundAnchor), 8 + sizeof(::System::Guid)> __GlobalNamespace_OVRSpatialAnchor_UnboundAnchorSizeCheck;
    static_assert(sizeof(OVRSpatialAnchor::UnboundAnchor) == 0x18);
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSpatialAnchor/SaveOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct SaveOptions/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRSpace/StorageLocation Storage
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRSpace::StorageLocation Storage;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRSpace::StorageLocation) == 0x4);
      public:
      // Creating value type constructor for type: SaveOptions
      constexpr SaveOptions(::GlobalNamespace::OVRSpace::StorageLocation Storage_ = {}) noexcept : Storage{Storage_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::GlobalNamespace::OVRSpace::StorageLocation
      constexpr operator ::GlobalNamespace::OVRSpace::StorageLocation() const noexcept {
        return Storage;
      }
      // Get instance field reference: public OVRSpace/StorageLocation Storage
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace::StorageLocation& dyn_Storage();
    }; // OVRSpatialAnchor/SaveOptions
    #pragma pack(pop)
    static check_size<sizeof(OVRSpatialAnchor::SaveOptions), 0 + sizeof(::GlobalNamespace::OVRSpace::StorageLocation)> __GlobalNamespace_OVRSpatialAnchor_SaveOptionsSizeCheck;
    static_assert(sizeof(OVRSpatialAnchor::SaveOptions) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSpatialAnchor/EraseOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct EraseOptions/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRSpace/StorageLocation Storage
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRSpace::StorageLocation Storage;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRSpace::StorageLocation) == 0x4);
      public:
      // Creating value type constructor for type: EraseOptions
      constexpr EraseOptions(::GlobalNamespace::OVRSpace::StorageLocation Storage_ = {}) noexcept : Storage{Storage_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::GlobalNamespace::OVRSpace::StorageLocation
      constexpr operator ::GlobalNamespace::OVRSpace::StorageLocation() const noexcept {
        return Storage;
      }
      // Get instance field reference: public OVRSpace/StorageLocation Storage
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace::StorageLocation& dyn_Storage();
    }; // OVRSpatialAnchor/EraseOptions
    #pragma pack(pop)
    static check_size<sizeof(OVRSpatialAnchor::EraseOptions), 0 + sizeof(::GlobalNamespace::OVRSpace::StorageLocation)> __GlobalNamespace_OVRSpatialAnchor_EraseOptionsSizeCheck;
    static_assert(sizeof(OVRSpatialAnchor::EraseOptions) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRSpatialAnchor/OperationResult
    // [TokenAttribute] Offset: FFFFFFFF
    struct OperationResult/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: OperationResult
      constexpr OperationResult(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRSpatialAnchor/OperationResult Success
      static constexpr const int Success = 0;
      // Get static field: static public OVRSpatialAnchor/OperationResult Success
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Success();
      // Set static field: static public OVRSpatialAnchor/OperationResult Success
      static void _set_Success(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure
      static constexpr const int Failure = -1000;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure
      static void _set_Failure(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure_SpaceCloudStorageDisabled
      static constexpr const int Failure_SpaceCloudStorageDisabled = -2000;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceCloudStorageDisabled
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure_SpaceCloudStorageDisabled();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceCloudStorageDisabled
      static void _set_Failure_SpaceCloudStorageDisabled(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure_SpaceMappingInsufficient
      static constexpr const int Failure_SpaceMappingInsufficient = -2001;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceMappingInsufficient
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure_SpaceMappingInsufficient();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceMappingInsufficient
      static void _set_Failure_SpaceMappingInsufficient(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure_SpaceLocalizationFailed
      static constexpr const int Failure_SpaceLocalizationFailed = -2002;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceLocalizationFailed
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure_SpaceLocalizationFailed();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceLocalizationFailed
      static void _set_Failure_SpaceLocalizationFailed(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkTimeout
      static constexpr const int Failure_SpaceNetworkTimeout = -2003;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkTimeout
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure_SpaceNetworkTimeout();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkTimeout
      static void _set_Failure_SpaceNetworkTimeout(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // static field const value: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkRequestFailed
      static constexpr const int Failure_SpaceNetworkRequestFailed = -2004;
      // Get static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkRequestFailed
      static ::GlobalNamespace::OVRSpatialAnchor::OperationResult _get_Failure_SpaceNetworkRequestFailed();
      // Set static field: static public OVRSpatialAnchor/OperationResult Failure_SpaceNetworkRequestFailed
      static void _set_Failure_SpaceNetworkRequestFailed(::GlobalNamespace::OVRSpatialAnchor::OperationResult value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRSpatialAnchor/OperationResult
    #pragma pack(pop)
    static check_size<sizeof(OVRSpatialAnchor::OperationResult), 0 + sizeof(int)> __GlobalNamespace_OVRSpatialAnchor_OperationResultSizeCheck;
    static_assert(sizeof(OVRSpatialAnchor::OperationResult) == 0x4);
    public:
    // private System.Boolean _startCalled
    // Size: 0x1
    // Offset: 0x20
    bool startCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startCalled and: requestId
    char __padding0[0x7] = {};
    // private System.UInt64 _requestId
    // Size: 0x8
    // Offset: 0x28
    uint64_t requestId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly OVRSpatialAnchor/SaveOptions _defaultSaveOptions
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRSpatialAnchor::SaveOptions defaultSaveOptions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpatialAnchor::SaveOptions) == 0x4);
    // private readonly OVRSpatialAnchor/EraseOptions _defaultEraseOptions
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::OVRSpatialAnchor::EraseOptions defaultEraseOptions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpatialAnchor::EraseOptions) == 0x4);
    // private System.Action`1<OVRSpatialAnchor/OperationResult> OnLocalize
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* OnLocalize;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*) == 0x8);
    // private OVRSpace <Space>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::OVRSpace Space;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpace) == 0x8);
    // private System.Guid <Uuid>k__BackingField
    // Size: 0x10
    // Offset: 0x48
    ::System::Guid Uuid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    public:
    // Get static field: static readonly System.Collections.Generic.Dictionary`2<System.Guid,OVRSpatialAnchor> SpatialAnchors
    static ::System::Collections::Generic::Dictionary_2<::System::Guid, ::GlobalNamespace::OVRSpatialAnchor*>* _get_SpatialAnchors();
    // Set static field: static readonly System.Collections.Generic.Dictionary`2<System.Guid,OVRSpatialAnchor> SpatialAnchors
    static void _set_SpatialAnchors(::System::Collections::Generic::Dictionary_2<::System::Guid, ::GlobalNamespace::OVRSpatialAnchor*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt64,OVRSpatialAnchor> CreationRequests
    static ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor*>* _get_CreationRequests();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt64,OVRSpatialAnchor> CreationRequests
    static void _set_CreationRequests(::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<OVRSpace/StorageLocation,System.Collections.Generic.List`1<OVRSpatialAnchor>> SaveRequests
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRSpace::StorageLocation, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*>* _get_SaveRequests();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<OVRSpace/StorageLocation,System.Collections.Generic.List`1<OVRSpatialAnchor>> SaveRequests
    static void _set_SaveRequests(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRSpace::StorageLocation, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<OVRSpatialAnchor,System.Guid> AsyncRequestTaskIds
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRSpatialAnchor*, ::System::Guid>* _get_AsyncRequestTaskIds();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<OVRSpatialAnchor,System.Guid> AsyncRequestTaskIds
    static void _set_AsyncRequestTaskIds(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRSpatialAnchor*, ::System::Guid>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<System.ValueTuple`2<System.Collections.Generic.List`1<OVRSpaceUser>,System.Collections.Generic.List`1<OVRSpatialAnchor>>> ShareRequests
    static ::System::Collections::Generic::List_1<::System::ValueTuple_2<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>*, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*>>* _get_ShareRequests();
    // Set static field: static private readonly System.Collections.Generic.List`1<System.ValueTuple`2<System.Collections.Generic.List`1<OVRSpaceUser>,System.Collections.Generic.List`1<OVRSpatialAnchor>>> ShareRequests
    static void _set_ShareRequests(::System::Collections::Generic::List_1<::System::ValueTuple_2<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>*, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>*>>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt64,OVRSpatialAnchor/MultiAnchorDelegatePair> MultiAnchorCompletionDelegates
    static ::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorDelegatePair>* _get_MultiAnchorCompletionDelegates();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt64,OVRSpatialAnchor/MultiAnchorDelegatePair> MultiAnchorCompletionDelegates
    static void _set_MultiAnchorCompletionDelegates(::System::Collections::Generic::Dictionary_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorDelegatePair>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<OVRSpatialAnchor/UnboundAnchor> UnboundAnchorBuffer
    static ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>* _get_UnboundAnchorBuffer();
    // Set static field: static private readonly System.Collections.Generic.List`1<OVRSpatialAnchor/UnboundAnchor> UnboundAnchorBuffer
    static void _set_UnboundAnchorBuffer(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>* value);
    // Get static field: static private readonly OVRPlugin/SpaceComponentType[] ComponentTypeBuffer
    static ::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType> _get_ComponentTypeBuffer();
    // Set static field: static private readonly OVRPlugin/SpaceComponentType[] ComponentTypeBuffer
    static void _set_ComponentTypeBuffer(::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType> value);
    // Get instance field reference: private System.Boolean _startCalled
    [[deprecated("Use field access instead!")]] bool& dyn__startCalled();
    // Get instance field reference: private System.UInt64 _requestId
    [[deprecated("Use field access instead!")]] uint64_t& dyn__requestId();
    // Get instance field reference: private readonly OVRSpatialAnchor/SaveOptions _defaultSaveOptions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpatialAnchor::SaveOptions& dyn__defaultSaveOptions();
    // Get instance field reference: private readonly OVRSpatialAnchor/EraseOptions _defaultEraseOptions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpatialAnchor::EraseOptions& dyn__defaultEraseOptions();
    // Get instance field reference: private System.Action`1<OVRSpatialAnchor/OperationResult> OnLocalize
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*& dyn_OnLocalize();
    // Get instance field reference: private OVRSpace <Space>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace& dyn_$Space$k__BackingField();
    // Get instance field reference: private System.Guid <Uuid>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_$Uuid$k__BackingField();
    // public System.Void add_OnLocalize(System.Action`1<OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x4929478
    void add_OnLocalize(::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // public System.Void remove_OnLocalize(System.Action`1<OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x4929528
    void remove_OnLocalize(::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // public OVRSpace get_Space()
    // Offset: 0x49295D8
    ::GlobalNamespace::OVRSpace get_Space();
    // private System.Void set_Space(OVRSpace value)
    // Offset: 0x49295E0
    void set_Space(::GlobalNamespace::OVRSpace value);
    // public System.Guid get_Uuid()
    // Offset: 0x49295E8
    ::System::Guid get_Uuid();
    // private System.Void set_Uuid(System.Guid value)
    // Offset: 0x49295F4
    void set_Uuid(::System::Guid value);
    // public System.Boolean get_Created()
    // Offset: 0x49295FC
    bool get_Created();
    // public System.Boolean get_PendingCreation()
    // Offset: 0x4929620
    bool get_PendingCreation();
    // public System.Boolean get_Localized()
    // Offset: 0x4929630
    bool get_Localized();
    // public System.Void InitializeFromExisting(OVRSpace space, System.Guid uuid)
    // Offset: 0x49296E8
    void InitializeFromExisting(::GlobalNamespace::OVRSpace space, ::System::Guid uuid);
    // public System.Void Save(System.Action`2<OVRSpatialAnchor,System.Boolean> onComplete)
    // Offset: 0x4929B80
    void Save(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>* onComplete);
    // static private Unity.Collections.NativeArray`1<System.UInt64> ToNativeArray(System.Collections.Generic.ICollection`1<OVRSpatialAnchor> anchors)
    // Offset: 0x4929C40
    static ::Unity::Collections::NativeArray_1<uint64_t> ToNativeArray(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>* anchors);
    // public System.Void Save(OVRSpatialAnchor/SaveOptions saveOptions, System.Action`2<OVRSpatialAnchor,System.Boolean> onComplete)
    // Offset: 0x4929B90
    void Save(::GlobalNamespace::OVRSpatialAnchor::SaveOptions saveOptions, ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>* onComplete);
    // public OVRTask`1<System.Boolean> SaveAsync()
    // Offset: 0x492A064
    ::GlobalNamespace::OVRTask_1<bool> SaveAsync();
    // public OVRTask`1<System.Boolean> SaveAsync(OVRSpatialAnchor/SaveOptions saveOptions)
    // Offset: 0x4929EF8
    ::GlobalNamespace::OVRTask_1<bool> SaveAsync(::GlobalNamespace::OVRSpatialAnchor::SaveOptions saveOptions);
    // static public System.Void Save(System.Collections.Generic.ICollection`1<OVRSpatialAnchor> anchors, OVRSpatialAnchor/SaveOptions saveOptions, System.Action`2<System.Collections.Generic.ICollection`1<OVRSpatialAnchor>,OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492A06C
    static void Save(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>* anchors, ::GlobalNamespace::OVRSpatialAnchor::SaveOptions saveOptions, ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // static private System.Collections.Generic.List`1<OVRSpatialAnchor> CopyAnchorListIntoListFromPool(System.Collections.Generic.IEnumerable`1<OVRSpatialAnchor> anchorList)
    // Offset: 0x492A34C
    static ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* CopyAnchorListIntoListFromPool(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpatialAnchor*>* anchorList);
    // public System.Void Share(OVRSpaceUser user, System.Action`1<OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492A444
    void Share(::GlobalNamespace::OVRSpaceUser user, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // public OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsync(OVRSpaceUser user)
    // Offset: 0x492A4C0
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsync(::GlobalNamespace::OVRSpaceUser user);
    // public System.Void Share(OVRSpaceUser user1, OVRSpaceUser user2, System.Action`1<OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492A6D4
    void Share(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // public OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsync(OVRSpaceUser user1, OVRSpaceUser user2)
    // Offset: 0x492A758
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsync(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2);
    // public System.Void Share(OVRSpaceUser user1, OVRSpaceUser user2, OVRSpaceUser user3, System.Action`1<OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492A880
    void Share(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2, ::GlobalNamespace::OVRSpaceUser user3, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // public OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsync(OVRSpaceUser user1, OVRSpaceUser user2, OVRSpaceUser user3)
    // Offset: 0x492A914
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsync(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2, ::GlobalNamespace::OVRSpaceUser user3);
    // public System.Void Share(OVRSpaceUser user1, OVRSpaceUser user2, OVRSpaceUser user3, OVRSpaceUser user4, System.Action`1<OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492AA9C
    void Share(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2, ::GlobalNamespace::OVRSpaceUser user3, ::GlobalNamespace::OVRSpaceUser user4, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // public OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsync(OVRSpaceUser user1, OVRSpaceUser user2, OVRSpaceUser user3, OVRSpaceUser user4)
    // Offset: 0x492AB38
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsync(::GlobalNamespace::OVRSpaceUser user1, ::GlobalNamespace::OVRSpaceUser user2, ::GlobalNamespace::OVRSpaceUser user3, ::GlobalNamespace::OVRSpaceUser user4);
    // public System.Void Share(System.Collections.Generic.IEnumerable`1<OVRSpaceUser> users, System.Action`1<OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492AD18
    void Share(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpaceUser>* users, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // public OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsync(System.Collections.Generic.IEnumerable`1<OVRSpaceUser> users)
    // Offset: 0x492AD94
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsync(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpaceUser>* users);
    // static public System.Void Share(System.Collections.Generic.ICollection`1<OVRSpatialAnchor> anchors, System.Collections.Generic.ICollection`1<OVRSpaceUser> users, System.Action`2<System.Collections.Generic.ICollection`1<OVRSpatialAnchor>,OVRSpatialAnchor/OperationResult> onComplete)
    // Offset: 0x492AE1C
    static void Share(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>* anchors, ::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpaceUser>* users, ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* onComplete);
    // private OVRTask`1<OVRSpatialAnchor/OperationResult> ShareAsyncInternal(System.Collections.Generic.List`1<OVRSpaceUser> users)
    // Offset: 0x492A590
    ::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> ShareAsyncInternal(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>* users);
    // private System.Collections.Generic.List`1<OVRSpatialAnchor> GetListToStoreTheShareRequest(System.Collections.Generic.List`1<OVRSpaceUser> users)
    // Offset: 0x492B47C
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* GetListToStoreTheShareRequest(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>* users);
    // static private System.Boolean AreSortedUserListsEqual(System.Collections.Generic.IReadOnlyList`1<OVRSpaceUser> sortedList1, System.Collections.Generic.IReadOnlyList`1<OVRSpaceUser> sortedList2)
    // Offset: 0x492B7D4
    static bool AreSortedUserListsEqual(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::OVRSpaceUser>* sortedList1, ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::OVRSpaceUser>* sortedList2);
    // public System.Void Erase(System.Action`2<OVRSpatialAnchor,System.Boolean> onComplete)
    // Offset: 0x492BAE4
    void Erase(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>* onComplete);
    // public System.Void Erase(OVRSpatialAnchor/EraseOptions eraseOptions, System.Action`2<OVRSpatialAnchor,System.Boolean> onComplete)
    // Offset: 0x492BAF4
    void Erase(::GlobalNamespace::OVRSpatialAnchor::EraseOptions eraseOptions, ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>* onComplete);
    // public OVRTask`1<System.Boolean> EraseAsync()
    // Offset: 0x492BC84
    ::GlobalNamespace::OVRTask_1<bool> EraseAsync();
    // public OVRTask`1<System.Boolean> EraseAsync(OVRSpatialAnchor/EraseOptions eraseOptions)
    // Offset: 0x492BBA4
    ::GlobalNamespace::OVRTask_1<bool> EraseAsync(::GlobalNamespace::OVRSpatialAnchor::EraseOptions eraseOptions);
    // static private System.Void ThrowIfBound(System.Guid uuid)
    // Offset: 0x49298FC
    static void ThrowIfBound(::System::Guid uuid);
    // private System.Void InitializeUnchecked(OVRSpace space, System.Guid uuid)
    // Offset: 0x4929A24
    void InitializeUnchecked(::GlobalNamespace::OVRSpace space, ::System::Guid uuid);
    // private System.Void Start()
    // Offset: 0x492BD30
    void Start();
    // private System.Void Update()
    // Offset: 0x492BF8C
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x492BFC4
    void LateUpdate();
    // static private System.Void SaveBatchAnchors()
    // Offset: 0x492C014
    static void SaveBatchAnchors();
    // static private System.Void ShareBatchAnchors()
    // Offset: 0x492C200
    static void ShareBatchAnchors();
    // private System.Void OnDestroy()
    // Offset: 0x492C468
    void OnDestroy();
    // private OVRPose GetTrackingSpacePose()
    // Offset: 0x492C550
    ::GlobalNamespace::OVRPose GetTrackingSpacePose();
    // private System.Void CreateSpatialAnchor()
    // Offset: 0x492BD70
    void CreateSpatialAnchor();
    // static System.Boolean TryGetPose(OVRSpace space, out OVRPose pose)
    // Offset: 0x492C614
    static bool TryGetPose(::GlobalNamespace::OVRSpace space, ByRef<::GlobalNamespace::OVRPose> pose);
    // private System.Void UpdateTransform()
    // Offset: 0x492BC8C
    void UpdateTransform();
    // static private System.Boolean TryExtractValue(System.Collections.Generic.Dictionary`2<TKey,TValue> dict, TKey key, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TKey, class TValue>
    static bool TryExtractValue(::System::Collections::Generic::Dictionary_2<TKey, TValue>* dict, TKey key, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::TryExtractValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRSpatialAnchor", "TryExtractValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dict), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, dict, key, byref(value));
    }
    // static private System.Void InitializeOnLoad()
    // Offset: 0x492C808
    static void InitializeOnLoad();
    // static private System.Void .cctor()
    // Offset: 0x492C8F8
    static void _cctor();
    // static private System.Void InvokeMultiAnchorDelegate(System.UInt64 requestId, OVRSpatialAnchor/OperationResult result, OVRSpatialAnchor/MultiAnchorActionType actionType)
    // Offset: 0x492CE94
    static void InvokeMultiAnchorDelegate(uint64_t requestId, ::GlobalNamespace::OVRSpatialAnchor::OperationResult result, ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorActionType actionType);
    // static private System.Void OnSpatialAnchorCreateComplete(System.UInt64 requestId, System.Boolean success, OVRSpace space, System.Guid uuid)
    // Offset: 0x492D3D8
    static void OnSpatialAnchorCreateComplete(uint64_t requestId, bool success, ::GlobalNamespace::OVRSpace space, ::System::Guid uuid);
    // static private System.Void OnSpaceSaveComplete(System.UInt64 requestId, OVRSpace space, System.Boolean result, System.Guid uuid)
    // Offset: 0x492D5F4
    static void OnSpaceSaveComplete(uint64_t requestId, ::GlobalNamespace::OVRSpace space, bool result, ::System::Guid uuid);
    // static private System.Void OnSpaceEraseComplete(System.UInt64 requestId, System.Boolean result, System.Guid uuid, OVRPlugin/SpaceStorageLocation location)
    // Offset: 0x492D5F8
    static void OnSpaceEraseComplete(uint64_t requestId, bool result, ::System::Guid uuid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation location);
    // static public System.Boolean LoadUnboundAnchors(OVRSpatialAnchor/LoadOptions options, System.Action`1<OVRSpatialAnchor/UnboundAnchor[]> onComplete)
    // Offset: 0x492D5FC
    static bool LoadUnboundAnchors(::GlobalNamespace::OVRSpatialAnchor::LoadOptions options, ::System::Action_1<::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>>* onComplete);
    // static public OVRTask`1<OVRSpatialAnchor/UnboundAnchor[]> LoadUnboundAnchorsAsync(OVRSpatialAnchor/LoadOptions options)
    // Offset: 0x492D6D8
    static ::GlobalNamespace::OVRTask_1<::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>> LoadUnboundAnchorsAsync(::GlobalNamespace::OVRSpatialAnchor::LoadOptions options);
    // static private System.Void OnSpaceQueryComplete(System.UInt64 requestId, System.Boolean queryResult)
    // Offset: 0x492D8E8
    static void OnSpaceQueryComplete(uint64_t requestId, bool queryResult);
    // static private System.Void PopulateUnbound(System.Guid uuid, System.UInt64 space)
    // Offset: 0x492DE2C
    static void PopulateUnbound(::System::Guid uuid, uint64_t space);
    // static private System.Void OnSpaceSetComponentStatusComplete(System.UInt64 requestId, System.Boolean result, OVRSpace space, System.Guid uuid, OVRPlugin/SpaceComponentType componentType, System.Boolean enabled)
    // Offset: 0x492E168
    static void OnSpaceSetComponentStatusComplete(uint64_t requestId, bool result, ::GlobalNamespace::OVRSpace space, ::System::Guid uuid, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType, bool enabled);
    // static private System.Void OnSpaceListSaveComplete(System.UInt64 requestId, OVRSpatialAnchor/OperationResult result)
    // Offset: 0x492E248
    static void OnSpaceListSaveComplete(uint64_t requestId, ::GlobalNamespace::OVRSpatialAnchor::OperationResult result);
    // static private System.Void OnShareSpacesComplete(System.UInt64 requestId, OVRSpatialAnchor/OperationResult result)
    // Offset: 0x492E2B0
    static void OnShareSpacesComplete(uint64_t requestId, ::GlobalNamespace::OVRSpatialAnchor::OperationResult result);
    // public System.Void .ctor()
    // Offset: 0x492E318
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSpatialAnchor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSpatialAnchor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSpatialAnchor*, creationType>()));
    }
  }; // OVRSpatialAnchor
  #pragma pack(pop)
  static check_size<sizeof(OVRSpatialAnchor), 72 + sizeof(::System::Guid)> __GlobalNamespace_OVRSpatialAnchorSizeCheck;
  static_assert(sizeof(OVRSpatialAnchor) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::OperationResult, "", "OVRSpatialAnchor/OperationResult");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::EraseOptions, "", "OVRSpatialAnchor/EraseOptions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::SaveOptions, "", "OVRSpatialAnchor/SaveOptions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor, "", "OVRSpatialAnchor/UnboundAnchor");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpatialAnchor::MultiAnchorDelegatePair, "", "OVRSpatialAnchor/MultiAnchorDelegatePair");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::add_OnLocalize
// Il2CppName: add_OnLocalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::add_OnLocalize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "add_OnLocalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::remove_OnLocalize
// Il2CppName: remove_OnLocalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::remove_OnLocalize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "remove_OnLocalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::get_Space
// Il2CppName: get_Space
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSpace (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::get_Space)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "get_Space", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::set_Space
// Il2CppName: set_Space
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpace)>(&GlobalNamespace::OVRSpatialAnchor::set_Space)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "set_Space", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::get_Uuid
// Il2CppName: get_Uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::get_Uuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "get_Uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::set_Uuid
// Il2CppName: set_Uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::set_Uuid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "set_Uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::get_Created
// Il2CppName: get_Created
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::get_Created)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "get_Created", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::get_PendingCreation
// Il2CppName: get_PendingCreation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::get_PendingCreation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "get_PendingCreation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::get_Localized
// Il2CppName: get_Localized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::get_Localized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "get_Localized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::InitializeFromExisting
// Il2CppName: InitializeFromExisting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpace, ::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::InitializeFromExisting)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "InitializeFromExisting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>*)>(&GlobalNamespace::OVRSpatialAnchor::Save)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ToNativeArray
// Il2CppName: ToNativeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint64_t> (*)(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*)>(&GlobalNamespace::OVRSpatialAnchor::ToNativeArray)> {
  static const MethodInfo* get() {
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ToNativeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpatialAnchor::SaveOptions, ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>*)>(&GlobalNamespace::OVRSpatialAnchor::Save)> {
  static const MethodInfo* get() {
    static auto* saveOptions = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/SaveOptions")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saveOptions, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::SaveAsync
// Il2CppName: SaveAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::SaveAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "SaveAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::SaveAsync
// Il2CppName: SaveAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpatialAnchor::SaveOptions)>(&GlobalNamespace::OVRSpatialAnchor::SaveAsync)> {
  static const MethodInfo* get() {
    static auto* saveOptions = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/SaveOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "SaveAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saveOptions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::SaveOptions, ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Save)> {
  static const MethodInfo* get() {
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")})->byval_arg;
    static auto* saveOptions = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/SaveOptions")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")}), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors, saveOptions, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::CopyAnchorListIntoListFromPool
// Il2CppName: CopyAnchorListIntoListFromPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* (*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpatialAnchor*>*)>(&GlobalNamespace::OVRSpatialAnchor::CopyAnchorListIntoListFromPool)> {
  static const MethodInfo* get() {
    static auto* anchorList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "CopyAnchorListIntoListFromPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchorList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsync
// Il2CppName: ShareAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsync)> {
  static const MethodInfo* get() {
    static auto* user = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsync
// Il2CppName: ShareAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsync)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user3 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2, user3, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsync
// Il2CppName: ShareAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsync)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user3 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2, user3});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user3 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user4 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2, user3, user4, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsync
// Il2CppName: ShareAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser, ::GlobalNamespace::OVRSpaceUser)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsync)> {
  static const MethodInfo* get() {
    static auto* user1 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user2 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user3 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    static auto* user4 = &::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{user1, user2, user3, user4});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpaceUser>*, ::System::Action_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsync
// Il2CppName: ShareAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::OVRSpaceUser>*)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsync)> {
  static const MethodInfo* get() {
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Share
// Il2CppName: Share
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpaceUser>*, ::System::Action_2<::System::Collections::Generic::ICollection_1<::GlobalNamespace::OVRSpatialAnchor*>*, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRSpatialAnchor::Share)> {
  static const MethodInfo* get() {
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")})->byval_arg;
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")}), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Share", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors, users, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareAsyncInternal
// Il2CppName: ShareAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::GlobalNamespace::OVRSpatialAnchor::OperationResult> (GlobalNamespace::OVRSpatialAnchor::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>*)>(&GlobalNamespace::OVRSpatialAnchor::ShareAsyncInternal)> {
  static const MethodInfo* get() {
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::GetListToStoreTheShareRequest
// Il2CppName: GetListToStoreTheShareRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpatialAnchor*>* (GlobalNamespace::OVRSpatialAnchor::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRSpaceUser>*)>(&GlobalNamespace::OVRSpatialAnchor::GetListToStoreTheShareRequest)> {
  static const MethodInfo* get() {
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "GetListToStoreTheShareRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::AreSortedUserListsEqual
// Il2CppName: AreSortedUserListsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::OVRSpaceUser>*, ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::OVRSpaceUser>*)>(&GlobalNamespace::OVRSpatialAnchor::AreSortedUserListsEqual)> {
  static const MethodInfo* get() {
    static auto* sortedList1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    static auto* sortedList2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpaceUser")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "AreSortedUserListsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sortedList1, sortedList2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Erase
// Il2CppName: Erase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>*)>(&GlobalNamespace::OVRSpatialAnchor::Erase)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Erase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Erase
// Il2CppName: Erase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpatialAnchor::EraseOptions, ::System::Action_2<::GlobalNamespace::OVRSpatialAnchor*, bool>*)>(&GlobalNamespace::OVRSpatialAnchor::Erase)> {
  static const MethodInfo* get() {
    static auto* eraseOptions = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/EraseOptions")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Erase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eraseOptions, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::EraseAsync
// Il2CppName: EraseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::EraseAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "EraseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::EraseAsync
// Il2CppName: EraseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpatialAnchor::EraseOptions)>(&GlobalNamespace::OVRSpatialAnchor::EraseAsync)> {
  static const MethodInfo* get() {
    static auto* eraseOptions = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/EraseOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "EraseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eraseOptions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ThrowIfBound
// Il2CppName: ThrowIfBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::ThrowIfBound)> {
  static const MethodInfo* get() {
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ThrowIfBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::InitializeUnchecked
// Il2CppName: InitializeUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)(::GlobalNamespace::OVRSpace, ::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::InitializeUnchecked)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "InitializeUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::SaveBatchAnchors
// Il2CppName: SaveBatchAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSpatialAnchor::SaveBatchAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "SaveBatchAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::ShareBatchAnchors
// Il2CppName: ShareBatchAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSpatialAnchor::ShareBatchAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "ShareBatchAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::GetTrackingSpacePose
// Il2CppName: GetTrackingSpacePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPose (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::GetTrackingSpacePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "GetTrackingSpacePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::CreateSpatialAnchor
// Il2CppName: CreateSpatialAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::CreateSpatialAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "CreateSpatialAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::TryGetPose
// Il2CppName: TryGetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRSpace, ByRef<::GlobalNamespace::OVRPose>)>(&GlobalNamespace::OVRSpatialAnchor::TryGetPose)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "TryGetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, pose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpatialAnchor::*)()>(&GlobalNamespace::OVRSpatialAnchor::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::TryExtractValue
// Il2CppName: TryExtractValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::InitializeOnLoad
// Il2CppName: InitializeOnLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSpatialAnchor::InitializeOnLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "InitializeOnLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSpatialAnchor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::InvokeMultiAnchorDelegate
// Il2CppName: InvokeMultiAnchorDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult, ::GlobalNamespace::OVRSpatialAnchor::MultiAnchorActionType)>(&GlobalNamespace::OVRSpatialAnchor::InvokeMultiAnchorDelegate)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")->byval_arg;
    static auto* actionType = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/MultiAnchorActionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "InvokeMultiAnchorDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result, actionType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpatialAnchorCreateComplete
// Il2CppName: OnSpatialAnchorCreateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::OnSpatialAnchorCreateComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpatialAnchorCreateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, success, space, uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpaceSaveComplete
// Il2CppName: OnSpaceSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid)>(&GlobalNamespace::OVRSpatialAnchor::OnSpaceSaveComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpaceSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, space, result, uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpaceEraseComplete
// Il2CppName: OnSpaceEraseComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation)>(&GlobalNamespace::OVRSpatialAnchor::OnSpaceEraseComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpaceEraseComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result, uuid, location});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadUnboundAnchors
// Il2CppName: LoadUnboundAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRSpatialAnchor::LoadOptions, ::System::Action_1<::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>>*)>(&GlobalNamespace::OVRSpatialAnchor::LoadUnboundAnchors)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/LoadOptions")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/UnboundAnchor"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "LoadUnboundAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options, onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::LoadUnboundAnchorsAsync
// Il2CppName: LoadUnboundAnchorsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<::ArrayW<::GlobalNamespace::OVRSpatialAnchor::UnboundAnchor>> (*)(::GlobalNamespace::OVRSpatialAnchor::LoadOptions)>(&GlobalNamespace::OVRSpatialAnchor::LoadUnboundAnchorsAsync)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/LoadOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "LoadUnboundAnchorsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpaceQueryComplete
// Il2CppName: OnSpaceQueryComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, bool)>(&GlobalNamespace::OVRSpatialAnchor::OnSpaceQueryComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* queryResult = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpaceQueryComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, queryResult});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::PopulateUnbound
// Il2CppName: PopulateUnbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Guid, uint64_t)>(&GlobalNamespace::OVRSpatialAnchor::PopulateUnbound)> {
  static const MethodInfo* get() {
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "PopulateUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuid, space});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpaceSetComponentStatusComplete
// Il2CppName: OnSpaceSetComponentStatusComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool)>(&GlobalNamespace::OVRSpatialAnchor::OnSpaceSetComponentStatusComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("", "OVRSpace")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* componentType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpaceSetComponentStatusComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result, space, uuid, componentType, enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnSpaceListSaveComplete
// Il2CppName: OnSpaceListSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult)>(&GlobalNamespace::OVRSpatialAnchor::OnSpaceListSaveComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnSpaceListSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::OnShareSpacesComplete
// Il2CppName: OnShareSpacesComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult)>(&GlobalNamespace::OVRSpatialAnchor::OnShareSpacesComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpatialAnchor*), "OnShareSpacesComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpatialAnchor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
