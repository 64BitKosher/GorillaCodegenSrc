// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaNetworking.CosmeticsController/CosmeticSlots
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NonCosmeticHandItem
  class NonCosmeticHandItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NonCosmeticHandItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NonCosmeticHandItem*, "", "NonCosmeticHandItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: NonCosmeticHandItem
  // [TokenAttribute] Offset: FFFFFFFF
  class NonCosmeticHandItem : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GorillaNetworking.CosmeticsController/CosmeticSlots cosmeticSlots
    // Size: 0x4
    // Offset: 0x20
    ::GorillaNetworking::CosmeticsController::CosmeticSlots cosmeticSlots;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController::CosmeticSlots) == 0x4);
    // Padding between fields: cosmeticSlots and: itemPrefab
    char __padding0[0x4] = {};
    // public UnityEngine.GameObject itemPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* itemPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public GorillaNetworking.CosmeticsController/CosmeticSlots cosmeticSlots
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSlots& dyn_cosmeticSlots();
    // Get instance field reference: public UnityEngine.GameObject itemPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_itemPrefab();
    // public System.Void EnableItem(System.Boolean enable)
    // Offset: 0x291BB3C
    void EnableItem(bool enable);
    // public System.Boolean get_IsEnabled()
    // Offset: 0x291BBDC
    bool get_IsEnabled();
    // public System.Void .ctor()
    // Offset: 0x291BC6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NonCosmeticHandItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NonCosmeticHandItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NonCosmeticHandItem*, creationType>()));
    }
  }; // NonCosmeticHandItem
  #pragma pack(pop)
  static check_size<sizeof(NonCosmeticHandItem), 40 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_NonCosmeticHandItemSizeCheck;
  static_assert(sizeof(NonCosmeticHandItem) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NonCosmeticHandItem::EnableItem
// Il2CppName: EnableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NonCosmeticHandItem::*)(bool)>(&GlobalNamespace::NonCosmeticHandItem::EnableItem)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NonCosmeticHandItem*), "EnableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NonCosmeticHandItem::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NonCosmeticHandItem::*)()>(&GlobalNamespace::NonCosmeticHandItem::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NonCosmeticHandItem*), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NonCosmeticHandItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
