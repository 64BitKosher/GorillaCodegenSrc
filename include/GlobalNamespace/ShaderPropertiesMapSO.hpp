// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ShaderPropertiesMapSO
  class ShaderPropertiesMapSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ShaderPropertiesMapSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ShaderPropertiesMapSO*, "", "ShaderPropertiesMapSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ShaderPropertiesMapSO
  // [TokenAttribute] Offset: FFFFFFFF
  class ShaderPropertiesMapSO : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.String,System.String[]> shaderToTex2DProps
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>* shaderToTex2DProps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kResourcesAssetName
    static constexpr const char* kResourcesAssetName = "ShaderPropertiesMapSO";
    // Get static field: static private System.String kResourcesAssetName
    static ::StringW _get_kResourcesAssetName();
    // Set static field: static private System.String kResourcesAssetName
    static void _set_kResourcesAssetName(::StringW value);
    // Get static field: static private ShaderPropertiesMapSO _instance
    static ::GlobalNamespace::ShaderPropertiesMapSO* _get__instance();
    // Set static field: static private ShaderPropertiesMapSO _instance
    static void _set__instance(::GlobalNamespace::ShaderPropertiesMapSO* value);
    // Get static field: static private System.Boolean <hasInstance>k__BackingField
    static bool _get_$hasInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasInstance>k__BackingField
    static void _set_$hasInstance$k__BackingField(bool value);
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String[]> shaderToTex2DProps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>*& dyn_shaderToTex2DProps();
    // static public System.Boolean get_hasInstance()
    // Offset: 0x2891678
    static bool get_hasInstance();
    // static private System.Void set_hasInstance(System.Boolean value)
    // Offset: 0x28916C0
    static void set_hasInstance(bool value);
    // static public ShaderPropertiesMapSO GetInstance()
    // Offset: 0x2891710
    static ::GlobalNamespace::ShaderPropertiesMapSO* GetInstance();
    // public System.Void .ctor()
    // Offset: 0x28918E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShaderPropertiesMapSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShaderPropertiesMapSO*, creationType>()));
    }
  }; // ShaderPropertiesMapSO
  #pragma pack(pop)
  static check_size<sizeof(ShaderPropertiesMapSO), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>*)> __GlobalNamespace_ShaderPropertiesMapSOSizeCheck;
  static_assert(sizeof(ShaderPropertiesMapSO) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ShaderPropertiesMapSO::get_hasInstance
// Il2CppName: get_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::ShaderPropertiesMapSO::get_hasInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShaderPropertiesMapSO*), "get_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShaderPropertiesMapSO::set_hasInstance
// Il2CppName: set_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::ShaderPropertiesMapSO::set_hasInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShaderPropertiesMapSO*), "set_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShaderPropertiesMapSO::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ShaderPropertiesMapSO* (*)()>(&GlobalNamespace::ShaderPropertiesMapSO::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShaderPropertiesMapSO*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShaderPropertiesMapSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
