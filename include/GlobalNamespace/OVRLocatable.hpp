// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IOVRAnchorComponent`1
#include "GlobalNamespace/IOVRAnchorComponent_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRAnchor because it is already included!
  // Skipping declaration: OVRTask`1 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRLocatable
  struct OVRLocatable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRLocatable, "", "OVRLocatable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRLocatable
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRLocatable/*, public ::System::ValueType, public ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRLocatable>, public ::System::IEquatable_1<::GlobalNamespace::OVRLocatable>*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRLocatable::TrackingSpacePose
    struct TrackingSpacePose;
    public:
    // private readonly System.UInt64 <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: OVRLocatable
    constexpr OVRLocatable(uint64_t Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRLocatable>
    operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRLocatable>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRLocatable>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRLocatable>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRLocatable>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRLocatable>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return Handle;
    }
    // Get static field: static public readonly OVRLocatable Null
    static ::GlobalNamespace::OVRLocatable _get_Null();
    // Set static field: static public readonly OVRLocatable Null
    static void _set_Null(::GlobalNamespace::OVRLocatable value);
    // Get instance field reference: private readonly System.UInt64 <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$Handle$k__BackingField();
    // private OVRPlugin/SpaceComponentType IOVRAnchorComponent<OVRLocatable>.get_Type()
    // Offset: 0x48AEC44
    ::GlobalNamespace::OVRPlugin::SpaceComponentType IOVRAnchorComponent$OVRLocatable$_get_Type();
    // private System.UInt64 IOVRAnchorComponent<OVRLocatable>.get_Handle()
    // Offset: 0x48AEC54
    uint64_t IOVRAnchorComponent$OVRLocatable$_get_Handle();
    // private OVRLocatable IOVRAnchorComponent<OVRLocatable>.FromAnchor(OVRAnchor anchor)
    // Offset: 0x48AEC5C
    ::GlobalNamespace::OVRLocatable IOVRAnchorComponent$OVRLocatable$_FromAnchor(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean get_IsNull()
    // Offset: 0x48AEC70
    bool get_IsNull();
    // public System.Boolean get_IsEnabled()
    // Offset: 0x48AEC80
    bool get_IsEnabled();
    // public OVRTask`1<System.Boolean> SetEnabledAsync(System.Boolean enabled, System.Double timeout)
    // Offset: 0x48AED28
    ::GlobalNamespace::OVRTask_1<bool> SetEnabledAsync(bool enabled, double timeout);
    // public System.Boolean Equals(OVRLocatable other)
    // Offset: 0x48AEE04
    bool Equals(::GlobalNamespace::OVRLocatable other);
    // OVRPlugin/SpaceComponentType get_Type()
    // Offset: 0x48AEC4C
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_Type();
    // System.UInt64 get_Handle()
    // Offset: 0x48AEF74
    uint64_t get_Handle();
    // private System.Void .ctor(OVRAnchor anchor)
    // Offset: 0x48AEC64
    OVRLocatable(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean TryGetSceneAnchorPose(out OVRLocatable/TrackingSpacePose pose)
    // Offset: 0x48AEF7C
    bool TryGetSceneAnchorPose(ByRef<::GlobalNamespace::OVRLocatable::TrackingSpacePose> pose);
    // public System.Boolean TryGetSpatialAnchorPose(out OVRLocatable/TrackingSpacePose pose)
    // Offset: 0x48AF208
    bool TryGetSpatialAnchorPose(ByRef<::GlobalNamespace::OVRLocatable::TrackingSpacePose> pose);
    // static private System.Void .cctor()
    // Offset: 0x48AF30C
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x48AEE2C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x48AEEA4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x48AEEF0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // OVRLocatable
  #pragma pack(pop)
  static check_size<sizeof(OVRLocatable), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRLocatableSizeCheck;
  static_assert(sizeof(OVRLocatable) == 0x8);
  // static public System.Boolean op_Equality(OVRLocatable lhs, OVRLocatable rhs)
  // Offset: 0x48AEE14
  bool operator ==(const ::GlobalNamespace::OVRLocatable& lhs, const ::GlobalNamespace::OVRLocatable& rhs);
  // static public System.Boolean op_Inequality(OVRLocatable lhs, OVRLocatable rhs)
  // Offset: 0x48AEE20
  bool operator !=(const ::GlobalNamespace::OVRLocatable& lhs, const ::GlobalNamespace::OVRLocatable& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_get_Type
// Il2CppName: IOVRAnchorComponent<OVRLocatable>.get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "IOVRAnchorComponent<OVRLocatable>.get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_get_Handle
// Il2CppName: IOVRAnchorComponent<OVRLocatable>.get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "IOVRAnchorComponent<OVRLocatable>.get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_FromAnchor
// Il2CppName: IOVRAnchorComponent<OVRLocatable>.FromAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRLocatable (GlobalNamespace::OVRLocatable::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRLocatable::IOVRAnchorComponent$OVRLocatable$_FromAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "IOVRAnchorComponent<OVRLocatable>.FromAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::SetEnabledAsync
// Il2CppName: SetEnabledAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRLocatable::*)(bool, double)>(&GlobalNamespace::OVRLocatable::SetEnabledAsync)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "SetEnabledAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, timeout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)(::GlobalNamespace::OVRLocatable)>(&GlobalNamespace::OVRLocatable::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRLocatable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::OVRLocatable
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::TryGetSceneAnchorPose
// Il2CppName: TryGetSceneAnchorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)(ByRef<::GlobalNamespace::OVRLocatable::TrackingSpacePose>)>(&GlobalNamespace::OVRLocatable::TryGetSceneAnchorPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRLocatable/TrackingSpacePose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "TryGetSceneAnchorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::TryGetSpatialAnchorPose
// Il2CppName: TryGetSpatialAnchorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)(ByRef<::GlobalNamespace::OVRLocatable::TrackingSpacePose>)>(&GlobalNamespace::OVRLocatable::TryGetSpatialAnchorPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRLocatable/TrackingSpacePose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "TryGetSpatialAnchorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRLocatable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRLocatable::*)(::Il2CppObject*)>(&GlobalNamespace::OVRLocatable::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OVRLocatable::*)()>(&GlobalNamespace::OVRLocatable::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRLocatable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRLocatable::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
