// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ChestObjectHysteresis
  class ChestObjectHysteresis;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ChestObjectHysteresis);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChestObjectHysteresis*, "", "ChestObjectHysteresis");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: ChestObjectHysteresis
  // [TokenAttribute] Offset: FFFFFFFF
  class ChestObjectHysteresis : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // public System.Single angleHysteresis
    // Size: 0x4
    // Offset: 0x20
    float angleHysteresis;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angleBetween
    // Size: 0x4
    // Offset: 0x24
    float angleBetween;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform angleFollower
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* angleFollower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.String angleFollower_path
    // Size: 0x8
    // Offset: 0x30
    ::StringW angleFollower_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Quaternion lastAngleQuat
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Quaternion lastAngleQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion currentAngleQuat
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Quaternion currentAngleQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: public System.Single angleHysteresis
    [[deprecated("Use field access instead!")]] float& dyn_angleHysteresis();
    // Get instance field reference: public System.Single angleBetween
    [[deprecated("Use field access instead!")]] float& dyn_angleBetween();
    // Get instance field reference: public UnityEngine.Transform angleFollower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_angleFollower();
    // Get instance field reference: public System.String angleFollower_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_angleFollower_path();
    // Get instance field reference: private UnityEngine.Quaternion lastAngleQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastAngleQuat();
    // Get instance field reference: private UnityEngine.Quaternion currentAngleQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_currentAngleQuat();
    // Get instance field reference: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField();
    // private System.Boolean GorillaTag.ISpawnable.get_IsSpawned()
    // Offset: 0x26AF728
    bool GorillaTag_ISpawnable_get_IsSpawned();
    // private System.Void GorillaTag.ISpawnable.set_IsSpawned(System.Boolean value)
    // Offset: 0x26AF730
    void GorillaTag_ISpawnable_set_IsSpawned(bool value);
    // private System.Void GorillaTag.ISpawnable.OnSpawn()
    // Offset: 0x26AF73C
    void GorillaTag_ISpawnable_OnSpawn();
    // private System.Void GorillaTag.ISpawnable.OnDespawn()
    // Offset: 0x26AF978
    void GorillaTag_ISpawnable_OnDespawn();
    // private System.Void Start()
    // Offset: 0x26AF97C
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x26AF9CC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x26AFB74
    void OnDisable();
    // public System.Void InvokeUpdate()
    // Offset: 0x26AFCC8
    void InvokeUpdate();
    // public System.Void .ctor()
    // Offset: 0x26AFDEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChestObjectHysteresis* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChestObjectHysteresis*, creationType>()));
    }
  }; // ChestObjectHysteresis
  #pragma pack(pop)
  static check_size<sizeof(ChestObjectHysteresis), 88 + sizeof(bool)> __GlobalNamespace_ChestObjectHysteresisSizeCheck;
  static_assert(sizeof(ChestObjectHysteresis) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_get_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "GorillaTag.ISpawnable.get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_set_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)(bool)>(&GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "GorillaTag.ISpawnable.set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnSpawn
// Il2CppName: GorillaTag.ISpawnable.OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "GorillaTag.ISpawnable.OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnDespawn
// Il2CppName: GorillaTag.ISpawnable.OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "GorillaTag.ISpawnable.OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
