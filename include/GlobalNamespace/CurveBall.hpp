// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CurveBall
  class CurveBall;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CurveBall);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CurveBall*, "", "CurveBall");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: CurveBall
  // [TokenAttribute] Offset: FFFFFFFF
  class CurveBall : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single Interval
    // Size: 0x4
    // Offset: 0x20
    float Interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_speedX
    // Size: 0x4
    // Offset: 0x24
    float m_speedX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_speedZ
    // Size: 0x4
    // Offset: 0x28
    float m_speedZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_timer
    // Size: 0x4
    // Offset: 0x2C
    float m_timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single Interval
    [[deprecated("Use field access instead!")]] float& dyn_Interval();
    // Get instance field reference: private System.Single m_speedX
    [[deprecated("Use field access instead!")]] float& dyn_m_speedX();
    // Get instance field reference: private System.Single m_speedZ
    [[deprecated("Use field access instead!")]] float& dyn_m_speedZ();
    // Get instance field reference: private System.Single m_timer
    [[deprecated("Use field access instead!")]] float& dyn_m_timer();
    // public System.Void Reset()
    // Offset: 0x2684290
    void Reset();
    // public System.Void Start()
    // Offset: 0x2684374
    void Start();
    // public System.Void Update()
    // Offset: 0x2684378
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2684428
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CurveBall* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CurveBall::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CurveBall*, creationType>()));
    }
  }; // CurveBall
  #pragma pack(pop)
  static check_size<sizeof(CurveBall), 44 + sizeof(float)> __GlobalNamespace_CurveBallSizeCheck;
  static_assert(sizeof(CurveBall) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CurveBall::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CurveBall::*)()>(&GlobalNamespace::CurveBall::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CurveBall*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CurveBall::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CurveBall::*)()>(&GlobalNamespace::CurveBall::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CurveBall*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CurveBall::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CurveBall::*)()>(&GlobalNamespace::CurveBall::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CurveBall*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CurveBall::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
