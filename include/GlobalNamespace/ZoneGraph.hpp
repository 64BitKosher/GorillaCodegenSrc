// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ZoneNode
#include "GlobalNamespace/ZoneNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ZoneDef
  class ZoneDef;
  // Forward declaring type: ZoneEntity
  class ZoneEntity;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneGraph
  class ZoneGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneGraph);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneGraph*, "", "ZoneGraph");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: ZoneGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class ZoneGraph : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private ZoneDef[] _zoneDefs
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::ZoneDef*> zoneDefs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneDef*>) == 0x8);
    // private UnityEngine.BoxCollider[] _colliders
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::BoxCollider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoxCollider*>) == 0x8);
    // private ZoneNode[] _nodes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::ZoneNode> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneNode>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneDef> _colliderToZoneDef
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneDef*>* colliderToZoneDef;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneDef*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneNode> _colliderToNode
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneNode>* colliderToNode;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneNode>*) == 0x8);
    // private System.Collections.Generic.List`1<ZoneEntity> _entityList
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>* entityList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>*) == 0x8);
    public:
    // Get static field: static private ZoneGraph gGraph
    static ::GlobalNamespace::ZoneGraph* _get_gGraph();
    // Set static field: static private ZoneGraph gGraph
    static void _set_gGraph(::GlobalNamespace::ZoneGraph* value);
    // Get instance field reference: private ZoneDef[] _zoneDefs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneDef*>& dyn__zoneDefs();
    // Get instance field reference: private UnityEngine.BoxCollider[] _colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoxCollider*>& dyn__colliders();
    // Get instance field reference: private ZoneNode[] _nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneNode>& dyn__nodes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneDef> _colliderToZoneDef
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneDef*>*& dyn__colliderToZoneDef();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneNode> _colliderToNode
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneNode>*& dyn__colliderToNode();
    // Get instance field reference: private System.Collections.Generic.List`1<ZoneEntity> _entityList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>*& dyn__entityList();
    // static public ZoneGraph Instance()
    // Offset: 0x27A8440
    static ::GlobalNamespace::ZoneGraph* Instance();
    // static public ZoneDef ColliderToZoneDef(UnityEngine.BoxCollider collider)
    // Offset: 0x27A7B6C
    static ::GlobalNamespace::ZoneDef* ColliderToZoneDef(::UnityEngine::BoxCollider* collider);
    // static public ZoneNode ColliderToNode(UnityEngine.BoxCollider collider)
    // Offset: 0x27A8120
    static ::GlobalNamespace::ZoneNode ColliderToNode(::UnityEngine::BoxCollider* collider);
    // private System.Void Awake()
    // Offset: 0x27A8488
    void Awake();
    // private System.Void CompileColliderMaps(ZoneDef[] zones)
    // Offset: 0x27A8588
    void CompileColliderMaps(::ArrayW<::GlobalNamespace::ZoneDef*> zones);
    // static public System.Int32 Compare(ZoneDef x, ZoneDef y)
    // Offset: 0x27A8714
    static int Compare(::GlobalNamespace::ZoneDef* x, ::GlobalNamespace::ZoneDef* y);
    // static public System.Void Register(ZoneEntity entity)
    // Offset: 0x27A775C
    static void Register(::GlobalNamespace::ZoneEntity* entity);
    // static public System.Void Unregister(ZoneEntity entity)
    // Offset: 0x27A7964
    static void Unregister(::GlobalNamespace::ZoneEntity* entity);
    // public System.Void .ctor()
    // Offset: 0x27A8848
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneGraph*, creationType>()));
    }
  }; // ZoneGraph
  #pragma pack(pop)
  static check_size<sizeof(ZoneGraph), 72 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>*)> __GlobalNamespace_ZoneGraphSizeCheck;
  static_assert(sizeof(ZoneGraph) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::Instance
// Il2CppName: Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneGraph* (*)()>(&GlobalNamespace::ZoneGraph::Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::ColliderToZoneDef
// Il2CppName: ColliderToZoneDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneDef* (*)(::UnityEngine::BoxCollider*)>(&GlobalNamespace::ZoneGraph::ColliderToZoneDef)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoxCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "ColliderToZoneDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::ColliderToNode
// Il2CppName: ColliderToNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneNode (*)(::UnityEngine::BoxCollider*)>(&GlobalNamespace::ZoneGraph::ColliderToNode)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoxCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "ColliderToNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneGraph::*)()>(&GlobalNamespace::ZoneGraph::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::CompileColliderMaps
// Il2CppName: CompileColliderMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneGraph::*)(::ArrayW<::GlobalNamespace::ZoneDef*>)>(&GlobalNamespace::ZoneGraph::CompileColliderMaps)> {
  static const MethodInfo* get() {
    static auto* zones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ZoneDef"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "CompileColliderMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zones});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::ZoneDef*, ::GlobalNamespace::ZoneDef*)>(&GlobalNamespace::ZoneGraph::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("", "ZoneDef")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("", "ZoneDef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ZoneEntity*)>(&GlobalNamespace::ZoneGraph::Register)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("", "ZoneEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ZoneEntity*)>(&GlobalNamespace::ZoneGraph::Unregister)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("", "ZoneEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneGraph*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
