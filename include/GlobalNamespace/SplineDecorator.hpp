// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SplineDecorator
  class SplineDecorator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SplineDecorator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SplineDecorator*, "", "SplineDecorator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: SplineDecorator
  // [TokenAttribute] Offset: FFFFFFFF
  class SplineDecorator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BezierSpline spline
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BezierSpline* spline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BezierSpline*) == 0x8);
    // public System.Int32 frequency
    // Size: 0x4
    // Offset: 0x28
    int frequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean lookForward
    // Size: 0x1
    // Offset: 0x2C
    bool lookForward;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lookForward and: items
    char __padding2[0x3] = {};
    // public UnityEngine.Transform[] items
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Transform*> items;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    public:
    // Get instance field reference: public BezierSpline spline
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& dyn_spline();
    // Get instance field reference: public System.Int32 frequency
    [[deprecated("Use field access instead!")]] int& dyn_frequency();
    // Get instance field reference: public System.Boolean lookForward
    [[deprecated("Use field access instead!")]] bool& dyn_lookForward();
    // Get instance field reference: public UnityEngine.Transform[] items
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_items();
    // private System.Void Awake()
    // Offset: 0x277EC28
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x277EE3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SplineDecorator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SplineDecorator*, creationType>()));
    }
  }; // SplineDecorator
  #pragma pack(pop)
  static check_size<sizeof(SplineDecorator), 48 + sizeof(::ArrayW<::UnityEngine::Transform*>)> __GlobalNamespace_SplineDecoratorSizeCheck;
  static_assert(sizeof(SplineDecorator) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SplineDecorator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SplineDecorator::*)()>(&GlobalNamespace::SplineDecorator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SplineDecorator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SplineDecorator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
