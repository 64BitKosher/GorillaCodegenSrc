// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorField
  class BoingReactorField;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LiquidMain
  class LiquidMain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LiquidMain);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LiquidMain*, "", "LiquidMain");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: LiquidMain
  // [TokenAttribute] Offset: FFFFFFFF
  class LiquidMain : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material PlaneMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* PlaneMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public BoingKit.BoingReactorField ReactorField
    // Size: 0x8
    // Offset: 0x28
    ::BoingKit::BoingReactorField* ReactorField;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingReactorField*) == 0x8);
    // public UnityEngine.GameObject Effector
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* Effector;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Mesh m_planeMesh
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Mesh* m_planeMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Matrix4x4[][] m_aaInstancedPlaneCellMatrix
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>> m_aaInstancedPlaneCellMatrix;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>>) == 0x8);
    // private UnityEngine.GameObject[] m_aMovingEffector
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::GameObject*> m_aMovingEffector;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.Single[] m_aMovingEffectorPhase
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> m_aMovingEffectorPhase;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get static field: static private readonly System.Single kPlaneMeshCellSize
    static float _get_kPlaneMeshCellSize();
    // Set static field: static private readonly System.Single kPlaneMeshCellSize
    static void _set_kPlaneMeshCellSize(float value);
    // Get static field: static private readonly System.Int32 kNumInstancedPlaneCellPerDrawCall
    static int _get_kNumInstancedPlaneCellPerDrawCall();
    // Set static field: static private readonly System.Int32 kNumInstancedPlaneCellPerDrawCall
    static void _set_kNumInstancedPlaneCellPerDrawCall(int value);
    // Get static field: static private readonly System.Int32 kNumMovingEffectors
    static int _get_kNumMovingEffectors();
    // Set static field: static private readonly System.Int32 kNumMovingEffectors
    static void _set_kNumMovingEffectors(int value);
    // Get static field: static private readonly System.Single kMovingEffectorPhaseSpeed
    static float _get_kMovingEffectorPhaseSpeed();
    // Set static field: static private readonly System.Single kMovingEffectorPhaseSpeed
    static void _set_kMovingEffectorPhaseSpeed(float value);
    // Get static field: static private System.Int32 kNumPlaneCells
    static int _get_kNumPlaneCells();
    // Set static field: static private System.Int32 kNumPlaneCells
    static void _set_kNumPlaneCells(int value);
    // Get static field: static private readonly System.Int32 kPlaneMeshResolution
    static int _get_kPlaneMeshResolution();
    // Set static field: static private readonly System.Int32 kPlaneMeshResolution
    static void _set_kPlaneMeshResolution(int value);
    // Get instance field reference: public UnityEngine.Material PlaneMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_PlaneMaterial();
    // Get instance field reference: public BoingKit.BoingReactorField ReactorField
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingReactorField*& dyn_ReactorField();
    // Get instance field reference: public UnityEngine.GameObject Effector
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Effector();
    // Get instance field reference: private UnityEngine.Mesh m_planeMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_planeMesh();
    // Get instance field reference: private UnityEngine.Matrix4x4[][] m_aaInstancedPlaneCellMatrix
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Matrix4x4>>& dyn_m_aaInstancedPlaneCellMatrix();
    // Get instance field reference: private UnityEngine.GameObject[] m_aMovingEffector
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_m_aMovingEffector();
    // Get instance field reference: private System.Single[] m_aMovingEffectorPhase
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_aMovingEffectorPhase();
    // private System.Void ResetEffector(UnityEngine.GameObject obj)
    // Offset: 0x2683608
    void ResetEffector(::UnityEngine::GameObject* obj);
    // public System.Void Start()
    // Offset: 0x26836F8
    void Start();
    // public System.Void Update()
    // Offset: 0x2683ED4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2684220
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiquidMain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LiquidMain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiquidMain*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2684228
    static void _cctor();
  }; // LiquidMain
  #pragma pack(pop)
  static check_size<sizeof(LiquidMain), 80 + sizeof(::ArrayW<float>)> __GlobalNamespace_LiquidMainSizeCheck;
  static_assert(sizeof(LiquidMain) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LiquidMain::ResetEffector
// Il2CppName: ResetEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiquidMain::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LiquidMain::ResetEffector)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiquidMain*), "ResetEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiquidMain::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiquidMain::*)()>(&GlobalNamespace::LiquidMain::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiquidMain*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiquidMain::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiquidMain::*)()>(&GlobalNamespace::LiquidMain::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiquidMain*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiquidMain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LiquidMain::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LiquidMain::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiquidMain*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
