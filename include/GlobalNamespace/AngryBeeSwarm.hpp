// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshPath
  class NavMeshPath;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AngryBeeAnimator
  class AngryBeeAnimator;
  // Skipping declaration: ChaseState because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AngryBeeSwarm
  class AngryBeeSwarm;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AngryBeeSwarm);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AngryBeeSwarm*, "", "AngryBeeSwarm");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: AngryBeeSwarm
  // [TokenAttribute] Offset: FFFFFFFF
  class AngryBeeSwarm : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IOnPhotonViewOwnerChange*/ {
    public:
    // Nested type: ::GlobalNamespace::AngryBeeSwarm::ChaseState
    struct ChaseState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AngryBeeSwarm/ChaseState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ChaseState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ChaseState
      constexpr ChaseState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AngryBeeSwarm/ChaseState Dormant
      static constexpr const int Dormant = 1;
      // Get static field: static public AngryBeeSwarm/ChaseState Dormant
      static ::GlobalNamespace::AngryBeeSwarm::ChaseState _get_Dormant();
      // Set static field: static public AngryBeeSwarm/ChaseState Dormant
      static void _set_Dormant(::GlobalNamespace::AngryBeeSwarm::ChaseState value);
      // static field const value: static public AngryBeeSwarm/ChaseState InitialEmerge
      static constexpr const int InitialEmerge = 2;
      // Get static field: static public AngryBeeSwarm/ChaseState InitialEmerge
      static ::GlobalNamespace::AngryBeeSwarm::ChaseState _get_InitialEmerge();
      // Set static field: static public AngryBeeSwarm/ChaseState InitialEmerge
      static void _set_InitialEmerge(::GlobalNamespace::AngryBeeSwarm::ChaseState value);
      // static field const value: static public AngryBeeSwarm/ChaseState Chasing
      static constexpr const int Chasing = 4;
      // Get static field: static public AngryBeeSwarm/ChaseState Chasing
      static ::GlobalNamespace::AngryBeeSwarm::ChaseState _get_Chasing();
      // Set static field: static public AngryBeeSwarm/ChaseState Chasing
      static void _set_Chasing(::GlobalNamespace::AngryBeeSwarm::ChaseState value);
      // static field const value: static public AngryBeeSwarm/ChaseState Grabbing
      static constexpr const int Grabbing = 8;
      // Get static field: static public AngryBeeSwarm/ChaseState Grabbing
      static ::GlobalNamespace::AngryBeeSwarm::ChaseState _get_Grabbing();
      // Set static field: static public AngryBeeSwarm/ChaseState Grabbing
      static void _set_Grabbing(::GlobalNamespace::AngryBeeSwarm::ChaseState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // AngryBeeSwarm/ChaseState
    #pragma pack(pop)
    static check_size<sizeof(AngryBeeSwarm::ChaseState), 0 + sizeof(int)> __GlobalNamespace_AngryBeeSwarm_ChaseStateSizeCheck;
    static_assert(sizeof(AngryBeeSwarm::ChaseState) == 0x4);
    public:
    // public System.Single heightAboveNavmesh
    // Size: 0x4
    // Offset: 0x28
    float heightAboveNavmesh;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: heightAboveNavmesh and: followTarget
    char __padding0[0x4] = {};
    // public UnityEngine.Transform followTarget
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* followTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single velocityStep
    // Size: 0x4
    // Offset: 0x38
    float velocityStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentSpeed
    // Size: 0x4
    // Offset: 0x3C
    float currentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single velocityIncreaseInterval
    // Size: 0x4
    // Offset: 0x40
    float velocityIncreaseInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 noisyOffset
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 noisyOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 ghostOffsetGrabbingLocal
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 ghostOffsetGrabbingLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single emergeStartedTimestamp
    // Size: 0x4
    // Offset: 0x5C
    float emergeStartedTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single grabTimestamp
    // Size: 0x4
    // Offset: 0x60
    float grabTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastSpeedIncreased
    // Size: 0x4
    // Offset: 0x64
    float lastSpeedIncreased;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single totalTimeToEmerge
    // Size: 0x4
    // Offset: 0x68
    float totalTimeToEmerge;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single catchDistance
    // Size: 0x4
    // Offset: 0x6C
    float catchDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single grabDuration
    // Size: 0x4
    // Offset: 0x70
    float grabDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single grabSpeed
    // Size: 0x4
    // Offset: 0x74
    float grabSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minGrabCooldown
    // Size: 0x4
    // Offset: 0x78
    float minGrabCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialRangeLimit
    // Size: 0x4
    // Offset: 0x7C
    float initialRangeLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single finalRangeLimit
    // Size: 0x4
    // Offset: 0x80
    float finalRangeLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single rangeLimitBlendDuration
    // Size: 0x4
    // Offset: 0x84
    float rangeLimitBlendDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single boredAfterDuration
    // Size: 0x4
    // Offset: 0x88
    float boredAfterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: boredAfterDuration and: targetPlayer
    char __padding18[0x4] = {};
    // public Photon.Realtime.Player targetPlayer
    // Size: 0x8
    // Offset: 0x90
    ::Photon::Realtime::Player* targetPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public AngryBeeAnimator beeAnimator
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::AngryBeeAnimator* beeAnimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AngryBeeAnimator*) == 0x8);
    // public AngryBeeSwarm/ChaseState currentState
    // Size: 0x4
    // Offset: 0xA0
    ::GlobalNamespace::AngryBeeSwarm::ChaseState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AngryBeeSwarm::ChaseState) == 0x4);
    // public AngryBeeSwarm/ChaseState lastState
    // Size: 0x4
    // Offset: 0xA4
    ::GlobalNamespace::AngryBeeSwarm::ChaseState lastState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AngryBeeSwarm::ChaseState) == 0x4);
    // public Photon.Realtime.Player grabbedPlayer
    // Size: 0x8
    // Offset: 0xA8
    ::Photon::Realtime::Player* grabbedPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Boolean targetIsOnNavMesh
    // Size: 0x1
    // Offset: 0xB0
    bool targetIsOnNavMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: targetIsOnNavMesh and: hapticStrength
    char __padding24[0x3] = {};
    // public System.Single hapticStrength
    // Size: 0x4
    // Offset: 0xB4
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hapticDuration
    // Size: 0x4
    // Offset: 0xB8
    float hapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MinHeightAboveWater
    // Size: 0x4
    // Offset: 0xBC
    float MinHeightAboveWater;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PlayerMinHeightAboveWater
    // Size: 0x4
    // Offset: 0xC0
    float PlayerMinHeightAboveWater;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RefreshClosestPlayerInterval
    // Size: 0x4
    // Offset: 0xC4
    float RefreshClosestPlayerInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single NextRefreshClosestPlayerTimestamp
    // Size: 0x4
    // Offset: 0xC8
    float NextRefreshClosestPlayerTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BoredToDeathAtTimestamp
    // Size: 0x4
    // Offset: 0xCC
    float BoredToDeathAtTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform testEmergeFrom
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* testEmergeFrom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform testEmergeTo
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Transform* testEmergeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 emergeFromPosition
    // Size: 0xC
    // Offset: 0xE0
    ::UnityEngine::Vector3 emergeFromPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 emergeToPosition
    // Size: 0xC
    // Offset: 0xEC
    ::UnityEngine::Vector3 emergeToPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.AI.NavMeshPath path
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::AI::NavMeshPath* path;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshPath*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> pathPoints
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* pathPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Int32 currentPathPointIdx
    // Size: 0x4
    // Offset: 0x108
    int currentPathPointIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single nextPathTimestamp
    // Size: 0x4
    // Offset: 0x10C
    float nextPathTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // Get static field: static public AngryBeeSwarm instance
    static ::GlobalNamespace::AngryBeeSwarm* _get_instance();
    // Set static field: static public AngryBeeSwarm instance
    static void _set_instance(::GlobalNamespace::AngryBeeSwarm* value);
    // static field const value: static private System.Single navMeshSampleRange
    static constexpr const float navMeshSampleRange = 5;
    // Get static field: static private System.Single navMeshSampleRange
    static float _get_navMeshSampleRange();
    // Set static field: static private System.Single navMeshSampleRange
    static void _set_navMeshSampleRange(float value);
    // Get instance field reference: public System.Single heightAboveNavmesh
    [[deprecated("Use field access instead!")]] float& dyn_heightAboveNavmesh();
    // Get instance field reference: public UnityEngine.Transform followTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_followTarget();
    // Get instance field reference: private System.Single velocityStep
    [[deprecated("Use field access instead!")]] float& dyn_velocityStep();
    // Get instance field reference: private System.Single currentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_currentSpeed();
    // Get instance field reference: private System.Single velocityIncreaseInterval
    [[deprecated("Use field access instead!")]] float& dyn_velocityIncreaseInterval();
    // Get instance field reference: public UnityEngine.Vector3 noisyOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_noisyOffset();
    // Get instance field reference: public UnityEngine.Vector3 ghostOffsetGrabbingLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ghostOffsetGrabbingLocal();
    // Get instance field reference: private System.Single emergeStartedTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_emergeStartedTimestamp();
    // Get instance field reference: private System.Single grabTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_grabTimestamp();
    // Get instance field reference: private System.Single lastSpeedIncreased
    [[deprecated("Use field access instead!")]] float& dyn_lastSpeedIncreased();
    // Get instance field reference: private System.Single totalTimeToEmerge
    [[deprecated("Use field access instead!")]] float& dyn_totalTimeToEmerge();
    // Get instance field reference: private System.Single catchDistance
    [[deprecated("Use field access instead!")]] float& dyn_catchDistance();
    // Get instance field reference: private System.Single grabDuration
    [[deprecated("Use field access instead!")]] float& dyn_grabDuration();
    // Get instance field reference: private System.Single grabSpeed
    [[deprecated("Use field access instead!")]] float& dyn_grabSpeed();
    // Get instance field reference: private System.Single minGrabCooldown
    [[deprecated("Use field access instead!")]] float& dyn_minGrabCooldown();
    // Get instance field reference: private System.Single initialRangeLimit
    [[deprecated("Use field access instead!")]] float& dyn_initialRangeLimit();
    // Get instance field reference: private System.Single finalRangeLimit
    [[deprecated("Use field access instead!")]] float& dyn_finalRangeLimit();
    // Get instance field reference: private System.Single rangeLimitBlendDuration
    [[deprecated("Use field access instead!")]] float& dyn_rangeLimitBlendDuration();
    // Get instance field reference: private System.Single boredAfterDuration
    [[deprecated("Use field access instead!")]] float& dyn_boredAfterDuration();
    // Get instance field reference: public Photon.Realtime.Player targetPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_targetPlayer();
    // Get instance field reference: public AngryBeeAnimator beeAnimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeAnimator*& dyn_beeAnimator();
    // Get instance field reference: public AngryBeeSwarm/ChaseState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeSwarm::ChaseState& dyn_currentState();
    // Get instance field reference: public AngryBeeSwarm/ChaseState lastState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeSwarm::ChaseState& dyn_lastState();
    // Get instance field reference: public Photon.Realtime.Player grabbedPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_grabbedPlayer();
    // Get instance field reference: private System.Boolean targetIsOnNavMesh
    [[deprecated("Use field access instead!")]] bool& dyn_targetIsOnNavMesh();
    // Get instance field reference: public System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: public System.Single hapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_hapticDuration();
    // Get instance field reference: public System.Single MinHeightAboveWater
    [[deprecated("Use field access instead!")]] float& dyn_MinHeightAboveWater();
    // Get instance field reference: public System.Single PlayerMinHeightAboveWater
    [[deprecated("Use field access instead!")]] float& dyn_PlayerMinHeightAboveWater();
    // Get instance field reference: public System.Single RefreshClosestPlayerInterval
    [[deprecated("Use field access instead!")]] float& dyn_RefreshClosestPlayerInterval();
    // Get instance field reference: private System.Single NextRefreshClosestPlayerTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_NextRefreshClosestPlayerTimestamp();
    // Get instance field reference: private System.Single BoredToDeathAtTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_BoredToDeathAtTimestamp();
    // Get instance field reference: private UnityEngine.Transform testEmergeFrom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_testEmergeFrom();
    // Get instance field reference: private UnityEngine.Transform testEmergeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_testEmergeTo();
    // Get instance field reference: private UnityEngine.Vector3 emergeFromPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_emergeFromPosition();
    // Get instance field reference: private UnityEngine.Vector3 emergeToPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_emergeToPosition();
    // Get instance field reference: private UnityEngine.AI.NavMeshPath path
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshPath*& dyn_path();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> pathPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_pathPoints();
    // Get instance field reference: public System.Int32 currentPathPointIdx
    [[deprecated("Use field access instead!")]] int& dyn_currentPathPointIdx();
    // Get instance field reference: private System.Single nextPathTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_nextPathTimestamp();
    // public System.Boolean get_isDormant()
    // Offset: 0x26A349C
    bool get_isDormant();
    // private System.Void Awake()
    // Offset: 0x26A34AC
    void Awake();
    // private System.Void InitializeSwarm()
    // Offset: 0x26A352C
    void InitializeSwarm();
    // private System.Void LateUpdate()
    // Offset: 0x26A3608
    void LateUpdate();
    // public System.Void UpdateState()
    // Offset: 0x26A39C8
    void UpdateState();
    // public System.Void Emerge(UnityEngine.Vector3 fromPosition, UnityEngine.Vector3 toPosition)
    // Offset: 0x26A494C
    void Emerge(::UnityEngine::Vector3 fromPosition, ::UnityEngine::Vector3 toPosition);
    // private System.Void OnChangeState(AngryBeeSwarm/ChaseState newState)
    // Offset: 0x26A3F0C
    void OnChangeState(::GlobalNamespace::AngryBeeSwarm::ChaseState newState);
    // private System.Void ChooseClosestTarget()
    // Offset: 0x26A3B08
    void ChooseClosestTarget();
    // private System.Void SetInitialRotations()
    // Offset: 0x26A49D0
    void SetInitialRotations();
    // private System.Void SwarmEmergeUpdateShared()
    // Offset: 0x26A41F4
    void SwarmEmergeUpdateShared();
    // private System.Void RiseGrabbedLocalPlayer()
    // Offset: 0x26A4650
    void RiseGrabbedLocalPlayer();
    // public System.Void UpdateFollowPath(UnityEngine.Vector3 destination, System.Single currentSpeed)
    // Offset: 0x26A4A4C
    void UpdateFollowPath(::UnityEngine::Vector3 destination, float currentSpeed);
    // private System.Void GetNewPath(UnityEngine.Vector3 destination)
    // Offset: 0x26A4E00
    void GetNewPath(::UnityEngine::Vector3 destination);
    // public System.Void ResetPath()
    // Offset: 0x26A4A40
    void ResetPath();
    // private System.Void ChaseHost()
    // Offset: 0x26A431C
    void ChaseHost();
    // private System.Void MoveBodyShared()
    // Offset: 0x26A45B8
    void MoveBodyShared();
    // private System.Void GrabBodyShared()
    // Offset: 0x26A4870
    void GrabBodyShared();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26A5150
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x26A5380
    void Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // private System.Void TestEmerge()
    // Offset: 0x26A547C
    void TestEmerge();
    // public System.Void .ctor()
    // Offset: 0x26A5500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AngryBeeSwarm* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AngryBeeSwarm*, creationType>()));
    }
    // public override System.Void OnJoinedRoom()
    // Offset: 0x26A5404
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
  }; // AngryBeeSwarm
  #pragma pack(pop)
  static check_size<sizeof(AngryBeeSwarm), 268 + sizeof(float)> __GlobalNamespace_AngryBeeSwarmSizeCheck;
  static_assert(sizeof(AngryBeeSwarm) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AngryBeeSwarm::ChaseState, "", "AngryBeeSwarm/ChaseState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::get_isDormant
// Il2CppName: get_isDormant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::get_isDormant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "get_isDormant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::InitializeSwarm
// Il2CppName: InitializeSwarm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::InitializeSwarm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "InitializeSwarm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::Emerge
// Il2CppName: Emerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::AngryBeeSwarm::Emerge)> {
  static const MethodInfo* get() {
    static auto* fromPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* toPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "Emerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPosition, toPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::OnChangeState
// Il2CppName: OnChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::GlobalNamespace::AngryBeeSwarm::ChaseState)>(&GlobalNamespace::AngryBeeSwarm::OnChangeState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "AngryBeeSwarm/ChaseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "OnChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::ChooseClosestTarget
// Il2CppName: ChooseClosestTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::ChooseClosestTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "ChooseClosestTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::SetInitialRotations
// Il2CppName: SetInitialRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::SetInitialRotations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "SetInitialRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::SwarmEmergeUpdateShared
// Il2CppName: SwarmEmergeUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::SwarmEmergeUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "SwarmEmergeUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::RiseGrabbedLocalPlayer
// Il2CppName: RiseGrabbedLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::RiseGrabbedLocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "RiseGrabbedLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::UpdateFollowPath
// Il2CppName: UpdateFollowPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::AngryBeeSwarm::UpdateFollowPath)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* currentSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "UpdateFollowPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, currentSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::GetNewPath
// Il2CppName: GetNewPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AngryBeeSwarm::GetNewPath)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "GetNewPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::ResetPath
// Il2CppName: ResetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::ResetPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "ResetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::ChaseHost
// Il2CppName: ChaseHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::ChaseHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "ChaseHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::MoveBodyShared
// Il2CppName: MoveBodyShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::MoveBodyShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "MoveBodyShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::GrabBodyShared
// Il2CppName: GrabBodyShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::GrabBodyShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "GrabBodyShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::AngryBeeSwarm::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange
// Il2CppName: Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::AngryBeeSwarm::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::TestEmerge
// Il2CppName: TestEmerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::TestEmerge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "TestEmerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeSwarm::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeSwarm::*)()>(&GlobalNamespace::AngryBeeSwarm::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeSwarm*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
