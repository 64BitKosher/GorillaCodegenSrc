// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MetroBlimp
  class MetroBlimp;
  // Forward declaring type: MetroSpotlight
  class MetroSpotlight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MetroManager
  class MetroManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MetroManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MetroManager*, "", "MetroManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MetroManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MetroManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MetroBlimp[] _blimps
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MetroBlimp*> blimps;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MetroBlimp*>) == 0x8);
    // private MetroSpotlight[] _spotlights
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::MetroSpotlight*> spotlights;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MetroSpotlight*>) == 0x8);
    // private UnityEngine.Transform _blimpsRotationAnchor
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* blimpsRotationAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: private MetroBlimp[] _blimps
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MetroBlimp*>& dyn__blimps();
    // Get instance field reference: private MetroSpotlight[] _spotlights
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MetroSpotlight*>& dyn__spotlights();
    // Get instance field reference: private UnityEngine.Transform _blimpsRotationAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__blimpsRotationAnchor();
    // private System.Void Update()
    // Offset: 0x2694634
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2694944
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetroManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetroManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetroManager*, creationType>()));
    }
  }; // MetroManager
  #pragma pack(pop)
  static check_size<sizeof(MetroManager), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_MetroManagerSizeCheck;
  static_assert(sizeof(MetroManager) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MetroManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MetroManager::*)()>(&GlobalNamespace::MetroManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MetroManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MetroManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
