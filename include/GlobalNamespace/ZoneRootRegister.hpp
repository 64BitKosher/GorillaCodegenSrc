// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: WatchableGameObjectSO
  class WatchableGameObjectSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneRootRegister
  class ZoneRootRegister;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneRootRegister);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneRootRegister*, "", "ZoneRootRegister");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ZoneRootRegister
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneRootRegister : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GorillaTag.WatchableGameObjectSO watchableSlot
    // Size: 0x8
    // Offset: 0x20
    ::GorillaTag::WatchableGameObjectSO* watchableSlot;
    // Field size check
    static_assert(sizeof(::GorillaTag::WatchableGameObjectSO*) == 0x8);
    public:
    // Get instance field reference: private GorillaTag.WatchableGameObjectSO watchableSlot
    [[deprecated("Use field access instead!")]] ::GorillaTag::WatchableGameObjectSO*& dyn_watchableSlot();
    // private System.Void Awake()
    // Offset: 0x289B398
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x289B3FC
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x289B450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneRootRegister* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneRootRegister::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneRootRegister*, creationType>()));
    }
  }; // ZoneRootRegister
  #pragma pack(pop)
  static check_size<sizeof(ZoneRootRegister), 32 + sizeof(::GorillaTag::WatchableGameObjectSO*)> __GlobalNamespace_ZoneRootRegisterSizeCheck;
  static_assert(sizeof(ZoneRootRegister) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneRootRegister::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneRootRegister::*)()>(&GlobalNamespace::ZoneRootRegister::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneRootRegister*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneRootRegister::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneRootRegister::*)()>(&GlobalNamespace::ZoneRootRegister::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneRootRegister*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneRootRegister::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
