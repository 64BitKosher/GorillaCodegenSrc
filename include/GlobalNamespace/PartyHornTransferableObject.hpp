// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PartyHornTransferableObject
  class PartyHornTransferableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PartyHornTransferableObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PartyHornTransferableObject*, "", "PartyHornTransferableObject");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: PartyHornTransferableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class PartyHornTransferableObject : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::PartyHornTransferableObject::PartyHornState
    struct PartyHornState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PartyHornTransferableObject/PartyHornState
    // [TokenAttribute] Offset: FFFFFFFF
    struct PartyHornState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PartyHornState
      constexpr PartyHornState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PartyHornTransferableObject/PartyHornState None
      static constexpr const int None = 1;
      // Get static field: static public PartyHornTransferableObject/PartyHornState None
      static ::GlobalNamespace::PartyHornTransferableObject::PartyHornState _get_None();
      // Set static field: static public PartyHornTransferableObject/PartyHornState None
      static void _set_None(::GlobalNamespace::PartyHornTransferableObject::PartyHornState value);
      // static field const value: static public PartyHornTransferableObject/PartyHornState CoolingDown
      static constexpr const int CoolingDown = 2;
      // Get static field: static public PartyHornTransferableObject/PartyHornState CoolingDown
      static ::GlobalNamespace::PartyHornTransferableObject::PartyHornState _get_CoolingDown();
      // Set static field: static public PartyHornTransferableObject/PartyHornState CoolingDown
      static void _set_CoolingDown(::GlobalNamespace::PartyHornTransferableObject::PartyHornState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // PartyHornTransferableObject/PartyHornState
    #pragma pack(pop)
    static check_size<sizeof(PartyHornTransferableObject::PartyHornState), 0 + sizeof(int)> __GlobalNamespace_PartyHornTransferableObject_PartyHornStateSizeCheck;
    static_assert(sizeof(PartyHornTransferableObject::PartyHornState) == 0x4);
    public:
    // public UnityEngine.GameObject effectsGameObject
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::GameObject* effectsGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single cooldown
    // Size: 0x4
    // Offset: 0x2D8
    float cooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mouthPieceZOffset
    // Size: 0x4
    // Offset: 0x2DC
    float mouthPieceZOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mouthPieceRadius
    // Size: 0x4
    // Offset: 0x2E0
    float mouthPieceRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform mouthPiece
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::Transform* mouthPiece;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 mouthOffset
    // Size: 0xC
    // Offset: 0x2F0
    ::UnityEngine::Vector3 mouthOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean soundActivated
    // Size: 0x1
    // Offset: 0x2FC
    bool soundActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Events.UnityEvent OnCooldownStart
    // Size: 0x8
    // Offset: 0x300
    ::UnityEngine::Events::UnityEvent* OnCooldownStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent OnCooldownReset
    // Size: 0x8
    // Offset: 0x308
    ::UnityEngine::Events::UnityEvent* OnCooldownReset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Single cooldownRemaining
    // Size: 0x4
    // Offset: 0x310
    float cooldownRemaining;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform localHead
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::Transform* localHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private PartyHornTransferableObject/PartyHornState partyHornStateLastFrame
    // Size: 0x4
    // Offset: 0x320
    ::GlobalNamespace::PartyHornTransferableObject::PartyHornState partyHornStateLastFrame;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PartyHornTransferableObject::PartyHornState) == 0x4);
    // private System.Boolean localWasActivated
    // Size: 0x1
    // Offset: 0x324
    bool localWasActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.GameObject effectsGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_effectsGameObject();
    // Get instance field reference: public System.Single cooldown
    [[deprecated("Use field access instead!")]] float& dyn_cooldown();
    // Get instance field reference: public System.Single mouthPieceZOffset
    [[deprecated("Use field access instead!")]] float& dyn_mouthPieceZOffset();
    // Get instance field reference: public System.Single mouthPieceRadius
    [[deprecated("Use field access instead!")]] float& dyn_mouthPieceRadius();
    // Get instance field reference: public UnityEngine.Transform mouthPiece
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mouthPiece();
    // Get instance field reference: public UnityEngine.Vector3 mouthOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mouthOffset();
    // Get instance field reference: public System.Boolean soundActivated
    [[deprecated("Use field access instead!")]] bool& dyn_soundActivated();
    // Get instance field reference: public UnityEngine.Events.UnityEvent OnCooldownStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_OnCooldownStart();
    // Get instance field reference: public UnityEngine.Events.UnityEvent OnCooldownReset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_OnCooldownReset();
    // Get instance field reference: private System.Single cooldownRemaining
    [[deprecated("Use field access instead!")]] float& dyn_cooldownRemaining();
    // Get instance field reference: private UnityEngine.Transform localHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_localHead();
    // Get instance field reference: private PartyHornTransferableObject/PartyHornState partyHornStateLastFrame
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PartyHornTransferableObject::PartyHornState& dyn_partyHornStateLastFrame();
    // Get instance field reference: private System.Boolean localWasActivated
    [[deprecated("Use field access instead!")]] bool& dyn_localWasActivated();
    // protected UnityEngine.Vector3 CalcMouthPiecePos()
    // Offset: 0x269FADC
    ::UnityEngine::Vector3 CalcMouthPiecePos();
    // private System.Void InitToDefault()
    // Offset: 0x269FA70
    void InitToDefault();
    // public override System.Void OnEnable()
    // Offset: 0x269F9E0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void ResetToDefaultState()
    // Offset: 0x269FAC0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::ResetToDefaultState()
    void ResetToDefaultState();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x269FBC4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26A0020
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public System.Void .ctor()
    // Offset: 0x26A00C4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PartyHornTransferableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PartyHornTransferableObject*, creationType>()));
    }
  }; // PartyHornTransferableObject
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PartyHornTransferableObject::PartyHornState, "", "PartyHornTransferableObject/PartyHornState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::CalcMouthPiecePos
// Il2CppName: CalcMouthPiecePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::CalcMouthPiecePos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "CalcMouthPiecePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::InitToDefault
// Il2CppName: InitToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::InitToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "InitToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PartyHornTransferableObject::*)()>(&GlobalNamespace::PartyHornTransferableObject::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PartyHornTransferableObject*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PartyHornTransferableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
