// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: XSceneRef
#include "GlobalNamespace/XSceneRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerSpeedBasedAudio
  class PlayerSpeedBasedAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerSpeedBasedAudio);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerSpeedBasedAudio*, "", "PlayerSpeedBasedAudio");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: PlayerSpeedBasedAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerSpeedBasedAudio : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single minVolumeSpeed
    // Size: 0x4
    // Offset: 0x20
    float minVolumeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fullVolumeSpeed
    // Size: 0x4
    // Offset: 0x24
    float fullVolumeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fadeTime
    // Size: 0x4
    // Offset: 0x28
    float fadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeTime and: audioSource
    char __padding2[0x4] = {};
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private XSceneRef localPlayerVelocityEstimator
    // Size: 0x11
    // Offset: 0x38
    ::GlobalNamespace::XSceneRef localPlayerVelocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::XSceneRef) == 0x11);
    // Padding between fields: localPlayerVelocityEstimator and: velocityEstimator
    char __padding4[0x7] = {};
    // private GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // private System.Single baseVolume
    // Size: 0x4
    // Offset: 0x58
    float baseVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fadeRate
    // Size: 0x4
    // Offset: 0x5C
    float fadeRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentFadeLevel
    // Size: 0x4
    // Offset: 0x60
    float currentFadeLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single minVolumeSpeed
    [[deprecated("Use field access instead!")]] float& dyn_minVolumeSpeed();
    // Get instance field reference: private System.Single fullVolumeSpeed
    [[deprecated("Use field access instead!")]] float& dyn_fullVolumeSpeed();
    // Get instance field reference: private System.Single fadeTime
    [[deprecated("Use field access instead!")]] float& dyn_fadeTime();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private XSceneRef localPlayerVelocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& dyn_localPlayerVelocityEstimator();
    // Get instance field reference: private GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // Get instance field reference: private System.Single baseVolume
    [[deprecated("Use field access instead!")]] float& dyn_baseVolume();
    // Get instance field reference: private System.Single fadeRate
    [[deprecated("Use field access instead!")]] float& dyn_fadeRate();
    // Get instance field reference: private System.Single currentFadeLevel
    [[deprecated("Use field access instead!")]] float& dyn_currentFadeLevel();
    // private System.Void Start()
    // Offset: 0x278A3DC
    void Start();
    // private System.Void Update()
    // Offset: 0x278A450
    void Update();
    // public System.Void .ctor()
    // Offset: 0x278A584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerSpeedBasedAudio* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerSpeedBasedAudio*, creationType>()));
    }
  }; // PlayerSpeedBasedAudio
  #pragma pack(pop)
  static check_size<sizeof(PlayerSpeedBasedAudio), 96 + sizeof(float)> __GlobalNamespace_PlayerSpeedBasedAudioSizeCheck;
  static_assert(sizeof(PlayerSpeedBasedAudio) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerSpeedBasedAudio::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSpeedBasedAudio::*)()>(&GlobalNamespace::PlayerSpeedBasedAudio::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSpeedBasedAudio*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSpeedBasedAudio::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSpeedBasedAudio::*)()>(&GlobalNamespace::PlayerSpeedBasedAudio::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSpeedBasedAudio*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSpeedBasedAudio::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
