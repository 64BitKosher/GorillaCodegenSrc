// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnterPlayID
  struct EnterPlayID;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnterPlayID, "", "EnterPlayID");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: EnterPlayID
  // [TokenAttribute] Offset: FFFFFFFF
  struct EnterPlayID/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 id
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EnterPlayID
    constexpr EnterPlayID(int id_ = {}) noexcept : id{id_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return id;
    }
    // Get static field: static private System.Int32 currentID
    static int _get_currentID();
    // Set static field: static private System.Int32 currentID
    static void _set_currentID(int value);
    // Get instance field reference: private System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // static private System.Void NextID()
    // Offset: 0x27798E8
    static void NextID();
    // static public EnterPlayID GetCurrent()
    // Offset: 0x2779948
    static ::GlobalNamespace::EnterPlayID GetCurrent();
    // public System.Boolean get_IsCurrent()
    // Offset: 0x27799A0
    bool get_IsCurrent();
    // static private System.Void .cctor()
    // Offset: 0x2779A08
    static void _cctor();
  }; // EnterPlayID
  #pragma pack(pop)
  static check_size<sizeof(EnterPlayID), 0 + sizeof(int)> __GlobalNamespace_EnterPlayIDSizeCheck;
  static_assert(sizeof(EnterPlayID) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnterPlayID::NextID
// Il2CppName: NextID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::EnterPlayID::NextID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnterPlayID), "NextID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnterPlayID::GetCurrent
// Il2CppName: GetCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnterPlayID (*)()>(&GlobalNamespace::EnterPlayID::GetCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnterPlayID), "GetCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnterPlayID::get_IsCurrent
// Il2CppName: get_IsCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::EnterPlayID::*)()>(&GlobalNamespace::EnterPlayID::get_IsCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnterPlayID), "get_IsCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnterPlayID::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::EnterPlayID::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnterPlayID), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
