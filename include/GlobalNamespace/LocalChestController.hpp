// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MazePlayerCollection
  class MazePlayerCollection;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LocalChestController
  class LocalChestController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LocalChestController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocalChestController*, "", "LocalChestController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: LocalChestController
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalChestController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Playables.PlayableDirector director
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Playables::PlayableDirector* director;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // public MazePlayerCollection playerCollectionVolume
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MazePlayerCollection* playerCollectionVolume;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MazePlayerCollection*) == 0x8);
    // private System.Boolean isOpen
    // Size: 0x1
    // Offset: 0x30
    bool isOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Playables.PlayableDirector director
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& dyn_director();
    // Get instance field reference: public MazePlayerCollection playerCollectionVolume
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MazePlayerCollection*& dyn_playerCollectionVolume();
    // Get instance field reference: private System.Boolean isOpen
    [[deprecated("Use field access instead!")]] bool& dyn_isOpen();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x288DBF4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x288DD8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalChestController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalChestController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalChestController*, creationType>()));
    }
  }; // LocalChestController
  #pragma pack(pop)
  static check_size<sizeof(LocalChestController), 48 + sizeof(bool)> __GlobalNamespace_LocalChestControllerSizeCheck;
  static_assert(sizeof(LocalChestController) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocalChestController::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalChestController::*)(::UnityEngine::Collider*)>(&GlobalNamespace::LocalChestController::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalChestController*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalChestController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
