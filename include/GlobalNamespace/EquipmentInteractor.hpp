// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderPieceInteractor
  class BuilderPieceInteractor;
  // Forward declaring type: HoldableObject
  class HoldableObject;
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaHandClimber
  class GorillaHandClimber;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EquipmentInteractor
  class EquipmentInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EquipmentInteractor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EquipmentInteractor*, "", "EquipmentInteractor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: EquipmentInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class EquipmentInteractor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BuilderPieceInteractor builderPieceInteractor
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BuilderPieceInteractor* builderPieceInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPieceInteractor*) == 0x8);
    // public HoldableObject leftHandHeldEquipment
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::HoldableObject* leftHandHeldEquipment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HoldableObject*) == 0x8);
    // public HoldableObject rightHandHeldEquipment
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::HoldableObject* rightHandHeldEquipment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HoldableObject*) == 0x8);
    // public UnityEngine.Transform leftHandTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* leftHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHandTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* rightHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform chestTransform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* chestTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftArmTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* leftArmTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightArmTransform
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* rightArmTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject rightHand
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject leftHand
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean leftHandSet
    // Size: 0x1
    // Offset: 0x70
    bool leftHandSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rightHandSet
    // Size: 0x1
    // Offset: 0x71
    bool rightHandSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightHandSet and: leftHandDevice
    char __padding11[0x6] = {};
    // public UnityEngine.XR.InputDevice leftHandDevice
    // Size: 0x9
    // Offset: 0x78
    ::UnityEngine::XR::InputDevice leftHandDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: leftHandDevice and: rightHandDevice
    char __padding12[0x7] = {};
    // public UnityEngine.XR.InputDevice rightHandDevice
    // Size: 0x9
    // Offset: 0x88
    ::UnityEngine::XR::InputDevice rightHandDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: rightHandDevice and: overlapInteractionPointsLeft
    char __padding13[0x7] = {};
    // public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsLeft
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>* overlapInteractionPointsLeft;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*) == 0x8);
    // public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsRight
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>* overlapInteractionPointsRight;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesLeft
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* collisionDisabledPiecesLeft;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesRight
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* collisionDisabledPiecesRight;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Int32 gorillaInteractableLayerMask
    // Size: 0x4
    // Offset: 0xB8
    int gorillaInteractableLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single grabRadius
    // Size: 0x4
    // Offset: 0xBC
    float grabRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabThreshold
    // Size: 0x4
    // Offset: 0xC0
    float grabThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabHysteresis
    // Size: 0x4
    // Offset: 0xC4
    float grabHysteresis;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean wasLeftGrabPressed
    // Size: 0x1
    // Offset: 0xC8
    bool wasLeftGrabPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasRightGrabPressed
    // Size: 0x1
    // Offset: 0xC9
    bool wasRightGrabPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isLeftGrabbing
    // Size: 0x1
    // Offset: 0xCA
    bool isLeftGrabbing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isRightGrabbing
    // Size: 0x1
    // Offset: 0xCB
    bool isRightGrabbing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean justReleased
    // Size: 0x1
    // Offset: 0xCC
    bool justReleased;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean justGrabbed
    // Size: 0x1
    // Offset: 0xCD
    bool justGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableLeftGrab
    // Size: 0x1
    // Offset: 0xCE
    bool disableLeftGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableRightGrab
    // Size: 0x1
    // Offset: 0xCF
    bool disableRightGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean autoGrabLeft
    // Size: 0x1
    // Offset: 0xD0
    bool autoGrabLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean autoGrabRight
    // Size: 0x1
    // Offset: 0xD1
    bool autoGrabRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoGrabRight and: grabValue
    char __padding31[0x2] = {};
    // private System.Single grabValue
    // Size: 0x4
    // Offset: 0xD4
    float grabValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tempValue
    // Size: 0x4
    // Offset: 0xD8
    float tempValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: tempValue and: tempPoint
    char __padding33[0x4] = {};
    // private InteractionPoint tempPoint
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::InteractionPoint* tempPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InteractionPoint*) == 0x8);
    // private DropZone tempZone
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::DropZone* tempZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DropZone*) == 0x8);
    // private GorillaLocomotion.Climbing.GorillaHandClimber leftClimber
    // Size: 0x8
    // Offset: 0xF0
    ::GorillaLocomotion::Climbing::GorillaHandClimber* leftClimber;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaHandClimber*) == 0x8);
    // private GorillaLocomotion.Climbing.GorillaHandClimber rightClimber
    // Size: 0x8
    // Offset: 0xF8
    ::GorillaLocomotion::Climbing::GorillaHandClimber* rightClimber;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaHandClimber*) == 0x8);
    public:
    // Get static field: static public EquipmentInteractor instance
    static ::GlobalNamespace::EquipmentInteractor* _get_instance();
    // Set static field: static public EquipmentInteractor instance
    static void _set_instance(::GlobalNamespace::EquipmentInteractor* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static private UnityEngine.RaycastHit[] tempHitResults
    static ::ArrayW<::UnityEngine::RaycastHit> _get_tempHitResults();
    // Set static field: static private UnityEngine.RaycastHit[] tempHitResults
    static void _set_tempHitResults(::ArrayW<::UnityEngine::RaycastHit> value);
    // Get instance field reference: public BuilderPieceInteractor builderPieceInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPieceInteractor*& dyn_builderPieceInteractor();
    // Get instance field reference: public HoldableObject leftHandHeldEquipment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& dyn_leftHandHeldEquipment();
    // Get instance field reference: public HoldableObject rightHandHeldEquipment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& dyn_rightHandHeldEquipment();
    // Get instance field reference: public UnityEngine.Transform leftHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandTransform();
    // Get instance field reference: public UnityEngine.Transform rightHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandTransform();
    // Get instance field reference: public UnityEngine.Transform chestTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestTransform();
    // Get instance field reference: public UnityEngine.Transform leftArmTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftArmTransform();
    // Get instance field reference: public UnityEngine.Transform rightArmTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightArmTransform();
    // Get instance field reference: public UnityEngine.GameObject rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightHand();
    // Get instance field reference: public UnityEngine.GameObject leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftHand();
    // Get instance field reference: private System.Boolean leftHandSet
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandSet();
    // Get instance field reference: private System.Boolean rightHandSet
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandSet();
    // Get instance field reference: public UnityEngine.XR.InputDevice leftHandDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_leftHandDevice();
    // Get instance field reference: public UnityEngine.XR.InputDevice rightHandDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_rightHandDevice();
    // Get instance field reference: public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsLeft
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*& dyn_overlapInteractionPointsLeft();
    // Get instance field reference: public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsRight
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*& dyn_overlapInteractionPointsRight();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesLeft
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_collisionDisabledPiecesLeft();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesRight
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_collisionDisabledPiecesRight();
    // Get instance field reference: private System.Int32 gorillaInteractableLayerMask
    [[deprecated("Use field access instead!")]] int& dyn_gorillaInteractableLayerMask();
    // Get instance field reference: public System.Single grabRadius
    [[deprecated("Use field access instead!")]] float& dyn_grabRadius();
    // Get instance field reference: public System.Single grabThreshold
    [[deprecated("Use field access instead!")]] float& dyn_grabThreshold();
    // Get instance field reference: public System.Single grabHysteresis
    [[deprecated("Use field access instead!")]] float& dyn_grabHysteresis();
    // Get instance field reference: public System.Boolean wasLeftGrabPressed
    [[deprecated("Use field access instead!")]] bool& dyn_wasLeftGrabPressed();
    // Get instance field reference: public System.Boolean wasRightGrabPressed
    [[deprecated("Use field access instead!")]] bool& dyn_wasRightGrabPressed();
    // Get instance field reference: public System.Boolean isLeftGrabbing
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftGrabbing();
    // Get instance field reference: public System.Boolean isRightGrabbing
    [[deprecated("Use field access instead!")]] bool& dyn_isRightGrabbing();
    // Get instance field reference: public System.Boolean justReleased
    [[deprecated("Use field access instead!")]] bool& dyn_justReleased();
    // Get instance field reference: public System.Boolean justGrabbed
    [[deprecated("Use field access instead!")]] bool& dyn_justGrabbed();
    // Get instance field reference: public System.Boolean disableLeftGrab
    [[deprecated("Use field access instead!")]] bool& dyn_disableLeftGrab();
    // Get instance field reference: public System.Boolean disableRightGrab
    [[deprecated("Use field access instead!")]] bool& dyn_disableRightGrab();
    // Get instance field reference: public System.Boolean autoGrabLeft
    [[deprecated("Use field access instead!")]] bool& dyn_autoGrabLeft();
    // Get instance field reference: public System.Boolean autoGrabRight
    [[deprecated("Use field access instead!")]] bool& dyn_autoGrabRight();
    // Get instance field reference: private System.Single grabValue
    [[deprecated("Use field access instead!")]] float& dyn_grabValue();
    // Get instance field reference: private System.Single tempValue
    [[deprecated("Use field access instead!")]] float& dyn_tempValue();
    // Get instance field reference: private InteractionPoint tempPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& dyn_tempPoint();
    // Get instance field reference: private DropZone tempZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DropZone*& dyn_tempZone();
    // Get instance field reference: private GorillaLocomotion.Climbing.GorillaHandClimber leftClimber
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaHandClimber*& dyn_leftClimber();
    // Get instance field reference: private GorillaLocomotion.Climbing.GorillaHandClimber rightClimber
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaHandClimber*& dyn_rightClimber();
    // private System.Void Awake()
    // Offset: 0x29674D8
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x29676A0
    void OnDestroy();
    // public System.Void ReleaseRightHand()
    // Offset: 0x2965500
    void ReleaseRightHand();
    // public System.Void ReleaseLeftHand()
    // Offset: 0x2965424
    void ReleaseLeftHand();
    // public System.Void ForceStopClimbing()
    // Offset: 0x2967788
    void ForceStopClimbing();
    // public System.Boolean GetIsHolding(UnityEngine.XR.XRNode node)
    // Offset: 0x29677C8
    bool GetIsHolding(::UnityEngine::XR::XRNode node);
    // private System.Void LateUpdate()
    // Offset: 0x296783C
    void LateUpdate();
    // private System.Void FireHandInteractions(UnityEngine.GameObject interactingHand, System.Boolean isLeftHand, BuilderPiece pieceInHand)
    // Offset: 0x2967ADC
    void FireHandInteractions(::UnityEngine::GameObject* interactingHand, bool isLeftHand, ::GlobalNamespace::BuilderPiece* pieceInHand);
    // public System.Void UpdateHandEquipment(HoldableObject newEquipment, System.Boolean forLeftHand)
    // Offset: 0x2967FE8
    void UpdateHandEquipment(::GlobalNamespace::HoldableObject* newEquipment, bool forLeftHand);
    // public System.Void CheckInputValue(System.Boolean isLeftHand)
    // Offset: 0x2967A8C
    void CheckInputValue(bool isLeftHand);
    // public System.Void ForceDropEquipment(HoldableObject equipment)
    // Offset: 0x29681CC
    void ForceDropEquipment(::GlobalNamespace::HoldableObject* equipment);
    // public System.Void ForceDropManipulatableObject(HoldableObject manipulatableObject)
    // Offset: 0x2968298
    void ForceDropManipulatableObject(::GlobalNamespace::HoldableObject* manipulatableObject);
    // public System.Void .ctor()
    // Offset: 0x29683A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EquipmentInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EquipmentInteractor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29684D8
    static void _cctor();
  }; // EquipmentInteractor
  #pragma pack(pop)
  static check_size<sizeof(EquipmentInteractor), 248 + sizeof(::GorillaLocomotion::Climbing::GorillaHandClimber*)> __GlobalNamespace_EquipmentInteractorSizeCheck;
  static_assert(sizeof(EquipmentInteractor) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::ReleaseRightHand
// Il2CppName: ReleaseRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::ReleaseRightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "ReleaseRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::ReleaseLeftHand
// Il2CppName: ReleaseLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::ReleaseLeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "ReleaseLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::ForceStopClimbing
// Il2CppName: ForceStopClimbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::ForceStopClimbing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "ForceStopClimbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::GetIsHolding
// Il2CppName: GetIsHolding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::EquipmentInteractor::*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::EquipmentInteractor::GetIsHolding)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "GetIsHolding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)()>(&GlobalNamespace::EquipmentInteractor::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::FireHandInteractions
// Il2CppName: FireHandInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)(::UnityEngine::GameObject*, bool, ::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::EquipmentInteractor::FireHandInteractions)> {
  static const MethodInfo* get() {
    static auto* interactingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pieceInHand = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "FireHandInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactingHand, isLeftHand, pieceInHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::UpdateHandEquipment
// Il2CppName: UpdateHandEquipment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)(::GlobalNamespace::HoldableObject*, bool)>(&GlobalNamespace::EquipmentInteractor::UpdateHandEquipment)> {
  static const MethodInfo* get() {
    static auto* newEquipment = &::il2cpp_utils::GetClassFromName("", "HoldableObject")->byval_arg;
    static auto* forLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "UpdateHandEquipment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEquipment, forLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::CheckInputValue
// Il2CppName: CheckInputValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)(bool)>(&GlobalNamespace::EquipmentInteractor::CheckInputValue)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "CheckInputValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::ForceDropEquipment
// Il2CppName: ForceDropEquipment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)(::GlobalNamespace::HoldableObject*)>(&GlobalNamespace::EquipmentInteractor::ForceDropEquipment)> {
  static const MethodInfo* get() {
    static auto* equipment = &::il2cpp_utils::GetClassFromName("", "HoldableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "ForceDropEquipment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{equipment});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::ForceDropManipulatableObject
// Il2CppName: ForceDropManipulatableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EquipmentInteractor::*)(::GlobalNamespace::HoldableObject*)>(&GlobalNamespace::EquipmentInteractor::ForceDropManipulatableObject)> {
  static const MethodInfo* get() {
    static auto* manipulatableObject = &::il2cpp_utils::GetClassFromName("", "HoldableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), "ForceDropManipulatableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manipulatableObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::EquipmentInteractor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::EquipmentInteractor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EquipmentInteractor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
