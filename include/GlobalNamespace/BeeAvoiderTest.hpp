// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeeAvoiderTest
  class BeeAvoiderTest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeeAvoiderTest);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeeAvoiderTest*, "", "BeeAvoiderTest");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: BeeAvoiderTest
  // [TokenAttribute] Offset: FFFFFFFF
  class BeeAvoiderTest : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject[] patrolPoints
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::GameObject*> patrolPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] avoidancePoints
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> avoidancePoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x30
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single acceleration
    // Size: 0x4
    // Offset: 0x34
    float acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single instability
    // Size: 0x4
    // Offset: 0x38
    float instability;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single instabilityOffRadius
    // Size: 0x4
    // Offset: 0x3C
    float instabilityOffRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single drag
    // Size: 0x4
    // Offset: 0x40
    float drag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single avoidRadius
    // Size: 0x4
    // Offset: 0x44
    float avoidRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single patrolArrivedRadius
    // Size: 0x4
    // Offset: 0x48
    float patrolArrivedRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 nextPatrolPoint
    // Size: 0x4
    // Offset: 0x4C
    int nextPatrolPoint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.GameObject[] patrolPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_patrolPoints();
    // Get instance field reference: public UnityEngine.GameObject[] avoidancePoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_avoidancePoints();
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: public System.Single acceleration
    [[deprecated("Use field access instead!")]] float& dyn_acceleration();
    // Get instance field reference: public System.Single instability
    [[deprecated("Use field access instead!")]] float& dyn_instability();
    // Get instance field reference: public System.Single instabilityOffRadius
    [[deprecated("Use field access instead!")]] float& dyn_instabilityOffRadius();
    // Get instance field reference: public System.Single drag
    [[deprecated("Use field access instead!")]] float& dyn_drag();
    // Get instance field reference: public System.Single avoidRadius
    [[deprecated("Use field access instead!")]] float& dyn_avoidRadius();
    // Get instance field reference: public System.Single patrolArrivedRadius
    [[deprecated("Use field access instead!")]] float& dyn_patrolArrivedRadius();
    // Get instance field reference: private System.Int32 nextPatrolPoint
    [[deprecated("Use field access instead!")]] int& dyn_nextPatrolPoint();
    // Get instance field reference: private UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // public System.Void Update()
    // Offset: 0x2786644
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2786C34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeeAvoiderTest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeeAvoiderTest*, creationType>()));
    }
  }; // BeeAvoiderTest
  #pragma pack(pop)
  static check_size<sizeof(BeeAvoiderTest), 80 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_BeeAvoiderTestSizeCheck;
  static_assert(sizeof(BeeAvoiderTest) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeeAvoiderTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeeAvoiderTest::*)()>(&GlobalNamespace::BeeAvoiderTest::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeeAvoiderTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeeAvoiderTest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
