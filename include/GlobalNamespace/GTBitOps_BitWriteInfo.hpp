// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GTBitOps
#include "GlobalNamespace/GTBitOps.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTBitOps::BitWriteInfo, "", "GTBitOps/BitWriteInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GTBitOps/BitWriteInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct GTBitOps::BitWriteInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Int32 index
    // Size: 0x4
    // Offset: 0x0
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 valueMask
    // Size: 0x4
    // Offset: 0x4
    int valueMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 clearMask
    // Size: 0x4
    // Offset: 0x8
    int clearMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BitWriteInfo
    constexpr BitWriteInfo(int index_ = {}, int valueMask_ = {}, int clearMask_ = {}) noexcept : index{index_}, valueMask{valueMask_}, clearMask{clearMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public readonly System.Int32 valueMask
    [[deprecated("Use field access instead!")]] int& dyn_valueMask();
    // Get instance field reference: public readonly System.Int32 clearMask
    [[deprecated("Use field access instead!")]] int& dyn_clearMask();
    // public System.Void .ctor(System.Int32 index, System.Int32 count)
    // Offset: 0x279B450
    BitWriteInfo(int index, int count);
  }; // GTBitOps/BitWriteInfo
  #pragma pack(pop)
  static check_size<sizeof(GTBitOps::BitWriteInfo), 8 + sizeof(int)> __GlobalNamespace_GTBitOps_BitWriteInfoSizeCheck;
  static_assert(sizeof(GTBitOps::BitWriteInfo) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTBitOps::BitWriteInfo::BitWriteInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
