// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BundleData
  struct BundleData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BundleData, "", "BundleData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BundleData
  // [TokenAttribute] Offset: FFFFFFFF
  struct BundleData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String skuName
    // Size: 0x8
    // Offset: 0x0
    ::StringW skuName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playFabItemName
    // Size: 0x8
    // Offset: 0x8
    ::StringW playFabItemName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 shinyRocks
    // Size: 0x4
    // Offset: 0x10
    int shinyRocks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 majorVersion
    // Size: 0x4
    // Offset: 0x14
    int majorVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minorVersion
    // Size: 0x4
    // Offset: 0x18
    int minorVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minorVersion2
    // Size: 0x4
    // Offset: 0x1C
    int minorVersion2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x20
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: BundleData
    constexpr BundleData(::StringW skuName_ = {}, ::StringW playFabItemName_ = {}, int shinyRocks_ = {}, int majorVersion_ = {}, int minorVersion_ = {}, int minorVersion2_ = {}, bool isActive_ = {}) noexcept : skuName{skuName_}, playFabItemName{playFabItemName_}, shinyRocks{shinyRocks_}, majorVersion{majorVersion_}, minorVersion{minorVersion_}, minorVersion2{minorVersion2_}, isActive{isActive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String skuName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_skuName();
    // Get instance field reference: public System.String playFabItemName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playFabItemName();
    // Get instance field reference: public System.Int32 shinyRocks
    [[deprecated("Use field access instead!")]] int& dyn_shinyRocks();
    // Get instance field reference: public System.Int32 majorVersion
    [[deprecated("Use field access instead!")]] int& dyn_majorVersion();
    // Get instance field reference: public System.Int32 minorVersion
    [[deprecated("Use field access instead!")]] int& dyn_minorVersion();
    // Get instance field reference: public System.Int32 minorVersion2
    [[deprecated("Use field access instead!")]] int& dyn_minorVersion2();
    // Get instance field reference: public System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
  }; // BundleData
  #pragma pack(pop)
  static check_size<sizeof(BundleData), 32 + sizeof(bool)> __GlobalNamespace_BundleDataSizeCheck;
  static_assert(sizeof(BundleData) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
