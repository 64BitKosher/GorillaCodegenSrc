// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Gorillanalytics
  class Gorillanalytics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Gorillanalytics);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Gorillanalytics*, "", "Gorillanalytics");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Gorillanalytics
  // [TokenAttribute] Offset: FFFFFFFF
  class Gorillanalytics : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Gorillanalytics::UploadData
    class UploadData;
    // Nested type: ::GlobalNamespace::Gorillanalytics::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::Gorillanalytics::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    // Nested type: ::GlobalNamespace::Gorillanalytics::$Start$d__8
    class $Start$d__8;
    public:
    // public System.Single interval
    // Size: 0x4
    // Offset: 0x20
    float interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: interval and: oneOverChance
    char __padding0[0x4] = {};
    // public System.Double oneOverChance
    // Size: 0x8
    // Offset: 0x28
    double oneOverChance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public GorillaNetworking.PhotonNetworkController photonNetworkController
    // Size: 0x8
    // Offset: 0x30
    ::GorillaNetworking::PhotonNetworkController* photonNetworkController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> maps
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::StringW>* maps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> modes
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* modes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> queues
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* queues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly Gorillanalytics/UploadData uploadData
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::Gorillanalytics::UploadData* uploadData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Gorillanalytics::UploadData*) == 0x8);
    public:
    // Get instance field reference: public System.Single interval
    [[deprecated("Use field access instead!")]] float& dyn_interval();
    // Get instance field reference: public System.Double oneOverChance
    [[deprecated("Use field access instead!")]] double& dyn_oneOverChance();
    // Get instance field reference: public GorillaNetworking.PhotonNetworkController photonNetworkController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& dyn_photonNetworkController();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> maps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_maps();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> modes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_modes();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> queues
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_queues();
    // Get instance field reference: private readonly Gorillanalytics/UploadData uploadData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Gorillanalytics::UploadData*& dyn_uploadData();
    // private System.Collections.IEnumerator Start()
    // Offset: 0x2710D30
    ::System::Collections::IEnumerator* Start();
    // private System.Void UploadGorillanalytics()
    // Offset: 0x2710DC4
    void UploadGorillanalytics();
    // private System.Void GetMapModeQueue(out System.String map, out System.String mode, out System.String queue)
    // Offset: 0x2711388
    void GetMapModeQueue(ByRef<::StringW> map, ByRef<::StringW> mode, ByRef<::StringW> queue);
    // public System.Void .ctor()
    // Offset: 0x2711684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gorillanalytics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Gorillanalytics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gorillanalytics*, creationType>()));
    }
    // private System.Void <Start>b__8_0(System.String s)
    // Offset: 0x271170C
    void $Start$b__8_0(::StringW s);
  }; // Gorillanalytics
  #pragma pack(pop)
  static check_size<sizeof(Gorillanalytics), 80 + sizeof(::GlobalNamespace::Gorillanalytics::UploadData*)> __GlobalNamespace_GorillanalyticsSizeCheck;
  static_assert(sizeof(Gorillanalytics) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::Gorillanalytics::*)()>(&GlobalNamespace::Gorillanalytics::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::UploadGorillanalytics
// Il2CppName: UploadGorillanalytics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Gorillanalytics::*)()>(&GlobalNamespace::Gorillanalytics::UploadGorillanalytics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics*), "UploadGorillanalytics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::GetMapModeQueue
// Il2CppName: GetMapModeQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Gorillanalytics::*)(ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>)>(&GlobalNamespace::Gorillanalytics::GetMapModeQueue)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* queue = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics*), "GetMapModeQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, mode, queue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Gorillanalytics::$Start$b__8_0
// Il2CppName: <Start>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Gorillanalytics::*)(::StringW)>(&GlobalNamespace::Gorillanalytics::$Start$b__8_0)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Gorillanalytics*), "<Start>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
