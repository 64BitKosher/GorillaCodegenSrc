// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnumUtil
  class EnumUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EnumUtil);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnumUtil*, "", "EnumUtil");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: EnumUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class EnumUtil : public ::Il2CppObject {
    public:
    // static public System.String[] GetNames()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static ::ArrayW<::StringW> GetNames() {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetNames");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetNames", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public TEnum[] GetValues()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static ::ArrayW<TEnum> GetValues() {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetValues", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TEnum>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Int64[] GetLongValues()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static ::ArrayW<int64_t> GetLongValues() {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetLongValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetLongValues", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<int64_t>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.String EnumToName(TEnum e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static ::StringW EnumToName(TEnum e) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::EnumToName");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "EnumToName", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, e);
    }
    // static public TEnum NameToEnum(System.String n)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum NameToEnum(::StringW n) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::NameToEnum");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "NameToEnum", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, n);
    }
    // static public System.Int32 EnumToIndex(TEnum e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static int EnumToIndex(TEnum e) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::EnumToIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "EnumToIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, e);
    }
    // static public TEnum IndexToEnum(System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum IndexToEnum(int i) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::IndexToEnum");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "IndexToEnum", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, i);
    }
    // static public System.Int64 EnumToLong(TEnum e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static int64_t EnumToLong(TEnum e) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::EnumToLong");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "EnumToLong", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, e);
    }
    // static public TEnum LongToEnum(System.Int64 l)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum LongToEnum(int64_t l) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::LongToEnum");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "LongToEnum", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, l);
    }
    // static public TEnum GetValue(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum GetValue(int index) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, index);
    }
    // static public System.Int32 GetIndex(TEnum value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static int GetIndex(TEnum value) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public System.String GetName(TEnum value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static ::StringW GetName(TEnum value) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetName");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetName", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public TEnum GetValue(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum GetValue(::StringW name) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, name);
    }
    // static public System.Int64 GetLongValue(TEnum value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static int64_t GetLongValue(TEnum value) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetLongValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetLongValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public TEnum GetValue(System.Int64 longValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEnum>
    static TEnum GetValue(int64_t longValue) {
      static_assert(std::is_convertible_v<TEnum, ::System::Enum*> && std::is_convertible_v<TEnum, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnumUtil::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnumUtil", "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(longValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEnum>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TEnum, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, longValue);
    }
  }; // EnumUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetNames
// Il2CppName: GetNames
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetValues
// Il2CppName: GetValues
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetLongValues
// Il2CppName: GetLongValues
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::EnumToName
// Il2CppName: EnumToName
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::NameToEnum
// Il2CppName: NameToEnum
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::EnumToIndex
// Il2CppName: EnumToIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::IndexToEnum
// Il2CppName: IndexToEnum
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::EnumToLong
// Il2CppName: EnumToLong
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::LongToEnum
// Il2CppName: LongToEnum
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetIndex
// Il2CppName: GetIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetName
// Il2CppName: GetName
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetLongValue
// Il2CppName: GetLongValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::EnumUtil::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
