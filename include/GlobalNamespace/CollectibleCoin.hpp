// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CollectibleCoin
  class CollectibleCoin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CollectibleCoin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CollectibleCoin*, "", "CollectibleCoin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CollectibleCoin
  // [TokenAttribute] Offset: FFFFFFFF
  class CollectibleCoin : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single RespawnTime
    // Size: 0x4
    // Offset: 0x20
    float RespawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_taken
    // Size: 0x1
    // Offset: 0x24
    bool m_taken;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_taken and: m_respawnPosition
    char __padding1[0x3] = {};
    // private UnityEngine.Vector3 m_respawnPosition
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_respawnPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_respawnTimerStartTime
    // Size: 0x4
    // Offset: 0x34
    float m_respawnTimerStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single RespawnTime
    [[deprecated("Use field access instead!")]] float& dyn_RespawnTime();
    // Get instance field reference: private System.Boolean m_taken
    [[deprecated("Use field access instead!")]] bool& dyn_m_taken();
    // Get instance field reference: private UnityEngine.Vector3 m_respawnPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_respawnPosition();
    // Get instance field reference: private System.Single m_respawnTimerStartTime
    [[deprecated("Use field access instead!")]] float& dyn_m_respawnTimerStartTime();
    // public System.Void Update()
    // Offset: 0x2682574
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26829A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CollectibleCoin* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CollectibleCoin::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CollectibleCoin*, creationType>()));
    }
  }; // CollectibleCoin
  #pragma pack(pop)
  static check_size<sizeof(CollectibleCoin), 52 + sizeof(float)> __GlobalNamespace_CollectibleCoinSizeCheck;
  static_assert(sizeof(CollectibleCoin) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CollectibleCoin::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CollectibleCoin::*)()>(&GlobalNamespace::CollectibleCoin::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollectibleCoin*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollectibleCoin::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
