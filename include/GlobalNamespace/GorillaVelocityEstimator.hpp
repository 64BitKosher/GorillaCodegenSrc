// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaVelocityEstimator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaVelocityEstimator*, "", "GorillaVelocityEstimator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: GorillaVelocityEstimator
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaVelocityEstimator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample
    struct VelocityHistorySample;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaVelocityEstimator/VelocityHistorySample
    // [TokenAttribute] Offset: FFFFFFFF
    struct VelocityHistorySample/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 linear
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 linear;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 angular
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 angular;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: VelocityHistorySample
      constexpr VelocityHistorySample(::UnityEngine::Vector3 linear_ = {}, ::UnityEngine::Vector3 angular_ = {}) noexcept : linear{linear_}, angular{angular_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 linear
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_linear();
      // Get instance field reference: public UnityEngine.Vector3 angular
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_angular();
    }; // GorillaVelocityEstimator/VelocityHistorySample
    #pragma pack(pop)
    static check_size<sizeof(GorillaVelocityEstimator::VelocityHistorySample), 12 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_GorillaVelocityEstimator_VelocityHistorySampleSizeCheck;
    static_assert(sizeof(GorillaVelocityEstimator::VelocityHistorySample) == 0x18);
    public:
    // private System.Int32 numFrames
    // Size: 0x4
    // Offset: 0x20
    int numFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 <linearVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 linearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <angularVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <handPos>k__BackingField
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 handPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private GorillaVelocityEstimator/VelocityHistorySample[] history
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample> history;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample>) == 0x8);
    // private System.Int32 currentFrame
    // Size: 0x4
    // Offset: 0x50
    int currentFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 lastPos
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 lastPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion lastRotation
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Quaternion lastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 lastRotationVec
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 lastRotationVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean useGlobalSpace
    // Size: 0x1
    // Offset: 0x7C
    bool useGlobalSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Int32 numFrames
    [[deprecated("Use field access instead!")]] int& dyn_numFrames();
    // Get instance field reference: private UnityEngine.Vector3 <linearVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$linearVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <angularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$angularVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <handPos>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$handPos$k__BackingField();
    // Get instance field reference: private GorillaVelocityEstimator/VelocityHistorySample[] history
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample>& dyn_history();
    // Get instance field reference: private System.Int32 currentFrame
    [[deprecated("Use field access instead!")]] int& dyn_currentFrame();
    // Get instance field reference: private UnityEngine.Vector3 lastPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPos();
    // Get instance field reference: private UnityEngine.Quaternion lastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastRotation();
    // Get instance field reference: private UnityEngine.Vector3 lastRotationVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRotationVec();
    // Get instance field reference: public System.Boolean useGlobalSpace
    [[deprecated("Use field access instead!")]] bool& dyn_useGlobalSpace();
    // public UnityEngine.Vector3 get_linearVelocity()
    // Offset: 0x269CB28
    ::UnityEngine::Vector3 get_linearVelocity();
    // private System.Void set_linearVelocity(UnityEngine.Vector3 value)
    // Offset: 0x269CB34
    void set_linearVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x269CB40
    ::UnityEngine::Vector3 get_angularVelocity();
    // private System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x269CB4C
    void set_angularVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_handPos()
    // Offset: 0x269CB58
    ::UnityEngine::Vector3 get_handPos();
    // private System.Void set_handPos(UnityEngine.Vector3 value)
    // Offset: 0x269CB64
    void set_handPos(::UnityEngine::Vector3 value);
    // private System.Void Awake()
    // Offset: 0x269CB70
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x269CBC8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x269CE34
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x269CFC0
    void OnDestroy();
    // public System.Void TriggeredLateUpdate()
    // Offset: 0x269D014
    void TriggeredLateUpdate();
    // public System.Void .ctor()
    // Offset: 0x269D3C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaVelocityEstimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaVelocityEstimator*, creationType>()));
    }
  }; // GorillaVelocityEstimator
  #pragma pack(pop)
  static check_size<sizeof(GorillaVelocityEstimator), 124 + sizeof(bool)> __GlobalNamespace_GorillaVelocityEstimatorSizeCheck;
  static_assert(sizeof(GorillaVelocityEstimator) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample, "", "GorillaVelocityEstimator/VelocityHistorySample");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::get_linearVelocity
// Il2CppName: get_linearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::get_linearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "get_linearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::set_linearVelocity
// Il2CppName: set_linearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)(::UnityEngine::Vector3)>(&GlobalNamespace::GorillaVelocityEstimator::set_linearVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "set_linearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::set_angularVelocity
// Il2CppName: set_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)(::UnityEngine::Vector3)>(&GlobalNamespace::GorillaVelocityEstimator::set_angularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::get_handPos
// Il2CppName: get_handPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::get_handPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "get_handPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::set_handPos
// Il2CppName: set_handPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)(::UnityEngine::Vector3)>(&GlobalNamespace::GorillaVelocityEstimator::set_handPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "set_handPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::TriggeredLateUpdate
// Il2CppName: TriggeredLateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimator::*)()>(&GlobalNamespace::GorillaVelocityEstimator::TriggeredLateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimator*), "TriggeredLateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
