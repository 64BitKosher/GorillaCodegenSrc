// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.AudioRolloffMode
#include "UnityEngine/AudioRolloffMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankSO
  class SoundBankSO;
}
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixerGroup
  class AudioMixerGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SoundBankPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SoundBankPlayer*, "", "SoundBankPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: SoundBankPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundBankPlayer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SoundBankPlayer::PlaylistEntry
    struct PlaylistEntry;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SoundBankPlayer/PlaylistEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct PlaylistEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Single volume
      // Size: 0x4
      // Offset: 0x4
      float volume;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single pitch
      // Size: 0x4
      // Offset: 0x8
      float pitch;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: PlaylistEntry
      constexpr PlaylistEntry(int index_ = {}, float volume_ = {}, float pitch_ = {}) noexcept : index{index_}, volume{volume_}, pitch{pitch_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 index
      [[deprecated("Use field access instead!")]] int& dyn_index();
      // Get instance field reference: public System.Single volume
      [[deprecated("Use field access instead!")]] float& dyn_volume();
      // Get instance field reference: public System.Single pitch
      [[deprecated("Use field access instead!")]] float& dyn_pitch();
    }; // SoundBankPlayer/PlaylistEntry
    #pragma pack(pop)
    static check_size<sizeof(SoundBankPlayer::PlaylistEntry), 8 + sizeof(float)> __GlobalNamespace_SoundBankPlayer_PlaylistEntrySizeCheck;
    static_assert(sizeof(SoundBankPlayer::PlaylistEntry) == 0xC);
    public:
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Boolean playOnEnable
    // Size: 0x1
    // Offset: 0x28
    bool playOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shuffleOrder
    // Size: 0x1
    // Offset: 0x29
    bool shuffleOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shuffleOrder and: soundBank
    char __padding2[0x6] = {};
    // public SoundBankSO soundBank
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SoundBankSO* soundBank;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankSO*) == 0x8);
    // public UnityEngine.Audio.AudioMixerGroup outputAudioMixerGroup
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Audio::AudioMixerGroup* outputAudioMixerGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // public System.Boolean spatialize
    // Size: 0x1
    // Offset: 0x40
    bool spatialize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean spatializePostEffects
    // Size: 0x1
    // Offset: 0x41
    bool spatializePostEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bypassEffects
    // Size: 0x1
    // Offset: 0x42
    bool bypassEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bypassListenerEffects
    // Size: 0x1
    // Offset: 0x43
    bool bypassListenerEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bypassReverbZones
    // Size: 0x1
    // Offset: 0x44
    bool bypassReverbZones;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bypassReverbZones and: priority
    char __padding9[0x3] = {};
    // public System.Int32 priority
    // Size: 0x4
    // Offset: 0x48
    int priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single spatialBlend
    // Size: 0x4
    // Offset: 0x4C
    float spatialBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverbZoneMix
    // Size: 0x4
    // Offset: 0x50
    float reverbZoneMix;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dopplerLevel
    // Size: 0x4
    // Offset: 0x54
    float dopplerLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single spread
    // Size: 0x4
    // Offset: 0x58
    float spread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioRolloffMode rolloffMode
    // Size: 0x4
    // Offset: 0x5C
    ::UnityEngine::AudioRolloffMode rolloffMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioRolloffMode) == 0x4);
    // public System.Single minDistance
    // Size: 0x4
    // Offset: 0x60
    float minDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDistance
    // Size: 0x4
    // Offset: 0x64
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AnimationCurve customRolloffCurve
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* customRolloffCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Int32 nextIndex
    // Size: 0x4
    // Offset: 0x70
    int nextIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single playEndTime
    // Size: 0x4
    // Offset: 0x74
    float playEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private SoundBankPlayer/PlaylistEntry[] playlist
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::GlobalNamespace::SoundBankPlayer::PlaylistEntry> playlist;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SoundBankPlayer::PlaylistEntry>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public System.Boolean playOnEnable
    [[deprecated("Use field access instead!")]] bool& dyn_playOnEnable();
    // Get instance field reference: public System.Boolean shuffleOrder
    [[deprecated("Use field access instead!")]] bool& dyn_shuffleOrder();
    // Get instance field reference: public SoundBankSO soundBank
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankSO*& dyn_soundBank();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup outputAudioMixerGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_outputAudioMixerGroup();
    // Get instance field reference: public System.Boolean spatialize
    [[deprecated("Use field access instead!")]] bool& dyn_spatialize();
    // Get instance field reference: public System.Boolean spatializePostEffects
    [[deprecated("Use field access instead!")]] bool& dyn_spatializePostEffects();
    // Get instance field reference: public System.Boolean bypassEffects
    [[deprecated("Use field access instead!")]] bool& dyn_bypassEffects();
    // Get instance field reference: public System.Boolean bypassListenerEffects
    [[deprecated("Use field access instead!")]] bool& dyn_bypassListenerEffects();
    // Get instance field reference: public System.Boolean bypassReverbZones
    [[deprecated("Use field access instead!")]] bool& dyn_bypassReverbZones();
    // Get instance field reference: public System.Int32 priority
    [[deprecated("Use field access instead!")]] int& dyn_priority();
    // Get instance field reference: public System.Single spatialBlend
    [[deprecated("Use field access instead!")]] float& dyn_spatialBlend();
    // Get instance field reference: public System.Single reverbZoneMix
    [[deprecated("Use field access instead!")]] float& dyn_reverbZoneMix();
    // Get instance field reference: public System.Single dopplerLevel
    [[deprecated("Use field access instead!")]] float& dyn_dopplerLevel();
    // Get instance field reference: public System.Single spread
    [[deprecated("Use field access instead!")]] float& dyn_spread();
    // Get instance field reference: public UnityEngine.AudioRolloffMode rolloffMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioRolloffMode& dyn_rolloffMode();
    // Get instance field reference: public System.Single minDistance
    [[deprecated("Use field access instead!")]] float& dyn_minDistance();
    // Get instance field reference: public System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // Get instance field reference: public UnityEngine.AnimationCurve customRolloffCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_customRolloffCurve();
    // Get instance field reference: private System.Int32 nextIndex
    [[deprecated("Use field access instead!")]] int& dyn_nextIndex();
    // Get instance field reference: private System.Single playEndTime
    [[deprecated("Use field access instead!")]] float& dyn_playEndTime();
    // Get instance field reference: private SoundBankPlayer/PlaylistEntry[] playlist
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SoundBankPlayer::PlaylistEntry>& dyn_playlist();
    // public System.Boolean get_isPlaying()
    // Offset: 0x277A2C8
    bool get_isPlaying();
    // protected System.Void Awake()
    // Offset: 0x277A2EC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x277A744
    void OnEnable();
    // public System.Void Play(System.Nullable`1<System.Single> volumeOverride, System.Nullable`1<System.Single> pitchOverride)
    // Offset: 0x277A75C
    void Play(::System::Nullable_1<float> volumeOverride, ::System::Nullable_1<float> pitchOverride);
    // public System.Void .ctor()
    // Offset: 0x277A8FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundBankPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundBankPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundBankPlayer*, creationType>()));
    }
  }; // SoundBankPlayer
  #pragma pack(pop)
  static check_size<sizeof(SoundBankPlayer), 120 + sizeof(::ArrayW<::GlobalNamespace::SoundBankPlayer::PlaylistEntry>)> __GlobalNamespace_SoundBankPlayerSizeCheck;
  static_assert(sizeof(SoundBankPlayer) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SoundBankPlayer::PlaylistEntry, "", "SoundBankPlayer/PlaylistEntry");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SoundBankPlayer::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SoundBankPlayer::*)()>(&GlobalNamespace::SoundBankPlayer::get_isPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundBankPlayer*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundBankPlayer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SoundBankPlayer::*)()>(&GlobalNamespace::SoundBankPlayer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundBankPlayer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundBankPlayer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SoundBankPlayer::*)()>(&GlobalNamespace::SoundBankPlayer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundBankPlayer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundBankPlayer::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SoundBankPlayer::*)(::System::Nullable_1<float>, ::System::Nullable_1<float>)>(&GlobalNamespace::SoundBankPlayer::Play)> {
  static const MethodInfo* get() {
    static auto* volumeOverride = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* pitchOverride = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SoundBankPlayer*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volumeOverride, pitchOverride});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SoundBankPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
