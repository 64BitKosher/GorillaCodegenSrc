// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/FaceExpressionStatus
#include "GlobalNamespace/OVRPlugin_FaceExpressionStatus.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FaceState, "", "OVRPlugin/FaceState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/FaceState
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::FaceState/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single[] ExpressionWeights
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> ExpressionWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] ExpressionWeightConfidences
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<float> ExpressionWeightConfidences;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public OVRPlugin/FaceExpressionStatus Status
    // Size: 0x2
    // Offset: 0x10
    ::GlobalNamespace::OVRPlugin::FaceExpressionStatus Status;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::FaceExpressionStatus) == 0x2);
    // Padding between fields: Status and: Time
    char __padding2[0x6] = {};
    // public System.Double Time
    // Size: 0x8
    // Offset: 0x18
    double Time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: FaceState
    constexpr FaceState(::ArrayW<float> ExpressionWeights_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<float> ExpressionWeightConfidences_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::GlobalNamespace::OVRPlugin::FaceExpressionStatus Status_ = {}, double Time_ = {}) noexcept : ExpressionWeights{ExpressionWeights_}, ExpressionWeightConfidences{ExpressionWeightConfidences_}, Status{Status_}, Time{Time_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single[] ExpressionWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_ExpressionWeights();
    // Get instance field reference: public System.Single[] ExpressionWeightConfidences
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_ExpressionWeightConfidences();
    // Get instance field reference: public OVRPlugin/FaceExpressionStatus Status
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::FaceExpressionStatus& dyn_Status();
    // Get instance field reference: public System.Double Time
    [[deprecated("Use field access instead!")]] double& dyn_Time();
  }; // OVRPlugin/FaceState
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::FaceState), 24 + sizeof(double)> __GlobalNamespace_OVRPlugin_FaceStateSizeCheck;
  static_assert(sizeof(OVRPlugin::FaceState) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
