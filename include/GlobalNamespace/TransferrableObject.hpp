// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: Sirenix.OdinInspector.ISelfValidator
#include "Sirenix/OdinInspector/ISelfValidator.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
// Including type: IPreDisable
#include "GlobalNamespace/IPreDisable.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AdvancedItemState
  class AdvancedItemState;
  // Forward declaring type: BodyDockPositions
  class BodyDockPositions;
  // Forward declaring type: VRRigAnchorOverrides
  class VRRigAnchorOverrides;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: TransferrableItemSlotTransformOverride
  class TransferrableItemSlotTransformOverride;
  // Forward declaring type: WorldShareableItem
  class WorldShareableItem;
  // Skipping declaration: PositionState because it is already included!
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Behaviour because it is already included!
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: Sirenix::OdinInspector
namespace Sirenix::OdinInspector {
  // Forward declaring type: SelfValidationResult
  class SelfValidationResult;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObject
  class TransferrableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransferrableObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject*, "", "TransferrableObject");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TransferrableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class TransferrableObject : public ::GlobalNamespace::HoldableObject/*, public ::Sirenix::OdinInspector::ISelfValidator, public ::GlobalNamespace::IRequestableOwnershipGuardCallbacks, public ::GlobalNamespace::IPreDisable, public ::GorillaTag::ISpawnable*/ {
    public:
    // Nested type: ::GlobalNamespace::TransferrableObject::ItemStates
    struct ItemStates;
    // Nested type: ::GlobalNamespace::TransferrableObject::GrabType
    struct GrabType;
    // Nested type: ::GlobalNamespace::TransferrableObject::PositionState
    struct PositionState;
    // Nested type: ::GlobalNamespace::TransferrableObject::InterpolateState
    struct InterpolateState;
    // Nested type: ::GlobalNamespace::TransferrableObject::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0
    class $$c__DisplayClass125_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TransferrableObject/ItemStates
    // [TokenAttribute] Offset: FFFFFFFF
    struct ItemStates/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ItemStates
      constexpr ItemStates(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TransferrableObject/ItemStates State0
      static constexpr const int State0 = 1;
      // Get static field: static public TransferrableObject/ItemStates State0
      static ::GlobalNamespace::TransferrableObject::ItemStates _get_State0();
      // Set static field: static public TransferrableObject/ItemStates State0
      static void _set_State0(::GlobalNamespace::TransferrableObject::ItemStates value);
      // static field const value: static public TransferrableObject/ItemStates State1
      static constexpr const int State1 = 2;
      // Get static field: static public TransferrableObject/ItemStates State1
      static ::GlobalNamespace::TransferrableObject::ItemStates _get_State1();
      // Set static field: static public TransferrableObject/ItemStates State1
      static void _set_State1(::GlobalNamespace::TransferrableObject::ItemStates value);
      // static field const value: static public TransferrableObject/ItemStates State2
      static constexpr const int State2 = 4;
      // Get static field: static public TransferrableObject/ItemStates State2
      static ::GlobalNamespace::TransferrableObject::ItemStates _get_State2();
      // Set static field: static public TransferrableObject/ItemStates State2
      static void _set_State2(::GlobalNamespace::TransferrableObject::ItemStates value);
      // static field const value: static public TransferrableObject/ItemStates State3
      static constexpr const int State3 = 8;
      // Get static field: static public TransferrableObject/ItemStates State3
      static ::GlobalNamespace::TransferrableObject::ItemStates _get_State3();
      // Set static field: static public TransferrableObject/ItemStates State3
      static void _set_State3(::GlobalNamespace::TransferrableObject::ItemStates value);
      // static field const value: static public TransferrableObject/ItemStates State4
      static constexpr const int State4 = 16;
      // Get static field: static public TransferrableObject/ItemStates State4
      static ::GlobalNamespace::TransferrableObject::ItemStates _get_State4();
      // Set static field: static public TransferrableObject/ItemStates State4
      static void _set_State4(::GlobalNamespace::TransferrableObject::ItemStates value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TransferrableObject/ItemStates
    #pragma pack(pop)
    static check_size<sizeof(TransferrableObject::ItemStates), 0 + sizeof(int)> __GlobalNamespace_TransferrableObject_ItemStatesSizeCheck;
    static_assert(sizeof(TransferrableObject::ItemStates) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TransferrableObject/GrabType
    // [TokenAttribute] Offset: FFFFFFFF
    struct GrabType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GrabType
      constexpr GrabType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TransferrableObject/GrabType Default
      static constexpr const int Default = 0;
      // Get static field: static public TransferrableObject/GrabType Default
      static ::GlobalNamespace::TransferrableObject::GrabType _get_Default();
      // Set static field: static public TransferrableObject/GrabType Default
      static void _set_Default(::GlobalNamespace::TransferrableObject::GrabType value);
      // static field const value: static public TransferrableObject/GrabType Free
      static constexpr const int Free = 1;
      // Get static field: static public TransferrableObject/GrabType Free
      static ::GlobalNamespace::TransferrableObject::GrabType _get_Free();
      // Set static field: static public TransferrableObject/GrabType Free
      static void _set_Free(::GlobalNamespace::TransferrableObject::GrabType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TransferrableObject/GrabType
    #pragma pack(pop)
    static check_size<sizeof(TransferrableObject::GrabType), 0 + sizeof(int)> __GlobalNamespace_TransferrableObject_GrabTypeSizeCheck;
    static_assert(sizeof(TransferrableObject::GrabType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TransferrableObject/PositionState
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct PositionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PositionState
      constexpr PositionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TransferrableObject/PositionState OnLeftArm
      static constexpr const int OnLeftArm = 1;
      // Get static field: static public TransferrableObject/PositionState OnLeftArm
      static ::GlobalNamespace::TransferrableObject::PositionState _get_OnLeftArm();
      // Set static field: static public TransferrableObject/PositionState OnLeftArm
      static void _set_OnLeftArm(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState OnRightArm
      static constexpr const int OnRightArm = 2;
      // Get static field: static public TransferrableObject/PositionState OnRightArm
      static ::GlobalNamespace::TransferrableObject::PositionState _get_OnRightArm();
      // Set static field: static public TransferrableObject/PositionState OnRightArm
      static void _set_OnRightArm(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState InLeftHand
      static constexpr const int InLeftHand = 4;
      // Get static field: static public TransferrableObject/PositionState InLeftHand
      static ::GlobalNamespace::TransferrableObject::PositionState _get_InLeftHand();
      // Set static field: static public TransferrableObject/PositionState InLeftHand
      static void _set_InLeftHand(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState InRightHand
      static constexpr const int InRightHand = 8;
      // Get static field: static public TransferrableObject/PositionState InRightHand
      static ::GlobalNamespace::TransferrableObject::PositionState _get_InRightHand();
      // Set static field: static public TransferrableObject/PositionState InRightHand
      static void _set_InRightHand(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState OnChest
      static constexpr const int OnChest = 16;
      // Get static field: static public TransferrableObject/PositionState OnChest
      static ::GlobalNamespace::TransferrableObject::PositionState _get_OnChest();
      // Set static field: static public TransferrableObject/PositionState OnChest
      static void _set_OnChest(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState OnLeftShoulder
      static constexpr const int OnLeftShoulder = 32;
      // Get static field: static public TransferrableObject/PositionState OnLeftShoulder
      static ::GlobalNamespace::TransferrableObject::PositionState _get_OnLeftShoulder();
      // Set static field: static public TransferrableObject/PositionState OnLeftShoulder
      static void _set_OnLeftShoulder(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState OnRightShoulder
      static constexpr const int OnRightShoulder = 64;
      // Get static field: static public TransferrableObject/PositionState OnRightShoulder
      static ::GlobalNamespace::TransferrableObject::PositionState _get_OnRightShoulder();
      // Set static field: static public TransferrableObject/PositionState OnRightShoulder
      static void _set_OnRightShoulder(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState Dropped
      static constexpr const int Dropped = 128;
      // Get static field: static public TransferrableObject/PositionState Dropped
      static ::GlobalNamespace::TransferrableObject::PositionState _get_Dropped();
      // Set static field: static public TransferrableObject/PositionState Dropped
      static void _set_Dropped(::GlobalNamespace::TransferrableObject::PositionState value);
      // static field const value: static public TransferrableObject/PositionState None
      static constexpr const int None = 0;
      // Get static field: static public TransferrableObject/PositionState None
      static ::GlobalNamespace::TransferrableObject::PositionState _get_None();
      // Set static field: static public TransferrableObject/PositionState None
      static void _set_None(::GlobalNamespace::TransferrableObject::PositionState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TransferrableObject/PositionState
    #pragma pack(pop)
    static check_size<sizeof(TransferrableObject::PositionState), 0 + sizeof(int)> __GlobalNamespace_TransferrableObject_PositionStateSizeCheck;
    static_assert(sizeof(TransferrableObject::PositionState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TransferrableObject/InterpolateState
    // [TokenAttribute] Offset: FFFFFFFF
    struct InterpolateState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InterpolateState
      constexpr InterpolateState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TransferrableObject/InterpolateState None
      static constexpr const int None = 0;
      // Get static field: static public TransferrableObject/InterpolateState None
      static ::GlobalNamespace::TransferrableObject::InterpolateState _get_None();
      // Set static field: static public TransferrableObject/InterpolateState None
      static void _set_None(::GlobalNamespace::TransferrableObject::InterpolateState value);
      // static field const value: static public TransferrableObject/InterpolateState Interpolating
      static constexpr const int Interpolating = 1;
      // Get static field: static public TransferrableObject/InterpolateState Interpolating
      static ::GlobalNamespace::TransferrableObject::InterpolateState _get_Interpolating();
      // Set static field: static public TransferrableObject/InterpolateState Interpolating
      static void _set_Interpolating(::GlobalNamespace::TransferrableObject::InterpolateState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TransferrableObject/InterpolateState
    #pragma pack(pop)
    static check_size<sizeof(TransferrableObject::InterpolateState), 0 + sizeof(int)> __GlobalNamespace_TransferrableObject_InterpolateStateSizeCheck;
    static_assert(sizeof(TransferrableObject::InterpolateState) == 0x4);
    public:
    // private VRRig _myRig
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean <isMyRigValid>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool isMyRigValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private VRRig _myOnlineRig
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::VRRig* myOnlineRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean <isMyOnlineRigValid>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool isMyOnlineRigValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean latched
    // Size: 0x1
    // Offset: 0x41
    bool latched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single indexTrigger
    // Size: 0x4
    // Offset: 0x44
    float indexTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean testActivate
    // Size: 0x1
    // Offset: 0x48
    bool testActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testDeactivate
    // Size: 0x1
    // Offset: 0x49
    bool testDeactivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single myThreshold
    // Size: 0x4
    // Offset: 0x4C
    float myThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hysterisis
    // Size: 0x4
    // Offset: 0x50
    float hysterisis;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean flipOnXForLeftHand
    // Size: 0x1
    // Offset: 0x54
    bool flipOnXForLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipOnYForLeftHand
    // Size: 0x1
    // Offset: 0x55
    bool flipOnYForLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipOnXForLeftArm
    // Size: 0x1
    // Offset: 0x56
    bool flipOnXForLeftArm;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableStealing
    // Size: 0x1
    // Offset: 0x57
    bool disableStealing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean allowPlayerStealing
    // Size: 0x1
    // Offset: 0x58
    bool allowPlayerStealing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private TransferrableObject/PositionState initState
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::TransferrableObject::PositionState initState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public TransferrableObject/ItemStates itemState
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::TransferrableObject::ItemStates itemState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::ItemStates) == 0x4);
    // public BodyDockPositions/DropPositions storedZone
    // Size: 0x4
    // Offset: 0x64
    ::GlobalNamespace::BodyDockPositions::DropPositions storedZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions::DropPositions) == 0x4);
    // protected TransferrableObject/PositionState previousState
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::TransferrableObject::PositionState previousState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public TransferrableObject/PositionState currentState
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::TransferrableObject::PositionState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public BodyDockPositions/DropPositions dockPositions
    // Size: 0x4
    // Offset: 0x70
    ::GlobalNamespace::BodyDockPositions::DropPositions dockPositions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions::DropPositions) == 0x4);
    // public AdvancedItemState advancedGrabState
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::AdvancedItemState* advancedGrabState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AdvancedItemState*) == 0x8);
    // public VRRig targetRig
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::VRRig* targetRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public System.Boolean targetRigSet
    // Size: 0x1
    // Offset: 0x88
    bool targetRigSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public TransferrableObject/GrabType useGrabType
    // Size: 0x4
    // Offset: 0x8C
    ::GlobalNamespace::TransferrableObject::GrabType useGrabType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::GrabType) == 0x4);
    // public VRRig ownerRig
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public BodyDockPositions targetDock
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::BodyDockPositions* targetDock;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions*) == 0x8);
    // private VRRigAnchorOverrides anchorOverrides
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::VRRigAnchorOverrides* anchorOverrides;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRigAnchorOverrides*) == 0x8);
    // public System.Boolean canAutoGrabLeft
    // Size: 0x1
    // Offset: 0xA8
    bool canAutoGrabLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean canAutoGrabRight
    // Size: 0x1
    // Offset: 0xA9
    bool canAutoGrabRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 objectIndex
    // Size: 0x4
    // Offset: 0xAC
    int objectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Transform anchor
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Transform* anchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public InteractionPoint gripInteractor
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::InteractionPoint* gripInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InteractionPoint*) == 0x8);
    // public UnityEngine.Transform grabAnchor
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* grabAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform handPoseLeft
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Transform* handPoseLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform handPoseRight
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* handPoseRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean isGrabAnchorSet
    // Size: 0x1
    // Offset: 0xD8
    bool isGrabAnchorSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public TransferrableItemSlotTransformOverride transferrableItemSlotTransformOverride
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::TransferrableItemSlotTransformOverride* transferrableItemSlotTransformOverride;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableItemSlotTransformOverride*) == 0x8);
    // public System.Int32 myIndex
    // Size: 0x4
    // Offset: 0xE8
    int myIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::UnityEngine::GameObject*> gameObjectsActiveOnlyWhileHeld;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileDocked
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::UnityEngine::GameObject*> gameObjectsActiveOnlyWhileDocked;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileHeld
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::Behaviour*> behavioursEnabledOnlyWhileHeld;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Behaviour*>) == 0x8);
    // public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileDocked
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Behaviour*> behavioursEnabledOnlyWhileDocked;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Behaviour*>) == 0x8);
    // protected internal WorldShareableItem worldShareableInstance
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::WorldShareableItem* worldShareableInstance;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldShareableItem*) == 0x8);
    // private System.Single interpTime
    // Size: 0x4
    // Offset: 0x118
    float interpTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single interpDt
    // Size: 0x4
    // Offset: 0x11C
    float interpDt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 interpStartPos
    // Size: 0xC
    // Offset: 0x120
    ::UnityEngine::Vector3 interpStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion interpStartRot
    // Size: 0x10
    // Offset: 0x12C
    ::UnityEngine::Quaternion interpStartRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // protected System.Int32 enabledOnFrame
    // Size: 0x4
    // Offset: 0x13C
    int enabledOnFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.Vector3 initOffset
    // Size: 0xC
    // Offset: 0x140
    ::UnityEngine::Vector3 initOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Quaternion initRotation
    // Size: 0x10
    // Offset: 0x14C
    ::UnityEngine::Quaternion initRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Matrix4x4 initMatrix
    // Size: 0x40
    // Offset: 0x15C
    ::UnityEngine::Matrix4x4 initMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Matrix4x4 leftHandMatrix
    // Size: 0x40
    // Offset: 0x19C
    ::UnityEngine::Matrix4x4 leftHandMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Matrix4x4 rightHandMatrix
    // Size: 0x40
    // Offset: 0x1DC
    ::UnityEngine::Matrix4x4 rightHandMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private System.Boolean positionInitialized
    // Size: 0x1
    // Offset: 0x21C
    bool positionInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isSceneObject
    // Size: 0x1
    // Offset: 0x21D
    bool isSceneObject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Rigidbody rigidbodyInstance
    // Size: 0x8
    // Offset: 0x220
    ::UnityEngine::Rigidbody* rigidbodyInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private System.Boolean <isRigidbodySet>k__BackingField
    // Size: 0x1
    // Offset: 0x228
    bool isRigidbodySet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean canDrop
    // Size: 0x1
    // Offset: 0x229
    bool canDrop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean allowReparenting
    // Size: 0x1
    // Offset: 0x22A
    bool allowReparenting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shareable
    // Size: 0x1
    // Offset: 0x22B
    bool shareable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean detatchOnGrab
    // Size: 0x1
    // Offset: 0x22C
    bool detatchOnGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean allowWorldSharableInstance
    // Size: 0x1
    // Offset: 0x22D
    bool allowWorldSharableInstance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Transform originPoint
    // Size: 0x8
    // Offset: 0x230
    ::UnityEngine::Transform* originPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single maxDistanceFromOriginBeforeRespawn
    // Size: 0x4
    // Offset: 0x238
    float maxDistanceFromOriginBeforeRespawn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioClip resetPositionAudioClip
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::AudioClip* resetPositionAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public System.Single maxDistanceFromTargetPlayerBeforeRespawn
    // Size: 0x4
    // Offset: 0x248
    float maxDistanceFromTargetPlayerBeforeRespawn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean wasHover
    // Size: 0x1
    // Offset: 0x24C
    bool wasHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isHover
    // Size: 0x1
    // Offset: 0x24D
    bool isHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean disableItem
    // Size: 0x1
    // Offset: 0x24E
    bool disableItem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean loaded
    // Size: 0x1
    // Offset: 0x24F
    bool loaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ClearLocalPositionOnReset
    // Size: 0x1
    // Offset: 0x250
    bool ClearLocalPositionOnReset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public TransferrableObject/InterpolateState interpState
    // Size: 0x4
    // Offset: 0x254
    ::GlobalNamespace::TransferrableObject::InterpolateState interpState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::InterpolateState) == 0x4);
    // public System.Boolean startInterpolation
    // Size: 0x1
    // Offset: 0x258
    bool startInterpolation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Transform InitialDockObject
    // Size: 0x8
    // Offset: 0x260
    ::UnityEngine::Transform* InitialDockObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AudioSource audioSrc
    // Size: 0x8
    // Offset: 0x268
    ::UnityEngine::AudioSource* audioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs2
    // Size: 0x1
    // Offset: 0x270
    bool isListeningFor_OnPostInstantiateAllPrefabs2;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x271
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Transform _defaultAnchor
    // Size: 0x8
    // Offset: 0x278
    ::UnityEngine::Transform* defaultAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected System.Boolean _isDefaultAnchorSet
    // Size: 0x1
    // Offset: 0x280
    bool isDefaultAnchorSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<UnityEngine.Matrix4x4> transferrableItemSlotTransformOverrideCachedMatrix
    // Size: 0xFFFFFFFF
    // Offset: 0x284
    ::System::Nullable_1<::UnityEngine::Matrix4x4> transferrableItemSlotTransformOverrideCachedMatrix;
    // private System.Boolean transferrableItemSlotTransformOverrideApplicable
    // Size: 0x1
    // Offset: 0x2C8
    bool transferrableItemSlotTransformOverrideApplicable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Sirenix::OdinInspector::ISelfValidator
    operator ::Sirenix::OdinInspector::ISelfValidator() noexcept {
      return *reinterpret_cast<::Sirenix::OdinInspector::ISelfValidator*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks
    operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IPreDisable
    operator ::GlobalNamespace::IPreDisable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPreDisable*>(this);
    }
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get static field: static private UnityEngine.Vector3 handPoseRightReferencePoint
    static ::UnityEngine::Vector3 _get_handPoseRightReferencePoint();
    // Set static field: static private UnityEngine.Vector3 handPoseRightReferencePoint
    static void _set_handPoseRightReferencePoint(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Quaternion handPoseRightReferenceRotation
    static ::UnityEngine::Quaternion _get_handPoseRightReferenceRotation();
    // Set static field: static private UnityEngine.Quaternion handPoseRightReferenceRotation
    static void _set_handPoseRightReferenceRotation(::UnityEngine::Quaternion value);
    // Get static field: static private UnityEngine.Vector3 handPoseLeftReferencePoint
    static ::UnityEngine::Vector3 _get_handPoseLeftReferencePoint();
    // Set static field: static private UnityEngine.Vector3 handPoseLeftReferencePoint
    static void _set_handPoseLeftReferencePoint(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Quaternion handPoseLeftReferenceRotation
    static ::UnityEngine::Quaternion _get_handPoseLeftReferenceRotation();
    // Set static field: static private UnityEngine.Quaternion handPoseLeftReferenceRotation
    static void _set_handPoseLeftReferenceRotation(::UnityEngine::Quaternion value);
    // static field const value: static public System.Int32 kPositionStateCount
    static constexpr const int kPositionStateCount = 8;
    // Get static field: static public System.Int32 kPositionStateCount
    static int _get_kPositionStateCount();
    // Set static field: static public System.Int32 kPositionStateCount
    static void _set_kPositionStateCount(int value);
    // Get instance field reference: private VRRig _myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn__myRig();
    // Get instance field reference: private System.Boolean <isMyRigValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isMyRigValid$k__BackingField();
    // Get instance field reference: private VRRig _myOnlineRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn__myOnlineRig();
    // Get instance field reference: private System.Boolean <isMyOnlineRigValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isMyOnlineRigValid$k__BackingField();
    // Get instance field reference: public System.Boolean latched
    [[deprecated("Use field access instead!")]] bool& dyn_latched();
    // Get instance field reference: private System.Single indexTrigger
    [[deprecated("Use field access instead!")]] float& dyn_indexTrigger();
    // Get instance field reference: public System.Boolean testActivate
    [[deprecated("Use field access instead!")]] bool& dyn_testActivate();
    // Get instance field reference: public System.Boolean testDeactivate
    [[deprecated("Use field access instead!")]] bool& dyn_testDeactivate();
    // Get instance field reference: public System.Single myThreshold
    [[deprecated("Use field access instead!")]] float& dyn_myThreshold();
    // Get instance field reference: public System.Single hysterisis
    [[deprecated("Use field access instead!")]] float& dyn_hysterisis();
    // Get instance field reference: public System.Boolean flipOnXForLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnXForLeftHand();
    // Get instance field reference: public System.Boolean flipOnYForLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnYForLeftHand();
    // Get instance field reference: public System.Boolean flipOnXForLeftArm
    [[deprecated("Use field access instead!")]] bool& dyn_flipOnXForLeftArm();
    // Get instance field reference: public System.Boolean disableStealing
    [[deprecated("Use field access instead!")]] bool& dyn_disableStealing();
    // Get instance field reference: public System.Boolean allowPlayerStealing
    [[deprecated("Use field access instead!")]] bool& dyn_allowPlayerStealing();
    // Get instance field reference: private TransferrableObject/PositionState initState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_initState();
    // Get instance field reference: public TransferrableObject/ItemStates itemState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& dyn_itemState();
    // Get instance field reference: public BodyDockPositions/DropPositions storedZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& dyn_storedZone();
    // Get instance field reference: protected TransferrableObject/PositionState previousState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_previousState();
    // Get instance field reference: public TransferrableObject/PositionState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_currentState();
    // Get instance field reference: public BodyDockPositions/DropPositions dockPositions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& dyn_dockPositions();
    // Get instance field reference: public AdvancedItemState advancedGrabState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AdvancedItemState*& dyn_advancedGrabState();
    // Get instance field reference: public VRRig targetRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetRig();
    // Get instance field reference: public System.Boolean targetRigSet
    [[deprecated("Use field access instead!")]] bool& dyn_targetRigSet();
    // Get instance field reference: public TransferrableObject/GrabType useGrabType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::GrabType& dyn_useGrabType();
    // Get instance field reference: public VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // Get instance field reference: public BodyDockPositions targetDock
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& dyn_targetDock();
    // Get instance field reference: private VRRigAnchorOverrides anchorOverrides
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigAnchorOverrides*& dyn_anchorOverrides();
    // Get instance field reference: public System.Boolean canAutoGrabLeft
    [[deprecated("Use field access instead!")]] bool& dyn_canAutoGrabLeft();
    // Get instance field reference: public System.Boolean canAutoGrabRight
    [[deprecated("Use field access instead!")]] bool& dyn_canAutoGrabRight();
    // Get instance field reference: public System.Int32 objectIndex
    [[deprecated("Use field access instead!")]] int& dyn_objectIndex();
    // Get instance field reference: public UnityEngine.Transform anchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_anchor();
    // Get instance field reference: public InteractionPoint gripInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& dyn_gripInteractor();
    // Get instance field reference: public UnityEngine.Transform grabAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_grabAnchor();
    // Get instance field reference: public UnityEngine.Transform handPoseLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_handPoseLeft();
    // Get instance field reference: public UnityEngine.Transform handPoseRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_handPoseRight();
    // Get instance field reference: public System.Boolean isGrabAnchorSet
    [[deprecated("Use field access instead!")]] bool& dyn_isGrabAnchorSet();
    // Get instance field reference: public TransferrableItemSlotTransformOverride transferrableItemSlotTransformOverride
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableItemSlotTransformOverride*& dyn_transferrableItemSlotTransformOverride();
    // Get instance field reference: public System.Int32 myIndex
    [[deprecated("Use field access instead!")]] int& dyn_myIndex();
    // Get instance field reference: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjectsActiveOnlyWhileHeld();
    // Get instance field reference: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileDocked
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjectsActiveOnlyWhileDocked();
    // Get instance field reference: public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileHeld
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& dyn_behavioursEnabledOnlyWhileHeld();
    // Get instance field reference: public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileDocked
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& dyn_behavioursEnabledOnlyWhileDocked();
    // Get instance field reference: protected internal WorldShareableItem worldShareableInstance
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& dyn_worldShareableInstance();
    // Get instance field reference: private System.Single interpTime
    [[deprecated("Use field access instead!")]] float& dyn_interpTime();
    // Get instance field reference: private System.Single interpDt
    [[deprecated("Use field access instead!")]] float& dyn_interpDt();
    // Get instance field reference: private UnityEngine.Vector3 interpStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_interpStartPos();
    // Get instance field reference: private UnityEngine.Quaternion interpStartRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_interpStartRot();
    // Get instance field reference: protected System.Int32 enabledOnFrame
    [[deprecated("Use field access instead!")]] int& dyn_enabledOnFrame();
    // Get instance field reference: protected UnityEngine.Vector3 initOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initOffset();
    // Get instance field reference: protected UnityEngine.Quaternion initRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initRotation();
    // Get instance field reference: private UnityEngine.Matrix4x4 initMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_initMatrix();
    // Get instance field reference: private UnityEngine.Matrix4x4 leftHandMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_leftHandMatrix();
    // Get instance field reference: private UnityEngine.Matrix4x4 rightHandMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_rightHandMatrix();
    // Get instance field reference: private System.Boolean positionInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_positionInitialized();
    // Get instance field reference: public System.Boolean isSceneObject
    [[deprecated("Use field access instead!")]] bool& dyn_isSceneObject();
    // Get instance field reference: public UnityEngine.Rigidbody rigidbodyInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigidbodyInstance();
    // Get instance field reference: private System.Boolean <isRigidbodySet>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isRigidbodySet$k__BackingField();
    // Get instance field reference: public System.Boolean canDrop
    [[deprecated("Use field access instead!")]] bool& dyn_canDrop();
    // Get instance field reference: public System.Boolean allowReparenting
    [[deprecated("Use field access instead!")]] bool& dyn_allowReparenting();
    // Get instance field reference: public System.Boolean shareable
    [[deprecated("Use field access instead!")]] bool& dyn_shareable();
    // Get instance field reference: public System.Boolean detatchOnGrab
    [[deprecated("Use field access instead!")]] bool& dyn_detatchOnGrab();
    // Get instance field reference: public System.Boolean allowWorldSharableInstance
    [[deprecated("Use field access instead!")]] bool& dyn_allowWorldSharableInstance();
    // Get instance field reference: public UnityEngine.Transform originPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_originPoint();
    // Get instance field reference: public System.Single maxDistanceFromOriginBeforeRespawn
    [[deprecated("Use field access instead!")]] float& dyn_maxDistanceFromOriginBeforeRespawn();
    // Get instance field reference: public UnityEngine.AudioClip resetPositionAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_resetPositionAudioClip();
    // Get instance field reference: public System.Single maxDistanceFromTargetPlayerBeforeRespawn
    [[deprecated("Use field access instead!")]] float& dyn_maxDistanceFromTargetPlayerBeforeRespawn();
    // Get instance field reference: private System.Boolean wasHover
    [[deprecated("Use field access instead!")]] bool& dyn_wasHover();
    // Get instance field reference: private System.Boolean isHover
    [[deprecated("Use field access instead!")]] bool& dyn_isHover();
    // Get instance field reference: private System.Boolean disableItem
    [[deprecated("Use field access instead!")]] bool& dyn_disableItem();
    // Get instance field reference: protected System.Boolean loaded
    [[deprecated("Use field access instead!")]] bool& dyn_loaded();
    // Get instance field reference: public System.Boolean ClearLocalPositionOnReset
    [[deprecated("Use field access instead!")]] bool& dyn_ClearLocalPositionOnReset();
    // Get instance field reference: public TransferrableObject/InterpolateState interpState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::InterpolateState& dyn_interpState();
    // Get instance field reference: public System.Boolean startInterpolation
    [[deprecated("Use field access instead!")]] bool& dyn_startInterpolation();
    // Get instance field reference: public UnityEngine.Transform InitialDockObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_InitialDockObject();
    // Get instance field reference: private UnityEngine.AudioSource audioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSrc();
    // Get instance field reference: private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs2
    [[deprecated("Use field access instead!")]] bool& dyn__isListeningFor_OnPostInstantiateAllPrefabs2();
    // Get instance field reference: private System.Boolean <IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSpawned$k__BackingField();
    // Get instance field reference: protected UnityEngine.Transform _defaultAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__defaultAnchor();
    // Get instance field reference: protected System.Boolean _isDefaultAnchorSet
    [[deprecated("Use field access instead!")]] bool& dyn__isDefaultAnchorSet();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Matrix4x4> transferrableItemSlotTransformOverrideCachedMatrix
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Matrix4x4>& dyn_transferrableItemSlotTransformOverrideCachedMatrix();
    // Get instance field reference: private System.Boolean transferrableItemSlotTransformOverrideApplicable
    [[deprecated("Use field access instead!")]] bool& dyn_transferrableItemSlotTransformOverrideApplicable();
    // public System.Void FixTransformOverride()
    // Offset: 0x26C52D0
    void FixTransformOverride();
    // public System.Void Validate(Sirenix.OdinInspector.SelfValidationResult result)
    // Offset: 0x26C5328
    void Validate(::Sirenix::OdinInspector::SelfValidationResult* result);
    // public VRRig get_myRig()
    // Offset: 0x26C532C
    ::GlobalNamespace::VRRig* get_myRig();
    // private System.Void set_myRig(VRRig value)
    // Offset: 0x26C5334
    void set_myRig(::GlobalNamespace::VRRig* value);
    // public System.Boolean get_isMyRigValid()
    // Offset: 0x26C533C
    bool get_isMyRigValid();
    // private System.Void set_isMyRigValid(System.Boolean value)
    // Offset: 0x26C5344
    void set_isMyRigValid(bool value);
    // public VRRig get_myOnlineRig()
    // Offset: 0x26C5350
    ::GlobalNamespace::VRRig* get_myOnlineRig();
    // private System.Void set_myOnlineRig(VRRig value)
    // Offset: 0x26C5358
    void set_myOnlineRig(::GlobalNamespace::VRRig* value);
    // public System.Boolean get_isMyOnlineRigValid()
    // Offset: 0x26C537C
    bool get_isMyOnlineRigValid();
    // private System.Void set_isMyOnlineRigValid(System.Boolean value)
    // Offset: 0x26C5384
    void set_isMyOnlineRigValid(bool value);
    // public System.Void SetTargetRig(VRRig rig)
    // Offset: 0x26C5390
    void SetTargetRig(::GlobalNamespace::VRRig* rig);
    // public System.Boolean get_IsLocalOwnedWorldShareable()
    // Offset: 0x26C561C
    bool get_IsLocalOwnedWorldShareable();
    // public System.Void WorldShareableRequestOwnership()
    // Offset: 0x26C56A8
    void WorldShareableRequestOwnership();
    // public System.Boolean get_isRigidbodySet()
    // Offset: 0x26C5808
    bool get_isRigidbodySet();
    // private System.Void set_isRigidbodySet(System.Boolean value)
    // Offset: 0x26C5810
    void set_isRigidbodySet(bool value);
    // protected System.Void Awake()
    // Offset: 0x26BBAF0
    void Awake();
    // public System.Boolean get_IsSpawned()
    // Offset: 0x26C581C
    bool get_IsSpawned();
    // public System.Void set_IsSpawned(System.Boolean value)
    // Offset: 0x26C5824
    void set_IsSpawned(bool value);
    // public System.Void OnSpawn()
    // Offset: 0x26BBBD4
    void OnSpawn();
    // public System.Void OnDespawn()
    // Offset: 0x26C5D2C
    void OnDespawn();
    // private System.Void SetInitMatrix()
    // Offset: 0x26C5830
    void SetInitMatrix();
    // protected System.Void Start()
    // Offset: 0x26C5EAC
    void Start();
    // public System.Void OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject()
    // Offset: 0x26C60EC
    void OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject();
    // protected System.Void OnDestroy()
    // Offset: 0x26C6D4C
    void OnDestroy();
    // public System.Void CleanupDisable()
    // Offset: 0x26C6D50
    void CleanupDisable();
    // public System.Void PreDisable()
    // Offset: 0x26C6E90
    void PreDisable();
    // public UnityEngine.Matrix4x4 GetDefaultTransformationMatrix()
    // Offset: 0x26C6EB0
    ::UnityEngine::Matrix4x4 GetDefaultTransformationMatrix();
    // public System.Boolean ShouldBeKinematic()
    // Offset: 0x26BD584
    bool ShouldBeKinematic();
    // private System.Void SpawnShareableObject()
    // Offset: 0x26C6EEC
    void SpawnShareableObject();
    // public System.Void SpawnTransferableObjectViews()
    // Offset: 0x26C687C
    void SpawnTransferableObjectViews();
    // public System.Boolean IsLocalObject()
    // Offset: 0x26C67CC
    bool IsLocalObject();
    // public System.Void SetWorldShareableItem(WorldShareableItem item)
    // Offset: 0x26C7448
    void SetWorldShareableItem(::GlobalNamespace::WorldShareableItem* item);
    // protected System.Void OnWorldShareableItemSpawn()
    // Offset: 0x26C7474
    void OnWorldShareableItemSpawn();
    // protected System.Void PlayDestroyedOrDisabledEffect()
    // Offset: 0x26C7478
    void PlayDestroyedOrDisabledEffect();
    // protected System.Void OnItemDestroyedOrDisabled()
    // Offset: 0x26C747C
    void OnItemDestroyedOrDisabled();
    // public System.Void LateUpdate()
    // Offset: 0x26BFB70
    void LateUpdate();
    // protected UnityEngine.Transform DefaultAnchor()
    // Offset: 0x26C7594
    ::UnityEngine::Transform* DefaultAnchor();
    // private UnityEngine.Transform GetAnchor(TransferrableObject/PositionState pos)
    // Offset: 0x26C67EC
    ::UnityEngine::Transform* GetAnchor(::GlobalNamespace::TransferrableObject::PositionState pos);
    // protected System.Boolean Attached()
    // Offset: 0x26C7650
    bool Attached();
    // private UnityEngine.Transform GetTargetStorageZone(BodyDockPositions/DropPositions state)
    // Offset: 0x26C7698
    ::UnityEngine::Transform* GetTargetStorageZone(::GlobalNamespace::BodyDockPositions::DropPositions state);
    // static public UnityEngine.Transform GetTargetDock(TransferrableObject/PositionState state, VRRig rig)
    // Offset: 0x26C7760
    static ::UnityEngine::Transform* GetTargetDock(::GlobalNamespace::TransferrableObject::PositionState state, ::GlobalNamespace::VRRig* rig);
    // private System.Void UpdateFollowXform()
    // Offset: 0x26C78E0
    void UpdateFollowXform();
    // public System.Void DropItem()
    // Offset: 0x26BC738
    void DropItem();
    // protected System.Void LateUpdateShared()
    // Offset: 0x26BCC0C
    void LateUpdateShared();
    // public System.Void ResetToHome()
    // Offset: 0x26C89A4
    void ResetToHome();
    // protected System.Void ResetXf()
    // Offset: 0x26C8A18
    void ResetXf();
    // protected System.Void ReDock()
    // Offset: 0x26C8FDC
    void ReDock();
    // private System.Void HandleLocalInput()
    // Offset: 0x26C90A8
    void HandleLocalInput();
    // protected System.Void LocalMyObjectValidation()
    // Offset: 0x26C93DC
    void LocalMyObjectValidation();
    // protected System.Void LocalPersistanceValidation()
    // Offset: 0x26C93E0
    void LocalPersistanceValidation();
    // public System.Void ObjectBeingTaken()
    // Offset: 0x26C9728
    void ObjectBeingTaken();
    // protected System.Void LateUpdateLocal()
    // Offset: 0x26BCAC4
    void LateUpdateLocal();
    // protected System.Void LateUpdateReplicatedSceneObject()
    // Offset: 0x26C994C
    void LateUpdateReplicatedSceneObject();
    // protected System.Void LateUpdateReplicated()
    // Offset: 0x26C9A18
    void LateUpdateReplicated();
    // public System.Void ResetToDefaultState()
    // Offset: 0x26C9D34
    void ResetToDefaultState();
    // private System.Void SetupMatrixForFreeGrab(UnityEngine.Vector3 worldPosition, UnityEngine.Quaternion worldRotation, UnityEngine.Transform attachPoint, System.Boolean leftHand)
    // Offset: 0x26C880C
    void SetupMatrixForFreeGrab(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Quaternion worldRotation, ::UnityEngine::Transform* attachPoint, bool leftHand);
    // protected System.Void SetupHandMatrix(UnityEngine.Vector3 leftHandPos, UnityEngine.Quaternion leftHandRot, UnityEngine.Vector3 rightHandPos, UnityEngine.Quaternion rightHandRot)
    // Offset: 0x26C9EDC
    void SetupHandMatrix(::UnityEngine::Vector3 leftHandPos, ::UnityEngine::Quaternion leftHandRot, ::UnityEngine::Vector3 rightHandPos, ::UnityEngine::Quaternion rightHandRot);
    // protected System.Void OnHandMatrixUpdate(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Boolean leftHand)
    // Offset: 0x26CA060
    void OnHandMatrixUpdate(::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, bool leftHand);
    // protected System.Void ActivateItemFX(System.Single hapticStrength, System.Single hapticDuration, System.Int32 soundIndex, System.Single soundVolume)
    // Offset: 0x26CA5C8
    void ActivateItemFX(float hapticStrength, float hapticDuration, int soundIndex, float soundVolume);
    // public System.Void PlayNote(System.Int32 note, System.Single volume)
    // Offset: 0x26CA87C
    void PlayNote(int note, float volume);
    // public System.Boolean AutoGrabTrue(System.Boolean leftGrabbingHand)
    // Offset: 0x26CA880
    bool AutoGrabTrue(bool leftGrabbingHand);
    // public System.Boolean CanActivate()
    // Offset: 0x26CA894
    bool CanActivate();
    // public System.Boolean CanDeactivate()
    // Offset: 0x26CA89C
    bool CanDeactivate();
    // public System.Void OnActivate()
    // Offset: 0x26CA8A4
    void OnActivate();
    // public System.Void OnDeactivate()
    // Offset: 0x26CA8B0
    void OnDeactivate();
    // public System.Boolean IsMyItem()
    // Offset: 0x26CA8B8
    bool IsMyItem();
    // protected System.Boolean IsHeld()
    // Offset: 0x26CA970
    bool IsHeld();
    // public System.Boolean IsGrabbable()
    // Offset: 0x26CAAA0
    bool IsGrabbable();
    // public System.Boolean InHand()
    // Offset: 0x26C7634
    bool InHand();
    // public System.Boolean Dropped()
    // Offset: 0x26C7688
    bool Dropped();
    // public System.Boolean InLeftHand()
    // Offset: 0x26CAB00
    bool InLeftHand();
    // public System.Boolean InRightHand()
    // Offset: 0x26CAB10
    bool InRightHand();
    // public System.Boolean OnChest()
    // Offset: 0x26CAB20
    bool OnChest();
    // public System.Boolean OnShoulder()
    // Offset: 0x26CAB30
    bool OnShoulder();
    // protected Photon.Realtime.Player OwningPlayer()
    // Offset: 0x26CAB4C
    ::Photon::Realtime::Player* OwningPlayer();
    // public System.Void OnOwnershipTransferred(Photon.Realtime.Player toPlayer, Photon.Realtime.Player fromPlayer)
    // Offset: 0x26BD6F0
    void OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer);
    // public System.Boolean OnOwnershipRequest(Photon.Realtime.Player fromPlayer)
    // Offset: 0x26CAC00
    bool OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer);
    // public System.Boolean OnMasterClientAssistedTakeoverRequest(Photon.Realtime.Player fromPlayer, Photon.Realtime.Player toPlayer)
    // Offset: 0x26CAE18
    bool OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer);
    // public System.Void OnMyOwnerLeft()
    // Offset: 0x26CB020
    void OnMyOwnerLeft();
    // public System.Void OnMyCreatorLeft()
    // Offset: 0x26CB160
    void OnMyCreatorLeft();
    // static private System.Void .cctor()
    // Offset: 0x26CB1E0
    static void _cctor();
    // public override System.Void OnEnable()
    // Offset: 0x26C5EB0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26C69C8
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
    // public override System.Void OnJoinedRoom()
    // Offset: 0x26C70A8
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnLeftRoom()
    // Offset: 0x26C7200
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x26C7440
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x26BCF60
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26CA064
    // Implemented from: HoldableObject
    // Base method: System.Boolean HoldableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public override System.Void DropItemCleanup()
    // Offset: 0x26CA3F8
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::DropItemCleanup()
    void DropItemCleanup();
    // public override System.Void OnHover(InteractionPoint pointHovered, UnityEngine.GameObject hoveringHand)
    // Offset: 0x26CA460
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnHover(InteractionPoint pointHovered, UnityEngine.GameObject hoveringHand)
    void OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand);
    // public System.Void .ctor()
    // Offset: 0x26BDA08
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferrableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferrableObject*, creationType>()));
    }
  }; // TransferrableObject
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject::InterpolateState, "", "TransferrableObject/InterpolateState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject::PositionState, "", "TransferrableObject/PositionState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject::GrabType, "", "TransferrableObject/GrabType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject::ItemStates, "", "TransferrableObject/ItemStates");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::FixTransformOverride
// Il2CppName: FixTransformOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::FixTransformOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "FixTransformOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::Sirenix::OdinInspector::SelfValidationResult*)>(&GlobalNamespace::TransferrableObject::Validate)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("Sirenix.OdinInspector", "SelfValidationResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_myRig
// Il2CppName: get_myRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_myRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_myRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_myRig
// Il2CppName: set_myRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::TransferrableObject::set_myRig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_myRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_isMyRigValid
// Il2CppName: get_isMyRigValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_isMyRigValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_isMyRigValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_isMyRigValid
// Il2CppName: set_isMyRigValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(bool)>(&GlobalNamespace::TransferrableObject::set_isMyRigValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_isMyRigValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_myOnlineRig
// Il2CppName: get_myOnlineRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_myOnlineRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_myOnlineRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_myOnlineRig
// Il2CppName: set_myOnlineRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::TransferrableObject::set_myOnlineRig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_myOnlineRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_isMyOnlineRigValid
// Il2CppName: get_isMyOnlineRigValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_isMyOnlineRigValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_isMyOnlineRigValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_isMyOnlineRigValid
// Il2CppName: set_isMyOnlineRigValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(bool)>(&GlobalNamespace::TransferrableObject::set_isMyOnlineRigValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_isMyOnlineRigValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SetTargetRig
// Il2CppName: SetTargetRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::TransferrableObject::SetTargetRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SetTargetRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_IsLocalOwnedWorldShareable
// Il2CppName: get_IsLocalOwnedWorldShareable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_IsLocalOwnedWorldShareable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_IsLocalOwnedWorldShareable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::WorldShareableRequestOwnership
// Il2CppName: WorldShareableRequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::WorldShareableRequestOwnership)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "WorldShareableRequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_isRigidbodySet
// Il2CppName: get_isRigidbodySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_isRigidbodySet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_isRigidbodySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_isRigidbodySet
// Il2CppName: set_isRigidbodySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(bool)>(&GlobalNamespace::TransferrableObject::set_isRigidbodySet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_isRigidbodySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::get_IsSpawned
// Il2CppName: get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::set_IsSpawned
// Il2CppName: set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(bool)>(&GlobalNamespace::TransferrableObject::set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnDespawn
// Il2CppName: OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SetInitMatrix
// Il2CppName: SetInitMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::SetInitMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SetInitMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject
// Il2CppName: OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::CleanupDisable
// Il2CppName: CleanupDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::CleanupDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "CleanupDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::PreDisable
// Il2CppName: PreDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::PreDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "PreDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::GetDefaultTransformationMatrix
// Il2CppName: GetDefaultTransformationMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::GetDefaultTransformationMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "GetDefaultTransformationMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ShouldBeKinematic
// Il2CppName: ShouldBeKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ShouldBeKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ShouldBeKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SpawnShareableObject
// Il2CppName: SpawnShareableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::SpawnShareableObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SpawnShareableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SpawnTransferableObjectViews
// Il2CppName: SpawnTransferableObjectViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::SpawnTransferableObjectViews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SpawnTransferableObjectViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::IsLocalObject
// Il2CppName: IsLocalObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::IsLocalObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "IsLocalObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SetWorldShareableItem
// Il2CppName: SetWorldShareableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::WorldShareableItem*)>(&GlobalNamespace::TransferrableObject::SetWorldShareableItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("", "WorldShareableItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SetWorldShareableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnWorldShareableItemSpawn
// Il2CppName: OnWorldShareableItemSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnWorldShareableItemSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnWorldShareableItemSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::PlayDestroyedOrDisabledEffect
// Il2CppName: PlayDestroyedOrDisabledEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::PlayDestroyedOrDisabledEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "PlayDestroyedOrDisabledEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnItemDestroyedOrDisabled
// Il2CppName: OnItemDestroyedOrDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnItemDestroyedOrDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnItemDestroyedOrDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::DefaultAnchor
// Il2CppName: DefaultAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::DefaultAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "DefaultAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::GetAnchor
// Il2CppName: GetAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::TransferrableObject::GetAnchor)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "GetAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::Attached
// Il2CppName: Attached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::Attached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "Attached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::GetTargetStorageZone
// Il2CppName: GetTargetStorageZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::BodyDockPositions::DropPositions)>(&GlobalNamespace::TransferrableObject::GetTargetStorageZone)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions/DropPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "GetTargetStorageZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::GetTargetDock
// Il2CppName: GetTargetDock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::GlobalNamespace::TransferrableObject::PositionState, ::GlobalNamespace::VRRig*)>(&GlobalNamespace::TransferrableObject::GetTargetDock)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "GetTargetDock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, rig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::UpdateFollowXform
// Il2CppName: UpdateFollowXform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::UpdateFollowXform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "UpdateFollowXform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::DropItem
// Il2CppName: DropItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::DropItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "DropItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ResetToHome
// Il2CppName: ResetToHome
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ResetToHome)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ResetToHome", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ResetXf
// Il2CppName: ResetXf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ResetXf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ResetXf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ReDock
// Il2CppName: ReDock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ReDock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ReDock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::HandleLocalInput
// Il2CppName: HandleLocalInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::HandleLocalInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "HandleLocalInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LocalMyObjectValidation
// Il2CppName: LocalMyObjectValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LocalMyObjectValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LocalMyObjectValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LocalPersistanceValidation
// Il2CppName: LocalPersistanceValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LocalPersistanceValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LocalPersistanceValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ObjectBeingTaken
// Il2CppName: ObjectBeingTaken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ObjectBeingTaken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ObjectBeingTaken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LateUpdateReplicatedSceneObject
// Il2CppName: LateUpdateReplicatedSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LateUpdateReplicatedSceneObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LateUpdateReplicatedSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SetupMatrixForFreeGrab
// Il2CppName: SetupMatrixForFreeGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Transform*, bool)>(&GlobalNamespace::TransferrableObject::SetupMatrixForFreeGrab)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* attachPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SetupMatrixForFreeGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, worldRotation, attachPoint, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::SetupHandMatrix
// Il2CppName: SetupHandMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::TransferrableObject::SetupHandMatrix)> {
  static const MethodInfo* get() {
    static auto* leftHandPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* leftHandRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rightHandPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rightHandRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "SetupHandMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHandPos, leftHandRot, rightHandPos, rightHandRot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnHandMatrixUpdate
// Il2CppName: OnHandMatrixUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool)>(&GlobalNamespace::TransferrableObject::OnHandMatrixUpdate)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnHandMatrixUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::ActivateItemFX
// Il2CppName: ActivateItemFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(float, float, int, float)>(&GlobalNamespace::TransferrableObject::ActivateItemFX)> {
  static const MethodInfo* get() {
    static auto* hapticStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* hapticDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "ActivateItemFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hapticStrength, hapticDuration, soundIndex, soundVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(int, float)>(&GlobalNamespace::TransferrableObject::PlayNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::AutoGrabTrue
// Il2CppName: AutoGrabTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)(bool)>(&GlobalNamespace::TransferrableObject::AutoGrabTrue)> {
  static const MethodInfo* get() {
    static auto* leftGrabbingHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "AutoGrabTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftGrabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::IsMyItem
// Il2CppName: IsMyItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::IsMyItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "IsMyItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::IsHeld
// Il2CppName: IsHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::IsHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "IsHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::IsGrabbable
// Il2CppName: IsGrabbable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::IsGrabbable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "IsGrabbable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::InHand
// Il2CppName: InHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::InHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "InHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::Dropped
// Il2CppName: Dropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::Dropped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "Dropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::InLeftHand
// Il2CppName: InLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::InLeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "InLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::InRightHand
// Il2CppName: InRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::InRightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "InRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnChest
// Il2CppName: OnChest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnChest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnChest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnShoulder
// Il2CppName: OnShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnShoulder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OwningPlayer
// Il2CppName: OwningPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OwningPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OwningPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnOwnershipTransferred
// Il2CppName: OnOwnershipTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::TransferrableObject::OnOwnershipTransferred)> {
  static const MethodInfo* get() {
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnOwnershipTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toPlayer, fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnOwnershipRequest
// Il2CppName: OnOwnershipRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::TransferrableObject::OnOwnershipRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnOwnershipRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnMasterClientAssistedTakeoverRequest
// Il2CppName: OnMasterClientAssistedTakeoverRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::TransferrableObject::OnMasterClientAssistedTakeoverRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnMasterClientAssistedTakeoverRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer, toPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnMyOwnerLeft
// Il2CppName: OnMyOwnerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnMyOwnerLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnMyOwnerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnMyCreatorLeft
// Il2CppName: OnMyCreatorLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnMyCreatorLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnMyCreatorLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::TransferrableObject::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::TransferrableObject::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::TransferrableObject::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::TransferrableObject::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::DropItemCleanup
// Il2CppName: DropItemCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)()>(&GlobalNamespace::TransferrableObject::DropItemCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "DropItemCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::OnHover
// Il2CppName: OnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::TransferrableObject::OnHover)> {
  static const MethodInfo* get() {
    static auto* pointHovered = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* hoveringHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject*), "OnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointHovered, hoveringHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
