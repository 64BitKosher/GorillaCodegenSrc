// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HeldButton
  class HeldButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeldButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeldButton*, "", "HeldButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: HeldButton
  // [TokenAttribute] Offset: FFFFFFFF
  class HeldButton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material pressedMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* pressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material unpressedMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* unpressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer buttonRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* buttonRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Boolean isOn
    // Size: 0x1
    // Offset: 0x38
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOn and: debounceTime
    char __padding3[0x3] = {};
    // public System.Single debounceTime
    // Size: 0x4
    // Offset: 0x3C
    float debounceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean leftHandPressable
    // Size: 0x1
    // Offset: 0x40
    bool leftHandPressable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rightHandPressable
    // Size: 0x1
    // Offset: 0x41
    bool rightHandPressable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightHandPressable and: pressDuration
    char __padding6[0x2] = {};
    // public System.Single pressDuration
    // Size: 0x4
    // Offset: 0x44
    float pressDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Events.UnityEvent onPressButton
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Events::UnityEvent* onPressButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public System.String offText
    // Size: 0x8
    // Offset: 0x50
    ::StringW offText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String onText
    // Size: 0x8
    // Offset: 0x58
    ::StringW onText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text myText
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UI::Text* myText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.Single touchTime
    // Size: 0x4
    // Offset: 0x68
    float touchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single releaseTime
    // Size: 0x4
    // Offset: 0x6C
    float releaseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean pendingPress
    // Size: 0x1
    // Offset: 0x70
    bool pendingPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pendingPress and: pendingPressCollider
    char __padding14[0x7] = {};
    // private UnityEngine.Collider pendingPressCollider
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Collider* pendingPressCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Material pressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pressedMaterial();
    // Get instance field reference: public UnityEngine.Material unpressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_unpressedMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer buttonRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_buttonRenderer();
    // Get instance field reference: private System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // Get instance field reference: public System.Single debounceTime
    [[deprecated("Use field access instead!")]] float& dyn_debounceTime();
    // Get instance field reference: public System.Boolean leftHandPressable
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandPressable();
    // Get instance field reference: public System.Boolean rightHandPressable
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandPressable();
    // Get instance field reference: public System.Single pressDuration
    [[deprecated("Use field access instead!")]] float& dyn_pressDuration();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onPressButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onPressButton();
    // Get instance field reference: public System.String offText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_offText();
    // Get instance field reference: public System.String onText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_onText();
    // Get instance field reference: public UnityEngine.UI.Text myText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_myText();
    // Get instance field reference: private System.Single touchTime
    [[deprecated("Use field access instead!")]] float& dyn_touchTime();
    // Get instance field reference: private System.Single releaseTime
    [[deprecated("Use field access instead!")]] float& dyn_releaseTime();
    // Get instance field reference: private System.Boolean pendingPress
    [[deprecated("Use field access instead!")]] bool& dyn_pendingPress();
    // Get instance field reference: private UnityEngine.Collider pendingPressCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_pendingPressCollider();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27265F8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerStay(UnityEngine.Collider other)
    // Offset: 0x272689C
    void OnTriggerStay(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x2726B30
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void SetOn(System.Boolean inOn)
    // Offset: 0x272677C
    void SetOn(bool inOn);
    // public System.Void .ctor()
    // Offset: 0x2726BE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeldButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeldButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeldButton*, creationType>()));
    }
  }; // HeldButton
  #pragma pack(pop)
  static check_size<sizeof(HeldButton), 120 + sizeof(::UnityEngine::Collider*)> __GlobalNamespace_HeldButtonSizeCheck;
  static_assert(sizeof(HeldButton) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeldButton::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeldButton::*)(::UnityEngine::Collider*)>(&GlobalNamespace::HeldButton::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeldButton*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeldButton::OnTriggerStay
// Il2CppName: OnTriggerStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeldButton::*)(::UnityEngine::Collider*)>(&GlobalNamespace::HeldButton::OnTriggerStay)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeldButton*), "OnTriggerStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeldButton::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeldButton::*)(::UnityEngine::Collider*)>(&GlobalNamespace::HeldButton::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeldButton*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeldButton::SetOn
// Il2CppName: SetOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeldButton::*)(bool)>(&GlobalNamespace::HeldButton::SetOn)> {
  static const MethodInfo* get() {
    static auto* inOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeldButton*), "SetOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeldButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
