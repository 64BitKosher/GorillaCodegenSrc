// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneConditionalVisibility
  class ZoneConditionalVisibility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneConditionalVisibility);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneConditionalVisibility*, "", "ZoneConditionalVisibility");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: ZoneConditionalVisibility
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneConditionalVisibility : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GTZone zone
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GTZone zone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // private System.Boolean invisibleWhileLoaded
    // Size: 0x1
    // Offset: 0x24
    bool invisibleWhileLoaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private GTZone zone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zone();
    // Get instance field reference: private System.Boolean invisibleWhileLoaded
    [[deprecated("Use field access instead!")]] bool& dyn_invisibleWhileLoaded();
    // private System.Void Start()
    // Offset: 0x289D3A0
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x289D4EC
    void OnDestroy();
    // private System.Void OnZoneChanged()
    // Offset: 0x289D498
    void OnZoneChanged();
    // public System.Void .ctor()
    // Offset: 0x289D5DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneConditionalVisibility* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneConditionalVisibility*, creationType>()));
    }
  }; // ZoneConditionalVisibility
  #pragma pack(pop)
  static check_size<sizeof(ZoneConditionalVisibility), 36 + sizeof(bool)> __GlobalNamespace_ZoneConditionalVisibilitySizeCheck;
  static_assert(sizeof(ZoneConditionalVisibility) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalVisibility::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalVisibility::*)()>(&GlobalNamespace::ZoneConditionalVisibility::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalVisibility*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalVisibility::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalVisibility::*)()>(&GlobalNamespace::ZoneConditionalVisibility::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalVisibility*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalVisibility::OnZoneChanged
// Il2CppName: OnZoneChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalVisibility::*)()>(&GlobalNamespace::ZoneConditionalVisibility::OnZoneChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalVisibility*), "OnZoneChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalVisibility::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
