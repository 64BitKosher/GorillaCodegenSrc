// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixerSnapshot
  class AudioMixerSnapshot;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerAudioManager
  class PlayerAudioManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerAudioManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerAudioManager*, "", "PlayerAudioManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlayerAudioManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerAudioManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Audio.AudioMixerSnapshot defaultSnapshot
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Audio::AudioMixerSnapshot* defaultSnapshot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerSnapshot*) == 0x8);
    // public UnityEngine.Audio.AudioMixerSnapshot underwaterSnapshot
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Audio::AudioMixerSnapshot* underwaterSnapshot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerSnapshot*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Audio.AudioMixerSnapshot defaultSnapshot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerSnapshot*& dyn_defaultSnapshot();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerSnapshot underwaterSnapshot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerSnapshot*& dyn_underwaterSnapshot();
    // public System.Void SetMixerSnapshot(UnityEngine.Audio.AudioMixerSnapshot snapshot, System.Single transitionTime)
    // Offset: 0x272F250
    void SetMixerSnapshot(::UnityEngine::Audio::AudioMixerSnapshot* snapshot, float transitionTime);
    // public System.Void UnsetMixerSnapshot(System.Single transitionTime)
    // Offset: 0x272F268
    void UnsetMixerSnapshot(float transitionTime);
    // public System.Void .ctor()
    // Offset: 0x272F284
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerAudioManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerAudioManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerAudioManager*, creationType>()));
    }
  }; // PlayerAudioManager
  #pragma pack(pop)
  static check_size<sizeof(PlayerAudioManager), 40 + sizeof(::UnityEngine::Audio::AudioMixerSnapshot*)> __GlobalNamespace_PlayerAudioManagerSizeCheck;
  static_assert(sizeof(PlayerAudioManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerAudioManager::SetMixerSnapshot
// Il2CppName: SetMixerSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerAudioManager::*)(::UnityEngine::Audio::AudioMixerSnapshot*, float)>(&GlobalNamespace::PlayerAudioManager::SetMixerSnapshot)> {
  static const MethodInfo* get() {
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("UnityEngine.Audio", "AudioMixerSnapshot")->byval_arg;
    static auto* transitionTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerAudioManager*), "SetMixerSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapshot, transitionTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerAudioManager::UnsetMixerSnapshot
// Il2CppName: UnsetMixerSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerAudioManager::*)(float)>(&GlobalNamespace::PlayerAudioManager::UnsetMixerSnapshot)> {
  static const MethodInfo* get() {
    static auto* transitionTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerAudioManager*), "UnsetMixerSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transitionTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerAudioManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
