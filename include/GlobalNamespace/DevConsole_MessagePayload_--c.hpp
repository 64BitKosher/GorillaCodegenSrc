// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DevConsole/MessagePayload
#include "GlobalNamespace/DevConsole_MessagePayload.hpp"
// Including type: DevConsole
#include "GlobalNamespace/DevConsole.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevConsole::MessagePayload::$$c);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevConsole::MessagePayload::$$c*, "", "DevConsole/MessagePayload/<>c");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DevConsole/MessagePayload/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class DevConsole::MessagePayload::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly DevConsole/MessagePayload/<>c <>9
    static ::GlobalNamespace::DevConsole::MessagePayload::$$c* _get_$$9();
    // Set static field: static public readonly DevConsole/MessagePayload/<>c <>9
    static void _set_$$9(::GlobalNamespace::DevConsole::MessagePayload::$$c* value);
    // Get static field: static public System.Comparison`1<DevConsole/LogEntry> <>9__3_0
    static ::System::Comparison_1<::GlobalNamespace::DevConsole::LogEntry*>* _get_$$9__3_0();
    // Set static field: static public System.Comparison`1<DevConsole/LogEntry> <>9__3_0
    static void _set_$$9__3_0(::System::Comparison_1<::GlobalNamespace::DevConsole::LogEntry*>* value);
    // static private System.Void .cctor()
    // Offset: 0x279A950
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x279A9B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevConsole::MessagePayload::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevConsole::MessagePayload::$$c*, creationType>()));
    }
    // System.Int32 <GeneratePayloads>b__3_0(DevConsole/LogEntry e1, DevConsole/LogEntry e2)
    // Offset: 0x279A9C0
    int $GeneratePayloads$b__3_0(::GlobalNamespace::DevConsole::LogEntry* e1, ::GlobalNamespace::DevConsole::LogEntry* e2);
  }; // DevConsole/MessagePayload/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::MessagePayload::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::DevConsole::MessagePayload::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole::MessagePayload::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::MessagePayload::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::MessagePayload::$$c::$GeneratePayloads$b__3_0
// Il2CppName: <GeneratePayloads>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::DevConsole::MessagePayload::$$c::*)(::GlobalNamespace::DevConsole::LogEntry*, ::GlobalNamespace::DevConsole::LogEntry*)>(&GlobalNamespace::DevConsole::MessagePayload::$$c::$GeneratePayloads$b__3_0)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("", "DevConsole/LogEntry")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("", "DevConsole/LogEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole::MessagePayload::$$c*), "<GeneratePayloads>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
