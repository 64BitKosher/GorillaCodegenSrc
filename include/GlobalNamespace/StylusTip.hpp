// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Handedness
#include "GlobalNamespace/OVRInput_Handedness.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StylusTip
  class StylusTip;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StylusTip);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StylusTip*, "", "StylusTip");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: StylusTip
  // [TokenAttribute] Offset: FFFFFFFF
  class StylusTip : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform m_trackingSpace
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* m_trackingSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private OVRInput/Handedness m_handedness
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::OVRInput::Handedness m_handedness;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Handedness) == 0x4);
    // Padding between fields: m_handedness and: m_breadCrumbPf
    char __padding1[0x4] = {};
    // private UnityEngine.GameObject m_breadCrumbPf
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* m_breadCrumbPf;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject m_breadCrumbContainer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_breadCrumbContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject[] m_breadCrumbs
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::GameObject*> m_breadCrumbs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.Int32 m_breadCrumbIndexPrev
    // Size: 0x4
    // Offset: 0x48
    int m_breadCrumbIndexPrev;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_breadCrumbIndexCurr
    // Size: 0x4
    // Offset: 0x4C
    int m_breadCrumbIndexCurr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private OVRInput/Controller m_controller
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::OVRInput::Controller m_controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    public:
    // static field const value: static private System.Int32 MaxBreadCrumbs
    static constexpr const int MaxBreadCrumbs = 60;
    // Get static field: static private System.Int32 MaxBreadCrumbs
    static int _get_MaxBreadCrumbs();
    // Set static field: static private System.Int32 MaxBreadCrumbs
    static void _set_MaxBreadCrumbs(int value);
    // static field const value: static private System.Single BreadCrumbMinSize
    static constexpr const float BreadCrumbMinSize = 0.005;
    // Get static field: static private System.Single BreadCrumbMinSize
    static float _get_BreadCrumbMinSize();
    // Set static field: static private System.Single BreadCrumbMinSize
    static void _set_BreadCrumbMinSize(float value);
    // static field const value: static private System.Single BreadCrumbMaxSize
    static constexpr const float BreadCrumbMaxSize = 0.02;
    // Get static field: static private System.Single BreadCrumbMaxSize
    static float _get_BreadCrumbMaxSize();
    // Set static field: static private System.Single BreadCrumbMaxSize
    static void _set_BreadCrumbMaxSize(float value);
    // Get instance field reference: private UnityEngine.Transform m_trackingSpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_trackingSpace();
    // Get instance field reference: private OVRInput/Handedness m_handedness
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Handedness& dyn_m_handedness();
    // Get instance field reference: private UnityEngine.GameObject m_breadCrumbPf
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_breadCrumbPf();
    // Get instance field reference: private UnityEngine.GameObject m_breadCrumbContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_breadCrumbContainer();
    // Get instance field reference: private UnityEngine.GameObject[] m_breadCrumbs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_m_breadCrumbs();
    // Get instance field reference: private System.Int32 m_breadCrumbIndexPrev
    [[deprecated("Use field access instead!")]] int& dyn_m_breadCrumbIndexPrev();
    // Get instance field reference: private System.Int32 m_breadCrumbIndexCurr
    [[deprecated("Use field access instead!")]] int& dyn_m_breadCrumbIndexCurr();
    // Get instance field reference: private OVRInput/Controller m_controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_m_controller();
    // private System.Void Awake()
    // Offset: 0x294CF00
    void Awake();
    // private System.Void Update()
    // Offset: 0x294D158
    void Update();
    // static private UnityEngine.Pose GetT_Device_StylusTip(OVRInput/Controller controller)
    // Offset: 0x294D580
    static ::UnityEngine::Pose GetT_Device_StylusTip(::GlobalNamespace::OVRInput::Controller controller);
    // public System.Void .ctor()
    // Offset: 0x294D6AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StylusTip* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StylusTip::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StylusTip*, creationType>()));
    }
  }; // StylusTip
  #pragma pack(pop)
  static check_size<sizeof(StylusTip), 80 + sizeof(::GlobalNamespace::OVRInput::Controller)> __GlobalNamespace_StylusTipSizeCheck;
  static_assert(sizeof(StylusTip) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StylusTip::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StylusTip::*)()>(&GlobalNamespace::StylusTip::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StylusTip*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StylusTip::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StylusTip::*)()>(&GlobalNamespace::StylusTip::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StylusTip*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StylusTip::GetT_Device_StylusTip
// Il2CppName: GetT_Device_StylusTip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::StylusTip::GetT_Device_StylusTip)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StylusTip*), "GetT_Device_StylusTip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StylusTip::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
