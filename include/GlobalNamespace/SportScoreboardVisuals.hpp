// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialUVOffsetListSetter
  class MaterialUVOffsetListSetter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SportScoreboardVisuals
  class SportScoreboardVisuals;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SportScoreboardVisuals);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SportScoreboardVisuals*, "", "SportScoreboardVisuals");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: SportScoreboardVisuals
  // [TokenAttribute] Offset: FFFFFFFF
  class SportScoreboardVisuals : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public MaterialUVOffsetListSetter score1s
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MaterialUVOffsetListSetter* score1s;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialUVOffsetListSetter*) == 0x8);
    // public MaterialUVOffsetListSetter score10s
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MaterialUVOffsetListSetter* score10s;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialUVOffsetListSetter*) == 0x8);
    // private System.Int32 TeamIndex
    // Size: 0x4
    // Offset: 0x30
    int TeamIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public MaterialUVOffsetListSetter score1s
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialUVOffsetListSetter*& dyn_score1s();
    // Get instance field reference: public MaterialUVOffsetListSetter score10s
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialUVOffsetListSetter*& dyn_score10s();
    // Get instance field reference: private System.Int32 TeamIndex
    [[deprecated("Use field access instead!")]] int& dyn_TeamIndex();
    // private System.Void Awake()
    // Offset: 0x2730088
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x27300E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SportScoreboardVisuals* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SportScoreboardVisuals::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SportScoreboardVisuals*, creationType>()));
    }
  }; // SportScoreboardVisuals
  #pragma pack(pop)
  static check_size<sizeof(SportScoreboardVisuals), 48 + sizeof(int)> __GlobalNamespace_SportScoreboardVisualsSizeCheck;
  static_assert(sizeof(SportScoreboardVisuals) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SportScoreboardVisuals::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SportScoreboardVisuals::*)()>(&GlobalNamespace::SportScoreboardVisuals::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SportScoreboardVisuals*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SportScoreboardVisuals::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
