// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTScene
  class GTScene;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTScene);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTScene*, "", "GTScene");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: GTScene
  // [TokenAttribute] Offset: FFFFFFFF
  class GTScene : public ::Il2CppObject/*, public ::System::IEquatable_1<::GlobalNamespace::GTScene*>*/ {
    public:
    public:
    // private System.String _alias
    // Size: 0x8
    // Offset: 0x10
    ::StringW alias;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _path
    // Size: 0x8
    // Offset: 0x20
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _guid
    // Size: 0x8
    // Offset: 0x28
    ::StringW guid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _buildIndex
    // Size: 0x4
    // Offset: 0x30
    int buildIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _includeInBuild
    // Size: 0x1
    // Offset: 0x34
    bool includeInBuild;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::GTScene*>
    operator ::System::IEquatable_1<::GlobalNamespace::GTScene*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::GTScene*>*>(this);
    }
    // Get instance field reference: private System.String _alias
    [[deprecated("Use field access instead!")]] ::StringW& dyn__alias();
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.String _path
    [[deprecated("Use field access instead!")]] ::StringW& dyn__path();
    // Get instance field reference: private System.String _guid
    [[deprecated("Use field access instead!")]] ::StringW& dyn__guid();
    // Get instance field reference: private System.Int32 _buildIndex
    [[deprecated("Use field access instead!")]] int& dyn__buildIndex();
    // Get instance field reference: private System.Boolean _includeInBuild
    [[deprecated("Use field access instead!")]] bool& dyn__includeInBuild();
    // public System.String get_alias()
    // Offset: 0x2784990
    ::StringW get_alias();
    // public System.String get_name()
    // Offset: 0x2784998
    ::StringW get_name();
    // public System.String get_path()
    // Offset: 0x27849A0
    ::StringW get_path();
    // public System.String get_guid()
    // Offset: 0x27849A8
    ::StringW get_guid();
    // public System.Int32 get_buildIndex()
    // Offset: 0x27849B0
    int get_buildIndex();
    // public System.Boolean get_includeInBuild()
    // Offset: 0x27849B8
    bool get_includeInBuild();
    // public System.Boolean get_isLoaded()
    // Offset: 0x27849C0
    bool get_isLoaded();
    // public System.Boolean get_hasAlias()
    // Offset: 0x2784A3C
    bool get_hasAlias();
    // public System.Void .ctor(System.String name, System.String path, System.String guid, System.Int32 buildIndex, System.Boolean includeInBuild)
    // Offset: 0x2784A5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTScene* New_ctor(::StringW name, ::StringW path, ::StringW guid, int buildIndex, bool includeInBuild) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTScene*, creationType>(name, path, guid, buildIndex, includeInBuild)));
    }
    // public System.Boolean Equals(GTScene other)
    // Offset: 0x2784C00
    bool Equals(::GlobalNamespace::GTScene* other);
    // public System.Void LoadAsync()
    // Offset: 0x2784D28
    void LoadAsync();
    // public System.Void UnloadAsync()
    // Offset: 0x2784DA0
    void UnloadAsync();
    // static public GTScene FromAsset(System.Object sceneAsset)
    // Offset: 0x2784E18
    static ::GlobalNamespace::GTScene* FromAsset(::Il2CppObject* sceneAsset);
    // static public GTScene From(System.Object editorBuildSettingsScene)
    // Offset: 0x2784E20
    static ::GlobalNamespace::GTScene* From(::Il2CppObject* editorBuildSettingsScene);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2784B94
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2784BB4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2784C6C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // GTScene
  #pragma pack(pop)
  static check_size<sizeof(GTScene), 52 + sizeof(bool)> __GlobalNamespace_GTSceneSizeCheck;
  static_assert(sizeof(GTScene) == 0x35);
  // static public System.Boolean op_Equality(GTScene x, GTScene y)
  // Offset: 0x2784CF8
  bool operator ==(::GlobalNamespace::GTScene* x, ::GlobalNamespace::GTScene& y);
  // static public System.Boolean op_Inequality(GTScene x, GTScene y)
  // Offset: 0x2784D08
  bool operator !=(::GlobalNamespace::GTScene* x, ::GlobalNamespace::GTScene& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_alias
// Il2CppName: get_alias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_alias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_alias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_path
// Il2CppName: get_path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_guid
// Il2CppName: get_guid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_guid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_guid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_buildIndex
// Il2CppName: get_buildIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_buildIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_buildIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_includeInBuild
// Il2CppName: get_includeInBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_includeInBuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_includeInBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_isLoaded
// Il2CppName: get_isLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_isLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_isLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::get_hasAlias
// Il2CppName: get_hasAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::get_hasAlias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "get_hasAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GTScene::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTScene::*)(::GlobalNamespace::GTScene*)>(&GlobalNamespace::GTScene::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "GTScene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::LoadAsync
// Il2CppName: LoadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::LoadAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "LoadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::UnloadAsync
// Il2CppName: UnloadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::UnloadAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "UnloadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::FromAsset
// Il2CppName: FromAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GTScene* (*)(::Il2CppObject*)>(&GlobalNamespace::GTScene::FromAsset)> {
  static const MethodInfo* get() {
    static auto* sceneAsset = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "FromAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneAsset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GTScene* (*)(::Il2CppObject*)>(&GlobalNamespace::GTScene::From)> {
  static const MethodInfo* get() {
    static auto* editorBuildSettingsScene = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editorBuildSettingsScene});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GTScene::*)()>(&GlobalNamespace::GTScene::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTScene::*)(::Il2CppObject*)>(&GlobalNamespace::GTScene::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTScene*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTScene::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::GTScene::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
