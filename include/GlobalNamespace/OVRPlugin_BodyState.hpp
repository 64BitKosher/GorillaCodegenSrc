// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/BodyJointLocation
#include "GlobalNamespace/OVRPlugin_BodyJointLocation.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BodyState, "", "OVRPlugin/BodyState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/BodyState
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::BodyState/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/BodyJointLocation[] JointLocations
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::GlobalNamespace::OVRPlugin::BodyJointLocation> JointLocations;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::BodyJointLocation>) == 0x8);
    // public System.Single Confidence
    // Size: 0x4
    // Offset: 0x8
    float Confidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.UInt32 SkeletonChangedCount
    // Size: 0x4
    // Offset: 0xC
    uint SkeletonChangedCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Double Time
    // Size: 0x8
    // Offset: 0x10
    double Time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: BodyState
    constexpr BodyState(::ArrayW<::GlobalNamespace::OVRPlugin::BodyJointLocation> JointLocations_ = ::ArrayW<::GlobalNamespace::OVRPlugin::BodyJointLocation>(static_cast<void*>(nullptr)), float Confidence_ = {}, uint SkeletonChangedCount_ = {}, double Time_ = {}) noexcept : JointLocations{JointLocations_}, Confidence{Confidence_}, SkeletonChangedCount{SkeletonChangedCount_}, Time{Time_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/BodyJointLocation[] JointLocations
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::BodyJointLocation>& dyn_JointLocations();
    // Get instance field reference: public System.Single Confidence
    [[deprecated("Use field access instead!")]] float& dyn_Confidence();
    // Get instance field reference: public System.UInt32 SkeletonChangedCount
    [[deprecated("Use field access instead!")]] uint& dyn_SkeletonChangedCount();
    // Get instance field reference: public System.Double Time
    [[deprecated("Use field access instead!")]] double& dyn_Time();
  }; // OVRPlugin/BodyState
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::BodyState), 16 + sizeof(double)> __GlobalNamespace_OVRPlugin_BodyStateSizeCheck;
  static_assert(sizeof(OVRPlugin::BodyState) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
