// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BetterDayNightManager
  class BetterDayNightManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SkyboxController
  class SkyboxController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SkyboxController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SkyboxController*, "", "SkyboxController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: SkyboxController
  // [TokenAttribute] Offset: FFFFFFFF
  class SkyboxController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.MeshRenderer skyFront
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshRenderer* skyFront;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer skyBack
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* skyBack;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.Material[] skyMaterials
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Material*> skyMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x38
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lerpValue and: currentSky
    char __padding3[0x4] = {};
    // private UnityEngine.Material _currentSky
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* currentSky;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _nextSky
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* nextSky;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private TimeSince lastUpdate
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::TimeSince lastUpdate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    // private BetterDayNightManager _dayNightManager
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::BetterDayNightManager* dayNightManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BetterDayNightManager*) == 0x8);
    // private System.Double _currentSeconds
    // Size: 0x8
    // Offset: 0x60
    double currentSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _totalSecondsInRange
    // Size: 0x8
    // Offset: 0x68
    double totalSecondsInRange;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single _currentTime
    // Size: 0x4
    // Offset: 0x70
    float currentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private ShaderHashId _SkyAlpha
    static ::GlobalNamespace::ShaderHashId _get__SkyAlpha();
    // Set static field: static private ShaderHashId _SkyAlpha
    static void _set__SkyAlpha(::GlobalNamespace::ShaderHashId value);
    // Get instance field reference: public UnityEngine.MeshRenderer skyFront
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_skyFront();
    // Get instance field reference: public UnityEngine.MeshRenderer skyBack
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_skyBack();
    // Get instance field reference: public UnityEngine.Material[] skyMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_skyMaterials();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: private UnityEngine.Material _currentSky
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__currentSky();
    // Get instance field reference: private UnityEngine.Material _nextSky
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__nextSky();
    // Get instance field reference: private TimeSince lastUpdate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn_lastUpdate();
    // Get instance field reference: private BetterDayNightManager _dayNightManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BetterDayNightManager*& dyn__dayNightManager();
    // Get instance field reference: private System.Double _currentSeconds
    [[deprecated("Use field access instead!")]] double& dyn__currentSeconds();
    // Get instance field reference: private System.Double _totalSecondsInRange
    [[deprecated("Use field access instead!")]] double& dyn__totalSecondsInRange();
    // Get instance field reference: private System.Single _currentTime
    [[deprecated("Use field access instead!")]] float& dyn__currentTime();
    // private System.Void Start()
    // Offset: 0x26936E0
    void Start();
    // private System.Void Update()
    // Offset: 0x26938E4
    void Update();
    // private System.Void OnValidate()
    // Offset: 0x2693C5C
    void OnValidate();
    // private System.Void UpdateTime()
    // Offset: 0x2693920
    void UpdateTime();
    // private System.Void UpdateSky()
    // Offset: 0x2693A10
    void UpdateSky();
    // private System.Void SetFrontToTransparent()
    // Offset: 0x2693C60
    void SetFrontToTransparent();
    // private System.Void SetFrontToOpaque()
    // Offset: 0x2693FE0
    void SetFrontToOpaque();
    // private System.Void SetBackToOpaque()
    // Offset: 0x2693E20
    void SetBackToOpaque();
    // public System.Void .ctor()
    // Offset: 0x26941A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SkyboxController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkyboxController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SkyboxController*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2694220
    static void _cctor();
  }; // SkyboxController
  #pragma pack(pop)
  static check_size<sizeof(SkyboxController), 112 + sizeof(float)> __GlobalNamespace_SkyboxControllerSizeCheck;
  static_assert(sizeof(SkyboxController) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::UpdateTime
// Il2CppName: UpdateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::UpdateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "UpdateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::UpdateSky
// Il2CppName: UpdateSky
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::UpdateSky)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "UpdateSky", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::SetFrontToTransparent
// Il2CppName: SetFrontToTransparent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::SetFrontToTransparent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "SetFrontToTransparent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::SetFrontToOpaque
// Il2CppName: SetFrontToOpaque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::SetFrontToOpaque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "SetFrontToOpaque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::SetBackToOpaque
// Il2CppName: SetBackToOpaque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkyboxController::*)()>(&GlobalNamespace::SkyboxController::SetBackToOpaque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), "SetBackToOpaque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SkyboxController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SkyboxController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkyboxController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
