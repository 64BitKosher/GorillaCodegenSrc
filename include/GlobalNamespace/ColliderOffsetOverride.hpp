// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColliderOffsetOverride
  class ColliderOffsetOverride;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColliderOffsetOverride);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColliderOffsetOverride*, "", "ColliderOffsetOverride");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ColliderOffsetOverride
  // [TokenAttribute] Offset: FFFFFFFF
  class ColliderOffsetOverride : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public System.Boolean autoSearch
    // Size: 0x1
    // Offset: 0x28
    bool autoSearch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoSearch and: targetScale
    char __padding1[0x3] = {};
    // public System.Single targetScale
    // Size: 0x4
    // Offset: 0x2C
    float targetScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_colliders();
    // Get instance field reference: public System.Boolean autoSearch
    [[deprecated("Use field access instead!")]] bool& dyn_autoSearch();
    // Get instance field reference: public System.Single targetScale
    [[deprecated("Use field access instead!")]] float& dyn_targetScale();
    // private System.Void Awake()
    // Offset: 0x2686408
    void Awake();
    // public System.Void FindColliders()
    // Offset: 0x26865B8
    void FindColliders();
    // public System.Void FindCollidersRecursively()
    // Offset: 0x2686800
    void FindCollidersRecursively();
    // private System.Void AutoDisabled()
    // Offset: 0x2686A48
    void AutoDisabled();
    // private System.Void AutoEnabled()
    // Offset: 0x2686A54
    void AutoEnabled();
    // public System.Void .ctor()
    // Offset: 0x2686A5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColliderOffsetOverride* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColliderOffsetOverride::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColliderOffsetOverride*, creationType>()));
    }
  }; // ColliderOffsetOverride
  #pragma pack(pop)
  static check_size<sizeof(ColliderOffsetOverride), 44 + sizeof(float)> __GlobalNamespace_ColliderOffsetOverrideSizeCheck;
  static_assert(sizeof(ColliderOffsetOverride) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderOffsetOverride::*)()>(&GlobalNamespace::ColliderOffsetOverride::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderOffsetOverride*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::FindColliders
// Il2CppName: FindColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderOffsetOverride::*)()>(&GlobalNamespace::ColliderOffsetOverride::FindColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderOffsetOverride*), "FindColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::FindCollidersRecursively
// Il2CppName: FindCollidersRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderOffsetOverride::*)()>(&GlobalNamespace::ColliderOffsetOverride::FindCollidersRecursively)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderOffsetOverride*), "FindCollidersRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::AutoDisabled
// Il2CppName: AutoDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderOffsetOverride::*)()>(&GlobalNamespace::ColliderOffsetOverride::AutoDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderOffsetOverride*), "AutoDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::AutoEnabled
// Il2CppName: AutoEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderOffsetOverride::*)()>(&GlobalNamespace::ColliderOffsetOverride::AutoEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderOffsetOverride*), "AutoEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderOffsetOverride::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
