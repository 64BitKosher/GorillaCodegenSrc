// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevInspectorManager
  class DevInspectorManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevInspectorManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevInspectorManager*, "", "DevInspectorManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: DevInspectorManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DevInspectorManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static private DevInspectorManager _instance
    static ::GlobalNamespace::DevInspectorManager* _get__instance();
    // Set static field: static private DevInspectorManager _instance
    static void _set__instance(::GlobalNamespace::DevInspectorManager* value);
    // static public DevInspectorManager get_instance()
    // Offset: 0x279ADB0
    static ::GlobalNamespace::DevInspectorManager* get_instance();
    // public System.Void .ctor()
    // Offset: 0x279AE84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevInspectorManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevInspectorManager*, creationType>()));
    }
  }; // DevInspectorManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevInspectorManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DevInspectorManager* (*)()>(&GlobalNamespace::DevInspectorManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevInspectorManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevInspectorManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
