// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WASD
  class WASD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WASD);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WASD*, "", "WASD");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: WASD
  // [TokenAttribute] Offset: FFFFFFFF
  class WASD : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single Speed
    // Size: 0x4
    // Offset: 0x20
    float Speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Omega
    // Size: 0x4
    // Offset: 0x24
    float Omega;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 m_velocity
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public System.Single Speed
    [[deprecated("Use field access instead!")]] float& dyn_Speed();
    // Get instance field reference: public System.Single Omega
    [[deprecated("Use field access instead!")]] float& dyn_Omega();
    // Get instance field reference: public UnityEngine.Vector3 m_velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_velocity();
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x2685E58
    ::UnityEngine::Vector3 get_Velocity();
    // public System.Void Update()
    // Offset: 0x2685E64
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26861D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WASD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WASD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WASD*, creationType>()));
    }
  }; // WASD
  #pragma pack(pop)
  static check_size<sizeof(WASD), 40 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_WASDSizeCheck;
  static_assert(sizeof(WASD) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WASD::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::WASD::*)()>(&GlobalNamespace::WASD::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WASD*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WASD::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WASD::*)()>(&GlobalNamespace::WASD::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WASD*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WASD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
