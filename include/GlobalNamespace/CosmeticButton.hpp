// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CosmeticButton
  class CosmeticButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CosmeticButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CosmeticButton*, "", "CosmeticButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: CosmeticButton
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // private UnityEngine.Vector3 pressedOffset
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 pressedOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: pressedOffset and: disabledMaterial
    char __padding0[0x4] = {};
    // private UnityEngine.Material disabledMaterial
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Material* disabledMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Vector3 disabledOffset
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 disabledOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 startingPos
    // Size: 0xC
    // Offset: 0x94
    ::UnityEngine::Vector3 startingPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private UnityEngine.Vector3 pressedOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pressedOffset();
    // Get instance field reference: private UnityEngine.Material disabledMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_disabledMaterial();
    // Get instance field reference: private UnityEngine.Vector3 disabledOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_disabledOffset();
    // Get instance field reference: private UnityEngine.Vector3 startingPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingPos();
    // public System.Void Awake()
    // Offset: 0x26D0868
    void Awake();
    // private System.Void UpdatePosition()
    // Offset: 0x26D09B4
    void UpdatePosition();
    // public override System.Void UpdateColor()
    // Offset: 0x26D0898
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::UpdateColor()
    void UpdateColor();
    // public System.Void .ctor()
    // Offset: 0x26D0A44
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticButton*, creationType>()));
    }
  }; // CosmeticButton
  #pragma pack(pop)
  static check_size<sizeof(CosmeticButton), 148 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_CosmeticButtonSizeCheck;
  static_assert(sizeof(CosmeticButton) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CosmeticButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticButton::*)()>(&GlobalNamespace::CosmeticButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticButton::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticButton::*)()>(&GlobalNamespace::CosmeticButton::UpdatePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticButton*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticButton::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticButton::*)()>(&GlobalNamespace::CosmeticButton::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticButton*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
