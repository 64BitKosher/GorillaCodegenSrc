// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ITetheredObjectBehavior
  class ITetheredObjectBehavior;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ITetheredObjectBehavior);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ITetheredObjectBehavior*, "", "ITetheredObjectBehavior");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: ITetheredObjectBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class ITetheredObjectBehavior {
    public:
    // public System.Void DbgClear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DbgClear();
    // public System.Void EnableDistanceConstraints(System.Boolean v, System.Single playerScale)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EnableDistanceConstraints(bool v, float playerScale);
    // public System.Void EnableDynamics(System.Boolean enable, System.Boolean kinematic)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EnableDynamics(bool enable, bool kinematic);
    // public System.Boolean IsEnabled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsEnabled();
    // public System.Void ReParent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReParent();
    // public System.Boolean ReturnStep()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ReturnStep();
    // public System.Void TriggerEnter(UnityEngine.Collider other, ref UnityEngine.Vector3 force, ref UnityEngine.Vector3 collisionPt, ref System.Boolean transferOwnership)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TriggerEnter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> collisionPt, ByRef<bool> transferOwnership);
  }; // ITetheredObjectBehavior
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::DbgClear
// Il2CppName: DbgClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ITetheredObjectBehavior::*)()>(&GlobalNamespace::ITetheredObjectBehavior::DbgClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "DbgClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::EnableDistanceConstraints
// Il2CppName: EnableDistanceConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ITetheredObjectBehavior::*)(bool, float)>(&GlobalNamespace::ITetheredObjectBehavior::EnableDistanceConstraints)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playerScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "EnableDistanceConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, playerScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::EnableDynamics
// Il2CppName: EnableDynamics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ITetheredObjectBehavior::*)(bool, bool)>(&GlobalNamespace::ITetheredObjectBehavior::EnableDynamics)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* kinematic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "EnableDynamics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable, kinematic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ITetheredObjectBehavior::*)()>(&GlobalNamespace::ITetheredObjectBehavior::IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::ReParent
// Il2CppName: ReParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ITetheredObjectBehavior::*)()>(&GlobalNamespace::ITetheredObjectBehavior::ReParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "ReParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::ReturnStep
// Il2CppName: ReturnStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ITetheredObjectBehavior::*)()>(&GlobalNamespace::ITetheredObjectBehavior::ReturnStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "ReturnStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ITetheredObjectBehavior::TriggerEnter
// Il2CppName: TriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ITetheredObjectBehavior::*)(::UnityEngine::Collider*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<bool>)>(&GlobalNamespace::ITetheredObjectBehavior::TriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* collisionPt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* transferOwnership = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ITetheredObjectBehavior*), "TriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, force, collisionPt, transferOwnership});
  }
};
