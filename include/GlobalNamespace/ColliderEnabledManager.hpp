// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaSurfaceOverride
  class GorillaSurfaceOverride;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColliderEnabledManager
  class ColliderEnabledManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColliderEnabledManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColliderEnabledManager*, "", "ColliderEnabledManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ColliderEnabledManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ColliderEnabledManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Collider[] floorCollider
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Collider*> floorCollider;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public System.Boolean floorEnabled
    // Size: 0x1
    // Offset: 0x28
    bool floorEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasFloorEnabled
    // Size: 0x1
    // Offset: 0x29
    bool wasFloorEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean floorCollidersEnabled
    // Size: 0x1
    // Offset: 0x2A
    bool floorCollidersEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: floorCollidersEnabled and: wallsBeforeMaterial
    char __padding3[0x1] = {};
    // public System.Int32 wallsBeforeMaterial
    // Size: 0x4
    // Offset: 0x2C
    int wallsBeforeMaterial;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wallsAfterMaterial
    // Size: 0x4
    // Offset: 0x30
    int wallsAfterMaterial;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: wallsAfterMaterial and: walls
    char __padding5[0x4] = {};
    // public GorillaSurfaceOverride[] walls
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::GorillaSurfaceOverride*> walls;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaSurfaceOverride*>) == 0x8);
    // public System.Single timeDisabled
    // Size: 0x4
    // Offset: 0x40
    float timeDisabled;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single disableLength
    // Size: 0x4
    // Offset: 0x44
    float disableLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public ColliderEnabledManager instance
    static ::GlobalNamespace::ColliderEnabledManager* _get_instance();
    // Set static field: static public ColliderEnabledManager instance
    static void _set_instance(::GlobalNamespace::ColliderEnabledManager* value);
    // Get instance field reference: public UnityEngine.Collider[] floorCollider
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_floorCollider();
    // Get instance field reference: public System.Boolean floorEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_floorEnabled();
    // Get instance field reference: public System.Boolean wasFloorEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_wasFloorEnabled();
    // Get instance field reference: public System.Boolean floorCollidersEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_floorCollidersEnabled();
    // Get instance field reference: public System.Int32 wallsBeforeMaterial
    [[deprecated("Use field access instead!")]] int& dyn_wallsBeforeMaterial();
    // Get instance field reference: public System.Int32 wallsAfterMaterial
    [[deprecated("Use field access instead!")]] int& dyn_wallsAfterMaterial();
    // Get instance field reference: public GorillaSurfaceOverride[] walls
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaSurfaceOverride*>& dyn_walls();
    // Get instance field reference: public System.Single timeDisabled
    [[deprecated("Use field access instead!")]] float& dyn_timeDisabled();
    // Get instance field reference: public System.Single disableLength
    [[deprecated("Use field access instead!")]] float& dyn_disableLength();
    // private System.Void Start()
    // Offset: 0x26861E0
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x2686244
    void OnDestroy();
    // public System.Void DisableFloorForFrame()
    // Offset: 0x2686298
    void DisableFloorForFrame();
    // private System.Void LateUpdate()
    // Offset: 0x26862A0
    void LateUpdate();
    // private System.Void DisableFloor()
    // Offset: 0x26863E0
    void DisableFloor();
    // public System.Void .ctor()
    // Offset: 0x2686400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColliderEnabledManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColliderEnabledManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColliderEnabledManager*, creationType>()));
    }
  }; // ColliderEnabledManager
  #pragma pack(pop)
  static check_size<sizeof(ColliderEnabledManager), 68 + sizeof(float)> __GlobalNamespace_ColliderEnabledManagerSizeCheck;
  static_assert(sizeof(ColliderEnabledManager) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderEnabledManager::*)()>(&GlobalNamespace::ColliderEnabledManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderEnabledManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderEnabledManager::*)()>(&GlobalNamespace::ColliderEnabledManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderEnabledManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::DisableFloorForFrame
// Il2CppName: DisableFloorForFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderEnabledManager::*)()>(&GlobalNamespace::ColliderEnabledManager::DisableFloorForFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderEnabledManager*), "DisableFloorForFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderEnabledManager::*)()>(&GlobalNamespace::ColliderEnabledManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderEnabledManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::DisableFloor
// Il2CppName: DisableFloor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColliderEnabledManager::*)()>(&GlobalNamespace::ColliderEnabledManager::DisableFloor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColliderEnabledManager*), "DisableFloor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColliderEnabledManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
