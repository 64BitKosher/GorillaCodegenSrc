// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IDelayedExecListener
#include "GlobalNamespace/IDelayedExecListener.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle.hpp"
// Including type: GorillaTag.CosmeticSystem.CosmeticAttachInfo
#include "GorillaTag/CosmeticSystem/CosmeticAttachInfo.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: GTAssetRef`1<TObject>
  template<typename TObject>
  class GTAssetRef_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HeadModel
  class HeadModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeadModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeadModel*, "", "HeadModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: HeadModel
  // [TokenAttribute] Offset: FFFFFFFF
  class HeadModel : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IDelayedExecListener*/ {
    public:
    // Nested type: ::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo
    struct _CosmeticPartLoadInfo;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: HeadModel/_CosmeticPartLoadInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct _CosmeticPartLoadInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String playFabId
      // Size: 0x8
      // Offset: 0x0
      ::StringW playFabId;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public GorillaTag.GTAssetRef`1<UnityEngine.GameObject> prefabAssetRef
      // Size: 0x8
      // Offset: 0x8
      ::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>* prefabAssetRef;
      // Field size check
      static_assert(sizeof(::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>*) == 0x8);
      // public GorillaTag.CosmeticSystem.CosmeticAttachInfo attachInfo
      // Size: 0xFFFFFFFF
      // Offset: 0x10
      ::GorillaTag::CosmeticSystem::CosmeticAttachInfo attachInfo;
      // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> loadOp
      // Size: 0xFFFFFFFF
      // Offset: 0x50
      ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> loadOp;
      // public UnityEngine.Transform xform
      // Size: 0x8
      // Offset: 0x70
      ::UnityEngine::Transform* xform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      public:
      // Creating value type constructor for type: _CosmeticPartLoadInfo
      constexpr _CosmeticPartLoadInfo(::StringW playFabId_ = {}, ::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>* prefabAssetRef_ = {}, ::GorillaTag::CosmeticSystem::CosmeticAttachInfo attachInfo_ = {}, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> loadOp_ = {}, ::UnityEngine::Transform* xform_ = {}) noexcept : playFabId{playFabId_}, prefabAssetRef{prefabAssetRef_}, attachInfo{attachInfo_}, loadOp{loadOp_}, xform{xform_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String playFabId
      [[deprecated("Use field access instead!")]] ::StringW& dyn_playFabId();
      // Get instance field reference: public GorillaTag.GTAssetRef`1<UnityEngine.GameObject> prefabAssetRef
      [[deprecated("Use field access instead!")]] ::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>*& dyn_prefabAssetRef();
      // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticAttachInfo attachInfo
      [[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::CosmeticAttachInfo& dyn_attachInfo();
      // Get instance field reference: public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> loadOp
      [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>& dyn_loadOp();
      // Get instance field reference: public UnityEngine.Transform xform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_xform();
    }; // HeadModel/_CosmeticPartLoadInfo
    // WARNING Not writing size check since size may be invalid!
    public:
    // private readonly System.Collections.Generic.List`1<HeadModel/_CosmeticPartLoadInfo> _currentPartLoadInfos
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo>* currentPartLoadInfos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Int32> _loadOp_to_partInfoIndex
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, int>* loadOp_to_partInfoIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, int>*) == 0x8);
    // private UnityEngine.Renderer _mannequinRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* mannequinRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.GameObject[] cosmetics
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::GameObject*> cosmetics;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IDelayedExecListener
    operator ::GlobalNamespace::IDelayedExecListener() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IDelayedExecListener*>(this);
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<HeadModel/_CosmeticPartLoadInfo> _currentPartLoadInfos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo>*& dyn__currentPartLoadInfos();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Int32> _loadOp_to_partInfoIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, int>*& dyn__loadOp_to_partInfoIndex();
    // Get instance field reference: private UnityEngine.Renderer _mannequinRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__mannequinRenderer();
    // Get instance field reference: public UnityEngine.GameObject[] cosmetics
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_cosmetics();
    // protected System.Void Awake()
    // Offset: 0x26ABF5C
    void Awake();
    // public System.Void SetCosmeticActive(System.String playFabId, System.Boolean forRightSide)
    // Offset: 0x26ABFB8
    void SetCosmeticActive(::StringW playFabId, bool forRightSide);
    // public System.Void SetCosmeticActiveArray(System.String[] playFabIds, System.Boolean[] forRightSideArray)
    // Offset: 0x26AC79C
    void SetCosmeticActiveArray(::ArrayW<::StringW> playFabIds, ::ArrayW<bool> forRightSideArray);
    // private System.Void _AddPreviewCosmetic(System.String playFabId, System.Boolean forRightSide)
    // Offset: 0x26AC168
    void _AddPreviewCosmetic(::StringW playFabId, bool forRightSide);
    // private System.Void _HandleLoadOpOnCompleted(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> loadOp)
    // Offset: 0x26AC830
    void _HandleLoadOpOnCompleted(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> loadOp);
    // private System.Void IDelayedExecListener.OnDelayedAction(System.Int32 partLoadInfosIndex)
    // Offset: 0x26ACB8C
    void IDelayedExecListener_OnDelayedAction(int partLoadInfosIndex);
    // private System.Void _ClearCurrent()
    // Offset: 0x26ABFE8
    void _ClearCurrent();
    // private System.Void _EnsureCapacityAndClear(System.Collections.Generic.List`1<T> list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void _EnsureCapacityAndClear(::System::Collections::Generic::List_1<T>* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::_EnsureCapacityAndClear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_EnsureCapacityAndClear", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, list);
    }
    // private System.Void _EnsureCapacityAndClear(System.Collections.Generic.Dictionary`2<T1,T2> dict)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    void _EnsureCapacityAndClear(::System::Collections::Generic::Dictionary_2<T1, T2>* dict) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::_EnsureCapacityAndClear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_EnsureCapacityAndClear", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dict)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, dict);
    }
    // public System.Void .ctor()
    // Offset: 0x26ACDC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeadModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeadModel*, creationType>()));
    }
  }; // HeadModel
  #pragma pack(pop)
  static check_size<sizeof(HeadModel), 56 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __GlobalNamespace_HeadModelSizeCheck;
  static_assert(sizeof(HeadModel) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo, "", "HeadModel/_CosmeticPartLoadInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)()>(&GlobalNamespace::HeadModel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::SetCosmeticActive
// Il2CppName: SetCosmeticActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::StringW, bool)>(&GlobalNamespace::HeadModel::SetCosmeticActive)> {
  static const MethodInfo* get() {
    static auto* playFabId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forRightSide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "SetCosmeticActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playFabId, forRightSide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::SetCosmeticActiveArray
// Il2CppName: SetCosmeticActiveArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::ArrayW<::StringW>, ::ArrayW<bool>)>(&GlobalNamespace::HeadModel::SetCosmeticActiveArray)> {
  static const MethodInfo* get() {
    static auto* playFabIds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* forRightSideArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "SetCosmeticActiveArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playFabIds, forRightSideArray});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::_AddPreviewCosmetic
// Il2CppName: _AddPreviewCosmetic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::StringW, bool)>(&GlobalNamespace::HeadModel::_AddPreviewCosmetic)> {
  static const MethodInfo* get() {
    static auto* playFabId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forRightSide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "_AddPreviewCosmetic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playFabId, forRightSide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::_HandleLoadOpOnCompleted
// Il2CppName: _HandleLoadOpOnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>)>(&GlobalNamespace::HeadModel::_HandleLoadOpOnCompleted)> {
  static const MethodInfo* get() {
    static auto* loadOp = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "_HandleLoadOpOnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loadOp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::IDelayedExecListener_OnDelayedAction
// Il2CppName: IDelayedExecListener.OnDelayedAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(int)>(&GlobalNamespace::HeadModel::IDelayedExecListener_OnDelayedAction)> {
  static const MethodInfo* get() {
    static auto* partLoadInfosIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "IDelayedExecListener.OnDelayedAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partLoadInfosIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::_ClearCurrent
// Il2CppName: _ClearCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)()>(&GlobalNamespace::HeadModel::_ClearCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "_ClearCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::_EnsureCapacityAndClear
// Il2CppName: _EnsureCapacityAndClear
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::_EnsureCapacityAndClear
// Il2CppName: _EnsureCapacityAndClear
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
