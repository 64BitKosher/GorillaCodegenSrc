// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaSpeakerLoudness
  class GorillaSpeakerLoudness;
  // Forward declaring type: VoiceLoudnessReactorBlendShapeTarget
  class VoiceLoudnessReactorBlendShapeTarget;
  // Forward declaring type: VoiceLoudnessReactorTransformTarget
  class VoiceLoudnessReactorTransformTarget;
  // Forward declaring type: VoiceLoudnessReactorTransformRotationTarget
  class VoiceLoudnessReactorTransformRotationTarget;
  // Forward declaring type: VoiceLoudnessReactorParticleSystemTarget
  class VoiceLoudnessReactorParticleSystemTarget;
  // Forward declaring type: VoiceLoudnessReactorGameObjectEnableTarget
  class VoiceLoudnessReactorGameObjectEnableTarget;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VoiceLoudnessReactor
  class VoiceLoudnessReactor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VoiceLoudnessReactor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VoiceLoudnessReactor*, "", "VoiceLoudnessReactor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VoiceLoudnessReactor
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceLoudnessReactor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GorillaSpeakerLoudness loudness
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::GorillaSpeakerLoudness* loudness;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSpeakerLoudness*) == 0x8);
    // private VoiceLoudnessReactorBlendShapeTarget[] blendShapeTargets
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget*> blendShapeTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget*>) == 0x8);
    // private VoiceLoudnessReactorTransformTarget[] transformPositionTargets
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*> transformPositionTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>) == 0x8);
    // private VoiceLoudnessReactorTransformRotationTarget[] transformRotationTargets
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget*> transformRotationTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget*>) == 0x8);
    // private VoiceLoudnessReactorTransformTarget[] transformScaleTargets
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*> transformScaleTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>) == 0x8);
    // private VoiceLoudnessReactorParticleSystemTarget[] particleTargets
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*> particleTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*>) == 0x8);
    // private VoiceLoudnessReactorGameObjectEnableTarget[] gameObjectEnableTargets
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*> gameObjectEnableTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*>) == 0x8);
    public:
    // Get instance field reference: private GorillaSpeakerLoudness loudness
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& dyn_loudness();
    // Get instance field reference: private VoiceLoudnessReactorBlendShapeTarget[] blendShapeTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget*>& dyn_blendShapeTargets();
    // Get instance field reference: private VoiceLoudnessReactorTransformTarget[] transformPositionTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>& dyn_transformPositionTargets();
    // Get instance field reference: private VoiceLoudnessReactorTransformRotationTarget[] transformRotationTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget*>& dyn_transformRotationTargets();
    // Get instance field reference: private VoiceLoudnessReactorTransformTarget[] transformScaleTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>& dyn_transformScaleTargets();
    // Get instance field reference: private VoiceLoudnessReactorParticleSystemTarget[] particleTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*>& dyn_particleTargets();
    // Get instance field reference: private VoiceLoudnessReactorGameObjectEnableTarget[] gameObjectEnableTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*>& dyn_gameObjectEnableTargets();
    // private System.Void Start()
    // Offset: 0x27A5CC4
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x27A5FDC
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x27A6140
    void Update();
    // public System.Void .ctor()
    // Offset: 0x27A6648
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLoudnessReactor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLoudnessReactor*, creationType>()));
    }
  }; // VoiceLoudnessReactor
  #pragma pack(pop)
  static check_size<sizeof(VoiceLoudnessReactor), 80 + sizeof(::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*>)> __GlobalNamespace_VoiceLoudnessReactorSizeCheck;
  static_assert(sizeof(VoiceLoudnessReactor) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactor::*)()>(&GlobalNamespace::VoiceLoudnessReactor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactor::*)()>(&GlobalNamespace::VoiceLoudnessReactor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VoiceLoudnessReactor::*)()>(&GlobalNamespace::VoiceLoudnessReactor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VoiceLoudnessReactor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VoiceLoudnessReactor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
