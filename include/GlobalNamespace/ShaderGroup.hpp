// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ShaderGroup
  struct ShaderGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ShaderGroup, "", "ShaderGroup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ShaderGroup
  // [TokenAttribute] Offset: FFFFFFFF
  struct ShaderGroup/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Shader originalShader
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Shader* originalShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader gameplayShader
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Shader* gameplayShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader bakingShader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* bakingShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Creating value type constructor for type: ShaderGroup
    constexpr ShaderGroup(::UnityEngine::Material* material_ = {}, ::UnityEngine::Shader* originalShader_ = {}, ::UnityEngine::Shader* gameplayShader_ = {}, ::UnityEngine::Shader* bakingShader_ = {}) noexcept : material{material_}, originalShader{originalShader_}, gameplayShader{gameplayShader_}, bakingShader{bakingShader_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.Shader originalShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_originalShader();
    // Get instance field reference: public UnityEngine.Shader gameplayShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_gameplayShader();
    // Get instance field reference: public UnityEngine.Shader bakingShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_bakingShader();
    // public System.Void .ctor(UnityEngine.Material material, UnityEngine.Shader original, UnityEngine.Shader gameplay, UnityEngine.Shader baking)
    // Offset: 0x27A5C64
    // ABORTED: conflicts with another method.  ShaderGroup(::UnityEngine::Material* material, ::UnityEngine::Shader* original, ::UnityEngine::Shader* gameplay, ::UnityEngine::Shader* baking);
  }; // ShaderGroup
  #pragma pack(pop)
  static check_size<sizeof(ShaderGroup), 24 + sizeof(::UnityEngine::Shader*)> __GlobalNamespace_ShaderGroupSizeCheck;
  static_assert(sizeof(ShaderGroup) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ShaderGroup::ShaderGroup
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
