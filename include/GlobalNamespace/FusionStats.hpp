// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: FusionGraph/Layouts
#include "GlobalNamespace/FusionGraph.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Including type: Fusion.Simulation/Statistics/ObjStatFlags
#include "Fusion/Simulation_Statistics_ObjStatFlags.hpp"
// Including type: Fusion.Simulation/Statistics/NetStatFlags
#include "Fusion/Simulation_Statistics_NetStatFlags.hpp"
// Including type: Fusion.Simulation/Statistics/SimStatFlags
#include "Fusion/Simulation_Statistics_SimStatFlags.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObject
  class NetworkObject;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: StatCanvasTypes because it is already included!
  // Skipping declaration: FusionGraph because it is already included!
  // Skipping declaration: DefaultLayouts because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Fusion::StatsInternal
namespace Fusion::StatsInternal {
  // Forward declaring type: IFusionStatsView
  class IFusionStatsView;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: GridLayoutGroup
  class GridLayoutGroup;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionStats
  class FusionStats;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionStats);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionStats*, "", "FusionStats");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2B4
  #pragma pack(push, 1)
  // Autogenerated type: FusionStats
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class FusionStats : public ::Fusion::Behaviour {
    public:
    // Nested type: ::GlobalNamespace::FusionStats::StatCanvasTypes
    struct StatCanvasTypes;
    // Nested type: ::GlobalNamespace::FusionStats::DefaultLayouts
    struct DefaultLayouts;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionStats/StatCanvasTypes
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatCanvasTypes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatCanvasTypes
      constexpr StatCanvasTypes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionStats/StatCanvasTypes Overlay
      static constexpr const int Overlay = 0;
      // Get static field: static public FusionStats/StatCanvasTypes Overlay
      static ::GlobalNamespace::FusionStats::StatCanvasTypes _get_Overlay();
      // Set static field: static public FusionStats/StatCanvasTypes Overlay
      static void _set_Overlay(::GlobalNamespace::FusionStats::StatCanvasTypes value);
      // static field const value: static public FusionStats/StatCanvasTypes GameObject
      static constexpr const int GameObject = 1;
      // Get static field: static public FusionStats/StatCanvasTypes GameObject
      static ::GlobalNamespace::FusionStats::StatCanvasTypes _get_GameObject();
      // Set static field: static public FusionStats/StatCanvasTypes GameObject
      static void _set_GameObject(::GlobalNamespace::FusionStats::StatCanvasTypes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionStats/StatCanvasTypes
    #pragma pack(pop)
    static check_size<sizeof(FusionStats::StatCanvasTypes), 0 + sizeof(int)> __GlobalNamespace_FusionStats_StatCanvasTypesSizeCheck;
    static_assert(sizeof(FusionStats::StatCanvasTypes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionStats/DefaultLayouts
    // [TokenAttribute] Offset: FFFFFFFF
    struct DefaultLayouts/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DefaultLayouts
      constexpr DefaultLayouts(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionStats/DefaultLayouts Custom
      static constexpr const int Custom = 0;
      // Get static field: static public FusionStats/DefaultLayouts Custom
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_Custom();
      // Set static field: static public FusionStats/DefaultLayouts Custom
      static void _set_Custom(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // static field const value: static public FusionStats/DefaultLayouts Left
      static constexpr const int Left = 1;
      // Get static field: static public FusionStats/DefaultLayouts Left
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_Left();
      // Set static field: static public FusionStats/DefaultLayouts Left
      static void _set_Left(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // static field const value: static public FusionStats/DefaultLayouts Right
      static constexpr const int Right = 2;
      // Get static field: static public FusionStats/DefaultLayouts Right
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_Right();
      // Set static field: static public FusionStats/DefaultLayouts Right
      static void _set_Right(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // static field const value: static public FusionStats/DefaultLayouts UpperLeft
      static constexpr const int UpperLeft = 3;
      // Get static field: static public FusionStats/DefaultLayouts UpperLeft
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_UpperLeft();
      // Set static field: static public FusionStats/DefaultLayouts UpperLeft
      static void _set_UpperLeft(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // static field const value: static public FusionStats/DefaultLayouts UpperRight
      static constexpr const int UpperRight = 4;
      // Get static field: static public FusionStats/DefaultLayouts UpperRight
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_UpperRight();
      // Set static field: static public FusionStats/DefaultLayouts UpperRight
      static void _set_UpperRight(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // static field const value: static public FusionStats/DefaultLayouts Full
      static constexpr const int Full = 5;
      // Get static field: static public FusionStats/DefaultLayouts Full
      static ::GlobalNamespace::FusionStats::DefaultLayouts _get_Full();
      // Set static field: static public FusionStats/DefaultLayouts Full
      static void _set_Full(::GlobalNamespace::FusionStats::DefaultLayouts value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionStats/DefaultLayouts
    #pragma pack(pop)
    static check_size<sizeof(FusionStats::DefaultLayouts), 0 + sizeof(int)> __GlobalNamespace_FusionStats_DefaultLayoutsSizeCheck;
    static_assert(sizeof(FusionStats::DefaultLayouts) == 0x4);
    public:
    // public System.Single RedrawInterval
    // Size: 0x4
    // Offset: 0x20
    float RedrawInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private FusionStats/StatCanvasTypes _canvasType
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::FusionStats::StatCanvasTypes canvasType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionStats::StatCanvasTypes) == 0x4);
    // private System.Boolean _showButtonLabels
    // Size: 0x1
    // Offset: 0x28
    bool showButtonLabels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showButtonLabels and: maxHeaderHeight
    char __padding2[0x3] = {};
    // private System.Int32 _maxHeaderHeight
    // Size: 0x4
    // Offset: 0x2C
    int maxHeaderHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single CanvasScale
    // Size: 0x4
    // Offset: 0x30
    float CanvasScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CanvasDistance
    // Size: 0x4
    // Offset: 0x34
    float CanvasDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rect _gameObjectRect
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Rect gameObjectRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.Rect _overlayRect
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Rect overlayRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private FusionGraph/Layouts _defaultLayout
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::FusionGraph::Layouts defaultLayout;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionGraph::Layouts) == 0x4);
    // private System.Boolean _noTextOverlap
    // Size: 0x1
    // Offset: 0x5C
    bool noTextOverlap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _noGraphShader
    // Size: 0x1
    // Offset: 0x5D
    bool noGraphShader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noGraphShader and: GraphColumnCount
    char __padding10[0x2] = {};
    // public System.Int32 GraphColumnCount
    // Size: 0x4
    // Offset: 0x60
    int GraphColumnCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _graphMaxWidth
    // Size: 0x4
    // Offset: 0x64
    int graphMaxWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _enableObjectStats
    // Size: 0x1
    // Offset: 0x68
    bool enableObjectStats;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableObjectStats and: object
    char __padding13[0x7] = {};
    // private Fusion.NetworkObject _object
    // Size: 0x8
    // Offset: 0x70
    ::Fusion::NetworkObject* object;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObject*) == 0x8);
    // private System.Int32 _objectTitleHeight
    // Size: 0x4
    // Offset: 0x78
    int objectTitleHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _objectIdsHeight
    // Size: 0x4
    // Offset: 0x7C
    int objectIdsHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _objectMetersHeight
    // Size: 0x4
    // Offset: 0x80
    int objectMetersHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: objectMetersHeight and: runner
    char __padding17[0x4] = {};
    // private Fusion.NetworkRunner _runner
    // Size: 0x8
    // Offset: 0x88
    ::Fusion::NetworkRunner* runner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // public System.Boolean InitializeAllGraphs
    // Size: 0x1
    // Offset: 0x90
    bool InitializeAllGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InitializeAllGraphs and: ConnectTo
    char __padding19[0x3] = {};
    // public Fusion.SimulationModes ConnectTo
    // Size: 0x4
    // Offset: 0x94
    ::Fusion::SimulationModes ConnectTo;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    // private Fusion.Simulation/Statistics/ObjStatFlags _includedObjStats
    // Size: 0x4
    // Offset: 0x98
    ::Fusion::Simulation::Statistics::ObjStatFlags includedObjStats;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::ObjStatFlags) == 0x4);
    // private Fusion.Simulation/Statistics/NetStatFlags _includedNetStats
    // Size: 0x4
    // Offset: 0x9C
    ::Fusion::Simulation::Statistics::NetStatFlags includedNetStats;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::NetStatFlags) == 0x4);
    // private Fusion.Simulation/Statistics/SimStatFlags _includedSimStats
    // Size: 0x4
    // Offset: 0xA0
    ::Fusion::Simulation::Statistics::SimStatFlags includedSimStats;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics::SimStatFlags) == 0x4);
    // public System.Boolean AutoDestroy
    // Size: 0x1
    // Offset: 0xA4
    bool AutoDestroy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnforceSingle
    // Size: 0x1
    // Offset: 0xA5
    bool EnforceSingle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnforceSingle and: Guid
    char __padding25[0x2] = {};
    // public System.String Guid
    // Size: 0x8
    // Offset: 0xA8
    ::StringW Guid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _modifyColors
    // Size: 0x1
    // Offset: 0xB0
    bool modifyColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: modifyColors and: graphColorGood
    char __padding27[0x3] = {};
    // private UnityEngine.Color _graphColorGood
    // Size: 0x10
    // Offset: 0xB4
    ::UnityEngine::Color graphColorGood;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _graphColorWarn
    // Size: 0x10
    // Offset: 0xC4
    ::UnityEngine::Color graphColorWarn;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _graphColorBad
    // Size: 0x10
    // Offset: 0xD4
    ::UnityEngine::Color graphColorBad;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _graphColorFlag
    // Size: 0x10
    // Offset: 0xE4
    ::UnityEngine::Color graphColorFlag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _fontColor
    // Size: 0x10
    // Offset: 0xF4
    ::UnityEngine::Color fontColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color PanelColor
    // Size: 0x10
    // Offset: 0x104
    ::UnityEngine::Color PanelColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _simDataBackColor
    // Size: 0x10
    // Offset: 0x114
    ::UnityEngine::Color simDataBackColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _netDataBackColor
    // Size: 0x10
    // Offset: 0x124
    ::UnityEngine::Color netDataBackColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _objDataBackColor
    // Size: 0x10
    // Offset: 0x134
    ::UnityEngine::Color objDataBackColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: objDataBackColor and: simGraphs
    char __padding36[0x4] = {};
    // private FusionGraph[] _simGraphs
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::GlobalNamespace::FusionGraph*> simGraphs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::FusionGraph*>) == 0x8);
    // private FusionGraph[] _objGraphs
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::GlobalNamespace::FusionGraph*> objGraphs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::FusionGraph*>) == 0x8);
    // private FusionGraph[] _netGraphs
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::GlobalNamespace::FusionGraph*> netGraphs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::FusionGraph*>) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.StatsInternal.IFusionStatsView> _foundViews
    // Size: 0x8
    // Offset: 0x160
    ::System::Collections::Generic::List_1<::Fusion::StatsInternal::IFusionStatsView*>* foundViews;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::StatsInternal::IFusionStatsView*>*) == 0x8);
    // private System.Collections.Generic.List`1<FusionGraph> _foundGraphs
    // Size: 0x8
    // Offset: 0x168
    ::System::Collections::Generic::List_1<::GlobalNamespace::FusionGraph*>* foundGraphs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::FusionGraph*>*) == 0x8);
    // private UnityEngine.UI.Text _titleText
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::UI::Text* titleText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _clearIcon
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::UI::Text* clearIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _pauseIcon
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::UI::Text* pauseIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _togglIcon
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::UI::Text* togglIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _closeIcon
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::UI::Text* closeIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _canvsIcon
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::UI::Text* canvsIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _clearLabel
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::UI::Text* clearLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _pauseLabel
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::UI::Text* pauseLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _togglLabel
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::UI::Text* togglLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _closeLabel
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::UI::Text* closeLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _canvsLabel
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::UI::Text* canvsLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text _objectNameText
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::UI::Text* objectNameText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.GridLayoutGroup _graphGridLayoutGroup
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::UI::GridLayoutGroup* graphGridLayoutGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::GridLayoutGroup*) == 0x8);
    // private UnityEngine.Canvas _canvas
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::Canvas* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.RectTransform _canvasRT
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::RectTransform* canvasRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _rootPanelRT
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::RectTransform* rootPanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _guidesRT
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::RectTransform* guidesRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _headerRT
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::RectTransform* headerRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _statsPanelRT
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::RectTransform* statsPanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _graphsLayoutRT
    // Size: 0x8
    // Offset: 0x208
    ::UnityEngine::RectTransform* graphsLayoutRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _titleRT
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::RectTransform* titleRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _buttonsRT
    // Size: 0x8
    // Offset: 0x218
    ::UnityEngine::RectTransform* buttonsRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _objectTitlePanelRT
    // Size: 0x8
    // Offset: 0x220
    ::UnityEngine::RectTransform* objectTitlePanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _objectIdsGroupRT
    // Size: 0x8
    // Offset: 0x228
    ::UnityEngine::RectTransform* objectIdsGroupRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _objectMetersPanelRT
    // Size: 0x8
    // Offset: 0x230
    ::UnityEngine::RectTransform* objectMetersPanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _clientIdPanelRT
    // Size: 0x8
    // Offset: 0x238
    ::UnityEngine::RectTransform* clientIdPanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _authorityPanelRT
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::RectTransform* authorityPanelRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.UI.Button _titleButton
    // Size: 0x8
    // Offset: 0x248
    ::UnityEngine::UI::Button* titleButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _objctButton
    // Size: 0x8
    // Offset: 0x250
    ::UnityEngine::UI::Button* objctButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _clearButton
    // Size: 0x8
    // Offset: 0x258
    ::UnityEngine::UI::Button* clearButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _togglButton
    // Size: 0x8
    // Offset: 0x260
    ::UnityEngine::UI::Button* togglButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _pauseButton
    // Size: 0x8
    // Offset: 0x268
    ::UnityEngine::UI::Button* pauseButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _closeButton
    // Size: 0x8
    // Offset: 0x270
    ::UnityEngine::UI::Button* closeButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _canvsButton
    // Size: 0x8
    // Offset: 0x278
    ::UnityEngine::UI::Button* canvsButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.Font _font
    // Size: 0x8
    // Offset: 0x280
    ::UnityEngine::Font* font;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // private System.Boolean _hidden
    // Size: 0x1
    // Offset: 0x288
    bool hidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _paused
    // Size: 0x1
    // Offset: 0x289
    bool paused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: paused and: layoutDirty
    char __padding78[0x2] = {};
    // private System.Int32 _layoutDirty
    // Size: 0x4
    // Offset: 0x28C
    int layoutDirty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _activeDirty
    // Size: 0x1
    // Offset: 0x290
    bool activeDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: activeDirty and: currentDrawTime
    char __padding80[0x7] = {};
    // private System.Double _currentDrawTime
    // Size: 0x8
    // Offset: 0x298
    double currentDrawTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _delayDrawUntil
    // Size: 0x8
    // Offset: 0x2A0
    double delayDrawUntil;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.String _previousObjectTitle
    // Size: 0x8
    // Offset: 0x2A8
    ::StringW previousObjectTitle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single _lastLayoutUpdate
    // Size: 0x4
    // Offset: 0x2B0
    float lastLayoutUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private System.Collections.Generic.Dictionary`2<Fusion.NetworkRunner,System.Collections.Generic.List`1<FusionStats>> _statsForRunnerLookup
    static ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::GlobalNamespace::FusionStats*>*>* _get__statsForRunnerLookup();
    // Set static field: static private System.Collections.Generic.Dictionary`2<Fusion.NetworkRunner,System.Collections.Generic.List`1<FusionStats>> _statsForRunnerLookup
    static void _set__statsForRunnerLookup(::System::Collections::Generic::Dictionary_2<::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::GlobalNamespace::FusionStats*>*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,FusionStats> _activeGuids
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::FusionStats*>* _get__activeGuids();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,FusionStats> _activeGuids
    static void _set__activeGuids(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::FusionStats*>* value);
    // static field const value: static public Fusion.Simulation/Statistics/SimStatFlags DefaultSimStatsMask
    static constexpr const int DefaultSimStatsMask = 14;
    // Get static field: static public Fusion.Simulation/Statistics/SimStatFlags DefaultSimStatsMask
    static ::Fusion::Simulation::Statistics::SimStatFlags _get_DefaultSimStatsMask();
    // Set static field: static public Fusion.Simulation/Statistics/SimStatFlags DefaultSimStatsMask
    static void _set_DefaultSimStatsMask(::Fusion::Simulation::Statistics::SimStatFlags value);
    // static field const value: static private System.Int32 SCREEN_SCALE_W
    static constexpr const int SCREEN_SCALE_W = 1080;
    // Get static field: static private System.Int32 SCREEN_SCALE_W
    static int _get_SCREEN_SCALE_W();
    // Set static field: static private System.Int32 SCREEN_SCALE_W
    static void _set_SCREEN_SCALE_W(int value);
    // static field const value: static private System.Int32 SCREEN_SCALE_H
    static constexpr const int SCREEN_SCALE_H = 1080;
    // Get static field: static private System.Int32 SCREEN_SCALE_H
    static int _get_SCREEN_SCALE_H();
    // Set static field: static private System.Int32 SCREEN_SCALE_H
    static void _set_SCREEN_SCALE_H(int value);
    // static field const value: static private System.Single TEXT_MARGIN
    static constexpr const float TEXT_MARGIN = 0.25;
    // Get static field: static private System.Single TEXT_MARGIN
    static float _get_TEXT_MARGIN();
    // Set static field: static private System.Single TEXT_MARGIN
    static void _set_TEXT_MARGIN(float value);
    // static field const value: static private System.Single TITLE_HEIGHT
    static constexpr const float TITLE_HEIGHT = 20;
    // Get static field: static private System.Single TITLE_HEIGHT
    static float _get_TITLE_HEIGHT();
    // Set static field: static private System.Single TITLE_HEIGHT
    static void _set_TITLE_HEIGHT(float value);
    // static field const value: static private System.Int32 MARGIN
    static constexpr const int MARGIN = 6;
    // Get static field: static private System.Int32 MARGIN
    static int _get_MARGIN();
    // Set static field: static private System.Int32 MARGIN
    static void _set_MARGIN(int value);
    // static field const value: static private System.Int32 PAD
    static constexpr const int PAD = 10;
    // Get static field: static private System.Int32 PAD
    static int _get_PAD();
    // Set static field: static private System.Int32 PAD
    static void _set_PAD(int value);
    // static field const value: static private System.String PLAY_TEXT
    static constexpr const char* PLAY_TEXT = "PLAY";
    // Get static field: static private System.String PLAY_TEXT
    static ::StringW _get_PLAY_TEXT();
    // Set static field: static private System.String PLAY_TEXT
    static void _set_PLAY_TEXT(::StringW value);
    // static field const value: static private System.String PAUS_TEXT
    static constexpr const char* PAUS_TEXT = "PAUSE";
    // Get static field: static private System.String PAUS_TEXT
    static ::StringW _get_PAUS_TEXT();
    // Set static field: static private System.String PAUS_TEXT
    static void _set_PAUS_TEXT(::StringW value);
    // static field const value: static private System.String SHOW_TEXT
    static constexpr const char* SHOW_TEXT = "SHOW";
    // Get static field: static private System.String SHOW_TEXT
    static ::StringW _get_SHOW_TEXT();
    // Set static field: static private System.String SHOW_TEXT
    static void _set_SHOW_TEXT(::StringW value);
    // static field const value: static private System.String HIDE_TEXT
    static constexpr const char* HIDE_TEXT = "HIDE";
    // Get static field: static private System.String HIDE_TEXT
    static ::StringW _get_HIDE_TEXT();
    // Set static field: static private System.String HIDE_TEXT
    static void _set_HIDE_TEXT(::StringW value);
    // static field const value: static private System.String CLER_TEXT
    static constexpr const char* CLER_TEXT = "CLEAR";
    // Get static field: static private System.String CLER_TEXT
    static ::StringW _get_CLER_TEXT();
    // Set static field: static private System.String CLER_TEXT
    static void _set_CLER_TEXT(::StringW value);
    // static field const value: static private System.String CNVS_TEXT
    static constexpr const char* CNVS_TEXT = "CANVAS";
    // Get static field: static private System.String CNVS_TEXT
    static ::StringW _get_CNVS_TEXT();
    // Set static field: static private System.String CNVS_TEXT
    static void _set_CNVS_TEXT(::StringW value);
    // static field const value: static private System.String CLSE_TEXT
    static constexpr const char* CLSE_TEXT = "CLOSE";
    // Get static field: static private System.String CLSE_TEXT
    static ::StringW _get_CLSE_TEXT();
    // Set static field: static private System.String CLSE_TEXT
    static void _set_CLSE_TEXT(::StringW value);
    // static field const value: static private System.String PLAY_ICON
    static constexpr const char* PLAY_ICON = "\u25ba";
    // Get static field: static private System.String PLAY_ICON
    static ::StringW _get_PLAY_ICON();
    // Set static field: static private System.String PLAY_ICON
    static void _set_PLAY_ICON(::StringW value);
    // static field const value: static private System.String PAUS_ICON
    static constexpr const char* PAUS_ICON = "\u05f0";
    // Get static field: static private System.String PAUS_ICON
    static ::StringW _get_PAUS_ICON();
    // Set static field: static private System.String PAUS_ICON
    static void _set_PAUS_ICON(::StringW value);
    // static field const value: static private System.String HIDE_ICON
    static constexpr const char* HIDE_ICON = "\u25bc";
    // Get static field: static private System.String HIDE_ICON
    static ::StringW _get_HIDE_ICON();
    // Set static field: static private System.String HIDE_ICON
    static void _set_HIDE_ICON(::StringW value);
    // static field const value: static private System.String SHOW_ICON
    static constexpr const char* SHOW_ICON = "\u25b2";
    // Get static field: static private System.String SHOW_ICON
    static ::StringW _get_SHOW_ICON();
    // Set static field: static private System.String SHOW_ICON
    static void _set_SHOW_ICON(::StringW value);
    // static field const value: static private System.String CLER_ICON
    static constexpr const char* CLER_ICON = "\u1d13";
    // Get static field: static private System.String CLER_ICON
    static ::StringW _get_CLER_ICON();
    // Set static field: static private System.String CLER_ICON
    static void _set_CLER_ICON(::StringW value);
    // static field const value: static private System.String CNVS_ICON
    static constexpr const char* CNVS_ICON = "\ufb26";
    // Get static field: static private System.String CNVS_ICON
    static ::StringW _get_CNVS_ICON();
    // Set static field: static private System.String CNVS_ICON
    static void _set_CNVS_ICON(::StringW value);
    // static field const value: static private System.String CLSE_ICON
    static constexpr const char* CLSE_ICON = "x";
    // Get static field: static private System.String CLSE_ICON
    static ::StringW _get_CLSE_ICON();
    // Set static field: static private System.String CLSE_ICON
    static void _set_CLSE_ICON(::StringW value);
    // Get static field: static private System.Nullable`1<System.Boolean> _newInputSystemFound
    static ::System::Nullable_1<bool> _get__newInputSystemFound();
    // Set static field: static private System.Nullable`1<System.Boolean> _newInputSystemFound
    static void _set__newInputSystemFound(::System::Nullable_1<bool> value);
    // Get instance field reference: public System.Single RedrawInterval
    [[deprecated("Use field access instead!")]] float& dyn_RedrawInterval();
    // Get instance field reference: private FusionStats/StatCanvasTypes _canvasType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionStats::StatCanvasTypes& dyn__canvasType();
    // Get instance field reference: private System.Boolean _showButtonLabels
    [[deprecated("Use field access instead!")]] bool& dyn__showButtonLabels();
    // Get instance field reference: private System.Int32 _maxHeaderHeight
    [[deprecated("Use field access instead!")]] int& dyn__maxHeaderHeight();
    // Get instance field reference: public System.Single CanvasScale
    [[deprecated("Use field access instead!")]] float& dyn_CanvasScale();
    // Get instance field reference: public System.Single CanvasDistance
    [[deprecated("Use field access instead!")]] float& dyn_CanvasDistance();
    // Get instance field reference: private UnityEngine.Rect _gameObjectRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn__gameObjectRect();
    // Get instance field reference: private UnityEngine.Rect _overlayRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn__overlayRect();
    // Get instance field reference: private FusionGraph/Layouts _defaultLayout
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionGraph::Layouts& dyn__defaultLayout();
    // Get instance field reference: private System.Boolean _noTextOverlap
    [[deprecated("Use field access instead!")]] bool& dyn__noTextOverlap();
    // Get instance field reference: private System.Boolean _noGraphShader
    [[deprecated("Use field access instead!")]] bool& dyn__noGraphShader();
    // Get instance field reference: public System.Int32 GraphColumnCount
    [[deprecated("Use field access instead!")]] int& dyn_GraphColumnCount();
    // Get instance field reference: private System.Int32 _graphMaxWidth
    [[deprecated("Use field access instead!")]] int& dyn__graphMaxWidth();
    // Get instance field reference: private System.Boolean _enableObjectStats
    [[deprecated("Use field access instead!")]] bool& dyn__enableObjectStats();
    // Get instance field reference: private Fusion.NetworkObject _object
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject*& dyn__object();
    // Get instance field reference: private System.Int32 _objectTitleHeight
    [[deprecated("Use field access instead!")]] int& dyn__objectTitleHeight();
    // Get instance field reference: private System.Int32 _objectIdsHeight
    [[deprecated("Use field access instead!")]] int& dyn__objectIdsHeight();
    // Get instance field reference: private System.Int32 _objectMetersHeight
    [[deprecated("Use field access instead!")]] int& dyn__objectMetersHeight();
    // Get instance field reference: private Fusion.NetworkRunner _runner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn__runner();
    // Get instance field reference: public System.Boolean InitializeAllGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_InitializeAllGraphs();
    // Get instance field reference: public Fusion.SimulationModes ConnectTo
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn_ConnectTo();
    // Get instance field reference: private Fusion.Simulation/Statistics/ObjStatFlags _includedObjStats
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::ObjStatFlags& dyn__includedObjStats();
    // Get instance field reference: private Fusion.Simulation/Statistics/NetStatFlags _includedNetStats
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::NetStatFlags& dyn__includedNetStats();
    // Get instance field reference: private Fusion.Simulation/Statistics/SimStatFlags _includedSimStats
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::SimStatFlags& dyn__includedSimStats();
    // Get instance field reference: public System.Boolean AutoDestroy
    [[deprecated("Use field access instead!")]] bool& dyn_AutoDestroy();
    // Get instance field reference: public System.Boolean EnforceSingle
    [[deprecated("Use field access instead!")]] bool& dyn_EnforceSingle();
    // Get instance field reference: public System.String Guid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Guid();
    // Get instance field reference: private System.Boolean _modifyColors
    [[deprecated("Use field access instead!")]] bool& dyn__modifyColors();
    // Get instance field reference: private UnityEngine.Color _graphColorGood
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__graphColorGood();
    // Get instance field reference: private UnityEngine.Color _graphColorWarn
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__graphColorWarn();
    // Get instance field reference: private UnityEngine.Color _graphColorBad
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__graphColorBad();
    // Get instance field reference: private UnityEngine.Color _graphColorFlag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__graphColorFlag();
    // Get instance field reference: private UnityEngine.Color _fontColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__fontColor();
    // Get instance field reference: private UnityEngine.Color PanelColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_PanelColor();
    // Get instance field reference: private UnityEngine.Color _simDataBackColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__simDataBackColor();
    // Get instance field reference: private UnityEngine.Color _netDataBackColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__netDataBackColor();
    // Get instance field reference: private UnityEngine.Color _objDataBackColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__objDataBackColor();
    // Get instance field reference: private FusionGraph[] _simGraphs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FusionGraph*>& dyn__simGraphs();
    // Get instance field reference: private FusionGraph[] _objGraphs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FusionGraph*>& dyn__objGraphs();
    // Get instance field reference: private FusionGraph[] _netGraphs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FusionGraph*>& dyn__netGraphs();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.StatsInternal.IFusionStatsView> _foundViews
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::StatsInternal::IFusionStatsView*>*& dyn__foundViews();
    // Get instance field reference: private System.Collections.Generic.List`1<FusionGraph> _foundGraphs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::FusionGraph*>*& dyn__foundGraphs();
    // Get instance field reference: private UnityEngine.UI.Text _titleText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__titleText();
    // Get instance field reference: private UnityEngine.UI.Text _clearIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__clearIcon();
    // Get instance field reference: private UnityEngine.UI.Text _pauseIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__pauseIcon();
    // Get instance field reference: private UnityEngine.UI.Text _togglIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__togglIcon();
    // Get instance field reference: private UnityEngine.UI.Text _closeIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__closeIcon();
    // Get instance field reference: private UnityEngine.UI.Text _canvsIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__canvsIcon();
    // Get instance field reference: private UnityEngine.UI.Text _clearLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__clearLabel();
    // Get instance field reference: private UnityEngine.UI.Text _pauseLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__pauseLabel();
    // Get instance field reference: private UnityEngine.UI.Text _togglLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__togglLabel();
    // Get instance field reference: private UnityEngine.UI.Text _closeLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__closeLabel();
    // Get instance field reference: private UnityEngine.UI.Text _canvsLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__canvsLabel();
    // Get instance field reference: private UnityEngine.UI.Text _objectNameText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__objectNameText();
    // Get instance field reference: private UnityEngine.UI.GridLayoutGroup _graphGridLayoutGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::GridLayoutGroup*& dyn__graphGridLayoutGroup();
    // Get instance field reference: private UnityEngine.Canvas _canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__canvas();
    // Get instance field reference: private UnityEngine.RectTransform _canvasRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__canvasRT();
    // Get instance field reference: private UnityEngine.RectTransform _rootPanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rootPanelRT();
    // Get instance field reference: private UnityEngine.RectTransform _guidesRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__guidesRT();
    // Get instance field reference: private UnityEngine.RectTransform _headerRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__headerRT();
    // Get instance field reference: private UnityEngine.RectTransform _statsPanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__statsPanelRT();
    // Get instance field reference: private UnityEngine.RectTransform _graphsLayoutRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__graphsLayoutRT();
    // Get instance field reference: private UnityEngine.RectTransform _titleRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__titleRT();
    // Get instance field reference: private UnityEngine.RectTransform _buttonsRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__buttonsRT();
    // Get instance field reference: private UnityEngine.RectTransform _objectTitlePanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__objectTitlePanelRT();
    // Get instance field reference: private UnityEngine.RectTransform _objectIdsGroupRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__objectIdsGroupRT();
    // Get instance field reference: private UnityEngine.RectTransform _objectMetersPanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__objectMetersPanelRT();
    // Get instance field reference: private UnityEngine.RectTransform _clientIdPanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__clientIdPanelRT();
    // Get instance field reference: private UnityEngine.RectTransform _authorityPanelRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__authorityPanelRT();
    // Get instance field reference: private UnityEngine.UI.Button _titleButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__titleButton();
    // Get instance field reference: private UnityEngine.UI.Button _objctButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__objctButton();
    // Get instance field reference: private UnityEngine.UI.Button _clearButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__clearButton();
    // Get instance field reference: private UnityEngine.UI.Button _togglButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__togglButton();
    // Get instance field reference: private UnityEngine.UI.Button _pauseButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__pauseButton();
    // Get instance field reference: private UnityEngine.UI.Button _closeButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__closeButton();
    // Get instance field reference: private UnityEngine.UI.Button _canvsButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__canvsButton();
    // Get instance field reference: private UnityEngine.Font _font
    [[deprecated("Use field access instead!")]] ::UnityEngine::Font*& dyn__font();
    // Get instance field reference: private System.Boolean _hidden
    [[deprecated("Use field access instead!")]] bool& dyn__hidden();
    // Get instance field reference: private System.Boolean _paused
    [[deprecated("Use field access instead!")]] bool& dyn__paused();
    // Get instance field reference: private System.Int32 _layoutDirty
    [[deprecated("Use field access instead!")]] int& dyn__layoutDirty();
    // Get instance field reference: private System.Boolean _activeDirty
    [[deprecated("Use field access instead!")]] bool& dyn__activeDirty();
    // Get instance field reference: private System.Double _currentDrawTime
    [[deprecated("Use field access instead!")]] double& dyn__currentDrawTime();
    // Get instance field reference: private System.Double _delayDrawUntil
    [[deprecated("Use field access instead!")]] double& dyn__delayDrawUntil();
    // Get instance field reference: private System.String _previousObjectTitle
    [[deprecated("Use field access instead!")]] ::StringW& dyn__previousObjectTitle();
    // Get instance field reference: private System.Single _lastLayoutUpdate
    [[deprecated("Use field access instead!")]] float& dyn__lastLayoutUpdate();
    // static FusionStats CreateInternal(Fusion.NetworkRunner runner, FusionStats/DefaultLayouts layout, System.Nullable`1<Fusion.Simulation/Statistics/NetStatFlags> netStatsMask, System.Nullable`1<Fusion.Simulation/Statistics/SimStatFlags> simStatsMask)
    // Offset: 0x2952F50
    static ::GlobalNamespace::FusionStats* CreateInternal(::Fusion::NetworkRunner* runner, ::GlobalNamespace::FusionStats::DefaultLayouts layout, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags> netStatsMask, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags> simStatsMask);
    // static public FusionStats Create(UnityEngine.Transform parent, Fusion.NetworkRunner runner, System.Nullable`1<FusionStats/DefaultLayouts> screenLayout, System.Nullable`1<FusionStats/DefaultLayouts> objectLayout, System.Nullable`1<Fusion.Simulation/Statistics/NetStatFlags> netStatsMask, System.Nullable`1<Fusion.Simulation/Statistics/SimStatFlags> simStatsMask)
    // Offset: 0x2953018
    static ::GlobalNamespace::FusionStats* Create(::UnityEngine::Transform* parent, ::Fusion::NetworkRunner* runner, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts> screenLayout, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts> objectLayout, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags> netStatsMask, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags> simStatsMask);
    // static private System.Void ResetStatics()
    // Offset: 0x295364C
    static void ResetStatics();
    // static public Fusion.Simulation/Statistics/NetStatFlags get_DefaultNetStatsMask()
    // Offset: 0x2953700
    static ::Fusion::Simulation::Statistics::NetStatFlags get_DefaultNetStatsMask();
    // private System.Boolean get_ShowColorControls()
    // Offset: 0x2953708
    bool get_ShowColorControls();
    // private System.Boolean get_IsNotPlaying()
    // Offset: 0x2953778
    bool get_IsNotPlaying();
    // public FusionStats/StatCanvasTypes get_CanvasType()
    // Offset: 0x29537D4
    ::GlobalNamespace::FusionStats::StatCanvasTypes get_CanvasType();
    // public System.Void set_CanvasType(FusionStats/StatCanvasTypes value)
    // Offset: 0x29537DC
    void set_CanvasType(::GlobalNamespace::FusionStats::StatCanvasTypes value);
    // public System.Boolean get_ShowButtonLabels()
    // Offset: 0x295380C
    bool get_ShowButtonLabels();
    // public System.Void set_ShowButtonLabels(System.Boolean value)
    // Offset: 0x2953814
    void set_ShowButtonLabels(bool value);
    // public System.Int32 get_MaxHeaderHeight()
    // Offset: 0x2953838
    int get_MaxHeaderHeight();
    // public System.Void set_MaxHeaderHeight(System.Int32 value)
    // Offset: 0x2953840
    void set_MaxHeaderHeight(int value);
    // public UnityEngine.Rect get_GameObjectRect()
    // Offset: 0x2953860
    ::UnityEngine::Rect get_GameObjectRect();
    // public System.Void set_GameObjectRect(UnityEngine.Rect value)
    // Offset: 0x295386C
    void set_GameObjectRect(::UnityEngine::Rect value);
    // public UnityEngine.Rect get_OverlayRect()
    // Offset: 0x2953890
    ::UnityEngine::Rect get_OverlayRect();
    // public System.Void set_OverlayRect(UnityEngine.Rect value)
    // Offset: 0x295389C
    void set_OverlayRect(::UnityEngine::Rect value);
    // public FusionGraph/Layouts get_DefaultLayout()
    // Offset: 0x29538C0
    ::GlobalNamespace::FusionGraph::Layouts get_DefaultLayout();
    // public System.Void set_DefaultLayout(FusionGraph/Layouts value)
    // Offset: 0x29538C8
    void set_DefaultLayout(::GlobalNamespace::FusionGraph::Layouts value);
    // public System.Boolean get_NoTextOverlap()
    // Offset: 0x29538E8
    bool get_NoTextOverlap();
    // public System.Void set_NoTextOverlap(System.Boolean value)
    // Offset: 0x29538F0
    void set_NoTextOverlap(bool value);
    // public System.Boolean get_NoGraphShader()
    // Offset: 0x2953914
    bool get_NoGraphShader();
    // public System.Void set_NoGraphShader(System.Boolean value)
    // Offset: 0x295391C
    void set_NoGraphShader(bool value);
    // public System.Int32 get_GraphMaxWidth()
    // Offset: 0x2953940
    int get_GraphMaxWidth();
    // public System.Void set_GraphMaxWidth(System.Int32 value)
    // Offset: 0x2953948
    void set_GraphMaxWidth(int value);
    // public System.Boolean get_EnableObjectStats()
    // Offset: 0x2953968
    bool get_EnableObjectStats();
    // public System.Void set_EnableObjectStats(System.Boolean value)
    // Offset: 0x2953970
    void set_EnableObjectStats(bool value);
    // private System.Boolean get_ShowMissingNetObjWarning()
    // Offset: 0x2953994
    bool get_ShowMissingNetObjWarning();
    // public Fusion.NetworkObject get_Object()
    // Offset: 0x2953A18
    ::Fusion::NetworkObject* get_Object();
    // public System.Int32 get_ObjectTitleHeight()
    // Offset: 0x2953AC0
    int get_ObjectTitleHeight();
    // public System.Void set_ObjectTitleHeight(System.Int32 value)
    // Offset: 0x2953AC8
    void set_ObjectTitleHeight(int value);
    // public System.Int32 get_ObjectIdsHeight()
    // Offset: 0x2953AE8
    int get_ObjectIdsHeight();
    // public System.Void set_ObjectIdsHeight(System.Int32 value)
    // Offset: 0x2953AF0
    void set_ObjectIdsHeight(int value);
    // public System.Int32 get_ObjectMetersHeight()
    // Offset: 0x2953B10
    int get_ObjectMetersHeight();
    // public System.Void set_ObjectMetersHeight(System.Int32 value)
    // Offset: 0x2953B18
    void set_ObjectMetersHeight(int value);
    // public Fusion.NetworkRunner get_Runner()
    // Offset: 0x295168C
    ::Fusion::NetworkRunner* get_Runner();
    // public System.Void set_Runner(Fusion.NetworkRunner value)
    // Offset: 0x2953598
    void set_Runner(::Fusion::NetworkRunner* value);
    // public Fusion.Simulation/Statistics/ObjStatFlags get_IncludedObjectStats()
    // Offset: 0x2953F7C
    ::Fusion::Simulation::Statistics::ObjStatFlags get_IncludedObjectStats();
    // public System.Void set_IncludedObjectStats(Fusion.Simulation/Statistics/ObjStatFlags value)
    // Offset: 0x2953F84
    void set_IncludedObjectStats(::Fusion::Simulation::Statistics::ObjStatFlags value);
    // public Fusion.Simulation/Statistics/NetStatFlags get_IncludedNetStats()
    // Offset: 0x2953F94
    ::Fusion::Simulation::Statistics::NetStatFlags get_IncludedNetStats();
    // public System.Void set_IncludedNetStats(Fusion.Simulation/Statistics/NetStatFlags value)
    // Offset: 0x2953F9C
    void set_IncludedNetStats(::Fusion::Simulation::Statistics::NetStatFlags value);
    // public Fusion.Simulation/Statistics/SimStatFlags get_IncludedSimStats()
    // Offset: 0x2953FAC
    ::Fusion::Simulation::Statistics::SimStatFlags get_IncludedSimStats();
    // public System.Void set_IncludedSimStats(Fusion.Simulation/Statistics/SimStatFlags value)
    // Offset: 0x2953FB4
    void set_IncludedSimStats(::Fusion::Simulation::Statistics::SimStatFlags value);
    // public System.Boolean get_ModifyColors()
    // Offset: 0x2953FC4
    bool get_ModifyColors();
    // public UnityEngine.Color get_FontColor()
    // Offset: 0x2953FCC
    ::UnityEngine::Color get_FontColor();
    // public UnityEngine.Color get_GraphColorGood()
    // Offset: 0x2953FD8
    ::UnityEngine::Color get_GraphColorGood();
    // public UnityEngine.Color get_GraphColorWarn()
    // Offset: 0x2953FE4
    ::UnityEngine::Color get_GraphColorWarn();
    // public UnityEngine.Color get_GraphColorBad()
    // Offset: 0x2953FF0
    ::UnityEngine::Color get_GraphColorBad();
    // public UnityEngine.Color get_GraphColorFlag()
    // Offset: 0x2953FFC
    ::UnityEngine::Color get_GraphColorFlag();
    // public UnityEngine.Color get_SimDataBackColor()
    // Offset: 0x2954008
    ::UnityEngine::Color get_SimDataBackColor();
    // public UnityEngine.Color get_NetDataBackColor()
    // Offset: 0x295401C
    ::UnityEngine::Color get_NetDataBackColor();
    // public UnityEngine.Color get_ObjDataBackColor()
    // Offset: 0x2954030
    ::UnityEngine::Color get_ObjDataBackColor();
    // public UnityEngine.Rect get_CurrentRect()
    // Offset: 0x2954044
    ::UnityEngine::Rect get_CurrentRect();
    // private System.Void UpdateTitle()
    // Offset: 0x2953E9C
    void UpdateTitle();
    // private UnityEngine.Shader get_Shader()
    // Offset: 0x2954088
    ::UnityEngine::Shader* get_Shader();
    // private System.Void DirtyLayout(System.Int32 minimumRefreshes)
    // Offset: 0x29537F8
    void DirtyLayout(int minimumRefreshes);
    // private System.Void ResetInternal(System.Nullable`1<System.Boolean> enableObjectStats, System.Nullable`1<Fusion.Simulation/Statistics/NetStatFlags> netStatsMask, System.Nullable`1<Fusion.Simulation/Statistics/SimStatFlags> simStatsMask, System.Nullable`1<FusionStats/DefaultLayouts> objectLayout, System.Nullable`1<FusionStats/DefaultLayouts> screenLayout)
    // Offset: 0x29531F4
    void ResetInternal(::System::Nullable_1<bool> enableObjectStats, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags> netStatsMask, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags> simStatsMask, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts> objectLayout, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts> screenLayout);
    // private System.Void Awake()
    // Offset: 0x2954F94
    void Awake();
    // private System.Void Start()
    // Offset: 0x29552B4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x2955B50
    void OnDestroy();
    // private System.Void DestroyGraphs()
    // Offset: 0x2955C78
    void DestroyGraphs();
    // static public System.Boolean get_NewInputSystemFound()
    // Offset: 0x2955D24
    static bool get_NewInputSystemFound();
    // private System.Void Initialize()
    // Offset: 0x2955328
    void Initialize();
    // private System.Boolean get__graphsAreMissing()
    // Offset: 0x2955F48
    bool get__graphsAreMissing();
    // private System.Void GenerateGraphs()
    // Offset: 0x29542B4
    void GenerateGraphs();
    // private System.Void AssociateWithRunner(Fusion.NetworkRunner runner)
    // Offset: 0x2953C60
    void AssociateWithRunner(::Fusion::NetworkRunner* runner);
    // private System.Void DisassociateWithRunner(Fusion.NetworkRunner runner)
    // Offset: 0x2953B38
    void DisassociateWithRunner(::Fusion::NetworkRunner* runner);
    // private System.Void Pause()
    // Offset: 0x29560EC
    void Pause();
    // private System.Void Toggle()
    // Offset: 0x29563B0
    void Toggle();
    // private System.Void Clear()
    // Offset: 0x29566D0
    void Clear();
    // private System.Void ToggleCanvasType()
    // Offset: 0x29568C8
    void ToggleCanvasType();
    // private System.Void Close()
    // Offset: 0x2957638
    void Close();
    // private System.Void PingSelectObject()
    // Offset: 0x29576A4
    void PingSelectObject();
    // private System.Void PingSelectFusionStats()
    // Offset: 0x29576A8
    void PingSelectFusionStats();
    // private System.Void LateUpdate()
    // Offset: 0x29576AC
    void LateUpdate();
    // private System.Void RefreshObjectValues()
    // Offset: 0x2957E28
    void RefreshObjectValues();
    // public FusionGraph CreateGraph(Fusion.Simulation/Statistics/StatSourceTypes type, System.Int32 statId, UnityEngine.RectTransform parentRT)
    // Offset: 0x2955FA8
    ::GlobalNamespace::FusionGraph* CreateGraph(::Fusion::Simulation::Statistics::StatSourceTypes type, int statId, ::UnityEngine::RectTransform* parentRT);
    // private System.Void ReapplyEnabled()
    // Offset: 0x2957A3C
    void ReapplyEnabled();
    // private System.Void CalculateLayout()
    // Offset: 0x29568F4
    void CalculateLayout();
    // private System.Void ApplyDefaultLayout(FusionStats/DefaultLayouts defaults, System.Nullable`1<FusionStats/StatCanvasTypes> applyForCanvasType)
    // Offset: 0x29540E0
    void ApplyDefaultLayout(::GlobalNamespace::FusionStats::DefaultLayouts defaults, ::System::Nullable_1<::GlobalNamespace::FusionStats::StatCanvasTypes> applyForCanvasType);
    // public System.Void .ctor()
    // Offset: 0x2957F04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionStats* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionStats::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionStats*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2957FCC
    static void _cctor();
  }; // FusionStats
  #pragma pack(pop)
  static check_size<sizeof(FusionStats), 688 + sizeof(float)> __GlobalNamespace_FusionStatsSizeCheck;
  static_assert(sizeof(FusionStats) == 0x2B4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionStats::DefaultLayouts, "", "FusionStats/DefaultLayouts");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionStats::StatCanvasTypes, "", "FusionStats/StatCanvasTypes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::CreateInternal
// Il2CppName: CreateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionStats* (*)(::Fusion::NetworkRunner*, ::GlobalNamespace::FusionStats::DefaultLayouts, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags>, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags>)>(&GlobalNamespace::FusionStats::CreateInternal)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")->byval_arg;
    static auto* netStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStatFlags")})->byval_arg;
    static auto* simStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStatFlags")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "CreateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, layout, netStatsMask, simStatsMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionStats* (*)(::UnityEngine::Transform*, ::Fusion::NetworkRunner*, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts>, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts>, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags>, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags>)>(&GlobalNamespace::FusionStats::Create)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* screenLayout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")})->byval_arg;
    static auto* objectLayout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")})->byval_arg;
    static auto* netStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStatFlags")})->byval_arg;
    static auto* simStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStatFlags")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, runner, screenLayout, objectLayout, netStatsMask, simStatsMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::ResetStatics
// Il2CppName: ResetStatics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FusionStats::ResetStatics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "ResetStatics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_DefaultNetStatsMask
// Il2CppName: get_DefaultNetStatsMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::NetStatFlags (*)()>(&GlobalNamespace::FusionStats::get_DefaultNetStatsMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_DefaultNetStatsMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ShowColorControls
// Il2CppName: get_ShowColorControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ShowColorControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ShowColorControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_IsNotPlaying
// Il2CppName: get_IsNotPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_IsNotPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_IsNotPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_CanvasType
// Il2CppName: get_CanvasType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionStats::StatCanvasTypes (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_CanvasType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_CanvasType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_CanvasType
// Il2CppName: set_CanvasType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::GlobalNamespace::FusionStats::StatCanvasTypes)>(&GlobalNamespace::FusionStats::set_CanvasType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FusionStats/StatCanvasTypes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_CanvasType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ShowButtonLabels
// Il2CppName: get_ShowButtonLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ShowButtonLabels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ShowButtonLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_ShowButtonLabels
// Il2CppName: set_ShowButtonLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(bool)>(&GlobalNamespace::FusionStats::set_ShowButtonLabels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_ShowButtonLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_MaxHeaderHeight
// Il2CppName: get_MaxHeaderHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_MaxHeaderHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_MaxHeaderHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_MaxHeaderHeight
// Il2CppName: set_MaxHeaderHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::set_MaxHeaderHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_MaxHeaderHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GameObjectRect
// Il2CppName: get_GameObjectRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GameObjectRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GameObjectRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_GameObjectRect
// Il2CppName: set_GameObjectRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::UnityEngine::Rect)>(&GlobalNamespace::FusionStats::set_GameObjectRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_GameObjectRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_OverlayRect
// Il2CppName: get_OverlayRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_OverlayRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_OverlayRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_OverlayRect
// Il2CppName: set_OverlayRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::UnityEngine::Rect)>(&GlobalNamespace::FusionStats::set_OverlayRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_OverlayRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_DefaultLayout
// Il2CppName: get_DefaultLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionGraph::Layouts (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_DefaultLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_DefaultLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_DefaultLayout
// Il2CppName: set_DefaultLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::GlobalNamespace::FusionGraph::Layouts)>(&GlobalNamespace::FusionStats::set_DefaultLayout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FusionGraph/Layouts")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_DefaultLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_NoTextOverlap
// Il2CppName: get_NoTextOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_NoTextOverlap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_NoTextOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_NoTextOverlap
// Il2CppName: set_NoTextOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(bool)>(&GlobalNamespace::FusionStats::set_NoTextOverlap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_NoTextOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_NoGraphShader
// Il2CppName: get_NoGraphShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_NoGraphShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_NoGraphShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_NoGraphShader
// Il2CppName: set_NoGraphShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(bool)>(&GlobalNamespace::FusionStats::set_NoGraphShader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_NoGraphShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GraphMaxWidth
// Il2CppName: get_GraphMaxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GraphMaxWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GraphMaxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_GraphMaxWidth
// Il2CppName: set_GraphMaxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::set_GraphMaxWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_GraphMaxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_EnableObjectStats
// Il2CppName: get_EnableObjectStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_EnableObjectStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_EnableObjectStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_EnableObjectStats
// Il2CppName: set_EnableObjectStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(bool)>(&GlobalNamespace::FusionStats::set_EnableObjectStats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_EnableObjectStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ShowMissingNetObjWarning
// Il2CppName: get_ShowMissingNetObjWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ShowMissingNetObjWarning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ShowMissingNetObjWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_Object
// Il2CppName: get_Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ObjectTitleHeight
// Il2CppName: get_ObjectTitleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ObjectTitleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ObjectTitleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_ObjectTitleHeight
// Il2CppName: set_ObjectTitleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::set_ObjectTitleHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_ObjectTitleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ObjectIdsHeight
// Il2CppName: get_ObjectIdsHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ObjectIdsHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ObjectIdsHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_ObjectIdsHeight
// Il2CppName: set_ObjectIdsHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::set_ObjectIdsHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_ObjectIdsHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ObjectMetersHeight
// Il2CppName: get_ObjectMetersHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ObjectMetersHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ObjectMetersHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_ObjectMetersHeight
// Il2CppName: set_ObjectMetersHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::set_ObjectMetersHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_ObjectMetersHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_Runner
// Il2CppName: get_Runner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner* (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_Runner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_Runner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_Runner
// Il2CppName: set_Runner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionStats::set_Runner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_Runner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_IncludedObjectStats
// Il2CppName: get_IncludedObjectStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::ObjStatFlags (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_IncludedObjectStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_IncludedObjectStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_IncludedObjectStats
// Il2CppName: set_IncludedObjectStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::Simulation::Statistics::ObjStatFlags)>(&GlobalNamespace::FusionStats::set_IncludedObjectStats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/ObjStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_IncludedObjectStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_IncludedNetStats
// Il2CppName: get_IncludedNetStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::NetStatFlags (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_IncludedNetStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_IncludedNetStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_IncludedNetStats
// Il2CppName: set_IncludedNetStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::Simulation::Statistics::NetStatFlags)>(&GlobalNamespace::FusionStats::set_IncludedNetStats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_IncludedNetStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_IncludedSimStats
// Il2CppName: get_IncludedSimStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::SimStatFlags (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_IncludedSimStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_IncludedSimStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::set_IncludedSimStats
// Il2CppName: set_IncludedSimStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::Simulation::Statistics::SimStatFlags)>(&GlobalNamespace::FusionStats::set_IncludedSimStats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "set_IncludedSimStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ModifyColors
// Il2CppName: get_ModifyColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ModifyColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ModifyColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_FontColor
// Il2CppName: get_FontColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_FontColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_FontColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GraphColorGood
// Il2CppName: get_GraphColorGood
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GraphColorGood)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GraphColorGood", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GraphColorWarn
// Il2CppName: get_GraphColorWarn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GraphColorWarn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GraphColorWarn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GraphColorBad
// Il2CppName: get_GraphColorBad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GraphColorBad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GraphColorBad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_GraphColorFlag
// Il2CppName: get_GraphColorFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_GraphColorFlag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_GraphColorFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_SimDataBackColor
// Il2CppName: get_SimDataBackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_SimDataBackColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_SimDataBackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_NetDataBackColor
// Il2CppName: get_NetDataBackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_NetDataBackColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_NetDataBackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_ObjDataBackColor
// Il2CppName: get_ObjDataBackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_ObjDataBackColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_ObjDataBackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_CurrentRect
// Il2CppName: get_CurrentRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_CurrentRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_CurrentRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::UpdateTitle
// Il2CppName: UpdateTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::UpdateTitle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "UpdateTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_Shader
// Il2CppName: get_Shader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get_Shader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_Shader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::DirtyLayout
// Il2CppName: DirtyLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(int)>(&GlobalNamespace::FusionStats::DirtyLayout)> {
  static const MethodInfo* get() {
    static auto* minimumRefreshes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "DirtyLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minimumRefreshes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::ResetInternal
// Il2CppName: ResetInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::System::Nullable_1<bool>, ::System::Nullable_1<::Fusion::Simulation::Statistics::NetStatFlags>, ::System::Nullable_1<::Fusion::Simulation::Statistics::SimStatFlags>, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts>, ::System::Nullable_1<::GlobalNamespace::FusionStats::DefaultLayouts>)>(&GlobalNamespace::FusionStats::ResetInternal)> {
  static const MethodInfo* get() {
    static auto* enableObjectStats = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* netStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStatFlags")})->byval_arg;
    static auto* simStatsMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStatFlags")})->byval_arg;
    static auto* objectLayout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")})->byval_arg;
    static auto* screenLayout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "ResetInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableObjectStats, netStatsMask, simStatsMask, objectLayout, screenLayout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::DestroyGraphs
// Il2CppName: DestroyGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::DestroyGraphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "DestroyGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get_NewInputSystemFound
// Il2CppName: get_NewInputSystemFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::FusionStats::get_NewInputSystemFound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get_NewInputSystemFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::get__graphsAreMissing
// Il2CppName: get__graphsAreMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::get__graphsAreMissing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "get__graphsAreMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::GenerateGraphs
// Il2CppName: GenerateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::GenerateGraphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "GenerateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::AssociateWithRunner
// Il2CppName: AssociateWithRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionStats::AssociateWithRunner)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "AssociateWithRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::DisassociateWithRunner
// Il2CppName: DisassociateWithRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionStats::DisassociateWithRunner)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "DisassociateWithRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::ToggleCanvasType
// Il2CppName: ToggleCanvasType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::ToggleCanvasType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "ToggleCanvasType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::PingSelectObject
// Il2CppName: PingSelectObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::PingSelectObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "PingSelectObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::PingSelectFusionStats
// Il2CppName: PingSelectFusionStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::PingSelectFusionStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "PingSelectFusionStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::RefreshObjectValues
// Il2CppName: RefreshObjectValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::RefreshObjectValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "RefreshObjectValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::CreateGraph
// Il2CppName: CreateGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionGraph* (GlobalNamespace::FusionStats::*)(::Fusion::Simulation::Statistics::StatSourceTypes, int, ::UnityEngine::RectTransform*)>(&GlobalNamespace::FusionStats::CreateGraph)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/StatSourceTypes")->byval_arg;
    static auto* statId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentRT = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "CreateGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, statId, parentRT});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::ReapplyEnabled
// Il2CppName: ReapplyEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::ReapplyEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "ReapplyEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::CalculateLayout
// Il2CppName: CalculateLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)()>(&GlobalNamespace::FusionStats::CalculateLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "CalculateLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::ApplyDefaultLayout
// Il2CppName: ApplyDefaultLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionStats::*)(::GlobalNamespace::FusionStats::DefaultLayouts, ::System::Nullable_1<::GlobalNamespace::FusionStats::StatCanvasTypes>)>(&GlobalNamespace::FusionStats::ApplyDefaultLayout)> {
  static const MethodInfo* get() {
    static auto* defaults = &::il2cpp_utils::GetClassFromName("", "FusionStats/DefaultLayouts")->byval_arg;
    static auto* applyForCanvasType = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "FusionStats/StatCanvasTypes")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), "ApplyDefaultLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaults, applyForCanvasType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FusionStats::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FusionStats::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionStats*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
