// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UmbrellaItem
  class UmbrellaItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UmbrellaItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UmbrellaItem*, "", "UmbrellaItem");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: UmbrellaItem
  // [TokenAttribute] Offset: FFFFFFFF
  class UmbrellaItem : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::UmbrellaItem::UmbrellaStates
    struct UmbrellaStates;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UmbrellaItem/UmbrellaStates
    // [TokenAttribute] Offset: FFFFFFFF
    struct UmbrellaStates/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UmbrellaStates
      constexpr UmbrellaStates(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UmbrellaItem/UmbrellaStates UmbrellaOpen
      static constexpr const int UmbrellaOpen = 1;
      // Get static field: static public UmbrellaItem/UmbrellaStates UmbrellaOpen
      static ::GlobalNamespace::UmbrellaItem::UmbrellaStates _get_UmbrellaOpen();
      // Set static field: static public UmbrellaItem/UmbrellaStates UmbrellaOpen
      static void _set_UmbrellaOpen(::GlobalNamespace::UmbrellaItem::UmbrellaStates value);
      // static field const value: static public UmbrellaItem/UmbrellaStates UmbrellaClosed
      static constexpr const int UmbrellaClosed = 2;
      // Get static field: static public UmbrellaItem/UmbrellaStates UmbrellaClosed
      static ::GlobalNamespace::UmbrellaItem::UmbrellaStates _get_UmbrellaClosed();
      // Set static field: static public UmbrellaItem/UmbrellaStates UmbrellaClosed
      static void _set_UmbrellaClosed(::GlobalNamespace::UmbrellaItem::UmbrellaStates value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UmbrellaItem/UmbrellaStates
    #pragma pack(pop)
    static check_size<sizeof(UmbrellaItem::UmbrellaStates), 0 + sizeof(int)> __GlobalNamespace_UmbrellaItem_UmbrellaStatesSizeCheck;
    static_assert(sizeof(UmbrellaItem::UmbrellaStates) == 0x4);
    public:
    // public UnityEngine.Transform[] umbrellaBones
    // Size: 0x8
    // Offset: 0x2D0
    ::ArrayW<::UnityEngine::Transform*> umbrellaBones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Quaternion[] startingAngles
    // Size: 0x8
    // Offset: 0x2D8
    ::ArrayW<::UnityEngine::Quaternion> startingAngles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public UnityEngine.Quaternion[] endingAngles
    // Size: 0x8
    // Offset: 0x2E0
    ::ArrayW<::UnityEngine::Quaternion> endingAngles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // private UmbrellaItem umbrellaToCopy
    // Size: 0x8
    // Offset: 0x2E8
    ::GlobalNamespace::UmbrellaItem* umbrellaToCopy;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UmbrellaItem*) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x2F0
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Collider umbrellaRainDestroyTrigger
    // Size: 0x8
    // Offset: 0x2F8
    ::UnityEngine::Collider* umbrellaRainDestroyTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public UnityEngine.GameObject[] gameObjectsActivatedOnOpen
    // Size: 0x8
    // Offset: 0x300
    ::ArrayW<::UnityEngine::GameObject*> gameObjectsActivatedOnOpen;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.ParticleSystem[] particlesEmitOnOpen
    // Size: 0x8
    // Offset: 0x308
    ::ArrayW<::UnityEngine::ParticleSystem*> particlesEmitOnOpen;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // public System.Int32 SoundIdOpen
    // Size: 0x4
    // Offset: 0x310
    int SoundIdOpen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SoundIdClose
    // Size: 0x4
    // Offset: 0x314
    int SoundIdClose;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UmbrellaItem/UmbrellaStates previousUmbrellaState
    // Size: 0x4
    // Offset: 0x318
    ::GlobalNamespace::UmbrellaItem::UmbrellaStates previousUmbrellaState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UmbrellaItem::UmbrellaStates) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform[] umbrellaBones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_umbrellaBones();
    // Get instance field reference: public UnityEngine.Quaternion[] startingAngles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_startingAngles();
    // Get instance field reference: public UnityEngine.Quaternion[] endingAngles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_endingAngles();
    // Get instance field reference: private UmbrellaItem umbrellaToCopy
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem*& dyn_umbrellaToCopy();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public UnityEngine.Collider umbrellaRainDestroyTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_umbrellaRainDestroyTrigger();
    // Get instance field reference: public UnityEngine.GameObject[] gameObjectsActivatedOnOpen
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjectsActivatedOnOpen();
    // Get instance field reference: public UnityEngine.ParticleSystem[] particlesEmitOnOpen
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_particlesEmitOnOpen();
    // Get instance field reference: public System.Int32 SoundIdOpen
    [[deprecated("Use field access instead!")]] int& dyn_SoundIdOpen();
    // Get instance field reference: public System.Int32 SoundIdClose
    [[deprecated("Use field access instead!")]] int& dyn_SoundIdClose();
    // Get instance field reference: private UmbrellaItem/UmbrellaStates previousUmbrellaState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem::UmbrellaStates& dyn_previousUmbrellaState();
    // protected System.Void OnUmbrellaStateChanged()
    // Offset: 0x26CBF64
    void OnUmbrellaStateChanged();
    // protected System.Void UpdateAngles(UnityEngine.Quaternion[] toAngles, System.Single t)
    // Offset: 0x26CC06C
    void UpdateAngles(::ArrayW<::UnityEngine::Quaternion> toAngles, float t);
    // protected System.Void GenerateAngles()
    // Offset: 0x26CC12C
    void GenerateAngles();
    // protected override System.Void Start()
    // Offset: 0x26CBB48
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // public override System.Void OnActivate()
    // Offset: 0x26CBB54
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public override System.Void OnEnable()
    // Offset: 0x26CBD30
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26CBD54
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Void ResetToDefaultState()
    // Offset: 0x26CBDE8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::ResetToDefaultState()
    void ResetToDefaultState();
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26CBE98
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26CBEF4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public override System.Boolean CanActivate()
    // Offset: 0x26CC278
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanActivate()
    bool CanActivate();
    // public override System.Boolean CanDeactivate()
    // Offset: 0x26CC280
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanDeactivate()
    bool CanDeactivate();
    // public System.Void .ctor()
    // Offset: 0x26CC288
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UmbrellaItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UmbrellaItem*, creationType>()));
    }
  }; // UmbrellaItem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UmbrellaItem::UmbrellaStates, "", "UmbrellaItem/UmbrellaStates");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnUmbrellaStateChanged
// Il2CppName: OnUmbrellaStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnUmbrellaStateChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnUmbrellaStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::UpdateAngles
// Il2CppName: UpdateAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)(::ArrayW<::UnityEngine::Quaternion>, float)>(&GlobalNamespace::UmbrellaItem::UpdateAngles)> {
  static const MethodInfo* get() {
    static auto* toAngles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "UpdateAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toAngles, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::GenerateAngles
// Il2CppName: GenerateAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::GenerateAngles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "GenerateAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UmbrellaItem::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::UmbrellaItem::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
