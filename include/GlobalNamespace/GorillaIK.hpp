// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaIK
  class GorillaIK;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaIK);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIK*, "", "GorillaIK");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xEC
  #pragma pack(push, 1)
  // Autogenerated type: GorillaIK
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaIK : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform headBone
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* headBone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftUpperArm
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* leftUpperArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftLowerArm
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* leftLowerArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHand
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightUpperArm
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* rightUpperArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightLowerArm
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* rightLowerArm;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHand
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform targetLeft
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* targetLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform targetRight
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* targetRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform targetHead
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* targetHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Quaternion initialUpperLeft
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Quaternion initialUpperLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion initialLowerLeft
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion initialLowerLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion initialUpperRight
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Quaternion initialUpperRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion initialLowerRight
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Quaternion initialLowerRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion newRotationUpper
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Quaternion newRotationUpper;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion newRotationLower
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Quaternion newRotationLower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Single dU
    // Size: 0x4
    // Offset: 0xD0
    float dU;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dL
    // Size: 0x4
    // Offset: 0xD4
    float dL;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dMax
    // Size: 0x4
    // Offset: 0xD8
    float dMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean testInEditor
    // Size: 0x1
    // Offset: 0xDC
    bool testInEditor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reset
    // Size: 0x1
    // Offset: 0xDD
    bool reset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testDefineRot
    // Size: 0x1
    // Offset: 0xDE
    bool testDefineRot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean moveOnce
    // Size: 0x1
    // Offset: 0xDF
    bool moveOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single eps
    // Size: 0x4
    // Offset: 0xE0
    float eps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single upperArmAngle
    // Size: 0x4
    // Offset: 0xE4
    float upperArmAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single elbowAngle
    // Size: 0x4
    // Offset: 0xE8
    float elbowAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform headBone
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headBone();
    // Get instance field reference: public UnityEngine.Transform leftUpperArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftUpperArm();
    // Get instance field reference: public UnityEngine.Transform leftLowerArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftLowerArm();
    // Get instance field reference: public UnityEngine.Transform leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHand();
    // Get instance field reference: public UnityEngine.Transform rightUpperArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightUpperArm();
    // Get instance field reference: public UnityEngine.Transform rightLowerArm
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightLowerArm();
    // Get instance field reference: public UnityEngine.Transform rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHand();
    // Get instance field reference: public UnityEngine.Transform targetLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetLeft();
    // Get instance field reference: public UnityEngine.Transform targetRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetRight();
    // Get instance field reference: public UnityEngine.Transform targetHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetHead();
    // Get instance field reference: public UnityEngine.Quaternion initialUpperLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialUpperLeft();
    // Get instance field reference: public UnityEngine.Quaternion initialLowerLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialLowerLeft();
    // Get instance field reference: public UnityEngine.Quaternion initialUpperRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialUpperRight();
    // Get instance field reference: public UnityEngine.Quaternion initialLowerRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialLowerRight();
    // Get instance field reference: public UnityEngine.Quaternion newRotationUpper
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_newRotationUpper();
    // Get instance field reference: public UnityEngine.Quaternion newRotationLower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_newRotationLower();
    // Get instance field reference: public System.Single dU
    [[deprecated("Use field access instead!")]] float& dyn_dU();
    // Get instance field reference: public System.Single dL
    [[deprecated("Use field access instead!")]] float& dyn_dL();
    // Get instance field reference: public System.Single dMax
    [[deprecated("Use field access instead!")]] float& dyn_dMax();
    // Get instance field reference: public System.Boolean testInEditor
    [[deprecated("Use field access instead!")]] bool& dyn_testInEditor();
    // Get instance field reference: public System.Boolean reset
    [[deprecated("Use field access instead!")]] bool& dyn_reset();
    // Get instance field reference: public System.Boolean testDefineRot
    [[deprecated("Use field access instead!")]] bool& dyn_testDefineRot();
    // Get instance field reference: public System.Boolean moveOnce
    [[deprecated("Use field access instead!")]] bool& dyn_moveOnce();
    // Get instance field reference: public System.Single eps
    [[deprecated("Use field access instead!")]] float& dyn_eps();
    // Get instance field reference: public System.Single upperArmAngle
    [[deprecated("Use field access instead!")]] float& dyn_upperArmAngle();
    // Get instance field reference: public System.Single elbowAngle
    [[deprecated("Use field access instead!")]] float& dyn_elbowAngle();
    // private System.Void Awake()
    // Offset: 0x270D9C8
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x270DBDC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x270DCEC
    void OnDisable();
    // private System.Void ArmIK(ref UnityEngine.Transform upperArm, ref UnityEngine.Transform lowerArm, ref UnityEngine.Transform hand, UnityEngine.Quaternion initRotUpper, UnityEngine.Quaternion initRotLower, UnityEngine.Transform target)
    // Offset: 0x270DDAC
    void ArmIK(ByRef<::UnityEngine::Transform*> upperArm, ByRef<::UnityEngine::Transform*> lowerArm, ByRef<::UnityEngine::Transform*> hand, ::UnityEngine::Quaternion initRotUpper, ::UnityEngine::Quaternion initRotLower, ::UnityEngine::Transform* target);
    // public System.Void .ctor()
    // Offset: 0x270EB00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaIK* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaIK::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaIK*, creationType>()));
    }
  }; // GorillaIK
  #pragma pack(pop)
  static check_size<sizeof(GorillaIK), 232 + sizeof(float)> __GlobalNamespace_GorillaIKSizeCheck;
  static_assert(sizeof(GorillaIK) == 0xEC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaIK::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIK::*)()>(&GlobalNamespace::GorillaIK::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIK*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIK::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIK::*)()>(&GlobalNamespace::GorillaIK::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIK*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIK::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIK::*)()>(&GlobalNamespace::GorillaIK::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIK*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIK::ArmIK
// Il2CppName: ArmIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIK::*)(ByRef<::UnityEngine::Transform*>, ByRef<::UnityEngine::Transform*>, ByRef<::UnityEngine::Transform*>, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ::UnityEngine::Transform*)>(&GlobalNamespace::GorillaIK::ArmIK)> {
  static const MethodInfo* get() {
    static auto* upperArm = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* lowerArm = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* initRotUpper = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* initRotLower = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIK*), "ArmIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{upperArm, lowerArm, hand, initRotUpper, initRotLower, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIK::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
