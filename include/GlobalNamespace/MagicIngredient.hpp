// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MagicIngredientType
  class MagicIngredientType;
  // Forward declaring type: WorldShareableItem
  class WorldShareableItem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MagicIngredient
  class MagicIngredient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MagicIngredient);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicIngredient*, "", "MagicIngredient");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: MagicIngredient
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  class MagicIngredient : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // public MagicIngredientType IngredientTypeSO
    // Size: 0x8
    // Offset: 0x2D0
    ::GlobalNamespace::MagicIngredientType* IngredientTypeSO;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicIngredientType*) == 0x8);
    // public UnityEngine.Transform rootParent
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::Transform* rootParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private WorldShareableItem item
    // Size: 0x8
    // Offset: 0x2E0
    ::GlobalNamespace::WorldShareableItem* item;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldShareableItem*) == 0x8);
    // private UnityEngine.Transform grabPtInitParent
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::Transform* grabPtInitParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public MagicIngredientType IngredientTypeSO
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicIngredientType*& dyn_IngredientTypeSO();
    // Get instance field reference: public UnityEngine.Transform rootParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rootParent();
    // Get instance field reference: private WorldShareableItem item
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& dyn_item();
    // Get instance field reference: private UnityEngine.Transform grabPtInitParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_grabPtInitParent();
    // private System.Void ReParent()
    // Offset: 0x2728E6C
    void ReParent();
    // public System.Void Disable()
    // Offset: 0x2728ED4
    void Disable();
    // public override System.Void OnSpawn()
    // Offset: 0x2728E20
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public System.Void .ctor()
    // Offset: 0x2728F8C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MagicIngredient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicIngredient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MagicIngredient*, creationType>()));
    }
  }; // MagicIngredient
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MagicIngredient::ReParent
// Il2CppName: ReParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicIngredient::*)()>(&GlobalNamespace::MagicIngredient::ReParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicIngredient*), "ReParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicIngredient::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicIngredient::*)()>(&GlobalNamespace::MagicIngredient::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicIngredient*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicIngredient::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicIngredient::*)()>(&GlobalNamespace::MagicIngredient::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicIngredient*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicIngredient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
