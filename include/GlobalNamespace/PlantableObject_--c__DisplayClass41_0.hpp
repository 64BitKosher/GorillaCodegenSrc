// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlantableObject
#include "GlobalNamespace/PlantableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0*, "", "PlantableObject/<>c__DisplayClass41_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlantableObject/<>c__DisplayClass41_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlantableObject::$$c__DisplayClass41_0 : public ::Il2CppObject {
    public:
    public:
    // public Photon.Realtime.Player toPlayer
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* toPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public PlantableObject <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PlantableObject* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlantableObject*) == 0x8);
    // public System.Action`1<UnityEngine.Color> <>9__1
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::UnityEngine::Color>* $$9__1;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    public:
    // Get instance field reference: public Photon.Realtime.Player toPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_toPlayer();
    // Get instance field reference: public PlantableObject <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlantableObject*& dyn_$$4__this();
    // Get instance field reference: public System.Action`1<UnityEngine.Color> <>9__1
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& dyn_$$9__1();
    // public System.Void .ctor()
    // Offset: 0x26BD6E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlantableObject::$$c__DisplayClass41_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlantableObject::$$c__DisplayClass41_0*, creationType>()));
    }
    // System.Void <OnOwnershipTransferred>b__0()
    // Offset: 0x26BDABC
    void $OnOwnershipTransferred$b__0();
    // System.Void <OnOwnershipTransferred>b__1(UnityEngine.Color color1)
    // Offset: 0x26BDBD4
    void $OnOwnershipTransferred$b__1(::UnityEngine::Color color1);
  }; // PlantableObject/<>c__DisplayClass41_0
  #pragma pack(pop)
  static check_size<sizeof(PlantableObject::$$c__DisplayClass41_0), 32 + sizeof(::System::Action_1<::UnityEngine::Color>*)> __GlobalNamespace_PlantableObject_$$c__DisplayClass41_0SizeCheck;
  static_assert(sizeof(PlantableObject::$$c__DisplayClass41_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__0
// Il2CppName: <OnOwnershipTransferred>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::*)()>(&GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlantableObject::$$c__DisplayClass41_0*), "<OnOwnershipTransferred>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__1
// Il2CppName: <OnOwnershipTransferred>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::*)(::UnityEngine::Color)>(&GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__1)> {
  static const MethodInfo* get() {
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlantableObject::$$c__DisplayClass41_0*), "<OnOwnershipTransferred>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color1});
  }
};
