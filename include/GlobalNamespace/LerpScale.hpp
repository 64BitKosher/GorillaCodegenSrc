// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LerpComponent
#include "GlobalNamespace/LerpComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LerpScale
  class LerpScale;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LerpScale);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LerpScale*, "", "LerpScale");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: LerpScale
  // [TokenAttribute] Offset: FFFFFFFF
  class LerpScale : public ::GlobalNamespace::LerpComponent {
    public:
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 start
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 end
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 current
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 current;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: current and: scaleCurve
    char __padding3[0x4] = {};
    // private UnityEngine.AnimationCurve scaleCurve
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AnimationCurve* scaleCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public UnityEngine.Vector3 start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_start();
    // Get instance field reference: public UnityEngine.Vector3 end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_end();
    // Get instance field reference: public UnityEngine.Vector3 current
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_current();
    // Get instance field reference: private UnityEngine.AnimationCurve scaleCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_scaleCurve();
    // protected override System.Void OnLerp(System.Single t)
    // Offset: 0x274EA48
    // Implemented from: LerpComponent
    // Base method: System.Void LerpComponent::OnLerp(System.Single t)
    void OnLerp(float t);
    // public System.Void .ctor()
    // Offset: 0x274EB50
    // Implemented from: LerpComponent
    // Base method: System.Void LerpComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LerpScale* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LerpScale*, creationType>()));
    }
  }; // LerpScale
  #pragma pack(pop)
  static check_size<sizeof(LerpScale), 112 + sizeof(::UnityEngine::AnimationCurve*)> __GlobalNamespace_LerpScaleSizeCheck;
  static_assert(sizeof(LerpScale) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LerpScale::OnLerp
// Il2CppName: OnLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LerpScale::*)(float)>(&GlobalNamespace::LerpScale::OnLerp)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LerpScale*), "OnLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LerpScale::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
