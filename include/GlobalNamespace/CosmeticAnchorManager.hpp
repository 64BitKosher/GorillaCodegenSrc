// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CosmeticAnchors
  class CosmeticAnchors;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CosmeticAnchorManager
  class CosmeticAnchorManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CosmeticAnchorManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CosmeticAnchorManager*, "", "CosmeticAnchorManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: CosmeticAnchorManager
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticAnchorManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public CosmeticAnchorManager instance
    static ::GlobalNamespace::CosmeticAnchorManager* _get_instance();
    // Set static field: static public CosmeticAnchorManager instance
    static void _set_instance(::GlobalNamespace::CosmeticAnchorManager* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static public System.Collections.Generic.List`1<CosmeticAnchors> allAnchors
    static ::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticAnchors*>* _get_allAnchors();
    // Set static field: static public System.Collections.Generic.List`1<CosmeticAnchors> allAnchors
    static void _set_allAnchors(::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticAnchors*>* value);
    // protected System.Void Awake()
    // Offset: 0x26B0200
    void Awake();
    // static public System.Void CreateManager()
    // Offset: 0x26B03DC
    static void CreateManager();
    // static private System.Void SetInstance(CosmeticAnchorManager manager)
    // Offset: 0x26B02F8
    static void SetInstance(::GlobalNamespace::CosmeticAnchorManager* manager);
    // static public System.Void RegisterCosmeticAnchor(CosmeticAnchors cA)
    // Offset: 0x26B049C
    static void RegisterCosmeticAnchor(::GlobalNamespace::CosmeticAnchors* cA);
    // static public System.Void UnregisterCosmeticAnchor(CosmeticAnchors cA)
    // Offset: 0x26B06CC
    static void UnregisterCosmeticAnchor(::GlobalNamespace::CosmeticAnchors* cA);
    // public System.Void Update()
    // Offset: 0x26B07E8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26B0C94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticAnchorManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticAnchorManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26B0C9C
    static void _cctor();
  }; // CosmeticAnchorManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticAnchorManager::*)()>(&GlobalNamespace::CosmeticAnchorManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::CreateManager
// Il2CppName: CreateManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CosmeticAnchorManager::CreateManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "CreateManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::SetInstance
// Il2CppName: SetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::CosmeticAnchorManager*)>(&GlobalNamespace::CosmeticAnchorManager::SetInstance)> {
  static const MethodInfo* get() {
    static auto* manager = &::il2cpp_utils::GetClassFromName("", "CosmeticAnchorManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "SetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manager});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::RegisterCosmeticAnchor
// Il2CppName: RegisterCosmeticAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::CosmeticAnchors*)>(&GlobalNamespace::CosmeticAnchorManager::RegisterCosmeticAnchor)> {
  static const MethodInfo* get() {
    static auto* cA = &::il2cpp_utils::GetClassFromName("", "CosmeticAnchors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "RegisterCosmeticAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cA});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::UnregisterCosmeticAnchor
// Il2CppName: UnregisterCosmeticAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::CosmeticAnchors*)>(&GlobalNamespace::CosmeticAnchorManager::UnregisterCosmeticAnchor)> {
  static const MethodInfo* get() {
    static auto* cA = &::il2cpp_utils::GetClassFromName("", "CosmeticAnchors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "UnregisterCosmeticAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cA});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticAnchorManager::*)()>(&GlobalNamespace::CosmeticAnchorManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CosmeticAnchorManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CosmeticAnchorManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticAnchorManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
