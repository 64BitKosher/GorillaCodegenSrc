// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandTransformFollowOffest
  class HandTransformFollowOffest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandTransformFollowOffest);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandTransformFollowOffest*, "", "HandTransformFollowOffest");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HandTransformFollowOffest
  // [TokenAttribute] Offset: FFFFFFFF
  class HandTransformFollowOffest : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Transform followTransform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* followTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform[] targetTransforms
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Transform*> targetTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // UnityEngine.Vector3 positionOffset
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Quaternion rotationOffset
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: UnityEngine.Transform followTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_followTransform();
    // Get instance field reference: private UnityEngine.Transform[] targetTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_targetTransforms();
    // Get instance field reference: UnityEngine.Vector3 positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_positionOffset();
    // Get instance field reference: UnityEngine.Quaternion rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotationOffset();
    // Get instance field reference: private UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: private UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // System.Void UpdatePositionRotation()
    // Offset: 0x26EFDD4
    void UpdatePositionRotation();
    // public System.Void .ctor()
    // Offset: 0x26F0004
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandTransformFollowOffest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandTransformFollowOffest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandTransformFollowOffest*, creationType>()));
    }
  }; // HandTransformFollowOffest
  #pragma pack(pop)
  static check_size<sizeof(HandTransformFollowOffest), 72 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_HandTransformFollowOffestSizeCheck;
  static_assert(sizeof(HandTransformFollowOffest) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandTransformFollowOffest::UpdatePositionRotation
// Il2CppName: UpdatePositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandTransformFollowOffest::*)()>(&GlobalNamespace::HandTransformFollowOffest::UpdatePositionRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandTransformFollowOffest*), "UpdatePositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandTransformFollowOffest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
