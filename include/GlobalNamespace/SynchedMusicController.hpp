// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: SyncedSongLayerInfo because it is already included!
  // Skipping declaration: AudioSourcePickMode because it is already included!
  // Forward declaring type: GorillaPressableButton
  class GorillaPressableButton;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SynchedMusicController
  class SynchedMusicController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SynchedMusicController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SynchedMusicController*, "", "SynchedMusicController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: SynchedMusicController
  // [TokenAttribute] Offset: FFFFFFFF
  class SynchedMusicController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SynchedMusicController::SyncedSongInfo
    struct SyncedSongInfo;
    // Nested type: ::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo
    struct SyncedSongLayerInfo;
    // Nested type: ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode
    struct AudioSourcePickMode;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SynchedMusicController/SyncedSongInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct SyncedSongInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public SynchedMusicController/SyncedSongLayerInfo[] songLayers
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo> songLayers;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>) == 0x8);
      public:
      // Creating value type constructor for type: SyncedSongInfo
      constexpr SyncedSongInfo(::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo> songLayers_ = ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>(static_cast<void*>(nullptr))) noexcept : songLayers{songLayers_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>
      constexpr operator ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>() const noexcept {
        return songLayers;
      }
      // Get instance field reference: public SynchedMusicController/SyncedSongLayerInfo[] songLayers
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>& dyn_songLayers();
    }; // SynchedMusicController/SyncedSongInfo
    #pragma pack(pop)
    static check_size<sizeof(SynchedMusicController::SyncedSongInfo), 0 + sizeof(::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo>)> __GlobalNamespace_SynchedMusicController_SyncedSongInfoSizeCheck;
    static_assert(sizeof(SynchedMusicController::SyncedSongInfo) == 0x8);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SynchedMusicController/SyncedSongLayerInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct SyncedSongLayerInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.AudioClip audioClip
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::AudioClip* audioClip;
      // Field size check
      static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
      // public SynchedMusicController/AudioSourcePickMode audioSourcePickMode
      // Size: 0x4
      // Offset: 0x8
      ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode audioSourcePickMode;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::SynchedMusicController::AudioSourcePickMode) == 0x4);
      // Padding between fields: audioSourcePickMode and: audioSources
      char __padding1[0x4] = {};
      // public UnityEngine.AudioSource[] audioSources
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::UnityEngine::AudioSource*> audioSources;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
      public:
      // Creating value type constructor for type: SyncedSongLayerInfo
      constexpr SyncedSongLayerInfo(::UnityEngine::AudioClip* audioClip_ = {}, ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode audioSourcePickMode_ = {}, ::ArrayW<::UnityEngine::AudioSource*> audioSources_ = ::ArrayW<::UnityEngine::AudioSource*>(static_cast<void*>(nullptr))) noexcept : audioClip{audioClip_}, audioSourcePickMode{audioSourcePickMode_}, audioSources{audioSources_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.AudioClip audioClip
      [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_audioClip();
      // Get instance field reference: public SynchedMusicController/AudioSourcePickMode audioSourcePickMode
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode& dyn_audioSourcePickMode();
      // Get instance field reference: public UnityEngine.AudioSource[] audioSources
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_audioSources();
    }; // SynchedMusicController/SyncedSongLayerInfo
    #pragma pack(pop)
    static check_size<sizeof(SynchedMusicController::SyncedSongLayerInfo), 16 + sizeof(::ArrayW<::UnityEngine::AudioSource*>)> __GlobalNamespace_SynchedMusicController_SyncedSongLayerInfoSizeCheck;
    static_assert(sizeof(SynchedMusicController::SyncedSongLayerInfo) == 0x18);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SynchedMusicController/AudioSourcePickMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AudioSourcePickMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AudioSourcePickMode
      constexpr AudioSourcePickMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SynchedMusicController/AudioSourcePickMode All
      static constexpr const int All = 0;
      // Get static field: static public SynchedMusicController/AudioSourcePickMode All
      static ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode _get_All();
      // Set static field: static public SynchedMusicController/AudioSourcePickMode All
      static void _set_All(::GlobalNamespace::SynchedMusicController::AudioSourcePickMode value);
      // static field const value: static public SynchedMusicController/AudioSourcePickMode Shuffle
      static constexpr const int Shuffle = 1;
      // Get static field: static public SynchedMusicController/AudioSourcePickMode Shuffle
      static ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode _get_Shuffle();
      // Set static field: static public SynchedMusicController/AudioSourcePickMode Shuffle
      static void _set_Shuffle(::GlobalNamespace::SynchedMusicController::AudioSourcePickMode value);
      // static field const value: static public SynchedMusicController/AudioSourcePickMode Specific
      static constexpr const int Specific = 2;
      // Get static field: static public SynchedMusicController/AudioSourcePickMode Specific
      static ::GlobalNamespace::SynchedMusicController::AudioSourcePickMode _get_Specific();
      // Set static field: static public SynchedMusicController/AudioSourcePickMode Specific
      static void _set_Specific(::GlobalNamespace::SynchedMusicController::AudioSourcePickMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SynchedMusicController/AudioSourcePickMode
    #pragma pack(pop)
    static check_size<sizeof(SynchedMusicController::AudioSourcePickMode), 0 + sizeof(int)> __GlobalNamespace_SynchedMusicController_AudioSourcePickModeSizeCheck;
    static_assert(sizeof(SynchedMusicController::AudioSourcePickMode) == 0x4);
    public:
    // private System.Boolean usingNewSyncedSongsCode
    // Size: 0x1
    // Offset: 0x20
    bool usingNewSyncedSongsCode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean shufflePlaylist
    // Size: 0x1
    // Offset: 0x21
    bool shufflePlaylist;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shufflePlaylist and: syncedSongs
    char __padding1[0x6] = {};
    // private SynchedMusicController/SyncedSongInfo[] syncedSongs
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongInfo> syncedSongs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongInfo>) == 0x8);
    // public System.Int32 mySeed
    // Size: 0x4
    // Offset: 0x30
    int mySeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mySeed and: randomNumberGenerator
    char __padding3[0x4] = {};
    // private System.Random randomNumberGenerator
    // Size: 0x8
    // Offset: 0x38
    ::System::Random* randomNumberGenerator;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // public System.Int64 minimumWait
    // Size: 0x8
    // Offset: 0x40
    int64_t minimumWait;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int32 randomInterval
    // Size: 0x4
    // Offset: 0x48
    int randomInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: randomInterval and: songStartTimes
    char __padding6[0x4] = {};
    // public System.Int64[] songStartTimes
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<int64_t> songStartTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    // public System.Int32[] audioSourcesForPlaying
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<int> audioSourcesForPlaying;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] audioClipsForPlaying
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<int> audioClipsForPlaying;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource[] audioSourceArray
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::AudioSource*> audioSourceArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // public UnityEngine.AudioClip[] songsArray
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::AudioClip*> songsArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public System.Int32 lastPlayIndex
    // Size: 0x4
    // Offset: 0x80
    int lastPlayIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastPlayIndex and: currentTime
    char __padding13[0x4] = {};
    // public System.Int64 currentTime
    // Size: 0x8
    // Offset: 0x88
    int64_t currentTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 totalLoopTime
    // Size: 0x8
    // Offset: 0x90
    int64_t totalLoopTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public GorillaPressableButton muteButton
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::GorillaPressableButton* muteButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPressableButton*) == 0x8);
    // public System.Boolean usingMultipleSongs
    // Size: 0x1
    // Offset: 0xA0
    bool usingMultipleSongs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean usingMultipleSources
    // Size: 0x1
    // Offset: 0xA1
    bool usingMultipleSources;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isPlayingCurrently
    // Size: 0x1
    // Offset: 0xA2
    bool isPlayingCurrently;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testPlay
    // Size: 0x1
    // Offset: 0xA3
    bool testPlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean twoLayer
    // Size: 0x1
    // Offset: 0xA4
    bool twoLayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: twoLayer and: locationName
    char __padding21[0x3] = {};
    // public System.String locationName
    // Size: 0x8
    // Offset: 0xA8
    ::StringW locationName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // static field const value: static private System.Int32 kPlaylistLength
    static constexpr const int kPlaylistLength = 256;
    // Get static field: static private System.Int32 kPlaylistLength
    static int _get_kPlaylistLength();
    // Set static field: static private System.Int32 kPlaylistLength
    static void _set_kPlaylistLength(int value);
    // Get instance field reference: private System.Boolean usingNewSyncedSongsCode
    [[deprecated("Use field access instead!")]] bool& dyn_usingNewSyncedSongsCode();
    // Get instance field reference: private System.Boolean shufflePlaylist
    [[deprecated("Use field access instead!")]] bool& dyn_shufflePlaylist();
    // Get instance field reference: private SynchedMusicController/SyncedSongInfo[] syncedSongs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SynchedMusicController::SyncedSongInfo>& dyn_syncedSongs();
    // Get instance field reference: public System.Int32 mySeed
    [[deprecated("Use field access instead!")]] int& dyn_mySeed();
    // Get instance field reference: private System.Random randomNumberGenerator
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_randomNumberGenerator();
    // Get instance field reference: public System.Int64 minimumWait
    [[deprecated("Use field access instead!")]] int64_t& dyn_minimumWait();
    // Get instance field reference: public System.Int32 randomInterval
    [[deprecated("Use field access instead!")]] int& dyn_randomInterval();
    // Get instance field reference: public System.Int64[] songStartTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<int64_t>& dyn_songStartTimes();
    // Get instance field reference: public System.Int32[] audioSourcesForPlaying
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_audioSourcesForPlaying();
    // Get instance field reference: public System.Int32[] audioClipsForPlaying
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_audioClipsForPlaying();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioSource[] audioSourceArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_audioSourceArray();
    // Get instance field reference: public UnityEngine.AudioClip[] songsArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_songsArray();
    // Get instance field reference: public System.Int32 lastPlayIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastPlayIndex();
    // Get instance field reference: public System.Int64 currentTime
    [[deprecated("Use field access instead!")]] int64_t& dyn_currentTime();
    // Get instance field reference: public System.Int64 totalLoopTime
    [[deprecated("Use field access instead!")]] int64_t& dyn_totalLoopTime();
    // Get instance field reference: public GorillaPressableButton muteButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& dyn_muteButton();
    // Get instance field reference: public System.Boolean usingMultipleSongs
    [[deprecated("Use field access instead!")]] bool& dyn_usingMultipleSongs();
    // Get instance field reference: public System.Boolean usingMultipleSources
    [[deprecated("Use field access instead!")]] bool& dyn_usingMultipleSources();
    // Get instance field reference: public System.Boolean isPlayingCurrently
    [[deprecated("Use field access instead!")]] bool& dyn_isPlayingCurrently();
    // Get instance field reference: public System.Boolean testPlay
    [[deprecated("Use field access instead!")]] bool& dyn_testPlay();
    // Get instance field reference: public System.Boolean twoLayer
    [[deprecated("Use field access instead!")]] bool& dyn_twoLayer();
    // Get instance field reference: public System.String locationName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_locationName();
    // private System.Void Start()
    // Offset: 0x2730ADC
    void Start();
    // private System.Void Update()
    // Offset: 0x273142C
    void Update();
    // private System.Void StartPlayingSong(System.Int64 timeStarted, System.Int64 currentTime)
    // Offset: 0x2731ED0
    void StartPlayingSong(int64_t timeStarted, int64_t currentTime);
    // private System.Void StartPlayingSongs(System.Int64 timeStarted, System.Int64 currentTime)
    // Offset: 0x2731D90
    void StartPlayingSongs(int64_t timeStarted, int64_t currentTime);
    // private System.Void StartPlayingSong(System.Int64 timeStarted, System.Int64 currentTime, UnityEngine.AudioClip clipToPlay, UnityEngine.AudioSource sourceToPlay)
    // Offset: 0x2731E34
    void StartPlayingSong(int64_t timeStarted, int64_t currentTime, ::UnityEngine::AudioClip* clipToPlay, ::UnityEngine::AudioSource* sourceToPlay);
    // private System.Void GenerateSongStartRandomTimes()
    // Offset: 0x2731084
    void GenerateSongStartRandomTimes();
    // public System.Void MuteAudio(GorillaPressableButton pressedButton)
    // Offset: 0x2731F3C
    void MuteAudio(::GlobalNamespace::GorillaPressableButton* pressedButton);
    // protected System.Void New_Start()
    // Offset: 0x2730CCC
    void New_Start();
    // protected System.Void OnEnable()
    // Offset: 0x2732828
    void OnEnable();
    // protected System.Void New_Update()
    // Offset: 0x27319A4
    void New_Update();
    // private System.String New_Validate()
    // Offset: 0x2732434
    ::StringW New_Validate();
    // private System.Void New_GeneratePlaylistArrays()
    // Offset: 0x27320BC
    void New_GeneratePlaylistArrays();
    // public System.Void .ctor()
    // Offset: 0x2732834
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SynchedMusicController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SynchedMusicController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SynchedMusicController*, creationType>()));
    }
  }; // SynchedMusicController
  #pragma pack(pop)
  static check_size<sizeof(SynchedMusicController), 168 + sizeof(::StringW)> __GlobalNamespace_SynchedMusicControllerSizeCheck;
  static_assert(sizeof(SynchedMusicController) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SynchedMusicController::AudioSourcePickMode, "", "SynchedMusicController/AudioSourcePickMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SynchedMusicController::SyncedSongLayerInfo, "", "SynchedMusicController/SyncedSongLayerInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SynchedMusicController::SyncedSongInfo, "", "SynchedMusicController/SyncedSongInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSong
// Il2CppName: StartPlayingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t)>(&GlobalNamespace::SynchedMusicController::StartPlayingSong)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSongs
// Il2CppName: StartPlayingSongs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t)>(&GlobalNamespace::SynchedMusicController::StartPlayingSongs)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSongs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSong
// Il2CppName: StartPlayingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t, ::UnityEngine::AudioClip*, ::UnityEngine::AudioSource*)>(&GlobalNamespace::SynchedMusicController::StartPlayingSong)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* clipToPlay = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* sourceToPlay = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime, clipToPlay, sourceToPlay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::GenerateSongStartRandomTimes
// Il2CppName: GenerateSongStartRandomTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::GenerateSongStartRandomTimes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "GenerateSongStartRandomTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::MuteAudio
// Il2CppName: MuteAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(::GlobalNamespace::GorillaPressableButton*)>(&GlobalNamespace::SynchedMusicController::MuteAudio)> {
  static const MethodInfo* get() {
    static auto* pressedButton = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "MuteAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressedButton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_Start
// Il2CppName: New_Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::New_Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "New_Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_Update
// Il2CppName: New_Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::New_Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "New_Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_Validate
// Il2CppName: New_Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::New_Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "New_Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_GeneratePlaylistArrays
// Il2CppName: New_GeneratePlaylistArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::New_GeneratePlaylistArrays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "New_GeneratePlaylistArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
