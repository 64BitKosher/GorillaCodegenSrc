// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: Pathfinding.GraphDebugMode
#include "Pathfinding/GraphDebugMode.hpp"
// Including type: Pathfinding.PathLog
#include "Pathfinding/PathLog.hpp"
// Including type: Pathfinding.Heuristic
#include "Pathfinding/Heuristic.hpp"
// Including type: Pathfinding.ThreadCount
#include "Pathfinding/ThreadCount.hpp"
// Including type: Pathfinding.PathProcessor/GraphUpdateLock
#include "Pathfinding/PathProcessor_GraphUpdateLock.hpp"
// Including type: Pathfinding.Progress
#include "Pathfinding/Progress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AstarData
  class AstarData;
  // Forward declaring type: AstarColor
  class AstarColor;
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: GraphUpdateProcessor
  class GraphUpdateProcessor;
  // Forward declaring type: HierarchicalGraph
  class HierarchicalGraph;
  // Forward declaring type: NavmeshUpdates
  class NavmeshUpdates;
  // Forward declaring type: WorkItemProcessor
  class WorkItemProcessor;
  // Skipping declaration: PathProcessor because it is already included!
  // Forward declaring type: PathReturnQueue
  class PathReturnQueue;
  // Forward declaring type: EuclideanEmbedding
  class EuclideanEmbedding;
  // Forward declaring type: OnGraphDelegate
  class OnGraphDelegate;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: OnScanDelegate
  class OnScanDelegate;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: NavGraph
  class NavGraph;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: IWorkItemContext
  class IWorkItemContext;
  // Forward declaring type: AstarWorkItem
  struct AstarWorkItem;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: NNInfo
  struct NNInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: RetainedGizmos
  class RetainedGizmos;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath*, "", "AstarPath");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x119
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class AstarPath : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::AstarPath::AstarDistribution
    struct AstarDistribution;
    // Nested type: ::GlobalNamespace::AstarPath::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass109_0
    class $$c__DisplayClass109_0;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass144_0
    class $$c__DisplayClass144_0;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass154_0
    class $$c__DisplayClass154_0;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass97_0
    class $$c__DisplayClass97_0;
    // Nested type: ::GlobalNamespace::AstarPath::$DelayedGraphUpdate$d__110
    class $DelayedGraphUpdate$d__110;
    // Nested type: ::GlobalNamespace::AstarPath::$ScanAsync$d__143
    class $ScanAsync$d__143;
    // Nested type: ::GlobalNamespace::AstarPath::$ScanGraph$d__144
    class $ScanGraph$d__144;
    // Nested type: ::GlobalNamespace::AstarPath::$UpdateGraphsInternal$d__113
    class $UpdateGraphsInternal$d__113;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AstarPath/AstarDistribution
    // [TokenAttribute] Offset: FFFFFFFF
    struct AstarDistribution/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AstarDistribution
      constexpr AstarDistribution(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AstarPath/AstarDistribution WebsiteDownload
      static constexpr const int WebsiteDownload = 0;
      // Get static field: static public AstarPath/AstarDistribution WebsiteDownload
      static ::GlobalNamespace::AstarPath::AstarDistribution _get_WebsiteDownload();
      // Set static field: static public AstarPath/AstarDistribution WebsiteDownload
      static void _set_WebsiteDownload(::GlobalNamespace::AstarPath::AstarDistribution value);
      // static field const value: static public AstarPath/AstarDistribution AssetStore
      static constexpr const int AssetStore = 1;
      // Get static field: static public AstarPath/AstarDistribution AssetStore
      static ::GlobalNamespace::AstarPath::AstarDistribution _get_AssetStore();
      // Set static field: static public AstarPath/AstarDistribution AssetStore
      static void _set_AssetStore(::GlobalNamespace::AstarPath::AstarDistribution value);
      // static field const value: static public AstarPath/AstarDistribution PackageManager
      static constexpr const int PackageManager = 2;
      // Get static field: static public AstarPath/AstarDistribution PackageManager
      static ::GlobalNamespace::AstarPath::AstarDistribution _get_PackageManager();
      // Set static field: static public AstarPath/AstarDistribution PackageManager
      static void _set_PackageManager(::GlobalNamespace::AstarPath::AstarDistribution value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // AstarPath/AstarDistribution
    #pragma pack(pop)
    static check_size<sizeof(AstarPath::AstarDistribution), 0 + sizeof(int)> __GlobalNamespace_AstarPath_AstarDistributionSizeCheck;
    static_assert(sizeof(AstarPath::AstarDistribution) == 0x4);
    public:
    // public Pathfinding.AstarData data
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::AstarData* data;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarData*) == 0x8);
    // public System.Boolean showNavGraphs
    // Size: 0x1
    // Offset: 0x30
    bool showNavGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showUnwalkableNodes
    // Size: 0x1
    // Offset: 0x31
    bool showUnwalkableNodes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showUnwalkableNodes and: debugMode
    char __padding2[0x2] = {};
    // public Pathfinding.GraphDebugMode debugMode
    // Size: 0x4
    // Offset: 0x34
    ::Pathfinding::GraphDebugMode debugMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphDebugMode) == 0x4);
    // public System.Single debugFloor
    // Size: 0x4
    // Offset: 0x38
    float debugFloor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single debugRoof
    // Size: 0x4
    // Offset: 0x3C
    float debugRoof;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean manualDebugFloorRoof
    // Size: 0x1
    // Offset: 0x40
    bool manualDebugFloorRoof;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showSearchTree
    // Size: 0x1
    // Offset: 0x41
    bool showSearchTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showSearchTree and: unwalkableNodeDebugSize
    char __padding7[0x2] = {};
    // public System.Single unwalkableNodeDebugSize
    // Size: 0x4
    // Offset: 0x44
    float unwalkableNodeDebugSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.PathLog logPathResults
    // Size: 0x4
    // Offset: 0x48
    ::Pathfinding::PathLog logPathResults;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathLog) == 0x4);
    // public System.Single maxNearestNodeDistance
    // Size: 0x4
    // Offset: 0x4C
    float maxNearestNodeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean scanOnStartup
    // Size: 0x1
    // Offset: 0x50
    bool scanOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean fullGetNearestSearch
    // Size: 0x1
    // Offset: 0x51
    bool fullGetNearestSearch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean prioritizeGraphs
    // Size: 0x1
    // Offset: 0x52
    bool prioritizeGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: prioritizeGraphs and: prioritizeGraphsLimit
    char __padding13[0x1] = {};
    // public System.Single prioritizeGraphsLimit
    // Size: 0x4
    // Offset: 0x54
    float prioritizeGraphsLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.AstarColor colorSettings
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::AstarColor* colorSettings;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarColor*) == 0x8);
    // protected System.String[] tagNames
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> tagNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public Pathfinding.Heuristic heuristic
    // Size: 0x4
    // Offset: 0x68
    ::Pathfinding::Heuristic heuristic;
    // Field size check
    static_assert(sizeof(::Pathfinding::Heuristic) == 0x4);
    // public System.Single heuristicScale
    // Size: 0x4
    // Offset: 0x6C
    float heuristicScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.ThreadCount threadCount
    // Size: 0x4
    // Offset: 0x70
    ::Pathfinding::ThreadCount threadCount;
    // Field size check
    static_assert(sizeof(::Pathfinding::ThreadCount) == 0x4);
    // public System.Single maxFrameTime
    // Size: 0x4
    // Offset: 0x74
    float maxFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean batchGraphUpdates
    // Size: 0x1
    // Offset: 0x78
    bool batchGraphUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: batchGraphUpdates and: graphUpdateBatchingInterval
    char __padding21[0x3] = {};
    // public System.Single graphUpdateBatchingInterval
    // Size: 0x4
    // Offset: 0x7C
    float graphUpdateBatchingInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <lastScanTime>k__BackingField
    // Size: 0x4
    // Offset: 0x80
    float lastScanTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastScanTime and: debugPathData
    char __padding23[0x4] = {};
    // public Pathfinding.PathHandler debugPathData
    // Size: 0x8
    // Offset: 0x88
    ::Pathfinding::PathHandler* debugPathData;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    // public System.UInt16 debugPathID
    // Size: 0x2
    // Offset: 0x90
    uint16_t debugPathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: debugPathID and: inGameDebugPath
    char __padding25[0x6] = {};
    // private System.String inGameDebugPath
    // Size: 0x8
    // Offset: 0x98
    ::StringW inGameDebugPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isScanningBacking
    // Size: 0x1
    // Offset: 0xA0
    bool isScanningBacking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isScanningBacking and: OnGraphsWillBeUpdated
    char __padding27[0x7] = {};
    // public System.Action OnGraphsWillBeUpdated
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action* OnGraphsWillBeUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnGraphsWillBeUpdated2
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action* OnGraphsWillBeUpdated2;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly Pathfinding.GraphUpdateProcessor graphUpdates
    // Size: 0x8
    // Offset: 0xB8
    ::Pathfinding::GraphUpdateProcessor* graphUpdates;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphUpdateProcessor*) == 0x8);
    // readonly Pathfinding.HierarchicalGraph hierarchicalGraph
    // Size: 0x8
    // Offset: 0xC0
    ::Pathfinding::HierarchicalGraph* hierarchicalGraph;
    // Field size check
    static_assert(sizeof(::Pathfinding::HierarchicalGraph*) == 0x8);
    // public readonly Pathfinding.NavmeshUpdates navmeshUpdates
    // Size: 0x8
    // Offset: 0xC8
    ::Pathfinding::NavmeshUpdates* navmeshUpdates;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshUpdates*) == 0x8);
    // private readonly Pathfinding.WorkItemProcessor workItems
    // Size: 0x8
    // Offset: 0xD0
    ::Pathfinding::WorkItemProcessor* workItems;
    // Field size check
    static_assert(sizeof(::Pathfinding::WorkItemProcessor*) == 0x8);
    // private Pathfinding.PathProcessor pathProcessor
    // Size: 0x8
    // Offset: 0xD8
    ::Pathfinding::PathProcessor* pathProcessor;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathProcessor*) == 0x8);
    // private System.Boolean graphUpdateRoutineRunning
    // Size: 0x1
    // Offset: 0xE0
    bool graphUpdateRoutineRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean graphUpdatesWorkItemAdded
    // Size: 0x1
    // Offset: 0xE1
    bool graphUpdatesWorkItemAdded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: graphUpdatesWorkItemAdded and: lastGraphUpdate
    char __padding36[0x2] = {};
    // private System.Single lastGraphUpdate
    // Size: 0x4
    // Offset: 0xE4
    float lastGraphUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Pathfinding.PathProcessor/GraphUpdateLock workItemLock
    // Size: 0xC
    // Offset: 0xE8
    ::Pathfinding::PathProcessor::GraphUpdateLock workItemLock;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathProcessor::GraphUpdateLock) == 0xC);
    // Padding between fields: workItemLock and: pathReturnQueue
    char __padding38[0x4] = {};
    // readonly Pathfinding.PathReturnQueue pathReturnQueue
    // Size: 0x8
    // Offset: 0xF8
    ::Pathfinding::PathReturnQueue* pathReturnQueue;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathReturnQueue*) == 0x8);
    // public Pathfinding.EuclideanEmbedding euclideanEmbedding
    // Size: 0x8
    // Offset: 0x100
    ::Pathfinding::EuclideanEmbedding* euclideanEmbedding;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding*) == 0x8);
    // public System.Boolean showGraphs
    // Size: 0x1
    // Offset: 0x108
    bool showGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showGraphs and: nextFreePathID
    char __padding41[0x1] = {};
    // private System.UInt16 nextFreePathID
    // Size: 0x2
    // Offset: 0x10A
    uint16_t nextFreePathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: nextFreePathID and: gizmos
    char __padding42[0x4] = {};
    // private Pathfinding.Util.RetainedGizmos gizmos
    // Size: 0x8
    // Offset: 0x110
    ::Pathfinding::Util::RetainedGizmos* gizmos;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::RetainedGizmos*) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x118
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public readonly System.Version Version
    static ::System::Version* _get_Version();
    // Set static field: static public readonly System.Version Version
    static void _set_Version(::System::Version* value);
    // Get static field: static public readonly AstarPath/AstarDistribution Distribution
    static ::GlobalNamespace::AstarPath::AstarDistribution _get_Distribution();
    // Set static field: static public readonly AstarPath/AstarDistribution Distribution
    static void _set_Distribution(::GlobalNamespace::AstarPath::AstarDistribution value);
    // Get static field: static public readonly System.String Branch
    static ::StringW _get_Branch();
    // Set static field: static public readonly System.String Branch
    static void _set_Branch(::StringW value);
    // Get static field: static public AstarPath active
    static ::GlobalNamespace::AstarPath* _get_active();
    // Set static field: static public AstarPath active
    static void _set_active(::GlobalNamespace::AstarPath* value);
    // Get static field: static public System.Action OnAwakeSettings
    static ::System::Action* _get_OnAwakeSettings();
    // Set static field: static public System.Action OnAwakeSettings
    static void _set_OnAwakeSettings(::System::Action* value);
    // Get static field: static public Pathfinding.OnGraphDelegate OnGraphPreScan
    static ::Pathfinding::OnGraphDelegate* _get_OnGraphPreScan();
    // Set static field: static public Pathfinding.OnGraphDelegate OnGraphPreScan
    static void _set_OnGraphPreScan(::Pathfinding::OnGraphDelegate* value);
    // Get static field: static public Pathfinding.OnGraphDelegate OnGraphPostScan
    static ::Pathfinding::OnGraphDelegate* _get_OnGraphPostScan();
    // Set static field: static public Pathfinding.OnGraphDelegate OnGraphPostScan
    static void _set_OnGraphPostScan(::Pathfinding::OnGraphDelegate* value);
    // Get static field: static public Pathfinding.OnPathDelegate OnPathPreSearch
    static ::Pathfinding::OnPathDelegate* _get_OnPathPreSearch();
    // Set static field: static public Pathfinding.OnPathDelegate OnPathPreSearch
    static void _set_OnPathPreSearch(::Pathfinding::OnPathDelegate* value);
    // Get static field: static public Pathfinding.OnPathDelegate OnPathPostSearch
    static ::Pathfinding::OnPathDelegate* _get_OnPathPostSearch();
    // Set static field: static public Pathfinding.OnPathDelegate OnPathPostSearch
    static void _set_OnPathPostSearch(::Pathfinding::OnPathDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnPreScan
    static ::Pathfinding::OnScanDelegate* _get_OnPreScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnPreScan
    static void _set_OnPreScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnPostScan
    static ::Pathfinding::OnScanDelegate* _get_OnPostScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnPostScan
    static void _set_OnPostScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnLatePostScan
    static ::Pathfinding::OnScanDelegate* _get_OnLatePostScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnLatePostScan
    static void _set_OnLatePostScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnGraphsUpdated
    static ::Pathfinding::OnScanDelegate* _get_OnGraphsUpdated();
    // Set static field: static public Pathfinding.OnScanDelegate OnGraphsUpdated
    static void _set_OnGraphsUpdated(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public System.Action On65KOverflow
    static ::System::Action* _get_On65KOverflow();
    // Set static field: static public System.Action On65KOverflow
    static void _set_On65KOverflow(::System::Action* value);
    // Get static field: static private System.Int32 waitForPathDepth
    static int _get_waitForPathDepth();
    // Set static field: static private System.Int32 waitForPathDepth
    static void _set_waitForPathDepth(int value);
    // Get static field: static private readonly Pathfinding.NNConstraint NNConstraintNone
    static ::Pathfinding::NNConstraint* _get_NNConstraintNone();
    // Set static field: static private readonly Pathfinding.NNConstraint NNConstraintNone
    static void _set_NNConstraintNone(::Pathfinding::NNConstraint* value);
    // Get instance field reference: public Pathfinding.AstarData data
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarData*& dyn_data();
    // Get instance field reference: public System.Boolean showNavGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_showNavGraphs();
    // Get instance field reference: public System.Boolean showUnwalkableNodes
    [[deprecated("Use field access instead!")]] bool& dyn_showUnwalkableNodes();
    // Get instance field reference: public Pathfinding.GraphDebugMode debugMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphDebugMode& dyn_debugMode();
    // Get instance field reference: public System.Single debugFloor
    [[deprecated("Use field access instead!")]] float& dyn_debugFloor();
    // Get instance field reference: public System.Single debugRoof
    [[deprecated("Use field access instead!")]] float& dyn_debugRoof();
    // Get instance field reference: public System.Boolean manualDebugFloorRoof
    [[deprecated("Use field access instead!")]] bool& dyn_manualDebugFloorRoof();
    // Get instance field reference: public System.Boolean showSearchTree
    [[deprecated("Use field access instead!")]] bool& dyn_showSearchTree();
    // Get instance field reference: public System.Single unwalkableNodeDebugSize
    [[deprecated("Use field access instead!")]] float& dyn_unwalkableNodeDebugSize();
    // Get instance field reference: public Pathfinding.PathLog logPathResults
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathLog& dyn_logPathResults();
    // Get instance field reference: public System.Single maxNearestNodeDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxNearestNodeDistance();
    // Get instance field reference: public System.Boolean scanOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_scanOnStartup();
    // Get instance field reference: public System.Boolean fullGetNearestSearch
    [[deprecated("Use field access instead!")]] bool& dyn_fullGetNearestSearch();
    // Get instance field reference: public System.Boolean prioritizeGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_prioritizeGraphs();
    // Get instance field reference: public System.Single prioritizeGraphsLimit
    [[deprecated("Use field access instead!")]] float& dyn_prioritizeGraphsLimit();
    // Get instance field reference: public Pathfinding.AstarColor colorSettings
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarColor*& dyn_colorSettings();
    // Get instance field reference: protected System.String[] tagNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_tagNames();
    // Get instance field reference: public Pathfinding.Heuristic heuristic
    [[deprecated("Use field access instead!")]] ::Pathfinding::Heuristic& dyn_heuristic();
    // Get instance field reference: public System.Single heuristicScale
    [[deprecated("Use field access instead!")]] float& dyn_heuristicScale();
    // Get instance field reference: public Pathfinding.ThreadCount threadCount
    [[deprecated("Use field access instead!")]] ::Pathfinding::ThreadCount& dyn_threadCount();
    // Get instance field reference: public System.Single maxFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_maxFrameTime();
    // Get instance field reference: public System.Boolean batchGraphUpdates
    [[deprecated("Use field access instead!")]] bool& dyn_batchGraphUpdates();
    // Get instance field reference: public System.Single graphUpdateBatchingInterval
    [[deprecated("Use field access instead!")]] float& dyn_graphUpdateBatchingInterval();
    // Get instance field reference: private System.Single <lastScanTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$lastScanTime$k__BackingField();
    // Get instance field reference: public Pathfinding.PathHandler debugPathData
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_debugPathData();
    // Get instance field reference: public System.UInt16 debugPathID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_debugPathID();
    // Get instance field reference: private System.String inGameDebugPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_inGameDebugPath();
    // Get instance field reference: private System.Boolean isScanningBacking
    [[deprecated("Use field access instead!")]] bool& dyn_isScanningBacking();
    // Get instance field reference: public System.Action OnGraphsWillBeUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGraphsWillBeUpdated();
    // Get instance field reference: public System.Action OnGraphsWillBeUpdated2
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGraphsWillBeUpdated2();
    // Get instance field reference: private readonly Pathfinding.GraphUpdateProcessor graphUpdates
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphUpdateProcessor*& dyn_graphUpdates();
    // Get instance field reference: readonly Pathfinding.HierarchicalGraph hierarchicalGraph
    [[deprecated("Use field access instead!")]] ::Pathfinding::HierarchicalGraph*& dyn_hierarchicalGraph();
    // Get instance field reference: public readonly Pathfinding.NavmeshUpdates navmeshUpdates
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshUpdates*& dyn_navmeshUpdates();
    // Get instance field reference: private readonly Pathfinding.WorkItemProcessor workItems
    [[deprecated("Use field access instead!")]] ::Pathfinding::WorkItemProcessor*& dyn_workItems();
    // Get instance field reference: private Pathfinding.PathProcessor pathProcessor
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathProcessor*& dyn_pathProcessor();
    // Get instance field reference: private System.Boolean graphUpdateRoutineRunning
    [[deprecated("Use field access instead!")]] bool& dyn_graphUpdateRoutineRunning();
    // Get instance field reference: private System.Boolean graphUpdatesWorkItemAdded
    [[deprecated("Use field access instead!")]] bool& dyn_graphUpdatesWorkItemAdded();
    // Get instance field reference: private System.Single lastGraphUpdate
    [[deprecated("Use field access instead!")]] float& dyn_lastGraphUpdate();
    // Get instance field reference: private Pathfinding.PathProcessor/GraphUpdateLock workItemLock
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathProcessor::GraphUpdateLock& dyn_workItemLock();
    // Get instance field reference: readonly Pathfinding.PathReturnQueue pathReturnQueue
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathReturnQueue*& dyn_pathReturnQueue();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding euclideanEmbedding
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding*& dyn_euclideanEmbedding();
    // Get instance field reference: public System.Boolean showGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_showGraphs();
    // Get instance field reference: private System.UInt16 nextFreePathID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_nextFreePathID();
    // Get instance field reference: private Pathfinding.Util.RetainedGizmos gizmos
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::RetainedGizmos*& dyn_gizmos();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // public System.Type[] get_graphTypes()
    // Offset: 0x2982A64
    ::ArrayW<::System::Type*> get_graphTypes();
    // public Pathfinding.AstarData get_astarData()
    // Offset: 0x2982A80
    ::Pathfinding::AstarData* get_astarData();
    // public Pathfinding.NavGraph[] get_graphs()
    // Offset: 0x2982A88
    ::ArrayW<::Pathfinding::NavGraph*> get_graphs();
    // public System.Single get_maxNearestNodeDistanceSqr()
    // Offset: 0x2982B04
    float get_maxNearestNodeDistanceSqr();
    // public System.Boolean get_limitGraphUpdates()
    // Offset: 0x2982B10
    bool get_limitGraphUpdates();
    // public System.Void set_limitGraphUpdates(System.Boolean value)
    // Offset: 0x2982B18
    void set_limitGraphUpdates(bool value);
    // public System.Single get_maxGraphUpdateFreq()
    // Offset: 0x2982B24
    float get_maxGraphUpdateFreq();
    // public System.Void set_maxGraphUpdateFreq(System.Single value)
    // Offset: 0x2982B2C
    void set_maxGraphUpdateFreq(float value);
    // public System.Single get_lastScanTime()
    // Offset: 0x2982B34
    float get_lastScanTime();
    // private System.Void set_lastScanTime(System.Single value)
    // Offset: 0x2982B3C
    void set_lastScanTime(float value);
    // public System.Boolean get_isScanning()
    // Offset: 0x2982B44
    bool get_isScanning();
    // private System.Void set_isScanning(System.Boolean value)
    // Offset: 0x2982B4C
    void set_isScanning(bool value);
    // public System.Int32 get_NumParallelThreads()
    // Offset: 0x2982B58
    int get_NumParallelThreads();
    // public System.Boolean get_IsUsingMultithreading()
    // Offset: 0x2982B74
    bool get_IsUsingMultithreading();
    // public System.Boolean get_IsAnyGraphUpdatesQueued()
    // Offset: 0x2982B90
    bool get_IsAnyGraphUpdatesQueued();
    // public System.Boolean get_IsAnyGraphUpdateQueued()
    // Offset: 0x2982BAC
    bool get_IsAnyGraphUpdateQueued();
    // public System.Boolean get_IsAnyGraphUpdateInProgress()
    // Offset: 0x2982BC8
    bool get_IsAnyGraphUpdateInProgress();
    // public System.Boolean get_IsAnyWorkItemInProgress()
    // Offset: 0x2982BE4
    bool get_IsAnyWorkItemInProgress();
    // System.Boolean get_IsInsideWorkItem()
    // Offset: 0x2982C00
    bool get_IsInsideWorkItem();
    // public System.String[] GetTagNames()
    // Offset: 0x2982F24
    ::ArrayW<::StringW> GetTagNames();
    // static public System.Void FindAstarPath()
    // Offset: 0x298304C
    static void FindAstarPath();
    // static public System.String[] FindTagNames()
    // Offset: 0x2983248
    static ::ArrayW<::StringW> FindTagNames();
    // System.UInt16 GetNextPathID()
    // Offset: 0x2983368
    uint16_t GetNextPathID();
    // private System.Void RecalculateDebugLimits()
    // Offset: 0x2983428
    void RecalculateDebugLimits();
    // private System.Void OnDrawGizmos()
    // Offset: 0x2983640
    void OnDrawGizmos();
    // private System.Void OnGUI()
    // Offset: 0x29838D8
    void OnGUI();
    // private System.Void LogPathResults(Pathfinding.Path path)
    // Offset: 0x298398C
    void LogPathResults(::Pathfinding::Path* path);
    // private System.Void Update()
    // Offset: 0x2983AE0
    void Update();
    // private System.Void PerformBlockingActions(System.Boolean force)
    // Offset: 0x2983B90
    void PerformBlockingActions(bool force);
    // public System.Void QueueWorkItemFloodFill()
    // Offset: 0x2983C20
    void QueueWorkItemFloodFill();
    // public System.Void EnsureValidFloodFill()
    // Offset: 0x2983C6C
    void EnsureValidFloodFill();
    // public System.Void AddWorkItem(System.Action callback)
    // Offset: 0x2983CB8
    void AddWorkItem(::System::Action* callback);
    // public System.Void AddWorkItem(System.Action`1<Pathfinding.IWorkItemContext> callback)
    // Offset: 0x2983D70
    void AddWorkItem(::System::Action_1<::Pathfinding::IWorkItemContext*>* callback);
    // public System.Void AddWorkItem(Pathfinding.AstarWorkItem item)
    // Offset: 0x2983CFC
    void AddWorkItem(::Pathfinding::AstarWorkItem item);
    // public System.Void QueueGraphUpdates()
    // Offset: 0x2983DD4
    void QueueGraphUpdates();
    // private System.Collections.IEnumerator DelayedGraphUpdate()
    // Offset: 0x2983F04
    ::System::Collections::IEnumerator* DelayedGraphUpdate();
    // public System.Void UpdateGraphs(UnityEngine.Bounds bounds, System.Single delay)
    // Offset: 0x2983F98
    void UpdateGraphs(::UnityEngine::Bounds bounds, float delay);
    // public System.Void UpdateGraphs(Pathfinding.GraphUpdateObject ob, System.Single delay)
    // Offset: 0x2984040
    void UpdateGraphs(::Pathfinding::GraphUpdateObject* ob, float delay);
    // private System.Collections.IEnumerator UpdateGraphsInternal(Pathfinding.GraphUpdateObject ob, System.Single delay)
    // Offset: 0x2984060
    ::System::Collections::IEnumerator* UpdateGraphsInternal(::Pathfinding::GraphUpdateObject* ob, float delay);
    // public System.Void UpdateGraphs(UnityEngine.Bounds bounds)
    // Offset: 0x2984120
    void UpdateGraphs(::UnityEngine::Bounds bounds);
    // public System.Void UpdateGraphs(Pathfinding.GraphUpdateObject ob)
    // Offset: 0x29841A8
    void UpdateGraphs(::Pathfinding::GraphUpdateObject* ob);
    // public System.Void FlushGraphUpdates()
    // Offset: 0x2984280
    void FlushGraphUpdates();
    // public System.Void FlushWorkItems()
    // Offset: 0x29842BC
    void FlushWorkItems();
    // public System.Void FlushWorkItems(System.Boolean unblockOnComplete, System.Boolean block)
    // Offset: 0x2984330
    void FlushWorkItems(bool unblockOnComplete, bool block);
    // public System.Void FlushThreadSafeCallbacks()
    // Offset: 0x2984374
    void FlushThreadSafeCallbacks();
    // static public System.Int32 CalculateThreadCount(Pathfinding.ThreadCount count)
    // Offset: 0x2984378
    static int CalculateThreadCount(::Pathfinding::ThreadCount count);
    // public System.Void EnsureInitialized()
    // Offset: 0x2984510
    void EnsureInitialized();
    // private System.Void InitializePathProcessor()
    // Offset: 0x29848F8
    void InitializePathProcessor();
    // System.Void VerifyIntegrity()
    // Offset: 0x2984FAC
    void VerifyIntegrity();
    // public System.Void ConfigureReferencesInternal()
    // Offset: 0x2984B90
    void ConfigureReferencesInternal();
    // private System.Void InitializeProfiler()
    // Offset: 0x2984B8C
    void InitializeProfiler();
    // private System.Void InitializeAstarData()
    // Offset: 0x2984C90
    void InitializeAstarData();
    // private System.Void OnDisable()
    // Offset: 0x298511C
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x2985138
    void OnDestroy();
    // public System.Void FloodFill(Pathfinding.GraphNode seed)
    // Offset: 0x29854E0
    void FloodFill(::Pathfinding::GraphNode* seed);
    // public System.Void FloodFill(Pathfinding.GraphNode seed, System.UInt32 area)
    // Offset: 0x29854E4
    void FloodFill(::Pathfinding::GraphNode* seed, uint area);
    // public System.Void FloodFill()
    // Offset: 0x29854E8
    void FloodFill();
    // System.Int32 GetNewNodeIndex()
    // Offset: 0x2985518
    int GetNewNodeIndex();
    // System.Void InitializeNode(Pathfinding.GraphNode node)
    // Offset: 0x2985534
    void InitializeNode(::Pathfinding::GraphNode* node);
    // System.Void DestroyNode(Pathfinding.GraphNode node)
    // Offset: 0x2985550
    void DestroyNode(::Pathfinding::GraphNode* node);
    // public System.Void BlockUntilPathQueueBlocked()
    // Offset: 0x298556C
    void BlockUntilPathQueueBlocked();
    // public Pathfinding.PathProcessor/GraphUpdateLock PausePathfinding()
    // Offset: 0x2984310
    ::Pathfinding::PathProcessor::GraphUpdateLock PausePathfinding();
    // private Pathfinding.PathProcessor/GraphUpdateLock PausePathfindingSoon()
    // Offset: 0x2983DB4
    ::Pathfinding::PathProcessor::GraphUpdateLock PausePathfindingSoon();
    // public System.Void Scan(Pathfinding.NavGraph graphToScan)
    // Offset: 0x2985570
    void Scan(::Pathfinding::NavGraph* graphToScan);
    // public System.Void Scan(Pathfinding.NavGraph[] graphsToScan)
    // Offset: 0x2984CD0
    void Scan(::ArrayW<::Pathfinding::NavGraph*> graphsToScan);
    // public System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanAsync(Pathfinding.NavGraph graphToScan)
    // Offset: 0x29856E0
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanAsync(::Pathfinding::NavGraph* graphToScan);
    // public System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanAsync(Pathfinding.NavGraph[] graphsToScan)
    // Offset: 0x2985648
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanAsync(::ArrayW<::Pathfinding::NavGraph*> graphsToScan);
    // private System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanGraph(Pathfinding.NavGraph graph)
    // Offset: 0x29857EC
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanGraph(::Pathfinding::NavGraph* graph);
    // static public System.Void WaitForPath(Pathfinding.Path path)
    // Offset: 0x298589C
    static void WaitForPath(::Pathfinding::Path* path);
    // static public System.Void BlockUntilCalculated(Pathfinding.Path path)
    // Offset: 0x29858F0
    static void BlockUntilCalculated(::Pathfinding::Path* path);
    // static public System.Void RegisterSafeUpdate(System.Action callback)
    // Offset: 0x2985DC4
    static void RegisterSafeUpdate(::System::Action* callback);
    // static public System.Void StartPath(Pathfinding.Path path, System.Boolean pushToFront)
    // Offset: 0x2985E60
    static void StartPath(::Pathfinding::Path* path, bool pushToFront);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position)
    // Offset: 0x2986260
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x2986314
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x2986344
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public Pathfinding.GraphNode GetNearest(UnityEngine.Ray ray)
    // Offset: 0x29866E8
    ::Pathfinding::GraphNode* GetNearest(::UnityEngine::Ray ray);
    // static private System.Void .cctor()
    // Offset: 0x2986880
    static void _cctor();
    // private System.Void <.ctor>b__92_0()
    // Offset: 0x298696C
    void $_ctor$b__92_0();
    // private System.Void <InitializePathProcessor>b__124_1(Pathfinding.Path path)
    // Offset: 0x2986A08
    void $InitializePathProcessor$b__124_1(::Pathfinding::Path* path);
    // private System.Void <InitializePathProcessor>b__124_2()
    // Offset: 0x2986AA0
    void $InitializePathProcessor$b__124_2();
    // private System.Void .ctor()
    // Offset: 0x2982C1C
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x2984528
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
  }; // AstarPath
  #pragma pack(pop)
  static check_size<sizeof(AstarPath), 280 + sizeof(bool)> __GlobalNamespace_AstarPathSizeCheck;
  static_assert(sizeof(AstarPath) == 0x119);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::AstarDistribution, "", "AstarPath/AstarDistribution");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_graphTypes
// Il2CppName: get_graphTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_graphTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_graphTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_astarData
// Il2CppName: get_astarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::AstarData* (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_astarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_astarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_graphs
// Il2CppName: get_graphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::NavGraph*> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_graphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_graphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_maxNearestNodeDistanceSqr
// Il2CppName: get_maxNearestNodeDistanceSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_maxNearestNodeDistanceSqr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_maxNearestNodeDistanceSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_limitGraphUpdates
// Il2CppName: get_limitGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_limitGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_limitGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_limitGraphUpdates
// Il2CppName: set_limitGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::set_limitGraphUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_limitGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_maxGraphUpdateFreq
// Il2CppName: get_maxGraphUpdateFreq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_maxGraphUpdateFreq)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_maxGraphUpdateFreq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_maxGraphUpdateFreq
// Il2CppName: set_maxGraphUpdateFreq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(float)>(&GlobalNamespace::AstarPath::set_maxGraphUpdateFreq)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_maxGraphUpdateFreq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_lastScanTime
// Il2CppName: get_lastScanTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_lastScanTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_lastScanTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_lastScanTime
// Il2CppName: set_lastScanTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(float)>(&GlobalNamespace::AstarPath::set_lastScanTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_lastScanTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_isScanning
// Il2CppName: get_isScanning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_isScanning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_isScanning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_isScanning
// Il2CppName: set_isScanning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::set_isScanning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_isScanning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_NumParallelThreads
// Il2CppName: get_NumParallelThreads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_NumParallelThreads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_NumParallelThreads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsUsingMultithreading
// Il2CppName: get_IsUsingMultithreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsUsingMultithreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsUsingMultithreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsAnyGraphUpdatesQueued
// Il2CppName: get_IsAnyGraphUpdatesQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsAnyGraphUpdatesQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsAnyGraphUpdatesQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsAnyGraphUpdateQueued
// Il2CppName: get_IsAnyGraphUpdateQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsAnyGraphUpdateQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsAnyGraphUpdateQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsAnyGraphUpdateInProgress
// Il2CppName: get_IsAnyGraphUpdateInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsAnyGraphUpdateInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsAnyGraphUpdateInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsAnyWorkItemInProgress
// Il2CppName: get_IsAnyWorkItemInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsAnyWorkItemInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsAnyWorkItemInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsInsideWorkItem
// Il2CppName: get_IsInsideWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsInsideWorkItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsInsideWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetTagNames
// Il2CppName: GetTagNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetTagNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetTagNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FindAstarPath
// Il2CppName: FindAstarPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AstarPath::FindAstarPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FindAstarPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FindTagNames
// Il2CppName: FindTagNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&GlobalNamespace::AstarPath::FindTagNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FindTagNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNextPathID
// Il2CppName: GetNextPathID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetNextPathID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNextPathID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::RecalculateDebugLimits
// Il2CppName: RecalculateDebugLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::RecalculateDebugLimits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "RecalculateDebugLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::LogPathResults
// Il2CppName: LogPathResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::LogPathResults)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "LogPathResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::PerformBlockingActions
// Il2CppName: PerformBlockingActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::PerformBlockingActions)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "PerformBlockingActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::QueueWorkItemFloodFill
// Il2CppName: QueueWorkItemFloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::QueueWorkItemFloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "QueueWorkItemFloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::EnsureValidFloodFill
// Il2CppName: EnsureValidFloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::EnsureValidFloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "EnsureValidFloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AddWorkItem
// Il2CppName: AddWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::System::Action*)>(&GlobalNamespace::AstarPath::AddWorkItem)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AddWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AddWorkItem
// Il2CppName: AddWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::System::Action_1<::Pathfinding::IWorkItemContext*>*)>(&GlobalNamespace::AstarPath::AddWorkItem)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "IWorkItemContext")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AddWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AddWorkItem
// Il2CppName: AddWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::AstarWorkItem)>(&GlobalNamespace::AstarPath::AddWorkItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Pathfinding", "AstarWorkItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AddWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::QueueGraphUpdates
// Il2CppName: QueueGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::QueueGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "QueueGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::DelayedGraphUpdate
// Il2CppName: DelayedGraphUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::DelayedGraphUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "DelayedGraphUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::UnityEngine::Bounds, float)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*, float)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob, delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphsInternal
// Il2CppName: UpdateGraphsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*, float)>(&GlobalNamespace::AstarPath::UpdateGraphsInternal)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob, delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::UnityEngine::Bounds)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushGraphUpdates
// Il2CppName: FlushGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushWorkItems
// Il2CppName: FlushWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushWorkItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushWorkItems
// Il2CppName: FlushWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool, bool)>(&GlobalNamespace::AstarPath::FlushWorkItems)> {
  static const MethodInfo* get() {
    static auto* unblockOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unblockOnComplete, block});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushThreadSafeCallbacks
// Il2CppName: FlushThreadSafeCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushThreadSafeCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushThreadSafeCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::CalculateThreadCount
// Il2CppName: CalculateThreadCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Pathfinding::ThreadCount)>(&GlobalNamespace::AstarPath::CalculateThreadCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("Pathfinding", "ThreadCount")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "CalculateThreadCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::EnsureInitialized
// Il2CppName: EnsureInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::EnsureInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "EnsureInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InitializePathProcessor
// Il2CppName: InitializePathProcessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::InitializePathProcessor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InitializePathProcessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::VerifyIntegrity
// Il2CppName: VerifyIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::VerifyIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "VerifyIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ConfigureReferencesInternal
// Il2CppName: ConfigureReferencesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::ConfigureReferencesInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ConfigureReferencesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InitializeProfiler
// Il2CppName: InitializeProfiler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::InitializeProfiler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InitializeProfiler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InitializeAstarData
// Il2CppName: InitializeAstarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::InitializeAstarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InitializeAstarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*, uint)>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* area = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, area});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNewNodeIndex
// Il2CppName: GetNewNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetNewNodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNewNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InitializeNode
// Il2CppName: InitializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::InitializeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InitializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::DestroyNode
// Il2CppName: DestroyNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::DestroyNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "DestroyNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::BlockUntilPathQueueBlocked
// Il2CppName: BlockUntilPathQueueBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::BlockUntilPathQueueBlocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "BlockUntilPathQueueBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::PausePathfinding
// Il2CppName: PausePathfinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathProcessor::GraphUpdateLock (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::PausePathfinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "PausePathfinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::PausePathfindingSoon
// Il2CppName: PausePathfindingSoon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathProcessor::GraphUpdateLock (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::PausePathfindingSoon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "PausePathfindingSoon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Scan
// Il2CppName: Scan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::NavGraph*)>(&GlobalNamespace::AstarPath::Scan)> {
  static const MethodInfo* get() {
    static auto* graphToScan = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Scan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphToScan});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Scan
// Il2CppName: Scan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::ArrayW<::Pathfinding::NavGraph*>)>(&GlobalNamespace::AstarPath::Scan)> {
  static const MethodInfo* get() {
    static auto* graphsToScan = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Scan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphsToScan});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ScanAsync
// Il2CppName: ScanAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (GlobalNamespace::AstarPath::*)(::Pathfinding::NavGraph*)>(&GlobalNamespace::AstarPath::ScanAsync)> {
  static const MethodInfo* get() {
    static auto* graphToScan = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ScanAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphToScan});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ScanAsync
// Il2CppName: ScanAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (GlobalNamespace::AstarPath::*)(::ArrayW<::Pathfinding::NavGraph*>)>(&GlobalNamespace::AstarPath::ScanAsync)> {
  static const MethodInfo* get() {
    static auto* graphsToScan = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ScanAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphsToScan});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ScanGraph
// Il2CppName: ScanGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (GlobalNamespace::AstarPath::*)(::Pathfinding::NavGraph*)>(&GlobalNamespace::AstarPath::ScanGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ScanGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::WaitForPath
// Il2CppName: WaitForPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::WaitForPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "WaitForPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::BlockUntilCalculated
// Il2CppName: BlockUntilCalculated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::BlockUntilCalculated)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "BlockUntilCalculated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::RegisterSafeUpdate
// Il2CppName: RegisterSafeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::AstarPath::RegisterSafeUpdate)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "RegisterSafeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*, bool)>(&GlobalNamespace::AstarPath::StartPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pushToFront = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, pushToFront});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (GlobalNamespace::AstarPath::*)(::UnityEngine::Ray)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AstarPath::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$_ctor$b__92_0
// Il2CppName: <.ctor>b__92_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::$_ctor$b__92_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "<.ctor>b__92_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$InitializePathProcessor$b__124_1
// Il2CppName: <InitializePathProcessor>b__124_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::$InitializePathProcessor$b__124_1)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "<InitializePathProcessor>b__124_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$InitializePathProcessor$b__124_2
// Il2CppName: <InitializePathProcessor>b__124_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::$InitializePathProcessor$b__124_2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "<InitializePathProcessor>b__124_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
