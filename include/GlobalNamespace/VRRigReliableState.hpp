// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: IGorillaSerializeable
#include "GlobalNamespace/IGorillaSerializeable.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: TransferrableObject/ItemStates
// Already included the same include: GlobalNamespace/TransferrableObject.hpp
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: BodyDockPositions because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRigReliableState
  class VRRigReliableState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRigReliableState);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigReliableState*, "", "VRRigReliableState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8A
  #pragma pack(push, 1)
  // Autogenerated type: VRRigReliableState
  // [TokenAttribute] Offset: FFFFFFFF
  class VRRigReliableState : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::GlobalNamespace::IGorillaSerializeable*/ {
    public:
    public:
    // public System.Int32[] activeTransferrableObjectIndex
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> activeTransferrableObjectIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public TransferrableObject/PositionState[] transferrablePosStates
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::TransferrableObject::PositionState> transferrablePosStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransferrableObject::PositionState>) == 0x8);
    // public TransferrableObject/ItemStates[] transferrableItemStates
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::TransferrableObject::ItemStates> transferrableItemStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TransferrableObject::ItemStates>) == 0x8);
    // public BodyDockPositions/DropPositions[] transferableDockPositions
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::BodyDockPositions::DropPositions> transferableDockPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BodyDockPositions::DropPositions>) == 0x8);
    // public System.Int32 wearablesPackedStates
    // Size: 0x4
    // Offset: 0x48
    int wearablesPackedStates;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lThrowableProjectileIndex
    // Size: 0x4
    // Offset: 0x4C
    int lThrowableProjectileIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rThrowableProjectileIndex
    // Size: 0x4
    // Offset: 0x50
    int rThrowableProjectileIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color32 lThrowableProjectileColor
    // Size: 0x4
    // Offset: 0x54
    ::UnityEngine::Color32 lThrowableProjectileColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 rThrowableProjectileColor
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::Color32 rThrowableProjectileColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public System.Int32 randomThrowableIndex
    // Size: 0x4
    // Offset: 0x5C
    int randomThrowableIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isMicEnabled
    // Size: 0x1
    // Offset: 0x60
    bool isMicEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isOfflineVRRig
    // Size: 0x1
    // Offset: 0x61
    bool isOfflineVRRig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOfflineVRRig and: bDock
    char __padding11[0x6] = {};
    // private BodyDockPositions bDock
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::BodyDockPositions* bDock;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions*) == 0x8);
    // public System.Int32 sizeLayerMask
    // Size: 0x4
    // Offset: 0x70
    int sizeLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isBraceletLeftHanded
    // Size: 0x1
    // Offset: 0x74
    bool isBraceletLeftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBraceletLeftHanded and: braceletSelfIndex
    char __padding14[0x3] = {};
    // public System.Int32 braceletSelfIndex
    // Size: 0x4
    // Offset: 0x78
    int braceletSelfIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: braceletSelfIndex and: braceletBeadColors
    char __padding15[0x4] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Color> braceletBeadColors
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::Color>* braceletBeadColors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Color>*) == 0x8);
    // public System.Boolean isBuilderWatchEnabled
    // Size: 0x1
    // Offset: 0x88
    bool isBuilderWatchEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isDirty>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IGorillaSerializeable
    operator ::GlobalNamespace::IGorillaSerializeable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IGorillaSerializeable*>(this);
    }
    // static field const value: static private System.Int64 IS_MIC_ENABLED_BIT
    static constexpr const int64_t IS_MIC_ENABLED_BIT = 32;
    // Get static field: static private System.Int64 IS_MIC_ENABLED_BIT
    static int64_t _get_IS_MIC_ENABLED_BIT();
    // Set static field: static private System.Int64 IS_MIC_ENABLED_BIT
    static void _set_IS_MIC_ENABLED_BIT(int64_t value);
    // static field const value: static private System.Int64 BRACELET_LEFTHAND_BIT
    static constexpr const int64_t BRACELET_LEFTHAND_BIT = 64;
    // Get static field: static private System.Int64 BRACELET_LEFTHAND_BIT
    static int64_t _get_BRACELET_LEFTHAND_BIT();
    // Set static field: static private System.Int64 BRACELET_LEFTHAND_BIT
    static void _set_BRACELET_LEFTHAND_BIT(int64_t value);
    // static field const value: static private System.Int64 BUILDER_WATCH_ENABLED_BIT
    static constexpr const int64_t BUILDER_WATCH_ENABLED_BIT = 128;
    // Get static field: static private System.Int64 BUILDER_WATCH_ENABLED_BIT
    static int64_t _get_BUILDER_WATCH_ENABLED_BIT();
    // Set static field: static private System.Int64 BUILDER_WATCH_ENABLED_BIT
    static void _set_BUILDER_WATCH_ENABLED_BIT(int64_t value);
    // static field const value: static private System.Int32 BRACELET_NUM_BEADS_SHIFT
    static constexpr const int BRACELET_NUM_BEADS_SHIFT = 12;
    // Get static field: static private System.Int32 BRACELET_NUM_BEADS_SHIFT
    static int _get_BRACELET_NUM_BEADS_SHIFT();
    // Set static field: static private System.Int32 BRACELET_NUM_BEADS_SHIFT
    static void _set_BRACELET_NUM_BEADS_SHIFT(int value);
    // static field const value: static private System.Int32 LPROJECTILECOLOR_R_SHIFT
    static constexpr const int LPROJECTILECOLOR_R_SHIFT = 16;
    // Get static field: static private System.Int32 LPROJECTILECOLOR_R_SHIFT
    static int _get_LPROJECTILECOLOR_R_SHIFT();
    // Set static field: static private System.Int32 LPROJECTILECOLOR_R_SHIFT
    static void _set_LPROJECTILECOLOR_R_SHIFT(int value);
    // static field const value: static private System.Int32 LPROJECTILECOLOR_G_SHIFT
    static constexpr const int LPROJECTILECOLOR_G_SHIFT = 24;
    // Get static field: static private System.Int32 LPROJECTILECOLOR_G_SHIFT
    static int _get_LPROJECTILECOLOR_G_SHIFT();
    // Set static field: static private System.Int32 LPROJECTILECOLOR_G_SHIFT
    static void _set_LPROJECTILECOLOR_G_SHIFT(int value);
    // static field const value: static private System.Int32 LPROJECTILECOLOR_B_SHIFT
    static constexpr const int LPROJECTILECOLOR_B_SHIFT = 32;
    // Get static field: static private System.Int32 LPROJECTILECOLOR_B_SHIFT
    static int _get_LPROJECTILECOLOR_B_SHIFT();
    // Set static field: static private System.Int32 LPROJECTILECOLOR_B_SHIFT
    static void _set_LPROJECTILECOLOR_B_SHIFT(int value);
    // static field const value: static private System.Int32 RPROJECTILECOLOR_R_SHIFT
    static constexpr const int RPROJECTILECOLOR_R_SHIFT = 40;
    // Get static field: static private System.Int32 RPROJECTILECOLOR_R_SHIFT
    static int _get_RPROJECTILECOLOR_R_SHIFT();
    // Set static field: static private System.Int32 RPROJECTILECOLOR_R_SHIFT
    static void _set_RPROJECTILECOLOR_R_SHIFT(int value);
    // static field const value: static private System.Int32 RPROJECTILECOLOR_G_SHIFT
    static constexpr const int RPROJECTILECOLOR_G_SHIFT = 48;
    // Get static field: static private System.Int32 RPROJECTILECOLOR_G_SHIFT
    static int _get_RPROJECTILECOLOR_G_SHIFT();
    // Set static field: static private System.Int32 RPROJECTILECOLOR_G_SHIFT
    static void _set_RPROJECTILECOLOR_G_SHIFT(int value);
    // static field const value: static private System.Int32 RPROJECTILECOLOR_B_SHIFT
    static constexpr const int RPROJECTILECOLOR_B_SHIFT = 56;
    // Get static field: static private System.Int32 RPROJECTILECOLOR_B_SHIFT
    static int _get_RPROJECTILECOLOR_B_SHIFT();
    // Set static field: static private System.Int32 RPROJECTILECOLOR_B_SHIFT
    static void _set_RPROJECTILECOLOR_B_SHIFT(int value);
    // static field const value: static private System.Int32 POS_STATES_SHIFT
    static constexpr const int POS_STATES_SHIFT = 32;
    // Get static field: static private System.Int32 POS_STATES_SHIFT
    static int _get_POS_STATES_SHIFT();
    // Set static field: static private System.Int32 POS_STATES_SHIFT
    static void _set_POS_STATES_SHIFT(int value);
    // static field const value: static private System.Int32 ITEM_STATES_SHIFT
    static constexpr const int ITEM_STATES_SHIFT = 40;
    // Get static field: static private System.Int32 ITEM_STATES_SHIFT
    static int _get_ITEM_STATES_SHIFT();
    // Set static field: static private System.Int32 ITEM_STATES_SHIFT
    static void _set_ITEM_STATES_SHIFT(int value);
    // static field const value: static private System.Int32 DOCK_POSITIONS_SHIFT
    static constexpr const int DOCK_POSITIONS_SHIFT = 48;
    // Get static field: static private System.Int32 DOCK_POSITIONS_SHIFT
    static int _get_DOCK_POSITIONS_SHIFT();
    // Set static field: static private System.Int32 DOCK_POSITIONS_SHIFT
    static void _set_DOCK_POSITIONS_SHIFT(int value);
    // static field const value: static private System.Int32 BRACELET_SELF_INDEX_SHIFT
    static constexpr const int BRACELET_SELF_INDEX_SHIFT = 60;
    // Get static field: static private System.Int32 BRACELET_SELF_INDEX_SHIFT
    static int _get_BRACELET_SELF_INDEX_SHIFT();
    // Set static field: static private System.Int32 BRACELET_SELF_INDEX_SHIFT
    static void _set_BRACELET_SELF_INDEX_SHIFT(int value);
    // Get instance field reference: public System.Int32[] activeTransferrableObjectIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_activeTransferrableObjectIndex();
    // Get instance field reference: public TransferrableObject/PositionState[] transferrablePosStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject::PositionState>& dyn_transferrablePosStates();
    // Get instance field reference: public TransferrableObject/ItemStates[] transferrableItemStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject::ItemStates>& dyn_transferrableItemStates();
    // Get instance field reference: public BodyDockPositions/DropPositions[] transferableDockPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BodyDockPositions::DropPositions>& dyn_transferableDockPositions();
    // Get instance field reference: public System.Int32 wearablesPackedStates
    [[deprecated("Use field access instead!")]] int& dyn_wearablesPackedStates();
    // Get instance field reference: public System.Int32 lThrowableProjectileIndex
    [[deprecated("Use field access instead!")]] int& dyn_lThrowableProjectileIndex();
    // Get instance field reference: public System.Int32 rThrowableProjectileIndex
    [[deprecated("Use field access instead!")]] int& dyn_rThrowableProjectileIndex();
    // Get instance field reference: public UnityEngine.Color32 lThrowableProjectileColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_lThrowableProjectileColor();
    // Get instance field reference: public UnityEngine.Color32 rThrowableProjectileColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_rThrowableProjectileColor();
    // Get instance field reference: public System.Int32 randomThrowableIndex
    [[deprecated("Use field access instead!")]] int& dyn_randomThrowableIndex();
    // Get instance field reference: public System.Boolean isMicEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isMicEnabled();
    // Get instance field reference: private System.Boolean isOfflineVRRig
    [[deprecated("Use field access instead!")]] bool& dyn_isOfflineVRRig();
    // Get instance field reference: private BodyDockPositions bDock
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& dyn_bDock();
    // Get instance field reference: public System.Int32 sizeLayerMask
    [[deprecated("Use field access instead!")]] int& dyn_sizeLayerMask();
    // Get instance field reference: public System.Boolean isBraceletLeftHanded
    [[deprecated("Use field access instead!")]] bool& dyn_isBraceletLeftHanded();
    // Get instance field reference: public System.Int32 braceletSelfIndex
    [[deprecated("Use field access instead!")]] int& dyn_braceletSelfIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Color> braceletBeadColors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Color>*& dyn_braceletBeadColors();
    // Get instance field reference: public System.Boolean isBuilderWatchEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isBuilderWatchEnabled();
    // Get instance field reference: private System.Boolean <isDirty>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isDirty$k__BackingField();
    // public System.Boolean get_HasBracelet()
    // Offset: 0x26A826C
    bool get_HasBracelet();
    // public System.Boolean get_isDirty()
    // Offset: 0x26A82BC
    bool get_isDirty();
    // private System.Void set_isDirty(System.Boolean value)
    // Offset: 0x26A82C4
    void set_isDirty(bool value);
    // private System.Void Awake()
    // Offset: 0x26A82D0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x26A83D4
    void OnDestroy();
    // public System.Void SetIsDirty()
    // Offset: 0x26A84D8
    void SetIsDirty();
    // public System.Void SetIsNotDirty()
    // Offset: 0x26A84E4
    void SetIsNotDirty();
    // public System.Void SharedStart(System.Boolean isOfflineVRRig_, BodyDockPositions bDock_)
    // Offset: 0x26A850C
    void SharedStart(bool isOfflineVRRig_, ::GlobalNamespace::BodyDockPositions* bDock_);
    // private System.Void IGorillaSerializeable.OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26A8664
    void IGorillaSerializeable_OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void IGorillaSerializeable.OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26A8B1C
    void IGorillaSerializeable_OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // static private System.Int64 PackBeadColors(System.Collections.Generic.List`1<UnityEngine.Color> beadColors, System.Int32 fromIndex)
    // Offset: 0x26A89FC
    static int64_t PackBeadColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* beadColors, int fromIndex);
    // static private System.Void UnpackBeadColors(System.Int64 packed, System.Int32 startIndex, System.Int32 endIndex, System.Collections.Generic.List`1<UnityEngine.Color> beadColorsResult)
    // Offset: 0x26A9008
    static void UnpackBeadColors(int64_t packed, int startIndex, int endIndex, ::System::Collections::Generic::List_1<::UnityEngine::Color>* beadColorsResult);
    // public System.Void .ctor()
    // Offset: 0x26A98CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRigReliableState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRigReliableState*, creationType>()));
    }
    // public override System.Void OnJoinedRoom()
    // Offset: 0x26A84EC
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
  }; // VRRigReliableState
  #pragma pack(pop)
  static check_size<sizeof(VRRigReliableState), 137 + sizeof(bool)> __GlobalNamespace_VRRigReliableStateSizeCheck;
  static_assert(sizeof(VRRigReliableState) == 0x8A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::get_HasBracelet
// Il2CppName: get_HasBracelet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::get_HasBracelet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "get_HasBracelet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::get_isDirty
// Il2CppName: get_isDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::get_isDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "get_isDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::set_isDirty
// Il2CppName: set_isDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)(bool)>(&GlobalNamespace::VRRigReliableState::set_isDirty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "set_isDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::SetIsDirty
// Il2CppName: SetIsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::SetIsDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "SetIsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::SetIsNotDirty
// Il2CppName: SetIsNotDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::SetIsNotDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "SetIsNotDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::SharedStart
// Il2CppName: SharedStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)(bool, ::GlobalNamespace::BodyDockPositions*)>(&GlobalNamespace::VRRigReliableState::SharedStart)> {
  static const MethodInfo* get() {
    static auto* isOfflineVRRig_ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bDock_ = &::il2cpp_utils::GetClassFromName("", "BodyDockPositions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "SharedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOfflineVRRig_, bDock_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeWrite
// Il2CppName: IGorillaSerializeable.OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "IGorillaSerializeable.OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeRead
// Il2CppName: IGorillaSerializeable.OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "IGorillaSerializeable.OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::PackBeadColors
// Il2CppName: PackBeadColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*, int)>(&GlobalNamespace::VRRigReliableState::PackBeadColors)> {
  static const MethodInfo* get() {
    static auto* beadColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* fromIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "PackBeadColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beadColors, fromIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::UnpackBeadColors
// Il2CppName: UnpackBeadColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, int, int, ::System::Collections::Generic::List_1<::UnityEngine::Color>*)>(&GlobalNamespace::VRRigReliableState::UnpackBeadColors)> {
  static const MethodInfo* get() {
    static auto* packed = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* beadColorsResult = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "UnpackBeadColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packed, startIndex, endIndex, beadColorsResult});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VRRigReliableState::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigReliableState::*)()>(&GlobalNamespace::VRRigReliableState::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigReliableState*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
