// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Fusion.INetworkRunnerCallbacks
#include "Fusion/INetworkRunnerCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkSystemFusion
  class NetworkSystemFusion;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: HostMigrationToken
  class HostMigrationToken;
  // Forward declaring type: NetworkInput
  struct NetworkInput;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: SessionInfo
  class SessionInfo;
  // Forward declaring type: ShutdownReason
  struct ShutdownReason;
  // Forward declaring type: SimulationMessagePtr
  struct SimulationMessagePtr;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionCallbackHandler
  class FusionCallbackHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionCallbackHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionCallbackHandler*, "", "FusionCallbackHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: FusionCallbackHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class FusionCallbackHandler : public ::UnityEngine::MonoBehaviour/*, public ::Fusion::INetworkRunnerCallbacks*/ {
    public:
    // Nested type: ::GlobalNamespace::FusionCallbackHandler::$RemoveCallbacks$d__3
    struct $RemoveCallbacks$d__3;
    public:
    // private NetworkSystemFusion parent
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NetworkSystemFusion* parent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkSystemFusion*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::INetworkRunnerCallbacks
    operator ::Fusion::INetworkRunnerCallbacks() noexcept {
      return *reinterpret_cast<::Fusion::INetworkRunnerCallbacks*>(this);
    }
    // Get instance field reference: private NetworkSystemFusion parent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkSystemFusion*& dyn_parent();
    // public System.Void Setup(NetworkSystemFusion parentController)
    // Offset: 0x289DAF8
    void Setup(::GlobalNamespace::NetworkSystemFusion* parentController);
    // private System.Void OnDestroy()
    // Offset: 0x289DBC0
    void OnDestroy();
    // private System.Void RemoveCallbacks()
    // Offset: 0x289DBC4
    void RemoveCallbacks();
    // public System.Void OnConnectedToServer(Fusion.NetworkRunner runner)
    // Offset: 0x289DC78
    void OnConnectedToServer(::Fusion::NetworkRunner* runner);
    // public System.Void OnConnectFailed(Fusion.NetworkRunner runner, Fusion.Sockets.NetAddress remoteAddress, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0x289DC94
    void OnConnectFailed(::Fusion::NetworkRunner* runner, ::Fusion::Sockets::NetAddress remoteAddress, ::Fusion::Sockets::NetConnectFailedReason reason);
    // public System.Void OnConnectRequest(Fusion.NetworkRunner runner, Fusion.NetworkRunnerCallbackArgs/ConnectRequest request, System.Byte[] token)
    // Offset: 0x289DCB4
    void OnConnectRequest(::Fusion::NetworkRunner* runner, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest* request, ::ArrayW<uint8_t> token);
    // public System.Void OnCustomAuthenticationResponse(Fusion.NetworkRunner runner, System.Collections.Generic.Dictionary`2<System.String,System.Object> data)
    // Offset: 0x289DCB8
    void OnCustomAuthenticationResponse(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* data);
    // public System.Void OnDisconnectedFromServer(Fusion.NetworkRunner runner)
    // Offset: 0x289DEC4
    void OnDisconnectedFromServer(::Fusion::NetworkRunner* runner);
    // public System.Void OnHostMigration(Fusion.NetworkRunner runner, Fusion.HostMigrationToken hostMigrationToken)
    // Offset: 0x289DEE0
    void OnHostMigration(::Fusion::NetworkRunner* runner, ::Fusion::HostMigrationToken* hostMigrationToken);
    // public System.Void OnInput(Fusion.NetworkRunner runner, Fusion.NetworkInput input)
    // Offset: 0x289DF00
    void OnInput(::Fusion::NetworkRunner* runner, ::Fusion::NetworkInput input);
    // public System.Void OnInputMissing(Fusion.NetworkRunner runner, Fusion.PlayerRef player, Fusion.NetworkInput input)
    // Offset: 0x289DFB0
    void OnInputMissing(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::Fusion::NetworkInput input);
    // public System.Void OnPlayerJoined(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x289DFB4
    void OnPlayerJoined(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // public System.Void OnPlayerLeft(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x289DFD4
    void OnPlayerLeft(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // public System.Void OnReliableDataReceived(Fusion.NetworkRunner runner, Fusion.PlayerRef player, System.ArraySegment`1<System.Byte> data)
    // Offset: 0x289DFF4
    void OnReliableDataReceived(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::System::ArraySegment_1<uint8_t> data);
    // public System.Void OnSceneLoadDone(Fusion.NetworkRunner runner)
    // Offset: 0x289DFF8
    void OnSceneLoadDone(::Fusion::NetworkRunner* runner);
    // public System.Void OnSceneLoadStart(Fusion.NetworkRunner runner)
    // Offset: 0x289DFFC
    void OnSceneLoadStart(::Fusion::NetworkRunner* runner);
    // public System.Void OnSessionListUpdated(Fusion.NetworkRunner runner, System.Collections.Generic.List`1<Fusion.SessionInfo> sessionList)
    // Offset: 0x289E000
    void OnSessionListUpdated(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionList);
    // public System.Void OnShutdown(Fusion.NetworkRunner runner, Fusion.ShutdownReason shutdownReason)
    // Offset: 0x289E004
    void OnShutdown(::Fusion::NetworkRunner* runner, ::Fusion::ShutdownReason shutdownReason);
    // public System.Void OnUserSimulationMessage(Fusion.NetworkRunner runner, Fusion.SimulationMessagePtr message)
    // Offset: 0x289E020
    void OnUserSimulationMessage(::Fusion::NetworkRunner* runner, ::Fusion::SimulationMessagePtr message);
    // public System.Void .ctor()
    // Offset: 0x289E024
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionCallbackHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionCallbackHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionCallbackHandler*, creationType>()));
    }
  }; // FusionCallbackHandler
  #pragma pack(pop)
  static check_size<sizeof(FusionCallbackHandler), 32 + sizeof(::GlobalNamespace::NetworkSystemFusion*)> __GlobalNamespace_FusionCallbackHandlerSizeCheck;
  static_assert(sizeof(FusionCallbackHandler) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::GlobalNamespace::NetworkSystemFusion*)>(&GlobalNamespace::FusionCallbackHandler::Setup)> {
  static const MethodInfo* get() {
    static auto* parentController = &::il2cpp_utils::GetClassFromName("", "NetworkSystemFusion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)()>(&GlobalNamespace::FusionCallbackHandler::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::RemoveCallbacks
// Il2CppName: RemoveCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)()>(&GlobalNamespace::FusionCallbackHandler::RemoveCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "RemoveCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnConnectedToServer
// Il2CppName: OnConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionCallbackHandler::OnConnectedToServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnConnectFailed
// Il2CppName: OnConnectFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&GlobalNamespace::FusionCallbackHandler::OnConnectFailed)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnConnectFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, remoteAddress, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnConnectRequest
// Il2CppName: OnConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest*, ::ArrayW<uint8_t>)>(&GlobalNamespace::FusionCallbackHandler::OnConnectRequest)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerCallbackArgs/ConnectRequest")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, request, token});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnCustomAuthenticationResponse
// Il2CppName: OnCustomAuthenticationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*)>(&GlobalNamespace::FusionCallbackHandler::OnCustomAuthenticationResponse)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnCustomAuthenticationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnDisconnectedFromServer
// Il2CppName: OnDisconnectedFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionCallbackHandler::OnDisconnectedFromServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnDisconnectedFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnHostMigration
// Il2CppName: OnHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::HostMigrationToken*)>(&GlobalNamespace::FusionCallbackHandler::OnHostMigration)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* hostMigrationToken = &::il2cpp_utils::GetClassFromName("Fusion", "HostMigrationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, hostMigrationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnInput
// Il2CppName: OnInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkInput)>(&GlobalNamespace::FusionCallbackHandler::OnInput)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnInputMissing
// Il2CppName: OnInputMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::Fusion::NetworkInput)>(&GlobalNamespace::FusionCallbackHandler::OnInputMissing)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnInputMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnPlayerJoined
// Il2CppName: OnPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&GlobalNamespace::FusionCallbackHandler::OnPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnPlayerLeft
// Il2CppName: OnPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&GlobalNamespace::FusionCallbackHandler::OnPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnReliableDataReceived
// Il2CppName: OnReliableDataReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::System::ArraySegment_1<uint8_t>)>(&GlobalNamespace::FusionCallbackHandler::OnReliableDataReceived)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnReliableDataReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnSceneLoadDone
// Il2CppName: OnSceneLoadDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionCallbackHandler::OnSceneLoadDone)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnSceneLoadDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnSceneLoadStart
// Il2CppName: OnSceneLoadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*)>(&GlobalNamespace::FusionCallbackHandler::OnSceneLoadStart)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnSceneLoadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnSessionListUpdated
// Il2CppName: OnSessionListUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*)>(&GlobalNamespace::FusionCallbackHandler::OnSessionListUpdated)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnSessionListUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, sessionList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnShutdown
// Il2CppName: OnShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::ShutdownReason)>(&GlobalNamespace::FusionCallbackHandler::OnShutdown)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* shutdownReason = &::il2cpp_utils::GetClassFromName("Fusion", "ShutdownReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, shutdownReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::OnUserSimulationMessage
// Il2CppName: OnUserSimulationMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionCallbackHandler::*)(::Fusion::NetworkRunner*, ::Fusion::SimulationMessagePtr)>(&GlobalNamespace::FusionCallbackHandler::OnUserSimulationMessage)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessagePtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionCallbackHandler*), "OnUserSimulationMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionCallbackHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
