// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IOVRAnchorComponent`1
#include "GlobalNamespace/IOVRAnchorComponent_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRAnchor because it is already included!
  // Skipping declaration: OVRTask`1 because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRBounded3D
  struct OVRBounded3D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRBounded3D, "", "OVRBounded3D");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRBounded3D
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRBounded3D/*, public ::System::ValueType, public ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRBounded3D>, public ::System::IEquatable_1<::GlobalNamespace::OVRBounded3D>*/ {
    public:
    public:
    // private readonly System.UInt64 <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: OVRBounded3D
    constexpr OVRBounded3D(uint64_t Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRBounded3D>
    operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRBounded3D>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRBounded3D>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRBounded3D>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRBounded3D>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRBounded3D>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return Handle;
    }
    // Get static field: static public readonly OVRBounded3D Null
    static ::GlobalNamespace::OVRBounded3D _get_Null();
    // Set static field: static public readonly OVRBounded3D Null
    static void _set_Null(::GlobalNamespace::OVRBounded3D value);
    // Get instance field reference: private readonly System.UInt64 <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$Handle$k__BackingField();
    // private OVRPlugin/SpaceComponentType IOVRAnchorComponent<OVRBounded3D>.get_Type()
    // Offset: 0x48B0AAC
    ::GlobalNamespace::OVRPlugin::SpaceComponentType IOVRAnchorComponent$OVRBounded3D$_get_Type();
    // private System.UInt64 IOVRAnchorComponent<OVRBounded3D>.get_Handle()
    // Offset: 0x48B0ABC
    uint64_t IOVRAnchorComponent$OVRBounded3D$_get_Handle();
    // private OVRBounded3D IOVRAnchorComponent<OVRBounded3D>.FromAnchor(OVRAnchor anchor)
    // Offset: 0x48B0AC4
    ::GlobalNamespace::OVRBounded3D IOVRAnchorComponent$OVRBounded3D$_FromAnchor(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean get_IsNull()
    // Offset: 0x48B0AD8
    bool get_IsNull();
    // public System.Boolean get_IsEnabled()
    // Offset: 0x48B0AE8
    bool get_IsEnabled();
    // private OVRTask`1<System.Boolean> IOVRAnchorComponent<OVRBounded3D>.SetEnabledAsync(System.Boolean enabled, System.Double timeout)
    // Offset: 0x48B0B90
    ::GlobalNamespace::OVRTask_1<bool> IOVRAnchorComponent$OVRBounded3D$_SetEnabledAsync(bool enabled, double timeout);
    // public System.Boolean Equals(OVRBounded3D other)
    // Offset: 0x48B0BDC
    bool Equals(::GlobalNamespace::OVRBounded3D other);
    // OVRPlugin/SpaceComponentType get_Type()
    // Offset: 0x48B0AB4
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_Type();
    // System.UInt64 get_Handle()
    // Offset: 0x48B0D50
    uint64_t get_Handle();
    // private System.Void .ctor(OVRAnchor anchor)
    // Offset: 0x48B0ACC
    OVRBounded3D(::GlobalNamespace::OVRAnchor anchor);
    // public UnityEngine.Bounds get_BoundingBox()
    // Offset: 0x48B0D58
    ::UnityEngine::Bounds get_BoundingBox();
    // private UnityEngine.Bounds ConvertBounds(OVRPlugin/Boundsf openXrBounds)
    // Offset: 0x48B0E64
    ::UnityEngine::Bounds ConvertBounds(::GlobalNamespace::OVRPlugin::Boundsf openXrBounds);
    // static private System.Void .cctor()
    // Offset: 0x48B0EB4
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x48B0C04
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x48B0C7C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x48B0CCC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // OVRBounded3D
  #pragma pack(pop)
  static check_size<sizeof(OVRBounded3D), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRBounded3DSizeCheck;
  static_assert(sizeof(OVRBounded3D) == 0x8);
  // static public System.Boolean op_Equality(OVRBounded3D lhs, OVRBounded3D rhs)
  // Offset: 0x48B0BEC
  bool operator ==(const ::GlobalNamespace::OVRBounded3D& lhs, const ::GlobalNamespace::OVRBounded3D& rhs);
  // static public System.Boolean op_Inequality(OVRBounded3D lhs, OVRBounded3D rhs)
  // Offset: 0x48B0BF8
  bool operator !=(const ::GlobalNamespace::OVRBounded3D& lhs, const ::GlobalNamespace::OVRBounded3D& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_get_Type
// Il2CppName: IOVRAnchorComponent<OVRBounded3D>.get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "IOVRAnchorComponent<OVRBounded3D>.get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_get_Handle
// Il2CppName: IOVRAnchorComponent<OVRBounded3D>.get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "IOVRAnchorComponent<OVRBounded3D>.get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_FromAnchor
// Il2CppName: IOVRAnchorComponent<OVRBounded3D>.FromAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRBounded3D (GlobalNamespace::OVRBounded3D::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_FromAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "IOVRAnchorComponent<OVRBounded3D>.FromAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_SetEnabledAsync
// Il2CppName: IOVRAnchorComponent<OVRBounded3D>.SetEnabledAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRBounded3D::*)(bool, double)>(&GlobalNamespace::OVRBounded3D::IOVRAnchorComponent$OVRBounded3D$_SetEnabledAsync)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "IOVRAnchorComponent<OVRBounded3D>.SetEnabledAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, timeout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRBounded3D::*)(::GlobalNamespace::OVRBounded3D)>(&GlobalNamespace::OVRBounded3D::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRBounded3D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::OVRBounded3D
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::get_BoundingBox
// Il2CppName: get_BoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::get_BoundingBox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "get_BoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::ConvertBounds
// Il2CppName: ConvertBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (GlobalNamespace::OVRBounded3D::*)(::GlobalNamespace::OVRPlugin::Boundsf)>(&GlobalNamespace::OVRBounded3D::ConvertBounds)> {
  static const MethodInfo* get() {
    static auto* openXrBounds = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Boundsf")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "ConvertBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openXrBounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRBounded3D::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRBounded3D::*)(::Il2CppObject*)>(&GlobalNamespace::OVRBounded3D::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OVRBounded3D::*)()>(&GlobalNamespace::OVRBounded3D::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRBounded3D), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRBounded3D::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
