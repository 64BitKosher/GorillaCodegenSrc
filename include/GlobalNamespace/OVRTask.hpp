// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTask`1
#include "GlobalNamespace/OVRTask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTask
  class OVRTask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTask);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTask*, "", "OVRTask");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRTask
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTask : public ::Il2CppObject {
    public:
    // static OVRTask`1<TResult> FromGuid(System.Guid id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> FromGuid(::System::Guid id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::FromGuid");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "FromGuid", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static OVRTask`1<TResult> FromRequest(System.UInt64 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> FromRequest(uint64_t id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::FromRequest");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "FromRequest", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static OVRTask`1<TResult> FromResult(TResult result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> FromResult(TResult result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::FromResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "FromResult", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, result);
    }
    // static OVRTask`1<TResult> GetExisting(System.Guid id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> GetExisting(::System::Guid id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::GetExisting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "GetExisting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static OVRTask`1<TResult> GetExisting(System.UInt64 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> GetExisting(uint64_t id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::GetExisting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "GetExisting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static System.Void SetResult(System.Guid id, TResult result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static void SetResult(::System::Guid id, TResult result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::SetResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "SetResult", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id, result);
    }
    // static System.Void SetResult(System.UInt64 id, TResult result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static void SetResult(uint64_t id, TResult result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::SetResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "SetResult", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id, result);
    }
    // static private OVRTask`1<TResult> Get(System.Guid id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> Get(::System::Guid id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "Get", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static private OVRTask`1<TResult> Create(System.Guid id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::GlobalNamespace::OVRTask_1<TResult> Create(::System::Guid id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTask::Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRTask", "Create", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<TResult>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, id);
    }
    // static System.Guid GetId(System.UInt64 value)
    // Offset: 0x493EFB8
    static ::System::Guid GetId(uint64_t value);
  }; // OVRTask
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::FromGuid
// Il2CppName: FromGuid
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::FromRequest
// Il2CppName: FromRequest
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::FromResult
// Il2CppName: FromResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::GetExisting
// Il2CppName: GetExisting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::GetExisting
// Il2CppName: GetExisting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::SetResult
// Il2CppName: SetResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::SetResult
// Il2CppName: SetResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::Create
// Il2CppName: Create
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRTask::GetId
// Il2CppName: GetId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)(uint64_t)>(&GlobalNamespace::OVRTask::GetId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTask*), "GetId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
