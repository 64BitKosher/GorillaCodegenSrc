// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LegalAgreements
#include "GlobalNamespace/LegalAgreements.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0*, "", "LegalAgreements/<>c__DisplayClass26_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: LegalAgreements/<>c__DisplayClass26_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class LegalAgreements::$$c__DisplayClass26_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String result
    // Size: 0x8
    // Offset: 0x10
    ::StringW result;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 state
    // Size: 0x4
    // Offset: 0x18
    int state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String result
    [[deprecated("Use field access instead!")]] ::StringW& dyn_result();
    // Get instance field reference: public System.Int32 state
    [[deprecated("Use field access instead!")]] int& dyn_state();
    // public System.Void .ctor()
    // Offset: 0x27538BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegalAgreements::$$c__DisplayClass26_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegalAgreements::$$c__DisplayClass26_0*, creationType>()));
    }
    // System.Void <GetTitleDataAsync>b__0(System.String res)
    // Offset: 0x27538C4
    void $GetTitleDataAsync$b__0(::StringW res);
    // System.Void <GetTitleDataAsync>b__1(PlayFab.PlayFabError err)
    // Offset: 0x27538E8
    void $GetTitleDataAsync$b__1(::PlayFab::PlayFabError* err);
  }; // LegalAgreements/<>c__DisplayClass26_0
  #pragma pack(pop)
  static check_size<sizeof(LegalAgreements::$$c__DisplayClass26_0), 24 + sizeof(int)> __GlobalNamespace_LegalAgreements_$$c__DisplayClass26_0SizeCheck;
  static_assert(sizeof(LegalAgreements::$$c__DisplayClass26_0) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__0
// Il2CppName: <GetTitleDataAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::*)(::StringW)>(&GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__0)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0*), "<GetTitleDataAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__1
// Il2CppName: <GetTitleDataAsync>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::*)(::PlayFab::PlayFabError*)>(&GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__1)> {
  static const MethodInfo* get() {
    static auto* err = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0*), "<GetTitleDataAsync>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{err});
  }
};
