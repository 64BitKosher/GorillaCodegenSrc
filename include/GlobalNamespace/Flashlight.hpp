// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Light
  class Light;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Flashlight
  class Flashlight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Flashlight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Flashlight*, "", "Flashlight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Flashlight
  // [TokenAttribute] Offset: FFFFFFFF
  class Flashlight : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject lightVolume
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* lightVolume;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Light spotlight
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Light* spotlight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Light*) == 0x8);
    // public UnityEngine.GameObject bulbGlow
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* bulbGlow;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject lightVolume
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_lightVolume();
    // Get instance field reference: public UnityEngine.Light spotlight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn_spotlight();
    // Get instance field reference: public UnityEngine.GameObject bulbGlow
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bulbGlow();
    // private System.Void LateUpdate()
    // Offset: 0x2931D5C
    void LateUpdate();
    // public System.Void ToggleFlashlight()
    // Offset: 0x2931F30
    void ToggleFlashlight();
    // public System.Void EnableFlashlight(System.Boolean doEnable)
    // Offset: 0x2931FC0
    void EnableFlashlight(bool doEnable);
    // public System.Void .ctor()
    // Offset: 0x293201C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Flashlight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Flashlight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Flashlight*, creationType>()));
    }
  }; // Flashlight
  #pragma pack(pop)
  static check_size<sizeof(Flashlight), 48 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_FlashlightSizeCheck;
  static_assert(sizeof(Flashlight) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Flashlight::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Flashlight::*)()>(&GlobalNamespace::Flashlight::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Flashlight*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Flashlight::ToggleFlashlight
// Il2CppName: ToggleFlashlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Flashlight::*)()>(&GlobalNamespace::Flashlight::ToggleFlashlight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Flashlight*), "ToggleFlashlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Flashlight::EnableFlashlight
// Il2CppName: EnableFlashlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Flashlight::*)(bool)>(&GlobalNamespace::Flashlight::EnableFlashlight)> {
  static const MethodInfo* get() {
    static auto* doEnable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Flashlight*), "EnableFlashlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doEnable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Flashlight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
