// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SnowballThrowable
  class SnowballThrowable;
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SnowballMaker
  class SnowballMaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SnowballMaker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SnowballMaker*, "", "SnowballMaker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: SnowballMaker
  // [TokenAttribute] Offset: FFFFFFFF
  class SnowballMaker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x20
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: snowballs
    char __padding0[0x7] = {};
    // private SnowballThrowable[] <snowballs>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::SnowballThrowable*> snowballs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SnowballThrowable*>) == 0x8);
    // public GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    public:
    // Get static field: static private SnowballMaker <leftHandInstance>k__BackingField
    static ::GlobalNamespace::SnowballMaker* _get_$leftHandInstance$k__BackingField();
    // Set static field: static private SnowballMaker <leftHandInstance>k__BackingField
    static void _set_$leftHandInstance$k__BackingField(::GlobalNamespace::SnowballMaker* value);
    // Get static field: static private SnowballMaker <rightHandInstance>k__BackingField
    static ::GlobalNamespace::SnowballMaker* _get_$rightHandInstance$k__BackingField();
    // Set static field: static private SnowballMaker <rightHandInstance>k__BackingField
    static void _set_$rightHandInstance$k__BackingField(::GlobalNamespace::SnowballMaker* value);
    // Get instance field reference: public System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: private SnowballThrowable[] <snowballs>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SnowballThrowable*>& dyn_$snowballs$k__BackingField();
    // Get instance field reference: public GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // static public SnowballMaker get_leftHandInstance()
    // Offset: 0x269D9D0
    static ::GlobalNamespace::SnowballMaker* get_leftHandInstance();
    // static private System.Void set_leftHandInstance(SnowballMaker value)
    // Offset: 0x269DA18
    static void set_leftHandInstance(::GlobalNamespace::SnowballMaker* value);
    // static public SnowballMaker get_rightHandInstance()
    // Offset: 0x269DA70
    static ::GlobalNamespace::SnowballMaker* get_rightHandInstance();
    // static private System.Void set_rightHandInstance(SnowballMaker value)
    // Offset: 0x269DAB8
    static void set_rightHandInstance(::GlobalNamespace::SnowballMaker* value);
    // public SnowballThrowable[] get_snowballs()
    // Offset: 0x269DB08
    ::ArrayW<::GlobalNamespace::SnowballThrowable*> get_snowballs();
    // private System.Void set_snowballs(SnowballThrowable[] value)
    // Offset: 0x269DB10
    void set_snowballs(::ArrayW<::GlobalNamespace::SnowballThrowable*> value);
    // private System.Void Awake()
    // Offset: 0x269DB18
    void Awake();
    // System.Void SetupThrowables(SnowballThrowable[] newThrowables)
    // Offset: 0x269DCBC
    void SetupThrowables(::ArrayW<::GlobalNamespace::SnowballThrowable*> newThrowables);
    // protected System.Void LateUpdate()
    // Offset: 0x269DCC4
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x269E2B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnowballMaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnowballMaker*, creationType>()));
    }
  }; // SnowballMaker
  #pragma pack(pop)
  static check_size<sizeof(SnowballMaker), 48 + sizeof(::GlobalNamespace::GorillaVelocityEstimator*)> __GlobalNamespace_SnowballMakerSizeCheck;
  static_assert(sizeof(SnowballMaker) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::get_leftHandInstance
// Il2CppName: get_leftHandInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SnowballMaker* (*)()>(&GlobalNamespace::SnowballMaker::get_leftHandInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "get_leftHandInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::set_leftHandInstance
// Il2CppName: set_leftHandInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::SnowballMaker*)>(&GlobalNamespace::SnowballMaker::set_leftHandInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SnowballMaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "set_leftHandInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::get_rightHandInstance
// Il2CppName: get_rightHandInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SnowballMaker* (*)()>(&GlobalNamespace::SnowballMaker::get_rightHandInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "get_rightHandInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::set_rightHandInstance
// Il2CppName: set_rightHandInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::SnowballMaker*)>(&GlobalNamespace::SnowballMaker::set_rightHandInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SnowballMaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "set_rightHandInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::get_snowballs
// Il2CppName: get_snowballs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::SnowballThrowable*> (GlobalNamespace::SnowballMaker::*)()>(&GlobalNamespace::SnowballMaker::get_snowballs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "get_snowballs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::set_snowballs
// Il2CppName: set_snowballs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballMaker::*)(::ArrayW<::GlobalNamespace::SnowballThrowable*>)>(&GlobalNamespace::SnowballMaker::set_snowballs)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "SnowballThrowable"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "set_snowballs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballMaker::*)()>(&GlobalNamespace::SnowballMaker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::SetupThrowables
// Il2CppName: SetupThrowables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballMaker::*)(::ArrayW<::GlobalNamespace::SnowballThrowable*>)>(&GlobalNamespace::SnowballMaker::SetupThrowables)> {
  static const MethodInfo* get() {
    static auto* newThrowables = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "SnowballThrowable"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "SetupThrowables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newThrowables});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballMaker::*)()>(&GlobalNamespace::SnowballMaker::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballMaker*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballMaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
