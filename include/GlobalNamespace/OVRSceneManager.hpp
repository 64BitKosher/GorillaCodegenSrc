// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRAnchor
#include "GlobalNamespace/OVRAnchor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRSceneAnchor
  class OVRSceneAnchor;
  // Forward declaring type: OVRScenePrefabOverride
  class OVRScenePrefabOverride;
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Skipping declaration: OVRTask`1 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRSceneManager
  class OVRSceneManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRSceneManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSceneManager*, "", "OVRSceneManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: OVRSceneManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRSceneManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRSceneManager::Classification
    class Classification;
    // Nested type: ::GlobalNamespace::OVRSceneManager::RoomLayoutInformation
    class RoomLayoutInformation;
    // Nested type: ::GlobalNamespace::OVRSceneManager::LogForwarder
    struct LogForwarder;
    // Nested type: ::GlobalNamespace::OVRSceneManager::Development
    class Development;
    // Nested type: ::GlobalNamespace::OVRSceneManager::$$c__DisplayClass48_0
    class $$c__DisplayClass48_0;
    // Nested type: ::GlobalNamespace::OVRSceneManager::$$c__DisplayClass51_0
    class $$c__DisplayClass51_0;
    // Nested type: ::GlobalNamespace::OVRSceneManager::$OnApplicationPause$d__35
    struct $OnApplicationPause$d__35;
    // Nested type: ::GlobalNamespace::OVRSceneManager::$QueryForExistingAnchorsTransform$d__36
    struct $QueryForExistingAnchorsTransform$d__36;
    // Size: 0x0
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSceneManager/LogForwarder
    // [TokenAttribute] Offset: FFFFFFFF
    struct LogForwarder/*, public ::System::ValueType*/ {
      public:
      // Creating value type constructor for type: LogForwarder
      constexpr LogForwarder() noexcept {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // public System.Void Log(System.String context, System.String message, UnityEngine.GameObject gameObject)
      // Offset: 0x491E7AC
      void Log(::StringW context, ::StringW message, ::UnityEngine::GameObject* gameObject);
      // public System.Void LogWarning(System.String context, System.String message, UnityEngine.GameObject gameObject)
      // Offset: 0x491DEA0
      void LogWarning(::StringW context, ::StringW message, ::UnityEngine::GameObject* gameObject);
      // public System.Void LogError(System.String context, System.String message, UnityEngine.GameObject gameObject)
      // Offset: 0x491CFD8
      void LogError(::StringW context, ::StringW message, ::UnityEngine::GameObject* gameObject);
    }; // OVRSceneManager/LogForwarder
    #pragma pack(pop)
    public:
    // public OVRSceneAnchor PlanePrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRSceneAnchor* PlanePrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneAnchor*) == 0x8);
    // public OVRSceneAnchor VolumePrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRSceneAnchor* VolumePrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneAnchor*) == 0x8);
    // public System.Collections.Generic.List`1<OVRScenePrefabOverride> PrefabOverrides
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRScenePrefabOverride*>* PrefabOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRScenePrefabOverride*>*) == 0x8);
    // public System.Boolean ActiveRoomsOnly
    // Size: 0x1
    // Offset: 0x38
    bool ActiveRoomsOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean VerboseLogging
    // Size: 0x1
    // Offset: 0x39
    bool VerboseLogging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: VerboseLogging and: MaxSceneAnchorUpdatesPerFrame
    char __padding4[0x2] = {};
    // public System.Int32 MaxSceneAnchorUpdatesPerFrame
    // Size: 0x4
    // Offset: 0x3C
    int MaxSceneAnchorUpdatesPerFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Transform _initialAnchorParent
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* initialAnchorParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Action SceneModelLoadedSuccessfully
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* SceneModelLoadedSuccessfully;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action NoSceneModelToLoad
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* NoSceneModelToLoad;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action SceneCaptureReturnedWithoutError
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* SceneCaptureReturnedWithoutError;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action UnexpectedErrorWithSceneCapture
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* UnexpectedErrorWithSceneCapture;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action NewSceneModelAvailable
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* NewSceneModelAvailable;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public OVRSceneManager/RoomLayoutInformation RoomLayout
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::OVRSceneManager::RoomLayoutInformation* RoomLayout;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneManager::RoomLayoutInformation*) == 0x8);
    // private System.UInt64 _sceneCaptureRequestId
    // Size: 0x8
    // Offset: 0x78
    uint64_t sceneCaptureRequestId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private OVRCameraRig _cameraRig
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::OVRCameraRig* cameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private System.Int32 _sceneAnchorUpdateIndex
    // Size: 0x4
    // Offset: 0x88
    int sceneAnchorUpdateIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _roomCounter
    // Size: 0x4
    // Offset: 0x8C
    int roomCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`2<System.Boolean,System.Collections.Generic.List`1<OVRAnchor>> _onAnchorsFetchCompleted
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_2<bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*>* onAnchorsFetchCompleted;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*>*) == 0x8);
    // private System.Boolean _hasLoadedScene
    // Size: 0x1
    // Offset: 0x98
    bool hasLoadedScene;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLoadedScene and: onFloorAnchorsFetchCompleted
    char __padding18[0x7] = {};
    // private System.Action`1<System.Boolean> _onFloorAnchorsFetchCompleted
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action_1<bool>* onFloorAnchorsFetchCompleted;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private System.Action`2<System.Boolean,OVRAnchor> _onFloorAnchorLocalizationCompleted
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action_2<bool, ::GlobalNamespace::OVRAnchor>* onFloorAnchorLocalizationCompleted;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::GlobalNamespace::OVRAnchor>*) == 0x8);
    // private System.Collections.Generic.List`1<OVRAnchor> _floorAnchors
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* floorAnchors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.Guid> _pendingLocatable
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::HashSet_1<::System::Guid>* pendingLocatable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::System::Guid>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Guid,OVRAnchor> _roomAndFloorPairs
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::Dictionary_2<::System::Guid, ::GlobalNamespace::OVRAnchor>* roomAndFloorPairs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Guid, ::GlobalNamespace::OVRAnchor>*) == 0x8);
    // private System.Collections.Generic.List`1<OVRAnchor> _roomLayoutAnchors
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* roomLayoutAnchors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*) == 0x8);
    public:
    // Get instance field reference: public OVRSceneAnchor PlanePrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneAnchor*& dyn_PlanePrefab();
    // Get instance field reference: public OVRSceneAnchor VolumePrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneAnchor*& dyn_VolumePrefab();
    // Get instance field reference: public System.Collections.Generic.List`1<OVRScenePrefabOverride> PrefabOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRScenePrefabOverride*>*& dyn_PrefabOverrides();
    // Get instance field reference: public System.Boolean ActiveRoomsOnly
    [[deprecated("Use field access instead!")]] bool& dyn_ActiveRoomsOnly();
    // Get instance field reference: public System.Boolean VerboseLogging
    [[deprecated("Use field access instead!")]] bool& dyn_VerboseLogging();
    // Get instance field reference: public System.Int32 MaxSceneAnchorUpdatesPerFrame
    [[deprecated("Use field access instead!")]] int& dyn_MaxSceneAnchorUpdatesPerFrame();
    // Get instance field reference: UnityEngine.Transform _initialAnchorParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__initialAnchorParent();
    // Get instance field reference: public System.Action SceneModelLoadedSuccessfully
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_SceneModelLoadedSuccessfully();
    // Get instance field reference: public System.Action NoSceneModelToLoad
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_NoSceneModelToLoad();
    // Get instance field reference: public System.Action SceneCaptureReturnedWithoutError
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_SceneCaptureReturnedWithoutError();
    // Get instance field reference: public System.Action UnexpectedErrorWithSceneCapture
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_UnexpectedErrorWithSceneCapture();
    // Get instance field reference: public System.Action NewSceneModelAvailable
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_NewSceneModelAvailable();
    // Get instance field reference: public OVRSceneManager/RoomLayoutInformation RoomLayout
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneManager::RoomLayoutInformation*& dyn_RoomLayout();
    // Get instance field reference: private System.UInt64 _sceneCaptureRequestId
    [[deprecated("Use field access instead!")]] uint64_t& dyn__sceneCaptureRequestId();
    // Get instance field reference: private OVRCameraRig _cameraRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn__cameraRig();
    // Get instance field reference: private System.Int32 _sceneAnchorUpdateIndex
    [[deprecated("Use field access instead!")]] int& dyn__sceneAnchorUpdateIndex();
    // Get instance field reference: private System.Int32 _roomCounter
    [[deprecated("Use field access instead!")]] int& dyn__roomCounter();
    // Get instance field reference: private System.Action`2<System.Boolean,System.Collections.Generic.List`1<OVRAnchor>> _onAnchorsFetchCompleted
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*>*& dyn__onAnchorsFetchCompleted();
    // Get instance field reference: private System.Boolean _hasLoadedScene
    [[deprecated("Use field access instead!")]] bool& dyn__hasLoadedScene();
    // Get instance field reference: private System.Action`1<System.Boolean> _onFloorAnchorsFetchCompleted
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn__onFloorAnchorsFetchCompleted();
    // Get instance field reference: private System.Action`2<System.Boolean,OVRAnchor> _onFloorAnchorLocalizationCompleted
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::GlobalNamespace::OVRAnchor>*& dyn__onFloorAnchorLocalizationCompleted();
    // Get instance field reference: private System.Collections.Generic.List`1<OVRAnchor> _floorAnchors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*& dyn__floorAnchors();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.Guid> _pendingLocatable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::System::Guid>*& dyn__pendingLocatable();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Guid,OVRAnchor> _roomAndFloorPairs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Guid, ::GlobalNamespace::OVRAnchor>*& dyn__roomAndFloorPairs();
    // Get instance field reference: private System.Collections.Generic.List`1<OVRAnchor> _roomLayoutAnchors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*& dyn__roomLayoutAnchors();
    // public UnityEngine.Transform get_InitialAnchorParent()
    // Offset: 0x491CD34
    ::UnityEngine::Transform* get_InitialAnchorParent();
    // public System.Void set_InitialAnchorParent(UnityEngine.Transform value)
    // Offset: 0x491CD3C
    void set_InitialAnchorParent(::UnityEngine::Transform* value);
    // System.Nullable`1<OVRSceneManager/LogForwarder> get_Verbose()
    // Offset: 0x491CD44
    ::System::Nullable_1<::GlobalNamespace::OVRSceneManager::LogForwarder> get_Verbose();
    // private System.Void Awake()
    // Offset: 0x491CDAC
    void Awake();
    // System.Void OnApplicationPause(System.Boolean isPaused)
    // Offset: 0x491D094
    void OnApplicationPause(bool isPaused);
    // private System.Void QueryForExistingAnchorsTransform()
    // Offset: 0x491D15C
    void QueryForExistingAnchorsTransform();
    // public System.Boolean LoadSceneModel()
    // Offset: 0x491D1F4
    bool LoadSceneModel();
    // private System.Void OnAnchorsFetchCompleted(System.Boolean success, System.Collections.Generic.List`1<OVRAnchor> roomLayoutAnchors)
    // Offset: 0x491D4E8
    void OnAnchorsFetchCompleted(bool success, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* roomLayoutAnchors);
    // private System.Void InstantiateActiveRooms(System.Collections.Generic.List`1<OVRAnchor> roomLayoutAnchors)
    // Offset: 0x491D670
    void InstantiateActiveRooms(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* roomLayoutAnchors);
    // private System.Void OnFloorAnchorsFetchCompleted(System.Boolean success)
    // Offset: 0x491DF5C
    void OnFloorAnchorsFetchCompleted(bool success);
    // private System.Void OnFloorAnchorLocalizationCompleted(System.Boolean success, OVRAnchor anchor)
    // Offset: 0x491E648
    void OnFloorAnchorLocalizationCompleted(bool success, ::GlobalNamespace::OVRAnchor anchor);
    // private System.Void LocateUserInRoom(OVRAnchor anchor)
    // Offset: 0x491E1F0
    void LocateUserInRoom(::GlobalNamespace::OVRAnchor anchor);
    // private System.Void InstantiateSceneRooms(System.Collections.Generic.List`1<OVRAnchor> roomLayoutAnchors)
    // Offset: 0x491DAF4
    void InstantiateSceneRooms(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* roomLayoutAnchors);
    // System.Void OnSceneRoomLoadCompleted()
    // Offset: 0x491E94C
    void OnSceneRoomLoadCompleted();
    // private System.Void DestroyExistingAnchors()
    // Offset: 0x491D308
    void DestroyExistingAnchors();
    // public System.Boolean RequestSceneCapture()
    // Offset: 0x491EB80
    bool RequestSceneCapture();
    // public System.Boolean RequestSceneCapture(System.Collections.Generic.IEnumerable`1<System.String> requestedAnchorClassifications)
    // Offset: 0x491EC60
    bool RequestSceneCapture(::System::Collections::Generic::IEnumerable_1<::StringW>* requestedAnchorClassifications);
    // public OVRTask`1<System.Boolean> DoesRoomSetupExist(System.Collections.Generic.IEnumerable`1<System.String> requestedAnchorClassifications)
    // Offset: 0x491F0BC
    ::GlobalNamespace::OVRTask_1<bool> DoesRoomSetupExist(::System::Collections::Generic::IEnumerable_1<::StringW>* requestedAnchorClassifications);
    // static private System.Void CheckIfClassificationsAreValid(System.Collections.Generic.IEnumerable`1<System.String> requestedAnchorClassifications)
    // Offset: 0x491ECB4
    static void CheckIfClassificationsAreValid(::System::Collections::Generic::IEnumerable_1<::StringW>* requestedAnchorClassifications);
    // static private System.Void GetUuidsToQuery(OVRAnchor anchor, System.Collections.Generic.HashSet`1<System.Guid> uuidsToQuery)
    // Offset: 0x491F314
    static void GetUuidsToQuery(::GlobalNamespace::OVRAnchor anchor, ::System::Collections::Generic::HashSet_1<::System::Guid>* uuidsToQuery);
    // static private System.Void CheckClassificationsInRooms(System.Boolean success, System.Collections.Generic.List`1<OVRAnchor> rooms, System.Collections.Generic.IEnumerable`1<System.String> requestedAnchorClassifications, OVRTask`1<System.Boolean> task)
    // Offset: 0x491F3F8
    static void CheckClassificationsInRooms(bool success, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* rooms, ::System::Collections::Generic::IEnumerable_1<::StringW>* requestedAnchorClassifications, ::GlobalNamespace::OVRTask_1<bool> task);
    // static private System.Void CheckIfAnchorsContainClassifications(System.Boolean success, System.Collections.Generic.List`1<OVRAnchor> roomAnchors, System.Collections.Generic.IEnumerable`1<System.String> requestedAnchorClassifications, OVRTask`1<System.Boolean> task)
    // Offset: 0x491F890
    static void CheckIfAnchorsContainClassifications(bool success, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* roomAnchors, ::System::Collections::Generic::IEnumerable_1<::StringW>* requestedAnchorClassifications, ::GlobalNamespace::OVRTask_1<bool> task);
    // static private System.Void CollectLabelsFromAnchors(System.Collections.Generic.List`1<OVRAnchor> anchors, System.Collections.Generic.List`1<System.String> labels)
    // Offset: 0x491FD28
    static void CollectLabelsFromAnchors(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* anchors, ::System::Collections::Generic::List_1<::StringW>* labels);
    // static private System.Void OnTrackingSpaceChanged(UnityEngine.Transform trackingSpace)
    // Offset: 0x491FE58
    static void OnTrackingSpaceChanged(::UnityEngine::Transform* trackingSpace);
    // private System.Void Update()
    // Offset: 0x492009C
    void Update();
    // static private System.Void UpdateAllSceneAnchors()
    // Offset: 0x491FE5C
    static void UpdateAllSceneAnchors();
    // private System.Void UpdateSomeSceneAnchors()
    // Offset: 0x49200A0
    void UpdateSomeSceneAnchors();
    // private OVRSceneManager/RoomLayoutInformation GetRoomLayoutInformation()
    // Offset: 0x491EA24
    ::GlobalNamespace::OVRSceneManager::RoomLayoutInformation* GetRoomLayoutInformation();
    // private System.Boolean RequestSceneCapture(System.String requestString)
    // Offset: 0x491EBC8
    bool RequestSceneCapture(::StringW requestString);
    // private System.Void OnEnable()
    // Offset: 0x49205DC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4920864
    void OnDisable();
    // static System.Boolean PointInPolygon2D(Unity.Collections.NativeArray`1<UnityEngine.Vector2> boundaryVertices, UnityEngine.Vector2 target)
    // Offset: 0x491E704
    static bool PointInPolygon2D(::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> boundaryVertices, ::UnityEngine::Vector2 target);
    // private System.Void OVRManager_SceneCaptureComplete(System.UInt64 requestId, System.Boolean result)
    // Offset: 0x4920A8C
    void OVRManager_SceneCaptureComplete(uint64_t requestId, bool result);
    // OVRSceneAnchor InstantiateSceneAnchor(OVRAnchor anchor, OVRSceneAnchor prefab)
    // Offset: 0x4920BA4
    ::GlobalNamespace::OVRSceneAnchor* InstantiateSceneAnchor(::GlobalNamespace::OVRAnchor anchor, ::GlobalNamespace::OVRSceneAnchor* prefab);
    // public System.Void .ctor()
    // Offset: 0x49210C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSceneManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSceneManager*, creationType>()));
    }
  }; // OVRSceneManager
  #pragma pack(pop)
  static check_size<sizeof(OVRSceneManager), 200 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)> __GlobalNamespace_OVRSceneManagerSizeCheck;
  static_assert(sizeof(OVRSceneManager) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSceneManager::LogForwarder, "", "OVRSceneManager/LogForwarder");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::get_InitialAnchorParent
// Il2CppName: get_InitialAnchorParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::get_InitialAnchorParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "get_InitialAnchorParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::set_InitialAnchorParent
// Il2CppName: set_InitialAnchorParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRSceneManager::set_InitialAnchorParent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "set_InitialAnchorParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::get_Verbose
// Il2CppName: get_Verbose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::GlobalNamespace::OVRSceneManager::LogForwarder> (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::get_Verbose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "get_Verbose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(bool)>(&GlobalNamespace::OVRSceneManager::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* isPaused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPaused});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::QueryForExistingAnchorsTransform
// Il2CppName: QueryForExistingAnchorsTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::QueryForExistingAnchorsTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "QueryForExistingAnchorsTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::LoadSceneModel
// Il2CppName: LoadSceneModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::LoadSceneModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "LoadSceneModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnAnchorsFetchCompleted
// Il2CppName: OnAnchorsFetchCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)>(&GlobalNamespace::OVRSceneManager::OnAnchorsFetchCompleted)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* roomLayoutAnchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnAnchorsFetchCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, roomLayoutAnchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::InstantiateActiveRooms
// Il2CppName: InstantiateActiveRooms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)>(&GlobalNamespace::OVRSceneManager::InstantiateActiveRooms)> {
  static const MethodInfo* get() {
    static auto* roomLayoutAnchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "InstantiateActiveRooms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomLayoutAnchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnFloorAnchorsFetchCompleted
// Il2CppName: OnFloorAnchorsFetchCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(bool)>(&GlobalNamespace::OVRSceneManager::OnFloorAnchorsFetchCompleted)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnFloorAnchorsFetchCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnFloorAnchorLocalizationCompleted
// Il2CppName: OnFloorAnchorLocalizationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(bool, ::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRSceneManager::OnFloorAnchorLocalizationCompleted)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnFloorAnchorLocalizationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::LocateUserInRoom
// Il2CppName: LocateUserInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRSceneManager::LocateUserInRoom)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "LocateUserInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::InstantiateSceneRooms
// Il2CppName: InstantiateSceneRooms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)>(&GlobalNamespace::OVRSceneManager::InstantiateSceneRooms)> {
  static const MethodInfo* get() {
    static auto* roomLayoutAnchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "InstantiateSceneRooms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomLayoutAnchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnSceneRoomLoadCompleted
// Il2CppName: OnSceneRoomLoadCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::OnSceneRoomLoadCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnSceneRoomLoadCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::DestroyExistingAnchors
// Il2CppName: DestroyExistingAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::DestroyExistingAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "DestroyExistingAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::RequestSceneCapture
// Il2CppName: RequestSceneCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::RequestSceneCapture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "RequestSceneCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::RequestSceneCapture
// Il2CppName: RequestSceneCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSceneManager::*)(::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&GlobalNamespace::OVRSceneManager::RequestSceneCapture)> {
  static const MethodInfo* get() {
    static auto* requestedAnchorClassifications = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "RequestSceneCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedAnchorClassifications});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::DoesRoomSetupExist
// Il2CppName: DoesRoomSetupExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRSceneManager::*)(::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&GlobalNamespace::OVRSceneManager::DoesRoomSetupExist)> {
  static const MethodInfo* get() {
    static auto* requestedAnchorClassifications = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "DoesRoomSetupExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedAnchorClassifications});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::CheckIfClassificationsAreValid
// Il2CppName: CheckIfClassificationsAreValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&GlobalNamespace::OVRSceneManager::CheckIfClassificationsAreValid)> {
  static const MethodInfo* get() {
    static auto* requestedAnchorClassifications = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "CheckIfClassificationsAreValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedAnchorClassifications});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::GetUuidsToQuery
// Il2CppName: GetUuidsToQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRAnchor, ::System::Collections::Generic::HashSet_1<::System::Guid>*)>(&GlobalNamespace::OVRSceneManager::GetUuidsToQuery)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    static auto* uuidsToQuery = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "GetUuidsToQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, uuidsToQuery});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::CheckClassificationsInRooms
// Il2CppName: CheckClassificationsInRooms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::GlobalNamespace::OVRTask_1<bool>)>(&GlobalNamespace::OVRSceneManager::CheckClassificationsInRooms)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rooms = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    static auto* requestedAnchorClassifications = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* task = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "OVRTask`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "CheckClassificationsInRooms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, rooms, requestedAnchorClassifications, task});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::CheckIfAnchorsContainClassifications
// Il2CppName: CheckIfAnchorsContainClassifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::GlobalNamespace::OVRTask_1<bool>)>(&GlobalNamespace::OVRSceneManager::CheckIfAnchorsContainClassifications)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* roomAnchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    static auto* requestedAnchorClassifications = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* task = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "OVRTask`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "CheckIfAnchorsContainClassifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, roomAnchors, requestedAnchorClassifications, task});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::CollectLabelsFromAnchors
// Il2CppName: CollectLabelsFromAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*, ::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::OVRSceneManager::CollectLabelsFromAnchors)> {
  static const MethodInfo* get() {
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    static auto* labels = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "CollectLabelsFromAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors, labels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnTrackingSpaceChanged
// Il2CppName: OnTrackingSpaceChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRSceneManager::OnTrackingSpaceChanged)> {
  static const MethodInfo* get() {
    static auto* trackingSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnTrackingSpaceChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingSpace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::UpdateAllSceneAnchors
// Il2CppName: UpdateAllSceneAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSceneManager::UpdateAllSceneAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "UpdateAllSceneAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::UpdateSomeSceneAnchors
// Il2CppName: UpdateSomeSceneAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::UpdateSomeSceneAnchors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "UpdateSomeSceneAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::GetRoomLayoutInformation
// Il2CppName: GetRoomLayoutInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSceneManager::RoomLayoutInformation* (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::GetRoomLayoutInformation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "GetRoomLayoutInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::RequestSceneCapture
// Il2CppName: RequestSceneCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSceneManager::*)(::StringW)>(&GlobalNamespace::OVRSceneManager::RequestSceneCapture)> {
  static const MethodInfo* get() {
    static auto* requestString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "RequestSceneCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestString});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)()>(&GlobalNamespace::OVRSceneManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::PointInPolygon2D
// Il2CppName: PointInPolygon2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Collections::NativeArray_1<::UnityEngine::Vector2>, ::UnityEngine::Vector2)>(&GlobalNamespace::OVRSceneManager::PointInPolygon2D)> {
  static const MethodInfo* get() {
    static auto* boundaryVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "PointInPolygon2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryVertices, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::OVRManager_SceneCaptureComplete
// Il2CppName: OVRManager_SceneCaptureComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneManager::*)(uint64_t, bool)>(&GlobalNamespace::OVRSceneManager::OVRManager_SceneCaptureComplete)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "OVRManager_SceneCaptureComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::InstantiateSceneAnchor
// Il2CppName: InstantiateSceneAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSceneAnchor* (GlobalNamespace::OVRSceneManager::*)(::GlobalNamespace::OVRAnchor, ::GlobalNamespace::OVRSceneAnchor*)>(&GlobalNamespace::OVRSceneManager::InstantiateSceneAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("", "OVRSceneAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneManager*), "InstantiateSceneAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, prefab});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
