// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpinRotation
  class SpinRotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpinRotation);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpinRotation*, "", "SpinRotation");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: SpinRotation
  // [TokenAttribute] Offset: FFFFFFFF
  class SpinRotation : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    public:
    // private UnityEngine.Vector3 rotationPerSecondEuler
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 rotationPerSecondEuler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion baseRotation
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion baseRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single baseTime
    // Size: 0x4
    // Offset: 0x3C
    float baseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 rotationPerSecondEuler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotationPerSecondEuler();
    // Get instance field reference: private UnityEngine.Quaternion baseRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_baseRotation();
    // Get instance field reference: private System.Single baseTime
    [[deprecated("Use field access instead!")]] float& dyn_baseTime();
    // Get instance field reference: private System.Boolean <TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$TickRunning$k__BackingField();
    // public System.Boolean get_TickRunning()
    // Offset: 0x278B9F0
    bool get_TickRunning();
    // public System.Void set_TickRunning(System.Boolean value)
    // Offset: 0x278B9F8
    void set_TickRunning(bool value);
    // public System.Void Tick()
    // Offset: 0x278BA04
    void Tick();
    // private System.Void Awake()
    // Offset: 0x278BB00
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x278BB30
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x278BBAC
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x278BC18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpinRotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpinRotation*, creationType>()));
    }
  }; // SpinRotation
  #pragma pack(pop)
  static check_size<sizeof(SpinRotation), 64 + sizeof(bool)> __GlobalNamespace_SpinRotationSizeCheck;
  static_assert(sizeof(SpinRotation) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::get_TickRunning
// Il2CppName: get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SpinRotation::*)()>(&GlobalNamespace::SpinRotation::get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::set_TickRunning
// Il2CppName: set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinRotation::*)(bool)>(&GlobalNamespace::SpinRotation::set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinRotation::*)()>(&GlobalNamespace::SpinRotation::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinRotation::*)()>(&GlobalNamespace::SpinRotation::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinRotation::*)()>(&GlobalNamespace::SpinRotation::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpinRotation::*)()>(&GlobalNamespace::SpinRotation::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpinRotation*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpinRotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
