// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FaceState2Internal, "", "OVRPlugin/FaceState2Internal");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x118
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/FaceState2Internal
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::FaceState2Internal/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single ExpressionWeights_0
    // Size: 0x4
    // Offset: 0x0
    float ExpressionWeights_0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_1
    // Size: 0x4
    // Offset: 0x4
    float ExpressionWeights_1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_2
    // Size: 0x4
    // Offset: 0x8
    float ExpressionWeights_2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_3
    // Size: 0x4
    // Offset: 0xC
    float ExpressionWeights_3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_4
    // Size: 0x4
    // Offset: 0x10
    float ExpressionWeights_4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_5
    // Size: 0x4
    // Offset: 0x14
    float ExpressionWeights_5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_6
    // Size: 0x4
    // Offset: 0x18
    float ExpressionWeights_6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_7
    // Size: 0x4
    // Offset: 0x1C
    float ExpressionWeights_7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_8
    // Size: 0x4
    // Offset: 0x20
    float ExpressionWeights_8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_9
    // Size: 0x4
    // Offset: 0x24
    float ExpressionWeights_9;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_10
    // Size: 0x4
    // Offset: 0x28
    float ExpressionWeights_10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_11
    // Size: 0x4
    // Offset: 0x2C
    float ExpressionWeights_11;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_12
    // Size: 0x4
    // Offset: 0x30
    float ExpressionWeights_12;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_13
    // Size: 0x4
    // Offset: 0x34
    float ExpressionWeights_13;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_14
    // Size: 0x4
    // Offset: 0x38
    float ExpressionWeights_14;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_15
    // Size: 0x4
    // Offset: 0x3C
    float ExpressionWeights_15;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_16
    // Size: 0x4
    // Offset: 0x40
    float ExpressionWeights_16;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_17
    // Size: 0x4
    // Offset: 0x44
    float ExpressionWeights_17;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_18
    // Size: 0x4
    // Offset: 0x48
    float ExpressionWeights_18;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_19
    // Size: 0x4
    // Offset: 0x4C
    float ExpressionWeights_19;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_20
    // Size: 0x4
    // Offset: 0x50
    float ExpressionWeights_20;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_21
    // Size: 0x4
    // Offset: 0x54
    float ExpressionWeights_21;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_22
    // Size: 0x4
    // Offset: 0x58
    float ExpressionWeights_22;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_23
    // Size: 0x4
    // Offset: 0x5C
    float ExpressionWeights_23;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_24
    // Size: 0x4
    // Offset: 0x60
    float ExpressionWeights_24;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_25
    // Size: 0x4
    // Offset: 0x64
    float ExpressionWeights_25;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_26
    // Size: 0x4
    // Offset: 0x68
    float ExpressionWeights_26;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_27
    // Size: 0x4
    // Offset: 0x6C
    float ExpressionWeights_27;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_28
    // Size: 0x4
    // Offset: 0x70
    float ExpressionWeights_28;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_29
    // Size: 0x4
    // Offset: 0x74
    float ExpressionWeights_29;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_30
    // Size: 0x4
    // Offset: 0x78
    float ExpressionWeights_30;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_31
    // Size: 0x4
    // Offset: 0x7C
    float ExpressionWeights_31;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_32
    // Size: 0x4
    // Offset: 0x80
    float ExpressionWeights_32;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_33
    // Size: 0x4
    // Offset: 0x84
    float ExpressionWeights_33;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_34
    // Size: 0x4
    // Offset: 0x88
    float ExpressionWeights_34;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_35
    // Size: 0x4
    // Offset: 0x8C
    float ExpressionWeights_35;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_36
    // Size: 0x4
    // Offset: 0x90
    float ExpressionWeights_36;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_37
    // Size: 0x4
    // Offset: 0x94
    float ExpressionWeights_37;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_38
    // Size: 0x4
    // Offset: 0x98
    float ExpressionWeights_38;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_39
    // Size: 0x4
    // Offset: 0x9C
    float ExpressionWeights_39;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_40
    // Size: 0x4
    // Offset: 0xA0
    float ExpressionWeights_40;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_41
    // Size: 0x4
    // Offset: 0xA4
    float ExpressionWeights_41;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_42
    // Size: 0x4
    // Offset: 0xA8
    float ExpressionWeights_42;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_43
    // Size: 0x4
    // Offset: 0xAC
    float ExpressionWeights_43;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_44
    // Size: 0x4
    // Offset: 0xB0
    float ExpressionWeights_44;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_45
    // Size: 0x4
    // Offset: 0xB4
    float ExpressionWeights_45;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_46
    // Size: 0x4
    // Offset: 0xB8
    float ExpressionWeights_46;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_47
    // Size: 0x4
    // Offset: 0xBC
    float ExpressionWeights_47;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_48
    // Size: 0x4
    // Offset: 0xC0
    float ExpressionWeights_48;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_49
    // Size: 0x4
    // Offset: 0xC4
    float ExpressionWeights_49;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_50
    // Size: 0x4
    // Offset: 0xC8
    float ExpressionWeights_50;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_51
    // Size: 0x4
    // Offset: 0xCC
    float ExpressionWeights_51;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_52
    // Size: 0x4
    // Offset: 0xD0
    float ExpressionWeights_52;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_53
    // Size: 0x4
    // Offset: 0xD4
    float ExpressionWeights_53;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_54
    // Size: 0x4
    // Offset: 0xD8
    float ExpressionWeights_54;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_55
    // Size: 0x4
    // Offset: 0xDC
    float ExpressionWeights_55;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_56
    // Size: 0x4
    // Offset: 0xE0
    float ExpressionWeights_56;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_57
    // Size: 0x4
    // Offset: 0xE4
    float ExpressionWeights_57;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_58
    // Size: 0x4
    // Offset: 0xE8
    float ExpressionWeights_58;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_59
    // Size: 0x4
    // Offset: 0xEC
    float ExpressionWeights_59;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_60
    // Size: 0x4
    // Offset: 0xF0
    float ExpressionWeights_60;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_61
    // Size: 0x4
    // Offset: 0xF4
    float ExpressionWeights_61;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeights_62
    // Size: 0x4
    // Offset: 0xF8
    float ExpressionWeights_62;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeightConfidences_0
    // Size: 0x4
    // Offset: 0xFC
    float ExpressionWeightConfidences_0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ExpressionWeightConfidences_1
    // Size: 0x4
    // Offset: 0x100
    float ExpressionWeightConfidences_1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRPlugin/FaceExpressionStatusInternal Status
    // Size: 0x8
    // Offset: 0x104
    ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal Status;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal) == 0x8);
    // Padding between fields: Status and: Time
    char __padding65[0x4] = {};
    // public System.Double Time
    // Size: 0x8
    // Offset: 0x110
    double Time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: FaceState2Internal
    constexpr FaceState2Internal(float ExpressionWeights_0_ = {}, float ExpressionWeights_1_ = {}, float ExpressionWeights_2_ = {}, float ExpressionWeights_3_ = {}, float ExpressionWeights_4_ = {}, float ExpressionWeights_5_ = {}, float ExpressionWeights_6_ = {}, float ExpressionWeights_7_ = {}, float ExpressionWeights_8_ = {}, float ExpressionWeights_9_ = {}, float ExpressionWeights_10_ = {}, float ExpressionWeights_11_ = {}, float ExpressionWeights_12_ = {}, float ExpressionWeights_13_ = {}, float ExpressionWeights_14_ = {}, float ExpressionWeights_15_ = {}, float ExpressionWeights_16_ = {}, float ExpressionWeights_17_ = {}, float ExpressionWeights_18_ = {}, float ExpressionWeights_19_ = {}, float ExpressionWeights_20_ = {}, float ExpressionWeights_21_ = {}, float ExpressionWeights_22_ = {}, float ExpressionWeights_23_ = {}, float ExpressionWeights_24_ = {}, float ExpressionWeights_25_ = {}, float ExpressionWeights_26_ = {}, float ExpressionWeights_27_ = {}, float ExpressionWeights_28_ = {}, float ExpressionWeights_29_ = {}, float ExpressionWeights_30_ = {}, float ExpressionWeights_31_ = {}, float ExpressionWeights_32_ = {}, float ExpressionWeights_33_ = {}, float ExpressionWeights_34_ = {}, float ExpressionWeights_35_ = {}, float ExpressionWeights_36_ = {}, float ExpressionWeights_37_ = {}, float ExpressionWeights_38_ = {}, float ExpressionWeights_39_ = {}, float ExpressionWeights_40_ = {}, float ExpressionWeights_41_ = {}, float ExpressionWeights_42_ = {}, float ExpressionWeights_43_ = {}, float ExpressionWeights_44_ = {}, float ExpressionWeights_45_ = {}, float ExpressionWeights_46_ = {}, float ExpressionWeights_47_ = {}, float ExpressionWeights_48_ = {}, float ExpressionWeights_49_ = {}, float ExpressionWeights_50_ = {}, float ExpressionWeights_51_ = {}, float ExpressionWeights_52_ = {}, float ExpressionWeights_53_ = {}, float ExpressionWeights_54_ = {}, float ExpressionWeights_55_ = {}, float ExpressionWeights_56_ = {}, float ExpressionWeights_57_ = {}, float ExpressionWeights_58_ = {}, float ExpressionWeights_59_ = {}, float ExpressionWeights_60_ = {}, float ExpressionWeights_61_ = {}, float ExpressionWeights_62_ = {}, float ExpressionWeightConfidences_0_ = {}, float ExpressionWeightConfidences_1_ = {}, ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal Status_ = {}, double Time_ = {}) noexcept : ExpressionWeights_0{ExpressionWeights_0_}, ExpressionWeights_1{ExpressionWeights_1_}, ExpressionWeights_2{ExpressionWeights_2_}, ExpressionWeights_3{ExpressionWeights_3_}, ExpressionWeights_4{ExpressionWeights_4_}, ExpressionWeights_5{ExpressionWeights_5_}, ExpressionWeights_6{ExpressionWeights_6_}, ExpressionWeights_7{ExpressionWeights_7_}, ExpressionWeights_8{ExpressionWeights_8_}, ExpressionWeights_9{ExpressionWeights_9_}, ExpressionWeights_10{ExpressionWeights_10_}, ExpressionWeights_11{ExpressionWeights_11_}, ExpressionWeights_12{ExpressionWeights_12_}, ExpressionWeights_13{ExpressionWeights_13_}, ExpressionWeights_14{ExpressionWeights_14_}, ExpressionWeights_15{ExpressionWeights_15_}, ExpressionWeights_16{ExpressionWeights_16_}, ExpressionWeights_17{ExpressionWeights_17_}, ExpressionWeights_18{ExpressionWeights_18_}, ExpressionWeights_19{ExpressionWeights_19_}, ExpressionWeights_20{ExpressionWeights_20_}, ExpressionWeights_21{ExpressionWeights_21_}, ExpressionWeights_22{ExpressionWeights_22_}, ExpressionWeights_23{ExpressionWeights_23_}, ExpressionWeights_24{ExpressionWeights_24_}, ExpressionWeights_25{ExpressionWeights_25_}, ExpressionWeights_26{ExpressionWeights_26_}, ExpressionWeights_27{ExpressionWeights_27_}, ExpressionWeights_28{ExpressionWeights_28_}, ExpressionWeights_29{ExpressionWeights_29_}, ExpressionWeights_30{ExpressionWeights_30_}, ExpressionWeights_31{ExpressionWeights_31_}, ExpressionWeights_32{ExpressionWeights_32_}, ExpressionWeights_33{ExpressionWeights_33_}, ExpressionWeights_34{ExpressionWeights_34_}, ExpressionWeights_35{ExpressionWeights_35_}, ExpressionWeights_36{ExpressionWeights_36_}, ExpressionWeights_37{ExpressionWeights_37_}, ExpressionWeights_38{ExpressionWeights_38_}, ExpressionWeights_39{ExpressionWeights_39_}, ExpressionWeights_40{ExpressionWeights_40_}, ExpressionWeights_41{ExpressionWeights_41_}, ExpressionWeights_42{ExpressionWeights_42_}, ExpressionWeights_43{ExpressionWeights_43_}, ExpressionWeights_44{ExpressionWeights_44_}, ExpressionWeights_45{ExpressionWeights_45_}, ExpressionWeights_46{ExpressionWeights_46_}, ExpressionWeights_47{ExpressionWeights_47_}, ExpressionWeights_48{ExpressionWeights_48_}, ExpressionWeights_49{ExpressionWeights_49_}, ExpressionWeights_50{ExpressionWeights_50_}, ExpressionWeights_51{ExpressionWeights_51_}, ExpressionWeights_52{ExpressionWeights_52_}, ExpressionWeights_53{ExpressionWeights_53_}, ExpressionWeights_54{ExpressionWeights_54_}, ExpressionWeights_55{ExpressionWeights_55_}, ExpressionWeights_56{ExpressionWeights_56_}, ExpressionWeights_57{ExpressionWeights_57_}, ExpressionWeights_58{ExpressionWeights_58_}, ExpressionWeights_59{ExpressionWeights_59_}, ExpressionWeights_60{ExpressionWeights_60_}, ExpressionWeights_61{ExpressionWeights_61_}, ExpressionWeights_62{ExpressionWeights_62_}, ExpressionWeightConfidences_0{ExpressionWeightConfidences_0_}, ExpressionWeightConfidences_1{ExpressionWeightConfidences_1_}, Status{Status_}, Time{Time_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single ExpressionWeights_0
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_0();
    // Get instance field reference: public System.Single ExpressionWeights_1
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_1();
    // Get instance field reference: public System.Single ExpressionWeights_2
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_2();
    // Get instance field reference: public System.Single ExpressionWeights_3
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_3();
    // Get instance field reference: public System.Single ExpressionWeights_4
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_4();
    // Get instance field reference: public System.Single ExpressionWeights_5
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_5();
    // Get instance field reference: public System.Single ExpressionWeights_6
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_6();
    // Get instance field reference: public System.Single ExpressionWeights_7
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_7();
    // Get instance field reference: public System.Single ExpressionWeights_8
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_8();
    // Get instance field reference: public System.Single ExpressionWeights_9
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_9();
    // Get instance field reference: public System.Single ExpressionWeights_10
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_10();
    // Get instance field reference: public System.Single ExpressionWeights_11
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_11();
    // Get instance field reference: public System.Single ExpressionWeights_12
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_12();
    // Get instance field reference: public System.Single ExpressionWeights_13
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_13();
    // Get instance field reference: public System.Single ExpressionWeights_14
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_14();
    // Get instance field reference: public System.Single ExpressionWeights_15
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_15();
    // Get instance field reference: public System.Single ExpressionWeights_16
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_16();
    // Get instance field reference: public System.Single ExpressionWeights_17
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_17();
    // Get instance field reference: public System.Single ExpressionWeights_18
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_18();
    // Get instance field reference: public System.Single ExpressionWeights_19
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_19();
    // Get instance field reference: public System.Single ExpressionWeights_20
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_20();
    // Get instance field reference: public System.Single ExpressionWeights_21
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_21();
    // Get instance field reference: public System.Single ExpressionWeights_22
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_22();
    // Get instance field reference: public System.Single ExpressionWeights_23
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_23();
    // Get instance field reference: public System.Single ExpressionWeights_24
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_24();
    // Get instance field reference: public System.Single ExpressionWeights_25
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_25();
    // Get instance field reference: public System.Single ExpressionWeights_26
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_26();
    // Get instance field reference: public System.Single ExpressionWeights_27
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_27();
    // Get instance field reference: public System.Single ExpressionWeights_28
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_28();
    // Get instance field reference: public System.Single ExpressionWeights_29
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_29();
    // Get instance field reference: public System.Single ExpressionWeights_30
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_30();
    // Get instance field reference: public System.Single ExpressionWeights_31
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_31();
    // Get instance field reference: public System.Single ExpressionWeights_32
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_32();
    // Get instance field reference: public System.Single ExpressionWeights_33
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_33();
    // Get instance field reference: public System.Single ExpressionWeights_34
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_34();
    // Get instance field reference: public System.Single ExpressionWeights_35
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_35();
    // Get instance field reference: public System.Single ExpressionWeights_36
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_36();
    // Get instance field reference: public System.Single ExpressionWeights_37
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_37();
    // Get instance field reference: public System.Single ExpressionWeights_38
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_38();
    // Get instance field reference: public System.Single ExpressionWeights_39
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_39();
    // Get instance field reference: public System.Single ExpressionWeights_40
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_40();
    // Get instance field reference: public System.Single ExpressionWeights_41
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_41();
    // Get instance field reference: public System.Single ExpressionWeights_42
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_42();
    // Get instance field reference: public System.Single ExpressionWeights_43
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_43();
    // Get instance field reference: public System.Single ExpressionWeights_44
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_44();
    // Get instance field reference: public System.Single ExpressionWeights_45
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_45();
    // Get instance field reference: public System.Single ExpressionWeights_46
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_46();
    // Get instance field reference: public System.Single ExpressionWeights_47
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_47();
    // Get instance field reference: public System.Single ExpressionWeights_48
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_48();
    // Get instance field reference: public System.Single ExpressionWeights_49
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_49();
    // Get instance field reference: public System.Single ExpressionWeights_50
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_50();
    // Get instance field reference: public System.Single ExpressionWeights_51
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_51();
    // Get instance field reference: public System.Single ExpressionWeights_52
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_52();
    // Get instance field reference: public System.Single ExpressionWeights_53
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_53();
    // Get instance field reference: public System.Single ExpressionWeights_54
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_54();
    // Get instance field reference: public System.Single ExpressionWeights_55
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_55();
    // Get instance field reference: public System.Single ExpressionWeights_56
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_56();
    // Get instance field reference: public System.Single ExpressionWeights_57
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_57();
    // Get instance field reference: public System.Single ExpressionWeights_58
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_58();
    // Get instance field reference: public System.Single ExpressionWeights_59
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_59();
    // Get instance field reference: public System.Single ExpressionWeights_60
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_60();
    // Get instance field reference: public System.Single ExpressionWeights_61
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_61();
    // Get instance field reference: public System.Single ExpressionWeights_62
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_62();
    // Get instance field reference: public System.Single ExpressionWeightConfidences_0
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeightConfidences_0();
    // Get instance field reference: public System.Single ExpressionWeightConfidences_1
    [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeightConfidences_1();
    // Get instance field reference: public OVRPlugin/FaceExpressionStatusInternal Status
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal& dyn_Status();
    // Get instance field reference: public System.Double Time
    [[deprecated("Use field access instead!")]] double& dyn_Time();
  }; // OVRPlugin/FaceState2Internal
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::FaceState2Internal), 272 + sizeof(double)> __GlobalNamespace_OVRPlugin_FaceState2InternalSizeCheck;
  static_assert(sizeof(OVRPlugin::FaceState2Internal) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
