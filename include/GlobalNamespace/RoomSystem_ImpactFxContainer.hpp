// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RoomSystem
#include "GlobalNamespace/RoomSystem.hpp"
// Including type: IFXContext
#include "GlobalNamespace/IFXContext.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: FXSystemSettings
  class FXSystemSettings;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomSystem::ImpactFxContainer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystem::ImpactFxContainer*, "", "RoomSystem/ImpactFxContainer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RoomSystem/ImpactFxContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomSystem::ImpactFxContainer : public ::Il2CppObject/*, public ::GlobalNamespace::IFXContext*/ {
    public:
    public:
    // public VRRig targetRig
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::VRRig* targetRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color colour
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color colour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Int32 projectileCount
    // Size: 0x4
    // Offset: 0x34
    int projectileCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IFXContext
    operator ::GlobalNamespace::IFXContext() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IFXContext*>(this);
    }
    // Get instance field reference: public VRRig targetRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetRig();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Color colour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colour();
    // Get instance field reference: public System.Int32 projectileCount
    [[deprecated("Use field access instead!")]] int& dyn_projectileCount();
    // public FXSystemSettings get_settings()
    // Offset: 0x2770420
    ::GlobalNamespace::FXSystemSettings* get_settings();
    // public System.Void OnPlayFX()
    // Offset: 0x277043C
    void OnPlayFX();
    // public System.Void .ctor()
    // Offset: 0x2770600
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomSystem::ImpactFxContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomSystem::ImpactFxContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomSystem::ImpactFxContainer*, creationType>()));
    }
  }; // RoomSystem/ImpactFxContainer
  #pragma pack(pop)
  static check_size<sizeof(RoomSystem::ImpactFxContainer), 52 + sizeof(int)> __GlobalNamespace_RoomSystem_ImpactFxContainerSizeCheck;
  static_assert(sizeof(RoomSystem::ImpactFxContainer) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::ImpactFxContainer::get_settings
// Il2CppName: get_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FXSystemSettings* (GlobalNamespace::RoomSystem::ImpactFxContainer::*)()>(&GlobalNamespace::RoomSystem::ImpactFxContainer::get_settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem::ImpactFxContainer*), "get_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::ImpactFxContainer::OnPlayFX
// Il2CppName: OnPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::ImpactFxContainer::*)()>(&GlobalNamespace::RoomSystem::ImpactFxContainer::OnPlayFX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem::ImpactFxContainer*), "OnPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::ImpactFxContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
