// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
// Including type: GTSubZone
#include "GlobalNamespace/GTSubZone.hpp"
// Including type: GroupJoinZone
#include "GlobalNamespace/GroupJoinZone.hpp"
// Including type: ZoneNode
#include "GlobalNamespace/ZoneNode.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GTZoneEventType
  struct GTZoneEventType;
  // Forward declaring type: ZoneDef
  class ZoneDef;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneEntity
  class ZoneEntity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneEntity);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneEntity*, "", "ZoneEntity");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: ZoneEntity
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneEntity : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Nullable`1<System.Int32> _entityID
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::System::Nullable_1<int> entityID;
    // private System.String _entityTag
    // Size: 0x8
    // Offset: 0x28
    ::StringW entityTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _emitTelemetry
    // Size: 0x1
    // Offset: 0x30
    bool emitTelemetry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 _zoneStayEventInterval
    // Size: 0x4
    // Offset: 0x34
    int zoneStayEventInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private VRRig _entityRig
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::VRRig* entityRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private UnityEngine.SphereCollider _collider
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::SphereCollider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // private UnityEngine.Rigidbody _rigidbody
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // public GTZone currentZone
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::GTZone currentZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // public GTSubZone currentSubZone
    // Size: 0x4
    // Offset: 0x54
    ::GlobalNamespace::GTSubZone currentSubZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTSubZone) == 0x4);
    // private GroupJoinZone currentGroupZone
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::GroupJoinZone currentGroupZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // private GroupJoinZone previousGroupZone
    // Size: 0x4
    // Offset: 0x5C
    ::GlobalNamespace::GroupJoinZone previousGroupZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // private GroupJoinZone currentExcludeGroupZone
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::GroupJoinZone currentExcludeGroupZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // private System.Collections.Generic.HashSet`1<UnityEngine.BoxCollider> insideBoxes
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::HashSet_1<::UnityEngine::BoxCollider*>* insideBoxes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::BoxCollider*>*) == 0x8);
    // private System.Int32 currentZonePriority
    // Size: 0x4
    // Offset: 0x70
    int currentZonePriority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single groupZoneClearAtTimestamp
    // Size: 0x4
    // Offset: 0x74
    float groupZoneClearAtTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single groupZoneClearInterval
    // Size: 0x4
    // Offset: 0x78
    float groupZoneClearInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public ZoneNode currentNode
    // Size: 0x49
    // Offset: 0x7C
    ::GlobalNamespace::ZoneNode currentNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneNode) == 0x49);
    // public ZoneNode lastEnteredNode
    // Size: 0x49
    // Offset: 0xC8
    ::GlobalNamespace::ZoneNode lastEnteredNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneNode) == 0x49);
    // public ZoneNode lastExitedNode
    // Size: 0x49
    // Offset: 0x114
    ::GlobalNamespace::ZoneNode lastExitedNode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneNode) == 0x49);
    // private TimeSince sinceZoneEntered
    // Size: 0x8
    // Offset: 0x160
    ::GlobalNamespace::TimeSince sinceZoneEntered;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    // private TimeSince gLastStayPoll
    // Size: 0x8
    // Offset: 0x168
    ::GlobalNamespace::TimeSince gLastStayPoll;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    public:
    // Get instance field reference: private System.Nullable`1<System.Int32> _entityID
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn__entityID();
    // Get instance field reference: private System.String _entityTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn__entityTag();
    // Get instance field reference: private System.Boolean _emitTelemetry
    [[deprecated("Use field access instead!")]] bool& dyn__emitTelemetry();
    // Get instance field reference: private System.Int32 _zoneStayEventInterval
    [[deprecated("Use field access instead!")]] int& dyn__zoneStayEventInterval();
    // Get instance field reference: private VRRig _entityRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn__entityRig();
    // Get instance field reference: private UnityEngine.SphereCollider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn__collider();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidbody();
    // Get instance field reference: public GTZone currentZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_currentZone();
    // Get instance field reference: public GTSubZone currentSubZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& dyn_currentSubZone();
    // Get instance field reference: private GroupJoinZone currentGroupZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_currentGroupZone();
    // Get instance field reference: private GroupJoinZone previousGroupZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_previousGroupZone();
    // Get instance field reference: private GroupJoinZone currentExcludeGroupZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_currentExcludeGroupZone();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.BoxCollider> insideBoxes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::BoxCollider*>*& dyn_insideBoxes();
    // Get instance field reference: private System.Int32 currentZonePriority
    [[deprecated("Use field access instead!")]] int& dyn_currentZonePriority();
    // Get instance field reference: private System.Single groupZoneClearAtTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_groupZoneClearAtTimestamp();
    // Get instance field reference: private System.Single groupZoneClearInterval
    [[deprecated("Use field access instead!")]] float& dyn_groupZoneClearInterval();
    // Get instance field reference: public ZoneNode currentNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& dyn_currentNode();
    // Get instance field reference: public ZoneNode lastEnteredNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& dyn_lastEnteredNode();
    // Get instance field reference: public ZoneNode lastExitedNode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& dyn_lastExitedNode();
    // Get instance field reference: private TimeSince sinceZoneEntered
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn_sinceZoneEntered();
    // Get instance field reference: private TimeSince gLastStayPoll
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn_gLastStayPoll();
    // public System.String get_entityTag()
    // Offset: 0x27A7624
    ::StringW get_entityTag();
    // public System.Int32 get_entityID()
    // Offset: 0x27A762C
    int get_entityID();
    // public VRRig get_entityRig()
    // Offset: 0x27A76E0
    ::GlobalNamespace::VRRig* get_entityRig();
    // public UnityEngine.SphereCollider get_collider()
    // Offset: 0x27A76E8
    ::UnityEngine::SphereCollider* get_collider();
    // public GroupJoinZone get_GroupZone()
    // Offset: 0x27A76F0
    ::GlobalNamespace::GroupJoinZone get_GroupZone();
    // protected System.Void OnEnable()
    // Offset: 0x27A7704
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x27A790C
    void OnDisable();
    // protected System.Void OnTriggerEnter(UnityEngine.Collider c)
    // Offset: 0x27A79DC
    void OnTriggerEnter(::UnityEngine::Collider* c);
    // protected System.Void OnTriggerExit(UnityEngine.Collider c)
    // Offset: 0x27A79F0
    void OnTriggerExit(::UnityEngine::Collider* c);
    // protected System.Void OnTriggerStay(UnityEngine.Collider c)
    // Offset: 0x27A7A04
    void OnTriggerStay(::UnityEngine::Collider* c);
    // protected System.Void OnZoneTrigger(GTZoneEventType zoneEvent, UnityEngine.Collider c)
    // Offset: 0x27A7C2C
    void OnZoneTrigger(::GlobalNamespace::GTZoneEventType zoneEvent, ::UnityEngine::Collider* c);
    // private System.Void OnZoneTrigger(GTZoneEventType zoneEvent, ZoneDef zone, UnityEngine.BoxCollider box)
    // Offset: 0x27A7D08
    void OnZoneTrigger(::GlobalNamespace::GTZoneEventType zoneEvent, ::GlobalNamespace::ZoneDef* zone, ::UnityEngine::BoxCollider* box);
    // static public System.Int32 Compare(T x, T y)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int Compare(T x, T y) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::ZoneEntity*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneEntity", "Compare", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, x, y);
    }
    // public System.Void .ctor()
    // Offset: 0x27A825C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneEntity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneEntity*, creationType>()));
    }
  }; // ZoneEntity
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::get_entityTag
// Il2CppName: get_entityTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::get_entityTag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "get_entityTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::get_entityID
// Il2CppName: get_entityID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::get_entityID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "get_entityID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::get_entityRig
// Il2CppName: get_entityRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::get_entityRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "get_entityRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::get_collider
// Il2CppName: get_collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SphereCollider* (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::get_collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "get_collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::get_GroupZone
// Il2CppName: get_GroupZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GroupJoinZone (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::get_GroupZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "get_GroupZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)()>(&GlobalNamespace::ZoneEntity::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ZoneEntity::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ZoneEntity::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnTriggerStay
// Il2CppName: OnTriggerStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ZoneEntity::OnTriggerStay)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnTriggerStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnZoneTrigger
// Il2CppName: OnZoneTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)(::GlobalNamespace::GTZoneEventType, ::UnityEngine::Collider*)>(&GlobalNamespace::ZoneEntity::OnZoneTrigger)> {
  static const MethodInfo* get() {
    static auto* zoneEvent = &::il2cpp_utils::GetClassFromName("", "GTZoneEventType")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnZoneTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneEvent, c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::OnZoneTrigger
// Il2CppName: OnZoneTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneEntity::*)(::GlobalNamespace::GTZoneEventType, ::GlobalNamespace::ZoneDef*, ::UnityEngine::BoxCollider*)>(&GlobalNamespace::ZoneEntity::OnZoneTrigger)> {
  static const MethodInfo* get() {
    static auto* zoneEvent = &::il2cpp_utils::GetClassFromName("", "GTZoneEventType")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("", "ZoneDef")->byval_arg;
    static auto* box = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoxCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneEntity*), "OnZoneTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneEvent, zone, box});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::Compare
// Il2CppName: Compare
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ZoneEntity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
