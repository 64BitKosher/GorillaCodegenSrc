// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: StaticHash
#include "GlobalNamespace/StaticHash.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StaticHash::SingleInt32, "", "StaticHash/SingleInt32");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: StaticHash/SingleInt32
  // [TokenAttribute] Offset: FFFFFFFF
  struct StaticHash::SingleInt32/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single single
    // Size: 0x4
    // Offset: 0x0
    float single;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 int32
    // Size: 0x4
    // Offset: 0x0
    int int32;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SingleInt32
    constexpr SingleInt32(float single_ = {}, int int32_ = {}) noexcept : single{single_}, int32{int32_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single single
    [[deprecated("Use field access instead!")]] float& dyn_single();
    // Get instance field reference: public System.Int32 int32
    [[deprecated("Use field access instead!")]] int& dyn_int32();
  }; // StaticHash/SingleInt32
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
