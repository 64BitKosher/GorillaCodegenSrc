// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaIK
  class GorillaIK;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaIKMgr
  class GorillaIKMgr;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaIKMgr);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIKMgr*, "", "GorillaIKMgr");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaIKMgr
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaIKMgr : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaIKMgr::IKInput
    struct IKInput;
    // Nested type: ::GlobalNamespace::GorillaIKMgr::IKOutput
    struct IKOutput;
    // Nested type: ::GlobalNamespace::GorillaIKMgr::IKJob
    struct IKJob;
    // Size: 0x94
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaIKMgr/IKInput
    // [TokenAttribute] Offset: FFFFFFFF
    struct IKInput/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 handPos
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 handPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 upperArmPos
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 upperArmPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion upperArmRot
      // Size: 0x10
      // Offset: 0x18
      ::UnityEngine::Quaternion upperArmRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Quaternion upperArmLocalRot
      // Size: 0x10
      // Offset: 0x28
      ::UnityEngine::Quaternion upperArmLocalRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Vector3 lowerArmPos
      // Size: 0xC
      // Offset: 0x38
      ::UnityEngine::Vector3 lowerArmPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion lowerArmRot
      // Size: 0x10
      // Offset: 0x44
      ::UnityEngine::Quaternion lowerArmRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Quaternion lowerArmLocalRot
      // Size: 0x10
      // Offset: 0x54
      ::UnityEngine::Quaternion lowerArmLocalRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Quaternion initRotLower
      // Size: 0x10
      // Offset: 0x64
      ::UnityEngine::Quaternion initRotLower;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Quaternion initRotUpper
      // Size: 0x10
      // Offset: 0x74
      ::UnityEngine::Quaternion initRotUpper;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Vector3 targetPos
      // Size: 0xC
      // Offset: 0x84
      ::UnityEngine::Vector3 targetPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single eps
      // Size: 0x4
      // Offset: 0x90
      float eps;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: IKInput
      constexpr IKInput(::UnityEngine::Vector3 handPos_ = {}, ::UnityEngine::Vector3 upperArmPos_ = {}, ::UnityEngine::Quaternion upperArmRot_ = {}, ::UnityEngine::Quaternion upperArmLocalRot_ = {}, ::UnityEngine::Vector3 lowerArmPos_ = {}, ::UnityEngine::Quaternion lowerArmRot_ = {}, ::UnityEngine::Quaternion lowerArmLocalRot_ = {}, ::UnityEngine::Quaternion initRotLower_ = {}, ::UnityEngine::Quaternion initRotUpper_ = {}, ::UnityEngine::Vector3 targetPos_ = {}, float eps_ = {}) noexcept : handPos{handPos_}, upperArmPos{upperArmPos_}, upperArmRot{upperArmRot_}, upperArmLocalRot{upperArmLocalRot_}, lowerArmPos{lowerArmPos_}, lowerArmRot{lowerArmRot_}, lowerArmLocalRot{lowerArmLocalRot_}, initRotLower{initRotLower_}, initRotUpper{initRotUpper_}, targetPos{targetPos_}, eps{eps_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 handPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_handPos();
      // Get instance field reference: public UnityEngine.Vector3 upperArmPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_upperArmPos();
      // Get instance field reference: public UnityEngine.Quaternion upperArmRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_upperArmRot();
      // Get instance field reference: public UnityEngine.Quaternion upperArmLocalRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_upperArmLocalRot();
      // Get instance field reference: public UnityEngine.Vector3 lowerArmPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lowerArmPos();
      // Get instance field reference: public UnityEngine.Quaternion lowerArmRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lowerArmRot();
      // Get instance field reference: public UnityEngine.Quaternion lowerArmLocalRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lowerArmLocalRot();
      // Get instance field reference: public UnityEngine.Quaternion initRotLower
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initRotLower();
      // Get instance field reference: public UnityEngine.Quaternion initRotUpper
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initRotUpper();
      // Get instance field reference: public UnityEngine.Vector3 targetPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetPos();
      // Get instance field reference: public System.Single eps
      [[deprecated("Use field access instead!")]] float& dyn_eps();
    }; // GorillaIKMgr/IKInput
    #pragma pack(pop)
    static check_size<sizeof(GorillaIKMgr::IKInput), 144 + sizeof(float)> __GlobalNamespace_GorillaIKMgr_IKInputSizeCheck;
    static_assert(sizeof(GorillaIKMgr::IKInput) == 0x94);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaIKMgr/IKOutput
    // [TokenAttribute] Offset: FFFFFFFF
    struct IKOutput/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Quaternion upperArmLocalRot
      // Size: 0x10
      // Offset: 0x0
      ::UnityEngine::Quaternion upperArmLocalRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Quaternion lowerArmLocalRot
      // Size: 0x10
      // Offset: 0x10
      ::UnityEngine::Quaternion lowerArmLocalRot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      public:
      // Creating value type constructor for type: IKOutput
      constexpr IKOutput(::UnityEngine::Quaternion upperArmLocalRot_ = {}, ::UnityEngine::Quaternion lowerArmLocalRot_ = {}) noexcept : upperArmLocalRot{upperArmLocalRot_}, lowerArmLocalRot{lowerArmLocalRot_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Quaternion upperArmLocalRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_upperArmLocalRot();
      // Get instance field reference: public UnityEngine.Quaternion lowerArmLocalRot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lowerArmLocalRot();
      // public System.Void .ctor(UnityEngine.Quaternion upperArmLocalRot_, UnityEngine.Quaternion lowerArmLocalRot_)
      // Offset: 0x270F834
      // ABORTED: conflicts with another method.  IKOutput(::UnityEngine::Quaternion upperArmLocalRot_, ::UnityEngine::Quaternion lowerArmLocalRot_);
    }; // GorillaIKMgr/IKOutput
    #pragma pack(pop)
    static check_size<sizeof(GorillaIKMgr::IKOutput), 16 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_GorillaIKMgr_IKOutputSizeCheck;
    static_assert(sizeof(GorillaIKMgr::IKOutput) == 0x20);
    public:
    // private System.Collections.Generic.List`1<GorillaIK> ikList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaIK*>* ikList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaIK*>*) == 0x8);
    // private Unity.Collections.NativeArray`1<GorillaIKMgr/IKInput> cachedInput
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKInput> cachedInput;
    // private Unity.Collections.NativeArray`1<GorillaIKMgr/IKOutput> cachedOutput
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKOutput> cachedOutput;
    // private System.Int32 actualListSz
    // Size: 0x4
    // Offset: 0x48
    int actualListSz;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Jobs.JobHandle jobHandle
    // Size: 0xC
    // Offset: 0x50
    ::Unity::Jobs::JobHandle jobHandle;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    // private System.Boolean firstFrame
    // Size: 0x1
    // Offset: 0x60
    bool firstFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private GorillaIKMgr _instance
    static ::GlobalNamespace::GorillaIKMgr* _get__instance();
    // Set static field: static private GorillaIKMgr _instance
    static void _set__instance(::GlobalNamespace::GorillaIKMgr* value);
    // static field const value: static private System.Int32 MaxSize
    static constexpr const int MaxSize = 20;
    // Get static field: static private System.Int32 MaxSize
    static int _get_MaxSize();
    // Set static field: static private System.Int32 MaxSize
    static void _set_MaxSize(int value);
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaIK> ikList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaIK*>*& dyn_ikList();
    // Get instance field reference: private Unity.Collections.NativeArray`1<GorillaIKMgr/IKInput> cachedInput
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKInput>& dyn_cachedInput();
    // Get instance field reference: private Unity.Collections.NativeArray`1<GorillaIKMgr/IKOutput> cachedOutput
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::GorillaIKMgr::IKOutput>& dyn_cachedOutput();
    // Get instance field reference: private System.Int32 actualListSz
    [[deprecated("Use field access instead!")]] int& dyn_actualListSz();
    // Get instance field reference: private Unity.Jobs.JobHandle jobHandle
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_jobHandle();
    // Get instance field reference: private System.Boolean firstFrame
    [[deprecated("Use field access instead!")]] bool& dyn_firstFrame();
    // static public GorillaIKMgr get_Instance()
    // Offset: 0x270EB08
    static ::GlobalNamespace::GorillaIKMgr* get_Instance();
    // private System.Void Awake()
    // Offset: 0x270EB50
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x270EC34
    void OnDestroy();
    // public System.Void RegisterIK(GorillaIK ik)
    // Offset: 0x270DC34
    void RegisterIK(::GlobalNamespace::GorillaIK* ik);
    // public System.Void DeregisterIK(GorillaIK ik)
    // Offset: 0x270DD44
    void DeregisterIK(::GlobalNamespace::GorillaIK* ik);
    // private System.Void CopyInput()
    // Offset: 0x270ECB0
    void CopyInput();
    // private System.Void CopyOutput()
    // Offset: 0x270F3C0
    void CopyOutput();
    // public System.Void LateUpdate()
    // Offset: 0x270F538
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x270F7A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaIKMgr* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaIKMgr::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaIKMgr*, creationType>()));
    }
  }; // GorillaIKMgr
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIKMgr::IKOutput, "", "GorillaIKMgr/IKOutput");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIKMgr::IKInput, "", "GorillaIKMgr/IKInput");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaIKMgr* (*)()>(&GlobalNamespace::GorillaIKMgr::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)()>(&GlobalNamespace::GorillaIKMgr::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)()>(&GlobalNamespace::GorillaIKMgr::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::RegisterIK
// Il2CppName: RegisterIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)(::GlobalNamespace::GorillaIK*)>(&GlobalNamespace::GorillaIKMgr::RegisterIK)> {
  static const MethodInfo* get() {
    static auto* ik = &::il2cpp_utils::GetClassFromName("", "GorillaIK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "RegisterIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ik});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::DeregisterIK
// Il2CppName: DeregisterIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)(::GlobalNamespace::GorillaIK*)>(&GlobalNamespace::GorillaIKMgr::DeregisterIK)> {
  static const MethodInfo* get() {
    static auto* ik = &::il2cpp_utils::GetClassFromName("", "GorillaIK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "DeregisterIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ik});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::CopyInput
// Il2CppName: CopyInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)()>(&GlobalNamespace::GorillaIKMgr::CopyInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "CopyInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::CopyOutput
// Il2CppName: CopyOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)()>(&GlobalNamespace::GorillaIKMgr::CopyOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "CopyOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKMgr::*)()>(&GlobalNamespace::GorillaIKMgr::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKMgr*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKMgr::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
