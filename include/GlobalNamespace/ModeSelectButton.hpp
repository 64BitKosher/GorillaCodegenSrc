// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ModeSelectButton
  class ModeSelectButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ModeSelectButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ModeSelectButton*, "", "ModeSelectButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: ModeSelectButton
  // [TokenAttribute] Offset: FFFFFFFF
  class ModeSelectButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public System.String gameMode
    // Size: 0x8
    // Offset: 0x70
    ::StringW gameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String gameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameMode();
    // private System.Void OnDestroy()
    // Offset: 0x272E7D0
    void OnDestroy();
    // public System.Void OnGameModeChanged(System.String newGameMode)
    // Offset: 0x272E93C
    void OnGameModeChanged(::StringW newGameMode);
    // public override System.Void Start()
    // Offset: 0x272E718
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::Start()
    void Start();
    // public override System.Void ButtonActivationWithHand(System.Boolean isLeftHand)
    // Offset: 0x272E8C4
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivationWithHand(System.Boolean isLeftHand)
    void ButtonActivationWithHand(bool isLeftHand);
    // public System.Void .ctor()
    // Offset: 0x272E990
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModeSelectButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ModeSelectButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModeSelectButton*, creationType>()));
    }
  }; // ModeSelectButton
  #pragma pack(pop)
  static check_size<sizeof(ModeSelectButton), 112 + sizeof(::StringW)> __GlobalNamespace_ModeSelectButtonSizeCheck;
  static_assert(sizeof(ModeSelectButton) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ModeSelectButton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ModeSelectButton::*)()>(&GlobalNamespace::ModeSelectButton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ModeSelectButton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ModeSelectButton::OnGameModeChanged
// Il2CppName: OnGameModeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ModeSelectButton::*)(::StringW)>(&GlobalNamespace::ModeSelectButton::OnGameModeChanged)> {
  static const MethodInfo* get() {
    static auto* newGameMode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ModeSelectButton*), "OnGameModeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newGameMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ModeSelectButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ModeSelectButton::*)()>(&GlobalNamespace::ModeSelectButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ModeSelectButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ModeSelectButton::ButtonActivationWithHand
// Il2CppName: ButtonActivationWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ModeSelectButton::*)(bool)>(&GlobalNamespace::ModeSelectButton::ButtonActivationWithHand)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ModeSelectButton*), "ButtonActivationWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ModeSelectButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
