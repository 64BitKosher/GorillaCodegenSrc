// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaNetworkTransform
  class GorillaNetworkTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaNetworkTransform);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaNetworkTransform*, "", "GorillaNetworkTransform");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworkTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaNetworkTransform : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // private Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public System.Boolean m_UseLocal
    // Size: 0x1
    // Offset: 0x28
    bool m_UseLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean respectOwnership
    // Size: 0x1
    // Offset: 0x29
    bool respectOwnership;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: respectOwnership and: maxDistance
    char __padding2[0x2] = {};
    // private System.Single maxDistance
    // Size: 0x4
    // Offset: 0x2C
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxDistanceSquare
    // Size: 0x4
    // Offset: 0x30
    float maxDistanceSquare;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean clampToSpawn
    // Size: 0x1
    // Offset: 0x34
    bool clampToSpawn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clampToSpawn and: clampOriginPoint
    char __padding5[0x3] = {};
    // private UnityEngine.Vector3 clampOriginPoint
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 clampOriginPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean m_SynchronizePosition
    // Size: 0x1
    // Offset: 0x44
    bool m_SynchronizePosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_SynchronizeRotation
    // Size: 0x1
    // Offset: 0x45
    bool m_SynchronizeRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_SynchronizeScale
    // Size: 0x1
    // Offset: 0x46
    bool m_SynchronizeScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SynchronizeScale and: m_Distance
    char __padding9[0x1] = {};
    // private System.Single m_Distance
    // Size: 0x4
    // Offset: 0x48
    float m_Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Angle
    // Size: 0x4
    // Offset: 0x4C
    float m_Angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_Velocity
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 m_Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_NetworkPosition
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 m_NetworkPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_StoredPosition
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 m_StoredPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_NetworkScale
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 m_NetworkScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_NetworkRotation
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion m_NetworkRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean m_firstTake
    // Size: 0x1
    // Offset: 0x90
    bool m_firstTake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: private Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView();
    // Get instance field reference: public System.Boolean m_UseLocal
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseLocal();
    // Get instance field reference: private System.Boolean respectOwnership
    [[deprecated("Use field access instead!")]] bool& dyn_respectOwnership();
    // Get instance field reference: private System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // Get instance field reference: private System.Single maxDistanceSquare
    [[deprecated("Use field access instead!")]] float& dyn_maxDistanceSquare();
    // Get instance field reference: private System.Boolean clampToSpawn
    [[deprecated("Use field access instead!")]] bool& dyn_clampToSpawn();
    // Get instance field reference: private UnityEngine.Vector3 clampOriginPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clampOriginPoint();
    // Get instance field reference: public System.Boolean m_SynchronizePosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizePosition();
    // Get instance field reference: public System.Boolean m_SynchronizeRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeRotation();
    // Get instance field reference: public System.Boolean m_SynchronizeScale
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeScale();
    // Get instance field reference: private System.Single m_Distance
    [[deprecated("Use field access instead!")]] float& dyn_m_Distance();
    // Get instance field reference: private System.Single m_Angle
    [[deprecated("Use field access instead!")]] float& dyn_m_Angle();
    // Get instance field reference: private UnityEngine.Vector3 m_Velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Velocity();
    // Get instance field reference: private UnityEngine.Vector3 m_NetworkPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_NetworkPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_StoredPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StoredPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_NetworkScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_NetworkScale();
    // Get instance field reference: private UnityEngine.Quaternion m_NetworkRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_NetworkRotation();
    // Get instance field reference: private System.Boolean m_firstTake
    [[deprecated("Use field access instead!")]] bool& dyn_m_firstTake();
    // public System.Void Awake()
    // Offset: 0x26F7234
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x26F7368
    void OnEnable();
    // public System.Void Update()
    // Offset: 0x26F73C0
    void Update();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F7970
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void GTAddition_DoTeleport()
    // Offset: 0x26F8274
    void GTAddition_DoTeleport();
    // public System.Void .ctor()
    // Offset: 0x26F8280
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaNetworkTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaNetworkTransform*, creationType>()));
    }
  }; // GorillaNetworkTransform
  #pragma pack(pop)
  static check_size<sizeof(GorillaNetworkTransform), 144 + sizeof(bool)> __GlobalNamespace_GorillaNetworkTransformSizeCheck;
  static_assert(sizeof(GorillaNetworkTransform) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkTransform::*)()>(&GlobalNamespace::GorillaNetworkTransform::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkTransform*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkTransform::*)()>(&GlobalNamespace::GorillaNetworkTransform::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkTransform*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkTransform::*)()>(&GlobalNamespace::GorillaNetworkTransform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkTransform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkTransform::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaNetworkTransform::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkTransform*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::GTAddition_DoTeleport
// Il2CppName: GTAddition_DoTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkTransform::*)()>(&GlobalNamespace::GorillaNetworkTransform::GTAddition_DoTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkTransform*), "GTAddition_DoTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
