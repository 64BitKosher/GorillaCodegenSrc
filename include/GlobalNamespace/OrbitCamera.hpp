// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OrbitCamera
  class OrbitCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OrbitCamera);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OrbitCamera*, "", "OrbitCamera");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: OrbitCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbitCamera : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single m_phase
    // Size: 0x4
    // Offset: 0x20
    float m_phase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly System.Single kOrbitSpeed
    static float _get_kOrbitSpeed();
    // Set static field: static private readonly System.Single kOrbitSpeed
    static void _set_kOrbitSpeed(float value);
    // Get instance field reference: private System.Single m_phase
    [[deprecated("Use field access instead!")]] float& dyn_m_phase();
    // public System.Void Start()
    // Offset: 0x2683030
    void Start();
    // public System.Void Update()
    // Offset: 0x2683034
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2683250
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbitCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrbitCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbitCamera*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2683258
    static void _cctor();
  }; // OrbitCamera
  #pragma pack(pop)
  static check_size<sizeof(OrbitCamera), 32 + sizeof(float)> __GlobalNamespace_OrbitCameraSizeCheck;
  static_assert(sizeof(OrbitCamera) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OrbitCamera::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbitCamera::*)()>(&GlobalNamespace::OrbitCamera::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbitCamera*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbitCamera::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbitCamera::*)()>(&GlobalNamespace::OrbitCamera::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbitCamera*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbitCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OrbitCamera::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OrbitCamera::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbitCamera*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
