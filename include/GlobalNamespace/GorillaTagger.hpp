// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.GuidedRefs.IGuidedRefReceiverMono
#include "GorillaTag/GuidedRefs/IGuidedRefReceiverMono.hpp"
// Including type: GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo
#include "GorillaTag/GuidedRefs/GuidedRefReceiverFieldInfo.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: Watchable`1<T>
  template<typename T>
  class Watchable_1;
  // Forward declaring type: VRRigSerializer
  class VRRigSerializer;
  // Skipping declaration: StatusEffect because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Color
  struct Color;
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: GorillaTag::GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefTryResolveInfo
  struct GuidedRefTryResolveInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTagger
  class GorillaTagger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTagger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagger*, "", "GorillaTagger");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTagger
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTagger : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*/ {
    public:
    // Nested type: ::GlobalNamespace::GorillaTagger::StatusEffect
    struct StatusEffect;
    // Nested type: ::GlobalNamespace::GorillaTagger::$HapticPulses$d__102
    class $HapticPulses$d__102;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagger/StatusEffect
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatusEffect/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatusEffect
      constexpr StatusEffect(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagger/StatusEffect None
      static constexpr const int None = 0;
      // Get static field: static public GorillaTagger/StatusEffect None
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_None();
      // Set static field: static public GorillaTagger/StatusEffect None
      static void _set_None(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Frozen
      static constexpr const int Frozen = 1;
      // Get static field: static public GorillaTagger/StatusEffect Frozen
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Frozen();
      // Set static field: static public GorillaTagger/StatusEffect Frozen
      static void _set_Frozen(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Slowed
      static constexpr const int Slowed = 2;
      // Get static field: static public GorillaTagger/StatusEffect Slowed
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Slowed();
      // Set static field: static public GorillaTagger/StatusEffect Slowed
      static void _set_Slowed(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Dead
      static constexpr const int Dead = 3;
      // Get static field: static public GorillaTagger/StatusEffect Dead
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Dead();
      // Set static field: static public GorillaTagger/StatusEffect Dead
      static void _set_Dead(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Infected
      static constexpr const int Infected = 4;
      // Get static field: static public GorillaTagger/StatusEffect Infected
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Infected();
      // Set static field: static public GorillaTagger/StatusEffect Infected
      static void _set_Infected(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect It
      static constexpr const int It = 5;
      // Get static field: static public GorillaTagger/StatusEffect It
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_It();
      // Set static field: static public GorillaTagger/StatusEffect It
      static void _set_It(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagger/StatusEffect
    #pragma pack(pop)
    static check_size<sizeof(GorillaTagger::StatusEffect), 0 + sizeof(int)> __GlobalNamespace_GorillaTagger_StatusEffectSizeCheck;
    static_assert(sizeof(GorillaTagger::StatusEffect) == 0x4);
    public:
    // public System.Boolean inCosmeticsRoom
    // Size: 0x1
    // Offset: 0x20
    bool inCosmeticsRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.SphereCollider headCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::SphereCollider* headCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // public UnityEngine.CapsuleCollider bodyCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::CapsuleCollider* bodyCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    // private UnityEngine.Vector3 lastLeftHandPositionForTag
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 lastLeftHandPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastRightHandPositionForTag
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 lastRightHandPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastBodyPositionForTag
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 lastBodyPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastHeadPositionForTag
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 lastHeadPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Transform rightHandTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* rightHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHandTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* leftHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single hapticWaitSeconds
    // Size: 0x4
    // Offset: 0x78
    float hapticWaitSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single handTapVolume
    // Size: 0x4
    // Offset: 0x7C
    float handTapVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapCoolDown
    // Size: 0x4
    // Offset: 0x80
    float tapCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastLeftTap
    // Size: 0x4
    // Offset: 0x84
    float lastLeftTap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastRightTap
    // Size: 0x4
    // Offset: 0x88
    float lastRightTap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapHapticDuration
    // Size: 0x4
    // Offset: 0x8C
    float tapHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapHapticStrength
    // Size: 0x4
    // Offset: 0x90
    float tapHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagHapticDuration
    // Size: 0x4
    // Offset: 0x94
    float tagHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagHapticStrength
    // Size: 0x4
    // Offset: 0x98
    float tagHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single taggedHapticDuration
    // Size: 0x4
    // Offset: 0x9C
    float taggedHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single taggedHapticStrength
    // Size: 0x4
    // Offset: 0xA0
    float taggedHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean leftHandTouching
    // Size: 0x1
    // Offset: 0xA4
    bool leftHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rightHandTouching
    // Size: 0x1
    // Offset: 0xA5
    bool rightHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single taggedTime
    // Size: 0x4
    // Offset: 0xA8
    float taggedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagCooldown
    // Size: 0x4
    // Offset: 0xAC
    float tagCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowCooldown
    // Size: 0x4
    // Offset: 0xB0
    float slowCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public VRRig offlineVRRig
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::VRRig* offlineVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo offlineVRRig_gRef
    // Size: 0x1C
    // Offset: 0xC0
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo offlineVRRig_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // public UnityEngine.GameObject thirdPersonCamera
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::GameObject* thirdPersonCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject mainCamera
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::GameObject* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean testTutorial
    // Size: 0x1
    // Offset: 0xF0
    bool testTutorial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableTutorial
    // Size: 0x1
    // Offset: 0xF1
    bool disableTutorial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean frameRateUpdated
    // Size: 0x1
    // Offset: 0xF2
    bool frameRateUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.GameObject leftHandTriggerCollider
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::GameObject* leftHandTriggerCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightHandTriggerCollider
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::GameObject* rightHandTriggerCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioSource leftHandSlideSource
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::AudioSource* leftHandSlideSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource rightHandSlideSource
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::AudioSource* rightHandSlideSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Boolean overrideNotInFocus
    // Size: 0x1
    // Offset: 0x118
    bool overrideNotInFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rigidbody <rigidbody>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Vector3 leftRaycastSweep
    // Size: 0xC
    // Offset: 0x128
    ::UnityEngine::Vector3 leftRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 leftHeadRaycastSweep
    // Size: 0xC
    // Offset: 0x134
    ::UnityEngine::Vector3 leftHeadRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightRaycastSweep
    // Size: 0xC
    // Offset: 0x140
    ::UnityEngine::Vector3 rightRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightHeadRaycastSweep
    // Size: 0xC
    // Offset: 0x14C
    ::UnityEngine::Vector3 rightHeadRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 headRaycastSweep
    // Size: 0xC
    // Offset: 0x158
    ::UnityEngine::Vector3 headRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bodyRaycastSweep
    // Size: 0xC
    // Offset: 0x164
    ::UnityEngine::Vector3 bodyRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.XR.InputDevice rightDevice
    // Size: 0x9
    // Offset: 0x170
    ::UnityEngine::XR::InputDevice rightDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // private UnityEngine.XR.InputDevice leftDevice
    // Size: 0x9
    // Offset: 0x180
    ::UnityEngine::XR::InputDevice leftDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // private System.Boolean primaryButtonPressRight
    // Size: 0x1
    // Offset: 0x190
    bool primaryButtonPressRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean secondaryButtonPressRight
    // Size: 0x1
    // Offset: 0x191
    bool secondaryButtonPressRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean primaryButtonPressLeft
    // Size: 0x1
    // Offset: 0x192
    bool primaryButtonPressLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean secondaryButtonPressLeft
    // Size: 0x1
    // Offset: 0x193
    bool secondaryButtonPressLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.RaycastHit hitInfo
    // Size: 0x2C
    // Offset: 0x194
    ::UnityEngine::RaycastHit hitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // public Photon.Realtime.Player otherPlayer
    // Size: 0x8
    // Offset: 0x1C0
    ::Photon::Realtime::Player* otherPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Player tryPlayer
    // Size: 0x8
    // Offset: 0x1C8
    ::Photon::Realtime::Player* tryPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Player touchedPlayer
    // Size: 0x8
    // Offset: 0x1D0
    ::Photon::Realtime::Player* touchedPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private UnityEngine.Vector3 topVector
    // Size: 0xC
    // Offset: 0x1D8
    ::UnityEngine::Vector3 topVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bottomVector
    // Size: 0xC
    // Offset: 0x1E4
    ::UnityEngine::Vector3 bottomVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bodyVector
    // Size: 0xC
    // Offset: 0x1F0
    ::UnityEngine::Vector3 bodyVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 tempInt
    // Size: 0x4
    // Offset: 0x1FC
    int tempInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.InputDevice inputDevice
    // Size: 0x9
    // Offset: 0x200
    ::UnityEngine::XR::InputDevice inputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // private System.Boolean wasInOverlay
    // Size: 0x1
    // Offset: 0x210
    bool wasInOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Photon.Pun.PhotonView tempView
    // Size: 0x8
    // Offset: 0x218
    ::Photon::Pun::PhotonView* tempView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private Photon.Realtime.Player tempCreator
    // Size: 0x8
    // Offset: 0x220
    ::Photon::Realtime::Player* tempCreator;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public GorillaTagger/StatusEffect currentStatus
    // Size: 0x4
    // Offset: 0x228
    ::GlobalNamespace::GorillaTagger::StatusEffect currentStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTagger::StatusEffect) == 0x4);
    // public System.Single statusStartTime
    // Size: 0x4
    // Offset: 0x22C
    float statusStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single statusEndTime
    // Size: 0x4
    // Offset: 0x230
    float statusEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single refreshRate
    // Size: 0x4
    // Offset: 0x234
    float refreshRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single baseSlideControl
    // Size: 0x4
    // Offset: 0x238
    float baseSlideControl;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 gorillaTagColliderLayerMask
    // Size: 0x4
    // Offset: 0x23C
    int gorillaTagColliderLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.RaycastHit[] nonAllocRaycastHits
    // Size: 0x8
    // Offset: 0x240
    ::ArrayW<::UnityEngine::RaycastHit> nonAllocRaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Int32 nonAllocHits
    // Size: 0x4
    // Offset: 0x248
    int nonAllocHits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.Unity.Recorder <myRecorder>k__BackingField
    // Size: 0x8
    // Offset: 0x250
    ::Photon::Voice::Unity::Recorder* myRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private System.Boolean xrSubsystemIsActive
    // Size: 0x1
    // Offset: 0x258
    bool xrSubsystemIsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.String loadedDeviceName
    // Size: 0x8
    // Offset: 0x260
    ::StringW loadedDeviceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.LayerMask BaseMirrorCameraCullingMask
    // Size: 0x4
    // Offset: 0x268
    ::UnityEngine::LayerMask BaseMirrorCameraCullingMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public Watchable`1<System.Int32> MirrorCameraCullingMask
    // Size: 0x8
    // Offset: 0x270
    ::GlobalNamespace::Watchable_1<int>* MirrorCameraCullingMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Watchable_1<int>*) == 0x8);
    // private System.Nullable`1<System.Single> tagRadiusOverride
    // Size: 0xFFFFFFFF
    // Offset: 0x278
    ::System::Nullable_1<float> tagRadiusOverride;
    // private System.Int32 tagRadiusOverrideFrame
    // Size: 0x4
    // Offset: 0x280
    int tagRadiusOverrideFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    // Size: 0x4
    // Offset: 0x284
    int GuidedRefsWaitingToResolveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono
    operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono() noexcept {
      return *reinterpret_cast<::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*>(this);
    }
    // Get static field: static private GorillaTagger _instance
    static ::GlobalNamespace::GorillaTagger* _get__instance();
    // Set static field: static private GorillaTagger _instance
    static void _set__instance(::GlobalNamespace::GorillaTagger* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static private System.Action onPlayerSpawnedRootCallback
    static ::System::Action* _get_onPlayerSpawnedRootCallback();
    // Set static field: static private System.Action onPlayerSpawnedRootCallback
    static void _set_onPlayerSpawnedRootCallback(::System::Action* value);
    // Get instance field reference: public System.Boolean inCosmeticsRoom
    [[deprecated("Use field access instead!")]] bool& dyn_inCosmeticsRoom();
    // Get instance field reference: public UnityEngine.SphereCollider headCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_headCollider();
    // Get instance field reference: public UnityEngine.CapsuleCollider bodyCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_bodyCollider();
    // Get instance field reference: private UnityEngine.Vector3 lastLeftHandPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastLeftHandPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastRightHandPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRightHandPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastBodyPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastBodyPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastHeadPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastHeadPositionForTag();
    // Get instance field reference: public UnityEngine.Transform rightHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandTransform();
    // Get instance field reference: public UnityEngine.Transform leftHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandTransform();
    // Get instance field reference: public System.Single hapticWaitSeconds
    [[deprecated("Use field access instead!")]] float& dyn_hapticWaitSeconds();
    // Get instance field reference: public System.Single handTapVolume
    [[deprecated("Use field access instead!")]] float& dyn_handTapVolume();
    // Get instance field reference: public System.Single tapCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tapCoolDown();
    // Get instance field reference: public System.Single lastLeftTap
    [[deprecated("Use field access instead!")]] float& dyn_lastLeftTap();
    // Get instance field reference: public System.Single lastRightTap
    [[deprecated("Use field access instead!")]] float& dyn_lastRightTap();
    // Get instance field reference: public System.Single tapHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_tapHapticDuration();
    // Get instance field reference: public System.Single tapHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_tapHapticStrength();
    // Get instance field reference: public System.Single tagHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_tagHapticDuration();
    // Get instance field reference: public System.Single tagHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_tagHapticStrength();
    // Get instance field reference: public System.Single taggedHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_taggedHapticDuration();
    // Get instance field reference: public System.Single taggedHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_taggedHapticStrength();
    // Get instance field reference: private System.Boolean leftHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandTouching();
    // Get instance field reference: private System.Boolean rightHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandTouching();
    // Get instance field reference: public System.Single taggedTime
    [[deprecated("Use field access instead!")]] float& dyn_taggedTime();
    // Get instance field reference: public System.Single tagCooldown
    [[deprecated("Use field access instead!")]] float& dyn_tagCooldown();
    // Get instance field reference: public System.Single slowCooldown
    [[deprecated("Use field access instead!")]] float& dyn_slowCooldown();
    // Get instance field reference: public VRRig offlineVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_offlineVRRig();
    // Get instance field reference: public GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo offlineVRRig_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_offlineVRRig_gRef();
    // Get instance field reference: public UnityEngine.GameObject thirdPersonCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_thirdPersonCamera();
    // Get instance field reference: public UnityEngine.GameObject mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mainCamera();
    // Get instance field reference: public System.Boolean testTutorial
    [[deprecated("Use field access instead!")]] bool& dyn_testTutorial();
    // Get instance field reference: public System.Boolean disableTutorial
    [[deprecated("Use field access instead!")]] bool& dyn_disableTutorial();
    // Get instance field reference: public System.Boolean frameRateUpdated
    [[deprecated("Use field access instead!")]] bool& dyn_frameRateUpdated();
    // Get instance field reference: public UnityEngine.GameObject leftHandTriggerCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftHandTriggerCollider();
    // Get instance field reference: public UnityEngine.GameObject rightHandTriggerCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightHandTriggerCollider();
    // Get instance field reference: public UnityEngine.AudioSource leftHandSlideSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_leftHandSlideSource();
    // Get instance field reference: public UnityEngine.AudioSource rightHandSlideSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_rightHandSlideSource();
    // Get instance field reference: public System.Boolean overrideNotInFocus
    [[deprecated("Use field access instead!")]] bool& dyn_overrideNotInFocus();
    // Get instance field reference: private UnityEngine.Rigidbody <rigidbody>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_$rigidbody$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 leftRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 leftHeadRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHeadRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 rightRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 rightHeadRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHeadRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 headRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 bodyRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyRaycastSweep();
    // Get instance field reference: private UnityEngine.XR.InputDevice rightDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_rightDevice();
    // Get instance field reference: private UnityEngine.XR.InputDevice leftDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_leftDevice();
    // Get instance field reference: private System.Boolean primaryButtonPressRight
    [[deprecated("Use field access instead!")]] bool& dyn_primaryButtonPressRight();
    // Get instance field reference: private System.Boolean secondaryButtonPressRight
    [[deprecated("Use field access instead!")]] bool& dyn_secondaryButtonPressRight();
    // Get instance field reference: private System.Boolean primaryButtonPressLeft
    [[deprecated("Use field access instead!")]] bool& dyn_primaryButtonPressLeft();
    // Get instance field reference: private System.Boolean secondaryButtonPressLeft
    [[deprecated("Use field access instead!")]] bool& dyn_secondaryButtonPressLeft();
    // Get instance field reference: private UnityEngine.RaycastHit hitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_hitInfo();
    // Get instance field reference: public Photon.Realtime.Player otherPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_otherPlayer();
    // Get instance field reference: private Photon.Realtime.Player tryPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tryPlayer();
    // Get instance field reference: private Photon.Realtime.Player touchedPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_touchedPlayer();
    // Get instance field reference: private UnityEngine.Vector3 topVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topVector();
    // Get instance field reference: private UnityEngine.Vector3 bottomVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomVector();
    // Get instance field reference: private UnityEngine.Vector3 bodyVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyVector();
    // Get instance field reference: private System.Int32 tempInt
    [[deprecated("Use field access instead!")]] int& dyn_tempInt();
    // Get instance field reference: private UnityEngine.XR.InputDevice inputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_inputDevice();
    // Get instance field reference: private System.Boolean wasInOverlay
    [[deprecated("Use field access instead!")]] bool& dyn_wasInOverlay();
    // Get instance field reference: private Photon.Pun.PhotonView tempView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_tempView();
    // Get instance field reference: private Photon.Realtime.Player tempCreator
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempCreator();
    // Get instance field reference: public GorillaTagger/StatusEffect currentStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTagger::StatusEffect& dyn_currentStatus();
    // Get instance field reference: public System.Single statusStartTime
    [[deprecated("Use field access instead!")]] float& dyn_statusStartTime();
    // Get instance field reference: public System.Single statusEndTime
    [[deprecated("Use field access instead!")]] float& dyn_statusEndTime();
    // Get instance field reference: private System.Single refreshRate
    [[deprecated("Use field access instead!")]] float& dyn_refreshRate();
    // Get instance field reference: private System.Single baseSlideControl
    [[deprecated("Use field access instead!")]] float& dyn_baseSlideControl();
    // Get instance field reference: private System.Int32 gorillaTagColliderLayerMask
    [[deprecated("Use field access instead!")]] int& dyn_gorillaTagColliderLayerMask();
    // Get instance field reference: private UnityEngine.RaycastHit[] nonAllocRaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_nonAllocRaycastHits();
    // Get instance field reference: private System.Int32 nonAllocHits
    [[deprecated("Use field access instead!")]] int& dyn_nonAllocHits();
    // Get instance field reference: private Photon.Voice.Unity.Recorder <myRecorder>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_$myRecorder$k__BackingField();
    // Get instance field reference: private System.Boolean xrSubsystemIsActive
    [[deprecated("Use field access instead!")]] bool& dyn_xrSubsystemIsActive();
    // Get instance field reference: public System.String loadedDeviceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_loadedDeviceName();
    // Get instance field reference: private UnityEngine.LayerMask BaseMirrorCameraCullingMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_BaseMirrorCameraCullingMask();
    // Get instance field reference: public Watchable`1<System.Int32> MirrorCameraCullingMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Watchable_1<int>*& dyn_MirrorCameraCullingMask();
    // Get instance field reference: private System.Nullable`1<System.Single> tagRadiusOverride
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<float>& dyn_tagRadiusOverride();
    // Get instance field reference: private System.Int32 tagRadiusOverrideFrame
    [[deprecated("Use field access instead!")]] int& dyn_tagRadiusOverrideFrame();
    // Get instance field reference: private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefsWaitingToResolveCount$k__BackingField();
    // static public GorillaTagger get_Instance()
    // Offset: 0x2718D18
    static ::GlobalNamespace::GorillaTagger* get_Instance();
    // public Photon.Pun.PhotonView get_myVRRig()
    // Offset: 0x2717660
    ::Photon::Pun::PhotonView* get_myVRRig();
    // VRRigSerializer get_rigSerializer()
    // Offset: 0x2718D60
    ::GlobalNamespace::VRRigSerializer* get_rigSerializer();
    // public UnityEngine.Rigidbody get_rigidbody()
    // Offset: 0x2718D7C
    ::UnityEngine::Rigidbody* get_rigidbody();
    // private System.Void set_rigidbody(UnityEngine.Rigidbody value)
    // Offset: 0x2718D84
    void set_rigidbody(::UnityEngine::Rigidbody* value);
    // public Photon.Voice.Unity.Recorder get_myRecorder()
    // Offset: 0x2718D94
    ::Photon::Voice::Unity::Recorder* get_myRecorder();
    // private System.Void set_myRecorder(Photon.Voice.Unity.Recorder value)
    // Offset: 0x2718D9C
    void set_myRecorder(::Photon::Voice::Unity::Recorder* value);
    // public System.Single get_sphereCastRadius()
    // Offset: 0x2718DAC
    float get_sphereCastRadius();
    // public System.Void SetTagRadiusOverrideThisFrame(System.Single radius)
    // Offset: 0x2718E1C
    void SetTagRadiusOverrideThisFrame(float radius);
    // protected System.Void Awake()
    // Offset: 0x2718E90
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x2719604
    void OnDestroy();
    // private System.Void IsXRSubsystemActive()
    // Offset: 0x27196B8
    void IsXRSubsystemActive();
    // protected System.Void Start()
    // Offset: 0x27198B0
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0x2719C14
    void LateUpdate();
    // private System.Boolean TryToTag(UnityEngine.RaycastHit hitInfo, System.Boolean isBodyTag, out Photon.Realtime.Player taggedPlayer, out Photon.Realtime.Player touchedPlayer)
    // Offset: 0x271CE50
    bool TryToTag(::UnityEngine::RaycastHit hitInfo, bool isBodyTag, ByRef<::Photon::Realtime::Player*> taggedPlayer, ByRef<::Photon::Realtime::Player*> touchedPlayer);
    // public System.Void StartVibration(System.Boolean forLeftController, System.Single amplitude, System.Single duration)
    // Offset: 0x271CDF8
    void StartVibration(bool forLeftController, float amplitude, float duration);
    // private System.Collections.IEnumerator HapticPulses(System.Boolean forLeftController, System.Single amplitude, System.Single duration)
    // Offset: 0x271D20C
    ::System::Collections::IEnumerator* HapticPulses(bool forLeftController, float amplitude, float duration);
    // public System.Void DoVibration(UnityEngine.XR.XRNode node, System.Single amplitude, System.Single duration)
    // Offset: 0x271D2CC
    void DoVibration(::UnityEngine::XR::XRNode node, float amplitude, float duration);
    // public System.Void UpdateColor(System.Single red, System.Single green, System.Single blue)
    // Offset: 0x271D328
    void UpdateColor(float red, float green, float blue);
    // protected System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x271D470
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void ShowCosmeticParticles(System.Boolean showParticles)
    // Offset: 0x271D4E4
    void ShowCosmeticParticles(bool showParticles);
    // public System.Void ApplyStatusEffect(GorillaTagger/StatusEffect newStatus, System.Single duration)
    // Offset: 0x271D5F4
    void ApplyStatusEffect(::GlobalNamespace::GorillaTagger::StatusEffect newStatus, float duration);
    // private System.Void CheckEndStatusEffect()
    // Offset: 0x271CE1C
    void CheckEndStatusEffect();
    // private System.Void EndStatusEffect(GorillaTagger/StatusEffect effectToEnd)
    // Offset: 0x271D688
    void EndStatusEffect(::GlobalNamespace::GorillaTagger::StatusEffect effectToEnd);
    // private System.Single CalcSlideControl(System.Single fps)
    // Offset: 0x271CCBC
    float CalcSlideControl(float fps);
    // static public System.Void OnPlayerSpawned(System.Action action)
    // Offset: 0x271D6F4
    static void OnPlayerSpawned(::System::Action* action);
    // public System.Void DebugDrawTagCasts(UnityEngine.Color color)
    // Offset: 0x271D814
    void DebugDrawTagCasts(::UnityEngine::Color color);
    // private System.Void DrawSphereCast(UnityEngine.Vector3 start, UnityEngine.Vector3 dir, System.Single radius, System.Single dist, UnityEngine.Color color)
    // Offset: 0x271DDF4
    void DrawSphereCast(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 dir, float radius, float dist, ::UnityEngine::Color color);
    // private System.Void RecoverMissingRefs()
    // Offset: 0x2719504
    void RecoverMissingRefs();
    // private System.Void RecoverMissingRefs_Asdf(ref T objRef, System.String objFieldName, System.String recoveryPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RecoverMissingRefs_Asdf(ByRef<T> objRef, ::StringW objFieldName, ::StringW recoveryPath) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTagger::RecoverMissingRefs_Asdf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecoverMissingRefs_Asdf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objRef), ::il2cpp_utils::ExtractType(objFieldName), ::il2cpp_utils::ExtractType(recoveryPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(objRef), objFieldName, recoveryPath);
    }
    // public System.Void GuidedRefInitialize()
    // Offset: 0x2719454
    void GuidedRefInitialize();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount()
    // Offset: 0x271DEF8
    int GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount();
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount(System.Int32 value)
    // Offset: 0x271DF00
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount(int value);
    // private System.Boolean GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference(GorillaTag.GuidedRefs.GuidedRefTryResolveInfo target)
    // Offset: 0x271DF08
    bool GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo target);
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved()
    // Offset: 0x271E0C8
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved();
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed(System.Int32 fieldId)
    // Offset: 0x271E0CC
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed(int fieldId);
    // public System.Void .ctor()
    // Offset: 0x271E0D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTagger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTagger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTagger*, creationType>()));
    }
    // private UnityEngine.Transform GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform()
    // Offset: 0x271E1D8
    ::UnityEngine::Transform* GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID()
    // Offset: 0x271E1E0
    int GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID();
    // private System.Void <LateUpdate>g__TryTaggingAllHits|99_0(System.Boolean isBodyTag)
    // Offset: 0x271CCF0
    void $LateUpdate$g__TryTaggingAllHits_99_0(bool isBodyTag);
  }; // GorillaTagger
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagger::StatusEffect, "", "GorillaTagger/StatusEffect");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaTagger* (*)()>(&GlobalNamespace::GorillaTagger::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_myVRRig
// Il2CppName: get_myVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_myVRRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_myVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_rigSerializer
// Il2CppName: get_rigSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRigSerializer* (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_rigSerializer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_rigSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_rigidbody
// Il2CppName: get_rigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rigidbody* (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_rigidbody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_rigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::set_rigidbody
// Il2CppName: set_rigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::Rigidbody*)>(&GlobalNamespace::GorillaTagger::set_rigidbody)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "set_rigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_myRecorder
// Il2CppName: get_myRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder* (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_myRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_myRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::set_myRecorder
// Il2CppName: set_myRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::Photon::Voice::Unity::Recorder*)>(&GlobalNamespace::GorillaTagger::set_myRecorder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "set_myRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_sphereCastRadius
// Il2CppName: get_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_sphereCastRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::SetTagRadiusOverrideThisFrame
// Il2CppName: SetTagRadiusOverrideThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(float)>(&GlobalNamespace::GorillaTagger::SetTagRadiusOverrideThisFrame)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "SetTagRadiusOverrideThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::IsXRSubsystemActive
// Il2CppName: IsXRSubsystemActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::IsXRSubsystemActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "IsXRSubsystemActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::TryToTag
// Il2CppName: TryToTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagger::*)(::UnityEngine::RaycastHit, bool, ByRef<::Photon::Realtime::Player*>, ByRef<::Photon::Realtime::Player*>)>(&GlobalNamespace::GorillaTagger::TryToTag)> {
  static const MethodInfo* get() {
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* isBodyTag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->this_arg;
    static auto* touchedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "TryToTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitInfo, isBodyTag, taggedPlayer, touchedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::StartVibration
// Il2CppName: StartVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(bool, float, float)>(&GlobalNamespace::GorillaTagger::StartVibration)> {
  static const MethodInfo* get() {
    static auto* forLeftController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "StartVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftController, amplitude, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::HapticPulses
// Il2CppName: HapticPulses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaTagger::*)(bool, float, float)>(&GlobalNamespace::GorillaTagger::HapticPulses)> {
  static const MethodInfo* get() {
    static auto* forLeftController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "HapticPulses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftController, amplitude, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::DoVibration
// Il2CppName: DoVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::XR::XRNode, float, float)>(&GlobalNamespace::GorillaTagger::DoVibration)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "DoVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, amplitude, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(float, float, float)>(&GlobalNamespace::GorillaTagger::UpdateColor)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GorillaTagger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::ShowCosmeticParticles
// Il2CppName: ShowCosmeticParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(bool)>(&GlobalNamespace::GorillaTagger::ShowCosmeticParticles)> {
  static const MethodInfo* get() {
    static auto* showParticles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "ShowCosmeticParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{showParticles});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::ApplyStatusEffect
// Il2CppName: ApplyStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::GlobalNamespace::GorillaTagger::StatusEffect, float)>(&GlobalNamespace::GorillaTagger::ApplyStatusEffect)> {
  static const MethodInfo* get() {
    static auto* newStatus = &::il2cpp_utils::GetClassFromName("", "GorillaTagger/StatusEffect")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "ApplyStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newStatus, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::CheckEndStatusEffect
// Il2CppName: CheckEndStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::CheckEndStatusEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "CheckEndStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::EndStatusEffect
// Il2CppName: EndStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::GlobalNamespace::GorillaTagger::StatusEffect)>(&GlobalNamespace::GorillaTagger::EndStatusEffect)> {
  static const MethodInfo* get() {
    static auto* effectToEnd = &::il2cpp_utils::GetClassFromName("", "GorillaTagger/StatusEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "EndStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effectToEnd});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::CalcSlideControl
// Il2CppName: CalcSlideControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagger::*)(float)>(&GlobalNamespace::GorillaTagger::CalcSlideControl)> {
  static const MethodInfo* get() {
    static auto* fps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "CalcSlideControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fps});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::OnPlayerSpawned
// Il2CppName: OnPlayerSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::GorillaTagger::OnPlayerSpawned)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "OnPlayerSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::DebugDrawTagCasts
// Il2CppName: DebugDrawTagCasts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::Color)>(&GlobalNamespace::GorillaTagger::DebugDrawTagCasts)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "DebugDrawTagCasts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::DrawSphereCast
// Il2CppName: DrawSphereCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ::UnityEngine::Color)>(&GlobalNamespace::GorillaTagger::DrawSphereCast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dist = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "DrawSphereCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, dir, radius, dist, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::RecoverMissingRefs
// Il2CppName: RecoverMissingRefs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::RecoverMissingRefs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "RecoverMissingRefs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::RecoverMissingRefs_Asdf
// Il2CppName: RecoverMissingRefs_Asdf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GuidedRefInitialize
// Il2CppName: GuidedRefInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::GuidedRefInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GuidedRefInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(int)>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagger::*)(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo)>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("GorillaTag.GuidedRefs", "GuidedRefTryResolveInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(int)>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed)> {
  static const MethodInfo* get() {
    static auto* fieldId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::$LateUpdate$g__TryTaggingAllHits_99_0
// Il2CppName: <LateUpdate>g__TryTaggingAllHits|99_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(bool)>(&GlobalNamespace::GorillaTagger::$LateUpdate$g__TryTaggingAllHits_99_0)> {
  static const MethodInfo* get() {
    static auto* isBodyTag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "<LateUpdate>g__TryTaggingAllHits|99_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isBodyTag});
  }
};
