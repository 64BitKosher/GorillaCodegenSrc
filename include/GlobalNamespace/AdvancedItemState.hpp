// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: LimitAxis
#include "GlobalNamespace/LimitAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  struct ValueTuple_4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AdvancedItemState
  class AdvancedItemState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AdvancedItemState);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AdvancedItemState*, "", "AdvancedItemState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: AdvancedItemState
  // [TokenAttribute] Offset: FFFFFFFF
  class AdvancedItemState : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::AdvancedItemState::PreData
    class PreData;
    // Nested type: ::GlobalNamespace::AdvancedItemState::PointType
    struct PointType;
    public:
    // private System.Int32 _encodedValue
    // Size: 0x4
    // Offset: 0x10
    int encodedValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector2 angleVectorWhereUpIsStandard
    // Size: 0x8
    // Offset: 0x14
    ::UnityEngine::Vector2 angleVectorWhereUpIsStandard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Quaternion deltaRotation
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Quaternion deltaRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x2C
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public AdvancedItemState/PreData preData
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::AdvancedItemState::PreData* preData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AdvancedItemState::PreData*) == 0x8);
    // public LimitAxis limitAxis
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::LimitAxis limitAxis;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LimitAxis) == 0x4);
    // public System.Boolean reverseGrip
    // Size: 0x1
    // Offset: 0x3C
    bool reverseGrip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reverseGrip and: angle
    char __padding6[0x3] = {};
    // public System.Single angle
    // Size: 0x4
    // Offset: 0x40
    float angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Int32 _encodedValue
    [[deprecated("Use field access instead!")]] int& dyn__encodedValue();
    // Get instance field reference: public UnityEngine.Vector2 angleVectorWhereUpIsStandard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_angleVectorWhereUpIsStandard();
    // Get instance field reference: public UnityEngine.Quaternion deltaRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_deltaRotation();
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public AdvancedItemState/PreData preData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AdvancedItemState::PreData*& dyn_preData();
    // Get instance field reference: public LimitAxis limitAxis
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LimitAxis& dyn_limitAxis();
    // Get instance field reference: public System.Boolean reverseGrip
    [[deprecated("Use field access instead!")]] bool& dyn_reverseGrip();
    // Get instance field reference: public System.Single angle
    [[deprecated("Use field access instead!")]] float& dyn_angle();
    // public System.Void Encode()
    // Offset: 0x26C14F0
    void Encode();
    // public System.Void Decode()
    // Offset: 0x26C16D4
    void Decode();
    // public UnityEngine.Quaternion GetQuaternion()
    // Offset: 0x26C18C8
    ::UnityEngine::Quaternion GetQuaternion();
    // public System.ValueTuple`4<System.Int32,System.Single,System.Single,System.Single> DecodeAdvancedItemState(System.Int32 encodedValue)
    // Offset: 0x26C1990
    ::System::ValueTuple_4<int, float, float, float> DecodeAdvancedItemState(int encodedValue);
    // private System.Single get_EncodedDeltaRotation()
    // Offset: 0x26C1A30
    float get_EncodedDeltaRotation();
    // public System.Single GetEncodedDeltaRotation()
    // Offset: 0x26C1A54
    float GetEncodedDeltaRotation();
    // public System.Void DecodeDeltaRotation(System.Single encodedDelta, System.Boolean isFlipped)
    // Offset: 0x26C1A78
    void DecodeDeltaRotation(float encodedDelta, bool isFlipped);
    // public System.Int32 EncodeData()
    // Offset: 0x26C1508
    int EncodeData();
    // public AdvancedItemState DecodeData(System.Int32 encoded)
    // Offset: 0x26C1730
    ::GlobalNamespace::AdvancedItemState* DecodeData(int encoded);
    // public System.Void .ctor()
    // Offset: 0x26C1BC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancedItemState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancedItemState*, creationType>()));
    }
  }; // AdvancedItemState
  #pragma pack(pop)
  static check_size<sizeof(AdvancedItemState), 64 + sizeof(float)> __GlobalNamespace_AdvancedItemStateSizeCheck;
  static_assert(sizeof(AdvancedItemState) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::Encode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::Decode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::GetQuaternion
// Il2CppName: GetQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::GetQuaternion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "GetQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::DecodeAdvancedItemState
// Il2CppName: DecodeAdvancedItemState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_4<int, float, float, float> (GlobalNamespace::AdvancedItemState::*)(int)>(&GlobalNamespace::AdvancedItemState::DecodeAdvancedItemState)> {
  static const MethodInfo* get() {
    static auto* encodedValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "DecodeAdvancedItemState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encodedValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::get_EncodedDeltaRotation
// Il2CppName: get_EncodedDeltaRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::get_EncodedDeltaRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "get_EncodedDeltaRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::GetEncodedDeltaRotation
// Il2CppName: GetEncodedDeltaRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::GetEncodedDeltaRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "GetEncodedDeltaRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::DecodeDeltaRotation
// Il2CppName: DecodeDeltaRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdvancedItemState::*)(float, bool)>(&GlobalNamespace::AdvancedItemState::DecodeDeltaRotation)> {
  static const MethodInfo* get() {
    static auto* encodedDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "DecodeDeltaRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encodedDelta, isFlipped});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::EncodeData
// Il2CppName: EncodeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AdvancedItemState::*)()>(&GlobalNamespace::AdvancedItemState::EncodeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "EncodeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::DecodeData
// Il2CppName: DecodeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::AdvancedItemState* (GlobalNamespace::AdvancedItemState::*)(int)>(&GlobalNamespace::AdvancedItemState::DecodeData)> {
  static const MethodInfo* get() {
    static auto* encoded = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdvancedItemState*), "DecodeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encoded});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdvancedItemState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
