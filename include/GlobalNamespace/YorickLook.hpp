// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: YorickLook
  class YorickLook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::YorickLook);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::YorickLook*, "", "YorickLook");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: YorickLook
  // [TokenAttribute] Offset: FFFFFFFF
  class YorickLook : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform leftEye
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* leftEye;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightEye
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* rightEye;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform lookTarget
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* lookTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single lookRadius
    // Size: 0x4
    // Offset: 0x38
    float lookRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lookRadius and: overlapColliders
    char __padding3[0x4] = {};
    // public UnityEngine.Collider[] overlapColliders
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Collider*> overlapColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public System.Collections.Generic.List`1<VRRig> rigs
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>* rigs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*) == 0x8);
    // public UnityEngine.LayerMask layerMask
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single rotSpeed
    // Size: 0x4
    // Offset: 0x54
    float rotSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lookAtAngleDegrees
    // Size: 0x4
    // Offset: 0x58
    float lookAtAngleDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform leftEye
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftEye();
    // Get instance field reference: public UnityEngine.Transform rightEye
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightEye();
    // Get instance field reference: public UnityEngine.Transform lookTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lookTarget();
    // Get instance field reference: public System.Single lookRadius
    [[deprecated("Use field access instead!")]] float& dyn_lookRadius();
    // Get instance field reference: public UnityEngine.Collider[] overlapColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_overlapColliders();
    // Get instance field reference: public System.Collections.Generic.List`1<VRRig> rigs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*& dyn_rigs();
    // Get instance field reference: public UnityEngine.LayerMask layerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_layerMask();
    // Get instance field reference: public System.Single rotSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotSpeed();
    // Get instance field reference: public System.Single lookAtAngleDegrees
    [[deprecated("Use field access instead!")]] float& dyn_lookAtAngleDegrees();
    // private System.Void Awake()
    // Offset: 0x26CCEC8
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x26CCF94
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26CDA50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YorickLook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YorickLook*, creationType>()));
    }
  }; // YorickLook
  #pragma pack(pop)
  static check_size<sizeof(YorickLook), 88 + sizeof(float)> __GlobalNamespace_YorickLookSizeCheck;
  static_assert(sizeof(YorickLook) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::YorickLook::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::YorickLook::*)()>(&GlobalNamespace::YorickLook::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::YorickLook*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::YorickLook::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::YorickLook::*)()>(&GlobalNamespace::YorickLook::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::YorickLook*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::YorickLook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
