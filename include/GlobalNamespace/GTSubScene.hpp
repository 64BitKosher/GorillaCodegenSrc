// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GTScene
  class GTScene;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTSubScene
  class GTSubScene;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTSubScene);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTSubScene*, "", "GTSubScene");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: GTSubScene
  // [TokenAttribute] Offset: FFFFFFFF
  class GTSubScene : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public GTScene[] scenes
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::GTScene*> scenes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GTScene*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public GTScene[] scenes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTScene*>& dyn_scenes();
    // public System.Void SwitchToScene(System.Int32 index)
    // Offset: 0x279D68C
    void SwitchToScene(int index);
    // public System.Void SwitchToScene(GTScene scene)
    // Offset: 0x279D6C4
    void SwitchToScene(::GlobalNamespace::GTScene* scene);
    // public System.Void LoadAll()
    // Offset: 0x279D754
    void LoadAll();
    // public System.Void UnloadAll()
    // Offset: 0x279D7B4
    void UnloadAll();
    // public System.Void .ctor()
    // Offset: 0x279D814
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTSubScene* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTSubScene*, creationType>()));
    }
  }; // GTSubScene
  #pragma pack(pop)
  static check_size<sizeof(GTSubScene), 24 + sizeof(::ArrayW<::GlobalNamespace::GTScene*>)> __GlobalNamespace_GTSubSceneSizeCheck;
  static_assert(sizeof(GTSubScene) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTSubScene::SwitchToScene
// Il2CppName: SwitchToScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTSubScene::*)(int)>(&GlobalNamespace::GTSubScene::SwitchToScene)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSubScene*), "SwitchToScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSubScene::SwitchToScene
// Il2CppName: SwitchToScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTSubScene::*)(::GlobalNamespace::GTScene*)>(&GlobalNamespace::GTSubScene::SwitchToScene)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("", "GTScene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSubScene*), "SwitchToScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSubScene::LoadAll
// Il2CppName: LoadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTSubScene::*)()>(&GlobalNamespace::GTSubScene::LoadAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSubScene*), "LoadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSubScene::UnloadAll
// Il2CppName: UnloadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTSubScene::*)()>(&GlobalNamespace::GTSubScene::UnloadAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSubScene*), "UnloadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSubScene::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
