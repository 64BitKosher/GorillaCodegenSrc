// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
// Including type: DevButtonType
#include "GlobalNamespace/DevButtonType.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DevConsoleInstance
  class DevConsoleInstance;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaDevButton
  class GorillaDevButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaDevButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaDevButton*, "", "GorillaDevButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: GorillaDevButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaDevButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public DevButtonType Type
    // Size: 0x4
    // Offset: 0x70
    ::GlobalNamespace::DevButtonType Type;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DevButtonType) == 0x4);
    // public UnityEngine.LogType levelType
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::LogType levelType;
    // Field size check
    static_assert(sizeof(::UnityEngine::LogType) == 0x4);
    // public DevConsoleInstance targetConsole
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::DevConsoleInstance* targetConsole;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DevConsoleInstance*) == 0x8);
    // public System.Int32 lineNumber
    // Size: 0x4
    // Offset: 0x80
    int lineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean repeatIfHeld
    // Size: 0x1
    // Offset: 0x84
    bool repeatIfHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: repeatIfHeld and: holdForSeconds
    char __padding4[0x3] = {};
    // public System.Single holdForSeconds
    // Size: 0x4
    // Offset: 0x88
    float holdForSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: holdForSeconds and: pressCoroutine
    char __padding5[0x4] = {};
    // private UnityEngine.Coroutine pressCoroutine
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Coroutine* pressCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: public DevButtonType Type
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DevButtonType& dyn_Type();
    // Get instance field reference: public UnityEngine.LogType levelType
    [[deprecated("Use field access instead!")]] ::UnityEngine::LogType& dyn_levelType();
    // Get instance field reference: public DevConsoleInstance targetConsole
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DevConsoleInstance*& dyn_targetConsole();
    // Get instance field reference: public System.Int32 lineNumber
    [[deprecated("Use field access instead!")]] int& dyn_lineNumber();
    // Get instance field reference: public System.Boolean repeatIfHeld
    [[deprecated("Use field access instead!")]] bool& dyn_repeatIfHeld();
    // Get instance field reference: public System.Single holdForSeconds
    [[deprecated("Use field access instead!")]] float& dyn_holdForSeconds();
    // Get instance field reference: private UnityEngine.Coroutine pressCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_pressCoroutine();
    // public System.Boolean get_on()
    // Offset: 0x273AB84
    bool get_on();
    // public System.Void set_on(System.Boolean value)
    // Offset: 0x273AB8C
    void set_on(bool value);
    // public System.Void OnEnable()
    // Offset: 0x273ABB0
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::OnEnable()
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x273ABBC
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaDevButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDevButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaDevButton*, creationType>()));
    }
  }; // GorillaDevButton
  #pragma pack(pop)
  static check_size<sizeof(GorillaDevButton), 144 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_GorillaDevButtonSizeCheck;
  static_assert(sizeof(GorillaDevButton) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaDevButton::get_on
// Il2CppName: get_on
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaDevButton::*)()>(&GlobalNamespace::GorillaDevButton::get_on)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDevButton*), "get_on", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDevButton::set_on
// Il2CppName: set_on
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDevButton::*)(bool)>(&GlobalNamespace::GorillaDevButton::set_on)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDevButton*), "set_on", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDevButton::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDevButton::*)()>(&GlobalNamespace::GorillaDevButton::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDevButton*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDevButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
