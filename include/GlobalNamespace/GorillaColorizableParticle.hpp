// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaColorizableBase
#include "GlobalNamespace/GorillaColorizableBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaColorizableParticle
  class GorillaColorizableParticle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaColorizableParticle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaColorizableParticle*, "", "GorillaColorizableParticle");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: GorillaColorizableParticle
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaColorizableParticle : public ::GlobalNamespace::GorillaColorizableBase {
    public:
    public:
    // public UnityEngine.ParticleSystem particleSystem
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Single gradientColorPower
    // Size: 0x4
    // Offset: 0x28
    float gradientColorPower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useLinearColor
    // Size: 0x1
    // Offset: 0x2C
    bool useLinearColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleSystem();
    // Get instance field reference: public System.Single gradientColorPower
    [[deprecated("Use field access instead!")]] float& dyn_gradientColorPower();
    // Get instance field reference: public System.Boolean useLinearColor
    [[deprecated("Use field access instead!")]] bool& dyn_useLinearColor();
    // public override System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x270620C
    // Implemented from: GorillaColorizableBase
    // Base method: System.Void GorillaColorizableBase::SetColor(UnityEngine.Color color)
    void SetColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x2706374
    // Implemented from: GorillaColorizableBase
    // Base method: System.Void GorillaColorizableBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaColorizableParticle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaColorizableParticle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaColorizableParticle*, creationType>()));
    }
  }; // GorillaColorizableParticle
  #pragma pack(pop)
  static check_size<sizeof(GorillaColorizableParticle), 44 + sizeof(bool)> __GlobalNamespace_GorillaColorizableParticleSizeCheck;
  static_assert(sizeof(GorillaColorizableParticle) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorizableParticle::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaColorizableParticle::*)(::UnityEngine::Color)>(&GlobalNamespace::GorillaColorizableParticle::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaColorizableParticle*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorizableParticle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
