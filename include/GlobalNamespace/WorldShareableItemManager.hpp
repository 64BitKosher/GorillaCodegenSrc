// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: WorldShareableItem
  class WorldShareableItem;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WorldShareableItemManager
  class WorldShareableItemManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WorldShareableItemManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WorldShareableItemManager*, "", "WorldShareableItemManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: WorldShareableItemManager
  // [TokenAttribute] Offset: FFFFFFFF
  class WorldShareableItemManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public WorldShareableItemManager instance
    static ::GlobalNamespace::WorldShareableItemManager* _get_instance();
    // Set static field: static public WorldShareableItemManager instance
    static void _set_instance(::GlobalNamespace::WorldShareableItemManager* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static public readonly System.Collections.Generic.List`1<WorldShareableItem> worldShareableItems
    static ::System::Collections::Generic::List_1<::GlobalNamespace::WorldShareableItem*>* _get_worldShareableItems();
    // Set static field: static public readonly System.Collections.Generic.List`1<WorldShareableItem> worldShareableItems
    static void _set_worldShareableItems(::System::Collections::Generic::List_1<::GlobalNamespace::WorldShareableItem*>* value);
    // protected System.Void Awake()
    // Offset: 0x2974404
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x2974618
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x29746E8
    void Update();
    // static public System.Void CreateManager()
    // Offset: 0x2974860
    static void CreateManager();
    // static private System.Void SetInstance(WorldShareableItemManager manager)
    // Offset: 0x29744FC
    static void SetInstance(::GlobalNamespace::WorldShareableItemManager* manager);
    // static public System.Void Register(WorldShareableItem worldShareableItem)
    // Offset: 0x2973010
    static void Register(::GlobalNamespace::WorldShareableItem* worldShareableItem);
    // static public System.Void Unregister(WorldShareableItem worldShareableItem)
    // Offset: 0x29732BC
    static void Unregister(::GlobalNamespace::WorldShareableItem* worldShareableItem);
    // public System.Void .ctor()
    // Offset: 0x2974958
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WorldShareableItemManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WorldShareableItemManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2974960
    static void _cctor();
  }; // WorldShareableItemManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItemManager::*)()>(&GlobalNamespace::WorldShareableItemManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItemManager::*)()>(&GlobalNamespace::WorldShareableItemManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItemManager::*)()>(&GlobalNamespace::WorldShareableItemManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::CreateManager
// Il2CppName: CreateManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::WorldShareableItemManager::CreateManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "CreateManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::SetInstance
// Il2CppName: SetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::WorldShareableItemManager*)>(&GlobalNamespace::WorldShareableItemManager::SetInstance)> {
  static const MethodInfo* get() {
    static auto* manager = &::il2cpp_utils::GetClassFromName("", "WorldShareableItemManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "SetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manager});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::WorldShareableItem*)>(&GlobalNamespace::WorldShareableItemManager::Register)> {
  static const MethodInfo* get() {
    static auto* worldShareableItem = &::il2cpp_utils::GetClassFromName("", "WorldShareableItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldShareableItem});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::WorldShareableItem*)>(&GlobalNamespace::WorldShareableItemManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* worldShareableItem = &::il2cpp_utils::GetClassFromName("", "WorldShareableItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldShareableItem});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItemManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::WorldShareableItemManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItemManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
