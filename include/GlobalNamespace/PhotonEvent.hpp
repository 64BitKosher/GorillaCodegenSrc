// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.IOnEventCallback
#include "Photon/Realtime/IOnEventCallback.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: ExitGames.Client.Photon.SendOptions
#include "ExitGames/Client/Photon/SendOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: RaiseEventOptions
  class RaiseEventOptions;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PhotonEvent
  class PhotonEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PhotonEvent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PhotonEvent*, "", "PhotonEvent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PhotonEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonEvent : public ::Il2CppObject/*, public ::Photon::Realtime::IOnEventCallback, public ::System::IEquatable_1<::GlobalNamespace::PhotonEvent*>*/ {
    public:
    // Nested type: ::GlobalNamespace::PhotonEvent::RaiseMode
    struct RaiseMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PhotonEvent/RaiseMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct RaiseMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RaiseMode
      constexpr RaiseMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PhotonEvent/RaiseMode Local
      static constexpr const int Local = 0;
      // Get static field: static public PhotonEvent/RaiseMode Local
      static ::GlobalNamespace::PhotonEvent::RaiseMode _get_Local();
      // Set static field: static public PhotonEvent/RaiseMode Local
      static void _set_Local(::GlobalNamespace::PhotonEvent::RaiseMode value);
      // static field const value: static public PhotonEvent/RaiseMode RemoteOthers
      static constexpr const int RemoteOthers = 1;
      // Get static field: static public PhotonEvent/RaiseMode RemoteOthers
      static ::GlobalNamespace::PhotonEvent::RaiseMode _get_RemoteOthers();
      // Set static field: static public PhotonEvent/RaiseMode RemoteOthers
      static void _set_RemoteOthers(::GlobalNamespace::PhotonEvent::RaiseMode value);
      // static field const value: static public PhotonEvent/RaiseMode RemoteAll
      static constexpr const int RemoteAll = 2;
      // Get static field: static public PhotonEvent/RaiseMode RemoteAll
      static ::GlobalNamespace::PhotonEvent::RaiseMode _get_RemoteAll();
      // Set static field: static public PhotonEvent/RaiseMode RemoteAll
      static void _set_RemoteAll(::GlobalNamespace::PhotonEvent::RaiseMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // PhotonEvent/RaiseMode
    #pragma pack(pop)
    static check_size<sizeof(PhotonEvent::RaiseMode), 0 + sizeof(int)> __GlobalNamespace_PhotonEvent_RaiseModeSizeCheck;
    static_assert(sizeof(PhotonEvent::RaiseMode) == 0x4);
    public:
    // private System.Int32 _eventId
    // Size: 0x4
    // Offset: 0x10
    int eventId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _enabled
    // Size: 0x1
    // Offset: 0x14
    bool enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _reliable
    // Size: 0x1
    // Offset: 0x15
    bool reliable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _failSilent
    // Size: 0x1
    // Offset: 0x16
    bool failSilent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x17
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _delegate
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* delegate;
    // Field size check
    static_assert(sizeof(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IOnEventCallback
    operator ::Photon::Realtime::IOnEventCallback() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IOnEventCallback*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::PhotonEvent*>
    operator ::System::IEquatable_1<::GlobalNamespace::PhotonEvent*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::PhotonEvent*>*>(this);
    }
    // static field const value: static private System.Int32 INVALID_ID
    static constexpr const int INVALID_ID = -1;
    // Get static field: static private System.Int32 INVALID_ID
    static int _get_INVALID_ID();
    // Set static field: static private System.Int32 INVALID_ID
    static void _set_INVALID_ID(int value);
    // Get static field: static private System.Action`2<PhotonEvent,System.Exception> OnError
    static ::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* _get_OnError();
    // Set static field: static private System.Action`2<PhotonEvent,System.Exception> OnError
    static void _set_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value);
    // static field const value: static public System.Byte PHOTON_EVENT_CODE
    static constexpr const uint8_t PHOTON_EVENT_CODE = 176u;
    // Get static field: static public System.Byte PHOTON_EVENT_CODE
    static uint8_t _get_PHOTON_EVENT_CODE();
    // Set static field: static public System.Byte PHOTON_EVENT_CODE
    static void _set_PHOTON_EVENT_CODE(uint8_t value);
    // Get static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversAll
    static ::Photon::Realtime::RaiseEventOptions* _get_gReceiversAll();
    // Set static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversAll
    static void _set_gReceiversAll(::Photon::Realtime::RaiseEventOptions* value);
    // Get static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversOthers
    static ::Photon::Realtime::RaiseEventOptions* _get_gReceiversOthers();
    // Set static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversOthers
    static void _set_gReceiversOthers(::Photon::Realtime::RaiseEventOptions* value);
    // Get static field: static private readonly ExitGames.Client.Photon.SendOptions gSendReliable
    static ::ExitGames::Client::Photon::SendOptions _get_gSendReliable();
    // Set static field: static private readonly ExitGames.Client.Photon.SendOptions gSendReliable
    static void _set_gSendReliable(::ExitGames::Client::Photon::SendOptions value);
    // Get static field: static private readonly ExitGames.Client.Photon.SendOptions gSendUnreliable
    static ::ExitGames::Client::Photon::SendOptions _get_gSendUnreliable();
    // Set static field: static private readonly ExitGames.Client.Photon.SendOptions gSendUnreliable
    static void _set_gSendUnreliable(::ExitGames::Client::Photon::SendOptions value);
    // Get instance field reference: private System.Int32 _eventId
    [[deprecated("Use field access instead!")]] int& dyn__eventId();
    // Get instance field reference: private System.Boolean _enabled
    [[deprecated("Use field access instead!")]] bool& dyn__enabled();
    // Get instance field reference: private System.Boolean _reliable
    [[deprecated("Use field access instead!")]] bool& dyn__reliable();
    // Get instance field reference: private System.Boolean _failSilent
    [[deprecated("Use field access instead!")]] bool& dyn__failSilent();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _delegate
    [[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& dyn__delegate();
    // public System.Boolean get_reliable()
    // Offset: 0x2763904
    bool get_reliable();
    // public System.Void set_reliable(System.Boolean value)
    // Offset: 0x276390C
    void set_reliable(bool value);
    // public System.Boolean get_failSilent()
    // Offset: 0x2763918
    bool get_failSilent();
    // public System.Void set_failSilent(System.Boolean value)
    // Offset: 0x2763920
    void set_failSilent(bool value);
    // private System.Void .ctor()
    // Offset: 0x276392C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonEvent*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 eventId)
    // Offset: 0x276393C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonEvent* New_ctor(int eventId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonEvent*, creationType>(eventId)));
    }
    // public System.Void .ctor(System.String eventId)
    // Offset: 0x2763AAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonEvent* New_ctor(::StringW eventId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonEvent*, creationType>(eventId)));
    }
    // public System.Void .ctor(System.Int32 eventId, System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
    // Offset: 0x2763B94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonEvent* New_ctor(int eventId, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonEvent*, creationType>(eventId, callback)));
    }
    // public System.Void .ctor(System.String eventId, System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
    // Offset: 0x2763CC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonEvent* New_ctor(::StringW eventId, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonEvent*, creationType>(eventId, callback)));
    }
    // public System.Void AddCallback(System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
    // Offset: 0x2763BBC
    void AddCallback(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback);
    // public System.Void RemoveCallback(System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
    // Offset: 0x2763E40
    void RemoveCallback(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback);
    // public System.Void Enable()
    // Offset: 0x2763A08
    void Enable();
    // public System.Void Disable()
    // Offset: 0x2763F04
    void Disable();
    // public System.Void Dispose()
    // Offset: 0x2763D84
    void Dispose();
    // static public System.Void add_OnError(System.Action`2<PhotonEvent,System.Exception> value)
    // Offset: 0x2763FA4
    static void add_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value);
    // static public System.Void remove_OnError(System.Action`2<PhotonEvent,System.Exception> value)
    // Offset: 0x2764094
    static void remove_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value);
    // private System.Void Photon.Realtime.IOnEventCallback.OnEvent(ExitGames.Client.Photon.EventData ev)
    // Offset: 0x2764184
    void Photon_Realtime_IOnEventCallback_OnEvent(::ExitGames::Client::Photon::EventData* ev);
    // private System.Void InvokeDelegate(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x276464C
    void InvokeDelegate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // public System.Void RaiseLocal(params System.Object[] args)
    // Offset: 0x2764668
    void RaiseLocal(::ArrayW<::Il2CppObject*> args);
    // public System.Void RaiseOthers(params System.Object[] args)
    // Offset: 0x276490C
    void RaiseOthers(::ArrayW<::Il2CppObject*> args);
    // public System.Void RaiseAll(params System.Object[] args)
    // Offset: 0x2764918
    void RaiseAll(::ArrayW<::Il2CppObject*> args);
    // private System.Void Raise(PhotonEvent/RaiseMode mode, params System.Object[] args)
    // Offset: 0x2764674
    void Raise(::GlobalNamespace::PhotonEvent::RaiseMode mode, ::ArrayW<::Il2CppObject*> args);
    // public System.Boolean Equals(PhotonEvent other)
    // Offset: 0x2764924
    bool Equals(::GlobalNamespace::PhotonEvent* other);
    // static private System.Void .cctor()
    // Offset: 0x2764DF8
    static void _cctor();
    // protected override System.Void Finalize()
    // Offset: 0x2763CF0
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2764A5C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2764AE8
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // PhotonEvent
  #pragma pack(pop)
  static check_size<sizeof(PhotonEvent), 24 + sizeof(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*)> __GlobalNamespace_PhotonEventSizeCheck;
  static_assert(sizeof(PhotonEvent) == 0x20);
  // static public PhotonEvent op_Addition(PhotonEvent photonEvent, System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
  // Offset: 0x2764C60
  ::GlobalNamespace::PhotonEvent* operator+(::GlobalNamespace::PhotonEvent* photonEvent, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>& callback);
  // static public PhotonEvent op_Subtraction(PhotonEvent photonEvent, System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> callback)
  // Offset: 0x2764D2C
  ::GlobalNamespace::PhotonEvent* operator-(::GlobalNamespace::PhotonEvent* photonEvent, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>& callback);
  // static public System.Boolean op_Equality(PhotonEvent x, PhotonEvent y)
  // Offset: 0x27649F0
  bool operator ==(::GlobalNamespace::PhotonEvent* x, ::GlobalNamespace::PhotonEvent& y);
  // static public System.Boolean op_Inequality(PhotonEvent x, PhotonEvent y)
  // Offset: 0x2764F0C
  bool operator !=(::GlobalNamespace::PhotonEvent* x, ::GlobalNamespace::PhotonEvent& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PhotonEvent::RaiseMode, "", "PhotonEvent/RaiseMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::get_reliable
// Il2CppName: get_reliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::get_reliable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "get_reliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::set_reliable
// Il2CppName: set_reliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(bool)>(&GlobalNamespace::PhotonEvent::set_reliable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "set_reliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::get_failSilent
// Il2CppName: get_failSilent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::get_failSilent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "get_failSilent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::set_failSilent
// Il2CppName: set_failSilent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(bool)>(&GlobalNamespace::PhotonEvent::set_failSilent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "set_failSilent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::AddCallback
// Il2CppName: AddCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*)>(&GlobalNamespace::PhotonEvent::AddCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1), ::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "AddCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::RemoveCallback
// Il2CppName: RemoveCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*)>(&GlobalNamespace::PhotonEvent::RemoveCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1), ::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "RemoveCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::add_OnError
// Il2CppName: add_OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>*)>(&GlobalNamespace::PhotonEvent::add_OnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PhotonEvent"), ::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "add_OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::remove_OnError
// Il2CppName: remove_OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>*)>(&GlobalNamespace::PhotonEvent::remove_OnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PhotonEvent"), ::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "remove_OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Photon_Realtime_IOnEventCallback_OnEvent
// Il2CppName: Photon.Realtime.IOnEventCallback.OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::ExitGames::Client::Photon::EventData*)>(&GlobalNamespace::PhotonEvent::Photon_Realtime_IOnEventCallback_OnEvent)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Photon.Realtime.IOnEventCallback.OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::InvokeDelegate
// Il2CppName: InvokeDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::PhotonEvent::InvokeDelegate)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "InvokeDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::RaiseLocal
// Il2CppName: RaiseLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::PhotonEvent::RaiseLocal)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "RaiseLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::RaiseOthers
// Il2CppName: RaiseOthers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::PhotonEvent::RaiseOthers)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "RaiseOthers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::RaiseAll
// Il2CppName: RaiseAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::PhotonEvent::RaiseAll)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "RaiseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Raise
// Il2CppName: Raise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)(::GlobalNamespace::PhotonEvent::RaiseMode, ::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::PhotonEvent::Raise)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("", "PhotonEvent/RaiseMode")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Raise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonEvent::*)(::GlobalNamespace::PhotonEvent*)>(&GlobalNamespace::PhotonEvent::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "PhotonEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::PhotonEvent::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonEvent::*)(::Il2CppObject*)>(&GlobalNamespace::PhotonEvent::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::PhotonEvent::*)()>(&GlobalNamespace::PhotonEvent::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonEvent*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::PhotonEvent::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
