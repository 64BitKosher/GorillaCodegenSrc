// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GTScene
  class GTScene;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTSceneUtils
  class GTSceneUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTSceneUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTSceneUtils*, "", "GTSceneUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: GTSceneUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class GTSceneUtils : public ::Il2CppObject {
    public:
    // static public System.Void AddToBuild(GTScene scene)
    // Offset: 0x279D54C
    static void AddToBuild(::GlobalNamespace::GTScene* scene);
    // static public System.Boolean Equals(GTScene x, UnityEngine.SceneManagement.Scene y)
    // Offset: 0x279D550
    static bool Equals(::GlobalNamespace::GTScene* x, ::UnityEngine::SceneManagement::Scene y);
    // static public GTScene[] ScenesInBuild()
    // Offset: 0x279D5FC
    static ::ArrayW<::GlobalNamespace::GTScene*> ScenesInBuild();
    // static public System.Void SyncBuildScenes()
    // Offset: 0x279D688
    static void SyncBuildScenes();
  }; // GTSceneUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTSceneUtils::AddToBuild
// Il2CppName: AddToBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GTScene*)>(&GlobalNamespace::GTSceneUtils::AddToBuild)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("", "GTScene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSceneUtils*), "AddToBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSceneUtils::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::GTScene*, ::UnityEngine::SceneManagement::Scene)>(&GlobalNamespace::GTSceneUtils::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("", "GTScene")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSceneUtils*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSceneUtils::ScenesInBuild
// Il2CppName: ScenesInBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::GTScene*> (*)()>(&GlobalNamespace::GTSceneUtils::ScenesInBuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSceneUtils*), "ScenesInBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTSceneUtils::SyncBuildScenes
// Il2CppName: SyncBuildScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTSceneUtils::SyncBuildScenes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTSceneUtils*), "SyncBuildScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
