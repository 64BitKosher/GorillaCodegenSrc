// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRObjectPool
#include "GlobalNamespace/OVRObjectPool.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::OVRObjectPool::ListScope_1, "", "OVRObjectPool/ListScope`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRObjectPool/ListScope`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct OVRObjectPool::ListScope_1/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Collections.Generic.List`1<T> _list
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* list;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    public:
    // Creating value type constructor for type: ListScope_1
    constexpr ListScope_1(::System::Collections::Generic::List_1<T>* list_ = {}) noexcept : list{list_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<T>*
    constexpr operator ::System::Collections::Generic::List_1<T>*() const noexcept {
      return list;
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<T> _list
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn__list() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRObjectPool::ListScope_1::dyn__list");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_list"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(out System.Collections.Generic.List`1<T> list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ListScope_1(ByRef<::System::Collections::Generic::List_1<T>*> list) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRObjectPool::ListScope_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Collections::Generic::List_1<T>*&>()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(list));
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRObjectPool::ListScope_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::OVRObjectPool::ListScope_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // OVRObjectPool/ListScope`1
  // Could not write size check! Type: OVRObjectPool/ListScope`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
