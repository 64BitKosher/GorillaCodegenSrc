// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SizeChanger
  class SizeChanger;
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SizeManager
  class SizeManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SizeManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeManager*, "", "SizeManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: SizeManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SizeManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SizeManager::SizeChangerType
    struct SizeChangerType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SizeManager/SizeChangerType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SizeChangerType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SizeChangerType
      constexpr SizeChangerType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SizeManager/SizeChangerType LocalOffline
      static constexpr const int LocalOffline = 0;
      // Get static field: static public SizeManager/SizeChangerType LocalOffline
      static ::GlobalNamespace::SizeManager::SizeChangerType _get_LocalOffline();
      // Set static field: static public SizeManager/SizeChangerType LocalOffline
      static void _set_LocalOffline(::GlobalNamespace::SizeManager::SizeChangerType value);
      // static field const value: static public SizeManager/SizeChangerType LocalOnline
      static constexpr const int LocalOnline = 1;
      // Get static field: static public SizeManager/SizeChangerType LocalOnline
      static ::GlobalNamespace::SizeManager::SizeChangerType _get_LocalOnline();
      // Set static field: static public SizeManager/SizeChangerType LocalOnline
      static void _set_LocalOnline(::GlobalNamespace::SizeManager::SizeChangerType value);
      // static field const value: static public SizeManager/SizeChangerType OtherOnline
      static constexpr const int OtherOnline = 2;
      // Get static field: static public SizeManager/SizeChangerType OtherOnline
      static ::GlobalNamespace::SizeManager::SizeChangerType _get_OtherOnline();
      // Set static field: static public SizeManager/SizeChangerType OtherOnline
      static void _set_OtherOnline(::GlobalNamespace::SizeManager::SizeChangerType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SizeManager/SizeChangerType
    #pragma pack(pop)
    static check_size<sizeof(SizeManager::SizeChangerType), 0 + sizeof(int)> __GlobalNamespace_SizeManager_SizeChangerTypeSizeCheck;
    static_assert(sizeof(SizeManager::SizeChangerType) == 0x4);
    public:
    // public System.Collections.Generic.List`1<SizeChanger> touchingChangers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::SizeChanger*>* touchingChangers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SizeChanger*>*) == 0x8);
    // private UnityEngine.LineRenderer[] lineRenderers
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::LineRenderer*> lineRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::LineRenderer*>) == 0x8);
    // private System.Collections.Generic.List`1<System.Single> initLineScalar
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<float>* initLineScalar;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // public VRRig targetRig
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::VRRig* targetRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public GorillaLocomotion.Player targetPlayer
    // Size: 0x8
    // Offset: 0x40
    ::GorillaLocomotion::Player* targetPlayer;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Player*) == 0x8);
    // public System.Single magnitudeThreshold
    // Size: 0x4
    // Offset: 0x48
    float magnitudeThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rate
    // Size: 0x4
    // Offset: 0x4C
    float rate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform mainCameraTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* mainCameraTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public SizeManager/SizeChangerType myType
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::SizeManager::SizeChangerType myType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeManager::SizeChangerType) == 0x4);
    // public System.Single lastScale
    // Size: 0x4
    // Offset: 0x5C
    float lastScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean buildInitialized
    // Size: 0x1
    // Offset: 0x60
    bool buildInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.Single returnToNormalEasing
    static constexpr const float returnToNormalEasing = 0.33;
    // Get static field: static private System.Single returnToNormalEasing
    static float _get_returnToNormalEasing();
    // Set static field: static private System.Single returnToNormalEasing
    static void _set_returnToNormalEasing(float value);
    // Get instance field reference: public System.Collections.Generic.List`1<SizeChanger> touchingChangers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SizeChanger*>*& dyn_touchingChangers();
    // Get instance field reference: private UnityEngine.LineRenderer[] lineRenderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LineRenderer*>& dyn_lineRenderers();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> initLineScalar
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_initLineScalar();
    // Get instance field reference: public VRRig targetRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetRig();
    // Get instance field reference: public GorillaLocomotion.Player targetPlayer
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Player*& dyn_targetPlayer();
    // Get instance field reference: public System.Single magnitudeThreshold
    [[deprecated("Use field access instead!")]] float& dyn_magnitudeThreshold();
    // Get instance field reference: public System.Single rate
    [[deprecated("Use field access instead!")]] float& dyn_rate();
    // Get instance field reference: public UnityEngine.Transform mainCameraTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mainCameraTransform();
    // Get instance field reference: public SizeManager/SizeChangerType myType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeManager::SizeChangerType& dyn_myType();
    // Get instance field reference: public System.Single lastScale
    [[deprecated("Use field access instead!")]] float& dyn_lastScale();
    // Get instance field reference: private System.Boolean buildInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_buildInitialized();
    // public System.Single get_currentScale()
    // Offset: 0x272BCFC
    float get_currentScale();
    // public System.Int32 get_currentSizeLayerMaskValue()
    // Offset: 0x272BDB0
    int get_currentSizeLayerMaskValue();
    // public System.Void set_currentSizeLayerMaskValue(System.Int32 value)
    // Offset: 0x272B7AC
    void set_currentSizeLayerMaskValue(int value);
    // private System.Void OnDisable()
    // Offset: 0x272BE68
    void OnDisable();
    // private System.Void OnEnable()
    // Offset: 0x272C004
    void OnEnable();
    // private System.Void CollectLineRenderers(UnityEngine.GameObject obj)
    // Offset: 0x272C1AC
    void CollectLineRenderers(::UnityEngine::GameObject* obj);
    // public System.Void BuildInitialize()
    // Offset: 0x272C2D8
    void BuildInitialize();
    // private System.Void Awake()
    // Offset: 0x272C4F0
    void Awake();
    // public System.Void InvokeFixedUpdate()
    // Offset: 0x272C554
    void InvokeFixedUpdate();
    // private SizeChanger ControllingChanger(UnityEngine.Transform t)
    // Offset: 0x272C744
    ::GlobalNamespace::SizeChanger* ControllingChanger(::UnityEngine::Transform* t);
    // private System.Single ScaleFromChanger(SizeChanger sC, UnityEngine.Transform t, System.Single deltaTime)
    // Offset: 0x272C954
    float ScaleFromChanger(::GlobalNamespace::SizeChanger* sC, ::UnityEngine::Transform* t, float deltaTime);
    // private System.Single SizeOverTime(System.Single targetSize, System.Single easing, System.Single deltaTime)
    // Offset: 0x272CC7C
    float SizeOverTime(float targetSize, float easing, float deltaTime);
    // public System.Void .ctor()
    // Offset: 0x272CCD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SizeManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SizeManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SizeManager*, creationType>()));
    }
  }; // SizeManager
  #pragma pack(pop)
  static check_size<sizeof(SizeManager), 96 + sizeof(bool)> __GlobalNamespace_SizeManagerSizeCheck;
  static_assert(sizeof(SizeManager) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeManager::SizeChangerType, "", "SizeManager/SizeChangerType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::get_currentScale
// Il2CppName: get_currentScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::get_currentScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "get_currentScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::get_currentSizeLayerMaskValue
// Il2CppName: get_currentSizeLayerMaskValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::get_currentSizeLayerMaskValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "get_currentSizeLayerMaskValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::set_currentSizeLayerMaskValue
// Il2CppName: set_currentSizeLayerMaskValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)(int)>(&GlobalNamespace::SizeManager::set_currentSizeLayerMaskValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "set_currentSizeLayerMaskValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::CollectLineRenderers
// Il2CppName: CollectLineRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::SizeManager::CollectLineRenderers)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "CollectLineRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::BuildInitialize
// Il2CppName: BuildInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::BuildInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "BuildInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::InvokeFixedUpdate
// Il2CppName: InvokeFixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeManager::*)()>(&GlobalNamespace::SizeManager::InvokeFixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "InvokeFixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::ControllingChanger
// Il2CppName: ControllingChanger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SizeChanger* (GlobalNamespace::SizeManager::*)(::UnityEngine::Transform*)>(&GlobalNamespace::SizeManager::ControllingChanger)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "ControllingChanger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::ScaleFromChanger
// Il2CppName: ScaleFromChanger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeManager::*)(::GlobalNamespace::SizeChanger*, ::UnityEngine::Transform*, float)>(&GlobalNamespace::SizeManager::ScaleFromChanger)> {
  static const MethodInfo* get() {
    static auto* sC = &::il2cpp_utils::GetClassFromName("", "SizeChanger")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "ScaleFromChanger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sC, t, deltaTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::SizeOverTime
// Il2CppName: SizeOverTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeManager::*)(float, float, float)>(&GlobalNamespace::SizeManager::SizeOverTime)> {
  static const MethodInfo* get() {
    static auto* targetSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeManager*), "SizeOverTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetSize, easing, deltaTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
