// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SubEmitterListener
#include "GlobalNamespace/SubEmitterListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpitballEvents
  class SpitballEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpitballEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpitballEvents*, "", "SpitballEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: SpitballEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class SpitballEvents : public ::GlobalNamespace::SubEmitterListener {
    public:
    public:
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _sfxHit
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* sfxHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private UnityEngine.AudioClip _sfxHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__sfxHit();
    // protected override System.Void OnSubEmit()
    // Offset: 0x26D7F18
    // Implemented from: SubEmitterListener
    // Base method: System.Void SubEmitterListener::OnSubEmit()
    void OnSubEmit();
    // public System.Void .ctor()
    // Offset: 0x26D7FCC
    // Implemented from: SubEmitterListener
    // Base method: System.Void SubEmitterListener::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpitballEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpitballEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpitballEvents*, creationType>()));
    }
  }; // SpitballEvents
  #pragma pack(pop)
  static check_size<sizeof(SpitballEvents), 96 + sizeof(::UnityEngine::AudioClip*)> __GlobalNamespace_SpitballEventsSizeCheck;
  static_assert(sizeof(SpitballEvents) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpitballEvents::OnSubEmit
// Il2CppName: OnSubEmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpitballEvents::*)()>(&GlobalNamespace::SpitballEvents::OnSubEmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpitballEvents*), "OnSubEmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpitballEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
