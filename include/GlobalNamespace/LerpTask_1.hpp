// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LerpTask`1<T>
  template<typename T>
  class LerpTask_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::LerpTask_1, "", "LerpTask`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: LerpTask`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LerpTask_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Single elapsed
    // Size: 0x4
    // Offset: 0x0
    float elapsed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x0
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public T lerpFrom
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T lerpFrom;
    // public T lerpTo
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T lerpTo;
    // public System.Action`3<T,T,System.Single> onLerp
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_3<T, T, float>* onLerp;
    // Field size check
    static_assert(sizeof(::System::Action_3<T, T, float>*) == 0x8);
    // public System.Action onLerpEnd
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* onLerpEnd;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Boolean active
    // Size: 0x1
    // Offset: 0x0
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.Single elapsed
    [[deprecated("Use field access instead!")]] float& dyn_elapsed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_elapsed");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elapsed"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_duration");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T lerpFrom
    [[deprecated("Use field access instead!")]] T& dyn_lerpFrom() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_lerpFrom");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpFrom"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T lerpTo
    [[deprecated("Use field access instead!")]] T& dyn_lerpTo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_lerpTo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpTo"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Action`3<T,T,System.Single> onLerp
    [[deprecated("Use field access instead!")]] ::System::Action_3<T, T, float>*& dyn_onLerp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_onLerp");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onLerp"))->offset;
      return *reinterpret_cast<::System::Action_3<T, T, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Action onLerpEnd
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onLerpEnd() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_onLerpEnd");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onLerpEnd"))->offset;
      return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Boolean active
    [[deprecated("Use field access instead!")]] bool& dyn_active() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::dyn_active");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::Reset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Start(T from, T to, System.Single duration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start(T from, T to, float duration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::Start");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(duration)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, from, to, duration);
    }
    // public System.Void Finish()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Finish() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::Finish");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Update()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Update() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::Update");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LerpTask_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpTask_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LerpTask_1<T>*, creationType>()));
    }
  }; // LerpTask`1
  // Could not write size check! Type: LerpTask`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
