// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ReportInfo
  class ReportInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ReportInfo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ReportInfo*, "", "ReportInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: ReportInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ReportInfo : public ::Il2CppObject {
    public:
    public:
    // public readonly System.String SusName
    // Size: 0x8
    // Offset: 0x10
    ::StringW SusName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String SusId
    // Size: 0x8
    // Offset: 0x18
    ::StringW SusId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String SusReason
    // Size: 0x8
    // Offset: 0x20
    ::StringW SusReason;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Int32 hashCode
    // Size: 0x4
    // Offset: 0x28
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.String SusName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SusName();
    // Get instance field reference: public readonly System.String SusId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SusId();
    // Get instance field reference: public readonly System.String SusReason
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SusReason();
    // Get instance field reference: private readonly System.Int32 hashCode
    [[deprecated("Use field access instead!")]] int& dyn_hashCode();
    // private System.Void .ctor()
    // Offset: 0x2711AEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReportInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReportInfo*, creationType>()));
    }
    // public System.Void .ctor(System.String inName, System.String inId, System.String inReason)
    // Offset: 0x2711AF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReportInfo* New_ctor(::StringW inName, ::StringW inId, ::StringW inReason) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReportInfo*, creationType>(inName, inId, inReason)));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2711C28
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2711CB4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2711CBC
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // ReportInfo
  #pragma pack(pop)
  static check_size<sizeof(ReportInfo), 40 + sizeof(int)> __GlobalNamespace_ReportInfoSizeCheck;
  static_assert(sizeof(ReportInfo) == 0x2C);
  // static public System.Boolean op_Inequality(ReportInfo lhs, ReportInfo rhs)
  // Offset: 0x2711BD8
  bool operator !=(::GlobalNamespace::ReportInfo* lhs, ::GlobalNamespace::ReportInfo& rhs);
  // static public System.Boolean op_Equality(ReportInfo lhs, ReportInfo rhs)
  // Offset: 0x2711C00
  bool operator ==(::GlobalNamespace::ReportInfo* lhs, ::GlobalNamespace::ReportInfo& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ReportInfo::*)(::Il2CppObject*)>(&GlobalNamespace::ReportInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReportInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ReportInfo::*)()>(&GlobalNamespace::ReportInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReportInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ReportInfo::*)()>(&GlobalNamespace::ReportInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReportInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ReportInfo::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
