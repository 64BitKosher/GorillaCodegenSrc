// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaNetworking.CosmeticsController/CosmeticCategory
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HeadModel
  class HeadModel;
  // Forward declaring type: GorillaPressableButton
  class GorillaPressableButton;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CosmeticWardrobe
  class CosmeticWardrobe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CosmeticWardrobe);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CosmeticWardrobe*, "", "CosmeticWardrobe");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: CosmeticWardrobe
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticWardrobe : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection
    class CosmeticWardrobeSelection;
    // Nested type: ::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory
    class CosmeticWardrobeCategory;
    public:
    // private CosmeticWardrobe/CosmeticWardrobeSelection[] cosmeticCollectionDisplays
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection*> cosmeticCollectionDisplays;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection*>) == 0x8);
    // private CosmeticWardrobe/CosmeticWardrobeCategory[] cosmeticCategoryButtons
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory*> cosmeticCategoryButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory*>) == 0x8);
    // private HeadModel currentEquippedDisplay
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::HeadModel* currentEquippedDisplay;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HeadModel*) == 0x8);
    // private GorillaPressableButton nextSelection
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::GorillaPressableButton* nextSelection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPressableButton*) == 0x8);
    // private GorillaPressableButton prevSelection
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GorillaPressableButton* prevSelection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPressableButton*) == 0x8);
    public:
    // Get static field: static private System.Int32 selectedCategoryIndex
    static int _get_selectedCategoryIndex();
    // Set static field: static private System.Int32 selectedCategoryIndex
    static void _set_selectedCategoryIndex(int value);
    // Get static field: static private GorillaNetworking.CosmeticsController/CosmeticCategory selectedCategory
    static ::GorillaNetworking::CosmeticsController::CosmeticCategory _get_selectedCategory();
    // Set static field: static private GorillaNetworking.CosmeticsController/CosmeticCategory selectedCategory
    static void _set_selectedCategory(::GorillaNetworking::CosmeticsController::CosmeticCategory value);
    // Get static field: static private System.Int32 startingDisplayIndex
    static int _get_startingDisplayIndex();
    // Set static field: static private System.Int32 startingDisplayIndex
    static void _set_startingDisplayIndex(int value);
    // Get static field: static private System.Action OnWardrobeUpdateCategories
    static ::System::Action* _get_OnWardrobeUpdateCategories();
    // Set static field: static private System.Action OnWardrobeUpdateCategories
    static void _set_OnWardrobeUpdateCategories(::System::Action* value);
    // Get static field: static private System.Action OnWardrobeUpdateDisplays
    static ::System::Action* _get_OnWardrobeUpdateDisplays();
    // Set static field: static private System.Action OnWardrobeUpdateDisplays
    static void _set_OnWardrobeUpdateDisplays(::System::Action* value);
    // Get instance field reference: private CosmeticWardrobe/CosmeticWardrobeSelection[] cosmeticCollectionDisplays
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection*>& dyn_cosmeticCollectionDisplays();
    // Get instance field reference: private CosmeticWardrobe/CosmeticWardrobeCategory[] cosmeticCategoryButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory*>& dyn_cosmeticCategoryButtons();
    // Get instance field reference: private HeadModel currentEquippedDisplay
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& dyn_currentEquippedDisplay();
    // Get instance field reference: private GorillaPressableButton nextSelection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& dyn_nextSelection();
    // Get instance field reference: private GorillaPressableButton prevSelection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& dyn_prevSelection();
    // private System.Void Start()
    // Offset: 0x26D0C30
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x26D14B0
    void OnDestroy();
    // private System.Void HandlePressedNextSelection(GorillaPressableButton button, System.Boolean isLeft)
    // Offset: 0x26D19F8
    void HandlePressedNextSelection(::GlobalNamespace::GorillaPressableButton* button, bool isLeft);
    // private System.Void HandlePressedPrevSelection(GorillaPressableButton button, System.Boolean isLeft)
    // Offset: 0x26D1B0C
    void HandlePressedPrevSelection(::GlobalNamespace::GorillaPressableButton* button, bool isLeft);
    // private System.Void HandlePressedSelectCosmeticButton(GorillaPressableButton button, System.Boolean isLeft)
    // Offset: 0x26D1C48
    void HandlePressedSelectCosmeticButton(::GlobalNamespace::GorillaPressableButton* button, bool isLeft);
    // private System.Void HandleChangeCategory(GorillaPressableButton button, System.Boolean isLeft)
    // Offset: 0x26D1E38
    void HandleChangeCategory(::GlobalNamespace::GorillaPressableButton* button, bool isLeft);
    // private System.Void HandleCosmeticsUpdated()
    // Offset: 0x26D1400
    void HandleCosmeticsUpdated();
    // private System.Void HandleLocalColorChanged(UnityEngine.Color newColor)
    // Offset: 0x26D1310
    void HandleLocalColorChanged(::UnityEngine::Color newColor);
    // private System.Void UpdateCosmeticDisplays()
    // Offset: 0x26D25E8
    void UpdateCosmeticDisplays();
    // private System.Void UpdateCategoryButtons()
    // Offset: 0x26D23D4
    void UpdateCategoryButtons();
    // public System.Void .ctor()
    // Offset: 0x26D29B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticWardrobe* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticWardrobe*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26D29B8
    static void _cctor();
  }; // CosmeticWardrobe
  #pragma pack(pop)
  static check_size<sizeof(CosmeticWardrobe), 64 + sizeof(::GlobalNamespace::GorillaPressableButton*)> __GlobalNamespace_CosmeticWardrobeSizeCheck;
  static_assert(sizeof(CosmeticWardrobe) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)()>(&GlobalNamespace::CosmeticWardrobe::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)()>(&GlobalNamespace::CosmeticWardrobe::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandlePressedNextSelection
// Il2CppName: HandlePressedNextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)(::GlobalNamespace::GorillaPressableButton*, bool)>(&GlobalNamespace::CosmeticWardrobe::HandlePressedNextSelection)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandlePressedNextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeft});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandlePressedPrevSelection
// Il2CppName: HandlePressedPrevSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)(::GlobalNamespace::GorillaPressableButton*, bool)>(&GlobalNamespace::CosmeticWardrobe::HandlePressedPrevSelection)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandlePressedPrevSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeft});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandlePressedSelectCosmeticButton
// Il2CppName: HandlePressedSelectCosmeticButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)(::GlobalNamespace::GorillaPressableButton*, bool)>(&GlobalNamespace::CosmeticWardrobe::HandlePressedSelectCosmeticButton)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandlePressedSelectCosmeticButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeft});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandleChangeCategory
// Il2CppName: HandleChangeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)(::GlobalNamespace::GorillaPressableButton*, bool)>(&GlobalNamespace::CosmeticWardrobe::HandleChangeCategory)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandleChangeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeft});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandleCosmeticsUpdated
// Il2CppName: HandleCosmeticsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)()>(&GlobalNamespace::CosmeticWardrobe::HandleCosmeticsUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandleCosmeticsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::HandleLocalColorChanged
// Il2CppName: HandleLocalColorChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)(::UnityEngine::Color)>(&GlobalNamespace::CosmeticWardrobe::HandleLocalColorChanged)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "HandleLocalColorChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::UpdateCosmeticDisplays
// Il2CppName: UpdateCosmeticDisplays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)()>(&GlobalNamespace::CosmeticWardrobe::UpdateCosmeticDisplays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "UpdateCosmeticDisplays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::UpdateCategoryButtons
// Il2CppName: UpdateCategoryButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticWardrobe::*)()>(&GlobalNamespace::CosmeticWardrobe::UpdateCategoryButtons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), "UpdateCategoryButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CosmeticWardrobe::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CosmeticWardrobe::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticWardrobe*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
