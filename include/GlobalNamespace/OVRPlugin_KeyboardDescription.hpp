// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/Vector3f
// Already included the same include: GlobalNamespace/OVRPlugin.hpp
// Including type: OVRPlugin/TrackedKeyboardFlags
#include "GlobalNamespace/OVRPlugin_TrackedKeyboardFlags.hpp"
// Including type: OVRPlugin/TrackedKeyboardPresentationStyles
#include "GlobalNamespace/OVRPlugin_TrackedKeyboardPresentationStyles.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::KeyboardDescription, "", "OVRPlugin/KeyboardDescription");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/KeyboardDescription
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::KeyboardDescription/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte[] Name
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> Name;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.UInt64 TrackedKeyboardId
    // Size: 0x8
    // Offset: 0x8
    uint64_t TrackedKeyboardId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public OVRPlugin/Vector3f Dimensions
    // Size: 0xC
    // Offset: 0x10
    ::GlobalNamespace::OVRPlugin::Vector3f Dimensions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
    // public OVRPlugin/TrackedKeyboardFlags KeyboardFlags
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags KeyboardFlags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags) == 0x4);
    // public OVRPlugin/TrackedKeyboardPresentationStyles SupportedPresentationStyles
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles SupportedPresentationStyles;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles) == 0x4);
    public:
    // Creating value type constructor for type: KeyboardDescription
    constexpr KeyboardDescription(::ArrayW<uint8_t> Name_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), uint64_t TrackedKeyboardId_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f Dimensions_ = {}, ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags KeyboardFlags_ = {}, ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles SupportedPresentationStyles_ = {}) noexcept : Name{Name_}, TrackedKeyboardId{TrackedKeyboardId_}, Dimensions{Dimensions_}, KeyboardFlags{KeyboardFlags_}, SupportedPresentationStyles{SupportedPresentationStyles_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Byte[] Name
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Name();
    // Get instance field reference: public System.UInt64 TrackedKeyboardId
    [[deprecated("Use field access instead!")]] uint64_t& dyn_TrackedKeyboardId();
    // Get instance field reference: public OVRPlugin/Vector3f Dimensions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_Dimensions();
    // Get instance field reference: public OVRPlugin/TrackedKeyboardFlags KeyboardFlags
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags& dyn_KeyboardFlags();
    // Get instance field reference: public OVRPlugin/TrackedKeyboardPresentationStyles SupportedPresentationStyles
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles& dyn_SupportedPresentationStyles();
  }; // OVRPlugin/KeyboardDescription
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::KeyboardDescription), 32 + sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles)> __GlobalNamespace_OVRPlugin_KeyboardDescriptionSizeCheck;
  static_assert(sizeof(OVRPlugin::KeyboardDescription) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
