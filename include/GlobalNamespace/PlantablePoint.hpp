// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlantableObject
  class PlantableObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlantablePoint
  class PlantablePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlantablePoint);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlantablePoint*, "", "PlantablePoint");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlantablePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class PlantablePoint : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean shouldBeSet
    // Size: 0x1
    // Offset: 0x20
    bool shouldBeSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldBeSet and: floorMask
    char __padding0[0x3] = {};
    // public UnityEngine.LayerMask floorMask
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::LayerMask floorMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public PlantableObject plantableObject
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::PlantableObject* plantableObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlantableObject*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean shouldBeSet
    [[deprecated("Use field access instead!")]] bool& dyn_shouldBeSet();
    // Get instance field reference: public UnityEngine.LayerMask floorMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_floorMask();
    // Get instance field reference: public PlantableObject plantableObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlantableObject*& dyn_plantableObject();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x2890DC8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x2890E38
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x2890EA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlantablePoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlantablePoint*, creationType>()));
    }
  }; // PlantablePoint
  #pragma pack(pop)
  static check_size<sizeof(PlantablePoint), 40 + sizeof(::GlobalNamespace::PlantableObject*)> __GlobalNamespace_PlantablePointSizeCheck;
  static_assert(sizeof(PlantablePoint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlantablePoint::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlantablePoint::*)(::UnityEngine::Collider*)>(&GlobalNamespace::PlantablePoint::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlantablePoint*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlantablePoint::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlantablePoint::*)(::UnityEngine::Collider*)>(&GlobalNamespace::PlantablePoint::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlantablePoint*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlantablePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
