// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTDoorTrigger
  class GTDoorTrigger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTDoorTrigger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDoorTrigger*, "", "GTDoorTrigger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GTDoorTrigger
  // [TokenAttribute] Offset: FFFFFFFF
  class GTDoorTrigger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Playables.PlayableDirector timeline
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Playables::PlayableDirector* timeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private System.Int32 lastTriggeredFrame
    // Size: 0x4
    // Offset: 0x28
    int lastTriggeredFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastTriggeredFrame and: overlappingColliders
    char __padding1[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Collider> overlappingColliders
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* overlappingColliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Playables.PlayableDirector timeline
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& dyn_timeline();
    // Get instance field reference: private System.Int32 lastTriggeredFrame
    [[deprecated("Use field access instead!")]] int& dyn_lastTriggeredFrame();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> overlappingColliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_overlappingColliders();
    // public System.Int32 get_overlapCount()
    // Offset: 0x288AEB0
    int get_overlapCount();
    // public System.Boolean get_TriggeredThisFrame()
    // Offset: 0x288AEF8
    bool get_TriggeredThisFrame();
    // public System.Void ValidateOverlappingColliders()
    // Offset: 0x288AD64
    void ValidateOverlappingColliders();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x288B1F4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x288B37C
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x288B3D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTDoorTrigger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTDoorTrigger*, creationType>()));
    }
  }; // GTDoorTrigger
  #pragma pack(pop)
  static check_size<sizeof(GTDoorTrigger), 48 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*)> __GlobalNamespace_GTDoorTriggerSizeCheck;
  static_assert(sizeof(GTDoorTrigger) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::get_overlapCount
// Il2CppName: get_overlapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GTDoorTrigger::*)()>(&GlobalNamespace::GTDoorTrigger::get_overlapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoorTrigger*), "get_overlapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::get_TriggeredThisFrame
// Il2CppName: get_TriggeredThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTDoorTrigger::*)()>(&GlobalNamespace::GTDoorTrigger::get_TriggeredThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoorTrigger*), "get_TriggeredThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::ValidateOverlappingColliders
// Il2CppName: ValidateOverlappingColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoorTrigger::*)()>(&GlobalNamespace::GTDoorTrigger::ValidateOverlappingColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoorTrigger*), "ValidateOverlappingColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoorTrigger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GTDoorTrigger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoorTrigger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDoorTrigger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GTDoorTrigger::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDoorTrigger*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDoorTrigger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
