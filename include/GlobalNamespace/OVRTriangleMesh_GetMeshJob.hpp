// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTriangleMesh
#include "GlobalNamespace/OVRTriangleMesh.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTriangleMesh::GetMeshJob, "", "OVRTriangleMesh/GetMeshJob");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTriangleMesh/GetMeshJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRTriangleMesh::GetMeshJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public System.UInt64 Space
    // Size: 0x8
    // Offset: 0x0
    uint64_t Space;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Positions
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Positions;
    // public Unity.Collections.NativeArray`1<System.Int32> Indices
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::Unity::Collections::NativeArray_1<int> Indices;
    public:
    // Creating value type constructor for type: GetMeshJob
    constexpr GetMeshJob(uint64_t Space_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Positions_ = {}, ::Unity::Collections::NativeArray_1<int> Indices_ = {}) noexcept : Space{Space_}, Positions{Positions_}, Indices{Indices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public System.UInt64 Space
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Space();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Positions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_Positions();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> Indices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_Indices();
    // public System.Void Execute()
    // Offset: 0x48B22D8
    void Execute();
  }; // OVRTriangleMesh/GetMeshJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::GetMeshJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTriangleMesh::GetMeshJob::*)()>(&GlobalNamespace::OVRTriangleMesh::GetMeshJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh::GetMeshJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
