// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RPCNetworkBase
#include "GlobalNamespace/RPCNetworkBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameModeSerializer
  class GameModeSerializer;
  // Forward declaring type: GorillaBattleManager
  class GorillaBattleManager;
  // Forward declaring type: IGorillaSerializeable
  class IGorillaSerializeable;
  // Forward declaring type: GorillaSerializer
  class GorillaSerializer;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BattleRPCs
  class BattleRPCs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BattleRPCs);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BattleRPCs*, "", "BattleRPCs");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BattleRPCs
  // [TokenAttribute] Offset: FFFFFFFF
  class BattleRPCs : public ::GlobalNamespace::RPCNetworkBase {
    public:
    public:
    // private GameModeSerializer serializer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::GameModeSerializer* serializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameModeSerializer*) == 0x8);
    // private GorillaBattleManager battleTarget
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GorillaBattleManager* battleTarget;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaBattleManager*) == 0x8);
    public:
    // Get instance field reference: private GameModeSerializer serializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameModeSerializer*& dyn_serializer();
    // Get instance field reference: private GorillaBattleManager battleTarget
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager*& dyn_battleTarget();
    // public System.Void ReportSlingshotHit(Photon.Realtime.Player taggedPlayer, UnityEngine.Vector3 hitLocation, System.Int32 projectileCount, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2765F8C
    void ReportSlingshotHit(::Photon::Realtime::Player* taggedPlayer, ::UnityEngine::Vector3 hitLocation, int projectileCount, ::Photon::Pun::PhotonMessageInfo info);
    // public override System.Void SetClassTarget(IGorillaSerializeable target, GorillaSerializer netHandler)
    // Offset: 0x2765E50
    // Implemented from: RPCNetworkBase
    // Base method: System.Void RPCNetworkBase::SetClassTarget(IGorillaSerializeable target, GorillaSerializer netHandler)
    void SetClassTarget(::GlobalNamespace::IGorillaSerializeable* target, ::GlobalNamespace::GorillaSerializer* netHandler);
    // public System.Void .ctor()
    // Offset: 0x27660E8
    // Implemented from: RPCNetworkBase
    // Base method: System.Void RPCNetworkBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BattleRPCs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleRPCs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BattleRPCs*, creationType>()));
    }
  }; // BattleRPCs
  #pragma pack(pop)
  static check_size<sizeof(BattleRPCs), 40 + sizeof(::GlobalNamespace::GorillaBattleManager*)> __GlobalNamespace_BattleRPCsSizeCheck;
  static_assert(sizeof(BattleRPCs) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BattleRPCs::ReportSlingshotHit
// Il2CppName: ReportSlingshotHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BattleRPCs::*)(::Photon::Realtime::Player*, ::UnityEngine::Vector3, int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::BattleRPCs::ReportSlingshotHit)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* hitLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BattleRPCs*), "ReportSlingshotHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, hitLocation, projectileCount, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BattleRPCs::SetClassTarget
// Il2CppName: SetClassTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BattleRPCs::*)(::GlobalNamespace::IGorillaSerializeable*, ::GlobalNamespace::GorillaSerializer*)>(&GlobalNamespace::BattleRPCs::SetClassTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("", "IGorillaSerializeable")->byval_arg;
    static auto* netHandler = &::il2cpp_utils::GetClassFromName("", "GorillaSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BattleRPCs*), "SetClassTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, netHandler});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BattleRPCs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
