// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/MainModule
#include "UnityEngine/ParticleSystem_MainModule.hpp"
// Including type: UnityEngine.ParticleSystem/ShapeModule
#include "UnityEngine/ParticleSystem_ShapeModule.hpp"
// Including type: UnityEngine.ParticleSystem/TrailModule
#include "UnityEngine/ParticleSystem_TrailModule.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AudioSource
  class AudioSource;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightningStrike
  class LightningStrike;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightningStrike);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightningStrike*, "", "LightningStrike");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: LightningStrike
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class LightningStrike : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.ParticleSystem ps
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* ps;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem/MainModule psMain
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ParticleSystem::MainModule psMain;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::MainModule) == 0x8);
    // private UnityEngine.ParticleSystem/ShapeModule psShape
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ParticleSystem::ShapeModule psShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::ShapeModule) == 0x8);
    // private UnityEngine.ParticleSystem/TrailModule psTrails
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::ParticleSystem::TrailModule psTrails;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::TrailModule) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Get static field: static private SRand rand
    static ::GlobalNamespace::SRand _get_rand();
    // Set static field: static private SRand rand
    static void _set_rand(::GlobalNamespace::SRand value);
    // Get instance field reference: private UnityEngine.ParticleSystem ps
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_ps();
    // Get instance field reference: private UnityEngine.ParticleSystem/MainModule psMain
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& dyn_psMain();
    // Get instance field reference: private UnityEngine.ParticleSystem/ShapeModule psShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& dyn_psShape();
    // Get instance field reference: private UnityEngine.ParticleSystem/TrailModule psTrails
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::TrailModule& dyn_psTrails();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // private System.Void Initialize()
    // Offset: 0x27A12D4
    void Initialize();
    // public System.Void Play(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, System.Single beamWidthMultiplier, System.Single audioVolume)
    // Offset: 0x27A0B3C
    void Play(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float beamWidthMultiplier, float audioVolume);
    // public System.Void .ctor()
    // Offset: 0x27A1404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightningStrike* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightningStrike*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x27A140C
    static void _cctor();
  }; // LightningStrike
  #pragma pack(pop)
  static check_size<sizeof(LightningStrike), 64 + sizeof(::UnityEngine::AudioSource*)> __GlobalNamespace_LightningStrikeSizeCheck;
  static_assert(sizeof(LightningStrike) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightningStrike::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningStrike::*)()>(&GlobalNamespace::LightningStrike::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningStrike*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningStrike::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightningStrike::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float)>(&GlobalNamespace::LightningStrike::Play)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* beamWidthMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* audioVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningStrike*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, beamWidthMultiplier, audioVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightningStrike::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightningStrike::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LightningStrike::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightningStrike*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
