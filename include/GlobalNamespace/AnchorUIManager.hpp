// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Anchor
  class Anchor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AnchorUIManager
  class AnchorUIManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AnchorUIManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AnchorUIManager*, "", "AnchorUIManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA1
  #pragma pack(push, 1)
  // Autogenerated type: AnchorUIManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class AnchorUIManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::AnchorUIManager::AnchorMode
    struct AnchorMode;
    // Nested type: ::GlobalNamespace::AnchorUIManager::PrimaryPressDelegate
    class PrimaryPressDelegate;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AnchorUIManager/AnchorMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AnchorMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AnchorMode
      constexpr AnchorMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AnchorUIManager/AnchorMode Create
      static constexpr const int Create = 0;
      // Get static field: static public AnchorUIManager/AnchorMode Create
      static ::GlobalNamespace::AnchorUIManager::AnchorMode _get_Create();
      // Set static field: static public AnchorUIManager/AnchorMode Create
      static void _set_Create(::GlobalNamespace::AnchorUIManager::AnchorMode value);
      // static field const value: static public AnchorUIManager/AnchorMode Select
      static constexpr const int Select = 1;
      // Get static field: static public AnchorUIManager/AnchorMode Select
      static ::GlobalNamespace::AnchorUIManager::AnchorMode _get_Select();
      // Set static field: static public AnchorUIManager/AnchorMode Select
      static void _set_Select(::GlobalNamespace::AnchorUIManager::AnchorMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // AnchorUIManager/AnchorMode
    #pragma pack(pop)
    static check_size<sizeof(AnchorUIManager::AnchorMode), 0 + sizeof(int)> __GlobalNamespace_AnchorUIManager_AnchorModeSizeCheck;
    static_assert(sizeof(AnchorUIManager::AnchorMode) == 0x4);
    public:
    // private UnityEngine.GameObject _createModeButton
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* createModeButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _selectModeButton
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* selectModeButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _trackedDevice
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* trackedDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _raycastOrigin
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* raycastOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _drawRaycast
    // Size: 0x1
    // Offset: 0x40
    bool drawRaycast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: drawRaycast and: lineRenderer
    char __padding4[0x7] = {};
    // private UnityEngine.LineRenderer _lineRenderer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private Anchor _hoveredAnchor
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::Anchor* hoveredAnchor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Anchor*) == 0x8);
    // private Anchor _selectedAnchor
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::Anchor* selectedAnchor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Anchor*) == 0x8);
    // private AnchorUIManager/AnchorMode _mode
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::AnchorUIManager::AnchorMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AnchorUIManager::AnchorMode) == 0x4);
    // Padding between fields: mode and: buttonList
    char __padding8[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.UI.Button> _buttonList
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>* buttonList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>*) == 0x8);
    // private System.Int32 _menuIndex
    // Size: 0x4
    // Offset: 0x70
    int menuIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: menuIndex and: selectedButton
    char __padding10[0x4] = {};
    // private UnityEngine.UI.Button _selectedButton
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Button* selectedButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private Anchor _anchorPrefab
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::Anchor* anchorPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Anchor*) == 0x8);
    // private UnityEngine.GameObject _placementPreview
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* placementPreview;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _anchorPlacementTransform
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* anchorPlacementTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private AnchorUIManager/PrimaryPressDelegate _primaryPressDelegate
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::AnchorUIManager::PrimaryPressDelegate* primaryPressDelegate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AnchorUIManager::PrimaryPressDelegate*) == 0x8);
    // private System.Boolean _isFocused
    // Size: 0x1
    // Offset: 0xA0
    bool isFocused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public AnchorUIManager Instance
    static ::GlobalNamespace::AnchorUIManager* _get_Instance();
    // Set static field: static public AnchorUIManager Instance
    static void _set_Instance(::GlobalNamespace::AnchorUIManager* value);
    // Get instance field reference: private UnityEngine.GameObject _createModeButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__createModeButton();
    // Get instance field reference: private UnityEngine.GameObject _selectModeButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__selectModeButton();
    // Get instance field reference: private UnityEngine.Transform _trackedDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__trackedDevice();
    // Get instance field reference: private UnityEngine.Transform _raycastOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__raycastOrigin();
    // Get instance field reference: private System.Boolean _drawRaycast
    [[deprecated("Use field access instead!")]] bool& dyn__drawRaycast();
    // Get instance field reference: private UnityEngine.LineRenderer _lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn__lineRenderer();
    // Get instance field reference: private Anchor _hoveredAnchor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Anchor*& dyn__hoveredAnchor();
    // Get instance field reference: private Anchor _selectedAnchor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Anchor*& dyn__selectedAnchor();
    // Get instance field reference: private AnchorUIManager/AnchorMode _mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AnchorUIManager::AnchorMode& dyn__mode();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UI.Button> _buttonList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>*& dyn__buttonList();
    // Get instance field reference: private System.Int32 _menuIndex
    [[deprecated("Use field access instead!")]] int& dyn__menuIndex();
    // Get instance field reference: private UnityEngine.UI.Button _selectedButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__selectedButton();
    // Get instance field reference: private Anchor _anchorPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Anchor*& dyn__anchorPrefab();
    // Get instance field reference: private UnityEngine.GameObject _placementPreview
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__placementPreview();
    // Get instance field reference: private UnityEngine.Transform _anchorPlacementTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__anchorPlacementTransform();
    // Get instance field reference: private AnchorUIManager/PrimaryPressDelegate _primaryPressDelegate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AnchorUIManager::PrimaryPressDelegate*& dyn__primaryPressDelegate();
    // Get instance field reference: private System.Boolean _isFocused
    [[deprecated("Use field access instead!")]] bool& dyn__isFocused();
    // public Anchor get_AnchorPrefab()
    // Offset: 0x294B2B0
    ::GlobalNamespace::Anchor* get_AnchorPrefab();
    // private System.Void Awake()
    // Offset: 0x294B2B8
    void Awake();
    // private System.Void Start()
    // Offset: 0x294B384
    void Start();
    // private System.Void Update()
    // Offset: 0x294B4EC
    void Update();
    // public System.Void OnCreateModeButtonPressed()
    // Offset: 0x294BA1C
    void OnCreateModeButtonPressed();
    // public System.Void OnLoadAnchorsButtonPressed()
    // Offset: 0x294BAF0
    void OnLoadAnchorsButtonPressed();
    // private System.Void ToggleCreateMode()
    // Offset: 0x294BA88
    void ToggleCreateMode();
    // private System.Void StartPlacementMode()
    // Offset: 0x294BD70
    void StartPlacementMode();
    // private System.Void EndPlacementMode()
    // Offset: 0x294BDF8
    void EndPlacementMode();
    // private System.Void StartSelectMode()
    // Offset: 0x294B464
    void StartSelectMode();
    // private System.Void EndSelectMode()
    // Offset: 0x294BD50
    void EndSelectMode();
    // private System.Void HandleMenuNavigation()
    // Offset: 0x294B928
    void HandleMenuNavigation();
    // private System.Void NavigateToIndexInMenu(System.Boolean moveNext)
    // Offset: 0x294BF60
    void NavigateToIndexInMenu(bool moveNext);
    // private System.Void ShowAnchorPreview()
    // Offset: 0x294BE18
    void ShowAnchorPreview();
    // private System.Void HideAnchorPreview()
    // Offset: 0x294BED4
    void HideAnchorPreview();
    // private System.Void PlaceAnchor()
    // Offset: 0x294C060
    void PlaceAnchor();
    // private System.Void ShowRaycastLine()
    // Offset: 0x294BEF4
    void ShowRaycastLine();
    // private System.Void HideRaycastLine()
    // Offset: 0x294BF2C
    void HideRaycastLine();
    // private System.Void ControllerRaycast()
    // Offset: 0x294B5EC
    void ControllerRaycast();
    // private System.Void HoverAnchor(Anchor anchor)
    // Offset: 0x294C14C
    void HoverAnchor(::GlobalNamespace::Anchor* anchor);
    // private System.Void UnhoverAnchor()
    // Offset: 0x294C174
    void UnhoverAnchor();
    // private System.Void SelectAnchor()
    // Offset: 0x294C204
    void SelectAnchor();
    // public System.Void .ctor()
    // Offset: 0x294C34C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnchorUIManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnchorUIManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnchorUIManager*, creationType>()));
    }
  }; // AnchorUIManager
  #pragma pack(pop)
  static check_size<sizeof(AnchorUIManager), 160 + sizeof(bool)> __GlobalNamespace_AnchorUIManagerSizeCheck;
  static_assert(sizeof(AnchorUIManager) == 0xA1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AnchorUIManager::AnchorMode, "", "AnchorUIManager/AnchorMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::get_AnchorPrefab
// Il2CppName: get_AnchorPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Anchor* (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::get_AnchorPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "get_AnchorPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::OnCreateModeButtonPressed
// Il2CppName: OnCreateModeButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::OnCreateModeButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "OnCreateModeButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::OnLoadAnchorsButtonPressed
// Il2CppName: OnLoadAnchorsButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::OnLoadAnchorsButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "OnLoadAnchorsButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::ToggleCreateMode
// Il2CppName: ToggleCreateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::ToggleCreateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "ToggleCreateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::StartPlacementMode
// Il2CppName: StartPlacementMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::StartPlacementMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "StartPlacementMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::EndPlacementMode
// Il2CppName: EndPlacementMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::EndPlacementMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "EndPlacementMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::StartSelectMode
// Il2CppName: StartSelectMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::StartSelectMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "StartSelectMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::EndSelectMode
// Il2CppName: EndSelectMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::EndSelectMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "EndSelectMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::HandleMenuNavigation
// Il2CppName: HandleMenuNavigation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::HandleMenuNavigation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "HandleMenuNavigation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::NavigateToIndexInMenu
// Il2CppName: NavigateToIndexInMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)(bool)>(&GlobalNamespace::AnchorUIManager::NavigateToIndexInMenu)> {
  static const MethodInfo* get() {
    static auto* moveNext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "NavigateToIndexInMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveNext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::ShowAnchorPreview
// Il2CppName: ShowAnchorPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::ShowAnchorPreview)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "ShowAnchorPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::HideAnchorPreview
// Il2CppName: HideAnchorPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::HideAnchorPreview)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "HideAnchorPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::PlaceAnchor
// Il2CppName: PlaceAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::PlaceAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "PlaceAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::ShowRaycastLine
// Il2CppName: ShowRaycastLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::ShowRaycastLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "ShowRaycastLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::HideRaycastLine
// Il2CppName: HideRaycastLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::HideRaycastLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "HideRaycastLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::ControllerRaycast
// Il2CppName: ControllerRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::ControllerRaycast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "ControllerRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::HoverAnchor
// Il2CppName: HoverAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)(::GlobalNamespace::Anchor*)>(&GlobalNamespace::AnchorUIManager::HoverAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "Anchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "HoverAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::UnhoverAnchor
// Il2CppName: UnhoverAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::UnhoverAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "UnhoverAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::SelectAnchor
// Il2CppName: SelectAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnchorUIManager::*)()>(&GlobalNamespace::AnchorUIManager::SelectAnchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnchorUIManager*), "SelectAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnchorUIManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
