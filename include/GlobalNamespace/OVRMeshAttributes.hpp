// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRMeshAttributes
  struct OVRMeshAttributes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRMeshAttributes, "", "OVRMeshAttributes");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRMeshAttributes
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRMeshAttributes/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector4[] tangents
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector4> tangents;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public UnityEngine.Vector2[] texcoords
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector2> texcoords;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Color[] colors
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // public UnityEngine.BoneWeight[] boneWeights
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::BoneWeight> boneWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoneWeight>) == 0x8);
    public:
    // Creating value type constructor for type: OVRMeshAttributes
    constexpr OVRMeshAttributes(::ArrayW<::UnityEngine::Vector3> vertices_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector3> normals_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> tangents_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector2> texcoords_ = ::ArrayW<::UnityEngine::Vector2>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Color> colors_ = ::ArrayW<::UnityEngine::Color>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::BoneWeight> boneWeights_ = ::ArrayW<::UnityEngine::BoneWeight>(static_cast<void*>(nullptr))) noexcept : vertices{vertices_}, normals{normals_}, tangents{tangents_}, texcoords{texcoords_}, colors{colors_}, boneWeights{boneWeights_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: public UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: public UnityEngine.Vector4[] tangents
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_tangents();
    // Get instance field reference: public UnityEngine.Vector2[] texcoords
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_texcoords();
    // Get instance field reference: public UnityEngine.Color[] colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_colors();
    // Get instance field reference: public UnityEngine.BoneWeight[] boneWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoneWeight>& dyn_boneWeights();
  }; // OVRMeshAttributes
  #pragma pack(pop)
  static check_size<sizeof(OVRMeshAttributes), 40 + sizeof(::ArrayW<::UnityEngine::BoneWeight>)> __GlobalNamespace_OVRMeshAttributesSizeCheck;
  static_assert(sizeof(OVRMeshAttributes) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
