// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
// Including type: IBuildValidation
#include "GlobalNamespace/IBuildValidation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GhostLab
  class GhostLab;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GhostLabButton
  class GhostLabButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GhostLabButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GhostLabButton*, "", "GhostLabButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: GhostLabButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GhostLabButton : public ::GlobalNamespace::GorillaPressableButton/*, public ::GlobalNamespace::IBuildValidation*/ {
    public:
    public:
    // public GhostLab ghostLab
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::GhostLab* ghostLab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLab*) == 0x8);
    // public System.Int32 buttonIndex
    // Size: 0x4
    // Offset: 0x78
    int buttonIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean forSingleDoor
    // Size: 0x1
    // Offset: 0x7C
    bool forSingleDoor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBuildValidation
    operator ::GlobalNamespace::IBuildValidation() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBuildValidation*>(this);
    }
    // Get instance field reference: public GhostLab ghostLab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab*& dyn_ghostLab();
    // Get instance field reference: public System.Int32 buttonIndex
    [[deprecated("Use field access instead!")]] int& dyn_buttonIndex();
    // Get instance field reference: public System.Boolean forSingleDoor
    [[deprecated("Use field access instead!")]] bool& dyn_forSingleDoor();
    // public System.Boolean BuildValidationCheck()
    // Offset: 0x2696ACC
    bool BuildValidationCheck();
    // public override System.Void ButtonActivation()
    // Offset: 0x2696B88
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivation()
    void ButtonActivation();
    // public System.Void .ctor()
    // Offset: 0x2696BB4
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GhostLabButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GhostLabButton*, creationType>()));
    }
  }; // GhostLabButton
  #pragma pack(pop)
  static check_size<sizeof(GhostLabButton), 124 + sizeof(bool)> __GlobalNamespace_GhostLabButtonSizeCheck;
  static_assert(sizeof(GhostLabButton) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GhostLabButton::BuildValidationCheck
// Il2CppName: BuildValidationCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GhostLabButton::*)()>(&GlobalNamespace::GhostLabButton::BuildValidationCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabButton*), "BuildValidationCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabButton::ButtonActivation
// Il2CppName: ButtonActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabButton::*)()>(&GlobalNamespace::GhostLabButton::ButtonActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabButton*), "ButtonActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
