// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightningDispatcherEvent
  class LightningDispatcherEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collision
  class Collision;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GrowUntilCollision
  class GrowUntilCollision;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GrowUntilCollision);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GrowUntilCollision*, "", "GrowUntilCollision");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: GrowUntilCollision
  // [TokenAttribute] Offset: FFFFFFFF
  class GrowUntilCollision : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single maxSize
    // Size: 0x4
    // Offset: 0x20
    float maxSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single growthRate
    // Size: 0x4
    // Offset: 0x24
    float growthRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialRadius
    // Size: 0x4
    // Offset: 0x28
    float initialRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minRetriggerTime
    // Size: 0x4
    // Offset: 0x2C
    float minRetriggerTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LightningDispatcherEvent colliderFound
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LightningDispatcherEvent* colliderFound;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightningDispatcherEvent*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single maxVolume
    // Size: 0x4
    // Offset: 0x40
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxPitch
    // Size: 0x4
    // Offset: 0x44
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceTrigger
    // Size: 0x4
    // Offset: 0x48
    float timeSinceTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single maxSize
    [[deprecated("Use field access instead!")]] float& dyn_maxSize();
    // Get instance field reference: private System.Single growthRate
    [[deprecated("Use field access instead!")]] float& dyn_growthRate();
    // Get instance field reference: private System.Single initialRadius
    [[deprecated("Use field access instead!")]] float& dyn_initialRadius();
    // Get instance field reference: private System.Single minRetriggerTime
    [[deprecated("Use field access instead!")]] float& dyn_minRetriggerTime();
    // Get instance field reference: private LightningDispatcherEvent colliderFound
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& dyn_colliderFound();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single maxVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxVolume();
    // Get instance field reference: private System.Single maxPitch
    [[deprecated("Use field access instead!")]] float& dyn_maxPitch();
    // Get instance field reference: private System.Single timeSinceTrigger
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceTrigger();
    // private System.Void Start()
    // Offset: 0x27A002C
    void Start();
    // private System.Void zero()
    // Offset: 0x27A0100
    void zero();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27A0200
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x27A034C
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x27A03D4
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void OnCollisionExit(UnityEngine.Collision collision)
    // Offset: 0x27A048C
    void OnCollisionExit(::UnityEngine::Collision* collision);
    // private System.Void tryToTrigger(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x27A0288
    void tryToTrigger(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2);
    // private System.Void Update()
    // Offset: 0x27A0544
    void Update();
    // public System.Void .ctor()
    // Offset: 0x27A07EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrowUntilCollision* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrowUntilCollision*, creationType>()));
    }
  }; // GrowUntilCollision
  #pragma pack(pop)
  static check_size<sizeof(GrowUntilCollision), 72 + sizeof(float)> __GlobalNamespace_GrowUntilCollisionSizeCheck;
  static_assert(sizeof(GrowUntilCollision) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)()>(&GlobalNamespace::GrowUntilCollision::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::zero
// Il2CppName: zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)()>(&GlobalNamespace::GrowUntilCollision::zero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GrowUntilCollision::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GrowUntilCollision::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GrowUntilCollision::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::OnCollisionExit
// Il2CppName: OnCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GrowUntilCollision::OnCollisionExit)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "OnCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::tryToTrigger
// Il2CppName: tryToTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::GrowUntilCollision::tryToTrigger)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "tryToTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GrowUntilCollision::*)()>(&GlobalNamespace::GrowUntilCollision::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GrowUntilCollision*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GrowUntilCollision::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
