// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FriendshipCharm
  class FriendshipCharm;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FriendshipCharm);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FriendshipCharm*, "", "FriendshipCharm");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: FriendshipCharm
  // [TokenAttribute] Offset: FFFFFFFF
  class FriendshipCharm : public ::GlobalNamespace::HoldableObject {
    public:
    public:
    // private InteractionPoint interactionPoint
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::InteractionPoint* interactionPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InteractionPoint*) == 0x8);
    // private UnityEngine.Transform rightHandHoldAnchor
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* rightHandHoldAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform leftHandHoldAnchor
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* leftHandHoldAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Rigidbody rb
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rigidbody* rb;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.MeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Transform lineStart
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* lineStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform lineEnd
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* lineEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform releasePosition
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* releasePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single breakBraceletLength
    // Size: 0x4
    // Offset: 0x68
    float breakBraceletLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask breakItemLayerMask
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::LayerMask breakItemLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Transform parent
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean isBroken
    // Size: 0x1
    // Offset: 0x78
    bool isBroken;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private InteractionPoint interactionPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& dyn_interactionPoint();
    // Get instance field reference: private UnityEngine.Transform rightHandHoldAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandHoldAnchor();
    // Get instance field reference: private UnityEngine.Transform leftHandHoldAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandHoldAnchor();
    // Get instance field reference: private UnityEngine.Rigidbody rb
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rb();
    // Get instance field reference: private UnityEngine.MeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_meshRenderer();
    // Get instance field reference: private UnityEngine.Transform lineStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lineStart();
    // Get instance field reference: private UnityEngine.Transform lineEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lineEnd();
    // Get instance field reference: private UnityEngine.Transform releasePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_releasePosition();
    // Get instance field reference: private System.Single breakBraceletLength
    [[deprecated("Use field access instead!")]] float& dyn_breakBraceletLength();
    // Get instance field reference: private UnityEngine.LayerMask breakItemLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_breakItemLayerMask();
    // Get instance field reference: private UnityEngine.Transform parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parent();
    // Get instance field reference: private System.Boolean isBroken
    [[deprecated("Use field access instead!")]] bool& dyn_isBroken();
    // private System.Void Awake()
    // Offset: 0x26AB674
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x26AB6A8
    void LateUpdate();
    // private System.Void DestroyBracelet()
    // Offset: 0x26AB7B8
    void DestroyBracelet();
    // private System.Void UpdatePosition()
    // Offset: 0x26AB9AC
    void UpdatePosition();
    // private System.Void OnCollisionEnter(UnityEngine.Collision other)
    // Offset: 0x26ABE78
    void OnCollisionEnter(::UnityEngine::Collision* other);
    // public override System.Void OnEnable()
    // Offset: 0x26AB8E0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x26ABA44
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26ABBF0
    // Implemented from: HoldableObject
    // Base method: System.Boolean HoldableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public System.Void .ctor()
    // Offset: 0x26ABF4C
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FriendshipCharm* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FriendshipCharm*, creationType>()));
    }
  }; // FriendshipCharm
  #pragma pack(pop)
  static check_size<sizeof(FriendshipCharm), 120 + sizeof(bool)> __GlobalNamespace_FriendshipCharmSizeCheck;
  static_assert(sizeof(FriendshipCharm) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)()>(&GlobalNamespace::FriendshipCharm::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)()>(&GlobalNamespace::FriendshipCharm::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::DestroyBracelet
// Il2CppName: DestroyBracelet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)()>(&GlobalNamespace::FriendshipCharm::DestroyBracelet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "DestroyBracelet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)()>(&GlobalNamespace::FriendshipCharm::UpdatePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)(::UnityEngine::Collision*)>(&GlobalNamespace::FriendshipCharm::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)()>(&GlobalNamespace::FriendshipCharm::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FriendshipCharm::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::FriendshipCharm::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FriendshipCharm::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::FriendshipCharm::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FriendshipCharm*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FriendshipCharm::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
