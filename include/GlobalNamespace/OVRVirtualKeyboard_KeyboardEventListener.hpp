// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRVirtualKeyboard
#include "GlobalNamespace/OVRVirtualKeyboard.hpp"
// Including type: OVRManager/EventListener
#include "GlobalNamespace/OVRManager_EventListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener*, "", "OVRVirtualKeyboard/KeyboardEventListener");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OVRVirtualKeyboard/KeyboardEventListener
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRVirtualKeyboard::KeyboardEventListener : public ::Il2CppObject/*, public ::GlobalNamespace::OVRManager_EventListener*/ {
    public:
    public:
    // private readonly OVRVirtualKeyboard keyboard_
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::OVRVirtualKeyboard* keyboard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRManager_EventListener
    operator ::GlobalNamespace::OVRManager_EventListener() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRManager_EventListener*>(this);
    }
    // Creating conversion operator: operator ::GlobalNamespace::OVRVirtualKeyboard*
    constexpr operator ::GlobalNamespace::OVRVirtualKeyboard*() const noexcept {
      return keyboard;
    }
    // Get instance field reference: private readonly OVRVirtualKeyboard keyboard_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard*& dyn_keyboard_();
    // public System.Void .ctor(OVRVirtualKeyboard keyboard)
    // Offset: 0x4937708
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRVirtualKeyboard::KeyboardEventListener* New_ctor(::GlobalNamespace::OVRVirtualKeyboard* keyboard) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRVirtualKeyboard::KeyboardEventListener*, creationType>(keyboard)));
    }
    // public System.Void OnEvent(OVRPlugin/EventDataBuffer eventDataBuffer)
    // Offset: 0x493BCE4
    void OnEvent(::GlobalNamespace::OVRPlugin::EventDataBuffer eventDataBuffer);
  }; // OVRVirtualKeyboard/KeyboardEventListener
  #pragma pack(pop)
  static check_size<sizeof(OVRVirtualKeyboard::KeyboardEventListener), 16 + sizeof(::GlobalNamespace::OVRVirtualKeyboard*)> __GlobalNamespace_OVRVirtualKeyboard_KeyboardEventListenerSizeCheck;
  static_assert(sizeof(OVRVirtualKeyboard::KeyboardEventListener) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener::OnEvent
// Il2CppName: OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener::*)(::GlobalNamespace::OVRPlugin::EventDataBuffer)>(&GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener::OnEvent)> {
  static const MethodInfo* get() {
    static auto* eventDataBuffer = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EventDataBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener*), "OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDataBuffer});
  }
};
