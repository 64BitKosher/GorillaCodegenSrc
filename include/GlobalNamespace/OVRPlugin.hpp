// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRNativeBuffer
  class OVRNativeBuffer;
  // Skipping declaration: Quatf because it is already included!
  // Skipping declaration: Posef because it is already included!
  // Skipping declaration: TrackingConfidence because it is already included!
  // Skipping declaration: HandStatus because it is already included!
  // Skipping declaration: HandFingerPinch because it is already included!
  // Skipping declaration: BoneCapsule because it is already included!
  // Skipping declaration: Bone because it is already included!
  // Skipping declaration: SkeletonType because it is already included!
  // Skipping declaration: FaceExpressionStatusInternal because it is already included!
  // Skipping declaration: XrApi because it is already included!
  // Skipping declaration: EyeGazeState because it is already included!
  // Skipping declaration: Skeleton because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
  // Forward declaring type: Allocator
  struct Allocator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRPlugin
  class OVRPlugin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin*, "", "OVRPlugin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class OVRPlugin : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRPlugin::GUID
    class GUID;
    // Nested type: ::GlobalNamespace::OVRPlugin::Bool
    struct Bool;
    // Nested type: ::GlobalNamespace::OVRPlugin::Result
    struct Result;
    // Nested type: ::GlobalNamespace::OVRPlugin::LogLevel
    struct LogLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::LogCallback2DelegateType
    class LogCallback2DelegateType;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraStatus
    struct CameraStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraAnchorType
    struct CameraAnchorType;
    // Nested type: ::GlobalNamespace::OVRPlugin::XrApi
    struct XrApi;
    // Nested type: ::GlobalNamespace::OVRPlugin::Eye
    struct Eye;
    // Nested type: ::GlobalNamespace::OVRPlugin::Tracker
    struct Tracker;
    // Nested type: ::GlobalNamespace::OVRPlugin::Node
    struct Node;
    // Nested type: ::GlobalNamespace::OVRPlugin::Controller
    struct Controller;
    // Nested type: ::GlobalNamespace::OVRPlugin::InteractionProfile
    struct InteractionProfile;
    // Nested type: ::GlobalNamespace::OVRPlugin::Handedness
    struct Handedness;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackingOrigin
    struct TrackingOrigin;
    // Nested type: ::GlobalNamespace::OVRPlugin::RecenterFlags
    struct RecenterFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::BatteryStatus
    struct BatteryStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::EyeTextureFormat
    struct EyeTextureFormat;
    // Nested type: ::GlobalNamespace::OVRPlugin::PlatformUI
    struct PlatformUI;
    // Nested type: ::GlobalNamespace::OVRPlugin::SystemRegion
    struct SystemRegion;
    // Nested type: ::GlobalNamespace::OVRPlugin::SystemHeadset
    struct SystemHeadset;
    // Nested type: ::GlobalNamespace::OVRPlugin::OverlayShape
    struct OverlayShape;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerSuperSamplingType
    struct LayerSuperSamplingType;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerSharpenType
    struct LayerSharpenType;
    // Nested type: ::GlobalNamespace::OVRPlugin::Step
    struct Step;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDevice
    struct CameraDevice;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceDepthSensingMode
    struct CameraDeviceDepthSensingMode;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceDepthQuality
    struct CameraDeviceDepthQuality;
    // Nested type: ::GlobalNamespace::OVRPlugin::FoveatedRenderingLevel
    struct FoveatedRenderingLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel
    struct FixedFoveatedRenderingLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::TiledMultiResLevel
    struct TiledMultiResLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::PerfMetrics
    struct PerfMetrics;
    // Nested type: ::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel
    struct ProcessorPerformanceLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::FeatureType
    struct FeatureType;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceIntrinsicsParameters
    struct CameraDeviceIntrinsicsParameters;
    // Nested type: ::GlobalNamespace::OVRPlugin::OverlayFlag
    struct OverlayFlag;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector2f
    struct Vector2f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector3f
    struct Vector3f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector4f
    struct Vector4f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector4s
    struct Vector4s;
    // Nested type: ::GlobalNamespace::OVRPlugin::Quatf
    struct Quatf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Posef
    struct Posef;
    // Nested type: ::GlobalNamespace::OVRPlugin::TextureRectMatrixf
    struct TextureRectMatrixf;
    // Nested type: ::GlobalNamespace::OVRPlugin::PoseStatef
    struct PoseStatef;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsLocation
    struct HapticsLocation;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState6
    struct ControllerState6;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState5
    struct ControllerState5;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState4
    struct ControllerState4;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState2
    struct ControllerState2;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState
    struct ControllerState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsBuffer
    struct HapticsBuffer;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsState
    struct HapticsState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsDesc
    struct HapticsDesc;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsAmplitudeEnvelopeVibration
    struct HapticsAmplitudeEnvelopeVibration;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsPcmVibration
    struct HapticsPcmVibration;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsConstants
    struct HapticsConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::AppPerfFrameStats
    struct AppPerfFrameStats;
    // Nested type: ::GlobalNamespace::OVRPlugin::AppPerfStats
    struct AppPerfStats;
    // Nested type: ::GlobalNamespace::OVRPlugin::Sizei
    struct Sizei;
    // Nested type: ::GlobalNamespace::OVRPlugin::Sizef
    struct Sizef;
    // Nested type: ::GlobalNamespace::OVRPlugin::Size3f
    struct Size3f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector2i
    struct Vector2i;
    // Nested type: ::GlobalNamespace::OVRPlugin::Recti
    struct Recti;
    // Nested type: ::GlobalNamespace::OVRPlugin::RectiPair
    struct RectiPair;
    // Nested type: ::GlobalNamespace::OVRPlugin::Rectf
    struct Rectf;
    // Nested type: ::GlobalNamespace::OVRPlugin::RectfPair
    struct RectfPair;
    // Nested type: ::GlobalNamespace::OVRPlugin::Boundsf
    struct Boundsf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Frustumf
    struct Frustumf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Frustumf2
    struct Frustumf2;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryType
    struct BoundaryType;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryTestResult
    struct BoundaryTestResult;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryGeometry
    struct BoundaryGeometry;
    // Nested type: ::GlobalNamespace::OVRPlugin::Colorf
    struct Colorf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Fovf
    struct Fovf;
    // Nested type: ::GlobalNamespace::OVRPlugin::FovfPair
    struct FovfPair;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraIntrinsics
    struct CameraIntrinsics;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraExtrinsics
    struct CameraExtrinsics;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerLayout
    struct LayerLayout;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerFlags
    struct LayerFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerDesc
    struct LayerDesc;
    // Nested type: ::GlobalNamespace::OVRPlugin::BlendFactor
    struct BlendFactor;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerSubmit
    struct LayerSubmit;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackingConfidence
    struct TrackingConfidence;
    // Nested type: ::GlobalNamespace::OVRPlugin::Hand
    struct Hand;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandStatus
    struct HandStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoneId
    struct BoneId;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandFinger
    struct HandFinger;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandFingerPinch
    struct HandFingerPinch;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandState
    struct HandState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandStateInternal
    struct HandStateInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoneCapsule
    struct BoneCapsule;
    // Nested type: ::GlobalNamespace::OVRPlugin::Bone
    struct Bone;
    // Nested type: ::GlobalNamespace::OVRPlugin::SkeletonConstants
    struct SkeletonConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::SkeletonType
    struct SkeletonType;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton
    struct Skeleton;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton2
    struct Skeleton2;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton2Internal
    struct Skeleton2Internal;
    // Nested type: ::GlobalNamespace::OVRPlugin::MeshConstants
    struct MeshConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::MeshType
    struct MeshType;
    // Nested type: ::GlobalNamespace::OVRPlugin::Mesh
    class Mesh;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceLocationFlags
    struct SpaceLocationFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceLocationf
    struct SpaceLocationf;
    // Nested type: ::GlobalNamespace::OVRPlugin::BodyJointLocation
    struct BodyJointLocation;
    // Nested type: ::GlobalNamespace::OVRPlugin::BodyState
    struct BodyState;
    // Nested type: ::GlobalNamespace::OVRPlugin::BodyStateInternal
    struct BodyStateInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::KeyboardState
    struct KeyboardState;
    // Nested type: ::GlobalNamespace::OVRPlugin::KeyboardDescriptionConstants
    struct KeyboardDescriptionConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles
    struct TrackedKeyboardPresentationStyles;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackedKeyboardFlags
    struct TrackedKeyboardFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags
    struct TrackedKeyboardQueryFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::KeyboardDescription
    struct KeyboardDescription;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceExpressionStatus
    struct FaceExpressionStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceState
    struct FaceState;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal
    struct FaceExpressionStatusInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceStateInternal
    struct FaceStateInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceState2Internal
    struct FaceState2Internal;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceRegionConfidence
    struct FaceRegionConfidence;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceExpression
    struct FaceExpression;
    // Nested type: ::GlobalNamespace::OVRPlugin::FaceConstants
    struct FaceConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::EyeGazeState
    struct EyeGazeState;
    // Nested type: ::GlobalNamespace::OVRPlugin::EyeGazesState
    struct EyeGazesState;
    // Nested type: ::GlobalNamespace::OVRPlugin::EyeGazesStateInternal
    struct EyeGazesStateInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::ColorSpace
    struct ColorSpace;
    // Nested type: ::GlobalNamespace::OVRPlugin::EventType
    struct EventType;
    // Nested type: ::GlobalNamespace::OVRPlugin::EventDataBuffer
    struct EventDataBuffer;
    // Nested type: ::GlobalNamespace::OVRPlugin::RenderModelProperties
    struct RenderModelProperties;
    // Nested type: ::GlobalNamespace::OVRPlugin::RenderModelPropertiesInternal
    struct RenderModelPropertiesInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::RenderModelFlags
    struct RenderModelFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationType
    struct VirtualKeyboardLocationType;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardSpaceCreateInfo
    struct VirtualKeyboardSpaceCreateInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationInfo
    struct VirtualKeyboardLocationInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardCreateInfo
    struct VirtualKeyboardCreateInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource
    struct VirtualKeyboardInputSource;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags
    struct VirtualKeyboardInputStateFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputInfo
    struct VirtualKeyboardInputInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardModelAnimationState
    struct VirtualKeyboardModelAnimationState;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardModelAnimationStates
    struct VirtualKeyboardModelAnimationStates;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardModelAnimationStatesInternal
    struct VirtualKeyboardModelAnimationStatesInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureIds
    struct VirtualKeyboardTextureIds;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureIdsInternal
    struct VirtualKeyboardTextureIdsInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureData
    struct VirtualKeyboardTextureData;
    // Nested type: ::GlobalNamespace::OVRPlugin::VirtualKeyboardModelVisibility
    struct VirtualKeyboardModelVisibility;
    // Nested type: ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType
    struct InsightPassthroughColorMapType;
    // Nested type: ::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags
    struct InsightPassthroughStyleFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle
    struct InsightPassthroughStyle;
    // Nested type: ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2
    struct InsightPassthroughStyle2;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughColorLutChannels
    struct PassthroughColorLutChannels;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughColorLutData
    struct PassthroughColorLutData;
    // Nested type: ::GlobalNamespace::OVRPlugin::InsightPassthroughKeyboardHandsIntensity
    struct InsightPassthroughKeyboardHandsIntensity;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughCapabilityFlags
    struct PassthroughCapabilityFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughCapabilityFields
    struct PassthroughCapabilityFields;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughCapabilities
    struct PassthroughCapabilities;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceComponentType
    struct SpaceComponentType;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceStorageLocation
    struct SpaceStorageLocation;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceStoragePersistenceMode
    struct SpaceStoragePersistenceMode;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceQueryActionType
    struct SpaceQueryActionType;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceQueryType
    struct SpaceQueryType;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceQueryFilterType
    struct SpaceQueryFilterType;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpatialAnchorCreateInfo
    struct SpatialAnchorCreateInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceFilterInfoIds
    struct SpaceFilterInfoIds;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceFilterInfoComponents
    struct SpaceFilterInfoComponents;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceQueryInfo
    struct SpaceQueryInfo;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceQueryResult
    struct SpaceQueryResult;
    // Nested type: ::GlobalNamespace::OVRPlugin::Media
    class Media;
    // Nested type: ::GlobalNamespace::OVRPlugin::GetBoneSkeleton2Delegate
    class GetBoneSkeleton2Delegate;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceContainerInternal
    struct SpaceContainerInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::SpaceSemanticLabelInternal
    struct SpaceSemanticLabelInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::RoomLayout
    struct RoomLayout;
    // Nested type: ::GlobalNamespace::OVRPlugin::RoomLayoutInternal
    struct RoomLayoutInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::PolygonalBoundary2DInternal
    struct PolygonalBoundary2DInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::SceneCaptureRequestInternal
    struct SceneCaptureRequestInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::PinnedArray_1<T>
    template<typename T>
    struct PinnedArray_1;
    // Nested type: ::GlobalNamespace::OVRPlugin::TriangleMeshInternal
    struct TriangleMeshInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFields
    struct PassthroughPreferenceFields;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags
    struct PassthroughPreferenceFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::PassthroughPreferences
    struct PassthroughPreferences;
    // Nested type: ::GlobalNamespace::OVRPlugin::Ktx
    class Ktx;
    // Nested type: ::GlobalNamespace::OVRPlugin::UnityOpenXR
    class UnityOpenXR;
    // Nested type: ::GlobalNamespace::OVRPlugin::Qpl
    class Qpl;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_0
    class OVRP_0_1_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_1
    class OVRP_0_1_1;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_2
    class OVRP_0_1_2;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_3
    class OVRP_0_1_3;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_5_0
    class OVRP_0_5_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_0_0
    class OVRP_1_0_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_1_0
    class OVRP_1_1_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_2_0
    class OVRP_1_2_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_3_0
    class OVRP_1_3_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_5_0
    class OVRP_1_5_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_6_0
    class OVRP_1_6_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_7_0
    class OVRP_1_7_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_8_0
    class OVRP_1_8_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_9_0
    class OVRP_1_9_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_10_0
    class OVRP_1_10_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_11_0
    class OVRP_1_11_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_12_0
    class OVRP_1_12_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_15_0
    class OVRP_1_15_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_16_0
    class OVRP_1_16_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_17_0
    class OVRP_1_17_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_18_0
    class OVRP_1_18_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_19_0
    class OVRP_1_19_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_21_0
    class OVRP_1_21_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_28_0
    class OVRP_1_28_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_29_0
    class OVRP_1_29_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_30_0
    class OVRP_1_30_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_31_0
    class OVRP_1_31_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_32_0
    class OVRP_1_32_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_34_0
    class OVRP_1_34_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_35_0
    class OVRP_1_35_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_36_0
    class OVRP_1_36_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_37_0
    class OVRP_1_37_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_38_0
    class OVRP_1_38_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_39_0
    class OVRP_1_39_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_40_0
    class OVRP_1_40_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_41_0
    class OVRP_1_41_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_42_0
    class OVRP_1_42_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_43_0
    class OVRP_1_43_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_44_0
    class OVRP_1_44_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_45_0
    class OVRP_1_45_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_46_0
    class OVRP_1_46_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_47_0
    class OVRP_1_47_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_48_0
    class OVRP_1_48_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_49_0
    class OVRP_1_49_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_50_0
    class OVRP_1_50_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_51_0
    class OVRP_1_51_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_52_0
    class OVRP_1_52_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_53_0
    class OVRP_1_53_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_54_0
    class OVRP_1_54_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_55_0
    class OVRP_1_55_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_55_1
    class OVRP_1_55_1;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_56_0
    class OVRP_1_56_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_57_0
    class OVRP_1_57_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_58_0
    class OVRP_1_58_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_59_0
    class OVRP_1_59_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_60_0
    class OVRP_1_60_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_61_0
    class OVRP_1_61_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_62_0
    class OVRP_1_62_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_63_0
    class OVRP_1_63_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_64_0
    class OVRP_1_64_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_65_0
    class OVRP_1_65_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_66_0
    class OVRP_1_66_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_67_0
    class OVRP_1_67_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_68_0
    class OVRP_1_68_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_69_0
    class OVRP_1_69_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_70_0
    class OVRP_1_70_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_71_0
    class OVRP_1_71_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_72_0
    class OVRP_1_72_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_73_0
    class OVRP_1_73_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_74_0
    class OVRP_1_74_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_75_0
    class OVRP_1_75_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_76_0
    class OVRP_1_76_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_78_0
    class OVRP_1_78_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_79_0
    class OVRP_1_79_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_81_0
    class OVRP_1_81_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_82_0
    class OVRP_1_82_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_83_0
    class OVRP_1_83_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_84_0
    class OVRP_1_84_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_85_0
    class OVRP_1_85_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_86_0
    class OVRP_1_86_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_87_0
    class OVRP_1_87_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_88_0
    class OVRP_1_88_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_89_0
    class OVRP_1_89_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/Bool
    // [TokenAttribute] Offset: FFFFFFFF
    struct Bool/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Bool
      constexpr Bool(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/Bool False
      static constexpr const int False = 0;
      // Get static field: static public OVRPlugin/Bool False
      static ::GlobalNamespace::OVRPlugin::Bool _get_False();
      // Set static field: static public OVRPlugin/Bool False
      static void _set_False(::GlobalNamespace::OVRPlugin::Bool value);
      // static field const value: static public OVRPlugin/Bool True
      static constexpr const int True = 1;
      // Get static field: static public OVRPlugin/Bool True
      static ::GlobalNamespace::OVRPlugin::Bool _get_True();
      // Set static field: static public OVRPlugin/Bool True
      static void _set_True(::GlobalNamespace::OVRPlugin::Bool value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/Bool
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Bool), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_BoolSizeCheck;
    static_assert(sizeof(OVRPlugin::Bool) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/XrApi
    // [TokenAttribute] Offset: FFFFFFFF
    struct XrApi/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: XrApi
      constexpr XrApi(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/XrApi Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public OVRPlugin/XrApi Unknown
      static ::GlobalNamespace::OVRPlugin::XrApi _get_Unknown();
      // Set static field: static public OVRPlugin/XrApi Unknown
      static void _set_Unknown(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi CAPI
      static constexpr const int CAPI = 1;
      // Get static field: static public OVRPlugin/XrApi CAPI
      static ::GlobalNamespace::OVRPlugin::XrApi _get_CAPI();
      // Set static field: static public OVRPlugin/XrApi CAPI
      static void _set_CAPI(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi VRAPI
      static constexpr const int VRAPI = 2;
      // Get static field: static public OVRPlugin/XrApi VRAPI
      static ::GlobalNamespace::OVRPlugin::XrApi _get_VRAPI();
      // Set static field: static public OVRPlugin/XrApi VRAPI
      static void _set_VRAPI(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi OpenXR
      static constexpr const int OpenXR = 3;
      // Get static field: static public OVRPlugin/XrApi OpenXR
      static ::GlobalNamespace::OVRPlugin::XrApi _get_OpenXR();
      // Set static field: static public OVRPlugin/XrApi OpenXR
      static void _set_OpenXR(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi EnumSize
      static constexpr const int EnumSize = 2147483647;
      // Get static field: static public OVRPlugin/XrApi EnumSize
      static ::GlobalNamespace::OVRPlugin::XrApi _get_EnumSize();
      // Set static field: static public OVRPlugin/XrApi EnumSize
      static void _set_EnumSize(::GlobalNamespace::OVRPlugin::XrApi value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/XrApi
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::XrApi), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_XrApiSizeCheck;
    static_assert(sizeof(OVRPlugin::XrApi) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Vector3f
    // [TokenAttribute] Offset: FFFFFFFF
    struct Vector3f/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single x
      // Size: 0x4
      // Offset: 0x0
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single y
      // Size: 0x4
      // Offset: 0x4
      float y;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single z
      // Size: 0x4
      // Offset: 0x8
      float z;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Vector3f
      constexpr Vector3f(float x_ = {}, float y_ = {}, float z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Vector3f zero
      static ::GlobalNamespace::OVRPlugin::Vector3f _get_zero();
      // Set static field: static public readonly OVRPlugin/Vector3f zero
      static void _set_zero(::GlobalNamespace::OVRPlugin::Vector3f value);
      // Get instance field reference: public System.Single x
      [[deprecated("Use field access instead!")]] float& dyn_x();
      // Get instance field reference: public System.Single y
      [[deprecated("Use field access instead!")]] float& dyn_y();
      // Get instance field reference: public System.Single z
      [[deprecated("Use field access instead!")]] float& dyn_z();
      // static private System.Void .cctor()
      // Offset: 0x4904764
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x4904668
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Vector3f
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Vector3f), 8 + sizeof(float)> __GlobalNamespace_OVRPlugin_Vector3fSizeCheck;
    static_assert(sizeof(OVRPlugin::Vector3f) == 0xC);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Quatf
    // [TokenAttribute] Offset: FFFFFFFF
    struct Quatf/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single x
      // Size: 0x4
      // Offset: 0x0
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single y
      // Size: 0x4
      // Offset: 0x4
      float y;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single z
      // Size: 0x4
      // Offset: 0x8
      float z;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single w
      // Size: 0x4
      // Offset: 0xC
      float w;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Quatf
      constexpr Quatf(float x_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Quatf identity
      static ::GlobalNamespace::OVRPlugin::Quatf _get_identity();
      // Set static field: static public readonly OVRPlugin/Quatf identity
      static void _set_identity(::GlobalNamespace::OVRPlugin::Quatf value);
      // Get instance field reference: public System.Single x
      [[deprecated("Use field access instead!")]] float& dyn_x();
      // Get instance field reference: public System.Single y
      [[deprecated("Use field access instead!")]] float& dyn_y();
      // Get instance field reference: public System.Single z
      [[deprecated("Use field access instead!")]] float& dyn_z();
      // Get instance field reference: public System.Single w
      [[deprecated("Use field access instead!")]] float& dyn_w();
      // static private System.Void .cctor()
      // Offset: 0x4904E7C
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x4904C68
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Quatf
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Quatf), 12 + sizeof(float)> __GlobalNamespace_OVRPlugin_QuatfSizeCheck;
    static_assert(sizeof(OVRPlugin::Quatf) == 0x10);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Posef
    // [TokenAttribute] Offset: FFFFFFFF
    struct Posef/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/Quatf Orientation
      // Size: 0x10
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::Quatf Orientation;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Vector3f Position
      // Size: 0xC
      // Offset: 0x10
      ::GlobalNamespace::OVRPlugin::Vector3f Position;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      public:
      // Creating value type constructor for type: Posef
      constexpr Posef(::GlobalNamespace::OVRPlugin::Quatf Orientation_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f Position_ = {}) noexcept : Orientation{Orientation_}, Position{Position_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Posef identity
      static ::GlobalNamespace::OVRPlugin::Posef _get_identity();
      // Set static field: static public readonly OVRPlugin/Posef identity
      static void _set_identity(::GlobalNamespace::OVRPlugin::Posef value);
      // Get instance field reference: public OVRPlugin/Quatf Orientation
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_Orientation();
      // Get instance field reference: public OVRPlugin/Vector3f Position
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_Position();
      // static private System.Void .cctor()
      // Offset: 0x4905090
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x4904F9C
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Posef
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Posef), 16 + sizeof(::GlobalNamespace::OVRPlugin::Vector3f)> __GlobalNamespace_OVRPlugin_PosefSizeCheck;
    static_assert(sizeof(OVRPlugin::Posef) == 0x1C);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/TrackingConfidence
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackingConfidence/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackingConfidence
      constexpr TrackingConfidence(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/TrackingConfidence Low
      static constexpr const int Low = 0;
      // Get static field: static public OVRPlugin/TrackingConfidence Low
      static ::GlobalNamespace::OVRPlugin::TrackingConfidence _get_Low();
      // Set static field: static public OVRPlugin/TrackingConfidence Low
      static void _set_Low(::GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // static field const value: static public OVRPlugin/TrackingConfidence High
      static constexpr const int High = 1065353216;
      // Get static field: static public OVRPlugin/TrackingConfidence High
      static ::GlobalNamespace::OVRPlugin::TrackingConfidence _get_High();
      // Set static field: static public OVRPlugin/TrackingConfidence High
      static void _set_High(::GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/TrackingConfidence
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::TrackingConfidence), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_TrackingConfidenceSizeCheck;
    static_assert(sizeof(OVRPlugin::TrackingConfidence) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/HandStatus
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct HandStatus/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HandStatus
      constexpr HandStatus(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/HandStatus HandTracked
      static constexpr const int HandTracked = 1;
      // Get static field: static public OVRPlugin/HandStatus HandTracked
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_HandTracked();
      // Set static field: static public OVRPlugin/HandStatus HandTracked
      static void _set_HandTracked(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus InputStateValid
      static constexpr const int InputStateValid = 2;
      // Get static field: static public OVRPlugin/HandStatus InputStateValid
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_InputStateValid();
      // Set static field: static public OVRPlugin/HandStatus InputStateValid
      static void _set_InputStateValid(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus SystemGestureInProgress
      static constexpr const int SystemGestureInProgress = 64;
      // Get static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_SystemGestureInProgress();
      // Set static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static void _set_SystemGestureInProgress(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus DominantHand
      static constexpr const int DominantHand = 128;
      // Get static field: static public OVRPlugin/HandStatus DominantHand
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_DominantHand();
      // Set static field: static public OVRPlugin/HandStatus DominantHand
      static void _set_DominantHand(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus MenuPressed
      static constexpr const int MenuPressed = 256;
      // Get static field: static public OVRPlugin/HandStatus MenuPressed
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_MenuPressed();
      // Set static field: static public OVRPlugin/HandStatus MenuPressed
      static void _set_MenuPressed(::GlobalNamespace::OVRPlugin::HandStatus value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/HandStatus
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandStatus), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_HandStatusSizeCheck;
    static_assert(sizeof(OVRPlugin::HandStatus) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/BoneId
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneId/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoneId
      constexpr BoneId(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/BoneId Invalid
      static constexpr const int Invalid = -1;
      // Get static field: static public OVRPlugin/BoneId Invalid
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Invalid();
      // Set static field: static public OVRPlugin/BoneId Invalid
      static void _set_Invalid(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Start
      static constexpr const int Hand_Start = 0;
      // Get static field: static public OVRPlugin/BoneId Hand_Start
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Start();
      // Set static field: static public OVRPlugin/BoneId Hand_Start
      static void _set_Hand_Start(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_WristRoot
      static constexpr const int Hand_WristRoot = 0;
      // Get static field: static public OVRPlugin/BoneId Hand_WristRoot
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_WristRoot();
      // Set static field: static public OVRPlugin/BoneId Hand_WristRoot
      static void _set_Hand_WristRoot(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_ForearmStub
      static constexpr const int Hand_ForearmStub = 1;
      // Get static field: static public OVRPlugin/BoneId Hand_ForearmStub
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_ForearmStub();
      // Set static field: static public OVRPlugin/BoneId Hand_ForearmStub
      static void _set_Hand_ForearmStub(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb0
      static constexpr const int Hand_Thumb0 = 2;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb0
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb0();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb0
      static void _set_Hand_Thumb0(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb1
      static constexpr const int Hand_Thumb1 = 3;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb1();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb1
      static void _set_Hand_Thumb1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb2
      static constexpr const int Hand_Thumb2 = 4;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb2();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb2
      static void _set_Hand_Thumb2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb3
      static constexpr const int Hand_Thumb3 = 5;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb3();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb3
      static void _set_Hand_Thumb3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index1
      static constexpr const int Hand_Index1 = 6;
      // Get static field: static public OVRPlugin/BoneId Hand_Index1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index1();
      // Set static field: static public OVRPlugin/BoneId Hand_Index1
      static void _set_Hand_Index1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index2
      static constexpr const int Hand_Index2 = 7;
      // Get static field: static public OVRPlugin/BoneId Hand_Index2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index2();
      // Set static field: static public OVRPlugin/BoneId Hand_Index2
      static void _set_Hand_Index2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index3
      static constexpr const int Hand_Index3 = 8;
      // Get static field: static public OVRPlugin/BoneId Hand_Index3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index3();
      // Set static field: static public OVRPlugin/BoneId Hand_Index3
      static void _set_Hand_Index3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle1
      static constexpr const int Hand_Middle1 = 9;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle1();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle1
      static void _set_Hand_Middle1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle2
      static constexpr const int Hand_Middle2 = 10;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle2();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle2
      static void _set_Hand_Middle2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle3
      static constexpr const int Hand_Middle3 = 11;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle3();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle3
      static void _set_Hand_Middle3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring1
      static constexpr const int Hand_Ring1 = 12;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring1();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring1
      static void _set_Hand_Ring1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring2
      static constexpr const int Hand_Ring2 = 13;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring2();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring2
      static void _set_Hand_Ring2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring3
      static constexpr const int Hand_Ring3 = 14;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring3();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring3
      static void _set_Hand_Ring3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky0
      static constexpr const int Hand_Pinky0 = 15;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky0
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky0();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky0
      static void _set_Hand_Pinky0(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky1
      static constexpr const int Hand_Pinky1 = 16;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky1();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky1
      static void _set_Hand_Pinky1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky2
      static constexpr const int Hand_Pinky2 = 17;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky2();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky2
      static void _set_Hand_Pinky2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky3
      static constexpr const int Hand_Pinky3 = 18;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky3();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky3
      static void _set_Hand_Pinky3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static constexpr const int Hand_MaxSkinnable = 19;
      // Get static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_MaxSkinnable();
      // Set static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static void _set_Hand_MaxSkinnable(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_ThumbTip
      static constexpr const int Hand_ThumbTip = 19;
      // Get static field: static public OVRPlugin/BoneId Hand_ThumbTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_ThumbTip();
      // Set static field: static public OVRPlugin/BoneId Hand_ThumbTip
      static void _set_Hand_ThumbTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_IndexTip
      static constexpr const int Hand_IndexTip = 20;
      // Get static field: static public OVRPlugin/BoneId Hand_IndexTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_IndexTip();
      // Set static field: static public OVRPlugin/BoneId Hand_IndexTip
      static void _set_Hand_IndexTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_MiddleTip
      static constexpr const int Hand_MiddleTip = 21;
      // Get static field: static public OVRPlugin/BoneId Hand_MiddleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_MiddleTip();
      // Set static field: static public OVRPlugin/BoneId Hand_MiddleTip
      static void _set_Hand_MiddleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_RingTip
      static constexpr const int Hand_RingTip = 22;
      // Get static field: static public OVRPlugin/BoneId Hand_RingTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_RingTip();
      // Set static field: static public OVRPlugin/BoneId Hand_RingTip
      static void _set_Hand_RingTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_PinkyTip
      static constexpr const int Hand_PinkyTip = 23;
      // Get static field: static public OVRPlugin/BoneId Hand_PinkyTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_PinkyTip();
      // Set static field: static public OVRPlugin/BoneId Hand_PinkyTip
      static void _set_Hand_PinkyTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_End
      static constexpr const int Hand_End = 24;
      // Get static field: static public OVRPlugin/BoneId Hand_End
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_End();
      // Set static field: static public OVRPlugin/BoneId Hand_End
      static void _set_Hand_End(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Start
      static constexpr const int Body_Start = 0;
      // Get static field: static public OVRPlugin/BoneId Body_Start
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Start();
      // Set static field: static public OVRPlugin/BoneId Body_Start
      static void _set_Body_Start(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Root
      static constexpr const int Body_Root = 0;
      // Get static field: static public OVRPlugin/BoneId Body_Root
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Root();
      // Set static field: static public OVRPlugin/BoneId Body_Root
      static void _set_Body_Root(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Hips
      static constexpr const int Body_Hips = 1;
      // Get static field: static public OVRPlugin/BoneId Body_Hips
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Hips();
      // Set static field: static public OVRPlugin/BoneId Body_Hips
      static void _set_Body_Hips(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_SpineLower
      static constexpr const int Body_SpineLower = 2;
      // Get static field: static public OVRPlugin/BoneId Body_SpineLower
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_SpineLower();
      // Set static field: static public OVRPlugin/BoneId Body_SpineLower
      static void _set_Body_SpineLower(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_SpineMiddle
      static constexpr const int Body_SpineMiddle = 3;
      // Get static field: static public OVRPlugin/BoneId Body_SpineMiddle
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_SpineMiddle();
      // Set static field: static public OVRPlugin/BoneId Body_SpineMiddle
      static void _set_Body_SpineMiddle(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_SpineUpper
      static constexpr const int Body_SpineUpper = 4;
      // Get static field: static public OVRPlugin/BoneId Body_SpineUpper
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_SpineUpper();
      // Set static field: static public OVRPlugin/BoneId Body_SpineUpper
      static void _set_Body_SpineUpper(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Chest
      static constexpr const int Body_Chest = 5;
      // Get static field: static public OVRPlugin/BoneId Body_Chest
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Chest();
      // Set static field: static public OVRPlugin/BoneId Body_Chest
      static void _set_Body_Chest(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Neck
      static constexpr const int Body_Neck = 6;
      // Get static field: static public OVRPlugin/BoneId Body_Neck
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Neck();
      // Set static field: static public OVRPlugin/BoneId Body_Neck
      static void _set_Body_Neck(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_Head
      static constexpr const int Body_Head = 7;
      // Get static field: static public OVRPlugin/BoneId Body_Head
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_Head();
      // Set static field: static public OVRPlugin/BoneId Body_Head
      static void _set_Body_Head(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftShoulder
      static constexpr const int Body_LeftShoulder = 8;
      // Get static field: static public OVRPlugin/BoneId Body_LeftShoulder
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftShoulder();
      // Set static field: static public OVRPlugin/BoneId Body_LeftShoulder
      static void _set_Body_LeftShoulder(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftScapula
      static constexpr const int Body_LeftScapula = 9;
      // Get static field: static public OVRPlugin/BoneId Body_LeftScapula
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftScapula();
      // Set static field: static public OVRPlugin/BoneId Body_LeftScapula
      static void _set_Body_LeftScapula(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftArmUpper
      static constexpr const int Body_LeftArmUpper = 10;
      // Get static field: static public OVRPlugin/BoneId Body_LeftArmUpper
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftArmUpper();
      // Set static field: static public OVRPlugin/BoneId Body_LeftArmUpper
      static void _set_Body_LeftArmUpper(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftArmLower
      static constexpr const int Body_LeftArmLower = 11;
      // Get static field: static public OVRPlugin/BoneId Body_LeftArmLower
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftArmLower();
      // Set static field: static public OVRPlugin/BoneId Body_LeftArmLower
      static void _set_Body_LeftArmLower(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandWristTwist
      static constexpr const int Body_LeftHandWristTwist = 12;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandWristTwist
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandWristTwist();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandWristTwist
      static void _set_Body_LeftHandWristTwist(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightShoulder
      static constexpr const int Body_RightShoulder = 13;
      // Get static field: static public OVRPlugin/BoneId Body_RightShoulder
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightShoulder();
      // Set static field: static public OVRPlugin/BoneId Body_RightShoulder
      static void _set_Body_RightShoulder(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightScapula
      static constexpr const int Body_RightScapula = 14;
      // Get static field: static public OVRPlugin/BoneId Body_RightScapula
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightScapula();
      // Set static field: static public OVRPlugin/BoneId Body_RightScapula
      static void _set_Body_RightScapula(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightArmUpper
      static constexpr const int Body_RightArmUpper = 15;
      // Get static field: static public OVRPlugin/BoneId Body_RightArmUpper
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightArmUpper();
      // Set static field: static public OVRPlugin/BoneId Body_RightArmUpper
      static void _set_Body_RightArmUpper(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightArmLower
      static constexpr const int Body_RightArmLower = 16;
      // Get static field: static public OVRPlugin/BoneId Body_RightArmLower
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightArmLower();
      // Set static field: static public OVRPlugin/BoneId Body_RightArmLower
      static void _set_Body_RightArmLower(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandWristTwist
      static constexpr const int Body_RightHandWristTwist = 17;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandWristTwist
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandWristTwist();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandWristTwist
      static void _set_Body_RightHandWristTwist(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandPalm
      static constexpr const int Body_LeftHandPalm = 18;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandPalm
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandPalm();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandPalm
      static void _set_Body_LeftHandPalm(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandWrist
      static constexpr const int Body_LeftHandWrist = 19;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandWrist
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandWrist();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandWrist
      static void _set_Body_LeftHandWrist(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandThumbMetacarpal
      static constexpr const int Body_LeftHandThumbMetacarpal = 20;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandThumbMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandThumbMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandThumbMetacarpal
      static void _set_Body_LeftHandThumbMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandThumbProximal
      static constexpr const int Body_LeftHandThumbProximal = 21;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandThumbProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandThumbProximal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandThumbProximal
      static void _set_Body_LeftHandThumbProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandThumbDistal
      static constexpr const int Body_LeftHandThumbDistal = 22;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandThumbDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandThumbDistal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandThumbDistal
      static void _set_Body_LeftHandThumbDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandThumbTip
      static constexpr const int Body_LeftHandThumbTip = 23;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandThumbTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandThumbTip();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandThumbTip
      static void _set_Body_LeftHandThumbTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandIndexMetacarpal
      static constexpr const int Body_LeftHandIndexMetacarpal = 24;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandIndexMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandIndexMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandIndexMetacarpal
      static void _set_Body_LeftHandIndexMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandIndexProximal
      static constexpr const int Body_LeftHandIndexProximal = 25;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandIndexProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandIndexProximal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandIndexProximal
      static void _set_Body_LeftHandIndexProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandIndexIntermediate
      static constexpr const int Body_LeftHandIndexIntermediate = 26;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandIndexIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandIndexIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandIndexIntermediate
      static void _set_Body_LeftHandIndexIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandIndexDistal
      static constexpr const int Body_LeftHandIndexDistal = 27;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandIndexDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandIndexDistal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandIndexDistal
      static void _set_Body_LeftHandIndexDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandIndexTip
      static constexpr const int Body_LeftHandIndexTip = 28;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandIndexTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandIndexTip();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandIndexTip
      static void _set_Body_LeftHandIndexTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandMiddleMetacarpal
      static constexpr const int Body_LeftHandMiddleMetacarpal = 29;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandMiddleMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandMiddleMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandMiddleMetacarpal
      static void _set_Body_LeftHandMiddleMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandMiddleProximal
      static constexpr const int Body_LeftHandMiddleProximal = 30;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandMiddleProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandMiddleProximal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandMiddleProximal
      static void _set_Body_LeftHandMiddleProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandMiddleIntermediate
      static constexpr const int Body_LeftHandMiddleIntermediate = 31;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandMiddleIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandMiddleIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandMiddleIntermediate
      static void _set_Body_LeftHandMiddleIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandMiddleDistal
      static constexpr const int Body_LeftHandMiddleDistal = 32;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandMiddleDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandMiddleDistal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandMiddleDistal
      static void _set_Body_LeftHandMiddleDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandMiddleTip
      static constexpr const int Body_LeftHandMiddleTip = 33;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandMiddleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandMiddleTip();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandMiddleTip
      static void _set_Body_LeftHandMiddleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandRingMetacarpal
      static constexpr const int Body_LeftHandRingMetacarpal = 34;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandRingMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandRingMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandRingMetacarpal
      static void _set_Body_LeftHandRingMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandRingProximal
      static constexpr const int Body_LeftHandRingProximal = 35;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandRingProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandRingProximal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandRingProximal
      static void _set_Body_LeftHandRingProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandRingIntermediate
      static constexpr const int Body_LeftHandRingIntermediate = 36;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandRingIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandRingIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandRingIntermediate
      static void _set_Body_LeftHandRingIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandRingDistal
      static constexpr const int Body_LeftHandRingDistal = 37;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandRingDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandRingDistal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandRingDistal
      static void _set_Body_LeftHandRingDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandRingTip
      static constexpr const int Body_LeftHandRingTip = 38;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandRingTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandRingTip();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandRingTip
      static void _set_Body_LeftHandRingTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandLittleMetacarpal
      static constexpr const int Body_LeftHandLittleMetacarpal = 39;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandLittleMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandLittleMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandLittleMetacarpal
      static void _set_Body_LeftHandLittleMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandLittleProximal
      static constexpr const int Body_LeftHandLittleProximal = 40;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandLittleProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandLittleProximal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandLittleProximal
      static void _set_Body_LeftHandLittleProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandLittleIntermediate
      static constexpr const int Body_LeftHandLittleIntermediate = 41;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandLittleIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandLittleIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandLittleIntermediate
      static void _set_Body_LeftHandLittleIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandLittleDistal
      static constexpr const int Body_LeftHandLittleDistal = 42;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandLittleDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandLittleDistal();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandLittleDistal
      static void _set_Body_LeftHandLittleDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_LeftHandLittleTip
      static constexpr const int Body_LeftHandLittleTip = 43;
      // Get static field: static public OVRPlugin/BoneId Body_LeftHandLittleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_LeftHandLittleTip();
      // Set static field: static public OVRPlugin/BoneId Body_LeftHandLittleTip
      static void _set_Body_LeftHandLittleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandPalm
      static constexpr const int Body_RightHandPalm = 44;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandPalm
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandPalm();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandPalm
      static void _set_Body_RightHandPalm(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandWrist
      static constexpr const int Body_RightHandWrist = 45;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandWrist
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandWrist();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandWrist
      static void _set_Body_RightHandWrist(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandThumbMetacarpal
      static constexpr const int Body_RightHandThumbMetacarpal = 46;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandThumbMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandThumbMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandThumbMetacarpal
      static void _set_Body_RightHandThumbMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandThumbProximal
      static constexpr const int Body_RightHandThumbProximal = 47;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandThumbProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandThumbProximal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandThumbProximal
      static void _set_Body_RightHandThumbProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandThumbDistal
      static constexpr const int Body_RightHandThumbDistal = 48;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandThumbDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandThumbDistal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandThumbDistal
      static void _set_Body_RightHandThumbDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandThumbTip
      static constexpr const int Body_RightHandThumbTip = 49;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandThumbTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandThumbTip();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandThumbTip
      static void _set_Body_RightHandThumbTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandIndexMetacarpal
      static constexpr const int Body_RightHandIndexMetacarpal = 50;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandIndexMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandIndexMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandIndexMetacarpal
      static void _set_Body_RightHandIndexMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandIndexProximal
      static constexpr const int Body_RightHandIndexProximal = 51;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandIndexProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandIndexProximal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandIndexProximal
      static void _set_Body_RightHandIndexProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandIndexIntermediate
      static constexpr const int Body_RightHandIndexIntermediate = 52;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandIndexIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandIndexIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandIndexIntermediate
      static void _set_Body_RightHandIndexIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandIndexDistal
      static constexpr const int Body_RightHandIndexDistal = 53;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandIndexDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandIndexDistal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandIndexDistal
      static void _set_Body_RightHandIndexDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandIndexTip
      static constexpr const int Body_RightHandIndexTip = 54;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandIndexTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandIndexTip();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandIndexTip
      static void _set_Body_RightHandIndexTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandMiddleMetacarpal
      static constexpr const int Body_RightHandMiddleMetacarpal = 55;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandMiddleMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandMiddleMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandMiddleMetacarpal
      static void _set_Body_RightHandMiddleMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandMiddleProximal
      static constexpr const int Body_RightHandMiddleProximal = 56;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandMiddleProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandMiddleProximal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandMiddleProximal
      static void _set_Body_RightHandMiddleProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandMiddleIntermediate
      static constexpr const int Body_RightHandMiddleIntermediate = 57;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandMiddleIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandMiddleIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandMiddleIntermediate
      static void _set_Body_RightHandMiddleIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandMiddleDistal
      static constexpr const int Body_RightHandMiddleDistal = 58;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandMiddleDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandMiddleDistal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandMiddleDistal
      static void _set_Body_RightHandMiddleDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandMiddleTip
      static constexpr const int Body_RightHandMiddleTip = 59;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandMiddleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandMiddleTip();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandMiddleTip
      static void _set_Body_RightHandMiddleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandRingMetacarpal
      static constexpr const int Body_RightHandRingMetacarpal = 60;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandRingMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandRingMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandRingMetacarpal
      static void _set_Body_RightHandRingMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandRingProximal
      static constexpr const int Body_RightHandRingProximal = 61;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandRingProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandRingProximal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandRingProximal
      static void _set_Body_RightHandRingProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandRingIntermediate
      static constexpr const int Body_RightHandRingIntermediate = 62;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandRingIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandRingIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandRingIntermediate
      static void _set_Body_RightHandRingIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandRingDistal
      static constexpr const int Body_RightHandRingDistal = 63;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandRingDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandRingDistal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandRingDistal
      static void _set_Body_RightHandRingDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandRingTip
      static constexpr const int Body_RightHandRingTip = 64;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandRingTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandRingTip();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandRingTip
      static void _set_Body_RightHandRingTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandLittleMetacarpal
      static constexpr const int Body_RightHandLittleMetacarpal = 65;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandLittleMetacarpal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandLittleMetacarpal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandLittleMetacarpal
      static void _set_Body_RightHandLittleMetacarpal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandLittleProximal
      static constexpr const int Body_RightHandLittleProximal = 66;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandLittleProximal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandLittleProximal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandLittleProximal
      static void _set_Body_RightHandLittleProximal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandLittleIntermediate
      static constexpr const int Body_RightHandLittleIntermediate = 67;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandLittleIntermediate
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandLittleIntermediate();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandLittleIntermediate
      static void _set_Body_RightHandLittleIntermediate(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandLittleDistal
      static constexpr const int Body_RightHandLittleDistal = 68;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandLittleDistal
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandLittleDistal();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandLittleDistal
      static void _set_Body_RightHandLittleDistal(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_RightHandLittleTip
      static constexpr const int Body_RightHandLittleTip = 69;
      // Get static field: static public OVRPlugin/BoneId Body_RightHandLittleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_RightHandLittleTip();
      // Set static field: static public OVRPlugin/BoneId Body_RightHandLittleTip
      static void _set_Body_RightHandLittleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Body_End
      static constexpr const int Body_End = 70;
      // Get static field: static public OVRPlugin/BoneId Body_End
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Body_End();
      // Set static field: static public OVRPlugin/BoneId Body_End
      static void _set_Body_End(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Max
      static constexpr const int Max = 70;
      // Get static field: static public OVRPlugin/BoneId Max
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Max();
      // Set static field: static public OVRPlugin/BoneId Max
      static void _set_Max(::GlobalNamespace::OVRPlugin::BoneId value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/BoneId
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::BoneId), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_BoneIdSizeCheck;
    static_assert(sizeof(OVRPlugin::BoneId) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/HandFingerPinch
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct HandFingerPinch/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HandFingerPinch
      constexpr HandFingerPinch(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/HandFingerPinch Thumb
      static constexpr const int Thumb = 1;
      // Get static field: static public OVRPlugin/HandFingerPinch Thumb
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Thumb();
      // Set static field: static public OVRPlugin/HandFingerPinch Thumb
      static void _set_Thumb(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Index
      static constexpr const int Index = 2;
      // Get static field: static public OVRPlugin/HandFingerPinch Index
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Index();
      // Set static field: static public OVRPlugin/HandFingerPinch Index
      static void _set_Index(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Middle
      static constexpr const int Middle = 4;
      // Get static field: static public OVRPlugin/HandFingerPinch Middle
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Middle();
      // Set static field: static public OVRPlugin/HandFingerPinch Middle
      static void _set_Middle(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Ring
      static constexpr const int Ring = 8;
      // Get static field: static public OVRPlugin/HandFingerPinch Ring
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Ring();
      // Set static field: static public OVRPlugin/HandFingerPinch Ring
      static void _set_Ring(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Pinky
      static constexpr const int Pinky = 16;
      // Get static field: static public OVRPlugin/HandFingerPinch Pinky
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Pinky();
      // Set static field: static public OVRPlugin/HandFingerPinch Pinky
      static void _set_Pinky(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/HandFingerPinch
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandFingerPinch), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_HandFingerPinchSizeCheck;
    static_assert(sizeof(OVRPlugin::HandFingerPinch) == 0x4);
    // Size: 0x200
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/HandStateInternal
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandStateInternal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/HandStatus Status
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::HandStatus Status;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::HandStatus) == 0x4);
      // public OVRPlugin/Posef RootPose
      // Size: 0x1C
      // Offset: 0x4
      ::GlobalNamespace::OVRPlugin::Posef RootPose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      // public OVRPlugin/Quatf BoneRotations_0
      // Size: 0x10
      // Offset: 0x20
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_1
      // Size: 0x10
      // Offset: 0x30
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_2
      // Size: 0x10
      // Offset: 0x40
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_3
      // Size: 0x10
      // Offset: 0x50
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_4
      // Size: 0x10
      // Offset: 0x60
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_5
      // Size: 0x10
      // Offset: 0x70
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_6
      // Size: 0x10
      // Offset: 0x80
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_7
      // Size: 0x10
      // Offset: 0x90
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_8
      // Size: 0x10
      // Offset: 0xA0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_9
      // Size: 0x10
      // Offset: 0xB0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_10
      // Size: 0x10
      // Offset: 0xC0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_11
      // Size: 0x10
      // Offset: 0xD0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_12
      // Size: 0x10
      // Offset: 0xE0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_13
      // Size: 0x10
      // Offset: 0xF0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_14
      // Size: 0x10
      // Offset: 0x100
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_15
      // Size: 0x10
      // Offset: 0x110
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_16
      // Size: 0x10
      // Offset: 0x120
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_17
      // Size: 0x10
      // Offset: 0x130
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_18
      // Size: 0x10
      // Offset: 0x140
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_19
      // Size: 0x10
      // Offset: 0x150
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_19;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_20
      // Size: 0x10
      // Offset: 0x160
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_20;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_21
      // Size: 0x10
      // Offset: 0x170
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_21;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_22
      // Size: 0x10
      // Offset: 0x180
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_22;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_23
      // Size: 0x10
      // Offset: 0x190
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_23;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/HandFingerPinch Pinches
      // Size: 0x4
      // Offset: 0x1A0
      ::GlobalNamespace::OVRPlugin::HandFingerPinch Pinches;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::HandFingerPinch) == 0x4);
      // public System.Single PinchStrength_0
      // Size: 0x4
      // Offset: 0x1A4
      float PinchStrength_0;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_1
      // Size: 0x4
      // Offset: 0x1A8
      float PinchStrength_1;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_2
      // Size: 0x4
      // Offset: 0x1AC
      float PinchStrength_2;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_3
      // Size: 0x4
      // Offset: 0x1B0
      float PinchStrength_3;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_4
      // Size: 0x4
      // Offset: 0x1B4
      float PinchStrength_4;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public OVRPlugin/Posef PointerPose
      // Size: 0x1C
      // Offset: 0x1B8
      ::GlobalNamespace::OVRPlugin::Posef PointerPose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      // public System.Single HandScale
      // Size: 0x4
      // Offset: 0x1D4
      float HandScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public OVRPlugin/TrackingConfidence HandConfidence
      // Size: 0x4
      // Offset: 0x1D8
      ::GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_0
      // Size: 0x4
      // Offset: 0x1DC
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_1
      // Size: 0x4
      // Offset: 0x1E0
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_2
      // Size: 0x4
      // Offset: 0x1E4
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_3
      // Size: 0x4
      // Offset: 0x1E8
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_4
      // Size: 0x4
      // Offset: 0x1EC
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public System.Double RequestedTimeStamp
      // Size: 0x8
      // Offset: 0x1F0
      double RequestedTimeStamp;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Double SampleTimeStamp
      // Size: 0x8
      // Offset: 0x1F8
      double SampleTimeStamp;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: HandStateInternal
      constexpr HandStateInternal(::GlobalNamespace::OVRPlugin::HandStatus Status_ = {}, ::GlobalNamespace::OVRPlugin::Posef RootPose_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_0_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_1_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_2_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_3_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_4_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_5_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_6_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_7_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_8_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_9_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_10_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_11_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_12_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_13_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_14_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_15_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_16_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_17_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_18_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_19_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_20_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_21_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_22_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_23_ = {}, ::GlobalNamespace::OVRPlugin::HandFingerPinch Pinches_ = {}, float PinchStrength_0_ = {}, float PinchStrength_1_ = {}, float PinchStrength_2_ = {}, float PinchStrength_3_ = {}, float PinchStrength_4_ = {}, ::GlobalNamespace::OVRPlugin::Posef PointerPose_ = {}, float HandScale_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4_ = {}, double RequestedTimeStamp_ = {}, double SampleTimeStamp_ = {}) noexcept : Status{Status_}, RootPose{RootPose_}, BoneRotations_0{BoneRotations_0_}, BoneRotations_1{BoneRotations_1_}, BoneRotations_2{BoneRotations_2_}, BoneRotations_3{BoneRotations_3_}, BoneRotations_4{BoneRotations_4_}, BoneRotations_5{BoneRotations_5_}, BoneRotations_6{BoneRotations_6_}, BoneRotations_7{BoneRotations_7_}, BoneRotations_8{BoneRotations_8_}, BoneRotations_9{BoneRotations_9_}, BoneRotations_10{BoneRotations_10_}, BoneRotations_11{BoneRotations_11_}, BoneRotations_12{BoneRotations_12_}, BoneRotations_13{BoneRotations_13_}, BoneRotations_14{BoneRotations_14_}, BoneRotations_15{BoneRotations_15_}, BoneRotations_16{BoneRotations_16_}, BoneRotations_17{BoneRotations_17_}, BoneRotations_18{BoneRotations_18_}, BoneRotations_19{BoneRotations_19_}, BoneRotations_20{BoneRotations_20_}, BoneRotations_21{BoneRotations_21_}, BoneRotations_22{BoneRotations_22_}, BoneRotations_23{BoneRotations_23_}, Pinches{Pinches_}, PinchStrength_0{PinchStrength_0_}, PinchStrength_1{PinchStrength_1_}, PinchStrength_2{PinchStrength_2_}, PinchStrength_3{PinchStrength_3_}, PinchStrength_4{PinchStrength_4_}, PointerPose{PointerPose_}, HandScale{HandScale_}, HandConfidence{HandConfidence_}, FingerConfidences_0{FingerConfidences_0_}, FingerConfidences_1{FingerConfidences_1_}, FingerConfidences_2{FingerConfidences_2_}, FingerConfidences_3{FingerConfidences_3_}, FingerConfidences_4{FingerConfidences_4_}, RequestedTimeStamp{RequestedTimeStamp_}, SampleTimeStamp{SampleTimeStamp_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/HandStatus Status
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandStatus& dyn_Status();
      // Get instance field reference: public OVRPlugin/Posef RootPose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_RootPose();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_0();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_1();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_2();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_3();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_4();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_5();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_6();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_7();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_8();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_9();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_10();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_11();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_12();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_13();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_14();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_15();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_16();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_17();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_18();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_19
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_19();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_20
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_20();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_21
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_21();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_22
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_22();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_23
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_23();
      // Get instance field reference: public OVRPlugin/HandFingerPinch Pinches
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandFingerPinch& dyn_Pinches();
      // Get instance field reference: public System.Single PinchStrength_0
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_0();
      // Get instance field reference: public System.Single PinchStrength_1
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_1();
      // Get instance field reference: public System.Single PinchStrength_2
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_2();
      // Get instance field reference: public System.Single PinchStrength_3
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_3();
      // Get instance field reference: public System.Single PinchStrength_4
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_4();
      // Get instance field reference: public OVRPlugin/Posef PointerPose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_PointerPose();
      // Get instance field reference: public System.Single HandScale
      [[deprecated("Use field access instead!")]] float& dyn_HandScale();
      // Get instance field reference: public OVRPlugin/TrackingConfidence HandConfidence
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_HandConfidence();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_0();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_1();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_2();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_3();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_4();
      // Get instance field reference: public System.Double RequestedTimeStamp
      [[deprecated("Use field access instead!")]] double& dyn_RequestedTimeStamp();
      // Get instance field reference: public System.Double SampleTimeStamp
      [[deprecated("Use field access instead!")]] double& dyn_SampleTimeStamp();
    }; // OVRPlugin/HandStateInternal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandStateInternal), 504 + sizeof(double)> __GlobalNamespace_OVRPlugin_HandStateInternalSizeCheck;
    static_assert(sizeof(OVRPlugin::HandStateInternal) == 0x200);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/BoneCapsule
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneCapsule/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int16 BoneIndex
      // Size: 0x2
      // Offset: 0x0
      int16_t BoneIndex;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // Padding between fields: BoneIndex and: StartPoint
      char __padding0[0x2] = {};
      // public OVRPlugin/Vector3f StartPoint
      // Size: 0xC
      // Offset: 0x4
      ::GlobalNamespace::OVRPlugin::Vector3f StartPoint;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      // public OVRPlugin/Vector3f EndPoint
      // Size: 0xC
      // Offset: 0x10
      ::GlobalNamespace::OVRPlugin::Vector3f EndPoint;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      // public System.Single Radius
      // Size: 0x4
      // Offset: 0x1C
      float Radius;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: BoneCapsule
      constexpr BoneCapsule(int16_t BoneIndex_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f StartPoint_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f EndPoint_ = {}, float Radius_ = {}) noexcept : BoneIndex{BoneIndex_}, StartPoint{StartPoint_}, EndPoint{EndPoint_}, Radius{Radius_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int16 BoneIndex
      [[deprecated("Use field access instead!")]] int16_t& dyn_BoneIndex();
      // Get instance field reference: public OVRPlugin/Vector3f StartPoint
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_StartPoint();
      // Get instance field reference: public OVRPlugin/Vector3f EndPoint
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_EndPoint();
      // Get instance field reference: public System.Single Radius
      [[deprecated("Use field access instead!")]] float& dyn_Radius();
    }; // OVRPlugin/BoneCapsule
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::BoneCapsule), 28 + sizeof(float)> __GlobalNamespace_OVRPlugin_BoneCapsuleSizeCheck;
    static_assert(sizeof(OVRPlugin::BoneCapsule) == 0x20);
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Bone
    // [TokenAttribute] Offset: FFFFFFFF
    struct Bone/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/BoneId Id
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::BoneId Id;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneId) == 0x4);
      // public System.Int16 ParentBoneIndex
      // Size: 0x2
      // Offset: 0x4
      int16_t ParentBoneIndex;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // Padding between fields: ParentBoneIndex and: Pose
      char __padding1[0x2] = {};
      // public OVRPlugin/Posef Pose
      // Size: 0x1C
      // Offset: 0x8
      ::GlobalNamespace::OVRPlugin::Posef Pose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      public:
      // Creating value type constructor for type: Bone
      constexpr Bone(::GlobalNamespace::OVRPlugin::BoneId Id_ = {}, int16_t ParentBoneIndex_ = {}, ::GlobalNamespace::OVRPlugin::Posef Pose_ = {}) noexcept : Id{Id_}, ParentBoneIndex{ParentBoneIndex_}, Pose{Pose_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/BoneId Id
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneId& dyn_Id();
      // Get instance field reference: public System.Int16 ParentBoneIndex
      [[deprecated("Use field access instead!")]] int16_t& dyn_ParentBoneIndex();
      // Get instance field reference: public OVRPlugin/Posef Pose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_Pose();
    }; // OVRPlugin/Bone
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Bone), 8 + sizeof(::GlobalNamespace::OVRPlugin::Posef)> __GlobalNamespace_OVRPlugin_BoneSizeCheck;
    static_assert(sizeof(OVRPlugin::Bone) == 0x24);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/SkeletonType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SkeletonType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SkeletonType
      constexpr SkeletonType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/SkeletonType None
      static constexpr const int None = -1;
      // Get static field: static public OVRPlugin/SkeletonType None
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_None();
      // Set static field: static public OVRPlugin/SkeletonType None
      static void _set_None(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // static field const value: static public OVRPlugin/SkeletonType HandLeft
      static constexpr const int HandLeft = 0;
      // Get static field: static public OVRPlugin/SkeletonType HandLeft
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_HandLeft();
      // Set static field: static public OVRPlugin/SkeletonType HandLeft
      static void _set_HandLeft(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // static field const value: static public OVRPlugin/SkeletonType HandRight
      static constexpr const int HandRight = 1;
      // Get static field: static public OVRPlugin/SkeletonType HandRight
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_HandRight();
      // Set static field: static public OVRPlugin/SkeletonType HandRight
      static void _set_HandRight(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // static field const value: static public OVRPlugin/SkeletonType Body
      static constexpr const int Body = 2;
      // Get static field: static public OVRPlugin/SkeletonType Body
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_Body();
      // Set static field: static public OVRPlugin/SkeletonType Body
      static void _set_Body(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/SkeletonType
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::SkeletonType), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_SkeletonTypeSizeCheck;
    static_assert(sizeof(OVRPlugin::SkeletonType) == 0x4);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Skeleton
    // [TokenAttribute] Offset: FFFFFFFF
    struct Skeleton/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/SkeletonType Type
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::SkeletonType Type;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::SkeletonType) == 0x4);
      // public System.UInt32 NumBones
      // Size: 0x4
      // Offset: 0x4
      uint NumBones;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.UInt32 NumBoneCapsules
      // Size: 0x4
      // Offset: 0x8
      uint NumBoneCapsules;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: NumBoneCapsules and: Bones
      char __padding2[0x4] = {};
      // public OVRPlugin/Bone[] Bones
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::GlobalNamespace::OVRPlugin::Bone> Bones;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::Bone>) == 0x8);
      // public OVRPlugin/BoneCapsule[] BoneCapsules
      // Size: 0x8
      // Offset: 0x18
      ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule> BoneCapsules;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>) == 0x8);
      public:
      // Creating value type constructor for type: Skeleton
      constexpr Skeleton(::GlobalNamespace::OVRPlugin::SkeletonType Type_ = {}, uint NumBones_ = {}, uint NumBoneCapsules_ = {}, ::ArrayW<::GlobalNamespace::OVRPlugin::Bone> Bones_ = ::ArrayW<::GlobalNamespace::OVRPlugin::Bone>(static_cast<void*>(nullptr)), ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule> BoneCapsules_ = ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>(static_cast<void*>(nullptr))) noexcept : Type{Type_}, NumBones{NumBones_}, NumBoneCapsules{NumBoneCapsules_}, Bones{Bones_}, BoneCapsules{BoneCapsules_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/SkeletonType Type
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SkeletonType& dyn_Type();
      // Get instance field reference: public System.UInt32 NumBones
      [[deprecated("Use field access instead!")]] uint& dyn_NumBones();
      // Get instance field reference: public System.UInt32 NumBoneCapsules
      [[deprecated("Use field access instead!")]] uint& dyn_NumBoneCapsules();
      // Get instance field reference: public OVRPlugin/Bone[] Bones
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Bone>& dyn_Bones();
      // Get instance field reference: public OVRPlugin/BoneCapsule[] BoneCapsules
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>& dyn_BoneCapsules();
    }; // OVRPlugin/Skeleton
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Skeleton), 24 + sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>)> __GlobalNamespace_OVRPlugin_SkeletonSizeCheck;
    static_assert(sizeof(OVRPlugin::Skeleton) == 0x20);
    // Size: 0xC44
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Skeleton2Internal
    // [TokenAttribute] Offset: FFFFFFFF
    struct Skeleton2Internal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/SkeletonType Type
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::SkeletonType Type;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::SkeletonType) == 0x4);
      // public System.UInt32 NumBones
      // Size: 0x4
      // Offset: 0x4
      uint NumBones;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.UInt32 NumBoneCapsules
      // Size: 0x4
      // Offset: 0x8
      uint NumBoneCapsules;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public OVRPlugin/Bone Bones_0
      // Size: 0x24
      // Offset: 0xC
      ::GlobalNamespace::OVRPlugin::Bone Bones_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_1
      // Size: 0x24
      // Offset: 0x30
      ::GlobalNamespace::OVRPlugin::Bone Bones_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_2
      // Size: 0x24
      // Offset: 0x54
      ::GlobalNamespace::OVRPlugin::Bone Bones_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_3
      // Size: 0x24
      // Offset: 0x78
      ::GlobalNamespace::OVRPlugin::Bone Bones_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_4
      // Size: 0x24
      // Offset: 0x9C
      ::GlobalNamespace::OVRPlugin::Bone Bones_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_5
      // Size: 0x24
      // Offset: 0xC0
      ::GlobalNamespace::OVRPlugin::Bone Bones_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_6
      // Size: 0x24
      // Offset: 0xE4
      ::GlobalNamespace::OVRPlugin::Bone Bones_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_7
      // Size: 0x24
      // Offset: 0x108
      ::GlobalNamespace::OVRPlugin::Bone Bones_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_8
      // Size: 0x24
      // Offset: 0x12C
      ::GlobalNamespace::OVRPlugin::Bone Bones_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_9
      // Size: 0x24
      // Offset: 0x150
      ::GlobalNamespace::OVRPlugin::Bone Bones_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_10
      // Size: 0x24
      // Offset: 0x174
      ::GlobalNamespace::OVRPlugin::Bone Bones_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_11
      // Size: 0x24
      // Offset: 0x198
      ::GlobalNamespace::OVRPlugin::Bone Bones_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_12
      // Size: 0x24
      // Offset: 0x1BC
      ::GlobalNamespace::OVRPlugin::Bone Bones_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_13
      // Size: 0x24
      // Offset: 0x1E0
      ::GlobalNamespace::OVRPlugin::Bone Bones_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_14
      // Size: 0x24
      // Offset: 0x204
      ::GlobalNamespace::OVRPlugin::Bone Bones_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_15
      // Size: 0x24
      // Offset: 0x228
      ::GlobalNamespace::OVRPlugin::Bone Bones_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_16
      // Size: 0x24
      // Offset: 0x24C
      ::GlobalNamespace::OVRPlugin::Bone Bones_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_17
      // Size: 0x24
      // Offset: 0x270
      ::GlobalNamespace::OVRPlugin::Bone Bones_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_18
      // Size: 0x24
      // Offset: 0x294
      ::GlobalNamespace::OVRPlugin::Bone Bones_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_19
      // Size: 0x24
      // Offset: 0x2B8
      ::GlobalNamespace::OVRPlugin::Bone Bones_19;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_20
      // Size: 0x24
      // Offset: 0x2DC
      ::GlobalNamespace::OVRPlugin::Bone Bones_20;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_21
      // Size: 0x24
      // Offset: 0x300
      ::GlobalNamespace::OVRPlugin::Bone Bones_21;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_22
      // Size: 0x24
      // Offset: 0x324
      ::GlobalNamespace::OVRPlugin::Bone Bones_22;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_23
      // Size: 0x24
      // Offset: 0x348
      ::GlobalNamespace::OVRPlugin::Bone Bones_23;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_24
      // Size: 0x24
      // Offset: 0x36C
      ::GlobalNamespace::OVRPlugin::Bone Bones_24;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_25
      // Size: 0x24
      // Offset: 0x390
      ::GlobalNamespace::OVRPlugin::Bone Bones_25;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_26
      // Size: 0x24
      // Offset: 0x3B4
      ::GlobalNamespace::OVRPlugin::Bone Bones_26;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_27
      // Size: 0x24
      // Offset: 0x3D8
      ::GlobalNamespace::OVRPlugin::Bone Bones_27;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_28
      // Size: 0x24
      // Offset: 0x3FC
      ::GlobalNamespace::OVRPlugin::Bone Bones_28;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_29
      // Size: 0x24
      // Offset: 0x420
      ::GlobalNamespace::OVRPlugin::Bone Bones_29;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_30
      // Size: 0x24
      // Offset: 0x444
      ::GlobalNamespace::OVRPlugin::Bone Bones_30;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_31
      // Size: 0x24
      // Offset: 0x468
      ::GlobalNamespace::OVRPlugin::Bone Bones_31;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_32
      // Size: 0x24
      // Offset: 0x48C
      ::GlobalNamespace::OVRPlugin::Bone Bones_32;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_33
      // Size: 0x24
      // Offset: 0x4B0
      ::GlobalNamespace::OVRPlugin::Bone Bones_33;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_34
      // Size: 0x24
      // Offset: 0x4D4
      ::GlobalNamespace::OVRPlugin::Bone Bones_34;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_35
      // Size: 0x24
      // Offset: 0x4F8
      ::GlobalNamespace::OVRPlugin::Bone Bones_35;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_36
      // Size: 0x24
      // Offset: 0x51C
      ::GlobalNamespace::OVRPlugin::Bone Bones_36;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_37
      // Size: 0x24
      // Offset: 0x540
      ::GlobalNamespace::OVRPlugin::Bone Bones_37;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_38
      // Size: 0x24
      // Offset: 0x564
      ::GlobalNamespace::OVRPlugin::Bone Bones_38;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_39
      // Size: 0x24
      // Offset: 0x588
      ::GlobalNamespace::OVRPlugin::Bone Bones_39;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_40
      // Size: 0x24
      // Offset: 0x5AC
      ::GlobalNamespace::OVRPlugin::Bone Bones_40;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_41
      // Size: 0x24
      // Offset: 0x5D0
      ::GlobalNamespace::OVRPlugin::Bone Bones_41;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_42
      // Size: 0x24
      // Offset: 0x5F4
      ::GlobalNamespace::OVRPlugin::Bone Bones_42;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_43
      // Size: 0x24
      // Offset: 0x618
      ::GlobalNamespace::OVRPlugin::Bone Bones_43;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_44
      // Size: 0x24
      // Offset: 0x63C
      ::GlobalNamespace::OVRPlugin::Bone Bones_44;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_45
      // Size: 0x24
      // Offset: 0x660
      ::GlobalNamespace::OVRPlugin::Bone Bones_45;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_46
      // Size: 0x24
      // Offset: 0x684
      ::GlobalNamespace::OVRPlugin::Bone Bones_46;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_47
      // Size: 0x24
      // Offset: 0x6A8
      ::GlobalNamespace::OVRPlugin::Bone Bones_47;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_48
      // Size: 0x24
      // Offset: 0x6CC
      ::GlobalNamespace::OVRPlugin::Bone Bones_48;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_49
      // Size: 0x24
      // Offset: 0x6F0
      ::GlobalNamespace::OVRPlugin::Bone Bones_49;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_50
      // Size: 0x24
      // Offset: 0x714
      ::GlobalNamespace::OVRPlugin::Bone Bones_50;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_51
      // Size: 0x24
      // Offset: 0x738
      ::GlobalNamespace::OVRPlugin::Bone Bones_51;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_52
      // Size: 0x24
      // Offset: 0x75C
      ::GlobalNamespace::OVRPlugin::Bone Bones_52;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_53
      // Size: 0x24
      // Offset: 0x780
      ::GlobalNamespace::OVRPlugin::Bone Bones_53;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_54
      // Size: 0x24
      // Offset: 0x7A4
      ::GlobalNamespace::OVRPlugin::Bone Bones_54;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_55
      // Size: 0x24
      // Offset: 0x7C8
      ::GlobalNamespace::OVRPlugin::Bone Bones_55;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_56
      // Size: 0x24
      // Offset: 0x7EC
      ::GlobalNamespace::OVRPlugin::Bone Bones_56;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_57
      // Size: 0x24
      // Offset: 0x810
      ::GlobalNamespace::OVRPlugin::Bone Bones_57;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_58
      // Size: 0x24
      // Offset: 0x834
      ::GlobalNamespace::OVRPlugin::Bone Bones_58;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_59
      // Size: 0x24
      // Offset: 0x858
      ::GlobalNamespace::OVRPlugin::Bone Bones_59;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_60
      // Size: 0x24
      // Offset: 0x87C
      ::GlobalNamespace::OVRPlugin::Bone Bones_60;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_61
      // Size: 0x24
      // Offset: 0x8A0
      ::GlobalNamespace::OVRPlugin::Bone Bones_61;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_62
      // Size: 0x24
      // Offset: 0x8C4
      ::GlobalNamespace::OVRPlugin::Bone Bones_62;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_63
      // Size: 0x24
      // Offset: 0x8E8
      ::GlobalNamespace::OVRPlugin::Bone Bones_63;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_64
      // Size: 0x24
      // Offset: 0x90C
      ::GlobalNamespace::OVRPlugin::Bone Bones_64;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_65
      // Size: 0x24
      // Offset: 0x930
      ::GlobalNamespace::OVRPlugin::Bone Bones_65;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_66
      // Size: 0x24
      // Offset: 0x954
      ::GlobalNamespace::OVRPlugin::Bone Bones_66;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_67
      // Size: 0x24
      // Offset: 0x978
      ::GlobalNamespace::OVRPlugin::Bone Bones_67;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_68
      // Size: 0x24
      // Offset: 0x99C
      ::GlobalNamespace::OVRPlugin::Bone Bones_68;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_69
      // Size: 0x24
      // Offset: 0x9C0
      ::GlobalNamespace::OVRPlugin::Bone Bones_69;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/BoneCapsule BoneCapsules_0
      // Size: 0x20
      // Offset: 0x9E4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_1
      // Size: 0x20
      // Offset: 0xA04
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_2
      // Size: 0x20
      // Offset: 0xA24
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_3
      // Size: 0x20
      // Offset: 0xA44
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_4
      // Size: 0x20
      // Offset: 0xA64
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_5
      // Size: 0x20
      // Offset: 0xA84
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_6
      // Size: 0x20
      // Offset: 0xAA4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_7
      // Size: 0x20
      // Offset: 0xAC4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_8
      // Size: 0x20
      // Offset: 0xAE4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_9
      // Size: 0x20
      // Offset: 0xB04
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_10
      // Size: 0x20
      // Offset: 0xB24
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_11
      // Size: 0x20
      // Offset: 0xB44
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_12
      // Size: 0x20
      // Offset: 0xB64
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_13
      // Size: 0x20
      // Offset: 0xB84
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_14
      // Size: 0x20
      // Offset: 0xBA4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_15
      // Size: 0x20
      // Offset: 0xBC4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_16
      // Size: 0x20
      // Offset: 0xBE4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_17
      // Size: 0x20
      // Offset: 0xC04
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_18
      // Size: 0x20
      // Offset: 0xC24
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      public:
      // Creating value type constructor for type: Skeleton2Internal
      constexpr Skeleton2Internal(::GlobalNamespace::OVRPlugin::SkeletonType Type_ = {}, uint NumBones_ = {}, uint NumBoneCapsules_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_0_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_1_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_2_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_3_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_4_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_5_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_6_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_7_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_8_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_9_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_10_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_11_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_12_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_13_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_14_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_15_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_16_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_17_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_18_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_19_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_20_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_21_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_22_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_23_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_24_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_25_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_26_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_27_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_28_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_29_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_30_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_31_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_32_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_33_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_34_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_35_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_36_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_37_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_38_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_39_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_40_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_41_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_42_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_43_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_44_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_45_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_46_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_47_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_48_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_49_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_50_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_51_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_52_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_53_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_54_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_55_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_56_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_57_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_58_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_59_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_60_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_61_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_62_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_63_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_64_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_65_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_66_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_67_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_68_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_69_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_0_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_1_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_2_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_3_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_4_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_5_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_6_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_7_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_8_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_9_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_10_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_11_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_12_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_13_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_14_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_15_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_16_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_17_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_18_ = {}) noexcept : Type{Type_}, NumBones{NumBones_}, NumBoneCapsules{NumBoneCapsules_}, Bones_0{Bones_0_}, Bones_1{Bones_1_}, Bones_2{Bones_2_}, Bones_3{Bones_3_}, Bones_4{Bones_4_}, Bones_5{Bones_5_}, Bones_6{Bones_6_}, Bones_7{Bones_7_}, Bones_8{Bones_8_}, Bones_9{Bones_9_}, Bones_10{Bones_10_}, Bones_11{Bones_11_}, Bones_12{Bones_12_}, Bones_13{Bones_13_}, Bones_14{Bones_14_}, Bones_15{Bones_15_}, Bones_16{Bones_16_}, Bones_17{Bones_17_}, Bones_18{Bones_18_}, Bones_19{Bones_19_}, Bones_20{Bones_20_}, Bones_21{Bones_21_}, Bones_22{Bones_22_}, Bones_23{Bones_23_}, Bones_24{Bones_24_}, Bones_25{Bones_25_}, Bones_26{Bones_26_}, Bones_27{Bones_27_}, Bones_28{Bones_28_}, Bones_29{Bones_29_}, Bones_30{Bones_30_}, Bones_31{Bones_31_}, Bones_32{Bones_32_}, Bones_33{Bones_33_}, Bones_34{Bones_34_}, Bones_35{Bones_35_}, Bones_36{Bones_36_}, Bones_37{Bones_37_}, Bones_38{Bones_38_}, Bones_39{Bones_39_}, Bones_40{Bones_40_}, Bones_41{Bones_41_}, Bones_42{Bones_42_}, Bones_43{Bones_43_}, Bones_44{Bones_44_}, Bones_45{Bones_45_}, Bones_46{Bones_46_}, Bones_47{Bones_47_}, Bones_48{Bones_48_}, Bones_49{Bones_49_}, Bones_50{Bones_50_}, Bones_51{Bones_51_}, Bones_52{Bones_52_}, Bones_53{Bones_53_}, Bones_54{Bones_54_}, Bones_55{Bones_55_}, Bones_56{Bones_56_}, Bones_57{Bones_57_}, Bones_58{Bones_58_}, Bones_59{Bones_59_}, Bones_60{Bones_60_}, Bones_61{Bones_61_}, Bones_62{Bones_62_}, Bones_63{Bones_63_}, Bones_64{Bones_64_}, Bones_65{Bones_65_}, Bones_66{Bones_66_}, Bones_67{Bones_67_}, Bones_68{Bones_68_}, Bones_69{Bones_69_}, BoneCapsules_0{BoneCapsules_0_}, BoneCapsules_1{BoneCapsules_1_}, BoneCapsules_2{BoneCapsules_2_}, BoneCapsules_3{BoneCapsules_3_}, BoneCapsules_4{BoneCapsules_4_}, BoneCapsules_5{BoneCapsules_5_}, BoneCapsules_6{BoneCapsules_6_}, BoneCapsules_7{BoneCapsules_7_}, BoneCapsules_8{BoneCapsules_8_}, BoneCapsules_9{BoneCapsules_9_}, BoneCapsules_10{BoneCapsules_10_}, BoneCapsules_11{BoneCapsules_11_}, BoneCapsules_12{BoneCapsules_12_}, BoneCapsules_13{BoneCapsules_13_}, BoneCapsules_14{BoneCapsules_14_}, BoneCapsules_15{BoneCapsules_15_}, BoneCapsules_16{BoneCapsules_16_}, BoneCapsules_17{BoneCapsules_17_}, BoneCapsules_18{BoneCapsules_18_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/SkeletonType Type
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SkeletonType& dyn_Type();
      // Get instance field reference: public System.UInt32 NumBones
      [[deprecated("Use field access instead!")]] uint& dyn_NumBones();
      // Get instance field reference: public System.UInt32 NumBoneCapsules
      [[deprecated("Use field access instead!")]] uint& dyn_NumBoneCapsules();
      // Get instance field reference: public OVRPlugin/Bone Bones_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_0();
      // Get instance field reference: public OVRPlugin/Bone Bones_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_1();
      // Get instance field reference: public OVRPlugin/Bone Bones_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_2();
      // Get instance field reference: public OVRPlugin/Bone Bones_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_3();
      // Get instance field reference: public OVRPlugin/Bone Bones_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_4();
      // Get instance field reference: public OVRPlugin/Bone Bones_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_5();
      // Get instance field reference: public OVRPlugin/Bone Bones_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_6();
      // Get instance field reference: public OVRPlugin/Bone Bones_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_7();
      // Get instance field reference: public OVRPlugin/Bone Bones_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_8();
      // Get instance field reference: public OVRPlugin/Bone Bones_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_9();
      // Get instance field reference: public OVRPlugin/Bone Bones_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_10();
      // Get instance field reference: public OVRPlugin/Bone Bones_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_11();
      // Get instance field reference: public OVRPlugin/Bone Bones_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_12();
      // Get instance field reference: public OVRPlugin/Bone Bones_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_13();
      // Get instance field reference: public OVRPlugin/Bone Bones_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_14();
      // Get instance field reference: public OVRPlugin/Bone Bones_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_15();
      // Get instance field reference: public OVRPlugin/Bone Bones_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_16();
      // Get instance field reference: public OVRPlugin/Bone Bones_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_17();
      // Get instance field reference: public OVRPlugin/Bone Bones_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_18();
      // Get instance field reference: public OVRPlugin/Bone Bones_19
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_19();
      // Get instance field reference: public OVRPlugin/Bone Bones_20
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_20();
      // Get instance field reference: public OVRPlugin/Bone Bones_21
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_21();
      // Get instance field reference: public OVRPlugin/Bone Bones_22
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_22();
      // Get instance field reference: public OVRPlugin/Bone Bones_23
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_23();
      // Get instance field reference: public OVRPlugin/Bone Bones_24
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_24();
      // Get instance field reference: public OVRPlugin/Bone Bones_25
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_25();
      // Get instance field reference: public OVRPlugin/Bone Bones_26
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_26();
      // Get instance field reference: public OVRPlugin/Bone Bones_27
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_27();
      // Get instance field reference: public OVRPlugin/Bone Bones_28
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_28();
      // Get instance field reference: public OVRPlugin/Bone Bones_29
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_29();
      // Get instance field reference: public OVRPlugin/Bone Bones_30
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_30();
      // Get instance field reference: public OVRPlugin/Bone Bones_31
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_31();
      // Get instance field reference: public OVRPlugin/Bone Bones_32
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_32();
      // Get instance field reference: public OVRPlugin/Bone Bones_33
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_33();
      // Get instance field reference: public OVRPlugin/Bone Bones_34
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_34();
      // Get instance field reference: public OVRPlugin/Bone Bones_35
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_35();
      // Get instance field reference: public OVRPlugin/Bone Bones_36
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_36();
      // Get instance field reference: public OVRPlugin/Bone Bones_37
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_37();
      // Get instance field reference: public OVRPlugin/Bone Bones_38
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_38();
      // Get instance field reference: public OVRPlugin/Bone Bones_39
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_39();
      // Get instance field reference: public OVRPlugin/Bone Bones_40
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_40();
      // Get instance field reference: public OVRPlugin/Bone Bones_41
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_41();
      // Get instance field reference: public OVRPlugin/Bone Bones_42
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_42();
      // Get instance field reference: public OVRPlugin/Bone Bones_43
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_43();
      // Get instance field reference: public OVRPlugin/Bone Bones_44
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_44();
      // Get instance field reference: public OVRPlugin/Bone Bones_45
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_45();
      // Get instance field reference: public OVRPlugin/Bone Bones_46
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_46();
      // Get instance field reference: public OVRPlugin/Bone Bones_47
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_47();
      // Get instance field reference: public OVRPlugin/Bone Bones_48
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_48();
      // Get instance field reference: public OVRPlugin/Bone Bones_49
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_49();
      // Get instance field reference: public OVRPlugin/Bone Bones_50
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_50();
      // Get instance field reference: public OVRPlugin/Bone Bones_51
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_51();
      // Get instance field reference: public OVRPlugin/Bone Bones_52
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_52();
      // Get instance field reference: public OVRPlugin/Bone Bones_53
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_53();
      // Get instance field reference: public OVRPlugin/Bone Bones_54
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_54();
      // Get instance field reference: public OVRPlugin/Bone Bones_55
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_55();
      // Get instance field reference: public OVRPlugin/Bone Bones_56
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_56();
      // Get instance field reference: public OVRPlugin/Bone Bones_57
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_57();
      // Get instance field reference: public OVRPlugin/Bone Bones_58
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_58();
      // Get instance field reference: public OVRPlugin/Bone Bones_59
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_59();
      // Get instance field reference: public OVRPlugin/Bone Bones_60
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_60();
      // Get instance field reference: public OVRPlugin/Bone Bones_61
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_61();
      // Get instance field reference: public OVRPlugin/Bone Bones_62
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_62();
      // Get instance field reference: public OVRPlugin/Bone Bones_63
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_63();
      // Get instance field reference: public OVRPlugin/Bone Bones_64
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_64();
      // Get instance field reference: public OVRPlugin/Bone Bones_65
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_65();
      // Get instance field reference: public OVRPlugin/Bone Bones_66
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_66();
      // Get instance field reference: public OVRPlugin/Bone Bones_67
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_67();
      // Get instance field reference: public OVRPlugin/Bone Bones_68
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_68();
      // Get instance field reference: public OVRPlugin/Bone Bones_69
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_69();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_0();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_1();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_2();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_3();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_4();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_5();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_6();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_7();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_8();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_9();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_10();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_11();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_12();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_13();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_14();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_15();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_16();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_17();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_18();
    }; // OVRPlugin/Skeleton2Internal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Skeleton2Internal), 3108 + sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule)> __GlobalNamespace_OVRPlugin_Skeleton2InternalSizeCheck;
    static_assert(sizeof(OVRPlugin::Skeleton2Internal) == 0xC44);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/FaceExpressionStatusInternal
    // [TokenAttribute] Offset: FFFFFFFF
    struct FaceExpressionStatusInternal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/Bool IsValid
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::Bool IsValid;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bool) == 0x4);
      // public OVRPlugin/Bool IsEyeFollowingBlendshapesValid
      // Size: 0x4
      // Offset: 0x4
      ::GlobalNamespace::OVRPlugin::Bool IsEyeFollowingBlendshapesValid;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bool) == 0x4);
      public:
      // Creating value type constructor for type: FaceExpressionStatusInternal
      constexpr FaceExpressionStatusInternal(::GlobalNamespace::OVRPlugin::Bool IsValid_ = {}, ::GlobalNamespace::OVRPlugin::Bool IsEyeFollowingBlendshapesValid_ = {}) noexcept : IsValid{IsValid_}, IsEyeFollowingBlendshapesValid{IsEyeFollowingBlendshapesValid_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/Bool IsValid
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bool& dyn_IsValid();
      // Get instance field reference: public OVRPlugin/Bool IsEyeFollowingBlendshapesValid
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bool& dyn_IsEyeFollowingBlendshapesValid();
      // public OVRPlugin/FaceExpressionStatus ToFaceExpressionStatus()
      // Offset: 0x4906288
      ::GlobalNamespace::OVRPlugin::FaceExpressionStatus ToFaceExpressionStatus();
    }; // OVRPlugin/FaceExpressionStatusInternal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::FaceExpressionStatusInternal), 4 + sizeof(::GlobalNamespace::OVRPlugin::Bool)> __GlobalNamespace_OVRPlugin_FaceExpressionStatusInternalSizeCheck;
    static_assert(sizeof(OVRPlugin::FaceExpressionStatusInternal) == 0x8);
    // Size: 0x118
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/FaceStateInternal
    // [TokenAttribute] Offset: FFFFFFFF
    struct FaceStateInternal/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single ExpressionWeights_0
      // Size: 0x4
      // Offset: 0x0
      float ExpressionWeights_0;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_1
      // Size: 0x4
      // Offset: 0x4
      float ExpressionWeights_1;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_2
      // Size: 0x4
      // Offset: 0x8
      float ExpressionWeights_2;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_3
      // Size: 0x4
      // Offset: 0xC
      float ExpressionWeights_3;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_4
      // Size: 0x4
      // Offset: 0x10
      float ExpressionWeights_4;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_5
      // Size: 0x4
      // Offset: 0x14
      float ExpressionWeights_5;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_6
      // Size: 0x4
      // Offset: 0x18
      float ExpressionWeights_6;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_7
      // Size: 0x4
      // Offset: 0x1C
      float ExpressionWeights_7;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_8
      // Size: 0x4
      // Offset: 0x20
      float ExpressionWeights_8;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_9
      // Size: 0x4
      // Offset: 0x24
      float ExpressionWeights_9;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_10
      // Size: 0x4
      // Offset: 0x28
      float ExpressionWeights_10;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_11
      // Size: 0x4
      // Offset: 0x2C
      float ExpressionWeights_11;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_12
      // Size: 0x4
      // Offset: 0x30
      float ExpressionWeights_12;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_13
      // Size: 0x4
      // Offset: 0x34
      float ExpressionWeights_13;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_14
      // Size: 0x4
      // Offset: 0x38
      float ExpressionWeights_14;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_15
      // Size: 0x4
      // Offset: 0x3C
      float ExpressionWeights_15;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_16
      // Size: 0x4
      // Offset: 0x40
      float ExpressionWeights_16;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_17
      // Size: 0x4
      // Offset: 0x44
      float ExpressionWeights_17;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_18
      // Size: 0x4
      // Offset: 0x48
      float ExpressionWeights_18;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_19
      // Size: 0x4
      // Offset: 0x4C
      float ExpressionWeights_19;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_20
      // Size: 0x4
      // Offset: 0x50
      float ExpressionWeights_20;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_21
      // Size: 0x4
      // Offset: 0x54
      float ExpressionWeights_21;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_22
      // Size: 0x4
      // Offset: 0x58
      float ExpressionWeights_22;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_23
      // Size: 0x4
      // Offset: 0x5C
      float ExpressionWeights_23;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_24
      // Size: 0x4
      // Offset: 0x60
      float ExpressionWeights_24;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_25
      // Size: 0x4
      // Offset: 0x64
      float ExpressionWeights_25;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_26
      // Size: 0x4
      // Offset: 0x68
      float ExpressionWeights_26;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_27
      // Size: 0x4
      // Offset: 0x6C
      float ExpressionWeights_27;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_28
      // Size: 0x4
      // Offset: 0x70
      float ExpressionWeights_28;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_29
      // Size: 0x4
      // Offset: 0x74
      float ExpressionWeights_29;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_30
      // Size: 0x4
      // Offset: 0x78
      float ExpressionWeights_30;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_31
      // Size: 0x4
      // Offset: 0x7C
      float ExpressionWeights_31;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_32
      // Size: 0x4
      // Offset: 0x80
      float ExpressionWeights_32;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_33
      // Size: 0x4
      // Offset: 0x84
      float ExpressionWeights_33;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_34
      // Size: 0x4
      // Offset: 0x88
      float ExpressionWeights_34;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_35
      // Size: 0x4
      // Offset: 0x8C
      float ExpressionWeights_35;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_36
      // Size: 0x4
      // Offset: 0x90
      float ExpressionWeights_36;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_37
      // Size: 0x4
      // Offset: 0x94
      float ExpressionWeights_37;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_38
      // Size: 0x4
      // Offset: 0x98
      float ExpressionWeights_38;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_39
      // Size: 0x4
      // Offset: 0x9C
      float ExpressionWeights_39;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_40
      // Size: 0x4
      // Offset: 0xA0
      float ExpressionWeights_40;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_41
      // Size: 0x4
      // Offset: 0xA4
      float ExpressionWeights_41;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_42
      // Size: 0x4
      // Offset: 0xA8
      float ExpressionWeights_42;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_43
      // Size: 0x4
      // Offset: 0xAC
      float ExpressionWeights_43;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_44
      // Size: 0x4
      // Offset: 0xB0
      float ExpressionWeights_44;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_45
      // Size: 0x4
      // Offset: 0xB4
      float ExpressionWeights_45;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_46
      // Size: 0x4
      // Offset: 0xB8
      float ExpressionWeights_46;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_47
      // Size: 0x4
      // Offset: 0xBC
      float ExpressionWeights_47;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_48
      // Size: 0x4
      // Offset: 0xC0
      float ExpressionWeights_48;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_49
      // Size: 0x4
      // Offset: 0xC4
      float ExpressionWeights_49;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_50
      // Size: 0x4
      // Offset: 0xC8
      float ExpressionWeights_50;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_51
      // Size: 0x4
      // Offset: 0xCC
      float ExpressionWeights_51;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_52
      // Size: 0x4
      // Offset: 0xD0
      float ExpressionWeights_52;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_53
      // Size: 0x4
      // Offset: 0xD4
      float ExpressionWeights_53;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_54
      // Size: 0x4
      // Offset: 0xD8
      float ExpressionWeights_54;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_55
      // Size: 0x4
      // Offset: 0xDC
      float ExpressionWeights_55;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_56
      // Size: 0x4
      // Offset: 0xE0
      float ExpressionWeights_56;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_57
      // Size: 0x4
      // Offset: 0xE4
      float ExpressionWeights_57;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_58
      // Size: 0x4
      // Offset: 0xE8
      float ExpressionWeights_58;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_59
      // Size: 0x4
      // Offset: 0xEC
      float ExpressionWeights_59;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_60
      // Size: 0x4
      // Offset: 0xF0
      float ExpressionWeights_60;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_61
      // Size: 0x4
      // Offset: 0xF4
      float ExpressionWeights_61;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeights_62
      // Size: 0x4
      // Offset: 0xF8
      float ExpressionWeights_62;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeightConfidences_0
      // Size: 0x4
      // Offset: 0xFC
      float ExpressionWeightConfidences_0;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ExpressionWeightConfidences_1
      // Size: 0x4
      // Offset: 0x100
      float ExpressionWeightConfidences_1;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public OVRPlugin/FaceExpressionStatusInternal Status
      // Size: 0x8
      // Offset: 0x104
      ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal Status;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal) == 0x8);
      // Padding between fields: Status and: Time
      char __padding65[0x4] = {};
      // public System.Double Time
      // Size: 0x8
      // Offset: 0x110
      double Time;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: FaceStateInternal
      constexpr FaceStateInternal(float ExpressionWeights_0_ = {}, float ExpressionWeights_1_ = {}, float ExpressionWeights_2_ = {}, float ExpressionWeights_3_ = {}, float ExpressionWeights_4_ = {}, float ExpressionWeights_5_ = {}, float ExpressionWeights_6_ = {}, float ExpressionWeights_7_ = {}, float ExpressionWeights_8_ = {}, float ExpressionWeights_9_ = {}, float ExpressionWeights_10_ = {}, float ExpressionWeights_11_ = {}, float ExpressionWeights_12_ = {}, float ExpressionWeights_13_ = {}, float ExpressionWeights_14_ = {}, float ExpressionWeights_15_ = {}, float ExpressionWeights_16_ = {}, float ExpressionWeights_17_ = {}, float ExpressionWeights_18_ = {}, float ExpressionWeights_19_ = {}, float ExpressionWeights_20_ = {}, float ExpressionWeights_21_ = {}, float ExpressionWeights_22_ = {}, float ExpressionWeights_23_ = {}, float ExpressionWeights_24_ = {}, float ExpressionWeights_25_ = {}, float ExpressionWeights_26_ = {}, float ExpressionWeights_27_ = {}, float ExpressionWeights_28_ = {}, float ExpressionWeights_29_ = {}, float ExpressionWeights_30_ = {}, float ExpressionWeights_31_ = {}, float ExpressionWeights_32_ = {}, float ExpressionWeights_33_ = {}, float ExpressionWeights_34_ = {}, float ExpressionWeights_35_ = {}, float ExpressionWeights_36_ = {}, float ExpressionWeights_37_ = {}, float ExpressionWeights_38_ = {}, float ExpressionWeights_39_ = {}, float ExpressionWeights_40_ = {}, float ExpressionWeights_41_ = {}, float ExpressionWeights_42_ = {}, float ExpressionWeights_43_ = {}, float ExpressionWeights_44_ = {}, float ExpressionWeights_45_ = {}, float ExpressionWeights_46_ = {}, float ExpressionWeights_47_ = {}, float ExpressionWeights_48_ = {}, float ExpressionWeights_49_ = {}, float ExpressionWeights_50_ = {}, float ExpressionWeights_51_ = {}, float ExpressionWeights_52_ = {}, float ExpressionWeights_53_ = {}, float ExpressionWeights_54_ = {}, float ExpressionWeights_55_ = {}, float ExpressionWeights_56_ = {}, float ExpressionWeights_57_ = {}, float ExpressionWeights_58_ = {}, float ExpressionWeights_59_ = {}, float ExpressionWeights_60_ = {}, float ExpressionWeights_61_ = {}, float ExpressionWeights_62_ = {}, float ExpressionWeightConfidences_0_ = {}, float ExpressionWeightConfidences_1_ = {}, ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal Status_ = {}, double Time_ = {}) noexcept : ExpressionWeights_0{ExpressionWeights_0_}, ExpressionWeights_1{ExpressionWeights_1_}, ExpressionWeights_2{ExpressionWeights_2_}, ExpressionWeights_3{ExpressionWeights_3_}, ExpressionWeights_4{ExpressionWeights_4_}, ExpressionWeights_5{ExpressionWeights_5_}, ExpressionWeights_6{ExpressionWeights_6_}, ExpressionWeights_7{ExpressionWeights_7_}, ExpressionWeights_8{ExpressionWeights_8_}, ExpressionWeights_9{ExpressionWeights_9_}, ExpressionWeights_10{ExpressionWeights_10_}, ExpressionWeights_11{ExpressionWeights_11_}, ExpressionWeights_12{ExpressionWeights_12_}, ExpressionWeights_13{ExpressionWeights_13_}, ExpressionWeights_14{ExpressionWeights_14_}, ExpressionWeights_15{ExpressionWeights_15_}, ExpressionWeights_16{ExpressionWeights_16_}, ExpressionWeights_17{ExpressionWeights_17_}, ExpressionWeights_18{ExpressionWeights_18_}, ExpressionWeights_19{ExpressionWeights_19_}, ExpressionWeights_20{ExpressionWeights_20_}, ExpressionWeights_21{ExpressionWeights_21_}, ExpressionWeights_22{ExpressionWeights_22_}, ExpressionWeights_23{ExpressionWeights_23_}, ExpressionWeights_24{ExpressionWeights_24_}, ExpressionWeights_25{ExpressionWeights_25_}, ExpressionWeights_26{ExpressionWeights_26_}, ExpressionWeights_27{ExpressionWeights_27_}, ExpressionWeights_28{ExpressionWeights_28_}, ExpressionWeights_29{ExpressionWeights_29_}, ExpressionWeights_30{ExpressionWeights_30_}, ExpressionWeights_31{ExpressionWeights_31_}, ExpressionWeights_32{ExpressionWeights_32_}, ExpressionWeights_33{ExpressionWeights_33_}, ExpressionWeights_34{ExpressionWeights_34_}, ExpressionWeights_35{ExpressionWeights_35_}, ExpressionWeights_36{ExpressionWeights_36_}, ExpressionWeights_37{ExpressionWeights_37_}, ExpressionWeights_38{ExpressionWeights_38_}, ExpressionWeights_39{ExpressionWeights_39_}, ExpressionWeights_40{ExpressionWeights_40_}, ExpressionWeights_41{ExpressionWeights_41_}, ExpressionWeights_42{ExpressionWeights_42_}, ExpressionWeights_43{ExpressionWeights_43_}, ExpressionWeights_44{ExpressionWeights_44_}, ExpressionWeights_45{ExpressionWeights_45_}, ExpressionWeights_46{ExpressionWeights_46_}, ExpressionWeights_47{ExpressionWeights_47_}, ExpressionWeights_48{ExpressionWeights_48_}, ExpressionWeights_49{ExpressionWeights_49_}, ExpressionWeights_50{ExpressionWeights_50_}, ExpressionWeights_51{ExpressionWeights_51_}, ExpressionWeights_52{ExpressionWeights_52_}, ExpressionWeights_53{ExpressionWeights_53_}, ExpressionWeights_54{ExpressionWeights_54_}, ExpressionWeights_55{ExpressionWeights_55_}, ExpressionWeights_56{ExpressionWeights_56_}, ExpressionWeights_57{ExpressionWeights_57_}, ExpressionWeights_58{ExpressionWeights_58_}, ExpressionWeights_59{ExpressionWeights_59_}, ExpressionWeights_60{ExpressionWeights_60_}, ExpressionWeights_61{ExpressionWeights_61_}, ExpressionWeights_62{ExpressionWeights_62_}, ExpressionWeightConfidences_0{ExpressionWeightConfidences_0_}, ExpressionWeightConfidences_1{ExpressionWeightConfidences_1_}, Status{Status_}, Time{Time_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single ExpressionWeights_0
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_0();
      // Get instance field reference: public System.Single ExpressionWeights_1
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_1();
      // Get instance field reference: public System.Single ExpressionWeights_2
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_2();
      // Get instance field reference: public System.Single ExpressionWeights_3
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_3();
      // Get instance field reference: public System.Single ExpressionWeights_4
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_4();
      // Get instance field reference: public System.Single ExpressionWeights_5
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_5();
      // Get instance field reference: public System.Single ExpressionWeights_6
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_6();
      // Get instance field reference: public System.Single ExpressionWeights_7
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_7();
      // Get instance field reference: public System.Single ExpressionWeights_8
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_8();
      // Get instance field reference: public System.Single ExpressionWeights_9
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_9();
      // Get instance field reference: public System.Single ExpressionWeights_10
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_10();
      // Get instance field reference: public System.Single ExpressionWeights_11
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_11();
      // Get instance field reference: public System.Single ExpressionWeights_12
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_12();
      // Get instance field reference: public System.Single ExpressionWeights_13
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_13();
      // Get instance field reference: public System.Single ExpressionWeights_14
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_14();
      // Get instance field reference: public System.Single ExpressionWeights_15
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_15();
      // Get instance field reference: public System.Single ExpressionWeights_16
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_16();
      // Get instance field reference: public System.Single ExpressionWeights_17
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_17();
      // Get instance field reference: public System.Single ExpressionWeights_18
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_18();
      // Get instance field reference: public System.Single ExpressionWeights_19
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_19();
      // Get instance field reference: public System.Single ExpressionWeights_20
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_20();
      // Get instance field reference: public System.Single ExpressionWeights_21
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_21();
      // Get instance field reference: public System.Single ExpressionWeights_22
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_22();
      // Get instance field reference: public System.Single ExpressionWeights_23
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_23();
      // Get instance field reference: public System.Single ExpressionWeights_24
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_24();
      // Get instance field reference: public System.Single ExpressionWeights_25
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_25();
      // Get instance field reference: public System.Single ExpressionWeights_26
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_26();
      // Get instance field reference: public System.Single ExpressionWeights_27
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_27();
      // Get instance field reference: public System.Single ExpressionWeights_28
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_28();
      // Get instance field reference: public System.Single ExpressionWeights_29
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_29();
      // Get instance field reference: public System.Single ExpressionWeights_30
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_30();
      // Get instance field reference: public System.Single ExpressionWeights_31
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_31();
      // Get instance field reference: public System.Single ExpressionWeights_32
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_32();
      // Get instance field reference: public System.Single ExpressionWeights_33
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_33();
      // Get instance field reference: public System.Single ExpressionWeights_34
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_34();
      // Get instance field reference: public System.Single ExpressionWeights_35
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_35();
      // Get instance field reference: public System.Single ExpressionWeights_36
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_36();
      // Get instance field reference: public System.Single ExpressionWeights_37
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_37();
      // Get instance field reference: public System.Single ExpressionWeights_38
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_38();
      // Get instance field reference: public System.Single ExpressionWeights_39
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_39();
      // Get instance field reference: public System.Single ExpressionWeights_40
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_40();
      // Get instance field reference: public System.Single ExpressionWeights_41
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_41();
      // Get instance field reference: public System.Single ExpressionWeights_42
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_42();
      // Get instance field reference: public System.Single ExpressionWeights_43
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_43();
      // Get instance field reference: public System.Single ExpressionWeights_44
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_44();
      // Get instance field reference: public System.Single ExpressionWeights_45
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_45();
      // Get instance field reference: public System.Single ExpressionWeights_46
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_46();
      // Get instance field reference: public System.Single ExpressionWeights_47
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_47();
      // Get instance field reference: public System.Single ExpressionWeights_48
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_48();
      // Get instance field reference: public System.Single ExpressionWeights_49
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_49();
      // Get instance field reference: public System.Single ExpressionWeights_50
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_50();
      // Get instance field reference: public System.Single ExpressionWeights_51
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_51();
      // Get instance field reference: public System.Single ExpressionWeights_52
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_52();
      // Get instance field reference: public System.Single ExpressionWeights_53
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_53();
      // Get instance field reference: public System.Single ExpressionWeights_54
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_54();
      // Get instance field reference: public System.Single ExpressionWeights_55
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_55();
      // Get instance field reference: public System.Single ExpressionWeights_56
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_56();
      // Get instance field reference: public System.Single ExpressionWeights_57
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_57();
      // Get instance field reference: public System.Single ExpressionWeights_58
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_58();
      // Get instance field reference: public System.Single ExpressionWeights_59
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_59();
      // Get instance field reference: public System.Single ExpressionWeights_60
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_60();
      // Get instance field reference: public System.Single ExpressionWeights_61
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_61();
      // Get instance field reference: public System.Single ExpressionWeights_62
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeights_62();
      // Get instance field reference: public System.Single ExpressionWeightConfidences_0
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeightConfidences_0();
      // Get instance field reference: public System.Single ExpressionWeightConfidences_1
      [[deprecated("Use field access instead!")]] float& dyn_ExpressionWeightConfidences_1();
      // Get instance field reference: public OVRPlugin/FaceExpressionStatusInternal Status
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal& dyn_Status();
      // Get instance field reference: public System.Double Time
      [[deprecated("Use field access instead!")]] double& dyn_Time();
    }; // OVRPlugin/FaceStateInternal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::FaceStateInternal), 272 + sizeof(double)> __GlobalNamespace_OVRPlugin_FaceStateInternalSizeCheck;
    static_assert(sizeof(OVRPlugin::FaceStateInternal) == 0x118);
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/EyeGazeState
    // [TokenAttribute] Offset: FFFFFFFF
    struct EyeGazeState/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/Posef Pose
      // Size: 0x1C
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::Posef Pose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      // public System.Single Confidence
      // Size: 0x4
      // Offset: 0x1C
      float Confidence;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // OVRPlugin/Bool _isValid
      // Size: 0x4
      // Offset: 0x20
      ::GlobalNamespace::OVRPlugin::Bool isValid;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bool) == 0x4);
      public:
      // Creating value type constructor for type: EyeGazeState
      constexpr EyeGazeState(::GlobalNamespace::OVRPlugin::Posef Pose_ = {}, float Confidence_ = {}, ::GlobalNamespace::OVRPlugin::Bool isValid_ = {}) noexcept : Pose{Pose_}, Confidence{Confidence_}, isValid{isValid_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/Posef Pose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_Pose();
      // Get instance field reference: public System.Single Confidence
      [[deprecated("Use field access instead!")]] float& dyn_Confidence();
      // Get instance field reference: OVRPlugin/Bool _isValid
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bool& dyn__isValid();
      // public System.Boolean get_IsValid()
      // Offset: 0x49062A4
      bool get_IsValid();
    }; // OVRPlugin/EyeGazeState
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::EyeGazeState), 32 + sizeof(::GlobalNamespace::OVRPlugin::Bool)> __GlobalNamespace_OVRPlugin_EyeGazeStateSizeCheck;
    static_assert(sizeof(OVRPlugin::EyeGazeState) == 0x24);
    // Size: 0x50
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/EyeGazesStateInternal
    // [TokenAttribute] Offset: FFFFFFFF
    struct EyeGazesStateInternal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/EyeGazeState EyeGazes_0
      // Size: 0x24
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::EyeGazeState EyeGazes_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::EyeGazeState) == 0x24);
      // public OVRPlugin/EyeGazeState EyeGazes_1
      // Size: 0x24
      // Offset: 0x24
      ::GlobalNamespace::OVRPlugin::EyeGazeState EyeGazes_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::EyeGazeState) == 0x24);
      // public System.Double Time
      // Size: 0x8
      // Offset: 0x48
      double Time;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: EyeGazesStateInternal
      constexpr EyeGazesStateInternal(::GlobalNamespace::OVRPlugin::EyeGazeState EyeGazes_0_ = {}, ::GlobalNamespace::OVRPlugin::EyeGazeState EyeGazes_1_ = {}, double Time_ = {}) noexcept : EyeGazes_0{EyeGazes_0_}, EyeGazes_1{EyeGazes_1_}, Time{Time_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/EyeGazeState EyeGazes_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeGazeState& dyn_EyeGazes_0();
      // Get instance field reference: public OVRPlugin/EyeGazeState EyeGazes_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::EyeGazeState& dyn_EyeGazes_1();
      // Get instance field reference: public System.Double Time
      [[deprecated("Use field access instead!")]] double& dyn_Time();
    }; // OVRPlugin/EyeGazesStateInternal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::EyeGazesStateInternal), 72 + sizeof(double)> __GlobalNamespace_OVRPlugin_EyeGazesStateInternalSizeCheck;
    static_assert(sizeof(OVRPlugin::EyeGazesStateInternal) == 0x50);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/SpaceComponentType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpaceComponentType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpaceComponentType
      constexpr SpaceComponentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/SpaceComponentType Locatable
      static constexpr const int Locatable = 0;
      // Get static field: static public OVRPlugin/SpaceComponentType Locatable
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_Locatable();
      // Set static field: static public OVRPlugin/SpaceComponentType Locatable
      static void _set_Locatable(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType Storable
      static constexpr const int Storable = 1;
      // Get static field: static public OVRPlugin/SpaceComponentType Storable
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_Storable();
      // Set static field: static public OVRPlugin/SpaceComponentType Storable
      static void _set_Storable(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType Sharable
      static constexpr const int Sharable = 2;
      // Get static field: static public OVRPlugin/SpaceComponentType Sharable
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_Sharable();
      // Set static field: static public OVRPlugin/SpaceComponentType Sharable
      static void _set_Sharable(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType Bounded2D
      static constexpr const int Bounded2D = 3;
      // Get static field: static public OVRPlugin/SpaceComponentType Bounded2D
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_Bounded2D();
      // Set static field: static public OVRPlugin/SpaceComponentType Bounded2D
      static void _set_Bounded2D(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType Bounded3D
      static constexpr const int Bounded3D = 4;
      // Get static field: static public OVRPlugin/SpaceComponentType Bounded3D
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_Bounded3D();
      // Set static field: static public OVRPlugin/SpaceComponentType Bounded3D
      static void _set_Bounded3D(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType SemanticLabels
      static constexpr const int SemanticLabels = 5;
      // Get static field: static public OVRPlugin/SpaceComponentType SemanticLabels
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_SemanticLabels();
      // Set static field: static public OVRPlugin/SpaceComponentType SemanticLabels
      static void _set_SemanticLabels(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType RoomLayout
      static constexpr const int RoomLayout = 6;
      // Get static field: static public OVRPlugin/SpaceComponentType RoomLayout
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_RoomLayout();
      // Set static field: static public OVRPlugin/SpaceComponentType RoomLayout
      static void _set_RoomLayout(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType SpaceContainer
      static constexpr const int SpaceContainer = 7;
      // Get static field: static public OVRPlugin/SpaceComponentType SpaceContainer
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_SpaceContainer();
      // Set static field: static public OVRPlugin/SpaceComponentType SpaceContainer
      static void _set_SpaceContainer(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // static field const value: static public OVRPlugin/SpaceComponentType TriangleMesh
      static constexpr const int TriangleMesh = 1000269000;
      // Get static field: static public OVRPlugin/SpaceComponentType TriangleMesh
      static ::GlobalNamespace::OVRPlugin::SpaceComponentType _get_TriangleMesh();
      // Set static field: static public OVRPlugin/SpaceComponentType TriangleMesh
      static void _set_TriangleMesh(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/SpaceComponentType
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::SpaceComponentType), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_SpaceComponentTypeSizeCheck;
    static_assert(sizeof(OVRPlugin::SpaceComponentType) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/SpaceQueryResult
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpaceQueryResult/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt64 space
      // Size: 0x8
      // Offset: 0x0
      uint64_t space;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // public System.Guid uuid
      // Size: 0x10
      // Offset: 0x8
      ::System::Guid uuid;
      // Field size check
      static_assert(sizeof(::System::Guid) == 0x10);
      public:
      // Creating value type constructor for type: SpaceQueryResult
      constexpr SpaceQueryResult(uint64_t space_ = {}, ::System::Guid uuid_ = {}) noexcept : space{space_}, uuid{uuid_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt64 space
      [[deprecated("Use field access instead!")]] uint64_t& dyn_space();
      // Get instance field reference: public System.Guid uuid
      [[deprecated("Use field access instead!")]] ::System::Guid& dyn_uuid();
    }; // OVRPlugin/SpaceQueryResult
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::SpaceQueryResult), 8 + sizeof(::System::Guid)> __GlobalNamespace_OVRPlugin_SpaceQueryResultSizeCheck;
    static_assert(sizeof(OVRPlugin::SpaceQueryResult) == 0x18);
    // static field const value: static public System.Boolean isSupportedPlatform
    static constexpr const bool isSupportedPlatform = true;
    // Get static field: static public System.Boolean isSupportedPlatform
    static bool _get_isSupportedPlatform();
    // Set static field: static public System.Boolean isSupportedPlatform
    static void _set_isSupportedPlatform(bool value);
    // Get static field: static public readonly System.Version wrapperVersion
    static ::System::Version* _get_wrapperVersion();
    // Set static field: static public readonly System.Version wrapperVersion
    static void _set_wrapperVersion(::System::Version* value);
    // Get static field: static private System.Version _version
    static ::System::Version* _get__version();
    // Set static field: static private System.Version _version
    static void _set__version(::System::Version* value);
    // Get static field: static private System.Version _nativeSDKVersion
    static ::System::Version* _get__nativeSDKVersion();
    // Set static field: static private System.Version _nativeSDKVersion
    static void _set__nativeSDKVersion(::System::Version* value);
    // Get static field: static public System.Int32 MAX_CPU_CORES
    static int _get_MAX_CPU_CORES();
    // Set static field: static public System.Int32 MAX_CPU_CORES
    static void _set_MAX_CPU_CORES(int value);
    // static field const value: static private System.Int32 OverlayShapeFlagShift
    static constexpr const int OverlayShapeFlagShift = 4;
    // Get static field: static private System.Int32 OverlayShapeFlagShift
    static int _get_OverlayShapeFlagShift();
    // Set static field: static private System.Int32 OverlayShapeFlagShift
    static void _set_OverlayShapeFlagShift(int value);
    // static field const value: static public System.Int32 AppPerfFrameStatsMaxCount
    static constexpr const int AppPerfFrameStatsMaxCount = 5;
    // Get static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static int _get_AppPerfFrameStatsMaxCount();
    // Set static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static void _set_AppPerfFrameStatsMaxCount(int value);
    // static field const value: static private System.Int32 EventDataBufferSize
    static constexpr const int EventDataBufferSize = 4000;
    // Get static field: static private System.Int32 EventDataBufferSize
    static int _get_EventDataBufferSize();
    // Set static field: static private System.Int32 EventDataBufferSize
    static void _set_EventDataBufferSize(int value);
    // static field const value: static public System.Int32 RENDER_MODEL_NULL_KEY
    static constexpr const int RENDER_MODEL_NULL_KEY = 0;
    // Get static field: static public System.Int32 RENDER_MODEL_NULL_KEY
    static int _get_RENDER_MODEL_NULL_KEY();
    // Set static field: static public System.Int32 RENDER_MODEL_NULL_KEY
    static void _set_RENDER_MODEL_NULL_KEY(int value);
    // static field const value: static public System.Int32 SpaceFilterInfoIdsMaxSize
    static constexpr const int SpaceFilterInfoIdsMaxSize = 1024;
    // Get static field: static public System.Int32 SpaceFilterInfoIdsMaxSize
    static int _get_SpaceFilterInfoIdsMaxSize();
    // Set static field: static public System.Int32 SpaceFilterInfoIdsMaxSize
    static void _set_SpaceFilterInfoIdsMaxSize(int value);
    // static field const value: static public System.Int32 SpaceFilterInfoComponentsMaxSize
    static constexpr const int SpaceFilterInfoComponentsMaxSize = 16;
    // Get static field: static public System.Int32 SpaceFilterInfoComponentsMaxSize
    static int _get_SpaceFilterInfoComponentsMaxSize();
    // Set static field: static public System.Int32 SpaceFilterInfoComponentsMaxSize
    static void _set_SpaceFilterInfoComponentsMaxSize(int value);
    // static field const value: static public System.Int32 SpatialEntityMaxQueryResultsPerEvent
    static constexpr const int SpatialEntityMaxQueryResultsPerEvent = 128;
    // Get static field: static public System.Int32 SpatialEntityMaxQueryResultsPerEvent
    static int _get_SpatialEntityMaxQueryResultsPerEvent();
    // Set static field: static public System.Int32 SpatialEntityMaxQueryResultsPerEvent
    static void _set_SpatialEntityMaxQueryResultsPerEvent(int value);
    // Get static field: static private System.Nullable`1<OVRPlugin/XrApi> _nativeXrApi
    static ::System::Nullable_1<::GlobalNamespace::OVRPlugin::XrApi> _get__nativeXrApi();
    // Set static field: static private System.Nullable`1<OVRPlugin/XrApi> _nativeXrApi
    static void _set__nativeXrApi(::System::Nullable_1<::GlobalNamespace::OVRPlugin::XrApi> value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static ::GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioOutGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static void _set__nativeAudioOutGuid(::GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioOutGuid
    static ::System::Guid _get__cachedAudioOutGuid();
    // Set static field: static private System.Guid _cachedAudioOutGuid
    static void _set__cachedAudioOutGuid(::System::Guid value);
    // Get static field: static private System.String _cachedAudioOutString
    static ::StringW _get__cachedAudioOutString();
    // Set static field: static private System.String _cachedAudioOutString
    static void _set__cachedAudioOutString(::StringW value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static ::GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioInGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static void _set__nativeAudioInGuid(::GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioInGuid
    static ::System::Guid _get__cachedAudioInGuid();
    // Set static field: static private System.Guid _cachedAudioInGuid
    static void _set__cachedAudioInGuid(::System::Guid value);
    // Get static field: static private System.String _cachedAudioInString
    static ::StringW _get__cachedAudioInString();
    // Set static field: static private System.String _cachedAudioInString
    static void _set__cachedAudioInString(::StringW value);
    // Get static field: static private System.Boolean perfStatWarningPrinted
    static bool _get_perfStatWarningPrinted();
    // Set static field: static private System.Boolean perfStatWarningPrinted
    static void _set_perfStatWarningPrinted(bool value);
    // Get static field: static private System.Boolean resetPerfStatWarningPrinted
    static bool _get_resetPerfStatWarningPrinted();
    // Set static field: static private System.Boolean resetPerfStatWarningPrinted
    static void _set_resetPerfStatWarningPrinted(bool value);
    // Get static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static ::GlobalNamespace::OVRNativeBuffer* _get__nativeSystemDisplayFrequenciesAvailable();
    // Set static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static void _set__nativeSystemDisplayFrequenciesAvailable(::GlobalNamespace::OVRNativeBuffer* value);
    // Get static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static ::ArrayW<float> _get__cachedSystemDisplayFrequenciesAvailable();
    // Set static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static void _set__cachedSystemDisplayFrequenciesAvailable(::ArrayW<float> value);
    // Get static field: static private OVRPlugin/HandStateInternal cachedHandState
    static ::GlobalNamespace::OVRPlugin::HandStateInternal _get_cachedHandState();
    // Set static field: static private OVRPlugin/HandStateInternal cachedHandState
    static void _set_cachedHandState(::GlobalNamespace::OVRPlugin::HandStateInternal value);
    // Get static field: static private OVRPlugin/Skeleton cachedSkeleton
    static ::GlobalNamespace::OVRPlugin::Skeleton _get_cachedSkeleton();
    // Set static field: static private OVRPlugin/Skeleton cachedSkeleton
    static void _set_cachedSkeleton(::GlobalNamespace::OVRPlugin::Skeleton value);
    // Get static field: static private OVRPlugin/Skeleton2Internal cachedSkeleton2
    static ::GlobalNamespace::OVRPlugin::Skeleton2Internal _get_cachedSkeleton2();
    // Set static field: static private OVRPlugin/Skeleton2Internal cachedSkeleton2
    static void _set_cachedSkeleton2(::GlobalNamespace::OVRPlugin::Skeleton2Internal value);
    // Get static field: static private OVRPlugin/GetBoneSkeleton2Delegate[] Skeleton2GetBone
    static ::ArrayW<::GlobalNamespace::OVRPlugin::GetBoneSkeleton2Delegate*> _get_Skeleton2GetBone();
    // Set static field: static private OVRPlugin/GetBoneSkeleton2Delegate[] Skeleton2GetBone
    static void _set_Skeleton2GetBone(::ArrayW<::GlobalNamespace::OVRPlugin::GetBoneSkeleton2Delegate*> value);
    // Get static field: static private OVRPlugin/FaceStateInternal cachedFaceState
    static ::GlobalNamespace::OVRPlugin::FaceStateInternal _get_cachedFaceState();
    // Set static field: static private OVRPlugin/FaceStateInternal cachedFaceState
    static void _set_cachedFaceState(::GlobalNamespace::OVRPlugin::FaceStateInternal value);
    // Get static field: static private OVRPlugin/EyeGazesStateInternal cachedEyeGazesState
    static ::GlobalNamespace::OVRPlugin::EyeGazesStateInternal _get_cachedEyeGazesState();
    // Set static field: static private OVRPlugin/EyeGazesStateInternal cachedEyeGazesState
    static void _set_cachedEyeGazesState(::GlobalNamespace::OVRPlugin::EyeGazesStateInternal value);
    // static field const value: static private System.String pluginName
    static constexpr const char* pluginName = "OVRPlugin";
    // Get static field: static private System.String pluginName
    static ::StringW _get_pluginName();
    // Set static field: static private System.String pluginName
    static void _set_pluginName(::StringW value);
    // Get static field: static private System.Version _versionZero
    static ::System::Version* _get__versionZero();
    // Set static field: static private System.Version _versionZero
    static void _set__versionZero(::System::Version* value);
    // static public System.Version get_version()
    // Offset: 0x48EDE18
    static ::System::Version* get_version();
    // static public System.Version get_nativeSDKVersion()
    // Offset: 0x48EE31C
    static ::System::Version* get_nativeSDKVersion();
    // static public System.Boolean IsSuccess(OVRPlugin/Result result)
    // Offset: 0x48EE5EC
    static bool IsSuccess(::GlobalNamespace::OVRPlugin::Result result);
    // static public System.Void SetLogCallback2(OVRPlugin/LogCallback2DelegateType logCallback)
    // Offset: 0x48EE5F8
    static void SetLogCallback2(::GlobalNamespace::OVRPlugin::LogCallback2DelegateType* logCallback);
    // static public System.Boolean IsPassthroughShape(OVRPlugin/OverlayShape shape)
    // Offset: 0x48EE700
    static bool IsPassthroughShape(::GlobalNamespace::OVRPlugin::OverlayShape shape);
    // static public System.Boolean IsPositionValid(OVRPlugin/SpaceLocationFlags value)
    // Offset: 0x48EE724
    static bool IsPositionValid(::GlobalNamespace::OVRPlugin::SpaceLocationFlags value);
    // static public System.Boolean IsOrientationValid(OVRPlugin/SpaceLocationFlags value)
    // Offset: 0x48EE72C
    static bool IsOrientationValid(::GlobalNamespace::OVRPlugin::SpaceLocationFlags value);
    // static public System.Boolean IsPositionTracked(OVRPlugin/SpaceLocationFlags value)
    // Offset: 0x48EE734
    static bool IsPositionTracked(::GlobalNamespace::OVRPlugin::SpaceLocationFlags value);
    // static public System.Boolean IsOrientationTracked(OVRPlugin/SpaceLocationFlags value)
    // Offset: 0x48EE73C
    static bool IsOrientationTracked(::GlobalNamespace::OVRPlugin::SpaceLocationFlags value);
    // static public System.String GuidToUuidString(System.Guid guid)
    // Offset: 0x48EE744
    static ::StringW GuidToUuidString(::System::Guid guid);
    // static public System.Boolean get_initialized()
    // Offset: 0x48EE87C
    static bool get_initialized();
    // static public OVRPlugin/XrApi get_nativeXrApi()
    // Offset: 0x48EE8D8
    static ::GlobalNamespace::OVRPlugin::XrApi get_nativeXrApi();
    // static public System.Boolean get_chromatic()
    // Offset: 0x48EEA74
    static bool get_chromatic();
    // static public System.Void set_chromatic(System.Boolean value)
    // Offset: 0x48EEB4C
    static void set_chromatic(bool value);
    // static public System.Boolean get_monoscopic()
    // Offset: 0x48EEC4C
    static bool get_monoscopic();
    // static public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0x48EECDC
    static void set_monoscopic(bool value);
    // static public System.Boolean get_rotation()
    // Offset: 0x48EED80
    static bool get_rotation();
    // static public System.Void set_rotation(System.Boolean value)
    // Offset: 0x48EEE10
    static void set_rotation(bool value);
    // static public System.Boolean get_position()
    // Offset: 0x48EEEB4
    static bool get_position();
    // static public System.Void set_position(System.Boolean value)
    // Offset: 0x48EEF44
    static void set_position(bool value);
    // static public System.Boolean get_useIPDInPositionTracking()
    // Offset: 0x48EEFE8
    static bool get_useIPDInPositionTracking();
    // static public System.Void set_useIPDInPositionTracking(System.Boolean value)
    // Offset: 0x48EF0C0
    static void set_useIPDInPositionTracking(bool value);
    // static public System.Boolean get_positionSupported()
    // Offset: 0x48EF1B8
    static bool get_positionSupported();
    // static public System.Boolean get_positionTracked()
    // Offset: 0x48EF248
    static bool get_positionTracked();
    // static public System.Boolean get_powerSaving()
    // Offset: 0x48EF2DC
    static bool get_powerSaving();
    // static public System.Boolean get_hmdPresent()
    // Offset: 0x48EF36C
    static bool get_hmdPresent();
    // static public System.Boolean get_userPresent()
    // Offset: 0x48EF400
    static bool get_userPresent();
    // static public System.Boolean get_headphonesPresent()
    // Offset: 0x48EF490
    static bool get_headphonesPresent();
    // static public System.Int32 get_recommendedMSAALevel()
    // Offset: 0x48EF520
    static int get_recommendedMSAALevel();
    // static public OVRPlugin/SystemRegion get_systemRegion()
    // Offset: 0x48EF5F4
    static ::GlobalNamespace::OVRPlugin::SystemRegion get_systemRegion();
    // static public System.String get_audioOutId()
    // Offset: 0x48EF6C8
    static ::StringW get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0x48EF9C4
    static ::StringW get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0x48EFCB8
    static bool get_hasVrFocus();
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0x48EFD14
    static bool get_hasInputFocus();
    // static public System.Boolean get_shouldQuit()
    // Offset: 0x48EFDEC
    static bool get_shouldQuit();
    // static public System.Boolean get_shouldRecenter()
    // Offset: 0x48EFE48
    static bool get_shouldRecenter();
    // static public System.String get_productName()
    // Offset: 0x48EFEA4
    static ::StringW get_productName();
    // static public System.String get_latency()
    // Offset: 0x48EFEF4
    static ::StringW get_latency();
    // static public System.Single get_eyeDepth()
    // Offset: 0x48EFF9C
    static float get_eyeDepth();
    // static public System.Void set_eyeDepth(System.Single value)
    // Offset: 0x48F0028
    static void set_eyeDepth(float value);
    // static public System.Single get_eyeHeight()
    // Offset: 0x48F0088
    static float get_eyeHeight();
    // static public System.Void set_eyeHeight(System.Single value)
    // Offset: 0x48F00D8
    static void set_eyeHeight(float value);
    // static public System.Single get_batteryLevel()
    // Offset: 0x48F0138
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0x48F0188
    static float get_batteryTemperature();
    // static public OVRPlugin/ProcessorPerformanceLevel get_suggestedCpuPerfLevel()
    // Offset: 0x48F01D8
    static ::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel get_suggestedCpuPerfLevel();
    // static public System.Void set_suggestedCpuPerfLevel(OVRPlugin/ProcessorPerformanceLevel value)
    // Offset: 0x48F02A8
    static void set_suggestedCpuPerfLevel(::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel value);
    // static public OVRPlugin/ProcessorPerformanceLevel get_suggestedGpuPerfLevel()
    // Offset: 0x48F0368
    static ::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel get_suggestedGpuPerfLevel();
    // static public System.Void set_suggestedGpuPerfLevel(OVRPlugin/ProcessorPerformanceLevel value)
    // Offset: 0x48F0438
    static void set_suggestedGpuPerfLevel(::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel value);
    // static public System.Int32 get_cpuLevel()
    // Offset: 0x48F04F8
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0x48F0548
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0x48F05A0
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0x48F05F0
    static void set_gpuLevel(int value);
    // static public System.Int32 get_vsyncCount()
    // Offset: 0x48F0648
    static int get_vsyncCount();
    // static public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0x48F0698
    static void set_vsyncCount(int value);
    // static public System.Single get_systemVolume()
    // Offset: 0x48F06F0
    static float get_systemVolume();
    // static public System.Single get_ipd()
    // Offset: 0x48F0740
    static float get_ipd();
    // static public System.Void set_ipd(System.Single value)
    // Offset: 0x48F0790
    static void set_ipd(float value);
    // static public System.Boolean get_occlusionMesh()
    // Offset: 0x48F07F0
    static bool get_occlusionMesh();
    // static public System.Void set_occlusionMesh(System.Boolean value)
    // Offset: 0x48F0880
    static void set_occlusionMesh(bool value);
    // static public OVRPlugin/BatteryStatus get_batteryStatus()
    // Offset: 0x48F0924
    static ::GlobalNamespace::OVRPlugin::BatteryStatus get_batteryStatus();
    // static public OVRPlugin/Frustumf GetEyeFrustum(OVRPlugin/Eye eyeId)
    // Offset: 0x48F0974
    static ::GlobalNamespace::OVRPlugin::Frustumf GetEyeFrustum(::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Sizei GetEyeTextureSize(OVRPlugin/Eye eyeId)
    // Offset: 0x48F09CC
    static ::GlobalNamespace::OVRPlugin::Sizei GetEyeTextureSize(::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Posef GetTrackerPose(OVRPlugin/Tracker trackerId)
    // Offset: 0x48F0A24
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackerPose(::GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public OVRPlugin/Frustumf GetTrackerFrustum(OVRPlugin/Tracker trackerId)
    // Offset: 0x48F0CD0
    static ::GlobalNamespace::OVRPlugin::Frustumf GetTrackerFrustum(::GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public System.Boolean ShowUI(OVRPlugin/PlatformUI ui)
    // Offset: 0x48F0D28
    static bool ShowUI(::GlobalNamespace::OVRPlugin::PlatformUI ui);
    // static public System.Boolean EnqueueSubmitLayer(System.Boolean onTop, System.Boolean headLocked, System.Boolean noDepthBufferTesting, System.IntPtr leftTexture, System.IntPtr rightTexture, System.Int32 layerId, System.Int32 frameIndex, OVRPlugin/Posef pose, OVRPlugin/Vector3f scale, System.Int32 layerIndex, OVRPlugin/OverlayShape shape, System.Boolean overrideTextureRectMatrix, OVRPlugin/TextureRectMatrixf textureRectMatrix, System.Boolean overridePerLayerColorScaleAndOffset, UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean expensiveSuperSample, System.Boolean bicubic, System.Boolean efficientSuperSample, System.Boolean efficientSharpen, System.Boolean expensiveSharpen, System.Boolean hidden, System.Boolean secureContent, System.Boolean automaticFiltering)
    // Offset: 0x48F0D8C
    static bool EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, ::System::IntPtr leftTexture, ::System::IntPtr rightTexture, int layerId, int frameIndex, ::GlobalNamespace::OVRPlugin::Posef pose, ::GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex, ::GlobalNamespace::OVRPlugin::OverlayShape shape, bool overrideTextureRectMatrix, ::GlobalNamespace::OVRPlugin::TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, ::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool bicubic, bool efficientSuperSample, bool efficientSharpen, bool expensiveSharpen, bool hidden, bool secureContent, bool automaticFiltering);
    // static public OVRPlugin/LayerDesc CalculateLayerDesc(OVRPlugin/OverlayShape shape, OVRPlugin/LayerLayout layout, OVRPlugin/Sizei textureSize, System.Int32 mipLevels, System.Int32 sampleCount, OVRPlugin/EyeTextureFormat format, System.Int32 layerFlags)
    // Offset: 0x48F12D8
    static ::GlobalNamespace::OVRPlugin::LayerDesc CalculateLayerDesc(::GlobalNamespace::OVRPlugin::OverlayShape shape, ::GlobalNamespace::OVRPlugin::LayerLayout layout, ::GlobalNamespace::OVRPlugin::Sizei textureSize, int mipLevels, int sampleCount, ::GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags);
    // static public System.Boolean EnqueueSetupLayer(OVRPlugin/LayerDesc desc, System.Int32 compositionDepth, System.IntPtr layerID)
    // Offset: 0x48F145C
    static bool EnqueueSetupLayer(::GlobalNamespace::OVRPlugin::LayerDesc desc, int compositionDepth, ::System::IntPtr layerID);
    // static public System.Boolean EnqueueDestroyLayer(System.IntPtr layerID)
    // Offset: 0x48F1624
    static bool EnqueueDestroyLayer(::System::IntPtr layerID);
    // static public System.IntPtr GetLayerTexture(System.Int32 layerId, System.Int32 stage, OVRPlugin/Eye eyeId)
    // Offset: 0x48F1704
    static ::System::IntPtr GetLayerTexture(int layerId, int stage, ::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public System.Int32 GetLayerTextureStageCount(System.Int32 layerId)
    // Offset: 0x48F1810
    static int GetLayerTextureStageCount(int layerId);
    // static public System.IntPtr GetLayerAndroidSurfaceObject(System.Int32 layerId)
    // Offset: 0x48F1908
    static ::System::IntPtr GetLayerAndroidSurfaceObject(int layerId);
    // static public System.Boolean UpdateNodePhysicsPoses(System.Int32 frameIndex, System.Double predictionSeconds)
    // Offset: 0x48F19FC
    static bool UpdateNodePhysicsPoses(int frameIndex, double predictionSeconds);
    // static public OVRPlugin/Posef GetNodePose(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F0AA8
    static ::GlobalNamespace::OVRPlugin::Posef GetNodePose(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F1AD8
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeVelocity(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F1CE4
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularVelocity(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F1E34
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAcceleration(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F2040
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularAcceleration(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public System.Boolean GetNodePresent(OVRPlugin/Node nodeId)
    // Offset: 0x48F2190
    static bool GetNodePresent(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationTracked(OVRPlugin/Node nodeId)
    // Offset: 0x48F21F4
    static bool GetNodeOrientationTracked(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationValid(OVRPlugin/Node nodeId)
    // Offset: 0x48F2258
    static bool GetNodeOrientationValid(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionTracked(OVRPlugin/Node nodeId)
    // Offset: 0x48F2358
    static bool GetNodePositionTracked(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionValid(OVRPlugin/Node nodeId)
    // Offset: 0x48F23BC
    static bool GetNodePositionValid(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public OVRPlugin/PoseStatef GetNodePoseStateRaw(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x48F24BC
    static ::GlobalNamespace::OVRPlugin::PoseStatef GetNodePoseStateRaw(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/PoseStatef GetNodePoseStateAtTime(System.Double time, OVRPlugin/Node nodeId)
    // Offset: 0x48F26EC
    static ::GlobalNamespace::OVRPlugin::PoseStatef GetNodePoseStateAtTime(double time, ::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public OVRPlugin/PoseStatef GetNodePoseStateImmediate(OVRPlugin/Node nodeId)
    // Offset: 0x48F2824
    static ::GlobalNamespace::OVRPlugin::PoseStatef GetNodePoseStateImmediate(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean AreHandPosesGeneratedByControllerData(OVRPlugin/Step stepId, OVRPlugin/Node nodeId)
    // Offset: 0x48F294C
    static bool AreHandPosesGeneratedByControllerData(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean SetSimultaneousHandsAndControllersEnabled(System.Boolean enabled)
    // Offset: 0x48F2A3C
    static bool SetSimultaneousHandsAndControllersEnabled(bool enabled);
    // static public System.Boolean GetControllerIsInHand(OVRPlugin/Step stepId, OVRPlugin/Node nodeId)
    // Offset: 0x48F2B08
    static bool GetControllerIsInHand(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public OVRPlugin/Posef GetCurrentTrackingTransformPose()
    // Offset: 0x48F2BF4
    static ::GlobalNamespace::OVRPlugin::Posef GetCurrentTrackingTransformPose();
    // static public OVRPlugin/Posef GetTrackingTransformRawPose()
    // Offset: 0x48F2D14
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRawPose();
    // static public OVRPlugin/Posef GetTrackingTransformRelativePose(OVRPlugin/TrackingOrigin trackingOrigin)
    // Offset: 0x48F2E34
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRelativePose(::GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin);
    // static public OVRPlugin/ControllerState GetControllerState(System.UInt32 controllerMask)
    // Offset: 0x48F2F94
    static ::GlobalNamespace::OVRPlugin::ControllerState GetControllerState(uint controllerMask);
    // static public OVRPlugin/ControllerState2 GetControllerState2(System.UInt32 controllerMask)
    // Offset: 0x48F3018
    static ::GlobalNamespace::OVRPlugin::ControllerState2 GetControllerState2(uint controllerMask);
    // static public OVRPlugin/ControllerState4 GetControllerState4(System.UInt32 controllerMask)
    // Offset: 0x48F315C
    static ::GlobalNamespace::OVRPlugin::ControllerState4 GetControllerState4(uint controllerMask);
    // static public OVRPlugin/ControllerState5 GetControllerState5(System.UInt32 controllerMask)
    // Offset: 0x48F32B4
    static ::GlobalNamespace::OVRPlugin::ControllerState5 GetControllerState5(uint controllerMask);
    // static public OVRPlugin/ControllerState6 GetControllerState6(System.UInt32 controllerMask)
    // Offset: 0x48F3418
    static ::GlobalNamespace::OVRPlugin::ControllerState6 GetControllerState6(uint controllerMask);
    // static public OVRPlugin/InteractionProfile GetCurrentInteractionProfile(OVRPlugin/Hand hand)
    // Offset: 0x48F3580
    static ::GlobalNamespace::OVRPlugin::InteractionProfile GetCurrentInteractionProfile(::GlobalNamespace::OVRPlugin::Hand hand);
    // static public OVRPlugin/InteractionProfile GetCurrentDetachedInteractionProfile(OVRPlugin/Hand hand)
    // Offset: 0x48F3654
    static ::GlobalNamespace::OVRPlugin::InteractionProfile GetCurrentDetachedInteractionProfile(::GlobalNamespace::OVRPlugin::Hand hand);
    // static public System.Boolean SetControllerVibration(System.UInt32 controllerMask, System.Single frequency, System.Single amplitude)
    // Offset: 0x48F3728
    static bool SetControllerVibration(uint controllerMask, float frequency, float amplitude);
    // static public System.Boolean SetControllerLocalizedVibration(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsLocation hapticsLocationMask, System.Single frequency, System.Single amplitude)
    // Offset: 0x48F37A4
    static bool SetControllerLocalizedVibration(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsLocation hapticsLocationMask, float frequency, float amplitude);
    // static public System.Boolean SetControllerHapticsAmplitudeEnvelope(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsAmplitudeEnvelopeVibration hapticsVibration)
    // Offset: 0x48F3894
    static bool SetControllerHapticsAmplitudeEnvelope(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsAmplitudeEnvelopeVibration hapticsVibration);
    // static public System.Boolean SetControllerHapticsPcm(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsPcmVibration hapticsVibration)
    // Offset: 0x48F3974
    static bool SetControllerHapticsPcm(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsPcmVibration hapticsVibration);
    // static public System.Boolean GetControllerSampleRateHz(OVRPlugin/Controller controllerMask, out System.Single sampleRateHz)
    // Offset: 0x48F3A64
    static bool GetControllerSampleRateHz(::GlobalNamespace::OVRPlugin::Controller controllerMask, ByRef<float> sampleRateHz);
    // static public OVRPlugin/HapticsDesc GetControllerHapticsDesc(System.UInt32 controllerMask)
    // Offset: 0x48F3B40
    static ::GlobalNamespace::OVRPlugin::HapticsDesc GetControllerHapticsDesc(uint controllerMask);
    // static public OVRPlugin/HapticsState GetControllerHapticsState(System.UInt32 controllerMask)
    // Offset: 0x48F3C2C
    static ::GlobalNamespace::OVRPlugin::HapticsState GetControllerHapticsState(uint controllerMask);
    // static public System.Boolean SetControllerHaptics(System.UInt32 controllerMask, OVRPlugin/HapticsBuffer hapticsBuffer)
    // Offset: 0x48F3CF0
    static bool SetControllerHaptics(uint controllerMask, ::GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer);
    // static public System.Single GetEyeRecommendedResolutionScale()
    // Offset: 0x48F3DD0
    static float GetEyeRecommendedResolutionScale();
    // static public System.Single GetAppCpuStartToGpuEndTime()
    // Offset: 0x48F3E8C
    static float GetAppCpuStartToGpuEndTime();
    // static public System.Boolean GetBoundaryConfigured()
    // Offset: 0x48F3F48
    static bool GetBoundaryConfigured();
    // static public OVRPlugin/BoundaryTestResult TestBoundaryNode(OVRPlugin/Node nodeId, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x48F4008
    static ::GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryNode(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryTestResult TestBoundaryPoint(OVRPlugin/Vector3f point, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x48F40F4
    static ::GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryPoint(::GlobalNamespace::OVRPlugin::Vector3f point, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryGeometry GetBoundaryGeometry(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x48F4200
    static ::GlobalNamespace::OVRPlugin::BoundaryGeometry GetBoundaryGeometry(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryGeometry2(OVRPlugin/BoundaryType boundaryType, System.IntPtr points, ref System.Int32 pointsCount)
    // Offset: 0x48F42EC
    static bool GetBoundaryGeometry2(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType, ::System::IntPtr points, ByRef<int> pointsCount);
    // static public OVRPlugin/AppPerfStats GetAppPerfStats()
    // Offset: 0x48F43D0
    static ::GlobalNamespace::OVRPlugin::AppPerfStats GetAppPerfStats();
    // static public System.Boolean ResetAppPerfStats()
    // Offset: 0x48F4548
    static bool ResetAppPerfStats();
    // static public System.Single GetAppFramerate()
    // Offset: 0x48F46AC
    static float GetAppFramerate();
    // static public System.Boolean SetHandNodePoseStateLatency(System.Double latencyInSeconds)
    // Offset: 0x48F4768
    static bool SetHandNodePoseStateLatency(double latencyInSeconds);
    // static public System.Double GetHandNodePoseStateLatency()
    // Offset: 0x48F4838
    static double GetHandNodePoseStateLatency();
    // static public System.Boolean SetControllerDrivenHandPoses(System.Boolean controllerDrivenHandPoses)
    // Offset: 0x48F4904
    static bool SetControllerDrivenHandPoses(bool controllerDrivenHandPoses);
    // static public System.Boolean SetControllerDrivenHandPosesAreNatural(System.Boolean controllerDrivenHandPosesAreNatural)
    // Offset: 0x48F49D0
    static bool SetControllerDrivenHandPosesAreNatural(bool controllerDrivenHandPosesAreNatural);
    // static public System.Boolean IsControllerDrivenHandPosesEnabled()
    // Offset: 0x48F4A9C
    static bool IsControllerDrivenHandPosesEnabled();
    // static public System.Boolean AreControllerDrivenHandPosesNatural()
    // Offset: 0x48F4B6C
    static bool AreControllerDrivenHandPosesNatural();
    // static public OVRPlugin/EyeTextureFormat GetDesiredEyeTextureFormat()
    // Offset: 0x48F4C3C
    static ::GlobalNamespace::OVRPlugin::EyeTextureFormat GetDesiredEyeTextureFormat();
    // static public System.Boolean SetDesiredEyeTextureFormat(OVRPlugin/EyeTextureFormat value)
    // Offset: 0x48F4CFC
    static bool SetDesiredEyeTextureFormat(::GlobalNamespace::OVRPlugin::EyeTextureFormat value);
    // static public System.Boolean InitializeMixedReality()
    // Offset: 0x48F4DC4
    static bool InitializeMixedReality();
    // static public System.Boolean ShutdownMixedReality()
    // Offset: 0x48F4E98
    static bool ShutdownMixedReality();
    // static public System.Boolean IsMixedRealityInitialized()
    // Offset: 0x48F4F6C
    static bool IsMixedRealityInitialized();
    // static public System.Int32 GetExternalCameraCount()
    // Offset: 0x48F5040
    static int GetExternalCameraCount();
    // static public System.Boolean UpdateExternalCamera()
    // Offset: 0x48F5120
    static bool UpdateExternalCamera();
    // static public System.Boolean GetMixedRealityCameraInfo(System.Int32 cameraId, out OVRPlugin/CameraExtrinsics cameraExtrinsics, out OVRPlugin/CameraIntrinsics cameraIntrinsics)
    // Offset: 0x48F51F4
    static bool GetMixedRealityCameraInfo(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics);
    // static public System.Boolean OverrideExternalCameraFov(System.Int32 cameraId, System.Boolean useOverriddenFov, OVRPlugin/Fovf fov)
    // Offset: 0x48F5328
    static bool OverrideExternalCameraFov(int cameraId, bool useOverriddenFov, ::GlobalNamespace::OVRPlugin::Fovf fov);
    // static public System.Boolean GetUseOverriddenExternalCameraFov(System.Int32 cameraId)
    // Offset: 0x48F5414
    static bool GetUseOverriddenExternalCameraFov(int cameraId);
    // static public System.Boolean OverrideExternalCameraStaticPose(System.Int32 cameraId, System.Boolean useOverriddenPose, OVRPlugin/Posef poseInStageOrigin)
    // Offset: 0x48F54FC
    static bool OverrideExternalCameraStaticPose(int cameraId, bool useOverriddenPose, ::GlobalNamespace::OVRPlugin::Posef poseInStageOrigin);
    // static public System.Boolean GetUseOverriddenExternalCameraStaticPose(System.Int32 cameraId)
    // Offset: 0x48F55DC
    static bool GetUseOverriddenExternalCameraStaticPose(int cameraId);
    // static public System.Boolean ResetDefaultExternalCamera()
    // Offset: 0x48F56C4
    static bool ResetDefaultExternalCamera();
    // static public System.Boolean SetDefaultExternalCamera(System.String cameraName, ref OVRPlugin/CameraIntrinsics cameraIntrinsics, ref OVRPlugin/CameraExtrinsics cameraExtrinsics)
    // Offset: 0x48F5784
    static bool SetDefaultExternalCamera(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics);
    // static public System.Boolean SetExternalCameraProperties(System.String cameraName, ref OVRPlugin/CameraIntrinsics cameraIntrinsics, ref OVRPlugin/CameraExtrinsics cameraExtrinsics)
    // Offset: 0x48F5864
    static bool SetExternalCameraProperties(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics);
    // static public System.Boolean SetMultimodalHandsControllersSupported(System.Boolean value)
    // Offset: 0x48F5944
    static bool SetMultimodalHandsControllersSupported(bool value);
    // static public System.Boolean IsMultimodalHandsControllersSupported()
    // Offset: 0x48F5A24
    static bool IsMultimodalHandsControllersSupported();
    // static public System.Boolean IsInsightPassthroughSupported()
    // Offset: 0x48F5AF4
    static bool IsInsightPassthroughSupported();
    // static public System.Boolean InitializeInsightPassthrough()
    // Offset: 0x48F5C5C
    static bool InitializeInsightPassthrough();
    // static public System.Boolean ShutdownInsightPassthrough()
    // Offset: 0x48F5D1C
    static bool ShutdownInsightPassthrough();
    // static public System.Boolean IsInsightPassthroughInitialized()
    // Offset: 0x48F5DDC
    static bool IsInsightPassthroughInitialized();
    // static public OVRPlugin/Result GetInsightPassthroughInitializationState()
    // Offset: 0x48F5E9C
    static ::GlobalNamespace::OVRPlugin::Result GetInsightPassthroughInitializationState();
    // static public System.Boolean CreateInsightTriangleMesh(System.Int32 layerId, UnityEngine.Vector3[] vertices, System.Int32[] triangles, out System.UInt64 meshHandle)
    // Offset: 0x48E9CDC
    static bool CreateInsightTriangleMesh(int layerId, ::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<int> triangles, ByRef<uint64_t> meshHandle);
    // static public System.Boolean DestroyInsightTriangleMesh(System.UInt64 meshHandle)
    // Offset: 0x48E8428
    static bool DestroyInsightTriangleMesh(uint64_t meshHandle);
    // static public System.Boolean AddInsightPassthroughSurfaceGeometry(System.Int32 layerId, System.UInt64 meshHandle, UnityEngine.Matrix4x4 T_world_model, out System.UInt64 geometryInstanceHandle)
    // Offset: 0x48E9E84
    static bool AddInsightPassthroughSurfaceGeometry(int layerId, uint64_t meshHandle, ::UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle);
    // static public System.Boolean DestroyInsightPassthroughGeometryInstance(System.UInt64 geometryInstanceHandle)
    // Offset: 0x48E8360
    static bool DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle);
    // static public System.Boolean UpdateInsightPassthroughGeometryTransform(System.UInt64 geometryInstanceHandle, UnityEngine.Matrix4x4 transform)
    // Offset: 0x48EA6F8
    static bool UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, ::UnityEngine::Matrix4x4 transform);
    // static public System.Boolean SetInsightPassthroughStyle(System.Int32 layerId, OVRPlugin/InsightPassthroughStyle2 style)
    // Offset: 0x48EB0CC
    static bool SetInsightPassthroughStyle(int layerId, ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2 style);
    // static public System.Boolean SetInsightPassthroughStyle(System.Int32 layerId, OVRPlugin/InsightPassthroughStyle style)
    // Offset: 0x48F5F58
    static bool SetInsightPassthroughStyle(int layerId, ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle style);
    // static public System.Boolean CreatePassthroughColorLut(OVRPlugin/PassthroughColorLutChannels channels, System.UInt32 resolution, OVRPlugin/PassthroughColorLutData data, out System.UInt64 colorLut)
    // Offset: 0x48F6070
    static bool CreatePassthroughColorLut(::GlobalNamespace::OVRPlugin::PassthroughColorLutChannels channels, uint resolution, ::GlobalNamespace::OVRPlugin::PassthroughColorLutData data, ByRef<uint64_t> colorLut);
    // static public System.Boolean DestroyPassthroughColorLut(System.UInt64 colorLut)
    // Offset: 0x48F6190
    static bool DestroyPassthroughColorLut(uint64_t colorLut);
    // static public System.Boolean UpdatePassthroughColorLut(System.UInt64 colorLut, OVRPlugin/PassthroughColorLutData data)
    // Offset: 0x48F6278
    static bool UpdatePassthroughColorLut(uint64_t colorLut, ::GlobalNamespace::OVRPlugin::PassthroughColorLutData data);
    // static public System.Boolean SetInsightPassthroughKeyboardHandsIntensity(System.Int32 layerId, OVRPlugin/InsightPassthroughKeyboardHandsIntensity intensity)
    // Offset: 0x48F6378
    static bool SetInsightPassthroughKeyboardHandsIntensity(int layerId, ::GlobalNamespace::OVRPlugin::InsightPassthroughKeyboardHandsIntensity intensity);
    // static public OVRPlugin/PassthroughCapabilityFlags GetPassthroughCapabilityFlags()
    // Offset: 0x48F6458
    static ::GlobalNamespace::OVRPlugin::PassthroughCapabilityFlags GetPassthroughCapabilityFlags();
    // static public OVRPlugin/Result GetPassthroughCapabilities(ref OVRPlugin/PassthroughCapabilities outCapabilities)
    // Offset: 0x48F660C
    static ::GlobalNamespace::OVRPlugin::Result GetPassthroughCapabilities(ByRef<::GlobalNamespace::OVRPlugin::PassthroughCapabilities> outCapabilities);
    // static public OVRPlugin/Vector3f GetBoundaryDimensions(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x48F66D8
    static ::GlobalNamespace::OVRPlugin::Vector3f GetBoundaryDimensions(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryVisible()
    // Offset: 0x48F679C
    static bool GetBoundaryVisible();
    // static public System.Boolean SetBoundaryVisible(System.Boolean value)
    // Offset: 0x48F685C
    static bool SetBoundaryVisible(bool value);
    // static public OVRPlugin/SystemHeadset GetSystemHeadsetType()
    // Offset: 0x48F6940
    static ::GlobalNamespace::OVRPlugin::SystemHeadset GetSystemHeadsetType();
    // static public OVRPlugin/Controller GetActiveController()
    // Offset: 0x48F69FC
    static ::GlobalNamespace::OVRPlugin::Controller GetActiveController();
    // static public OVRPlugin/Controller GetConnectedControllers()
    // Offset: 0x48F6AB8
    static ::GlobalNamespace::OVRPlugin::Controller GetConnectedControllers();
    // static private OVRPlugin/Bool ToBool(System.Boolean b)
    // Offset: 0x48EEC44
    static ::GlobalNamespace::OVRPlugin::Bool ToBool(bool b);
    // static public OVRPlugin/TrackingOrigin GetTrackingOriginType()
    // Offset: 0x48F6B74
    static ::GlobalNamespace::OVRPlugin::TrackingOrigin GetTrackingOriginType();
    // static public System.Boolean SetTrackingOriginType(OVRPlugin/TrackingOrigin originType)
    // Offset: 0x48F6BC4
    static bool SetTrackingOriginType(::GlobalNamespace::OVRPlugin::TrackingOrigin originType);
    // static public OVRPlugin/Posef GetTrackingCalibratedOrigin()
    // Offset: 0x48F6C28
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingCalibratedOrigin();
    // static public System.Boolean SetTrackingCalibratedOrigin()
    // Offset: 0x48F6C9C
    static bool SetTrackingCalibratedOrigin();
    // static public System.Boolean RecenterTrackingOrigin(OVRPlugin/RecenterFlags flags)
    // Offset: 0x48F6CF8
    static bool RecenterTrackingOrigin(::GlobalNamespace::OVRPlugin::RecenterFlags flags);
    // static private System.Boolean get_foveatedRenderingSupported()
    // Offset: 0x48F6D5C
    static bool get_foveatedRenderingSupported();
    // static public System.Boolean get_eyeTrackedFoveatedRenderingSupported()
    // Offset: 0x48F6EA0
    static bool get_eyeTrackedFoveatedRenderingSupported();
    // static public System.Boolean get_eyeTrackedFoveatedRenderingEnabled()
    // Offset: 0x48F6F6C
    static bool get_eyeTrackedFoveatedRenderingEnabled();
    // static public System.Void set_eyeTrackedFoveatedRenderingEnabled(System.Boolean value)
    // Offset: 0x48F7058
    static void set_eyeTrackedFoveatedRenderingEnabled(bool value);
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0x48F6DD0
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRPlugin/FoveatedRenderingLevel get_foveatedRenderingLevel()
    // Offset: 0x48F7140
    static ::GlobalNamespace::OVRPlugin::FoveatedRenderingLevel get_foveatedRenderingLevel();
    // static public System.Void set_foveatedRenderingLevel(OVRPlugin/FoveatedRenderingLevel value)
    // Offset: 0x48F7224
    static void set_foveatedRenderingLevel(::GlobalNamespace::OVRPlugin::FoveatedRenderingLevel value);
    // static public OVRPlugin/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0x48F7308
    static ::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRPlugin/FixedFoveatedRenderingLevel value)
    // Offset: 0x48F7354
    static void set_fixedFoveatedRenderingLevel(::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_useDynamicFoveatedRendering()
    // Offset: 0x48F73A8
    static bool get_useDynamicFoveatedRendering();
    // static public System.Void set_useDynamicFoveatedRendering(System.Boolean value)
    // Offset: 0x48F7494
    static void set_useDynamicFoveatedRendering(bool value);
    // static public System.Boolean get_useDynamicFixedFoveatedRendering()
    // Offset: 0x48F757C
    static bool get_useDynamicFixedFoveatedRendering();
    // static public System.Void set_useDynamicFixedFoveatedRendering(System.Boolean value)
    // Offset: 0x48F75C8
    static void set_useDynamicFixedFoveatedRendering(bool value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0x48F761C
    static bool get_tiledMultiResSupported();
    // static public OVRPlugin/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0x48F7668
    static ::GlobalNamespace::OVRPlugin::TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRPlugin/TiledMultiResLevel value)
    // Offset: 0x48F76B4
    static void set_tiledMultiResLevel(::GlobalNamespace::OVRPlugin::TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0x48F7708
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0x48F77D8
    static float get_gpuUtilLevel();
    // static public System.Single[] get_systemDisplayFrequenciesAvailable()
    // Offset: 0x48F78C8
    static ::ArrayW<float> get_systemDisplayFrequenciesAvailable();
    // static public System.Single get_systemDisplayFrequency()
    // Offset: 0x48F7B74
    static float get_systemDisplayFrequency();
    // static public System.Void set_systemDisplayFrequency(System.Single value)
    // Offset: 0x48F7CC0
    static void set_systemDisplayFrequency(float value);
    // static public System.Boolean get_eyeFovPremultipliedAlphaModeEnabled()
    // Offset: 0x48F7D8C
    static bool get_eyeFovPremultipliedAlphaModeEnabled();
    // static public System.Void set_eyeFovPremultipliedAlphaModeEnabled(System.Boolean value)
    // Offset: 0x48F7E5C
    static void set_eyeFovPremultipliedAlphaModeEnabled(bool value);
    // static public System.Boolean GetNodeFrustum2(OVRPlugin/Node nodeId, out OVRPlugin/Frustumf2 frustum)
    // Offset: 0x48F7F3C
    static bool GetNodeFrustum2(::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Frustumf2> frustum);
    // static public System.Boolean get_AsymmetricFovEnabled()
    // Offset: 0x48F801C
    static bool get_AsymmetricFovEnabled();
    // static public System.Boolean get_EyeTextureArrayEnabled()
    // Offset: 0x48F80EC
    static bool get_EyeTextureArrayEnabled();
    // static public System.Boolean get_localDimmingSupported()
    // Offset: 0x48F81AC
    static bool get_localDimmingSupported();
    // static public System.Boolean get_localDimming()
    // Offset: 0x48F827C
    static bool get_localDimming();
    // static public System.Void set_localDimming(System.Boolean value)
    // Offset: 0x48F836C
    static void set_localDimming(bool value);
    // static public OVRPlugin/Handedness GetDominantHand()
    // Offset: 0x48F8454
    static ::GlobalNamespace::OVRPlugin::Handedness GetDominantHand();
    // static public System.Boolean SendEvent(System.String name, System.String param, System.String source)
    // Offset: 0x48F8520
    static bool SendEvent(::StringW name, ::StringW param, ::StringW source);
    // static public System.Boolean SetHeadPoseModifier(ref OVRPlugin/Quatf relativeRotation, ref OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0x48F86B4
    static bool SetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation);
    // static public System.Boolean GetHeadPoseModifier(out OVRPlugin/Quatf relativeRotation, out OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0x48F878C
    static bool GetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation);
    // static public System.Boolean IsPerfMetricsSupported(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x48F88D8
    static bool IsPerfMetricsSupported(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Single> GetPerfMetricsFloat(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x48F89B8
    static ::System::Nullable_1<float> GetPerfMetricsFloat(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Int32> GetPerfMetricsInt(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x48F8ABC
    static ::System::Nullable_1<int> GetPerfMetricsInt(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Double GetTimeInSeconds()
    // Offset: 0x48F8BC0
    static double GetTimeInSeconds();
    // static public System.Boolean SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0x48F8C8C
    static bool SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Boolean AddCustomMetadata(System.String name, System.String param)
    // Offset: 0x48F8DF0
    static bool AddCustomMetadata(::StringW name, ::StringW param);
    // static public System.Boolean SetDeveloperMode(OVRPlugin/Bool active)
    // Offset: 0x48F8EC8
    static bool SetDeveloperMode(::GlobalNamespace::OVRPlugin::Bool active);
    // static public System.Single GetAdaptiveGPUPerformanceScale()
    // Offset: 0x48F8F90
    static float GetAdaptiveGPUPerformanceScale();
    // static public System.Boolean GetHandTrackingEnabled()
    // Offset: 0x48F9060
    static bool GetHandTrackingEnabled();
    // static public System.Boolean GetHandState(OVRPlugin/Step stepId, OVRPlugin/Hand hand, ref OVRPlugin/HandState handState)
    // Offset: 0x48F9130
    static bool GetHandState(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Hand hand, ByRef<::GlobalNamespace::OVRPlugin::HandState> handState);
    // static public System.Boolean IsValidBone(OVRPlugin/BoneId bone, OVRPlugin/SkeletonType skeletonType)
    // Offset: 0x48F9804
    static bool IsValidBone(::GlobalNamespace::OVRPlugin::BoneId bone, ::GlobalNamespace::OVRPlugin::SkeletonType skeletonType);
    // static public System.Boolean GetSkeleton(OVRPlugin/SkeletonType skeletonType, out OVRPlugin/Skeleton skeleton)
    // Offset: 0x48F982C
    static bool GetSkeleton(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton> skeleton);
    // static public System.Boolean GetSkeleton2(OVRPlugin/SkeletonType skeletonType, ref OVRPlugin/Skeleton2 skeleton)
    // Offset: 0x48F990C
    static bool GetSkeleton2(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton2> skeleton);
    // static public System.Boolean get_bodyTrackingSupported()
    // Offset: 0x48ECDF0
    static bool get_bodyTrackingSupported();
    // static public System.Boolean get_bodyTrackingEnabled()
    // Offset: 0x48FA230
    static bool get_bodyTrackingEnabled();
    // static public System.Boolean GetBodyState(OVRPlugin/Step stepId, ref OVRPlugin/BodyState bodyState)
    // Offset: 0x48FA300
    static bool GetBodyState(::GlobalNamespace::OVRPlugin::Step stepId, ByRef<::GlobalNamespace::OVRPlugin::BodyState> bodyState);
    // static public System.Boolean GetMesh(OVRPlugin/MeshType meshType, out OVRPlugin/Mesh mesh)
    // Offset: 0x48FC52C
    static bool GetMesh(::GlobalNamespace::OVRPlugin::MeshType meshType, ByRef<::GlobalNamespace::OVRPlugin::Mesh*> mesh);
    // static public System.Boolean StartKeyboardTracking(System.UInt64 trackedKeyboardId)
    // Offset: 0x48FC6F8
    static bool StartKeyboardTracking(uint64_t trackedKeyboardId);
    // static public System.Boolean StopKeyboardTracking()
    // Offset: 0x48FC7C0
    static bool StopKeyboardTracking();
    // static public System.Boolean GetKeyboardState(OVRPlugin/Step stepId, out OVRPlugin/KeyboardState keyboardState)
    // Offset: 0x48FC880
    static bool GetKeyboardState(::GlobalNamespace::OVRPlugin::Step stepId, ByRef<::GlobalNamespace::OVRPlugin::KeyboardState> keyboardState);
    // static public System.Boolean GetSystemKeyboardDescription(OVRPlugin/TrackedKeyboardQueryFlags keyboardQueryFlags, out OVRPlugin/KeyboardDescription keyboardDescription)
    // Offset: 0x48FC970
    static bool GetSystemKeyboardDescription(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<::GlobalNamespace::OVRPlugin::KeyboardDescription> keyboardDescription);
    // static public OVRPlugin/Result CreateVirtualKeyboard(OVRPlugin/VirtualKeyboardCreateInfo createInfo)
    // Offset: 0x48FCA54
    static ::GlobalNamespace::OVRPlugin::Result CreateVirtualKeyboard(::GlobalNamespace::OVRPlugin::VirtualKeyboardCreateInfo createInfo);
    // static public OVRPlugin/Result DestroyVirtualKeyboard()
    // Offset: 0x48FCB10
    static ::GlobalNamespace::OVRPlugin::Result DestroyVirtualKeyboard();
    // static public OVRPlugin/Result SendVirtualKeyboardInput(OVRPlugin/VirtualKeyboardInputInfo inputInfo, ref OVRPlugin/Posef interactorRootPose)
    // Offset: 0x48FCBCC
    static ::GlobalNamespace::OVRPlugin::Result SendVirtualKeyboardInput(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputInfo inputInfo, ByRef<::GlobalNamespace::OVRPlugin::Posef> interactorRootPose);
    // static public OVRPlugin/Result ChangeVirtualKeyboardTextContext(System.String textContext)
    // Offset: 0x48FCCC4
    static ::GlobalNamespace::OVRPlugin::Result ChangeVirtualKeyboardTextContext(::StringW textContext);
    // static public OVRPlugin/Result CreateVirtualKeyboardSpace(OVRPlugin/VirtualKeyboardSpaceCreateInfo createInfo, out System.UInt64 keyboardSpace)
    // Offset: 0x48FCD88
    static ::GlobalNamespace::OVRPlugin::Result CreateVirtualKeyboardSpace(::GlobalNamespace::OVRPlugin::VirtualKeyboardSpaceCreateInfo createInfo, ByRef<uint64_t> keyboardSpace);
    // static public OVRPlugin/Result SuggestVirtualKeyboardLocation(OVRPlugin/VirtualKeyboardLocationInfo locationInfo)
    // Offset: 0x48FCE74
    static ::GlobalNamespace::OVRPlugin::Result SuggestVirtualKeyboardLocation(::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationInfo locationInfo);
    // static public OVRPlugin/Result GetVirtualKeyboardScale(out System.Single scale)
    // Offset: 0x48FCF5C
    static ::GlobalNamespace::OVRPlugin::Result GetVirtualKeyboardScale(ByRef<float> scale);
    // static public OVRPlugin/Result GetVirtualKeyboardModelAnimationStates(out OVRPlugin/VirtualKeyboardModelAnimationStates animationStates)
    // Offset: 0x48FD024
    static ::GlobalNamespace::OVRPlugin::Result GetVirtualKeyboardModelAnimationStates(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardModelAnimationStates> animationStates);
    // static public OVRPlugin/Result GetVirtualKeyboardDirtyTextures(out OVRPlugin/VirtualKeyboardTextureIds textureIds)
    // Offset: 0x48FD4BC
    static ::GlobalNamespace::OVRPlugin::Result GetVirtualKeyboardDirtyTextures(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureIds> textureIds);
    // static public OVRPlugin/Result GetVirtualKeyboardTextureData(System.UInt64 textureId, ref OVRPlugin/VirtualKeyboardTextureData textureData)
    // Offset: 0x48FD7B0
    static ::GlobalNamespace::OVRPlugin::Result GetVirtualKeyboardTextureData(uint64_t textureId, ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureData> textureData);
    // static public OVRPlugin/Result SetVirtualKeyboardModelVisibility(ref OVRPlugin/VirtualKeyboardModelVisibility visibility)
    // Offset: 0x48FD888
    static ::GlobalNamespace::OVRPlugin::Result SetVirtualKeyboardModelVisibility(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardModelVisibility> visibility);
    // static public System.Boolean get_faceTrackingEnabled()
    // Offset: 0x48FD94C
    static bool get_faceTrackingEnabled();
    // static public System.Boolean get_faceTrackingSupported()
    // Offset: 0x48ECD20
    static bool get_faceTrackingSupported();
    // static private System.Boolean GetFaceStateInternal(OVRPlugin/Step stepId, System.Int32 frameIndex, ref OVRPlugin/FaceState faceState)
    // Offset: 0x48FDA1C
    static bool GetFaceStateInternal(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::FaceState> faceState);
    // static public System.Boolean GetFaceState(OVRPlugin/Step stepId, System.Int32 frameIndex, ref OVRPlugin/FaceState faceState)
    // Offset: 0x48FDFB8
    static bool GetFaceState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::FaceState> faceState);
    // static public System.Boolean get_eyeTrackingEnabled()
    // Offset: 0x48FE108
    static bool get_eyeTrackingEnabled();
    // static public System.Boolean get_eyeTrackingSupported()
    // Offset: 0x48ECEC0
    static bool get_eyeTrackingSupported();
    // static public System.Boolean GetEyeGazesState(OVRPlugin/Step stepId, System.Int32 frameIndex, ref OVRPlugin/EyeGazesState eyeGazesState)
    // Offset: 0x48FE1D8
    static bool GetEyeGazesState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::EyeGazesState> eyeGazesState);
    // static public System.Boolean StartEyeTracking()
    // Offset: 0x48FE460
    static bool StartEyeTracking();
    // static public System.Boolean StopEyeTracking()
    // Offset: 0x48FE520
    static bool StopEyeTracking();
    // static public System.Boolean StartFaceTracking()
    // Offset: 0x48FE5E0
    static bool StartFaceTracking();
    // static public System.Boolean StopFaceTracking()
    // Offset: 0x48FE6A0
    static bool StopFaceTracking();
    // static public System.Boolean StartBodyTracking()
    // Offset: 0x48FE760
    static bool StartBodyTracking();
    // static public System.Boolean StopBodyTracking()
    // Offset: 0x48FE820
    static bool StopBodyTracking();
    // static public System.Int32 GetLocalTrackingSpaceRecenterCount()
    // Offset: 0x48FE8E0
    static int GetLocalTrackingSpaceRecenterCount();
    // static public System.Boolean GetSystemHmd3DofModeEnabled()
    // Offset: 0x48FE9AC
    static bool GetSystemHmd3DofModeEnabled();
    // static public System.Boolean SetClientColorDesc(OVRPlugin/ColorSpace colorSpace)
    // Offset: 0x48FEA7C
    static bool SetClientColorDesc(::GlobalNamespace::OVRPlugin::ColorSpace colorSpace);
    // static public OVRPlugin/ColorSpace GetHmdColorDesc()
    // Offset: 0x48FEB90
    static ::GlobalNamespace::OVRPlugin::ColorSpace GetHmdColorDesc();
    // static public System.Boolean PollEvent(ref OVRPlugin/EventDataBuffer eventDataBuffer)
    // Offset: 0x48FECC8
    static bool PollEvent(ByRef<::GlobalNamespace::OVRPlugin::EventDataBuffer> eventDataBuffer);
    // static public System.UInt64 GetNativeOpenXRInstance()
    // Offset: 0x48FEEC8
    static uint64_t GetNativeOpenXRInstance();
    // static public System.UInt64 GetNativeOpenXRSession()
    // Offset: 0x48FEFA4
    static uint64_t GetNativeOpenXRSession();
    // static public System.Boolean SetKeyboardOverlayUV(OVRPlugin/Vector2f uv)
    // Offset: 0x48FF080
    static bool SetKeyboardOverlayUV(::GlobalNamespace::OVRPlugin::Vector2f uv);
    // static public System.Boolean CreateSpatialAnchor(OVRPlugin/SpatialAnchorCreateInfo createInfo, out System.UInt64 requestId)
    // Offset: 0x48FF158
    static bool CreateSpatialAnchor(::GlobalNamespace::OVRPlugin::SpatialAnchorCreateInfo createInfo, ByRef<uint64_t> requestId);
    // static public System.Boolean SetSpaceComponentStatus(System.UInt64 space, OVRPlugin/SpaceComponentType componentType, System.Boolean enable, System.Double timeout, out System.UInt64 requestId)
    // Offset: 0x48FF234
    static bool SetSpaceComponentStatus(uint64_t space, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType, bool enable, double timeout, ByRef<uint64_t> requestId);
    // static public System.Boolean GetSpaceComponentStatus(System.UInt64 space, OVRPlugin/SpaceComponentType componentType, out System.Boolean enabled, out System.Boolean changePending)
    // Offset: 0x48FF418
    static bool GetSpaceComponentStatus(uint64_t space, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType, ByRef<bool> enabled, ByRef<bool> changePending);
    // static OVRPlugin/Result GetSpaceComponentStatusInternal(System.UInt64 space, OVRPlugin/SpaceComponentType componentType, out System.Boolean enabled, out System.Boolean changePending)
    // Offset: 0x48FF4A0
    static ::GlobalNamespace::OVRPlugin::Result GetSpaceComponentStatusInternal(uint64_t space, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType, ByRef<bool> enabled, ByRef<bool> changePending);
    // static public System.Boolean EnumerateSpaceSupportedComponents(System.UInt64 space, out System.UInt32 numSupportedComponents, OVRPlugin/SpaceComponentType[] supportedComponents)
    // Offset: 0x48FF5B4
    static bool EnumerateSpaceSupportedComponents(uint64_t space, ByRef<uint> numSupportedComponents, ::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType> supportedComponents);
    // static public System.Boolean SaveSpace(System.UInt64 space, OVRPlugin/SpaceStorageLocation location, OVRPlugin/SpaceStoragePersistenceMode mode, out System.UInt64 requestId)
    // Offset: 0x48FF6A4
    static bool SaveSpace(uint64_t space, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation location, ::GlobalNamespace::OVRPlugin::SpaceStoragePersistenceMode mode, ByRef<uint64_t> requestId);
    // static public System.Boolean EraseSpace(System.UInt64 space, OVRPlugin/SpaceStorageLocation location, out System.UInt64 requestId)
    // Offset: 0x48FF798
    static bool EraseSpace(uint64_t space, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation location, ByRef<uint64_t> requestId);
    // static public System.Boolean GetSpaceUuid(System.UInt64 space, out System.Guid uuid)
    // Offset: 0x48FF92C
    static bool GetSpaceUuid(uint64_t space, ByRef<::System::Guid> uuid);
    // static public System.Boolean QuerySpaces(OVRPlugin/SpaceQueryInfo queryInfo, out System.UInt64 requestId)
    // Offset: 0x48FFA08
    static bool QuerySpaces(::GlobalNamespace::OVRPlugin::SpaceQueryInfo queryInfo, ByRef<uint64_t> requestId);
    // static public System.Boolean RetrieveSpaceQueryResults(System.UInt64 requestId, out Unity.Collections.NativeArray`1<OVRPlugin/SpaceQueryResult> results, Unity.Collections.Allocator allocator)
    // Offset: 0x48FFC30
    static bool RetrieveSpaceQueryResults(uint64_t requestId, ByRef<::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::SpaceQueryResult>> results, ::Unity::Collections::Allocator allocator);
    // static public System.Boolean RetrieveSpaceQueryResults(System.UInt64 requestId, out OVRPlugin/SpaceQueryResult[] results)
    // Offset: 0x48FFDE0
    static bool RetrieveSpaceQueryResults(uint64_t requestId, ByRef<::ArrayW<::GlobalNamespace::OVRPlugin::SpaceQueryResult>> results);
    // static public OVRPlugin/Result SaveSpaceList(Unity.Collections.NativeArray`1<System.UInt64> spaces, OVRPlugin/SpaceStorageLocation location, out System.UInt64 requestId)
    // Offset: 0x4900194
    static ::GlobalNamespace::OVRPlugin::Result SaveSpaceList(::Unity::Collections::NativeArray_1<uint64_t> spaces, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation location, ByRef<uint64_t> requestId);
    // static public System.Boolean GetSpaceUserId(System.UInt64 spaceUserHandle, out System.UInt64 spaceUserId)
    // Offset: 0x49002B8
    static bool GetSpaceUserId(uint64_t spaceUserHandle, ByRef<uint64_t> spaceUserId);
    // static public System.Boolean CreateSpaceUser(System.UInt64 spaceUserId, out System.UInt64 spaceUserHandle)
    // Offset: 0x4900394
    static bool CreateSpaceUser(uint64_t spaceUserId, ByRef<uint64_t> spaceUserHandle);
    // static public System.Boolean DestroySpaceUser(System.UInt64 spaceUserHandle)
    // Offset: 0x4900470
    static bool DestroySpaceUser(uint64_t spaceUserHandle);
    // static public OVRPlugin/Result ShareSpaces(Unity.Collections.NativeArray`1<System.UInt64> spaces, Unity.Collections.NativeArray`1<System.UInt64> userHandles, out System.UInt64 requestId)
    // Offset: 0x4900538
    static ::GlobalNamespace::OVRPlugin::Result ShareSpaces(::Unity::Collections::NativeArray_1<uint64_t> spaces, ::Unity::Collections::NativeArray_1<uint64_t> userHandles, ByRef<uint64_t> requestId);
    // static public System.Boolean TryLocateSpace(System.UInt64 space, OVRPlugin/TrackingOrigin baseOrigin, out OVRPlugin/Posef pose)
    // Offset: 0x4900678
    static bool TryLocateSpace(uint64_t space, ::GlobalNamespace::OVRPlugin::TrackingOrigin baseOrigin, ByRef<::GlobalNamespace::OVRPlugin::Posef> pose);
    // static public OVRPlugin/Posef LocateSpace(System.UInt64 space, OVRPlugin/TrackingOrigin baseOrigin)
    // Offset: 0x4900858
    static ::GlobalNamespace::OVRPlugin::Posef LocateSpace(uint64_t space, ::GlobalNamespace::OVRPlugin::TrackingOrigin baseOrigin);
    // static public System.Boolean TryLocateSpace(System.UInt64 space, OVRPlugin/TrackingOrigin baseOrigin, out OVRPlugin/Posef pose, out OVRPlugin/SpaceLocationFlags locationFlags)
    // Offset: 0x4900920
    static bool TryLocateSpace(uint64_t space, ::GlobalNamespace::OVRPlugin::TrackingOrigin baseOrigin, ByRef<::GlobalNamespace::OVRPlugin::Posef> pose, ByRef<::GlobalNamespace::OVRPlugin::SpaceLocationFlags> locationFlags);
    // static public System.Boolean DestroySpace(System.UInt64 space)
    // Offset: 0x4900A88
    static bool DestroySpace(uint64_t space);
    // static public System.Boolean GetSpaceContainer(System.UInt64 space, out System.Guid[] containerUuids)
    // Offset: 0x4900B50
    static bool GetSpaceContainer(uint64_t space, ByRef<::ArrayW<::System::Guid>> containerUuids);
    // static public System.Boolean GetSpaceBoundingBox2D(System.UInt64 space, out OVRPlugin/Rectf rect)
    // Offset: 0x4900DF0
    static bool GetSpaceBoundingBox2D(uint64_t space, ByRef<::GlobalNamespace::OVRPlugin::Rectf> rect);
    // static public System.Boolean GetSpaceBoundingBox3D(System.UInt64 space, out OVRPlugin/Boundsf bounds)
    // Offset: 0x4900ECC
    static bool GetSpaceBoundingBox3D(uint64_t space, ByRef<::GlobalNamespace::OVRPlugin::Boundsf> bounds);
    // static public System.Boolean GetSpaceSemanticLabels(System.UInt64 space, out System.String labels)
    // Offset: 0x4900FAC
    static bool GetSpaceSemanticLabels(uint64_t space, ByRef<::StringW> labels);
    // static public System.Boolean GetSpaceRoomLayout(System.UInt64 space, out OVRPlugin/RoomLayout roomLayout)
    // Offset: 0x4901154
    static bool GetSpaceRoomLayout(uint64_t space, ByRef<::GlobalNamespace::OVRPlugin::RoomLayout> roomLayout);
    // static public System.Boolean GetSpaceBoundary2DCount(System.UInt64 space, out System.Int32 count)
    // Offset: 0x49013B4
    static bool GetSpaceBoundary2DCount(uint64_t space, ByRef<int> count);
    // static public System.Boolean GetSpaceBoundary2D(System.UInt64 space, Unity.Collections.NativeArray`1<UnityEngine.Vector2> boundary)
    // Offset: 0x49014A0
    static bool GetSpaceBoundary2D(uint64_t space, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> boundary);
    // static public System.Boolean GetSpaceBoundary2D(System.UInt64 space, Unity.Collections.NativeArray`1<UnityEngine.Vector2> boundary, out System.Int32 count)
    // Offset: 0x4901524
    static bool GetSpaceBoundary2D(uint64_t space, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> boundary, ByRef<int> count);
    // static public Unity.Collections.NativeArray`1<UnityEngine.Vector2> GetSpaceBoundary2D(System.UInt64 space, Unity.Collections.Allocator allocator)
    // Offset: 0x490164C
    static ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> GetSpaceBoundary2D(uint64_t space, ::Unity::Collections::Allocator allocator);
    // static public System.Boolean GetSpaceBoundary2D(System.UInt64 space, out UnityEngine.Vector2[] boundary)
    // Offset: 0x49017EC
    static bool GetSpaceBoundary2D(uint64_t space, ByRef<::ArrayW<::UnityEngine::Vector2>> boundary);
    // static public System.Boolean RequestSceneCapture(System.String requestString, out System.UInt64 requestId)
    // Offset: 0x4901B28
    static bool RequestSceneCapture(::StringW requestString, ByRef<uint64_t> requestId);
    // static public System.Boolean GetSpaceTriangleMeshCounts(System.UInt64 space, out System.Int32 vertexCount, out System.Int32 triangleCount)
    // Offset: 0x4901C64
    static bool GetSpaceTriangleMeshCounts(uint64_t space, ByRef<int> vertexCount, ByRef<int> triangleCount);
    // static public System.Boolean GetSpaceTriangleMesh(System.UInt64 space, Unity.Collections.NativeArray`1<UnityEngine.Vector3> vertices, Unity.Collections.NativeArray`1<System.Int32> triangles)
    // Offset: 0x4901E24
    static bool GetSpaceTriangleMesh(uint64_t space, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> vertices, ::Unity::Collections::NativeArray_1<int> triangles);
    // static public System.Boolean GetLayerRecommendedResolution(System.Int32 layerId, out OVRPlugin/Sizei recommendedSize)
    // Offset: 0x4902024
    static bool GetLayerRecommendedResolution(int layerId, ByRef<::GlobalNamespace::OVRPlugin::Sizei> recommendedSize);
    // static public System.Boolean GetEyeLayerRecommendedResolution(out OVRPlugin/Sizei recommendedSize)
    // Offset: 0x4902100
    static bool GetEyeLayerRecommendedResolution(ByRef<::GlobalNamespace::OVRPlugin::Sizei> recommendedSize);
    // static public System.String[] GetRenderModelPaths()
    // Offset: 0x49021CC
    static ::ArrayW<::StringW> GetRenderModelPaths();
    // static public System.Boolean GetRenderModelProperties(System.String modelPath, ref OVRPlugin/RenderModelProperties modelProperties)
    // Offset: 0x49023F0
    static bool GetRenderModelProperties(::StringW modelPath, ByRef<::GlobalNamespace::OVRPlugin::RenderModelProperties> modelProperties);
    // static public System.Byte[] LoadRenderModel(System.UInt64 modelKey)
    // Offset: 0x49025A4
    static ::ArrayW<uint8_t> LoadRenderModel(uint64_t modelKey);
    // static public System.Void OnEditorShutdown()
    // Offset: 0x4902780
    static void OnEditorShutdown();
    // static OVRPlugin/Result GetPassthroughPreferences(out OVRPlugin/PassthroughPreferences preferences)
    // Offset: 0x4902838
    static ::GlobalNamespace::OVRPlugin::Result GetPassthroughPreferences(ByRef<::GlobalNamespace::OVRPlugin::PassthroughPreferences> preferences);
    // static public System.Boolean SetEyeBufferSharpenType(OVRPlugin/LayerSharpenType sharpenType)
    // Offset: 0x4902900
    static bool SetEyeBufferSharpenType(::GlobalNamespace::OVRPlugin::LayerSharpenType sharpenType);
    // static private System.Void .cctor()
    // Offset: 0x49029C8
    static void _cctor();
  }; // OVRPlugin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::SpaceQueryResult, "", "OVRPlugin/SpaceQueryResult");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::SpaceComponentType, "", "OVRPlugin/SpaceComponentType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::EyeGazesStateInternal, "", "OVRPlugin/EyeGazesStateInternal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::EyeGazeState, "", "OVRPlugin/EyeGazeState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FaceStateInternal, "", "OVRPlugin/FaceStateInternal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::FaceExpressionStatusInternal, "", "OVRPlugin/FaceExpressionStatusInternal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Skeleton2Internal, "", "OVRPlugin/Skeleton2Internal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Skeleton, "", "OVRPlugin/Skeleton");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::SkeletonType, "", "OVRPlugin/SkeletonType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Bone, "", "OVRPlugin/Bone");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BoneCapsule, "", "OVRPlugin/BoneCapsule");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandStateInternal, "", "OVRPlugin/HandStateInternal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandFingerPinch, "", "OVRPlugin/HandFingerPinch");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BoneId, "", "OVRPlugin/BoneId");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandStatus, "", "OVRPlugin/HandStatus");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::TrackingConfidence, "", "OVRPlugin/TrackingConfidence");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Posef, "", "OVRPlugin/Posef");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Quatf, "", "OVRPlugin/Quatf");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Vector3f, "", "OVRPlugin/Vector3f");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::XrApi, "", "OVRPlugin/XrApi");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Bool, "", "OVRPlugin/Bool");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRPlugin::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_nativeSDKVersion
// Il2CppName: get_nativeSDKVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRPlugin::get_nativeSDKVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_nativeSDKVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsSuccess
// Il2CppName: IsSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Result)>(&GlobalNamespace::OVRPlugin::IsSuccess)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Result")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetLogCallback2
// Il2CppName: SetLogCallback2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::LogCallback2DelegateType*)>(&GlobalNamespace::OVRPlugin::SetLogCallback2)> {
  static const MethodInfo* get() {
    static auto* logCallback = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LogCallback2DelegateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetLogCallback2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsPassthroughShape
// Il2CppName: IsPassthroughShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::OverlayShape)>(&GlobalNamespace::OVRPlugin::IsPassthroughShape)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/OverlayShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsPassthroughShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsPositionValid
// Il2CppName: IsPositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsPositionValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceLocationFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsPositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsOrientationValid
// Il2CppName: IsOrientationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsOrientationValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceLocationFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsOrientationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsPositionTracked
// Il2CppName: IsPositionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsPositionTracked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceLocationFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsPositionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsOrientationTracked
// Il2CppName: IsOrientationTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsOrientationTracked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceLocationFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsOrientationTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GuidToUuidString
// Il2CppName: GuidToUuidString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Guid)>(&GlobalNamespace::OVRPlugin::GuidToUuidString)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GuidToUuidString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_initialized
// Il2CppName: get_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_nativeXrApi
// Il2CppName: get_nativeXrApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::XrApi (*)()>(&GlobalNamespace::OVRPlugin::get_nativeXrApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_nativeXrApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_chromatic
// Il2CppName: get_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_chromatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_chromatic
// Il2CppName: set_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_chromatic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_monoscopic
// Il2CppName: get_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_monoscopic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_monoscopic
// Il2CppName: set_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_monoscopic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking
// Il2CppName: get_useIPDInPositionTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_useIPDInPositionTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking
// Il2CppName: set_useIPDInPositionTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_useIPDInPositionTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_positionSupported
// Il2CppName: get_positionSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_positionSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_positionTracked
// Il2CppName: get_positionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionTracked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_positionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_powerSaving
// Il2CppName: get_powerSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_powerSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_powerSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hmdPresent
// Il2CppName: get_hmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hmdPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_userPresent
// Il2CppName: get_userPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_userPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_userPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_headphonesPresent
// Il2CppName: get_headphonesPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_headphonesPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_headphonesPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_recommendedMSAALevel
// Il2CppName: get_recommendedMSAALevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_recommendedMSAALevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_recommendedMSAALevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemRegion
// Il2CppName: get_systemRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SystemRegion (*)()>(&GlobalNamespace::OVRPlugin::get_systemRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_audioOutId
// Il2CppName: get_audioOutId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioOutId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_audioOutId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_audioInId
// Il2CppName: get_audioInId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioInId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_audioInId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hasVrFocus
// Il2CppName: get_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasVrFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasInputFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_shouldQuit
// Il2CppName: get_shouldQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_shouldQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_shouldRecenter
// Il2CppName: get_shouldRecenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldRecenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_shouldRecenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_productName
// Il2CppName: get_productName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_productName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_productName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_latency
// Il2CppName: get_latency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_latency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_latency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeDepth
// Il2CppName: get_eyeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_eyeDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeDepth
// Il2CppName: set_eyeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_eyeDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeHeight
// Il2CppName: get_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_eyeHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeHeight
// Il2CppName: set_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_eyeHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryLevel
// Il2CppName: get_batteryLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_batteryLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryTemperature
// Il2CppName: get_batteryTemperature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_batteryTemperature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryTemperature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_suggestedCpuPerfLevel
// Il2CppName: get_suggestedCpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRPlugin::get_suggestedCpuPerfLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_suggestedCpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_suggestedCpuPerfLevel
// Il2CppName: set_suggestedCpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel)>(&GlobalNamespace::OVRPlugin::set_suggestedCpuPerfLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/ProcessorPerformanceLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_suggestedCpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_suggestedGpuPerfLevel
// Il2CppName: get_suggestedGpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRPlugin::get_suggestedGpuPerfLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_suggestedGpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_suggestedGpuPerfLevel
// Il2CppName: set_suggestedGpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::ProcessorPerformanceLevel)>(&GlobalNamespace::OVRPlugin::set_suggestedGpuPerfLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/ProcessorPerformanceLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_suggestedGpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_cpuLevel
// Il2CppName: get_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_cpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_cpuLevel
// Il2CppName: set_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_cpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuLevel
// Il2CppName: get_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_gpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_gpuLevel
// Il2CppName: set_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_gpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_vsyncCount
// Il2CppName: get_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_vsyncCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_vsyncCount
// Il2CppName: set_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_vsyncCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemVolume
// Il2CppName: get_systemVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_systemVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_ipd
// Il2CppName: get_ipd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_ipd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_ipd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_ipd
// Il2CppName: set_ipd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_ipd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_ipd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_occlusionMesh
// Il2CppName: get_occlusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_occlusionMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_occlusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_occlusionMesh
// Il2CppName: set_occlusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_occlusionMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_occlusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryStatus
// Il2CppName: get_batteryStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BatteryStatus (*)()>(&GlobalNamespace::OVRPlugin::get_batteryStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeFrustum
// Il2CppName: GetEyeFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Frustumf (*)(::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetEyeFrustum)> {
  static const MethodInfo* get() {
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeTextureSize
// Il2CppName: GetEyeTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Sizei (*)(::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetEyeTextureSize)> {
  static const MethodInfo* get() {
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackerPose
// Il2CppName: GetTrackerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerPose)> {
  static const MethodInfo* get() {
    static auto* trackerId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Tracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackerFrustum
// Il2CppName: GetTrackerFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Frustumf (*)(::GlobalNamespace::OVRPlugin::Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerFrustum)> {
  static const MethodInfo* get() {
    static auto* trackerId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Tracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackerFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShowUI
// Il2CppName: ShowUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::PlatformUI)>(&GlobalNamespace::OVRPlugin::ShowUI)> {
  static const MethodInfo* get() {
    static auto* ui = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PlatformUI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShowUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ui});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueSubmitLayer
// Il2CppName: EnqueueSubmitLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, bool, ::System::IntPtr, ::System::IntPtr, int, int, ::GlobalNamespace::OVRPlugin::Posef, ::GlobalNamespace::OVRPlugin::Vector3f, int, ::GlobalNamespace::OVRPlugin::OverlayShape, bool, ::GlobalNamespace::OVRPlugin::TextureRectMatrixf, bool, ::UnityEngine::Vector4, ::UnityEngine::Vector4, bool, bool, bool, bool, bool, bool, bool, bool)>(&GlobalNamespace::OVRPlugin::EnqueueSubmitLayer)> {
  static const MethodInfo* get() {
    static auto* onTop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* headLocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* noDepthBufferTesting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftTexture = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* rightTexture = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->byval_arg;
    static auto* layerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/OverlayShape")->byval_arg;
    static auto* overrideTextureRectMatrix = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textureRectMatrix = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TextureRectMatrixf")->byval_arg;
    static auto* overridePerLayerColorScaleAndOffset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* expensiveSuperSample = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bicubic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* efficientSuperSample = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* efficientSharpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* expensiveSharpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hidden = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secureContent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* automaticFiltering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueSubmitLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onTop, headLocked, noDepthBufferTesting, leftTexture, rightTexture, layerId, frameIndex, pose, scale, layerIndex, shape, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset, expensiveSuperSample, bicubic, efficientSuperSample, efficientSharpen, expensiveSharpen, hidden, secureContent, automaticFiltering});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CalculateLayerDesc
// Il2CppName: CalculateLayerDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::LayerDesc (*)(::GlobalNamespace::OVRPlugin::OverlayShape, ::GlobalNamespace::OVRPlugin::LayerLayout, ::GlobalNamespace::OVRPlugin::Sizei, int, int, ::GlobalNamespace::OVRPlugin::EyeTextureFormat, int)>(&GlobalNamespace::OVRPlugin::CalculateLayerDesc)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/OverlayShape")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerLayout")->byval_arg;
    static auto* textureSize = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Sizei")->byval_arg;
    static auto* mipLevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeTextureFormat")->byval_arg;
    static auto* layerFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CalculateLayerDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueSetupLayer
// Il2CppName: EnqueueSetupLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::LayerDesc, int, ::System::IntPtr)>(&GlobalNamespace::OVRPlugin::EnqueueSetupLayer)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerDesc")->byval_arg;
    static auto* compositionDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerID = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueSetupLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, compositionDepth, layerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueDestroyLayer
// Il2CppName: EnqueueDestroyLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&GlobalNamespace::OVRPlugin::EnqueueDestroyLayer)> {
  static const MethodInfo* get() {
    static auto* layerID = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueDestroyLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerTexture
// Il2CppName: GetLayerTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, ::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetLayerTexture)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, stage, eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerTextureStageCount
// Il2CppName: GetLayerTextureStageCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::OVRPlugin::GetLayerTextureStageCount)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerTextureStageCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject
// Il2CppName: GetLayerAndroidSurfaceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int)>(&GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses
// Il2CppName: UpdateNodePhysicsPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, double)>(&GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses)> {
  static const MethodInfo* get() {
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* predictionSeconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdateNodePhysicsPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameIndex, predictionSeconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodePose)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeVelocity
// Il2CppName: GetNodeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeVelocity)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAngularVelocity
// Il2CppName: GetNodeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAcceleration
// Il2CppName: GetNodeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAcceleration)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration
// Il2CppName: GetNodeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePresent
// Il2CppName: GetNodePresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePresent)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeOrientationTracked
// Il2CppName: GetNodeOrientationTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationTracked)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeOrientationTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeOrientationValid
// Il2CppName: GetNodeOrientationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationValid)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeOrientationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePositionTracked
// Il2CppName: GetNodePositionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionTracked)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePositionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePositionValid
// Il2CppName: GetNodePositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionValid)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePoseStateRaw
// Il2CppName: GetNodePoseStateRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PoseStatef (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateRaw)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePoseStateRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePoseStateAtTime
// Il2CppName: GetNodePoseStateAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PoseStatef (*)(double, ::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateAtTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePoseStateAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePoseStateImmediate
// Il2CppName: GetNodePoseStateImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PoseStatef (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateImmediate)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePoseStateImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::AreHandPosesGeneratedByControllerData
// Il2CppName: AreHandPosesGeneratedByControllerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::AreHandPosesGeneratedByControllerData)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "AreHandPosesGeneratedByControllerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetSimultaneousHandsAndControllersEnabled
// Il2CppName: SetSimultaneousHandsAndControllersEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetSimultaneousHandsAndControllersEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetSimultaneousHandsAndControllersEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerIsInHand
// Il2CppName: GetControllerIsInHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetControllerIsInHand)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerIsInHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose
// Il2CppName: GetCurrentTrackingTransformPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose
// Il2CppName: GetTrackingTransformRawPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingTransformRawPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose
// Il2CppName: GetTrackingTransformRelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::TrackingOrigin)>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose)> {
  static const MethodInfo* get() {
    static auto* trackingOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingTransformRelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState2
// Il2CppName: GetControllerState2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState2 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState2)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState4
// Il2CppName: GetControllerState4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState4 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState4)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState5
// Il2CppName: GetControllerState5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState5 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState5)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState6
// Il2CppName: GetControllerState6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState6 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState6)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetCurrentInteractionProfile
// Il2CppName: GetCurrentInteractionProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::InteractionProfile (*)(::GlobalNamespace::OVRPlugin::Hand)>(&GlobalNamespace::OVRPlugin::GetCurrentInteractionProfile)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetCurrentInteractionProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetCurrentDetachedInteractionProfile
// Il2CppName: GetCurrentDetachedInteractionProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::InteractionProfile (*)(::GlobalNamespace::OVRPlugin::Hand)>(&GlobalNamespace::OVRPlugin::GetCurrentDetachedInteractionProfile)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetCurrentDetachedInteractionProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerVibration
// Il2CppName: SetControllerVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, float, float)>(&GlobalNamespace::OVRPlugin::SetControllerVibration)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, frequency, amplitude});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerLocalizedVibration
// Il2CppName: SetControllerLocalizedVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsLocation, float, float)>(&GlobalNamespace::OVRPlugin::SetControllerLocalizedVibration)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsLocationMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsLocation")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerLocalizedVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsLocationMask, frequency, amplitude});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerHapticsAmplitudeEnvelope
// Il2CppName: SetControllerHapticsAmplitudeEnvelope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsAmplitudeEnvelopeVibration)>(&GlobalNamespace::OVRPlugin::SetControllerHapticsAmplitudeEnvelope)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsVibration = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsAmplitudeEnvelopeVibration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerHapticsAmplitudeEnvelope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsVibration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerHapticsPcm
// Il2CppName: SetControllerHapticsPcm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsPcmVibration)>(&GlobalNamespace::OVRPlugin::SetControllerHapticsPcm)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsVibration = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsPcmVibration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerHapticsPcm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsVibration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerSampleRateHz
// Il2CppName: GetControllerSampleRateHz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Controller, ByRef<float>)>(&GlobalNamespace::OVRPlugin::GetControllerSampleRateHz)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* sampleRateHz = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerSampleRateHz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, sampleRateHz});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerHapticsDesc
// Il2CppName: GetControllerHapticsDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::HapticsDesc (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsDesc)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerHapticsDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerHapticsState
// Il2CppName: GetControllerHapticsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::HapticsState (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsState)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerHapticsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerHaptics
// Il2CppName: SetControllerHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::GlobalNamespace::OVRPlugin::HapticsBuffer)>(&GlobalNamespace::OVRPlugin::SetControllerHaptics)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hapticsBuffer = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale
// Il2CppName: GetEyeRecommendedResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime
// Il2CppName: GetAppCpuStartToGpuEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryConfigured
// Il2CppName: GetBoundaryConfigured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryConfigured)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryConfigured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TestBoundaryNode
// Il2CppName: TestBoundaryNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryNode)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TestBoundaryNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TestBoundaryPoint
// Il2CppName: TestBoundaryPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(::GlobalNamespace::OVRPlugin::Vector3f, ::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->byval_arg;
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TestBoundaryPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryGeometry
// Il2CppName: GetBoundaryGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryGeometry (*)(::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryGeometry2
// Il2CppName: GetBoundaryGeometry2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::BoundaryType, ::System::IntPtr, ByRef<int>)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry2)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pointsCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryGeometry2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType, points, pointsCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppPerfStats
// Il2CppName: GetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::AppPerfStats (*)()>(&GlobalNamespace::OVRPlugin::GetAppPerfStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ResetAppPerfStats
// Il2CppName: ResetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetAppPerfStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ResetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppFramerate
// Il2CppName: GetAppFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAppFramerate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency
// Il2CppName: SetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency)> {
  static const MethodInfo* get() {
    static auto* latencyInSeconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{latencyInSeconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency
// Il2CppName: GetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerDrivenHandPoses
// Il2CppName: SetControllerDrivenHandPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetControllerDrivenHandPoses)> {
  static const MethodInfo* get() {
    static auto* controllerDrivenHandPoses = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerDrivenHandPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerDrivenHandPoses});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerDrivenHandPosesAreNatural
// Il2CppName: SetControllerDrivenHandPosesAreNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetControllerDrivenHandPosesAreNatural)> {
  static const MethodInfo* get() {
    static auto* controllerDrivenHandPosesAreNatural = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerDrivenHandPosesAreNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerDrivenHandPosesAreNatural});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsControllerDrivenHandPosesEnabled
// Il2CppName: IsControllerDrivenHandPosesEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsControllerDrivenHandPosesEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsControllerDrivenHandPosesEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::AreControllerDrivenHandPosesNatural
// Il2CppName: AreControllerDrivenHandPosesNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::AreControllerDrivenHandPosesNatural)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "AreControllerDrivenHandPosesNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat
// Il2CppName: GetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat (*)()>(&GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat
// Il2CppName: SetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::EyeTextureFormat)>(&GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::InitializeMixedReality
// Il2CppName: InitializeMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::InitializeMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "InitializeMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShutdownMixedReality
// Il2CppName: ShutdownMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ShutdownMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShutdownMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsMixedRealityInitialized
// Il2CppName: IsMixedRealityInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsMixedRealityInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsMixedRealityInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetExternalCameraCount
// Il2CppName: GetExternalCameraCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::GetExternalCameraCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetExternalCameraCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdateExternalCamera
// Il2CppName: UpdateExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::UpdateExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdateExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo
// Il2CppName: GetMixedRealityCameraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>)>(&GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetMixedRealityCameraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, cameraExtrinsics, cameraIntrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OverrideExternalCameraFov
// Il2CppName: OverrideExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, bool, ::GlobalNamespace::OVRPlugin::Fovf)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraFov)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useOverriddenFov = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fov = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Fovf")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "OverrideExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, useOverriddenFov, fov});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov
// Il2CppName: GetUseOverriddenExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose
// Il2CppName: OverrideExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, bool, ::GlobalNamespace::OVRPlugin::Posef)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useOverriddenPose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* poseInStageOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, useOverriddenPose, poseInStageOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose
// Il2CppName: GetUseOverriddenExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera
// Il2CppName: ResetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ResetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDefaultExternalCamera
// Il2CppName: SetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetDefaultExternalCamera)> {
  static const MethodInfo* get() {
    static auto* cameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraName, cameraIntrinsics, cameraExtrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetExternalCameraProperties
// Il2CppName: SetExternalCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetExternalCameraProperties)> {
  static const MethodInfo* get() {
    static auto* cameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetExternalCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraName, cameraIntrinsics, cameraExtrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetMultimodalHandsControllersSupported
// Il2CppName: SetMultimodalHandsControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetMultimodalHandsControllersSupported)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetMultimodalHandsControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsMultimodalHandsControllersSupported
// Il2CppName: IsMultimodalHandsControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsMultimodalHandsControllersSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsMultimodalHandsControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsInsightPassthroughSupported
// Il2CppName: IsInsightPassthroughSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsInsightPassthroughSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsInsightPassthroughSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::InitializeInsightPassthrough
// Il2CppName: InitializeInsightPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::InitializeInsightPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "InitializeInsightPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShutdownInsightPassthrough
// Il2CppName: ShutdownInsightPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ShutdownInsightPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShutdownInsightPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsInsightPassthroughInitialized
// Il2CppName: IsInsightPassthroughInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsInsightPassthroughInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsInsightPassthroughInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetInsightPassthroughInitializationState
// Il2CppName: GetInsightPassthroughInitializationState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::GetInsightPassthroughInitializationState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetInsightPassthroughInitializationState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreateInsightTriangleMesh
// Il2CppName: CreateInsightTriangleMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateInsightTriangleMesh)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* meshHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreateInsightTriangleMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, vertices, triangles, meshHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroyInsightTriangleMesh
// Il2CppName: DestroyInsightTriangleMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroyInsightTriangleMesh)> {
  static const MethodInfo* get() {
    static auto* meshHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroyInsightTriangleMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::AddInsightPassthroughSurfaceGeometry
// Il2CppName: AddInsightPassthroughSurfaceGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, uint64_t, ::UnityEngine::Matrix4x4, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::AddInsightPassthroughSurfaceGeometry)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* T_world_model = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* geometryInstanceHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "AddInsightPassthroughSurfaceGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, meshHandle, T_world_model, geometryInstanceHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroyInsightPassthroughGeometryInstance
// Il2CppName: DestroyInsightPassthroughGeometryInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroyInsightPassthroughGeometryInstance)> {
  static const MethodInfo* get() {
    static auto* geometryInstanceHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroyInsightPassthroughGeometryInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometryInstanceHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdateInsightPassthroughGeometryTransform
// Il2CppName: UpdateInsightPassthroughGeometryTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::UnityEngine::Matrix4x4)>(&GlobalNamespace::OVRPlugin::UpdateInsightPassthroughGeometryTransform)> {
  static const MethodInfo* get() {
    static auto* geometryInstanceHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdateInsightPassthroughGeometryTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometryInstanceHandle, transform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle
// Il2CppName: SetInsightPassthroughStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2)>(&GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughStyle2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetInsightPassthroughStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, style});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle
// Il2CppName: SetInsightPassthroughStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::GlobalNamespace::OVRPlugin::InsightPassthroughStyle)>(&GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetInsightPassthroughStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, style});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreatePassthroughColorLut
// Il2CppName: CreatePassthroughColorLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::PassthroughColorLutChannels, uint, ::GlobalNamespace::OVRPlugin::PassthroughColorLutData, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreatePassthroughColorLut)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughColorLutChannels")->byval_arg;
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughColorLutData")->byval_arg;
    static auto* colorLut = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreatePassthroughColorLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, resolution, data, colorLut});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroyPassthroughColorLut
// Il2CppName: DestroyPassthroughColorLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroyPassthroughColorLut)> {
  static const MethodInfo* get() {
    static auto* colorLut = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroyPassthroughColorLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorLut});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdatePassthroughColorLut
// Il2CppName: UpdatePassthroughColorLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::PassthroughColorLutData)>(&GlobalNamespace::OVRPlugin::UpdatePassthroughColorLut)> {
  static const MethodInfo* get() {
    static auto* colorLut = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughColorLutData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdatePassthroughColorLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorLut, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetInsightPassthroughKeyboardHandsIntensity
// Il2CppName: SetInsightPassthroughKeyboardHandsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::GlobalNamespace::OVRPlugin::InsightPassthroughKeyboardHandsIntensity)>(&GlobalNamespace::OVRPlugin::SetInsightPassthroughKeyboardHandsIntensity)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughKeyboardHandsIntensity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetInsightPassthroughKeyboardHandsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPassthroughCapabilityFlags
// Il2CppName: GetPassthroughCapabilityFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughCapabilityFlags (*)()>(&GlobalNamespace::OVRPlugin::GetPassthroughCapabilityFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPassthroughCapabilityFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPassthroughCapabilities
// Il2CppName: GetPassthroughCapabilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::PassthroughCapabilities>)>(&GlobalNamespace::OVRPlugin::GetPassthroughCapabilities)> {
  static const MethodInfo* get() {
    static auto* outCapabilities = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughCapabilities")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPassthroughCapabilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outCapabilities});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryDimensions
// Il2CppName: GetBoundaryDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryDimensions)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryVisible
// Il2CppName: GetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetBoundaryVisible
// Il2CppName: SetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetBoundaryVisible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSystemHeadsetType
// Il2CppName: GetSystemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SystemHeadset (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHeadsetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSystemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetActiveController
// Il2CppName: GetActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Controller (*)()>(&GlobalNamespace::OVRPlugin::GetActiveController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetConnectedControllers
// Il2CppName: GetConnectedControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Controller (*)()>(&GlobalNamespace::OVRPlugin::GetConnectedControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetConnectedControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ToBool
// Il2CppName: ToBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Bool (*)(bool)>(&GlobalNamespace::OVRPlugin::ToBool)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ToBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingOriginType
// Il2CppName: GetTrackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::TrackingOrigin (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingOriginType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetTrackingOriginType
// Il2CppName: SetTrackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::TrackingOrigin)>(&GlobalNamespace::OVRPlugin::SetTrackingOriginType)> {
  static const MethodInfo* get() {
    static auto* originType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetTrackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin
// Il2CppName: GetTrackingCalibratedOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingCalibratedOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin
// Il2CppName: SetTrackingCalibratedOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetTrackingCalibratedOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RecenterTrackingOrigin
// Il2CppName: RecenterTrackingOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::RecenterFlags)>(&GlobalNamespace::OVRPlugin::RecenterTrackingOrigin)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/RecenterFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "RecenterTrackingOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_foveatedRenderingSupported
// Il2CppName: get_foveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_foveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_foveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingSupported
// Il2CppName: get_eyeTrackedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeTrackedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: get_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: set_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported
// Il2CppName: get_fixedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_fixedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_foveatedRenderingLevel
// Il2CppName: get_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::FoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRPlugin::get_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_foveatedRenderingLevel
// Il2CppName: set_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::FoveatedRenderingLevel)>(&GlobalNamespace::OVRPlugin::set_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel
// Il2CppName: get_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel
// Il2CppName: set_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel)>(&GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FixedFoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_useDynamicFoveatedRendering
// Il2CppName: get_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_useDynamicFoveatedRendering
// Il2CppName: set_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering
// Il2CppName: get_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering
// Il2CppName: set_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_tiledMultiResSupported
// Il2CppName: get_tiledMultiResSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_tiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_tiledMultiResLevel
// Il2CppName: get_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::TiledMultiResLevel (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_tiledMultiResLevel
// Il2CppName: set_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::TiledMultiResLevel)>(&GlobalNamespace::OVRPlugin::set_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TiledMultiResLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuUtilSupported
// Il2CppName: get_gpuUtilSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuUtilLevel
// Il2CppName: get_gpuUtilLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable
// Il2CppName: get_systemDisplayFrequenciesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemDisplayFrequenciesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemDisplayFrequency
// Il2CppName: get_systemDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_systemDisplayFrequency
// Il2CppName: set_systemDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_systemDisplayFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_systemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: get_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: set_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeFrustum2
// Il2CppName: GetNodeFrustum2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node, ByRef<::GlobalNamespace::OVRPlugin::Frustumf2>)>(&GlobalNamespace::OVRPlugin::GetNodeFrustum2)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* frustum = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Frustumf2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeFrustum2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, frustum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled
// Il2CppName: get_AsymmetricFovEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_AsymmetricFovEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled
// Il2CppName: get_EyeTextureArrayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_EyeTextureArrayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_localDimmingSupported
// Il2CppName: get_localDimmingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_localDimmingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_localDimmingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_localDimming
// Il2CppName: get_localDimming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_localDimming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_localDimming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_localDimming
// Il2CppName: set_localDimming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_localDimming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_localDimming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetDominantHand
// Il2CppName: GetDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Handedness (*)()>(&GlobalNamespace::OVRPlugin::GetDominantHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::SendEvent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, param, source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetHeadPoseModifier
// Il2CppName: SetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::Quatf>, ByRef<::GlobalNamespace::OVRPlugin::Vector3f>)>(&GlobalNamespace::OVRPlugin::SetHeadPoseModifier)> {
  static const MethodInfo* get() {
    static auto* relativeRotation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Quatf")->this_arg;
    static auto* relativeTranslation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeRotation, relativeTranslation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHeadPoseModifier
// Il2CppName: GetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::Quatf>, ByRef<::GlobalNamespace::OVRPlugin::Vector3f>)>(&GlobalNamespace::OVRPlugin::GetHeadPoseModifier)> {
  static const MethodInfo* get() {
    static auto* relativeRotation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Quatf")->this_arg;
    static auto* relativeTranslation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeRotation, relativeTranslation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsPerfMetricsSupported
// Il2CppName: IsPerfMetricsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::IsPerfMetricsSupported)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsPerfMetricsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPerfMetricsFloat
// Il2CppName: GetPerfMetricsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<float> (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsFloat)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPerfMetricsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPerfMetricsInt
// Il2CppName: GetPerfMetricsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsInt)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPerfMetricsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTimeInSeconds
// Il2CppName: GetTimeInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&GlobalNamespace::OVRPlugin::GetTimeInSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTimeInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetColorScaleAndOffset
// Il2CppName: SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4, bool)>(&GlobalNamespace::OVRPlugin::SetColorScaleAndOffset)> {
  static const MethodInfo* get() {
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* applyToAllLayers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScale, colorOffset, applyToAllLayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::AddCustomMetadata
// Il2CppName: AddCustomMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::AddCustomMetadata)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "AddCustomMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, param});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDeveloperMode
// Il2CppName: SetDeveloperMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::SetDeveloperMode)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDeveloperMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale
// Il2CppName: GetAdaptiveGPUPerformanceScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAdaptiveGPUPerformanceScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandTrackingEnabled
// Il2CppName: GetHandTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetHandTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandState
// Il2CppName: GetHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Hand, ByRef<::GlobalNamespace::OVRPlugin::HandState>)>(&GlobalNamespace::OVRPlugin::GetHandState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    static auto* handState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HandState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, hand, handState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsValidBone
// Il2CppName: IsValidBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::BoneId, ::GlobalNamespace::OVRPlugin::SkeletonType)>(&GlobalNamespace::OVRPlugin::IsValidBone)> {
  static const MethodInfo* get() {
    static auto* bone = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoneId")->byval_arg;
    static auto* skeletonType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SkeletonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsValidBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bone, skeletonType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSkeleton
// Il2CppName: GetSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SkeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton>)>(&GlobalNamespace::OVRPlugin::GetSkeleton)> {
  static const MethodInfo* get() {
    static auto* skeletonType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SkeletonType")->byval_arg;
    static auto* skeleton = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Skeleton")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skeletonType, skeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSkeleton2
// Il2CppName: GetSkeleton2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SkeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton2>)>(&GlobalNamespace::OVRPlugin::GetSkeleton2)> {
  static const MethodInfo* get() {
    static auto* skeletonType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SkeletonType")->byval_arg;
    static auto* skeleton = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Skeleton2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSkeleton2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skeletonType, skeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_bodyTrackingSupported
// Il2CppName: get_bodyTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_bodyTrackingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_bodyTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_bodyTrackingEnabled
// Il2CppName: get_bodyTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_bodyTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_bodyTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBodyState
// Il2CppName: GetBodyState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ByRef<::GlobalNamespace::OVRPlugin::BodyState>)>(&GlobalNamespace::OVRPlugin::GetBodyState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* bodyState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BodyState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBodyState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, bodyState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetMesh
// Il2CppName: GetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::MeshType, ByRef<::GlobalNamespace::OVRPlugin::Mesh*>)>(&GlobalNamespace::OVRPlugin::GetMesh)> {
  static const MethodInfo* get() {
    static auto* meshType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/MeshType")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Mesh")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshType, mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StartKeyboardTracking
// Il2CppName: StartKeyboardTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::StartKeyboardTracking)> {
  static const MethodInfo* get() {
    static auto* trackedKeyboardId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StartKeyboardTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackedKeyboardId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StopKeyboardTracking
// Il2CppName: StopKeyboardTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopKeyboardTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StopKeyboardTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetKeyboardState
// Il2CppName: GetKeyboardState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ByRef<::GlobalNamespace::OVRPlugin::KeyboardState>)>(&GlobalNamespace::OVRPlugin::GetKeyboardState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* keyboardState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/KeyboardState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetKeyboardState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, keyboardState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSystemKeyboardDescription
// Il2CppName: GetSystemKeyboardDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags, ByRef<::GlobalNamespace::OVRPlugin::KeyboardDescription>)>(&GlobalNamespace::OVRPlugin::GetSystemKeyboardDescription)> {
  static const MethodInfo* get() {
    static auto* keyboardQueryFlags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackedKeyboardQueryFlags")->byval_arg;
    static auto* keyboardDescription = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/KeyboardDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSystemKeyboardDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyboardQueryFlags, keyboardDescription});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreateVirtualKeyboard
// Il2CppName: CreateVirtualKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::VirtualKeyboardCreateInfo)>(&GlobalNamespace::OVRPlugin::CreateVirtualKeyboard)> {
  static const MethodInfo* get() {
    static auto* createInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardCreateInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreateVirtualKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroyVirtualKeyboard
// Il2CppName: DestroyVirtualKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::DestroyVirtualKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroyVirtualKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SendVirtualKeyboardInput
// Il2CppName: SendVirtualKeyboardInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputInfo, ByRef<::GlobalNamespace::OVRPlugin::Posef>)>(&GlobalNamespace::OVRPlugin::SendVirtualKeyboardInput)> {
  static const MethodInfo* get() {
    static auto* inputInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardInputInfo")->byval_arg;
    static auto* interactorRootPose = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SendVirtualKeyboardInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputInfo, interactorRootPose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ChangeVirtualKeyboardTextContext
// Il2CppName: ChangeVirtualKeyboardTextContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::StringW)>(&GlobalNamespace::OVRPlugin::ChangeVirtualKeyboardTextContext)> {
  static const MethodInfo* get() {
    static auto* textContext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ChangeVirtualKeyboardTextContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textContext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreateVirtualKeyboardSpace
// Il2CppName: CreateVirtualKeyboardSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::VirtualKeyboardSpaceCreateInfo, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateVirtualKeyboardSpace)> {
  static const MethodInfo* get() {
    static auto* createInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardSpaceCreateInfo")->byval_arg;
    static auto* keyboardSpace = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreateVirtualKeyboardSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createInfo, keyboardSpace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SuggestVirtualKeyboardLocation
// Il2CppName: SuggestVirtualKeyboardLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationInfo)>(&GlobalNamespace::OVRPlugin::SuggestVirtualKeyboardLocation)> {
  static const MethodInfo* get() {
    static auto* locationInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardLocationInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SuggestVirtualKeyboardLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locationInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetVirtualKeyboardScale
// Il2CppName: GetVirtualKeyboardScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<float>)>(&GlobalNamespace::OVRPlugin::GetVirtualKeyboardScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetVirtualKeyboardScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetVirtualKeyboardModelAnimationStates
// Il2CppName: GetVirtualKeyboardModelAnimationStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardModelAnimationStates>)>(&GlobalNamespace::OVRPlugin::GetVirtualKeyboardModelAnimationStates)> {
  static const MethodInfo* get() {
    static auto* animationStates = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardModelAnimationStates")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetVirtualKeyboardModelAnimationStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animationStates});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetVirtualKeyboardDirtyTextures
// Il2CppName: GetVirtualKeyboardDirtyTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureIds>)>(&GlobalNamespace::OVRPlugin::GetVirtualKeyboardDirtyTextures)> {
  static const MethodInfo* get() {
    static auto* textureIds = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardTextureIds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetVirtualKeyboardDirtyTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureIds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetVirtualKeyboardTextureData
// Il2CppName: GetVirtualKeyboardTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint64_t, ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardTextureData>)>(&GlobalNamespace::OVRPlugin::GetVirtualKeyboardTextureData)> {
  static const MethodInfo* get() {
    static auto* textureId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* textureData = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardTextureData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetVirtualKeyboardTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureId, textureData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetVirtualKeyboardModelVisibility
// Il2CppName: SetVirtualKeyboardModelVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::VirtualKeyboardModelVisibility>)>(&GlobalNamespace::OVRPlugin::SetVirtualKeyboardModelVisibility)> {
  static const MethodInfo* get() {
    static auto* visibility = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardModelVisibility")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetVirtualKeyboardModelVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visibility});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_faceTrackingEnabled
// Il2CppName: get_faceTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_faceTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_faceTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_faceTrackingSupported
// Il2CppName: get_faceTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_faceTrackingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_faceTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetFaceStateInternal
// Il2CppName: GetFaceStateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::FaceState>)>(&GlobalNamespace::OVRPlugin::GetFaceStateInternal)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FaceState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetFaceStateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, faceState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetFaceState
// Il2CppName: GetFaceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::FaceState>)>(&GlobalNamespace::OVRPlugin::GetFaceState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FaceState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetFaceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, faceState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeTrackingEnabled
// Il2CppName: get_eyeTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeTrackingSupported
// Il2CppName: get_eyeTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeGazesState
// Il2CppName: GetEyeGazesState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::EyeGazesState>)>(&GlobalNamespace::OVRPlugin::GetEyeGazesState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eyeGazesState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeGazesState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeGazesState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, eyeGazesState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StartEyeTracking
// Il2CppName: StartEyeTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartEyeTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StartEyeTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StopEyeTracking
// Il2CppName: StopEyeTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopEyeTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StopEyeTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StartFaceTracking
// Il2CppName: StartFaceTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartFaceTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StartFaceTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StopFaceTracking
// Il2CppName: StopFaceTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopFaceTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StopFaceTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StartBodyTracking
// Il2CppName: StartBodyTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartBodyTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StartBodyTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::StopBodyTracking
// Il2CppName: StopBodyTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopBodyTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "StopBodyTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount
// Il2CppName: GetLocalTrackingSpaceRecenterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLocalTrackingSpaceRecenterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled
// Il2CppName: GetSystemHmd3DofModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetClientColorDesc
// Il2CppName: SetClientColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::ColorSpace)>(&GlobalNamespace::OVRPlugin::SetClientColorDesc)> {
  static const MethodInfo* get() {
    static auto* colorSpace = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/ColorSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetClientColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorSpace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHmdColorDesc
// Il2CppName: GetHmdColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ColorSpace (*)()>(&GlobalNamespace::OVRPlugin::GetHmdColorDesc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHmdColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::PollEvent
// Il2CppName: PollEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::EventDataBuffer>)>(&GlobalNamespace::OVRPlugin::PollEvent)> {
  static const MethodInfo* get() {
    static auto* eventDataBuffer = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EventDataBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "PollEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDataBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance
// Il2CppName: GetNativeOpenXRInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNativeOpenXRInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNativeOpenXRSession
// Il2CppName: GetNativeOpenXRSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNativeOpenXRSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV
// Il2CppName: SetKeyboardOverlayUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Vector2f)>(&GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV)> {
  static const MethodInfo* get() {
    static auto* uv = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector2f")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetKeyboardOverlayUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreateSpatialAnchor
// Il2CppName: CreateSpatialAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpatialAnchorCreateInfo, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateSpatialAnchor)> {
  static const MethodInfo* get() {
    static auto* createInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpatialAnchorCreateInfo")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreateSpatialAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createInfo, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetSpaceComponentStatus
// Il2CppName: SetSpaceComponentStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool, double, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SetSpaceComponentStatus)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* componentType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetSpaceComponentStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, componentType, enable, timeout, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceComponentStatus
// Il2CppName: GetSpaceComponentStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::SpaceComponentType, ByRef<bool>, ByRef<bool>)>(&GlobalNamespace::OVRPlugin::GetSpaceComponentStatus)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* componentType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* changePending = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceComponentStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, componentType, enabled, changePending});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceComponentStatusInternal
// Il2CppName: GetSpaceComponentStatusInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint64_t, ::GlobalNamespace::OVRPlugin::SpaceComponentType, ByRef<bool>, ByRef<bool>)>(&GlobalNamespace::OVRPlugin::GetSpaceComponentStatusInternal)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* componentType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* changePending = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceComponentStatusInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, componentType, enabled, changePending});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnumerateSpaceSupportedComponents
// Il2CppName: EnumerateSpaceSupportedComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint>, ::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType>)>(&GlobalNamespace::OVRPlugin::EnumerateSpaceSupportedComponents)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* numSupportedComponents = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* supportedComponents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnumerateSpaceSupportedComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, numSupportedComponents, supportedComponents});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SaveSpace
// Il2CppName: SaveSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation, ::GlobalNamespace::OVRPlugin::SpaceStoragePersistenceMode, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SaveSpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStoragePersistenceMode")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SaveSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, location, mode, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EraseSpace
// Il2CppName: EraseSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::EraseSpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EraseSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, location, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceUuid
// Il2CppName: GetSpaceUuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::System::Guid>)>(&GlobalNamespace::OVRPlugin::GetSpaceUuid)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceUuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::QuerySpaces
// Il2CppName: QuerySpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SpaceQueryInfo, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::QuerySpaces)> {
  static const MethodInfo* get() {
    static auto* queryInfo = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceQueryInfo")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "QuerySpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{queryInfo, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults
// Il2CppName: RetrieveSpaceQueryResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::Unity::Collections::NativeArray_1<::GlobalNamespace::OVRPlugin::SpaceQueryResult>>, ::Unity::Collections::Allocator)>(&GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceQueryResult")})->this_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "RetrieveSpaceQueryResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, results, allocator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults
// Il2CppName: RetrieveSpaceQueryResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<::GlobalNamespace::OVRPlugin::SpaceQueryResult>>)>(&GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceQueryResult"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "RetrieveSpaceQueryResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, results});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SaveSpaceList
// Il2CppName: SaveSpaceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::Unity::Collections::NativeArray_1<uint64_t>, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SaveSpaceList)> {
  static const MethodInfo* get() {
    static auto* spaces = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SaveSpaceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaces, location, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceUserId
// Il2CppName: GetSpaceUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::GetSpaceUserId)> {
  static const MethodInfo* get() {
    static auto* spaceUserHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* spaceUserId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaceUserHandle, spaceUserId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CreateSpaceUser
// Il2CppName: CreateSpaceUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateSpaceUser)> {
  static const MethodInfo* get() {
    static auto* spaceUserId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* spaceUserHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CreateSpaceUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaceUserId, spaceUserHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroySpaceUser
// Il2CppName: DestroySpaceUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroySpaceUser)> {
  static const MethodInfo* get() {
    static auto* spaceUserHandle = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroySpaceUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaceUserHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShareSpaces
// Il2CppName: ShareSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::Unity::Collections::NativeArray_1<uint64_t>, ::Unity::Collections::NativeArray_1<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::ShareSpaces)> {
  static const MethodInfo* get() {
    static auto* spaces = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* userHandles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShareSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaces, userHandles, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TryLocateSpace
// Il2CppName: TryLocateSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::TrackingOrigin, ByRef<::GlobalNamespace::OVRPlugin::Posef>)>(&GlobalNamespace::OVRPlugin::TryLocateSpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* baseOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TryLocateSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, baseOrigin, pose});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::LocateSpace
// Il2CppName: LocateSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(uint64_t, ::GlobalNamespace::OVRPlugin::TrackingOrigin)>(&GlobalNamespace::OVRPlugin::LocateSpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* baseOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "LocateSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, baseOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TryLocateSpace
// Il2CppName: TryLocateSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::GlobalNamespace::OVRPlugin::TrackingOrigin, ByRef<::GlobalNamespace::OVRPlugin::Posef>, ByRef<::GlobalNamespace::OVRPlugin::SpaceLocationFlags>)>(&GlobalNamespace::OVRPlugin::TryLocateSpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* baseOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->this_arg;
    static auto* locationFlags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceLocationFlags")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TryLocateSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, baseOrigin, pose, locationFlags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::DestroySpace
// Il2CppName: DestroySpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroySpace)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "DestroySpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceContainer
// Il2CppName: GetSpaceContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<::System::Guid>>)>(&GlobalNamespace::OVRPlugin::GetSpaceContainer)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* containerUuids = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Guid"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, containerUuids});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundingBox2D
// Il2CppName: GetSpaceBoundingBox2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::GlobalNamespace::OVRPlugin::Rectf>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundingBox2D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Rectf")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundingBox2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundingBox3D
// Il2CppName: GetSpaceBoundingBox3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::GlobalNamespace::OVRPlugin::Boundsf>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundingBox3D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Boundsf")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundingBox3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceSemanticLabels
// Il2CppName: GetSpaceSemanticLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::StringW>)>(&GlobalNamespace::OVRPlugin::GetSpaceSemanticLabels)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* labels = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceSemanticLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, labels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceRoomLayout
// Il2CppName: GetSpaceRoomLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::GlobalNamespace::OVRPlugin::RoomLayout>)>(&GlobalNamespace::OVRPlugin::GetSpaceRoomLayout)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* roomLayout = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/RoomLayout")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceRoomLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, roomLayout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundary2DCount
// Il2CppName: GetSpaceBoundary2DCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<int>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2DCount)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundary2DCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundary2D
// Il2CppName: GetSpaceBoundary2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* boundary = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundary2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, boundary});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundary2D
// Il2CppName: GetSpaceBoundary2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2>, ByRef<int>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* boundary = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundary2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, boundary, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundary2D
// Il2CppName: GetSpaceBoundary2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> (*)(uint64_t, ::Unity::Collections::Allocator)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundary2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, allocator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceBoundary2D
// Il2CppName: GetSpaceBoundary2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<::UnityEngine::Vector2>>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* boundary = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceBoundary2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, boundary});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RequestSceneCapture
// Il2CppName: RequestSceneCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::RequestSceneCapture)> {
  static const MethodInfo* get() {
    static auto* requestString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "RequestSceneCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestString, requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceTriangleMeshCounts
// Il2CppName: GetSpaceTriangleMeshCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<int>, ByRef<int>)>(&GlobalNamespace::OVRPlugin::GetSpaceTriangleMeshCounts)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceTriangleMeshCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, vertexCount, triangleCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSpaceTriangleMesh
// Il2CppName: GetSpaceTriangleMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>, ::Unity::Collections::NativeArray_1<int>)>(&GlobalNamespace::OVRPlugin::GetSpaceTriangleMesh)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSpaceTriangleMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, vertices, triangles});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerRecommendedResolution
// Il2CppName: GetLayerRecommendedResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<::GlobalNamespace::OVRPlugin::Sizei>)>(&GlobalNamespace::OVRPlugin::GetLayerRecommendedResolution)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recommendedSize = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Sizei")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerRecommendedResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, recommendedSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeLayerRecommendedResolution
// Il2CppName: GetEyeLayerRecommendedResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::Sizei>)>(&GlobalNamespace::OVRPlugin::GetEyeLayerRecommendedResolution)> {
  static const MethodInfo* get() {
    static auto* recommendedSize = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Sizei")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeLayerRecommendedResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recommendedSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetRenderModelPaths
// Il2CppName: GetRenderModelPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&GlobalNamespace::OVRPlugin::GetRenderModelPaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetRenderModelPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetRenderModelProperties
// Il2CppName: GetRenderModelProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::RenderModelProperties>)>(&GlobalNamespace::OVRPlugin::GetRenderModelProperties)> {
  static const MethodInfo* get() {
    static auto* modelPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* modelProperties = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/RenderModelProperties")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetRenderModelProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modelPath, modelProperties});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::LoadRenderModel
// Il2CppName: LoadRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::LoadRenderModel)> {
  static const MethodInfo* get() {
    static auto* modelKey = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "LoadRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modelKey});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OnEditorShutdown
// Il2CppName: OnEditorShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::OnEditorShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "OnEditorShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPassthroughPreferences
// Il2CppName: GetPassthroughPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::PassthroughPreferences>)>(&GlobalNamespace::OVRPlugin::GetPassthroughPreferences)> {
  static const MethodInfo* get() {
    static auto* preferences = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughPreferences")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPassthroughPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{preferences});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetEyeBufferSharpenType
// Il2CppName: SetEyeBufferSharpenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::LayerSharpenType)>(&GlobalNamespace::OVRPlugin::SetEyeBufferSharpenType)> {
  static const MethodInfo* get() {
    static auto* sharpenType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerSharpenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetEyeBufferSharpenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sharpenType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
