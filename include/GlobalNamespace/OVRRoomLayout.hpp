// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IOVRAnchorComponent`1
#include "GlobalNamespace/IOVRAnchorComponent_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRTask`1 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRRoomLayout
  struct OVRRoomLayout;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRRoomLayout, "", "OVRRoomLayout");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRRoomLayout
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRRoomLayout/*, public ::System::ValueType, public ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRRoomLayout>, public ::System::IEquatable_1<::GlobalNamespace::OVRRoomLayout>*/ {
    public:
    public:
    // private readonly System.UInt64 <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: OVRRoomLayout
    constexpr OVRRoomLayout(uint64_t Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRRoomLayout>
    operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRRoomLayout>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRRoomLayout>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRRoomLayout>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRRoomLayout>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRRoomLayout>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return Handle;
    }
    // Get static field: static public readonly OVRRoomLayout Null
    static ::GlobalNamespace::OVRRoomLayout _get_Null();
    // Set static field: static public readonly OVRRoomLayout Null
    static void _set_Null(::GlobalNamespace::OVRRoomLayout value);
    // Get instance field reference: private readonly System.UInt64 <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$Handle$k__BackingField();
    // private OVRPlugin/SpaceComponentType IOVRAnchorComponent<OVRRoomLayout>.get_Type()
    // Offset: 0x48B1230
    ::GlobalNamespace::OVRPlugin::SpaceComponentType IOVRAnchorComponent$OVRRoomLayout$_get_Type();
    // private System.UInt64 IOVRAnchorComponent<OVRRoomLayout>.get_Handle()
    // Offset: 0x48B1240
    uint64_t IOVRAnchorComponent$OVRRoomLayout$_get_Handle();
    // private OVRRoomLayout IOVRAnchorComponent<OVRRoomLayout>.FromAnchor(OVRAnchor anchor)
    // Offset: 0x48B1248
    ::GlobalNamespace::OVRRoomLayout IOVRAnchorComponent$OVRRoomLayout$_FromAnchor(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean get_IsNull()
    // Offset: 0x48B125C
    bool get_IsNull();
    // public System.Boolean get_IsEnabled()
    // Offset: 0x48B126C
    bool get_IsEnabled();
    // private OVRTask`1<System.Boolean> IOVRAnchorComponent<OVRRoomLayout>.SetEnabledAsync(System.Boolean enabled, System.Double timeout)
    // Offset: 0x48B1314
    ::GlobalNamespace::OVRTask_1<bool> IOVRAnchorComponent$OVRRoomLayout$_SetEnabledAsync(bool enabled, double timeout);
    // public System.Boolean Equals(OVRRoomLayout other)
    // Offset: 0x48B1360
    bool Equals(::GlobalNamespace::OVRRoomLayout other);
    // OVRPlugin/SpaceComponentType get_Type()
    // Offset: 0x48B1238
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_Type();
    // System.UInt64 get_Handle()
    // Offset: 0x48B14D4
    uint64_t get_Handle();
    // private System.Void .ctor(OVRAnchor anchor)
    // Offset: 0x48B1250
    OVRRoomLayout(::GlobalNamespace::OVRAnchor anchor);
    // public OVRTask`1<System.Boolean> FetchLayoutAnchorsAsync(System.Collections.Generic.List`1<OVRAnchor> anchors)
    // Offset: 0x48B14DC
    ::GlobalNamespace::OVRTask_1<bool> FetchLayoutAnchorsAsync(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* anchors);
    // public System.Boolean TryGetRoomLayout(out System.Guid ceiling, out System.Guid floor, out System.Guid[] walls)
    // Offset: 0x48B17CC
    bool TryGetRoomLayout(ByRef<::System::Guid> ceiling, ByRef<::System::Guid> floor, ByRef<::ArrayW<::System::Guid>> walls);
    // static private System.Void .cctor()
    // Offset: 0x48B18DC
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x48B1388
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x48B1400
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x48B1450
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // OVRRoomLayout
  #pragma pack(pop)
  static check_size<sizeof(OVRRoomLayout), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRRoomLayoutSizeCheck;
  static_assert(sizeof(OVRRoomLayout) == 0x8);
  // static public System.Boolean op_Equality(OVRRoomLayout lhs, OVRRoomLayout rhs)
  // Offset: 0x48B1370
  bool operator ==(const ::GlobalNamespace::OVRRoomLayout& lhs, const ::GlobalNamespace::OVRRoomLayout& rhs);
  // static public System.Boolean op_Inequality(OVRRoomLayout lhs, OVRRoomLayout rhs)
  // Offset: 0x48B137C
  bool operator !=(const ::GlobalNamespace::OVRRoomLayout& lhs, const ::GlobalNamespace::OVRRoomLayout& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_get_Type
// Il2CppName: IOVRAnchorComponent<OVRRoomLayout>.get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "IOVRAnchorComponent<OVRRoomLayout>.get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_get_Handle
// Il2CppName: IOVRAnchorComponent<OVRRoomLayout>.get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "IOVRAnchorComponent<OVRRoomLayout>.get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_FromAnchor
// Il2CppName: IOVRAnchorComponent<OVRRoomLayout>.FromAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRRoomLayout (GlobalNamespace::OVRRoomLayout::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_FromAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "IOVRAnchorComponent<OVRRoomLayout>.FromAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_SetEnabledAsync
// Il2CppName: IOVRAnchorComponent<OVRRoomLayout>.SetEnabledAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRRoomLayout::*)(bool, double)>(&GlobalNamespace::OVRRoomLayout::IOVRAnchorComponent$OVRRoomLayout$_SetEnabledAsync)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "IOVRAnchorComponent<OVRRoomLayout>.SetEnabledAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, timeout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRoomLayout::*)(::GlobalNamespace::OVRRoomLayout)>(&GlobalNamespace::OVRRoomLayout::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRRoomLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::OVRRoomLayout
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::FetchLayoutAnchorsAsync
// Il2CppName: FetchLayoutAnchorsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRRoomLayout::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)>(&GlobalNamespace::OVRRoomLayout::FetchLayoutAnchorsAsync)> {
  static const MethodInfo* get() {
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "FetchLayoutAnchorsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::TryGetRoomLayout
// Il2CppName: TryGetRoomLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRoomLayout::*)(ByRef<::System::Guid>, ByRef<::System::Guid>, ByRef<::ArrayW<::System::Guid>>)>(&GlobalNamespace::OVRRoomLayout::TryGetRoomLayout)> {
  static const MethodInfo* get() {
    static auto* ceiling = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* floor = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* walls = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Guid"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "TryGetRoomLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ceiling, floor, walls});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRRoomLayout::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRoomLayout::*)(::Il2CppObject*)>(&GlobalNamespace::OVRRoomLayout::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OVRRoomLayout::*)()>(&GlobalNamespace::OVRRoomLayout::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRoomLayout), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRRoomLayout::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
