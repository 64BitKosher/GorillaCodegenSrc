// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DelayedDestroyPooledObj
  class DelayedDestroyPooledObj;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DelayedDestroyPooledObj);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DelayedDestroyPooledObj*, "", "DelayedDestroyPooledObj");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: DelayedDestroyPooledObj
  // [TokenAttribute] Offset: FFFFFFFF
  class DelayedDestroyPooledObj : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single destroyDelay
    // Size: 0x4
    // Offset: 0x20
    float destroyDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeToDie
    // Size: 0x4
    // Offset: 0x24
    float timeToDie;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single destroyDelay
    [[deprecated("Use field access instead!")]] float& dyn_destroyDelay();
    // Get instance field reference: private System.Single timeToDie
    [[deprecated("Use field access instead!")]] float& dyn_timeToDie();
    // protected System.Void OnEnable()
    // Offset: 0x2776678
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x2776734
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x27767BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DelayedDestroyPooledObj* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DelayedDestroyPooledObj::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DelayedDestroyPooledObj*, creationType>()));
    }
  }; // DelayedDestroyPooledObj
  #pragma pack(pop)
  static check_size<sizeof(DelayedDestroyPooledObj), 36 + sizeof(float)> __GlobalNamespace_DelayedDestroyPooledObjSizeCheck;
  static_assert(sizeof(DelayedDestroyPooledObj) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DelayedDestroyPooledObj::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DelayedDestroyPooledObj::*)()>(&GlobalNamespace::DelayedDestroyPooledObj::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DelayedDestroyPooledObj*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DelayedDestroyPooledObj::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DelayedDestroyPooledObj::*)()>(&GlobalNamespace::DelayedDestroyPooledObj::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DelayedDestroyPooledObj*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DelayedDestroyPooledObj::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
