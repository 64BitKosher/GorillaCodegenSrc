// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: StopwatchFace
  class StopwatchFace;
  // Forward declaring type: PhotonEvent
  class PhotonEvent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StopwatchCosmetic
  class StopwatchCosmetic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StopwatchCosmetic);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StopwatchCosmetic*, "", "StopwatchCosmetic");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: StopwatchCosmetic
  // [TokenAttribute] Offset: FFFFFFFF
  class StopwatchCosmetic : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // private StopwatchFace _watchFace
    // Size: 0x8
    // Offset: 0x2D0
    ::GlobalNamespace::StopwatchFace* watchFace;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::StopwatchFace*) == 0x8);
    // private System.Boolean _isActivating
    // Size: 0x1
    // Offset: 0x2D8
    bool isActivating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single _activeTimeElapsed
    // Size: 0x4
    // Offset: 0x2DC
    float activeTimeElapsed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _activated
    // Size: 0x1
    // Offset: 0x2E0
    bool activated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 _photonID
    // Size: 0x4
    // Offset: 0x2E4
    int photonID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchToggle
    // Size: 0x8
    // Offset: 0x2E8
    ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* watchToggle;
    // Field size check
    static_assert(sizeof(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*) == 0x8);
    // private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchReset
    // Size: 0x8
    // Offset: 0x2F0
    ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* watchReset;
    // Field size check
    static_assert(sizeof(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*) == 0x8);
    // public System.Boolean disableActivation
    // Size: 0x1
    // Offset: 0x2F8
    bool disableActivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableDeactivation
    // Size: 0x1
    // Offset: 0x2F9
    bool disableDeactivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private PhotonEvent gWatchToggleRPC
    static ::GlobalNamespace::PhotonEvent* _get_gWatchToggleRPC();
    // Set static field: static private PhotonEvent gWatchToggleRPC
    static void _set_gWatchToggleRPC(::GlobalNamespace::PhotonEvent* value);
    // Get static field: static private PhotonEvent gWatchResetRPC
    static ::GlobalNamespace::PhotonEvent* _get_gWatchResetRPC();
    // Set static field: static private PhotonEvent gWatchResetRPC
    static void _set_gWatchResetRPC(::GlobalNamespace::PhotonEvent* value);
    // Get instance field reference: private StopwatchFace _watchFace
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::StopwatchFace*& dyn__watchFace();
    // Get instance field reference: private System.Boolean _isActivating
    [[deprecated("Use field access instead!")]] bool& dyn__isActivating();
    // Get instance field reference: private System.Single _activeTimeElapsed
    [[deprecated("Use field access instead!")]] float& dyn__activeTimeElapsed();
    // Get instance field reference: private System.Boolean _activated
    [[deprecated("Use field access instead!")]] bool& dyn__activated();
    // Get instance field reference: private System.Int32 _photonID
    [[deprecated("Use field access instead!")]] int& dyn__photonID();
    // Get instance field reference: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchToggle
    [[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& dyn__watchToggle();
    // Get instance field reference: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchReset
    [[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& dyn__watchReset();
    // Get instance field reference: public System.Boolean disableActivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableActivation();
    // Get instance field reference: public System.Boolean disableDeactivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableDeactivation();
    // public System.Boolean get_isActivating()
    // Offset: 0x26D7FD4
    bool get_isActivating();
    // public System.Single get_activeTimeElapsed()
    // Offset: 0x26D7FDC
    float get_activeTimeElapsed();
    // private System.Void OnWatchToggle(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x26D85F8
    void OnWatchToggle(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // private System.Void OnWatchReset(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x26D87A4
    void OnWatchReset(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // private System.Boolean FetchMyViewID(out System.Int32 viewID)
    // Offset: 0x26D8330
    bool FetchMyViewID(ByRef<int> viewID);
    // public System.Boolean PollActivated()
    // Offset: 0x26D88F0
    bool PollActivated();
    // protected override System.Void Awake()
    // Offset: 0x26D7FE4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Awake()
    void Awake();
    // public override System.Void OnEnable()
    // Offset: 0x26D8220
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26D8518
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Void LateUpdate()
    // Offset: 0x26D8908
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdate()
    void LateUpdate();
    // public override System.Void OnActivate()
    // Offset: 0x26D8A5C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public override System.Void OnDeactivate()
    // Offset: 0x26D8AB0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDeactivate()
    void OnDeactivate();
    // public override System.Boolean CanActivate()
    // Offset: 0x26D8CD0
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanActivate()
    bool CanActivate();
    // public override System.Boolean CanDeactivate()
    // Offset: 0x26D8CE0
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanDeactivate()
    bool CanDeactivate();
    // public System.Void .ctor()
    // Offset: 0x26D8CF0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StopwatchCosmetic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StopwatchCosmetic*, creationType>()));
    }
  }; // StopwatchCosmetic
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::get_isActivating
// Il2CppName: get_isActivating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::get_isActivating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "get_isActivating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::get_activeTimeElapsed
// Il2CppName: get_activeTimeElapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::get_activeTimeElapsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "get_activeTimeElapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnWatchToggle
// Il2CppName: OnWatchToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::StopwatchCosmetic::OnWatchToggle)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnWatchToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnWatchReset
// Il2CppName: OnWatchReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::StopwatchCosmetic::OnWatchReset)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnWatchReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::FetchMyViewID
// Il2CppName: FetchMyViewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StopwatchCosmetic::*)(ByRef<int>)>(&GlobalNamespace::StopwatchCosmetic::FetchMyViewID)> {
  static const MethodInfo* get() {
    static auto* viewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "FetchMyViewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::PollActivated
// Il2CppName: PollActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::PollActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "PollActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StopwatchCosmetic::*)()>(&GlobalNamespace::StopwatchCosmetic::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StopwatchCosmetic*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StopwatchCosmetic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
