// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MouseRotationDrag
  class MouseRotationDrag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MouseRotationDrag);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MouseRotationDrag*, "", "MouseRotationDrag");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: MouseRotationDrag
  // [TokenAttribute] Offset: FFFFFFFF
  class MouseRotationDrag : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean m_currFrameHasFocus
    // Size: 0x1
    // Offset: 0x20
    bool m_currFrameHasFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_prevFrameHasFocus
    // Size: 0x1
    // Offset: 0x21
    bool m_prevFrameHasFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_prevFrameHasFocus and: m_prevMousePosition
    char __padding1[0x2] = {};
    // private UnityEngine.Vector3 m_prevMousePosition
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 m_prevMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_euler
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 m_euler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Boolean m_currFrameHasFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_currFrameHasFocus();
    // Get instance field reference: private System.Boolean m_prevFrameHasFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_prevFrameHasFocus();
    // Get instance field reference: private UnityEngine.Vector3 m_prevMousePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_prevMousePosition();
    // Get instance field reference: private UnityEngine.Vector3 m_euler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_euler();
    // private System.Void Start()
    // Offset: 0x2685840
    void Start();
    // private System.Void Update()
    // Offset: 0x2685848
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26859AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseRotationDrag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MouseRotationDrag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseRotationDrag*, creationType>()));
    }
  }; // MouseRotationDrag
  #pragma pack(pop)
  static check_size<sizeof(MouseRotationDrag), 48 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_MouseRotationDragSizeCheck;
  static_assert(sizeof(MouseRotationDrag) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MouseRotationDrag::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseRotationDrag::*)()>(&GlobalNamespace::MouseRotationDrag::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseRotationDrag*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseRotationDrag::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseRotationDrag::*)()>(&GlobalNamespace::MouseRotationDrag::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseRotationDrag*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseRotationDrag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
