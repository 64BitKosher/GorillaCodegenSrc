// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegalAgreementTextAsset
  class LegalAgreementTextAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegalAgreementTextAsset);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreementTextAsset*, "", "LegalAgreementTextAsset");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: LegalAgreementTextAsset
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class LegalAgreementTextAsset : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String title
    // Size: 0x8
    // Offset: 0x18
    ::StringW title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playFabKey
    // Size: 0x8
    // Offset: 0x20
    ::StringW playFabKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String latestVersionKey
    // Size: 0x8
    // Offset: 0x28
    ::StringW latestVersionKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String errorMessage
    // Size: 0x8
    // Offset: 0x30
    ::StringW errorMessage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String title
    [[deprecated("Use field access instead!")]] ::StringW& dyn_title();
    // Get instance field reference: public System.String playFabKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playFabKey();
    // Get instance field reference: public System.String latestVersionKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_latestVersionKey();
    // Get instance field reference: public System.String errorMessage
    [[deprecated("Use field access instead!")]] ::StringW& dyn_errorMessage();
    // public System.Void .ctor()
    // Offset: 0x27563F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegalAgreementTextAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementTextAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegalAgreementTextAsset*, creationType>()));
    }
  }; // LegalAgreementTextAsset
  #pragma pack(pop)
  static check_size<sizeof(LegalAgreementTextAsset), 48 + sizeof(::StringW)> __GlobalNamespace_LegalAgreementTextAssetSizeCheck;
  static_assert(sizeof(LegalAgreementTextAsset) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreementTextAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
