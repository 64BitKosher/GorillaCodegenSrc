// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ManipulatableObject
#include "GlobalNamespace/ManipulatableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ManipulatableSpinner
  class ManipulatableSpinner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ManipulatableSpinner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ManipulatableSpinner*, "", "ManipulatableSpinner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: ManipulatableSpinner
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class ManipulatableSpinner : public ::GlobalNamespace::ManipulatableObject {
    public:
    public:
    // public System.Single breakDistance
    // Size: 0x4
    // Offset: 0x38
    float breakDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean applyReleaseVelocity
    // Size: 0x1
    // Offset: 0x3C
    bool applyReleaseVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyReleaseVelocity and: releaseDrag
    char __padding1[0x3] = {};
    // public System.Single releaseDrag
    // Size: 0x4
    // Offset: 0x40
    float releaseDrag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lowSpeedThreshold
    // Size: 0x4
    // Offset: 0x44
    float lowSpeedThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lowSpeedDrag
    // Size: 0x4
    // Offset: 0x48
    float lowSpeedDrag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lowSpeedDrag and: spline
    char __padding4[0x4] = {};
    // private BezierSpline spline
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::BezierSpline* spline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BezierSpline*) == 0x8);
    // private System.Single previousHandT
    // Size: 0x4
    // Offset: 0x58
    float previousHandT;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentHandT
    // Size: 0x4
    // Offset: 0x5C
    float currentHandT;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tVelocity
    // Size: 0x4
    // Offset: 0x60
    float tVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <angle>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    float angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single breakDistance
    [[deprecated("Use field access instead!")]] float& dyn_breakDistance();
    // Get instance field reference: public System.Boolean applyReleaseVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_applyReleaseVelocity();
    // Get instance field reference: public System.Single releaseDrag
    [[deprecated("Use field access instead!")]] float& dyn_releaseDrag();
    // Get instance field reference: public System.Single lowSpeedThreshold
    [[deprecated("Use field access instead!")]] float& dyn_lowSpeedThreshold();
    // Get instance field reference: public System.Single lowSpeedDrag
    [[deprecated("Use field access instead!")]] float& dyn_lowSpeedDrag();
    // Get instance field reference: private BezierSpline spline
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& dyn_spline();
    // Get instance field reference: private System.Single previousHandT
    [[deprecated("Use field access instead!")]] float& dyn_previousHandT();
    // Get instance field reference: private System.Single currentHandT
    [[deprecated("Use field access instead!")]] float& dyn_currentHandT();
    // Get instance field reference: private System.Single tVelocity
    [[deprecated("Use field access instead!")]] float& dyn_tVelocity();
    // Get instance field reference: private System.Single <angle>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$angle$k__BackingField();
    // public System.Single get_angle()
    // Offset: 0x26B86E8
    float get_angle();
    // private System.Void set_angle(System.Single value)
    // Offset: 0x26B86F0
    void set_angle(float value);
    // private System.Void Awake()
    // Offset: 0x26B86F8
    void Awake();
    // private System.Single FindPositionOnSpline(UnityEngine.Vector3 grabPoint)
    // Offset: 0x26B878C
    float FindPositionOnSpline(::UnityEngine::Vector3 grabPoint);
    // public System.Void SetAngle(System.Single newAngle)
    // Offset: 0x26B8A9C
    void SetAngle(float newAngle);
    // public System.Void SetVelocity(System.Single newVelocity)
    // Offset: 0x26B8AA4
    void SetVelocity(float newVelocity);
    // protected override System.Void OnStartManipulation(UnityEngine.GameObject grabbingHand)
    // Offset: 0x26B8750
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::OnStartManipulation(UnityEngine.GameObject grabbingHand)
    void OnStartManipulation(::UnityEngine::GameObject* grabbingHand);
    // protected override System.Void OnStopManipulation(UnityEngine.GameObject releasingHand, UnityEngine.Vector3 releaseVelocity)
    // Offset: 0x26B8880
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::OnStopManipulation(UnityEngine.GameObject releasingHand, UnityEngine.Vector3 releaseVelocity)
    void OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity);
    // protected override System.Boolean ShouldHandDetach(UnityEngine.GameObject hand)
    // Offset: 0x26B8884
    // Implemented from: ManipulatableObject
    // Base method: System.Boolean ManipulatableObject::ShouldHandDetach(UnityEngine.GameObject hand)
    bool ShouldHandDetach(::UnityEngine::GameObject* hand);
    // protected override System.Void OnHeldUpdate(UnityEngine.GameObject hand)
    // Offset: 0x26B8950
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::OnHeldUpdate(UnityEngine.GameObject hand)
    void OnHeldUpdate(::UnityEngine::GameObject* hand);
    // protected override System.Void OnReleasedUpdate()
    // Offset: 0x26B8A24
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::OnReleasedUpdate()
    void OnReleasedUpdate();
    // public System.Void .ctor()
    // Offset: 0x26B8AAC
    // Implemented from: ManipulatableObject
    // Base method: System.Void ManipulatableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManipulatableSpinner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManipulatableSpinner*, creationType>()));
    }
  }; // ManipulatableSpinner
  #pragma pack(pop)
  static check_size<sizeof(ManipulatableSpinner), 100 + sizeof(float)> __GlobalNamespace_ManipulatableSpinnerSizeCheck;
  static_assert(sizeof(ManipulatableSpinner) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::get_angle
// Il2CppName: get_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ManipulatableSpinner::*)()>(&GlobalNamespace::ManipulatableSpinner::get_angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "get_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::set_angle
// Il2CppName: set_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(float)>(&GlobalNamespace::ManipulatableSpinner::set_angle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "set_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)()>(&GlobalNamespace::ManipulatableSpinner::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::FindPositionOnSpline
// Il2CppName: FindPositionOnSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ManipulatableSpinner::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ManipulatableSpinner::FindPositionOnSpline)> {
  static const MethodInfo* get() {
    static auto* grabPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "FindPositionOnSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::SetAngle
// Il2CppName: SetAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(float)>(&GlobalNamespace::ManipulatableSpinner::SetAngle)> {
  static const MethodInfo* get() {
    static auto* newAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "SetAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newAngle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::SetVelocity
// Il2CppName: SetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(float)>(&GlobalNamespace::ManipulatableSpinner::SetVelocity)> {
  static const MethodInfo* get() {
    static auto* newVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "SetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newVelocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::OnStartManipulation
// Il2CppName: OnStartManipulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableSpinner::OnStartManipulation)> {
  static const MethodInfo* get() {
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "OnStartManipulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::OnStopManipulation
// Il2CppName: OnStopManipulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3)>(&GlobalNamespace::ManipulatableSpinner::OnStopManipulation)> {
  static const MethodInfo* get() {
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* releaseVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "OnStopManipulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{releasingHand, releaseVelocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::ShouldHandDetach
// Il2CppName: ShouldHandDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ManipulatableSpinner::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableSpinner::ShouldHandDetach)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "ShouldHandDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::OnHeldUpdate
// Il2CppName: OnHeldUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableSpinner::OnHeldUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "OnHeldUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::OnReleasedUpdate
// Il2CppName: OnReleasedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableSpinner::*)()>(&GlobalNamespace::ManipulatableSpinner::OnReleasedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableSpinner*), "OnReleasedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableSpinner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
