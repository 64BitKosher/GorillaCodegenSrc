// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/InsightPassthroughStyleFlags
#include "GlobalNamespace/OVRPlugin_InsightPassthroughStyleFlags.hpp"
// Including type: OVRPlugin/Colorf
#include "GlobalNamespace/OVRPlugin_Colorf.hpp"
// Including type: OVRPlugin/InsightPassthroughColorMapType
#include "GlobalNamespace/OVRPlugin_InsightPassthroughColorMapType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2, "", "OVRPlugin/InsightPassthroughStyle2");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/InsightPassthroughStyle2
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::InsightPassthroughStyle2/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/InsightPassthroughStyleFlags Flags
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags Flags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags) == 0x4);
    // public System.Single TextureOpacityFactor
    // Size: 0x4
    // Offset: 0x4
    float TextureOpacityFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRPlugin/Colorf EdgeColor
    // Size: 0x10
    // Offset: 0x8
    ::GlobalNamespace::OVRPlugin::Colorf EdgeColor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Colorf) == 0x10);
    // public OVRPlugin/InsightPassthroughColorMapType TextureColorMapType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType TextureColorMapType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType) == 0x4);
    // public System.UInt32 TextureColorMapDataSize
    // Size: 0x4
    // Offset: 0x1C
    uint TextureColorMapDataSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.IntPtr TextureColorMapData
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr TextureColorMapData;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt64 LutSource
    // Size: 0x8
    // Offset: 0x28
    uint64_t LutSource;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 LutTarget
    // Size: 0x8
    // Offset: 0x30
    uint64_t LutTarget;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Single LutWeight
    // Size: 0x4
    // Offset: 0x38
    float LutWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: InsightPassthroughStyle2
    constexpr InsightPassthroughStyle2(::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags Flags_ = {}, float TextureOpacityFactor_ = {}, ::GlobalNamespace::OVRPlugin::Colorf EdgeColor_ = {}, ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType TextureColorMapType_ = {}, uint TextureColorMapDataSize_ = {}, ::System::IntPtr TextureColorMapData_ = {}, uint64_t LutSource_ = {}, uint64_t LutTarget_ = {}, float LutWeight_ = {}) noexcept : Flags{Flags_}, TextureOpacityFactor{TextureOpacityFactor_}, EdgeColor{EdgeColor_}, TextureColorMapType{TextureColorMapType_}, TextureColorMapDataSize{TextureColorMapDataSize_}, TextureColorMapData{TextureColorMapData_}, LutSource{LutSource_}, LutTarget{LutTarget_}, LutWeight{LutWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/InsightPassthroughStyleFlags Flags
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::InsightPassthroughStyleFlags& dyn_Flags();
    // Get instance field reference: public System.Single TextureOpacityFactor
    [[deprecated("Use field access instead!")]] float& dyn_TextureOpacityFactor();
    // Get instance field reference: public OVRPlugin/Colorf EdgeColor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Colorf& dyn_EdgeColor();
    // Get instance field reference: public OVRPlugin/InsightPassthroughColorMapType TextureColorMapType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::InsightPassthroughColorMapType& dyn_TextureColorMapType();
    // Get instance field reference: public System.UInt32 TextureColorMapDataSize
    [[deprecated("Use field access instead!")]] uint& dyn_TextureColorMapDataSize();
    // Get instance field reference: public System.IntPtr TextureColorMapData
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_TextureColorMapData();
    // Get instance field reference: public System.UInt64 LutSource
    [[deprecated("Use field access instead!")]] uint64_t& dyn_LutSource();
    // Get instance field reference: public System.UInt64 LutTarget
    [[deprecated("Use field access instead!")]] uint64_t& dyn_LutTarget();
    // Get instance field reference: public System.Single LutWeight
    [[deprecated("Use field access instead!")]] float& dyn_LutWeight();
    // public System.Void CopyTo(ref OVRPlugin/InsightPassthroughStyle target)
    // Offset: 0x49062D0
    void CopyTo(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle> target);
  }; // OVRPlugin/InsightPassthroughStyle2
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::InsightPassthroughStyle2), 56 + sizeof(float)> __GlobalNamespace_OVRPlugin_InsightPassthroughStyle2SizeCheck;
  static_assert(sizeof(OVRPlugin::InsightPassthroughStyle2) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::InsightPassthroughStyle2::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPlugin::InsightPassthroughStyle2::*)(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle>)>(&GlobalNamespace::OVRPlugin::InsightPassthroughStyle2::CopyTo)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughStyle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::InsightPassthroughStyle2), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
