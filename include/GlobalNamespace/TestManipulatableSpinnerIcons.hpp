// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ManipulatableSpinner
  class ManipulatableSpinner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TestManipulatableSpinnerIcons
  class TestManipulatableSpinnerIcons;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TestManipulatableSpinnerIcons);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TestManipulatableSpinnerIcons*, "", "TestManipulatableSpinnerIcons");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: TestManipulatableSpinnerIcons
  // [TokenAttribute] Offset: FFFFFFFF
  class TestManipulatableSpinnerIcons : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public ManipulatableSpinner spinner
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::ManipulatableSpinner* spinner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ManipulatableSpinner*) == 0x8);
    // public System.Single rotationScale
    // Size: 0x4
    // Offset: 0x28
    float rotationScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 rollerElementCount
    // Size: 0x4
    // Offset: 0x2C
    int rollerElementCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject rollerElementTemplate
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* rollerElementTemplate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject iconCanvas
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* iconCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject iconElementTemplate
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* iconElementTemplate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single iconOffset
    // Size: 0x4
    // Offset: 0x48
    float iconOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rollerElementAngle
    // Size: 0x4
    // Offset: 0x4C
    float rollerElementAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.UI.Text> visibleIcons
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>* visibleIcons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*) == 0x8);
    // private System.Single currentRotation
    // Size: 0x4
    // Offset: 0x58
    float currentRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 scrollableCount
    // Size: 0x4
    // Offset: 0x5C
    int scrollableCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 selectedIndex
    // Size: 0x4
    // Offset: 0x60
    int selectedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public ManipulatableSpinner spinner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ManipulatableSpinner*& dyn_spinner();
    // Get instance field reference: public System.Single rotationScale
    [[deprecated("Use field access instead!")]] float& dyn_rotationScale();
    // Get instance field reference: public System.Int32 rollerElementCount
    [[deprecated("Use field access instead!")]] int& dyn_rollerElementCount();
    // Get instance field reference: public UnityEngine.GameObject rollerElementTemplate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rollerElementTemplate();
    // Get instance field reference: public UnityEngine.GameObject iconCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_iconCanvas();
    // Get instance field reference: public UnityEngine.GameObject iconElementTemplate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_iconElementTemplate();
    // Get instance field reference: public System.Single iconOffset
    [[deprecated("Use field access instead!")]] float& dyn_iconOffset();
    // Get instance field reference: public System.Single rollerElementAngle
    [[deprecated("Use field access instead!")]] float& dyn_rollerElementAngle();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UI.Text> visibleIcons
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*& dyn_visibleIcons();
    // Get instance field reference: private System.Single currentRotation
    [[deprecated("Use field access instead!")]] float& dyn_currentRotation();
    // Get instance field reference: public System.Int32 scrollableCount
    [[deprecated("Use field access instead!")]] int& dyn_scrollableCount();
    // Get instance field reference: public System.Int32 selectedIndex
    [[deprecated("Use field access instead!")]] int& dyn_selectedIndex();
    // private System.Void Awake()
    // Offset: 0x26B7ACC
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x26B7D1C
    void LateUpdate();
    // private System.Void GenerateRollers()
    // Offset: 0x26B7AD0
    void GenerateRollers();
    // private System.Void UpdateSelectedIndex()
    // Offset: 0x26B7D50
    void UpdateSelectedIndex();
    // private System.Void UpdateRollers()
    // Offset: 0x26B7E0C
    void UpdateRollers();
    // public System.Void .ctor()
    // Offset: 0x26B8028
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestManipulatableSpinnerIcons* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestManipulatableSpinnerIcons*, creationType>()));
    }
  }; // TestManipulatableSpinnerIcons
  #pragma pack(pop)
  static check_size<sizeof(TestManipulatableSpinnerIcons), 96 + sizeof(int)> __GlobalNamespace_TestManipulatableSpinnerIconsSizeCheck;
  static_assert(sizeof(TestManipulatableSpinnerIcons) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestManipulatableSpinnerIcons::*)()>(&GlobalNamespace::TestManipulatableSpinnerIcons::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestManipulatableSpinnerIcons*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestManipulatableSpinnerIcons::*)()>(&GlobalNamespace::TestManipulatableSpinnerIcons::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestManipulatableSpinnerIcons*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::GenerateRollers
// Il2CppName: GenerateRollers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestManipulatableSpinnerIcons::*)()>(&GlobalNamespace::TestManipulatableSpinnerIcons::GenerateRollers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestManipulatableSpinnerIcons*), "GenerateRollers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::UpdateSelectedIndex
// Il2CppName: UpdateSelectedIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestManipulatableSpinnerIcons::*)()>(&GlobalNamespace::TestManipulatableSpinnerIcons::UpdateSelectedIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestManipulatableSpinnerIcons*), "UpdateSelectedIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::UpdateRollers
// Il2CppName: UpdateRollers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestManipulatableSpinnerIcons::*)()>(&GlobalNamespace::TestManipulatableSpinnerIcons::UpdateRollers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestManipulatableSpinnerIcons*), "UpdateRollers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TestManipulatableSpinnerIcons::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
