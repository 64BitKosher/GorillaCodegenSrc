// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpawnPoint
  class SpawnPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpawnPoint);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpawnPoint*, "", "SpawnPoint");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: SpawnPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class SpawnPoint : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GTZone startZone
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GTZone startZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // public System.Single startSize
    // Size: 0x4
    // Offset: 0x24
    float startSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public GTZone startZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_startZone();
    // Get instance field reference: public System.Single startSize
    [[deprecated("Use field access instead!")]] float& dyn_startSize();
    // public System.Void .ctor()
    // Offset: 0x278491C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpawnPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpawnPoint*, creationType>()));
    }
  }; // SpawnPoint
  #pragma pack(pop)
  static check_size<sizeof(SpawnPoint), 36 + sizeof(float)> __GlobalNamespace_SpawnPointSizeCheck;
  static_assert(sizeof(SpawnPoint) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpawnPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
