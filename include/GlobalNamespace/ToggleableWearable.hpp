// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: VRRig/WearablePackedStateSlots
#include "GlobalNamespace/VRRig_WearablePackedStateSlots.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: VRRig because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ToggleableWearable
  class ToggleableWearable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ToggleableWearable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ToggleableWearable*, "", "ToggleableWearable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA9
  #pragma pack(push, 1)
  // Autogenerated type: ToggleableWearable
  // [TokenAttribute] Offset: FFFFFFFF
  class ToggleableWearable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Renderer[] renderers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // public UnityEngine.Animator[] animators
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Animator*> animators;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Animator*>) == 0x8);
    // public System.Single animationTransitionDuration
    // Size: 0x4
    // Offset: 0x30
    float animationTransitionDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean startOn
    // Size: 0x1
    // Offset: 0x34
    bool startOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startOn and: audioSource
    char __padding3[0x3] = {};
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip toggleOnSound
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* toggleOnSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip toggleOffSound
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioClip* toggleOffSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.LayerMask layerMask
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single triggerRadius
    // Size: 0x4
    // Offset: 0x54
    float triggerRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 triggerOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 triggerOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public VRRig/WearablePackedStateSlots assignedSlot
    // Size: 0x4
    // Offset: 0x64
    ::GlobalNamespace::VRRig::WearablePackedStateSlots assignedSlot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig::WearablePackedStateSlots) == 0x4);
    // public System.Single turnOnVibrationDuration
    // Size: 0x4
    // Offset: 0x68
    float turnOnVibrationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single turnOnVibrationStrength
    // Size: 0x4
    // Offset: 0x6C
    float turnOnVibrationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single turnOffVibrationDuration
    // Size: 0x4
    // Offset: 0x70
    float turnOffVibrationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single turnOffVibrationStrength
    // Size: 0x4
    // Offset: 0x74
    float turnOffVibrationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VRRig ownerRig
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean ownerIsLocal
    // Size: 0x1
    // Offset: 0x80
    bool ownerIsLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isOn
    // Size: 0x1
    // Offset: 0x81
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOn and: toggleCooldownRange
    char __padding17[0x2] = {};
    // private UnityEngine.Vector2 toggleCooldownRange
    // Size: 0x8
    // Offset: 0x84
    ::UnityEngine::Vector2 toggleCooldownRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean hasAudioSource
    // Size: 0x1
    // Offset: 0x8C
    bool hasAudioSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasAudioSource and: colliders
    char __padding19[0x3] = {};
    // private readonly UnityEngine.Collider[] colliders
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::Collider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Int32 framesSinceCooldownAndExitingVolume
    // Size: 0x4
    // Offset: 0x98
    int framesSinceCooldownAndExitingVolume;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single toggleCooldownTimer
    // Size: 0x4
    // Offset: 0x9C
    float toggleCooldownTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 assignedSlotBitIndex
    // Size: 0x4
    // Offset: 0xA0
    int assignedSlotBitIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single progress
    // Size: 0x4
    // Offset: 0xA4
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean oneShot
    // Size: 0x1
    // Offset: 0xA8
    bool oneShot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int32 animParam_Progress
    static int _get_animParam_Progress();
    // Set static field: static private readonly System.Int32 animParam_Progress
    static void _set_animParam_Progress(int value);
    // Get instance field reference: public UnityEngine.Renderer[] renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn_renderers();
    // Get instance field reference: public UnityEngine.Animator[] animators
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Animator*>& dyn_animators();
    // Get instance field reference: public System.Single animationTransitionDuration
    [[deprecated("Use field access instead!")]] float& dyn_animationTransitionDuration();
    // Get instance field reference: public System.Boolean startOn
    [[deprecated("Use field access instead!")]] bool& dyn_startOn();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip toggleOnSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_toggleOnSound();
    // Get instance field reference: public UnityEngine.AudioClip toggleOffSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_toggleOffSound();
    // Get instance field reference: public UnityEngine.LayerMask layerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_layerMask();
    // Get instance field reference: public System.Single triggerRadius
    [[deprecated("Use field access instead!")]] float& dyn_triggerRadius();
    // Get instance field reference: public UnityEngine.Vector3 triggerOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_triggerOffset();
    // Get instance field reference: public VRRig/WearablePackedStateSlots assignedSlot
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig::WearablePackedStateSlots& dyn_assignedSlot();
    // Get instance field reference: public System.Single turnOnVibrationDuration
    [[deprecated("Use field access instead!")]] float& dyn_turnOnVibrationDuration();
    // Get instance field reference: public System.Single turnOnVibrationStrength
    [[deprecated("Use field access instead!")]] float& dyn_turnOnVibrationStrength();
    // Get instance field reference: public System.Single turnOffVibrationDuration
    [[deprecated("Use field access instead!")]] float& dyn_turnOffVibrationDuration();
    // Get instance field reference: public System.Single turnOffVibrationStrength
    [[deprecated("Use field access instead!")]] float& dyn_turnOffVibrationStrength();
    // Get instance field reference: private VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // Get instance field reference: private System.Boolean ownerIsLocal
    [[deprecated("Use field access instead!")]] bool& dyn_ownerIsLocal();
    // Get instance field reference: private System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // Get instance field reference: private UnityEngine.Vector2 toggleCooldownRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_toggleCooldownRange();
    // Get instance field reference: private System.Boolean hasAudioSource
    [[deprecated("Use field access instead!")]] bool& dyn_hasAudioSource();
    // Get instance field reference: private readonly UnityEngine.Collider[] colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_colliders();
    // Get instance field reference: private System.Int32 framesSinceCooldownAndExitingVolume
    [[deprecated("Use field access instead!")]] int& dyn_framesSinceCooldownAndExitingVolume();
    // Get instance field reference: private System.Single toggleCooldownTimer
    [[deprecated("Use field access instead!")]] float& dyn_toggleCooldownTimer();
    // Get instance field reference: private System.Int32 assignedSlotBitIndex
    [[deprecated("Use field access instead!")]] int& dyn_assignedSlotBitIndex();
    // Get instance field reference: private System.Single progress
    [[deprecated("Use field access instead!")]] float& dyn_progress();
    // Get instance field reference: private System.Boolean oneShot
    [[deprecated("Use field access instead!")]] bool& dyn_oneShot();
    // protected System.Void Awake()
    // Offset: 0x2898158
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0x2898424
    void LateUpdate();
    // private System.Void LocalToggle(System.Boolean isLeftHand, System.Boolean playAudio)
    // Offset: 0x2898780
    void LocalToggle(bool isLeftHand, bool playAudio);
    // private System.Void SharedSetState(System.Boolean state, System.Boolean playAudio)
    // Offset: 0x28988F0
    void SharedSetState(bool state, bool playAudio);
    // public System.Void .ctor()
    // Offset: 0x2898A2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ToggleableWearable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ToggleableWearable*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2898B00
    static void _cctor();
  }; // ToggleableWearable
  #pragma pack(pop)
  static check_size<sizeof(ToggleableWearable), 168 + sizeof(bool)> __GlobalNamespace_ToggleableWearableSizeCheck;
  static_assert(sizeof(ToggleableWearable) == 0xA9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ToggleableWearable::*)()>(&GlobalNamespace::ToggleableWearable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ToggleableWearable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ToggleableWearable::*)()>(&GlobalNamespace::ToggleableWearable::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ToggleableWearable*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::LocalToggle
// Il2CppName: LocalToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ToggleableWearable::*)(bool, bool)>(&GlobalNamespace::ToggleableWearable::LocalToggle)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playAudio = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ToggleableWearable*), "LocalToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand, playAudio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::SharedSetState
// Il2CppName: SharedSetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ToggleableWearable::*)(bool, bool)>(&GlobalNamespace::ToggleableWearable::SharedSetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playAudio = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ToggleableWearable*), "SharedSetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, playAudio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ToggleableWearable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ToggleableWearable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ToggleableWearable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
