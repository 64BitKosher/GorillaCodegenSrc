// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRSceneObjectTransformType
  class OVRSceneObjectTransformType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRSceneObjectTransformType);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSceneObjectTransformType*, "", "OVRSceneObjectTransformType");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: OVRSceneObjectTransformType
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRSceneObjectTransformType : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRSceneObjectTransformType::Transformation
    struct Transformation;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRSceneObjectTransformType/Transformation
    // [TokenAttribute] Offset: FFFFFFFF
    struct Transformation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Transformation
      constexpr Transformation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRSceneObjectTransformType/Transformation Volume
      static constexpr const int Volume = 0;
      // Get static field: static public OVRSceneObjectTransformType/Transformation Volume
      static ::GlobalNamespace::OVRSceneObjectTransformType::Transformation _get_Volume();
      // Set static field: static public OVRSceneObjectTransformType/Transformation Volume
      static void _set_Volume(::GlobalNamespace::OVRSceneObjectTransformType::Transformation value);
      // static field const value: static public OVRSceneObjectTransformType/Transformation Plane
      static constexpr const int Plane = 1;
      // Get static field: static public OVRSceneObjectTransformType/Transformation Plane
      static ::GlobalNamespace::OVRSceneObjectTransformType::Transformation _get_Plane();
      // Set static field: static public OVRSceneObjectTransformType/Transformation Plane
      static void _set_Plane(::GlobalNamespace::OVRSceneObjectTransformType::Transformation value);
      // static field const value: static public OVRSceneObjectTransformType/Transformation None
      static constexpr const int None = 2;
      // Get static field: static public OVRSceneObjectTransformType/Transformation None
      static ::GlobalNamespace::OVRSceneObjectTransformType::Transformation _get_None();
      // Set static field: static public OVRSceneObjectTransformType/Transformation None
      static void _set_None(::GlobalNamespace::OVRSceneObjectTransformType::Transformation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRSceneObjectTransformType/Transformation
    #pragma pack(pop)
    static check_size<sizeof(OVRSceneObjectTransformType::Transformation), 0 + sizeof(int)> __GlobalNamespace_OVRSceneObjectTransformType_TransformationSizeCheck;
    static_assert(sizeof(OVRSceneObjectTransformType::Transformation) == 0x4);
    public:
    // public OVRSceneObjectTransformType/Transformation TransformType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRSceneObjectTransformType::Transformation TransformType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneObjectTransformType::Transformation) == 0x4);
    public:
    // Get instance field reference: public OVRSceneObjectTransformType/Transformation TransformType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneObjectTransformType::Transformation& dyn_TransformType();
    // public System.Void .ctor()
    // Offset: 0x4922E28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSceneObjectTransformType* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSceneObjectTransformType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSceneObjectTransformType*, creationType>()));
    }
  }; // OVRSceneObjectTransformType
  #pragma pack(pop)
  static check_size<sizeof(OVRSceneObjectTransformType), 32 + sizeof(::GlobalNamespace::OVRSceneObjectTransformType::Transformation)> __GlobalNamespace_OVRSceneObjectTransformTypeSizeCheck;
  static_assert(sizeof(OVRSceneObjectTransformType) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSceneObjectTransformType::Transformation, "", "OVRSceneObjectTransformType/Transformation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneObjectTransformType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
