// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.LazyLoadReference`1
#include "UnityEngine/LazyLoadReference_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAsset
  class TextAsset;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AssetContentAPI
  class AssetContentAPI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AssetContentAPI);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AssetContentAPI*, "", "AssetContentAPI");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: AssetContentAPI
  // [TokenAttribute] Offset: FFFFFFFF
  class AssetContentAPI : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String bundleName
    // Size: 0x8
    // Offset: 0x18
    ::StringW bundleName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.LazyLoadReference`1<UnityEngine.TextAsset> bundleFile
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::UnityEngine::LazyLoadReference_1<::UnityEngine::TextAsset*> bundleFile;
    // public UnityEngine.Object[] assets
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Object*> assets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Object*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String bundleName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bundleName();
    // Get instance field reference: public UnityEngine.LazyLoadReference`1<UnityEngine.TextAsset> bundleFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::LazyLoadReference_1<::UnityEngine::TextAsset*>& dyn_bundleFile();
    // Get instance field reference: public UnityEngine.Object[] assets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Object*>& dyn_assets();
    // public System.Void .ctor()
    // Offset: 0x278492C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssetContentAPI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssetContentAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssetContentAPI*, creationType>()));
    }
  }; // AssetContentAPI
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AssetContentAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
