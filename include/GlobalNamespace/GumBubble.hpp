// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LerpComponent
#include "GlobalNamespace/LerpComponent.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GumBubble
  class GumBubble;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GumBubble);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GumBubble*, "", "GumBubble");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: GumBubble
  // [TokenAttribute] Offset: FFFFFFFF
  class GumBubble : public ::GlobalNamespace::LerpComponent {
    public:
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 targetScale
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 targetScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: targetScale and: lerpCurve
    char __padding1[0x4] = {};
    // private UnityEngine.AnimationCurve _lerpCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* lerpCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _sfxInflate
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioClip* sfxInflate;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip _sfxPop
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AudioClip* sfxPop;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single _delayInflate
    // Size: 0x4
    // Offset: 0x78
    float delayInflate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayPop
    // Size: 0x4
    // Offset: 0x7C
    float delayPop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _animating
    // Size: 0x1
    // Offset: 0x80
    bool animating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: animating and: onPop
    char __padding8[0x7] = {};
    // public UnityEngine.Events.UnityEvent onPop
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Events::UnityEvent* onPop;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onInflate
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Events::UnityEvent* onInflate;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Boolean _done
    // Size: 0x1
    // Offset: 0x98
    bool done;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: done and: sinceInflate
    char __padding11[0x7] = {};
    // private TimeSince _sinceInflate
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::TimeSince sinceInflate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public UnityEngine.Vector3 targetScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetScale();
    // Get instance field reference: private UnityEngine.AnimationCurve _lerpCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__lerpCurve();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.AudioClip _sfxInflate
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__sfxInflate();
    // Get instance field reference: private UnityEngine.AudioClip _sfxPop
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__sfxPop();
    // Get instance field reference: private System.Single _delayInflate
    [[deprecated("Use field access instead!")]] float& dyn__delayInflate();
    // Get instance field reference: private System.Single _delayPop
    [[deprecated("Use field access instead!")]] float& dyn__delayPop();
    // Get instance field reference: private System.Boolean _animating
    [[deprecated("Use field access instead!")]] bool& dyn__animating();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onPop
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onPop();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onInflate
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onInflate();
    // Get instance field reference: private System.Boolean _done
    [[deprecated("Use field access instead!")]] bool& dyn__done();
    // Get instance field reference: private TimeSince _sinceInflate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn__sinceInflate();
    // private System.Void Awake()
    // Offset: 0x26D566C
    void Awake();
    // public System.Void InflateDelayed()
    // Offset: 0x26D54DC
    void InflateDelayed();
    // public System.Void InflateDelayed(System.Single delay)
    // Offset: 0x26D56A4
    void InflateDelayed(float delay);
    // public System.Void Inflate()
    // Offset: 0x26D5704
    void Inflate();
    // public System.Void Pop()
    // Offset: 0x26D5810
    void Pop();
    // private System.Void Update()
    // Offset: 0x26D5908
    void Update();
    // protected override System.Void OnLerp(System.Single t)
    // Offset: 0x26D5A20
    // Implemented from: LerpComponent
    // Base method: System.Void LerpComponent::OnLerp(System.Single t)
    void OnLerp(float t);
    // public System.Void .ctor()
    // Offset: 0x26D5B44
    // Implemented from: LerpComponent
    // Base method: System.Void LerpComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GumBubble* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GumBubble*, creationType>()));
    }
  }; // GumBubble
  #pragma pack(pop)
  static check_size<sizeof(GumBubble), 160 + sizeof(::GlobalNamespace::TimeSince)> __GlobalNamespace_GumBubbleSizeCheck;
  static_assert(sizeof(GumBubble) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)()>(&GlobalNamespace::GumBubble::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::InflateDelayed
// Il2CppName: InflateDelayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)()>(&GlobalNamespace::GumBubble::InflateDelayed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "InflateDelayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::InflateDelayed
// Il2CppName: InflateDelayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)(float)>(&GlobalNamespace::GumBubble::InflateDelayed)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "InflateDelayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::Inflate
// Il2CppName: Inflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)()>(&GlobalNamespace::GumBubble::Inflate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "Inflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)()>(&GlobalNamespace::GumBubble::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)()>(&GlobalNamespace::GumBubble::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::OnLerp
// Il2CppName: OnLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GumBubble::*)(float)>(&GlobalNamespace::GumBubble::OnLerp)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GumBubble*), "OnLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GumBubble::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
