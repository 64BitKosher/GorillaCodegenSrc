// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevInspectorScanner
  class DevInspectorScanner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevInspectorScanner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevInspectorScanner*, "", "DevInspectorScanner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: DevInspectorScanner
  // [TokenAttribute] Offset: FFFFFFFF
  class DevInspectorScanner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.UI.Text hintTextOutput
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* hintTextOutput;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.Single scanDistance
    // Size: 0x4
    // Offset: 0x28
    float scanDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scanAngle
    // Size: 0x4
    // Offset: 0x2C
    float scanAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask scanLayerMask
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::LayerMask scanLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: scanLayerMask and: targetComponentName
    char __padding3[0x4] = {};
    // public System.String targetComponentName
    // Size: 0x8
    // Offset: 0x38
    ::StringW targetComponentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single rayPerDegree
    // Size: 0x4
    // Offset: 0x40
    float rayPerDegree;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.UI.Text hintTextOutput
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_hintTextOutput();
    // Get instance field reference: public System.Single scanDistance
    [[deprecated("Use field access instead!")]] float& dyn_scanDistance();
    // Get instance field reference: public System.Single scanAngle
    [[deprecated("Use field access instead!")]] float& dyn_scanAngle();
    // Get instance field reference: public UnityEngine.LayerMask scanLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_scanLayerMask();
    // Get instance field reference: public System.String targetComponentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetComponentName();
    // Get instance field reference: public System.Single rayPerDegree
    [[deprecated("Use field access instead!")]] float& dyn_rayPerDegree();
    // public System.Void .ctor()
    // Offset: 0x279AE8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevInspectorScanner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevInspectorScanner*, creationType>()));
    }
  }; // DevInspectorScanner
  #pragma pack(pop)
  static check_size<sizeof(DevInspectorScanner), 64 + sizeof(float)> __GlobalNamespace_DevInspectorScannerSizeCheck;
  static_assert(sizeof(DevInspectorScanner) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevInspectorScanner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
