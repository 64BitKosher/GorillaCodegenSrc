// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderMaterialOptions
  class BuilderMaterialOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderMaterialOptions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderMaterialOptions*, "", "BuilderMaterialOptions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BuilderMaterialOptions
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class BuilderMaterialOptions : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::BuilderMaterialOptions::Options
    class Options;
    public:
    // public System.Collections.Generic.List`1<BuilderMaterialOptions/Options> options
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderMaterialOptions::Options*>* options;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderMaterialOptions::Options*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderMaterialOptions/Options> options
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderMaterialOptions::Options*>*& dyn_options();
    // public UnityEngine.Material GetMaterialFromType(System.Int32 materialType)
    // Offset: 0x26E0BE4
    ::UnityEngine::Material* GetMaterialFromType(int materialType);
    // public UnityEngine.Material GetDefaultMaterial()
    // Offset: 0x26E0D6C
    ::UnityEngine::Material* GetDefaultMaterial();
    // public System.Int32 GetDefaultMaterialType()
    // Offset: 0x26E0DEC
    int GetDefaultMaterialType();
    // public System.Void .ctor()
    // Offset: 0x26E0E80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderMaterialOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderMaterialOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderMaterialOptions*, creationType>()));
    }
  }; // BuilderMaterialOptions
  #pragma pack(pop)
  static check_size<sizeof(BuilderMaterialOptions), 24 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderMaterialOptions::Options*>*)> __GlobalNamespace_BuilderMaterialOptionsSizeCheck;
  static_assert(sizeof(BuilderMaterialOptions) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderMaterialOptions::GetMaterialFromType
// Il2CppName: GetMaterialFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::BuilderMaterialOptions::*)(int)>(&GlobalNamespace::BuilderMaterialOptions::GetMaterialFromType)> {
  static const MethodInfo* get() {
    static auto* materialType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderMaterialOptions*), "GetMaterialFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderMaterialOptions::GetDefaultMaterial
// Il2CppName: GetDefaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::BuilderMaterialOptions::*)()>(&GlobalNamespace::BuilderMaterialOptions::GetDefaultMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderMaterialOptions*), "GetDefaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderMaterialOptions::GetDefaultMaterialType
// Il2CppName: GetDefaultMaterialType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderMaterialOptions::*)()>(&GlobalNamespace::BuilderMaterialOptions::GetDefaultMaterialType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderMaterialOptions*), "GetDefaultMaterialType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderMaterialOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
