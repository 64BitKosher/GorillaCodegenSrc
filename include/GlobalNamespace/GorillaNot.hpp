// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Realtime.IOnEventCallback
#include "Photon/Realtime/IOnEventCallback.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ReportInfo
  class ReportInfo;
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: EventData
  class EventData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaNot
  class GorillaNot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaNot);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaNot*, "", "GorillaNot");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNot
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaNot : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Realtime::IOnEventCallback*/ {
    public:
    // Nested type: ::GlobalNamespace::GorillaNot::RPCCallTracker
    class RPCCallTracker;
    // Nested type: ::GlobalNamespace::GorillaNot::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::GorillaNot::$CheckDirtyRoom$d__75
    class $CheckDirtyRoom$d__75;
    // Nested type: ::GlobalNamespace::GorillaNot::$CheckReports$d__53
    class $CheckReports$d__53;
    // Nested type: ::GlobalNamespace::GorillaNot::$QuitDelay$d__64
    class $QuitDelay$d__64;
    public:
    // private System.Boolean _sendReport
    // Size: 0x1
    // Offset: 0x28
    bool sendReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendReport and: suspiciousPlayerId
    char __padding0[0x7] = {};
    // private System.String _suspiciousPlayerId
    // Size: 0x8
    // Offset: 0x30
    ::StringW suspiciousPlayerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _suspiciousPlayerName
    // Size: 0x8
    // Offset: 0x38
    ::StringW suspiciousPlayerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _suspiciousReason
    // Size: 0x8
    // Offset: 0x40
    ::StringW suspiciousReason;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Collections.Generic.List`1<System.String> reportedPlayers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* reportedPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Byte roomSize
    // Size: 0x1
    // Offset: 0x50
    uint8_t roomSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: roomSize and: lastCheck
    char __padding5[0x3] = {};
    // public System.Single lastCheck
    // Size: 0x4
    // Offset: 0x54
    float lastCheck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single checkCooldown
    // Size: 0x4
    // Offset: 0x58
    float checkCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single userDecayTime
    // Size: 0x4
    // Offset: 0x5C
    float userDecayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Photon.Realtime.Player currentMasterClient
    // Size: 0x8
    // Offset: 0x60
    ::Photon::Realtime::Player* currentMasterClient;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Boolean testAssault
    // Size: 0x1
    // Offset: 0x68
    bool testAssault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testAssault and: lowestActorNumber
    char __padding10[0x3] = {};
    // private System.Int32 lowestActorNumber
    // Size: 0x4
    // Offset: 0x6C
    int lowestActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 calls
    // Size: 0x4
    // Offset: 0x70
    int calls;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rpcCallLimit
    // Size: 0x4
    // Offset: 0x74
    int rpcCallLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 logErrorMax
    // Size: 0x4
    // Offset: 0x78
    int logErrorMax;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rpcErrorMax
    // Size: 0x4
    // Offset: 0x7C
    int rpcErrorMax;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object outObj
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppObject* outObj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Photon.Realtime.Player tempPlayer
    // Size: 0x8
    // Offset: 0x88
    ::Photon::Realtime::Player* tempPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Int32 logErrorCount
    // Size: 0x4
    // Offset: 0x90
    int logErrorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 stringIndex
    // Size: 0x4
    // Offset: 0x94
    int stringIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String playerID
    // Size: 0x8
    // Offset: 0x98
    ::StringW playerID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String playerNick
    // Size: 0x8
    // Offset: 0xA0
    ::StringW playerNick;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 lastServerTimestamp
    // Size: 0x4
    // Offset: 0xA8
    int lastServerTimestamp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastServerTimestamp and: cachedPlayerList
    char __padding22[0x4] = {};
    // public Photon.Realtime.Player[] cachedPlayerList
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::Photon::Realtime::Player*> cachedPlayerList;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Realtime::Player*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.Dictionary`2<System.String,GorillaNot/RPCCallTracker>> userRPCCalls
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::GorillaNot::RPCCallTracker*>*>* userRPCCalls;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::GorillaNot::RPCCallTracker*>*>*) == 0x8);
    // public System.String roomGameMode
    // Size: 0x8
    // Offset: 0xC0
    ::StringW roomGameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Queue`1<ReportInfo> reportQueue
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::ReportInfo*>* reportQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::ReportInfo*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.HashSet`1<ReportInfo>> queuedReports
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::ReportInfo*>*>* queuedReports;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::ReportInfo*>*>*) == 0x8);
    // private System.Boolean closeDirty
    // Size: 0x1
    // Offset: 0xD8
    bool closeDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closeDirty and: hashTable
    char __padding28[0x7] = {};
    // private ExitGames.Client.Photon.Hashtable hashTable
    // Size: 0x8
    // Offset: 0xE0
    ::ExitGames::Client::Photon::Hashtable* hashTable;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::Hashtable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IOnEventCallback
    operator ::Photon::Realtime::IOnEventCallback() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IOnEventCallback*>(this);
    }
    // Get static field: static public GorillaNot instance
    static ::GlobalNamespace::GorillaNot* _get_instance();
    // Set static field: static public GorillaNot instance
    static void _set_instance(::GlobalNamespace::GorillaNot* value);
    // static field const value: static private System.Byte ReportAssault
    static constexpr const uint8_t ReportAssault = 8u;
    // Get static field: static private System.Byte ReportAssault
    static uint8_t _get_ReportAssault();
    // Set static field: static private System.Byte ReportAssault
    static void _set_ReportAssault(uint8_t value);
    // static field const value: static private System.String InvalidRPC
    static constexpr const char* InvalidRPC = "invalid RPC stuff";
    // Get static field: static private System.String InvalidRPC
    static ::StringW _get_InvalidRPC();
    // Set static field: static private System.String InvalidRPC
    static void _set_InvalidRPC(::StringW value);
    // Get static field: static private System.Int32[] targetActors
    static ::ArrayW<int> _get_targetActors();
    // Set static field: static private System.Int32[] targetActors
    static void _set_targetActors(::ArrayW<int> value);
    // Get instance field reference: private System.Boolean _sendReport
    [[deprecated("Use field access instead!")]] bool& dyn__sendReport();
    // Get instance field reference: private System.String _suspiciousPlayerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousPlayerId();
    // Get instance field reference: private System.String _suspiciousPlayerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousPlayerName();
    // Get instance field reference: private System.String _suspiciousReason
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousReason();
    // Get instance field reference: System.Collections.Generic.List`1<System.String> reportedPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_reportedPlayers();
    // Get instance field reference: public System.Byte roomSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_roomSize();
    // Get instance field reference: public System.Single lastCheck
    [[deprecated("Use field access instead!")]] float& dyn_lastCheck();
    // Get instance field reference: public System.Single checkCooldown
    [[deprecated("Use field access instead!")]] float& dyn_checkCooldown();
    // Get instance field reference: public System.Single userDecayTime
    [[deprecated("Use field access instead!")]] float& dyn_userDecayTime();
    // Get instance field reference: public Photon.Realtime.Player currentMasterClient
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentMasterClient();
    // Get instance field reference: public System.Boolean testAssault
    [[deprecated("Use field access instead!")]] bool& dyn_testAssault();
    // Get instance field reference: private System.Int32 lowestActorNumber
    [[deprecated("Use field access instead!")]] int& dyn_lowestActorNumber();
    // Get instance field reference: private System.Int32 calls
    [[deprecated("Use field access instead!")]] int& dyn_calls();
    // Get instance field reference: public System.Int32 rpcCallLimit
    [[deprecated("Use field access instead!")]] int& dyn_rpcCallLimit();
    // Get instance field reference: public System.Int32 logErrorMax
    [[deprecated("Use field access instead!")]] int& dyn_logErrorMax();
    // Get instance field reference: public System.Int32 rpcErrorMax
    [[deprecated("Use field access instead!")]] int& dyn_rpcErrorMax();
    // Get instance field reference: private System.Object outObj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_outObj();
    // Get instance field reference: private Photon.Realtime.Player tempPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempPlayer();
    // Get instance field reference: private System.Int32 logErrorCount
    [[deprecated("Use field access instead!")]] int& dyn_logErrorCount();
    // Get instance field reference: private System.Int32 stringIndex
    [[deprecated("Use field access instead!")]] int& dyn_stringIndex();
    // Get instance field reference: private System.String playerID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerID();
    // Get instance field reference: private System.String playerNick
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerNick();
    // Get instance field reference: private System.Int32 lastServerTimestamp
    [[deprecated("Use field access instead!")]] int& dyn_lastServerTimestamp();
    // Get instance field reference: public Photon.Realtime.Player[] cachedPlayerList
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Realtime::Player*>& dyn_cachedPlayerList();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.Dictionary`2<System.String,GorillaNot/RPCCallTracker>> userRPCCalls
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::GorillaNot::RPCCallTracker*>*>*& dyn_userRPCCalls();
    // Get instance field reference: public System.String roomGameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_roomGameMode();
    // Get instance field reference: private System.Collections.Generic.Queue`1<ReportInfo> reportQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::ReportInfo*>*& dyn_reportQueue();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.HashSet`1<ReportInfo>> queuedReports
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::ReportInfo*>*>*& dyn_queuedReports();
    // Get instance field reference: private System.Boolean closeDirty
    [[deprecated("Use field access instead!")]] bool& dyn_closeDirty();
    // Get instance field reference: private ExitGames.Client.Photon.Hashtable hashTable
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::Hashtable*& dyn_hashTable();
    // private System.Boolean get_sendReport()
    // Offset: 0x2711E54
    bool get_sendReport();
    // private System.Void set_sendReport(System.Boolean value)
    // Offset: 0x2711E5C
    void set_sendReport(bool value);
    // private System.String get_suspiciousPlayerId()
    // Offset: 0x2711E74
    ::StringW get_suspiciousPlayerId();
    // private System.Void set_suspiciousPlayerId(System.String value)
    // Offset: 0x2711E7C
    void set_suspiciousPlayerId(::StringW value);
    // private System.String get_suspiciousPlayerName()
    // Offset: 0x2711EF8
    ::StringW get_suspiciousPlayerName();
    // private System.Void set_suspiciousPlayerName(System.String value)
    // Offset: 0x2711F00
    void set_suspiciousPlayerName(::StringW value);
    // private System.String get_suspiciousReason()
    // Offset: 0x2711F7C
    ::StringW get_suspiciousReason();
    // private System.Void set_suspiciousReason(System.String value)
    // Offset: 0x2711F84
    void set_suspiciousReason(::StringW value);
    // private System.Void Start()
    // Offset: 0x2712000
    void Start();
    // private System.Void OnApplicationPause(System.Boolean paused)
    // Offset: 0x2712420
    void OnApplicationPause(bool paused);
    // public System.Void LogErrorCount(System.String logString, System.String stackTrace, UnityEngine.LogType type)
    // Offset: 0x271277C
    void LogErrorCount(::StringW logString, ::StringW stackTrace, ::UnityEngine::LogType type);
    // public System.Void SendReport(System.String susReason, System.String susId, System.String susNick)
    // Offset: 0x2712A50
    void SendReport(::StringW susReason, ::StringW susId, ::StringW susNick);
    // public System.Void SendReportImediately(System.String susReason, System.String susId, System.String susNick)
    // Offset: 0x2712C78
    void SendReportImediately(::StringW susReason, ::StringW susId, ::StringW susNick);
    // private System.Void DispatchReport()
    // Offset: 0x2712D80
    void DispatchReport();
    // private System.Collections.IEnumerator CheckReports()
    // Offset: 0x27123AC
    ::System::Collections::IEnumerator* CheckReports();
    // private System.Void RefreshRPCs()
    // Offset: 0x27124E0
    void RefreshRPCs();
    // private System.Int32 LowestActorNumber()
    // Offset: 0x271340C
    int LowestActorNumber();
    // static public System.Void IncrementRPCCall(Photon.Pun.PhotonMessageInfo info, System.String callingMethod)
    // Offset: 0x27136F8
    static void IncrementRPCCall(::Photon::Pun::PhotonMessageInfo info, ::StringW callingMethod);
    // static public System.Void IncrementRPCCall(PhotonMessageInfoWrapped infoWrapped, System.String callingMethod)
    // Offset: 0x271378C
    static void IncrementRPCCall(::GlobalNamespace::PhotonMessageInfoWrapped infoWrapped, ::StringW callingMethod);
    // private System.Void IncrementRPCCallLocal(PhotonMessageInfoWrapped infoWrapped, System.String rpcFunction)
    // Offset: 0x271380C
    void IncrementRPCCallLocal(::GlobalNamespace::PhotonMessageInfoWrapped infoWrapped, ::StringW rpcFunction);
    // private System.Boolean IncrementRPCTracker(in Photon.Realtime.Player sender, in System.String rpcFunction, in System.Int32 callLimit)
    // Offset: 0x2712A24
    bool IncrementRPCTracker(ByRef<::Photon::Realtime::Player*> sender, ByRef<::StringW> rpcFunction, ByRef<int> callLimit);
    // private System.Boolean IncrementRPCTracker(in System.String userId, in System.String rpcFunction, in System.Int32 callLimit)
    // Offset: 0x2713944
    bool IncrementRPCTracker(ByRef<::StringW> userId, ByRef<::StringW> rpcFunction, ByRef<int> callLimit);
    // private GorillaNot/RPCCallTracker GetRPCCallTracker(System.String userID, System.String rpcFunction)
    // Offset: 0x2713990
    ::GlobalNamespace::GorillaNot::RPCCallTracker* GetRPCCallTracker(::StringW userID, ::StringW rpcFunction);
    // private System.Collections.IEnumerator QuitDelay()
    // Offset: 0x27133B4
    ::System::Collections::IEnumerator* QuitDelay();
    // private System.Void SetToRoomCreatorIfHere()
    // Offset: 0x2713B5C
    void SetToRoomCreatorIfHere();
    // private System.Boolean ShouldDisconnectFromRoom()
    // Offset: 0x27132CC
    bool ShouldDisconnectFromRoom();
    // private System.Void CloseInvalidRoom()
    // Offset: 0x2713C30
    void CloseInvalidRoom();
    // private System.Void Photon.Realtime.IOnEventCallback.OnEvent(ExitGames.Client.Photon.EventData photonEvent)
    // Offset: 0x2713D18
    void Photon_Realtime_IOnEventCallback_OnEvent(::ExitGames::Client::Photon::EventData* photonEvent);
    // private System.Boolean ValidRoomName()
    // Offset: 0x2714F60
    bool ValidRoomName();
    // private System.Boolean ShouldRoomBeClosed()
    // Offset: 0x27148F0
    bool ShouldRoomBeClosed();
    // private System.Void ValidateRemoteVoiceLink(Photon.Voice.Unity.RemoteVoiceLink voiceLink)
    // Offset: 0x271509C
    void ValidateRemoteVoiceLink(::Photon::Voice::Unity::RemoteVoiceLink* voiceLink);
    // private System.Boolean CheckAndUpdateReportData(ReportInfo newReport)
    // Offset: 0x2712B14
    bool CheckAndUpdateReportData(::GlobalNamespace::ReportInfo* newReport);
    // private System.Collections.IEnumerator CheckDirtyRoom()
    // Offset: 0x2715028
    ::System::Collections::IEnumerator* CheckDirtyRoom();
    // public System.Void .ctor()
    // Offset: 0x27154C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaNot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaNot*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x27156AC
    static void _cctor();
    // private System.Void <Start>b__47_0(System.String data)
    // Offset: 0x2715734
    void $Start$b__47_0(::StringW data);
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x27134C4
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x271360C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnLeftRoom()
    // Offset: 0x2714B14
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
    // public override System.Void OnJoinedRoom()
    // Offset: 0x2714B94
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
  }; // GorillaNot
  #pragma pack(pop)
  static check_size<sizeof(GorillaNot), 224 + sizeof(::ExitGames::Client::Photon::Hashtable*)> __GlobalNamespace_GorillaNotSizeCheck;
  static_assert(sizeof(GorillaNot) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::get_sendReport
// Il2CppName: get_sendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::get_sendReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "get_sendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::set_sendReport
// Il2CppName: set_sendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(bool)>(&GlobalNamespace::GorillaNot::set_sendReport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "set_sendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::get_suspiciousPlayerId
// Il2CppName: get_suspiciousPlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::get_suspiciousPlayerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "get_suspiciousPlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::set_suspiciousPlayerId
// Il2CppName: set_suspiciousPlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW)>(&GlobalNamespace::GorillaNot::set_suspiciousPlayerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "set_suspiciousPlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::get_suspiciousPlayerName
// Il2CppName: get_suspiciousPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::get_suspiciousPlayerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "get_suspiciousPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::set_suspiciousPlayerName
// Il2CppName: set_suspiciousPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW)>(&GlobalNamespace::GorillaNot::set_suspiciousPlayerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "set_suspiciousPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::get_suspiciousReason
// Il2CppName: get_suspiciousReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::get_suspiciousReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "get_suspiciousReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::set_suspiciousReason
// Il2CppName: set_suspiciousReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW)>(&GlobalNamespace::GorillaNot::set_suspiciousReason)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "set_suspiciousReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(bool)>(&GlobalNamespace::GorillaNot::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::LogErrorCount
// Il2CppName: LogErrorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&GlobalNamespace::GorillaNot::LogErrorCount)> {
  static const MethodInfo* get() {
    static auto* logString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "LogErrorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logString, stackTrace, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::SendReport
// Il2CppName: SendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::GorillaNot::SendReport)> {
  static const MethodInfo* get() {
    static auto* susReason = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* susId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* susNick = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "SendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{susReason, susId, susNick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::SendReportImediately
// Il2CppName: SendReportImediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::GorillaNot::SendReportImediately)> {
  static const MethodInfo* get() {
    static auto* susReason = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* susId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* susNick = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "SendReportImediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{susReason, susId, susNick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::DispatchReport
// Il2CppName: DispatchReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::DispatchReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "DispatchReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::CheckReports
// Il2CppName: CheckReports
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::CheckReports)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "CheckReports", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::RefreshRPCs
// Il2CppName: RefreshRPCs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::RefreshRPCs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "RefreshRPCs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::LowestActorNumber
// Il2CppName: LowestActorNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::LowestActorNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "LowestActorNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::IncrementRPCCall
// Il2CppName: IncrementRPCCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Pun::PhotonMessageInfo, ::StringW)>(&GlobalNamespace::GorillaNot::IncrementRPCCall)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    static auto* callingMethod = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "IncrementRPCCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, callingMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::IncrementRPCCall
// Il2CppName: IncrementRPCCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::PhotonMessageInfoWrapped, ::StringW)>(&GlobalNamespace::GorillaNot::IncrementRPCCall)> {
  static const MethodInfo* get() {
    static auto* infoWrapped = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    static auto* callingMethod = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "IncrementRPCCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infoWrapped, callingMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::IncrementRPCCallLocal
// Il2CppName: IncrementRPCCallLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::GlobalNamespace::PhotonMessageInfoWrapped, ::StringW)>(&GlobalNamespace::GorillaNot::IncrementRPCCallLocal)> {
  static const MethodInfo* get() {
    static auto* infoWrapped = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    static auto* rpcFunction = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "IncrementRPCCallLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infoWrapped, rpcFunction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::IncrementRPCTracker
// Il2CppName: IncrementRPCTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)(ByRef<::Photon::Realtime::Player*>, ByRef<::StringW>, ByRef<int>)>(&GlobalNamespace::GorillaNot::IncrementRPCTracker)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->this_arg;
    static auto* rpcFunction = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* callLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "IncrementRPCTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, rpcFunction, callLimit});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::IncrementRPCTracker
// Il2CppName: IncrementRPCTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)(ByRef<::StringW>, ByRef<::StringW>, ByRef<int>)>(&GlobalNamespace::GorillaNot::IncrementRPCTracker)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* rpcFunction = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* callLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "IncrementRPCTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, rpcFunction, callLimit});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::GetRPCCallTracker
// Il2CppName: GetRPCCallTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaNot::RPCCallTracker* (GlobalNamespace::GorillaNot::*)(::StringW, ::StringW)>(&GlobalNamespace::GorillaNot::GetRPCCallTracker)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rpcFunction = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "GetRPCCallTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID, rpcFunction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::QuitDelay
// Il2CppName: QuitDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::QuitDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "QuitDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::SetToRoomCreatorIfHere
// Il2CppName: SetToRoomCreatorIfHere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::SetToRoomCreatorIfHere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "SetToRoomCreatorIfHere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::ShouldDisconnectFromRoom
// Il2CppName: ShouldDisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::ShouldDisconnectFromRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "ShouldDisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::CloseInvalidRoom
// Il2CppName: CloseInvalidRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::CloseInvalidRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "CloseInvalidRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::Photon_Realtime_IOnEventCallback_OnEvent
// Il2CppName: Photon.Realtime.IOnEventCallback.OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::ExitGames::Client::Photon::EventData*)>(&GlobalNamespace::GorillaNot::Photon_Realtime_IOnEventCallback_OnEvent)> {
  static const MethodInfo* get() {
    static auto* photonEvent = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "Photon.Realtime.IOnEventCallback.OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{photonEvent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::ValidRoomName
// Il2CppName: ValidRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::ValidRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "ValidRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::ShouldRoomBeClosed
// Il2CppName: ShouldRoomBeClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::ShouldRoomBeClosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "ShouldRoomBeClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::ValidateRemoteVoiceLink
// Il2CppName: ValidateRemoteVoiceLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::Photon::Voice::Unity::RemoteVoiceLink*)>(&GlobalNamespace::GorillaNot::ValidateRemoteVoiceLink)> {
  static const MethodInfo* get() {
    static auto* voiceLink = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "ValidateRemoteVoiceLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceLink});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::CheckAndUpdateReportData
// Il2CppName: CheckAndUpdateReportData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaNot::*)(::GlobalNamespace::ReportInfo*)>(&GlobalNamespace::GorillaNot::CheckAndUpdateReportData)> {
  static const MethodInfo* get() {
    static auto* newReport = &::il2cpp_utils::GetClassFromName("", "ReportInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "CheckAndUpdateReportData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newReport});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::CheckDirtyRoom
// Il2CppName: CheckDirtyRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::CheckDirtyRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "CheckDirtyRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaNot::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::$Start$b__47_0
// Il2CppName: <Start>b__47_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::StringW)>(&GlobalNamespace::GorillaNot::$Start$b__47_0)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "<Start>b__47_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaNot::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaNot::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNot::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNot::*)()>(&GlobalNamespace::GorillaNot::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNot*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
