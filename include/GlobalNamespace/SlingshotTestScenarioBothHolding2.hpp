// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SlingshotTestScenario
#include "GlobalNamespace/SlingshotTestScenario.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObject
  class TransferrableObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlingshotTestScenarioBothHolding2
  class SlingshotTestScenarioBothHolding2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlingshotTestScenarioBothHolding2);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlingshotTestScenarioBothHolding2*, "", "SlingshotTestScenarioBothHolding2");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SlingshotTestScenarioBothHolding2
  // [TokenAttribute] Offset: FFFFFFFF
  class SlingshotTestScenarioBothHolding2 : public ::GlobalNamespace::SlingshotTestScenario {
    public:
    public:
    // public TransferrableObject testObject1
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::TransferrableObject* testObject1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject*) == 0x8);
    // public TransferrableObject testObject2
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::TransferrableObject* testObject2;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject*) == 0x8);
    public:
    // Get instance field reference: public TransferrableObject testObject1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& dyn_testObject1();
    // Get instance field reference: public TransferrableObject testObject2
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& dyn_testObject2();
    // public System.Void .ctor()
    // Offset: 0x2972B48
    // Implemented from: SlingshotTestScenario
    // Base method: System.Void SlingshotTestScenario::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlingshotTestScenarioBothHolding2* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBothHolding2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlingshotTestScenarioBothHolding2*, creationType>()));
    }
  }; // SlingshotTestScenarioBothHolding2
  #pragma pack(pop)
  static check_size<sizeof(SlingshotTestScenarioBothHolding2), 40 + sizeof(::GlobalNamespace::TransferrableObject*)> __GlobalNamespace_SlingshotTestScenarioBothHolding2SizeCheck;
  static_assert(sizeof(SlingshotTestScenarioBothHolding2) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlingshotTestScenarioBothHolding2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
