// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: Fusion.GameMode
#include "Fusion/GameMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SceneRef
  struct SceneRef;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Stage because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkDebugStart
  class NetworkDebugStart;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkDebugStart);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkDebugStart*, "", "NetworkDebugStart");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: NetworkDebugStart
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class NetworkDebugStart : public ::Fusion::Behaviour {
    public:
    // Nested type: ::GlobalNamespace::NetworkDebugStart::StartModes
    struct StartModes;
    // Nested type: ::GlobalNamespace::NetworkDebugStart::Stage
    struct Stage;
    // Nested type: ::GlobalNamespace::NetworkDebugStart::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::NetworkDebugStart::$StartClients$d__58
    class $StartClients$d__58;
    // Nested type: ::GlobalNamespace::NetworkDebugStart::$StartWithClients$d__54
    class $StartWithClients$d__54;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NetworkDebugStart/StartModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct StartModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StartModes
      constexpr StartModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NetworkDebugStart/StartModes UserInterface
      static constexpr const int UserInterface = 0;
      // Get static field: static public NetworkDebugStart/StartModes UserInterface
      static ::GlobalNamespace::NetworkDebugStart::StartModes _get_UserInterface();
      // Set static field: static public NetworkDebugStart/StartModes UserInterface
      static void _set_UserInterface(::GlobalNamespace::NetworkDebugStart::StartModes value);
      // static field const value: static public NetworkDebugStart/StartModes Automatic
      static constexpr const int Automatic = 1;
      // Get static field: static public NetworkDebugStart/StartModes Automatic
      static ::GlobalNamespace::NetworkDebugStart::StartModes _get_Automatic();
      // Set static field: static public NetworkDebugStart/StartModes Automatic
      static void _set_Automatic(::GlobalNamespace::NetworkDebugStart::StartModes value);
      // static field const value: static public NetworkDebugStart/StartModes Manual
      static constexpr const int Manual = 2;
      // Get static field: static public NetworkDebugStart/StartModes Manual
      static ::GlobalNamespace::NetworkDebugStart::StartModes _get_Manual();
      // Set static field: static public NetworkDebugStart/StartModes Manual
      static void _set_Manual(::GlobalNamespace::NetworkDebugStart::StartModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NetworkDebugStart/StartModes
    #pragma pack(pop)
    static check_size<sizeof(NetworkDebugStart::StartModes), 0 + sizeof(int)> __GlobalNamespace_NetworkDebugStart_StartModesSizeCheck;
    static_assert(sizeof(NetworkDebugStart::StartModes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NetworkDebugStart/Stage
    // [TokenAttribute] Offset: FFFFFFFF
    struct Stage/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Stage
      constexpr Stage(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NetworkDebugStart/Stage Disconnected
      static constexpr const int Disconnected = 0;
      // Get static field: static public NetworkDebugStart/Stage Disconnected
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_Disconnected();
      // Set static field: static public NetworkDebugStart/Stage Disconnected
      static void _set_Disconnected(::GlobalNamespace::NetworkDebugStart::Stage value);
      // static field const value: static public NetworkDebugStart/Stage StartingUp
      static constexpr const int StartingUp = 1;
      // Get static field: static public NetworkDebugStart/Stage StartingUp
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_StartingUp();
      // Set static field: static public NetworkDebugStart/Stage StartingUp
      static void _set_StartingUp(::GlobalNamespace::NetworkDebugStart::Stage value);
      // static field const value: static public NetworkDebugStart/Stage UnloadOriginalScene
      static constexpr const int UnloadOriginalScene = 2;
      // Get static field: static public NetworkDebugStart/Stage UnloadOriginalScene
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_UnloadOriginalScene();
      // Set static field: static public NetworkDebugStart/Stage UnloadOriginalScene
      static void _set_UnloadOriginalScene(::GlobalNamespace::NetworkDebugStart::Stage value);
      // static field const value: static public NetworkDebugStart/Stage ConnectingServer
      static constexpr const int ConnectingServer = 3;
      // Get static field: static public NetworkDebugStart/Stage ConnectingServer
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_ConnectingServer();
      // Set static field: static public NetworkDebugStart/Stage ConnectingServer
      static void _set_ConnectingServer(::GlobalNamespace::NetworkDebugStart::Stage value);
      // static field const value: static public NetworkDebugStart/Stage ConnectingClients
      static constexpr const int ConnectingClients = 4;
      // Get static field: static public NetworkDebugStart/Stage ConnectingClients
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_ConnectingClients();
      // Set static field: static public NetworkDebugStart/Stage ConnectingClients
      static void _set_ConnectingClients(::GlobalNamespace::NetworkDebugStart::Stage value);
      // static field const value: static public NetworkDebugStart/Stage AllConnected
      static constexpr const int AllConnected = 5;
      // Get static field: static public NetworkDebugStart/Stage AllConnected
      static ::GlobalNamespace::NetworkDebugStart::Stage _get_AllConnected();
      // Set static field: static public NetworkDebugStart/Stage AllConnected
      static void _set_AllConnected(::GlobalNamespace::NetworkDebugStart::Stage value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NetworkDebugStart/Stage
    #pragma pack(pop)
    static check_size<sizeof(NetworkDebugStart::Stage), 0 + sizeof(int)> __GlobalNamespace_NetworkDebugStart_StageSizeCheck;
    static_assert(sizeof(NetworkDebugStart::Stage) == 0x4);
    public:
    // public Fusion.NetworkRunner RunnerPrefab
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::NetworkRunner* RunnerPrefab;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // public NetworkDebugStart/StartModes StartMode
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::NetworkDebugStart::StartModes StartMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkDebugStart::StartModes) == 0x4);
    // public Fusion.GameMode AutoStartAs
    // Size: 0x4
    // Offset: 0x2C
    ::Fusion::GameMode AutoStartAs;
    // Field size check
    static_assert(sizeof(::Fusion::GameMode) == 0x4);
    // public System.Boolean AutoHideGUI
    // Size: 0x1
    // Offset: 0x30
    bool AutoHideGUI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutoHideGUI and: AutoClients
    char __padding3[0x3] = {};
    // public System.Int32 AutoClients
    // Size: 0x4
    // Offset: 0x34
    int AutoClients;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt16 ServerPort
    // Size: 0x2
    // Offset: 0x38
    uint16_t ServerPort;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: ServerPort and: DefaultRoomName
    char __padding5[0x6] = {};
    // public System.String DefaultRoomName
    // Size: 0x8
    // Offset: 0x40
    ::StringW DefaultRoomName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean AlwaysShowStats
    // Size: 0x1
    // Offset: 0x48
    bool AlwaysShowStats;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AlwaysShowStats and: server
    char __padding7[0x7] = {};
    // private Fusion.NetworkRunner _server
    // Size: 0x8
    // Offset: 0x50
    ::Fusion::NetworkRunner* server;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // public System.String InitialScenePath
    // Size: 0x8
    // Offset: 0x58
    ::StringW InitialScenePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected NetworkDebugStart/Stage _currentStage
    // Size: 0x4
    // Offset: 0x60
    ::GlobalNamespace::NetworkDebugStart::Stage currentStage;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkDebugStart::Stage) == 0x4);
    // private System.Int32 <LastCreatedClientIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    int LastCreatedClientIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.GameMode <CurrentServerMode>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    ::Fusion::GameMode CurrentServerMode;
    // Field size check
    static_assert(sizeof(::Fusion::GameMode) == 0x4);
    public:
    // Get static field: static private System.String _initialScenePath
    static ::StringW _get__initialScenePath();
    // Set static field: static private System.String _initialScenePath
    static void _set__initialScenePath(::StringW value);
    // Get instance field reference: public Fusion.NetworkRunner RunnerPrefab
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn_RunnerPrefab();
    // Get instance field reference: public NetworkDebugStart/StartModes StartMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkDebugStart::StartModes& dyn_StartMode();
    // Get instance field reference: public Fusion.GameMode AutoStartAs
    [[deprecated("Use field access instead!")]] ::Fusion::GameMode& dyn_AutoStartAs();
    // Get instance field reference: public System.Boolean AutoHideGUI
    [[deprecated("Use field access instead!")]] bool& dyn_AutoHideGUI();
    // Get instance field reference: public System.Int32 AutoClients
    [[deprecated("Use field access instead!")]] int& dyn_AutoClients();
    // Get instance field reference: public System.UInt16 ServerPort
    [[deprecated("Use field access instead!")]] uint16_t& dyn_ServerPort();
    // Get instance field reference: public System.String DefaultRoomName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DefaultRoomName();
    // Get instance field reference: public System.Boolean AlwaysShowStats
    [[deprecated("Use field access instead!")]] bool& dyn_AlwaysShowStats();
    // Get instance field reference: private Fusion.NetworkRunner _server
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn__server();
    // Get instance field reference: public System.String InitialScenePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_InitialScenePath();
    // Get instance field reference: protected NetworkDebugStart/Stage _currentStage
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkDebugStart::Stage& dyn__currentStage();
    // Get instance field reference: private System.Int32 <LastCreatedClientIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LastCreatedClientIndex$k__BackingField();
    // Get instance field reference: private Fusion.GameMode <CurrentServerMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::GameMode& dyn_$CurrentServerMode$k__BackingField();
    // public NetworkDebugStart/Stage get_CurrentStage()
    // Offset: 0x295C2F4
    ::GlobalNamespace::NetworkDebugStart::Stage get_CurrentStage();
    // System.Void set_CurrentStage(NetworkDebugStart/Stage value)
    // Offset: 0x295C2FC
    void set_CurrentStage(::GlobalNamespace::NetworkDebugStart::Stage value);
    // public System.Int32 get_LastCreatedClientIndex()
    // Offset: 0x295C304
    int get_LastCreatedClientIndex();
    // System.Void set_LastCreatedClientIndex(System.Int32 value)
    // Offset: 0x295C30C
    void set_LastCreatedClientIndex(int value);
    // public Fusion.GameMode get_CurrentServerMode()
    // Offset: 0x295C314
    ::Fusion::GameMode get_CurrentServerMode();
    // System.Void set_CurrentServerMode(Fusion.GameMode value)
    // Offset: 0x295C31C
    void set_CurrentServerMode(::Fusion::GameMode value);
    // protected System.Boolean get_CanAddClients()
    // Offset: 0x295C324
    bool get_CanAddClients();
    // protected System.Boolean get_CanAddSharedClients()
    // Offset: 0x295C348
    bool get_CanAddSharedClients();
    // protected System.Boolean get_IsShutdown()
    // Offset: 0x295C36C
    bool get_IsShutdown();
    // protected System.Boolean get_IsShutdownAndMultiPeer()
    // Offset: 0x295C37C
    bool get_IsShutdownAndMultiPeer();
    // protected System.Boolean get_UsingMultiPeerMode()
    // Offset: 0x295C3B4
    bool get_UsingMultiPeerMode();
    // protected System.Boolean get_ShowAutoClients()
    // Offset: 0x295C3DC
    bool get_ShowAutoClients();
    // protected System.Void Start()
    // Offset: 0x295C428
    void Start();
    // protected System.Boolean TryGetSceneRef(out Fusion.SceneRef sceneRef)
    // Offset: 0x295C7E4
    bool TryGetSceneRef(ByRef<::Fusion::SceneRef> sceneRef);
    // public System.Void StartSinglePlayer()
    // Offset: 0x295C944
    void StartSinglePlayer();
    // public System.Void StartServer()
    // Offset: 0x295C990
    void StartServer();
    // public System.Void StartHost()
    // Offset: 0x295C9DC
    void StartHost();
    // public System.Void StartClient()
    // Offset: 0x295CA28
    void StartClient();
    // public System.Void StartSharedClient()
    // Offset: 0x295CA54
    void StartSharedClient();
    // public System.Void StartAutoClient()
    // Offset: 0x295CAA0
    void StartAutoClient();
    // public System.Void StartServerPlusClients()
    // Offset: 0x295CAEC
    void StartServerPlusClients();
    // public System.Void StartHostPlusClients()
    // Offset: 0x295CAFC
    void StartHostPlusClients();
    // public System.Void Shutdown()
    // Offset: 0x295CBD4
    void Shutdown();
    // public System.Void StartServerPlusClients(System.Int32 clientCount)
    // Offset: 0x295CEB8
    void StartServerPlusClients(int clientCount);
    // public System.Void StartHostPlusClients(System.Int32 clientCount)
    // Offset: 0x295CB04
    void StartHostPlusClients(int clientCount);
    // public System.Void StartMultipleClients(System.Int32 clientCount)
    // Offset: 0x295CF88
    void StartMultipleClients(int clientCount);
    // public System.Void StartMultipleSharedClients(System.Int32 clientCount)
    // Offset: 0x295D058
    void StartMultipleSharedClients(int clientCount);
    // public System.Void StartMultipleAutoClients(System.Int32 clientCount)
    // Offset: 0x295D128
    void StartMultipleAutoClients(int clientCount);
    // public System.Void ShutdownAll()
    // Offset: 0x295CBD8
    void ShutdownAll();
    // protected System.Collections.IEnumerator StartWithClients(Fusion.GameMode serverMode, Fusion.SceneRef sceneRef, System.Int32 clientCount)
    // Offset: 0x295C8B4
    ::System::Collections::IEnumerator* StartWithClients(::Fusion::GameMode serverMode, ::Fusion::SceneRef sceneRef, int clientCount);
    // public System.Void AddClient()
    // Offset: 0x295D220
    void AddClient();
    // public System.Void AddSharedClient()
    // Offset: 0x295D4B4
    void AddSharedClient();
    // public System.Threading.Tasks.Task AddClient(Fusion.GameMode serverMode, Fusion.SceneRef sceneRef)
    // Offset: 0x295D258
    ::System::Threading::Tasks::Task* AddClient(::Fusion::GameMode serverMode, ::Fusion::SceneRef sceneRef);
    // protected System.Collections.IEnumerator StartClients(System.Int32 clientCount, Fusion.GameMode serverMode, Fusion.SceneRef sceneRef)
    // Offset: 0x295D4EC
    ::System::Collections::IEnumerator* StartClients(int clientCount, ::Fusion::GameMode serverMode, ::Fusion::SceneRef sceneRef);
    // protected System.Threading.Tasks.Task InitializeNetworkRunner(Fusion.NetworkRunner runner, Fusion.GameMode gameMode, Fusion.Sockets.NetAddress address, Fusion.SceneRef scene, System.Action`1<Fusion.NetworkRunner> initialized)
    // Offset: 0x295D5A4
    ::System::Threading::Tasks::Task* InitializeNetworkRunner(::Fusion::NetworkRunner* runner, ::Fusion::GameMode gameMode, ::Fusion::Sockets::NetAddress address, ::Fusion::SceneRef scene, ::System::Action_1<::Fusion::NetworkRunner*>* initialized);
    // public System.Void .ctor()
    // Offset: 0x295D82C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkDebugStart* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkDebugStart::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkDebugStart*, creationType>()));
    }
  }; // NetworkDebugStart
  #pragma pack(pop)
  static check_size<sizeof(NetworkDebugStart), 104 + sizeof(::Fusion::GameMode)> __GlobalNamespace_NetworkDebugStartSizeCheck;
  static_assert(sizeof(NetworkDebugStart) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkDebugStart::Stage, "", "NetworkDebugStart/Stage");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkDebugStart::StartModes, "", "NetworkDebugStart/StartModes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_CurrentStage
// Il2CppName: get_CurrentStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetworkDebugStart::Stage (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_CurrentStage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_CurrentStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::set_CurrentStage
// Il2CppName: set_CurrentStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(::GlobalNamespace::NetworkDebugStart::Stage)>(&GlobalNamespace::NetworkDebugStart::set_CurrentStage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NetworkDebugStart/Stage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "set_CurrentStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_LastCreatedClientIndex
// Il2CppName: get_LastCreatedClientIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_LastCreatedClientIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_LastCreatedClientIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::set_LastCreatedClientIndex
// Il2CppName: set_LastCreatedClientIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::set_LastCreatedClientIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "set_LastCreatedClientIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_CurrentServerMode
// Il2CppName: get_CurrentServerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::GameMode (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_CurrentServerMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_CurrentServerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::set_CurrentServerMode
// Il2CppName: set_CurrentServerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(::Fusion::GameMode)>(&GlobalNamespace::NetworkDebugStart::set_CurrentServerMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "set_CurrentServerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_CanAddClients
// Il2CppName: get_CanAddClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_CanAddClients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_CanAddClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_CanAddSharedClients
// Il2CppName: get_CanAddSharedClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_CanAddSharedClients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_CanAddSharedClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_IsShutdown
// Il2CppName: get_IsShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_IsShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_IsShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_IsShutdownAndMultiPeer
// Il2CppName: get_IsShutdownAndMultiPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_IsShutdownAndMultiPeer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_IsShutdownAndMultiPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_UsingMultiPeerMode
// Il2CppName: get_UsingMultiPeerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_UsingMultiPeerMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_UsingMultiPeerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::get_ShowAutoClients
// Il2CppName: get_ShowAutoClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::get_ShowAutoClients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "get_ShowAutoClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::TryGetSceneRef
// Il2CppName: TryGetSceneRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkDebugStart::*)(ByRef<::Fusion::SceneRef>)>(&GlobalNamespace::NetworkDebugStart::TryGetSceneRef)> {
  static const MethodInfo* get() {
    static auto* sceneRef = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "TryGetSceneRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneRef});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartSinglePlayer
// Il2CppName: StartSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartSinglePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartServer
// Il2CppName: StartServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartHost
// Il2CppName: StartHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartClient
// Il2CppName: StartClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartSharedClient
// Il2CppName: StartSharedClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartSharedClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartSharedClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartAutoClient
// Il2CppName: StartAutoClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartAutoClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartAutoClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartServerPlusClients
// Il2CppName: StartServerPlusClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartServerPlusClients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartServerPlusClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartHostPlusClients
// Il2CppName: StartHostPlusClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::StartHostPlusClients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartHostPlusClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::Shutdown
// Il2CppName: Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::Shutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartServerPlusClients
// Il2CppName: StartServerPlusClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::StartServerPlusClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartServerPlusClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartHostPlusClients
// Il2CppName: StartHostPlusClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::StartHostPlusClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartHostPlusClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartMultipleClients
// Il2CppName: StartMultipleClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::StartMultipleClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartMultipleClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartMultipleSharedClients
// Il2CppName: StartMultipleSharedClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::StartMultipleSharedClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartMultipleSharedClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartMultipleAutoClients
// Il2CppName: StartMultipleAutoClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)(int)>(&GlobalNamespace::NetworkDebugStart::StartMultipleAutoClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartMultipleAutoClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::ShutdownAll
// Il2CppName: ShutdownAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::ShutdownAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "ShutdownAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartWithClients
// Il2CppName: StartWithClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::NetworkDebugStart::*)(::Fusion::GameMode, ::Fusion::SceneRef, int)>(&GlobalNamespace::NetworkDebugStart::StartWithClients)> {
  static const MethodInfo* get() {
    static auto* serverMode = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    static auto* sceneRef = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartWithClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverMode, sceneRef, clientCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::AddClient
// Il2CppName: AddClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::AddClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "AddClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::AddSharedClient
// Il2CppName: AddSharedClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkDebugStart::*)()>(&GlobalNamespace::NetworkDebugStart::AddSharedClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "AddSharedClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::AddClient
// Il2CppName: AddClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkDebugStart::*)(::Fusion::GameMode, ::Fusion::SceneRef)>(&GlobalNamespace::NetworkDebugStart::AddClient)> {
  static const MethodInfo* get() {
    static auto* serverMode = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    static auto* sceneRef = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "AddClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverMode, sceneRef});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::StartClients
// Il2CppName: StartClients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::NetworkDebugStart::*)(int, ::Fusion::GameMode, ::Fusion::SceneRef)>(&GlobalNamespace::NetworkDebugStart::StartClients)> {
  static const MethodInfo* get() {
    static auto* clientCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* serverMode = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    static auto* sceneRef = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "StartClients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientCount, serverMode, sceneRef});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::InitializeNetworkRunner
// Il2CppName: InitializeNetworkRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkDebugStart::*)(::Fusion::NetworkRunner*, ::Fusion::GameMode, ::Fusion::Sockets::NetAddress, ::Fusion::SceneRef, ::System::Action_1<::Fusion::NetworkRunner*>*)>(&GlobalNamespace::NetworkDebugStart::InitializeNetworkRunner)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* gameMode = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* scene = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    static auto* initialized = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkDebugStart*), "InitializeNetworkRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, gameMode, address, scene, initialized});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkDebugStart::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
