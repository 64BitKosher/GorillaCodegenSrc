// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRigCache
  class VRRigCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRigCache);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigCache*, "", "VRRigCache");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: VRRigCache
  // [TokenAttribute] Offset: FFFFFFFF
  class VRRigCache : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public RigContainer localRig
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::RigContainer* localRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private UnityEngine.Transform rigParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* rigParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform networkParent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* networkParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject rigTemplate
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* rigTemplate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single rigAmount
    // Size: 0x4
    // Offset: 0x40
    float rigAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private VRRigCache <Instance>k__BackingField
    static ::GlobalNamespace::VRRigCache* _get_$Instance$k__BackingField();
    // Set static field: static private VRRigCache <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::GlobalNamespace::VRRigCache* value);
    // Get static field: static private System.Collections.Generic.Queue`1<RigContainer> freeRigs
    static ::System::Collections::Generic::Queue_1<::GlobalNamespace::RigContainer*>* _get_freeRigs();
    // Set static field: static private System.Collections.Generic.Queue`1<RigContainer> freeRigs
    static void _set_freeRigs(::System::Collections::Generic::Queue_1<::GlobalNamespace::RigContainer*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<NetPlayer,RigContainer> rigsInUse
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetPlayer*, ::GlobalNamespace::RigContainer*>* _get_rigsInUse();
    // Set static field: static private System.Collections.Generic.Dictionary`2<NetPlayer,RigContainer> rigsInUse
    static void _set_rigsInUse(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::NetPlayer*, ::GlobalNamespace::RigContainer*>* value);
    // Get static field: static private System.Boolean <isInitialized>k__BackingField
    static bool _get_$isInitialized$k__BackingField();
    // Set static field: static private System.Boolean <isInitialized>k__BackingField
    static void _set_$isInitialized$k__BackingField(bool value);
    // Get static field: static private System.Action OnPostInitialize
    static ::System::Action* _get_OnPostInitialize();
    // Set static field: static private System.Action OnPostInitialize
    static void _set_OnPostInitialize(::System::Action* value);
    // Get static field: static private System.Action OnPostSpawnRig
    static ::System::Action* _get_OnPostSpawnRig();
    // Set static field: static private System.Action OnPostSpawnRig
    static void _set_OnPostSpawnRig(::System::Action* value);
    // Get instance field reference: public RigContainer localRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_localRig();
    // Get instance field reference: private UnityEngine.Transform rigParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rigParent();
    // Get instance field reference: private UnityEngine.Transform networkParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_networkParent();
    // Get instance field reference: private UnityEngine.GameObject rigTemplate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rigTemplate();
    // Get instance field reference: private System.Single rigAmount
    [[deprecated("Use field access instead!")]] float& dyn_rigAmount();
    // static public VRRigCache get_Instance()
    // Offset: 0x26FC0CC
    static ::GlobalNamespace::VRRigCache* get_Instance();
    // static private System.Void set_Instance(VRRigCache value)
    // Offset: 0x26FC124
    static void set_Instance(::GlobalNamespace::VRRigCache* value);
    // public UnityEngine.Transform get_NetworkParent()
    // Offset: 0x26FC18C
    ::UnityEngine::Transform* get_NetworkParent();
    // static public System.Boolean get_isInitialized()
    // Offset: 0x26FC194
    static bool get_isInitialized();
    // static private System.Void set_isInitialized(System.Boolean value)
    // Offset: 0x26FC1EC
    static void set_isInitialized(bool value);
    // static public System.Void add_OnPostInitialize(System.Action value)
    // Offset: 0x26FC24C
    static void add_OnPostInitialize(::System::Action* value);
    // static public System.Void remove_OnPostInitialize(System.Action value)
    // Offset: 0x26FC328
    static void remove_OnPostInitialize(::System::Action* value);
    // static public System.Void add_OnPostSpawnRig(System.Action value)
    // Offset: 0x26FC404
    static void add_OnPostSpawnRig(::System::Action* value);
    // static public System.Void remove_OnPostSpawnRig(System.Action value)
    // Offset: 0x26FC4E0
    static void remove_OnPostSpawnRig(::System::Action* value);
    // private System.Void Start()
    // Offset: 0x26FC5BC
    void Start();
    // public System.Void InitializeVRRigCache()
    // Offset: 0x26FC5C0
    void InitializeVRRigCache();
    // private System.Void OnDestroy()
    // Offset: 0x26FCC8C
    void OnDestroy();
    // private RigContainer SpawnRig()
    // Offset: 0x26FCB58
    ::GlobalNamespace::RigContainer* SpawnRig();
    // System.Boolean TryGetVrrig(Photon.Realtime.Player targetPlayer, out RigContainer playerRig)
    // Offset: 0x26F718C
    bool TryGetVrrig(::Photon::Realtime::Player* targetPlayer, ByRef<::GlobalNamespace::RigContainer*> playerRig);
    // System.Boolean TryGetVrrig(NetPlayer targetPlayer, out RigContainer playerRig)
    // Offset: 0x26FB364
    bool TryGetVrrig(::GlobalNamespace::NetPlayer* targetPlayer, ByRef<::GlobalNamespace::RigContainer*> playerRig);
    // private System.Void AddRigToGorillaParent(NetPlayer player, VRRig vrrig)
    // Offset: 0x26FCDBC
    void AddRigToGorillaParent(::GlobalNamespace::NetPlayer* player, ::GlobalNamespace::VRRig* vrrig);
    // public System.Void OnPlayerEnteredRoom(System.Int32 joiningPlayerID)
    // Offset: 0x26FCF98
    void OnPlayerEnteredRoom(int joiningPlayerID);
    // public System.Void OnJoinedRoom()
    // Offset: 0x26FD0A8
    void OnJoinedRoom();
    // private System.Void RemoveRigFromGorillaParent(NetPlayer player, VRRig vrrig)
    // Offset: 0x26FD190
    void RemoveRigFromGorillaParent(::GlobalNamespace::NetPlayer* player, ::GlobalNamespace::VRRig* vrrig);
    // public System.Void OnPlayerLeftRoom(System.Int32 playerID)
    // Offset: 0x26FD2E0
    void OnPlayerLeftRoom(int playerID);
    // private System.Void CheckForMissingPlayer()
    // Offset: 0x26FD51C
    void CheckForMissingPlayer();
    // public System.Void OnLeftRoom()
    // Offset: 0x26FD860
    void OnLeftRoom();
    // VRRig[] GetAllRigs()
    // Offset: 0x26FDAC0
    ::ArrayW<::GlobalNamespace::VRRig*> GetAllRigs();
    // System.Int32 GetAllRigsHash()
    // Offset: 0x26FDEC4
    int GetAllRigsHash();
    // private System.Void LogInfo(System.String log)
    // Offset: 0x26FE1B0
    void LogInfo(::StringW log);
    // private System.Void LogWarning(System.String log)
    // Offset: 0x26FCDB8
    void LogWarning(::StringW log);
    // private System.Void LogError(System.String log)
    // Offset: 0x26FD85C
    void LogError(::StringW log);
    // public System.Void .ctor()
    // Offset: 0x26FE1B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRigCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRigCache*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26FE1C4
    static void _cctor();
  }; // VRRigCache
  #pragma pack(pop)
  static check_size<sizeof(VRRigCache), 64 + sizeof(float)> __GlobalNamespace_VRRigCacheSizeCheck;
  static_assert(sizeof(VRRigCache) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRigCache* (*)()>(&GlobalNamespace::VRRigCache::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::VRRigCache*)>(&GlobalNamespace::VRRigCache::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "VRRigCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::get_NetworkParent
// Il2CppName: get_NetworkParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::get_NetworkParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "get_NetworkParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::VRRigCache::get_isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::set_isInitialized
// Il2CppName: set_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::VRRigCache::set_isInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "set_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::add_OnPostInitialize
// Il2CppName: add_OnPostInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::VRRigCache::add_OnPostInitialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "add_OnPostInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::remove_OnPostInitialize
// Il2CppName: remove_OnPostInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::VRRigCache::remove_OnPostInitialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "remove_OnPostInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::add_OnPostSpawnRig
// Il2CppName: add_OnPostSpawnRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::VRRigCache::add_OnPostSpawnRig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "add_OnPostSpawnRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::remove_OnPostSpawnRig
// Il2CppName: remove_OnPostSpawnRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::VRRigCache::remove_OnPostSpawnRig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "remove_OnPostSpawnRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::InitializeVRRigCache
// Il2CppName: InitializeVRRigCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::InitializeVRRigCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "InitializeVRRigCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::SpawnRig
// Il2CppName: SpawnRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RigContainer* (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::SpawnRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "SpawnRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::TryGetVrrig
// Il2CppName: TryGetVrrig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigCache::*)(::Photon::Realtime::Player*, ByRef<::GlobalNamespace::RigContainer*>)>(&GlobalNamespace::VRRigCache::TryGetVrrig)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* playerRig = &::il2cpp_utils::GetClassFromName("", "RigContainer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "TryGetVrrig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, playerRig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::TryGetVrrig
// Il2CppName: TryGetVrrig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigCache::*)(::GlobalNamespace::NetPlayer*, ByRef<::GlobalNamespace::RigContainer*>)>(&GlobalNamespace::VRRigCache::TryGetVrrig)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    static auto* playerRig = &::il2cpp_utils::GetClassFromName("", "RigContainer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "TryGetVrrig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, playerRig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::AddRigToGorillaParent
// Il2CppName: AddRigToGorillaParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(::GlobalNamespace::NetPlayer*, ::GlobalNamespace::VRRig*)>(&GlobalNamespace::VRRigCache::AddRigToGorillaParent)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    static auto* vrrig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "AddRigToGorillaParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(int)>(&GlobalNamespace::VRRigCache::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* joiningPlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joiningPlayerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::RemoveRigFromGorillaParent
// Il2CppName: RemoveRigFromGorillaParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(::GlobalNamespace::NetPlayer*, ::GlobalNamespace::VRRig*)>(&GlobalNamespace::VRRigCache::RemoveRigFromGorillaParent)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    static auto* vrrig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "RemoveRigFromGorillaParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(int)>(&GlobalNamespace::VRRigCache::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::CheckForMissingPlayer
// Il2CppName: CheckForMissingPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::CheckForMissingPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "CheckForMissingPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::GetAllRigs
// Il2CppName: GetAllRigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::VRRig*> (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::GetAllRigs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "GetAllRigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::GetAllRigsHash
// Il2CppName: GetAllRigsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::VRRigCache::*)()>(&GlobalNamespace::VRRigCache::GetAllRigsHash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "GetAllRigsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(::StringW)>(&GlobalNamespace::VRRigCache::LogInfo)> {
  static const MethodInfo* get() {
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{log});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(::StringW)>(&GlobalNamespace::VRRigCache::LogWarning)> {
  static const MethodInfo* get() {
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{log});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigCache::*)(::StringW)>(&GlobalNamespace::VRRigCache::LogError)> {
  static const MethodInfo* get() {
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{log});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VRRigCache::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::VRRigCache::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigCache*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
