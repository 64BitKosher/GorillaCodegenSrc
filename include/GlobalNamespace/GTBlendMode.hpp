// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTBlendMode
  struct GTBlendMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTBlendMode, "", "GTBlendMode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: GTBlendMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct GTBlendMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GTBlendMode
    constexpr GTBlendMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public GTBlendMode Normal
    static constexpr const int Normal = 0;
    // Get static field: static public GTBlendMode Normal
    static ::GlobalNamespace::GTBlendMode _get_Normal();
    // Set static field: static public GTBlendMode Normal
    static void _set_Normal(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Darken
    static constexpr const int Darken = 1;
    // Get static field: static public GTBlendMode Darken
    static ::GlobalNamespace::GTBlendMode _get_Darken();
    // Set static field: static public GTBlendMode Darken
    static void _set_Darken(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Multiply
    static constexpr const int Multiply = 2;
    // Get static field: static public GTBlendMode Multiply
    static ::GlobalNamespace::GTBlendMode _get_Multiply();
    // Set static field: static public GTBlendMode Multiply
    static void _set_Multiply(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode ColorBurn
    static constexpr const int ColorBurn = 3;
    // Get static field: static public GTBlendMode ColorBurn
    static ::GlobalNamespace::GTBlendMode _get_ColorBurn();
    // Set static field: static public GTBlendMode ColorBurn
    static void _set_ColorBurn(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode LinearBurn
    static constexpr const int LinearBurn = 4;
    // Get static field: static public GTBlendMode LinearBurn
    static ::GlobalNamespace::GTBlendMode _get_LinearBurn();
    // Set static field: static public GTBlendMode LinearBurn
    static void _set_LinearBurn(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Lighten
    static constexpr const int Lighten = 5;
    // Get static field: static public GTBlendMode Lighten
    static ::GlobalNamespace::GTBlendMode _get_Lighten();
    // Set static field: static public GTBlendMode Lighten
    static void _set_Lighten(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Screen
    static constexpr const int Screen = 6;
    // Get static field: static public GTBlendMode Screen
    static ::GlobalNamespace::GTBlendMode _get_Screen();
    // Set static field: static public GTBlendMode Screen
    static void _set_Screen(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode ColorDodge
    static constexpr const int ColorDodge = 7;
    // Get static field: static public GTBlendMode ColorDodge
    static ::GlobalNamespace::GTBlendMode _get_ColorDodge();
    // Set static field: static public GTBlendMode ColorDodge
    static void _set_ColorDodge(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode LinearDodge
    static constexpr const int LinearDodge = 8;
    // Get static field: static public GTBlendMode LinearDodge
    static ::GlobalNamespace::GTBlendMode _get_LinearDodge();
    // Set static field: static public GTBlendMode LinearDodge
    static void _set_LinearDodge(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Overlay
    static constexpr const int Overlay = 9;
    // Get static field: static public GTBlendMode Overlay
    static ::GlobalNamespace::GTBlendMode _get_Overlay();
    // Set static field: static public GTBlendMode Overlay
    static void _set_Overlay(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode SoftLight
    static constexpr const int SoftLight = 10;
    // Get static field: static public GTBlendMode SoftLight
    static ::GlobalNamespace::GTBlendMode _get_SoftLight();
    // Set static field: static public GTBlendMode SoftLight
    static void _set_SoftLight(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode HardLight
    static constexpr const int HardLight = 11;
    // Get static field: static public GTBlendMode HardLight
    static ::GlobalNamespace::GTBlendMode _get_HardLight();
    // Set static field: static public GTBlendMode HardLight
    static void _set_HardLight(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode VividLight
    static constexpr const int VividLight = 12;
    // Get static field: static public GTBlendMode VividLight
    static ::GlobalNamespace::GTBlendMode _get_VividLight();
    // Set static field: static public GTBlendMode VividLight
    static void _set_VividLight(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode LinearLight
    static constexpr const int LinearLight = 13;
    // Get static field: static public GTBlendMode LinearLight
    static ::GlobalNamespace::GTBlendMode _get_LinearLight();
    // Set static field: static public GTBlendMode LinearLight
    static void _set_LinearLight(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode PinLight
    static constexpr const int PinLight = 14;
    // Get static field: static public GTBlendMode PinLight
    static ::GlobalNamespace::GTBlendMode _get_PinLight();
    // Set static field: static public GTBlendMode PinLight
    static void _set_PinLight(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Difference
    static constexpr const int Difference = 15;
    // Get static field: static public GTBlendMode Difference
    static ::GlobalNamespace::GTBlendMode _get_Difference();
    // Set static field: static public GTBlendMode Difference
    static void _set_Difference(::GlobalNamespace::GTBlendMode value);
    // static field const value: static public GTBlendMode Exclusion
    static constexpr const int Exclusion = 16;
    // Get static field: static public GTBlendMode Exclusion
    static ::GlobalNamespace::GTBlendMode _get_Exclusion();
    // Set static field: static public GTBlendMode Exclusion
    static void _set_Exclusion(::GlobalNamespace::GTBlendMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // GTBlendMode
  #pragma pack(pop)
  static check_size<sizeof(GTBlendMode), 0 + sizeof(int)> __GlobalNamespace_GTBlendModeSizeCheck;
  static_assert(sizeof(GTBlendMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
