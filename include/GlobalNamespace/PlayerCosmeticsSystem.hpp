// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemPre
#include "GlobalNamespace/ITickSystemPre.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: IUserCosmeticsCallback
  class IUserCosmeticsCallback;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetSharedGroupDataResult
  class GetSharedGroupDataResult;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerCosmeticsSystem
  class PlayerCosmeticsSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerCosmeticsSystem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerCosmeticsSystem*, "", "PlayerCosmeticsSystem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PlayerCosmeticsSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerCosmeticsSystem : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemPre*/ {
    public:
    // Nested type: ::GlobalNamespace::PlayerCosmeticsSystem::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::PlayerCosmeticsSystem::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    public:
    // private System.Boolean <ITickSystemPre.PreTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool PreTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PreTickRunning and: playerLookUpCooldown
    char __padding0[0x3] = {};
    // public System.Single playerLookUpCooldown
    // Size: 0x4
    // Offset: 0x24
    float playerLookUpCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single startSearchingTime
    // Size: 0x4
    // Offset: 0x28
    float startSearchingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isLookingUp
    // Size: 0x1
    // Offset: 0x2C
    bool isLookingUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLookingUp and: tempCosmetics
    char __padding3[0x3] = {};
    // private System.String tempCosmetics
    // Size: 0x8
    // Offset: 0x30
    ::StringW tempCosmetics;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Realtime.Player playerTemp
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Realtime::Player* playerTemp;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private RigContainer tempRC
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::RigContainer* tempRC;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> inventory
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* inventory;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPre
    operator ::GlobalNamespace::ITickSystemPre() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPre*>(this);
    }
    // Get static field: static private PlayerCosmeticsSystem instance
    static ::GlobalNamespace::PlayerCosmeticsSystem* _get_instance();
    // Set static field: static private PlayerCosmeticsSystem instance
    static void _set_instance(::GlobalNamespace::PlayerCosmeticsSystem* value);
    // Get static field: static private System.Collections.Generic.Queue`1<Photon.Realtime.Player> playersToLookUp
    static ::System::Collections::Generic::Queue_1<::Photon::Realtime::Player*>* _get_playersToLookUp();
    // Set static field: static private System.Collections.Generic.Queue`1<Photon.Realtime.Player> playersToLookUp
    static void _set_playersToLookUp(::System::Collections::Generic::Queue_1<::Photon::Realtime::Player*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,IUserCosmeticsCallback> userCosmeticCallback
    static ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::IUserCosmeticsCallback*>* _get_userCosmeticCallback();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,IUserCosmeticsCallback> userCosmeticCallback
    static void _set_userCosmeticCallback(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::IUserCosmeticsCallback*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userCosmeticsWaiting
    static ::System::Collections::Generic::Dictionary_2<int, ::StringW>* _get_userCosmeticsWaiting();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userCosmeticsWaiting
    static void _set_userCosmeticsWaiting(::System::Collections::Generic::Dictionary_2<int, ::StringW>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.String> playerIDsList
    static ::System::Collections::Generic::List_1<::StringW>* _get_playerIDsList();
    // Set static field: static private System.Collections.Generic.List`1<System.String> playerIDsList
    static void _set_playerIDsList(::System::Collections::Generic::List_1<::StringW>* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> playersWaiting
    static ::System::Collections::Generic::HashSet_1<int>* _get_playersWaiting();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> playersWaiting
    static void _set_playersWaiting(::System::Collections::Generic::HashSet_1<int>* value);
    // Get instance field reference: private System.Boolean <ITickSystemPre.PreTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPre_PreTickRunning$k__BackingField();
    // Get instance field reference: public System.Single playerLookUpCooldown
    [[deprecated("Use field access instead!")]] float& dyn_playerLookUpCooldown();
    // Get instance field reference: private System.Single startSearchingTime
    [[deprecated("Use field access instead!")]] float& dyn_startSearchingTime();
    // Get instance field reference: private System.Boolean isLookingUp
    [[deprecated("Use field access instead!")]] bool& dyn_isLookingUp();
    // Get instance field reference: private System.String tempCosmetics
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempCosmetics();
    // Get instance field reference: private Photon.Realtime.Player playerTemp
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_playerTemp();
    // Get instance field reference: private RigContainer tempRC
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_tempRC();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> inventory
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_inventory();
    // private System.Boolean ITickSystemPre.get_PreTickRunning()
    // Offset: 0x2766924
    bool ITickSystemPre_get_PreTickRunning();
    // private System.Void ITickSystemPre.set_PreTickRunning(System.Boolean value)
    // Offset: 0x276692C
    void ITickSystemPre_set_PreTickRunning(bool value);
    // private System.Void Awake()
    // Offset: 0x2766938
    void Awake();
    // private System.Void Start()
    // Offset: 0x2766BC8
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x2766BDC
    void OnDestroy();
    // private System.Void LookUpPlayerCosmetics(System.Boolean wait)
    // Offset: 0x2766CA8
    void LookUpPlayerCosmetics(bool wait);
    // public System.Void PreTick()
    // Offset: 0x2766D40
    void PreTick();
    // private System.Void NewCosmeticsPath(Photon.Realtime.Player player, System.Int32 firstEntryId)
    // Offset: 0x2767460
    void NewCosmeticsPath(::Photon::Realtime::Player* player, int firstEntryId);
    // private System.Void OnGetsharedGroupData(PlayFab.ClientModels.GetSharedGroupDataResult result)
    // Offset: 0x27676F0
    void OnGetsharedGroupData(::PlayFab::ClientModels::GetSharedGroupDataResult* result);
    // private System.Void OnEvent(ExitGames.Client.Photon.EventData evData)
    // Offset: 0x27681B0
    void OnEvent(::ExitGames::Client::Photon::EventData* evData);
    // static private System.Boolean get_nullInstance()
    // Offset: 0x27684C8
    static bool get_nullInstance();
    // static public System.Void RegisterCosmeticCallback(System.Int32 playerID, IUserCosmeticsCallback callback)
    // Offset: 0x2768580
    static void RegisterCosmeticCallback(int playerID, ::GlobalNamespace::IUserCosmeticsCallback* callback);
    // static public System.Void RemoveCosmeticCallback(System.Int32 playerID)
    // Offset: 0x2768770
    static void RemoveCosmeticCallback(int playerID);
    // static public System.Void UpdatePlayerCosmetics(Photon.Realtime.Player player)
    // Offset: 0x2768340
    static void UpdatePlayerCosmetics(::Photon::Realtime::Player* player);
    // static public System.Void UpdatePlayerCosmetics(System.Collections.Generic.List`1<Photon.Realtime.Player> players)
    // Offset: 0x2768840
    static void UpdatePlayerCosmetics(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* players);
    // static public System.Void StaticReset()
    // Offset: 0x2768B14
    static void StaticReset();
    // public System.Void .ctor()
    // Offset: 0x2768C50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerCosmeticsSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerCosmeticsSystem*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2768C64
    static void _cctor();
  }; // PlayerCosmeticsSystem
  #pragma pack(pop)
  static check_size<sizeof(PlayerCosmeticsSystem), 72 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __GlobalNamespace_PlayerCosmeticsSystemSizeCheck;
  static_assert(sizeof(PlayerCosmeticsSystem) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_get_PreTickRunning
// Il2CppName: ITickSystemPre.get_PreTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerCosmeticsSystem::*)()>(&GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_get_PreTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "ITickSystemPre.get_PreTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_set_PreTickRunning
// Il2CppName: ITickSystemPre.set_PreTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)(bool)>(&GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_set_PreTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "ITickSystemPre.set_PreTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)()>(&GlobalNamespace::PlayerCosmeticsSystem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)()>(&GlobalNamespace::PlayerCosmeticsSystem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)()>(&GlobalNamespace::PlayerCosmeticsSystem::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::LookUpPlayerCosmetics
// Il2CppName: LookUpPlayerCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)(bool)>(&GlobalNamespace::PlayerCosmeticsSystem::LookUpPlayerCosmetics)> {
  static const MethodInfo* get() {
    static auto* wait = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "LookUpPlayerCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wait});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::PreTick
// Il2CppName: PreTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)()>(&GlobalNamespace::PlayerCosmeticsSystem::PreTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "PreTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::NewCosmeticsPath
// Il2CppName: NewCosmeticsPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)(::Photon::Realtime::Player*, int)>(&GlobalNamespace::PlayerCosmeticsSystem::NewCosmeticsPath)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* firstEntryId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "NewCosmeticsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, firstEntryId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::OnGetsharedGroupData
// Il2CppName: OnGetsharedGroupData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)(::PlayFab::ClientModels::GetSharedGroupDataResult*)>(&GlobalNamespace::PlayerCosmeticsSystem::OnGetsharedGroupData)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetSharedGroupDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "OnGetsharedGroupData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::OnEvent
// Il2CppName: OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerCosmeticsSystem::*)(::ExitGames::Client::Photon::EventData*)>(&GlobalNamespace::PlayerCosmeticsSystem::OnEvent)> {
  static const MethodInfo* get() {
    static auto* evData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::get_nullInstance
// Il2CppName: get_nullInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::PlayerCosmeticsSystem::get_nullInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "get_nullInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::RegisterCosmeticCallback
// Il2CppName: RegisterCosmeticCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::GlobalNamespace::IUserCosmeticsCallback*)>(&GlobalNamespace::PlayerCosmeticsSystem::RegisterCosmeticCallback)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("", "IUserCosmeticsCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "RegisterCosmeticCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::RemoveCosmeticCallback
// Il2CppName: RemoveCosmeticCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::PlayerCosmeticsSystem::RemoveCosmeticCallback)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "RemoveCosmeticCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics
// Il2CppName: UpdatePlayerCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "UpdatePlayerCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics
// Il2CppName: UpdatePlayerCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*)>(&GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics)> {
  static const MethodInfo* get() {
    static auto* players = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "UpdatePlayerCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{players});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::StaticReset
// Il2CppName: StaticReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::PlayerCosmeticsSystem::StaticReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), "StaticReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerCosmeticsSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::PlayerCosmeticsSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCosmeticsSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
