// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MagicCauldron
#include "GlobalNamespace/MagicCauldron.hpp"
// Including type: IFXContextParems`1
#include "GlobalNamespace/IFXContextParems_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FXSystemSettings
  class FXSystemSettings;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MagicCauldron::IngrediantFXContext);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicCauldron::IngrediantFXContext*, "", "MagicCauldron/IngrediantFXContext");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MagicCauldron/IngrediantFXContext
  // [TokenAttribute] Offset: FFFFFFFF
  class MagicCauldron::IngrediantFXContext : public ::Il2CppObject/*, public ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::MagicCauldron::IngredientArgs*>*/ {
    public:
    // Nested type: ::GlobalNamespace::MagicCauldron::IngrediantFXContext::Callback
    class Callback;
    public:
    // public FXSystemSettings playerSettings
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::FXSystemSettings* playerSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FXSystemSettings*) == 0x8);
    // public MagicCauldron/IngrediantFXContext/Callback fxCallBack
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MagicCauldron::IngrediantFXContext::Callback* fxCallBack;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicCauldron::IngrediantFXContext::Callback*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::MagicCauldron::IngredientArgs*>
    operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::MagicCauldron::IngredientArgs*>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::MagicCauldron::IngredientArgs*>*>(this);
    }
    // Get instance field reference: public FXSystemSettings playerSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FXSystemSettings*& dyn_playerSettings();
    // Get instance field reference: public MagicCauldron/IngrediantFXContext/Callback fxCallBack
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicCauldron::IngrediantFXContext::Callback*& dyn_fxCallBack();
    // private FXSystemSettings IFXContextParems<MagicCauldron.IngredientArgs>.get_settings()
    // Offset: 0x2728780
    ::GlobalNamespace::FXSystemSettings* IFXContextParems$MagicCauldron_IngredientArgs$_get_settings();
    // private System.Void IFXContextParems<MagicCauldron.IngredientArgs>.OnPlayFX(MagicCauldron/IngredientArgs args)
    // Offset: 0x2728788
    void IFXContextParems$MagicCauldron_IngredientArgs$_OnPlayFX(::GlobalNamespace::MagicCauldron::IngredientArgs* args);
    // public System.Void .ctor()
    // Offset: 0x2726F1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MagicCauldron::IngrediantFXContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicCauldron::IngrediantFXContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MagicCauldron::IngrediantFXContext*, creationType>()));
    }
  }; // MagicCauldron/IngrediantFXContext
  #pragma pack(pop)
  static check_size<sizeof(MagicCauldron::IngrediantFXContext), 24 + sizeof(::GlobalNamespace::MagicCauldron::IngrediantFXContext::Callback*)> __GlobalNamespace_MagicCauldron_IngrediantFXContextSizeCheck;
  static_assert(sizeof(MagicCauldron::IngrediantFXContext) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::IngrediantFXContext::IFXContextParems$MagicCauldron_IngredientArgs$_get_settings
// Il2CppName: IFXContextParems<MagicCauldron.IngredientArgs>.get_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FXSystemSettings* (GlobalNamespace::MagicCauldron::IngrediantFXContext::*)()>(&GlobalNamespace::MagicCauldron::IngrediantFXContext::IFXContextParems$MagicCauldron_IngredientArgs$_get_settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron::IngrediantFXContext*), "IFXContextParems<MagicCauldron.IngredientArgs>.get_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::IngrediantFXContext::IFXContextParems$MagicCauldron_IngredientArgs$_OnPlayFX
// Il2CppName: IFXContextParems<MagicCauldron.IngredientArgs>.OnPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::IngrediantFXContext::*)(::GlobalNamespace::MagicCauldron::IngredientArgs*)>(&GlobalNamespace::MagicCauldron::IngrediantFXContext::IFXContextParems$MagicCauldron_IngredientArgs$_OnPlayFX)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("", "MagicCauldron/IngredientArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron::IngrediantFXContext*), "IFXContextParems<MagicCauldron.IngredientArgs>.OnPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::IngrediantFXContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
