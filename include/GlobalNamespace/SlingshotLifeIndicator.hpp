// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GorillaBattleManager
  class GorillaBattleManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlingshotLifeIndicator
  class SlingshotLifeIndicator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlingshotLifeIndicator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlingshotLifeIndicator*, "", "SlingshotLifeIndicator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: SlingshotLifeIndicator
  // [TokenAttribute] Offset: FFFFFFFF
  class SlingshotLifeIndicator : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // private VRRig myRig
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public GorillaBattleManager bMgr
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GorillaBattleManager* bMgr;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaBattleManager*) == 0x8);
    // public System.Boolean checkedBattle
    // Size: 0x1
    // Offset: 0x30
    bool checkedBattle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean inBattle
    // Size: 0x1
    // Offset: 0x31
    bool inBattle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inBattle and: indicator1
    char __padding3[0x6] = {};
    // public UnityEngine.GameObject indicator1
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* indicator1;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject indicator2
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* indicator2;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject indicator3
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* indicator3;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: private VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: public GorillaBattleManager bMgr
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager*& dyn_bMgr();
    // Get instance field reference: public System.Boolean checkedBattle
    [[deprecated("Use field access instead!")]] bool& dyn_checkedBattle();
    // Get instance field reference: public System.Boolean inBattle
    [[deprecated("Use field access instead!")]] bool& dyn_inBattle();
    // Get instance field reference: public UnityEngine.GameObject indicator1
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_indicator1();
    // Get instance field reference: public UnityEngine.GameObject indicator2
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_indicator2();
    // Get instance field reference: public UnityEngine.GameObject indicator3
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_indicator3();
    // Get instance field reference: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField();
    // private System.Boolean GorillaTag.ISpawnable.get_IsSpawned()
    // Offset: 0x296FE3C
    bool GorillaTag_ISpawnable_get_IsSpawned();
    // private System.Void GorillaTag.ISpawnable.set_IsSpawned(System.Boolean value)
    // Offset: 0x296FE44
    void GorillaTag_ISpawnable_set_IsSpawned(bool value);
    // private System.Void GorillaTag.ISpawnable.OnSpawn()
    // Offset: 0x296FE50
    void GorillaTag_ISpawnable_OnSpawn();
    // private System.Void GorillaTag.ISpawnable.OnDespawn()
    // Offset: 0x296FEAC
    void GorillaTag_ISpawnable_OnDespawn();
    // private System.Void OnEnable()
    // Offset: 0x296FEB0
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x296FF6C
    void OnDisable();
    // private System.Void SetActive(UnityEngine.GameObject obj, System.Boolean active)
    // Offset: 0x2970064
    void SetActive(::UnityEngine::GameObject* obj, bool active);
    // private System.Void LateUpdate()
    // Offset: 0x29700D8
    void LateUpdate();
    // public System.Void OnLeftRoom()
    // Offset: 0x297033C
    void OnLeftRoom();
    // public System.Void Reset()
    // Offset: 0x2970040
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x2970360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlingshotLifeIndicator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlingshotLifeIndicator*, creationType>()));
    }
  }; // SlingshotLifeIndicator
  #pragma pack(pop)
  static check_size<sizeof(SlingshotLifeIndicator), 80 + sizeof(bool)> __GlobalNamespace_SlingshotLifeIndicatorSizeCheck;
  static_assert(sizeof(SlingshotLifeIndicator) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_get_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "GorillaTag.ISpawnable.get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_set_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)(bool)>(&GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "GorillaTag.ISpawnable.set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnSpawn
// Il2CppName: GorillaTag.ISpawnable.OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "GorillaTag.ISpawnable.OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnDespawn
// Il2CppName: GorillaTag.ISpawnable.OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "GorillaTag.ISpawnable.OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)(::UnityEngine::GameObject*, bool)>(&GlobalNamespace::SlingshotLifeIndicator::SetActive)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotLifeIndicator::*)()>(&GlobalNamespace::SlingshotLifeIndicator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotLifeIndicator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotLifeIndicator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
