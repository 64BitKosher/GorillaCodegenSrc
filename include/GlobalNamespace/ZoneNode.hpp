// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
// Including type: GTSubZone
#include "GlobalNamespace/GTSubZone.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneNode
  struct ZoneNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneNode, "", "ZoneNode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x49
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ZoneNode
  // [TokenAttribute] Offset: FFFFFFFF
  struct ZoneNode/*, public ::System::ValueType, public ::System::IEquatable_1<::GlobalNamespace::ZoneNode>*/ {
    public:
    public:
    // public GTZone zoneId
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::GTZone zoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // public GTSubZone subZoneId
    // Size: 0x4
    // Offset: 0x4
    ::GlobalNamespace::GTSubZone subZoneId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTSubZone) == 0x4);
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 size
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::Vector3 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion orientation
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Quaternion orientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Bounds AABB
    // Size: 0x18
    // Offset: 0x30
    ::UnityEngine::Bounds AABB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public System.Boolean isValid
    // Size: 0x1
    // Offset: 0x48
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ZoneNode
    constexpr ZoneNode(::GlobalNamespace::GTZone zoneId_ = {}, ::GlobalNamespace::GTSubZone subZoneId_ = {}, ::UnityEngine::Vector3 center_ = {}, ::UnityEngine::Vector3 size_ = {}, ::UnityEngine::Quaternion orientation_ = {}, ::UnityEngine::Bounds AABB_ = {}, bool isValid_ = {}) noexcept : zoneId{zoneId_}, subZoneId{subZoneId_}, center{center_}, size{size_}, orientation{orientation_}, AABB{AABB_}, isValid{isValid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::ZoneNode>
    operator ::System::IEquatable_1<::GlobalNamespace::ZoneNode>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::ZoneNode>*>(this);
    }
    // Get static field: static private readonly ZoneNode <Null>k__BackingField
    static ::GlobalNamespace::ZoneNode _get_$Null$k__BackingField();
    // Set static field: static private readonly ZoneNode <Null>k__BackingField
    static void _set_$Null$k__BackingField(::GlobalNamespace::ZoneNode value);
    // Get instance field reference: public GTZone zoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zoneId();
    // Get instance field reference: public GTSubZone subZoneId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& dyn_subZoneId();
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector3 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_size();
    // Get instance field reference: public UnityEngine.Quaternion orientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_orientation();
    // Get instance field reference: public UnityEngine.Bounds AABB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_AABB();
    // Get instance field reference: public System.Boolean isValid
    [[deprecated("Use field access instead!")]] bool& dyn_isValid();
    // static public ZoneNode get_Null()
    // Offset: 0x27A9098
    static ::GlobalNamespace::ZoneNode get_Null();
    // public System.Int32 get_zoneKey()
    // Offset: 0x27A90F8
    int get_zoneKey();
    // public System.Boolean ContainsPoint(UnityEngine.Vector3 point)
    // Offset: 0x27A9164
    bool ContainsPoint(::UnityEngine::Vector3 point);
    // public System.Int32 SphereOverlap(UnityEngine.Vector3 position, System.Single radius)
    // Offset: 0x27A91B0
    int SphereOverlap(::UnityEngine::Vector3 position, float radius);
    // public System.Boolean Equals(ZoneNode other)
    // Offset: 0x27A9460
    bool Equals(::GlobalNamespace::ZoneNode other);
    // static private System.Void .cctor()
    // Offset: 0x27A95F8
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x27A91F8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x27A92C4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x27A9568
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // ZoneNode
  #pragma pack(pop)
  static check_size<sizeof(ZoneNode), 72 + sizeof(bool)> __GlobalNamespace_ZoneNodeSizeCheck;
  static_assert(sizeof(ZoneNode) == 0x49);
  // static public System.Boolean op_Equality(ZoneNode x, ZoneNode y)
  // Offset: 0x27A942C
  bool operator ==(const ::GlobalNamespace::ZoneNode& x, const ::GlobalNamespace::ZoneNode& y);
  // static public System.Boolean op_Inequality(ZoneNode x, ZoneNode y)
  // Offset: 0x27A9530
  bool operator !=(const ::GlobalNamespace::ZoneNode& x, const ::GlobalNamespace::ZoneNode& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ZoneNode (*)()>(&GlobalNamespace::ZoneNode::get_Null)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::get_zoneKey
// Il2CppName: get_zoneKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneNode::*)()>(&GlobalNamespace::ZoneNode::get_zoneKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "get_zoneKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneNode::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ZoneNode::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::SphereOverlap
// Il2CppName: SphereOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneNode::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::ZoneNode::SphereOverlap)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "SphereOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneNode::*)(::GlobalNamespace::ZoneNode)>(&GlobalNamespace::ZoneNode::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "ZoneNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ZoneNode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ZoneNode::*)()>(&GlobalNamespace::ZoneNode::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ZoneNode::*)()>(&GlobalNamespace::ZoneNode::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ZoneNode::*)(::Il2CppObject*)>(&GlobalNamespace::ZoneNode::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneNode), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ZoneNode::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
