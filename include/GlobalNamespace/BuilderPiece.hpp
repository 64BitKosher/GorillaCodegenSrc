// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SnapBounds
#include "GlobalNamespace/SnapBounds.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: State because it is already included!
  // Forward declaring type: BuilderMaterialOptions
  class BuilderMaterialOptions;
  // Forward declaring type: IBuilderPieceComponent
  class IBuilderPieceComponent;
  // Forward declaring type: BasePlatform
  class BasePlatform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Skipping declaration: Behaviour because it is already included!
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderAttachGridPlane
  class BuilderAttachGridPlane;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderPiece);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderPiece*, "", "BuilderPiece");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x15C
  #pragma pack(push, 1)
  // Autogenerated type: BuilderPiece
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderPiece : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BuilderPiece::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BuilderPiece/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BuilderPiece/State None
      static constexpr const int None = -1;
      // Get static field: static public BuilderPiece/State None
      static ::GlobalNamespace::BuilderPiece::State _get_None();
      // Set static field: static public BuilderPiece/State None
      static void _set_None(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State AttachedAndPlaced
      static constexpr const int AttachedAndPlaced = 0;
      // Get static field: static public BuilderPiece/State AttachedAndPlaced
      static ::GlobalNamespace::BuilderPiece::State _get_AttachedAndPlaced();
      // Set static field: static public BuilderPiece/State AttachedAndPlaced
      static void _set_AttachedAndPlaced(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State AttachedToDropped
      static constexpr const int AttachedToDropped = 1;
      // Get static field: static public BuilderPiece/State AttachedToDropped
      static ::GlobalNamespace::BuilderPiece::State _get_AttachedToDropped();
      // Set static field: static public BuilderPiece/State AttachedToDropped
      static void _set_AttachedToDropped(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State Grabbed
      static constexpr const int Grabbed = 2;
      // Get static field: static public BuilderPiece/State Grabbed
      static ::GlobalNamespace::BuilderPiece::State _get_Grabbed();
      // Set static field: static public BuilderPiece/State Grabbed
      static void _set_Grabbed(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State Dropped
      static constexpr const int Dropped = 3;
      // Get static field: static public BuilderPiece/State Dropped
      static ::GlobalNamespace::BuilderPiece::State _get_Dropped();
      // Set static field: static public BuilderPiece/State Dropped
      static void _set_Dropped(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State OnShelf
      static constexpr const int OnShelf = 4;
      // Get static field: static public BuilderPiece/State OnShelf
      static ::GlobalNamespace::BuilderPiece::State _get_OnShelf();
      // Set static field: static public BuilderPiece/State OnShelf
      static void _set_OnShelf(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State Displayed
      static constexpr const int Displayed = 5;
      // Get static field: static public BuilderPiece/State Displayed
      static ::GlobalNamespace::BuilderPiece::State _get_Displayed();
      // Set static field: static public BuilderPiece/State Displayed
      static void _set_Displayed(::GlobalNamespace::BuilderPiece::State value);
      // static field const value: static public BuilderPiece/State GrabbedLocal
      static constexpr const int GrabbedLocal = 6;
      // Get static field: static public BuilderPiece/State GrabbedLocal
      static ::GlobalNamespace::BuilderPiece::State _get_GrabbedLocal();
      // Set static field: static public BuilderPiece/State GrabbedLocal
      static void _set_GrabbedLocal(::GlobalNamespace::BuilderPiece::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BuilderPiece/State
    #pragma pack(pop)
    static check_size<sizeof(BuilderPiece::State), 0 + sizeof(int)> __GlobalNamespace_BuilderPiece_StateSizeCheck;
    static_assert(sizeof(BuilderPiece::State) == 0x4);
    public:
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x20
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public BuilderMaterialOptions materialOptions
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BuilderMaterialOptions* materialOptions;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderMaterialOptions*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> materialSwapTargets
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* materialSwapTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // public UnityEngine.Transform scaleRoot
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* scaleRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject placeVFX
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* placeVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject disconnectVFX
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* disconnectVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject grabbedVFX
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* grabbedVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject locationLockVFX
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* locationLockVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 pieceType
    // Size: 0x4
    // Offset: 0x60
    int pieceType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pieceId
    // Size: 0x4
    // Offset: 0x64
    int pieceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 materialType
    // Size: 0x4
    // Offset: 0x68
    int materialType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 heldByPlayerActorNumber
    // Size: 0x4
    // Offset: 0x6C
    int heldByPlayerActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean heldInLeftHand
    // Size: 0x1
    // Offset: 0x70
    bool heldInLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: heldInLeftHand and: parentHeld
    char __padding12[0x7] = {};
    // public UnityEngine.Transform parentHeld
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* parentHeld;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public BuilderPiece parentPiece
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::BuilderPiece* parentPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public BuilderPiece firstChildPiece
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::BuilderPiece* firstChildPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public BuilderPiece nextSiblingPiece
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::BuilderPiece* nextSiblingPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public System.Int32 attachIndex
    // Size: 0x4
    // Offset: 0x98
    int attachIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public SnapBounds attachBounds
    // Size: 0x10
    // Offset: 0x9C
    ::GlobalNamespace::SnapBounds attachBounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
    // public System.Int32 parentAttachIndex
    // Size: 0x4
    // Offset: 0xAC
    int parentAttachIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public SnapBounds parentAttachBounds
    // Size: 0x10
    // Offset: 0xB0
    ::GlobalNamespace::SnapBounds parentAttachBounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* gridPlanes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Behaviour> onlyWhenPlacedBehaviours
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>* onlyWhenPlacedBehaviours;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>*) == 0x8);
    // public System.Collections.Generic.List`1<IBuilderPieceComponent> pieceComponents
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::GlobalNamespace::IBuilderPieceComponent*>* pieceComponents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IBuilderPieceComponent*>*) == 0x8);
    // private System.Boolean pieceComponentsActive
    // Size: 0x1
    // Offset: 0xE0
    bool pieceComponentsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pieceComponentsActive and: onlyWhenPlaced
    char __padding25[0x7] = {};
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> onlyWhenPlaced
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* onlyWhenPlaced;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> onlyWhenNotPlaced
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* onlyWhenNotPlaced;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Boolean areMeshesToggledOnPlace
    // Size: 0x1
    // Offset: 0xF8
    bool areMeshesToggledOnPlace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: areMeshesToggledOnPlace and: moveToRoot
    char __padding28[0x7] = {};
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> moveToRoot
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* moveToRoot;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public UnityEngine.Rigidbody rigidBody
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // public BasePlatform platform
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::BasePlatform* platform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasePlatform*) == 0x8);
    // public System.Int32 preventSnapUntilMoved
    // Size: 0x4
    // Offset: 0x118
    int preventSnapUntilMoved;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 preventSnapUntilMovedFromPos
    // Size: 0xC
    // Offset: 0x11C
    ::UnityEngine::Vector3 preventSnapUntilMovedFromPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public BuilderPiece requestedParentPiece
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::BuilderPiece* requestedParentPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> meshesToCombine
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* meshesToCombine;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // public UnityEngine.GameObject bumpPrefab
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::GameObject* bumpPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> bumps
    // Size: 0x8
    // Offset: 0x140
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* bumps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public BuilderPiece/State state
    // Size: 0x4
    // Offset: 0x148
    ::GlobalNamespace::BuilderPiece::State state;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece::State) == 0x4);
    // public System.Boolean isStatic
    // Size: 0x1
    // Offset: 0x14C
    bool isStatic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isBuiltIntoTable
    // Size: 0x1
    // Offset: 0x14D
    bool isBuiltIntoTable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBuiltIntoTable and: renderingIndirect
    char __padding40[0x2] = {};
    // public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderingIndirect
    // Size: 0x8
    // Offset: 0x150
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* renderingIndirect;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // public System.Single tint
    // Size: 0x4
    // Offset: 0x158
    float tint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static public System.Int32 INVALID
    static constexpr const int INVALID = -1;
    // Get static field: static public System.Int32 INVALID
    static int _get_INVALID();
    // Set static field: static public System.Int32 INVALID
    static void _set_INVALID(int value);
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public BuilderMaterialOptions materialOptions
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderMaterialOptions*& dyn_materialOptions();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> materialSwapTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_materialSwapTargets();
    // Get instance field reference: public UnityEngine.Transform scaleRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_scaleRoot();
    // Get instance field reference: public UnityEngine.GameObject placeVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_placeVFX();
    // Get instance field reference: public UnityEngine.GameObject disconnectVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_disconnectVFX();
    // Get instance field reference: public UnityEngine.GameObject grabbedVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_grabbedVFX();
    // Get instance field reference: public UnityEngine.GameObject locationLockVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_locationLockVFX();
    // Get instance field reference: public System.Int32 pieceType
    [[deprecated("Use field access instead!")]] int& dyn_pieceType();
    // Get instance field reference: public System.Int32 pieceId
    [[deprecated("Use field access instead!")]] int& dyn_pieceId();
    // Get instance field reference: public System.Int32 materialType
    [[deprecated("Use field access instead!")]] int& dyn_materialType();
    // Get instance field reference: public System.Int32 heldByPlayerActorNumber
    [[deprecated("Use field access instead!")]] int& dyn_heldByPlayerActorNumber();
    // Get instance field reference: public System.Boolean heldInLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_heldInLeftHand();
    // Get instance field reference: public UnityEngine.Transform parentHeld
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parentHeld();
    // Get instance field reference: public BuilderPiece parentPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_parentPiece();
    // Get instance field reference: public BuilderPiece firstChildPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_firstChildPiece();
    // Get instance field reference: public BuilderPiece nextSiblingPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_nextSiblingPiece();
    // Get instance field reference: public System.Int32 attachIndex
    [[deprecated("Use field access instead!")]] int& dyn_attachIndex();
    // Get instance field reference: public SnapBounds attachBounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_attachBounds();
    // Get instance field reference: public System.Int32 parentAttachIndex
    [[deprecated("Use field access instead!")]] int& dyn_parentAttachIndex();
    // Get instance field reference: public SnapBounds parentAttachBounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_parentAttachBounds();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*& dyn_gridPlanes();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_colliders();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Behaviour> onlyWhenPlacedBehaviours
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>*& dyn_onlyWhenPlacedBehaviours();
    // Get instance field reference: public System.Collections.Generic.List`1<IBuilderPieceComponent> pieceComponents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IBuilderPieceComponent*>*& dyn_pieceComponents();
    // Get instance field reference: private System.Boolean pieceComponentsActive
    [[deprecated("Use field access instead!")]] bool& dyn_pieceComponentsActive();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> onlyWhenPlaced
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_onlyWhenPlaced();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> onlyWhenNotPlaced
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_onlyWhenNotPlaced();
    // Get instance field reference: public System.Boolean areMeshesToggledOnPlace
    [[deprecated("Use field access instead!")]] bool& dyn_areMeshesToggledOnPlace();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> moveToRoot
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_moveToRoot();
    // Get instance field reference: public UnityEngine.Rigidbody rigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigidBody();
    // Get instance field reference: public BasePlatform platform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasePlatform*& dyn_platform();
    // Get instance field reference: public System.Int32 preventSnapUntilMoved
    [[deprecated("Use field access instead!")]] int& dyn_preventSnapUntilMoved();
    // Get instance field reference: public UnityEngine.Vector3 preventSnapUntilMovedFromPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_preventSnapUntilMovedFromPos();
    // Get instance field reference: public BuilderPiece requestedParentPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_requestedParentPiece();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> meshesToCombine
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_meshesToCombine();
    // Get instance field reference: public UnityEngine.GameObject bumpPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bumpPrefab();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> bumps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_bumps();
    // Get instance field reference: public BuilderPiece/State state
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece::State& dyn_state();
    // Get instance field reference: public System.Boolean isStatic
    [[deprecated("Use field access instead!")]] bool& dyn_isStatic();
    // Get instance field reference: public System.Boolean isBuiltIntoTable
    [[deprecated("Use field access instead!")]] bool& dyn_isBuiltIntoTable();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderingIndirect
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_renderingIndirect();
    // Get instance field reference: public System.Single tint
    [[deprecated("Use field access instead!")]] float& dyn_tint();
    // private System.Void Awake()
    // Offset: 0x26E0FC8
    void Awake();
    // public System.Void OnReturnToPool()
    // Offset: 0x26E1538
    void OnReturnToPool();
    // public System.Void SetupPiece(System.Single gridSize)
    // Offset: 0x26E1724
    void SetupPiece(float gridSize);
    // public System.Void SetMaterial(System.Int32 inMaterialType, System.Boolean force)
    // Offset: 0x26E17F4
    void SetMaterial(int inMaterialType, bool force);
    // public System.Int32 GetPieceId()
    // Offset: 0x26E1C30
    int GetPieceId();
    // public System.Int32 GetParentPieceId()
    // Offset: 0x26E1C38
    int GetParentPieceId();
    // public System.Int32 GetAttachIndex()
    // Offset: 0x26E1CB8
    int GetAttachIndex();
    // public System.Int32 GetParentAttachIndex()
    // Offset: 0x26E1CC0
    int GetParentAttachIndex();
    // private System.Void SetPieceActive(System.Collections.Generic.List`1<IBuilderPieceComponent> components, System.Boolean active)
    // Offset: 0x26E1CC8
    void SetPieceActive(::System::Collections::Generic::List_1<::GlobalNamespace::IBuilderPieceComponent*>* components, bool active);
    // private System.Void SetBehavioursEnabled(System.Collections.Generic.List`1<T> components, System.Boolean enabled)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetBehavioursEnabled(::System::Collections::Generic::List_1<T>* components, bool enabled) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Behaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderPiece::SetBehavioursEnabled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBehavioursEnabled", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(components), ::il2cpp_utils::ExtractType(enabled)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, components, enabled);
    }
    // private System.Void SetCollidersEnabled(System.Collections.Generic.List`1<T> components, System.Boolean enabled)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetCollidersEnabled(::System::Collections::Generic::List_1<T>* components, bool enabled) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Collider*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderPiece::SetCollidersEnabled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCollidersEnabled", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(components), ::il2cpp_utils::ExtractType(enabled)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, components, enabled);
    }
    // public System.Void SetColliderLayers(System.Collections.Generic.List`1<T> components, System.Int32 layer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetColliderLayers(::System::Collections::Generic::List_1<T>* components, int layer) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Collider*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderPiece::SetColliderLayers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColliderLayers", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(components), ::il2cpp_utils::ExtractType(layer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, components, layer);
    }
    // private System.Void SetActive(System.Collections.Generic.List`1<UnityEngine.GameObject> gameObjects, System.Boolean active)
    // Offset: 0x26E143C
    void SetActive(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gameObjects, bool active);
    // public System.Void SetScale(System.Single scale)
    // Offset: 0x26E1E40
    void SetScale(float scale);
    // private System.Void SetTint(System.Single tint)
    // Offset: 0x26E1F1C
    void SetTint(float tint);
    // public System.Void SetParentPiece(System.Int32 newAttachIndex, SnapBounds newAttachBounds, BuilderPiece newParentPiece, System.Int32 newParentAttachIndex, SnapBounds newParentAttachBounds)
    // Offset: 0x26E1FC0
    void SetParentPiece(int newAttachIndex, ::GlobalNamespace::SnapBounds newAttachBounds, ::GlobalNamespace::BuilderPiece* newParentPiece, int newParentAttachIndex, ::GlobalNamespace::SnapBounds newParentAttachBounds);
    // public System.Void ClearParentPiece()
    // Offset: 0x26E2810
    void ClearParentPiece();
    // private System.Void AddSnapToGrid(System.Int32 attachGridIndex, SnapBounds bounds)
    // Offset: 0x26E2790
    void AddSnapToGrid(int attachGridIndex, ::GlobalNamespace::SnapBounds bounds);
    // private System.Void RemoveSnapFromGrid(System.Int32 attachGridIndex, SnapBounds bounds)
    // Offset: 0x26E2310
    void RemoveSnapFromGrid(int attachGridIndex, ::GlobalNamespace::SnapBounds bounds);
    // private System.Void AddPieceToParent(BuilderPiece piece)
    // Offset: 0x26E26F0
    void AddPieceToParent(::GlobalNamespace::BuilderPiece* piece);
    // static private System.Void RemovePieceFromParent(BuilderPiece piece)
    // Offset: 0x26E2390
    static void RemovePieceFromParent(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void SetParentHeld(UnityEngine.Transform parentHeld, System.Int32 heldByPlayerActorNumber, System.Boolean heldInLeftHand)
    // Offset: 0x26E2944
    void SetParentHeld(::UnityEngine::Transform* parentHeld, int heldByPlayerActorNumber, bool heldInLeftHand);
    // public System.Void ClearParentHeld()
    // Offset: 0x26E2B00
    void ClearParentHeld();
    // public System.Void SetState(BuilderPiece/State newState, System.Boolean force)
    // Offset: 0x26E2BBC
    void SetState(::GlobalNamespace::BuilderPiece::State newState, bool force);
    // public System.Void SetKinematic(System.Boolean kinematic)
    // Offset: 0x26E3214
    void SetKinematic(bool kinematic);
    // public System.Void SetStatic(System.Boolean isStatic, System.Boolean force)
    // Offset: 0x26E35A0
    void SetStatic(bool isStatic, bool force);
    // private System.Void SetChildrenState(BuilderPiece/State newState, System.Boolean force)
    // Offset: 0x26E3500
    void SetChildrenState(::GlobalNamespace::BuilderPiece::State newState, bool force);
    // public System.Void OnCreate()
    // Offset: 0x26E366C
    void OnCreate();
    // public System.Void PlayPlacementFx()
    // Offset: 0x26E377C
    void PlayPlacementFx();
    // public System.Void PlayDisconnectFx()
    // Offset: 0x26E387C
    void PlayDisconnectFx();
    // public System.Void PlayGrabbedFx()
    // Offset: 0x26E38F8
    void PlayGrabbedFx();
    // public System.Void PlayLocationLockFx()
    // Offset: 0x26E3974
    void PlayLocationLockFx();
    // private System.Void PlayVFX(UnityEngine.GameObject vfx)
    // Offset: 0x26E37F8
    void PlayVFX(::UnityEngine::GameObject* vfx);
    // static public BuilderPiece GetBuilderPieceFromCollider(UnityEngine.Collider collider)
    // Offset: 0x26E39F0
    static ::GlobalNamespace::BuilderPiece* GetBuilderPieceFromCollider(::UnityEngine::Collider* collider);
    // static public BuilderPiece GetBuilderPieceFromTransform(UnityEngine.Transform transform)
    // Offset: 0x26E3AC0
    static ::GlobalNamespace::BuilderPiece* GetBuilderPieceFromTransform(::UnityEngine::Transform* transform);
    // static public System.Void MakePieceRoot(BuilderPiece piece)
    // Offset: 0x26E3B9C
    static void MakePieceRoot(::GlobalNamespace::BuilderPiece* piece);
    // public BuilderPiece GetRootPiece()
    // Offset: 0x26E3CAC
    ::GlobalNamespace::BuilderPiece* GetRootPiece();
    // public System.Void .ctor()
    // Offset: 0x26E3D34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderPiece* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderPiece::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderPiece*, creationType>()));
    }
  }; // BuilderPiece
  #pragma pack(pop)
  static check_size<sizeof(BuilderPiece), 344 + sizeof(float)> __GlobalNamespace_BuilderPieceSizeCheck;
  static_assert(sizeof(BuilderPiece) == 0x15C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderPiece::State, "", "BuilderPiece/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::OnReturnToPool
// Il2CppName: OnReturnToPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::OnReturnToPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "OnReturnToPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetupPiece
// Il2CppName: SetupPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(float)>(&GlobalNamespace::BuilderPiece::SetupPiece)> {
  static const MethodInfo* get() {
    static auto* gridSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetupPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gridSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(int, bool)>(&GlobalNamespace::BuilderPiece::SetMaterial)> {
  static const MethodInfo* get() {
    static auto* inMaterialType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inMaterialType, force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetPieceId
// Il2CppName: GetPieceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::GetPieceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetPieceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetParentPieceId
// Il2CppName: GetParentPieceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::GetParentPieceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetParentPieceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetAttachIndex
// Il2CppName: GetAttachIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::GetAttachIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetAttachIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetParentAttachIndex
// Il2CppName: GetParentAttachIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::GetParentAttachIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetParentAttachIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetPieceActive
// Il2CppName: SetPieceActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::System::Collections::Generic::List_1<::GlobalNamespace::IBuilderPieceComponent*>*, bool)>(&GlobalNamespace::BuilderPiece::SetPieceActive)> {
  static const MethodInfo* get() {
    static auto* components = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IBuilderPieceComponent")})->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetPieceActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{components, active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetBehavioursEnabled
// Il2CppName: SetBehavioursEnabled
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetCollidersEnabled
// Il2CppName: SetCollidersEnabled
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetColliderLayers
// Il2CppName: SetColliderLayers
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, bool)>(&GlobalNamespace::BuilderPiece::SetActive)> {
  static const MethodInfo* get() {
    static auto* gameObjects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjects, active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(float)>(&GlobalNamespace::BuilderPiece::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetTint
// Il2CppName: SetTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(float)>(&GlobalNamespace::BuilderPiece::SetTint)> {
  static const MethodInfo* get() {
    static auto* tint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetParentPiece
// Il2CppName: SetParentPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(int, ::GlobalNamespace::SnapBounds, ::GlobalNamespace::BuilderPiece*, int, ::GlobalNamespace::SnapBounds)>(&GlobalNamespace::BuilderPiece::SetParentPiece)> {
  static const MethodInfo* get() {
    static auto* newAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* newParentPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* newParentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newParentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetParentPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newAttachIndex, newAttachBounds, newParentPiece, newParentAttachIndex, newParentAttachBounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::ClearParentPiece
// Il2CppName: ClearParentPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::ClearParentPiece)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "ClearParentPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::AddSnapToGrid
// Il2CppName: AddSnapToGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(int, ::GlobalNamespace::SnapBounds)>(&GlobalNamespace::BuilderPiece::AddSnapToGrid)> {
  static const MethodInfo* get() {
    static auto* attachGridIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "AddSnapToGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attachGridIndex, bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::RemoveSnapFromGrid
// Il2CppName: RemoveSnapFromGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(int, ::GlobalNamespace::SnapBounds)>(&GlobalNamespace::BuilderPiece::RemoveSnapFromGrid)> {
  static const MethodInfo* get() {
    static auto* attachGridIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "RemoveSnapFromGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attachGridIndex, bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::AddPieceToParent
// Il2CppName: AddPieceToParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderPiece::AddPieceToParent)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "AddPieceToParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::RemovePieceFromParent
// Il2CppName: RemovePieceFromParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderPiece::RemovePieceFromParent)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "RemovePieceFromParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetParentHeld
// Il2CppName: SetParentHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::UnityEngine::Transform*, int, bool)>(&GlobalNamespace::BuilderPiece::SetParentHeld)> {
  static const MethodInfo* get() {
    static auto* parentHeld = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* heldByPlayerActorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* heldInLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetParentHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentHeld, heldByPlayerActorNumber, heldInLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::ClearParentHeld
// Il2CppName: ClearParentHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::ClearParentHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "ClearParentHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::GlobalNamespace::BuilderPiece::State, bool)>(&GlobalNamespace::BuilderPiece::SetState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "BuilderPiece/State")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetKinematic
// Il2CppName: SetKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(bool)>(&GlobalNamespace::BuilderPiece::SetKinematic)> {
  static const MethodInfo* get() {
    static auto* kinematic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kinematic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetStatic
// Il2CppName: SetStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(bool, bool)>(&GlobalNamespace::BuilderPiece::SetStatic)> {
  static const MethodInfo* get() {
    static auto* isStatic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isStatic, force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::SetChildrenState
// Il2CppName: SetChildrenState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::GlobalNamespace::BuilderPiece::State, bool)>(&GlobalNamespace::BuilderPiece::SetChildrenState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "BuilderPiece/State")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "SetChildrenState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::OnCreate
// Il2CppName: OnCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::OnCreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "OnCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::PlayPlacementFx
// Il2CppName: PlayPlacementFx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::PlayPlacementFx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "PlayPlacementFx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::PlayDisconnectFx
// Il2CppName: PlayDisconnectFx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::PlayDisconnectFx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "PlayDisconnectFx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::PlayGrabbedFx
// Il2CppName: PlayGrabbedFx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::PlayGrabbedFx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "PlayGrabbedFx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::PlayLocationLockFx
// Il2CppName: PlayLocationLockFx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::PlayLocationLockFx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "PlayLocationLockFx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::PlayVFX
// Il2CppName: PlayVFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderPiece::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BuilderPiece::PlayVFX)> {
  static const MethodInfo* get() {
    static auto* vfx = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "PlayVFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vfx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetBuilderPieceFromCollider
// Il2CppName: GetBuilderPieceFromCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (*)(::UnityEngine::Collider*)>(&GlobalNamespace::BuilderPiece::GetBuilderPieceFromCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetBuilderPieceFromCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetBuilderPieceFromTransform
// Il2CppName: GetBuilderPieceFromTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (*)(::UnityEngine::Transform*)>(&GlobalNamespace::BuilderPiece::GetBuilderPieceFromTransform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetBuilderPieceFromTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::MakePieceRoot
// Il2CppName: MakePieceRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BuilderPiece*)>(&GlobalNamespace::BuilderPiece::MakePieceRoot)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "MakePieceRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::GetRootPiece
// Il2CppName: GetRootPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (GlobalNamespace::BuilderPiece::*)()>(&GlobalNamespace::BuilderPiece::GetRootPiece)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderPiece*), "GetRootPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderPiece::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
