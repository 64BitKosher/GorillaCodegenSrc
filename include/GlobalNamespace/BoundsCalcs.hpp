// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BoundsInfo
#include "GlobalNamespace/BoundsInfo.hpp"
// Including type: StateHash
#include "GlobalNamespace/StateHash.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BoundsCalcs
  class BoundsCalcs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BoundsCalcs);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BoundsCalcs*, "", "BoundsCalcs");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: BoundsCalcs
  // [TokenAttribute] Offset: FFFFFFFF
  class BoundsCalcs : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.MeshFilter[] optionalTargets
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::MeshFilter*> optionalTargets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshFilter*>) == 0x8);
    // public System.Boolean useRootMeshOnly
    // Size: 0x1
    // Offset: 0x28
    bool useRootMeshOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRootMeshOnly and: elements
    char __padding1[0x7] = {};
    // public System.Collections.Generic.List`1<BoundsInfo> elements
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::BoundsInfo>* elements;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BoundsInfo>*) == 0x8);
    // public BoundsInfo composite
    // Size: 0x60
    // Offset: 0x38
    ::GlobalNamespace::BoundsInfo composite;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BoundsInfo) == 0x60);
    // private StateHash _state
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::StateHash state;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::StateHash) == 0x8);
    public:
    // Get static field: static private UnityEngine.MeshFilter[] singleMesh
    static ::ArrayW<::UnityEngine::MeshFilter*> _get_singleMesh();
    // Set static field: static private UnityEngine.MeshFilter[] singleMesh
    static void _set_singleMesh(::ArrayW<::UnityEngine::MeshFilter*> value);
    // Get instance field reference: public UnityEngine.MeshFilter[] optionalTargets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshFilter*>& dyn_optionalTargets();
    // Get instance field reference: public System.Boolean useRootMeshOnly
    [[deprecated("Use field access instead!")]] bool& dyn_useRootMeshOnly();
    // Get instance field reference: public System.Collections.Generic.List`1<BoundsInfo> elements
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BoundsInfo>*& dyn_elements();
    // Get instance field reference: public BoundsInfo composite
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BoundsInfo& dyn_composite();
    // Get instance field reference: private StateHash _state
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::StateHash& dyn__state();
    // public System.Void Compute()
    // Offset: 0x27A67B0
    void Compute();
    // public System.Void .ctor()
    // Offset: 0x27A6F50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoundsCalcs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoundsCalcs*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x27A7008
    static void _cctor();
  }; // BoundsCalcs
  #pragma pack(pop)
  static check_size<sizeof(BoundsCalcs), 152 + sizeof(::GlobalNamespace::StateHash)> __GlobalNamespace_BoundsCalcsSizeCheck;
  static_assert(sizeof(BoundsCalcs) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BoundsCalcs::Compute
// Il2CppName: Compute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BoundsCalcs::*)()>(&GlobalNamespace::BoundsCalcs::Compute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsCalcs*), "Compute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsCalcs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BoundsCalcs::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BoundsCalcs::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsCalcs*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
