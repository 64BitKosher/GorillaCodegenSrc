// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BasePageHandler
  class BasePageHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BasePageHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BasePageHandler*, "", "BasePageHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BasePageHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class BasePageHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 <selectedIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int selectedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <currentPage>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int currentPage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <pages>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int pages;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <maxEntires>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    int maxEntires;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 <selectedIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$selectedIndex$k__BackingField();
    // Get instance field reference: private System.Int32 <currentPage>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$currentPage$k__BackingField();
    // Get instance field reference: private System.Int32 <pages>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pages$k__BackingField();
    // Get instance field reference: private System.Int32 <maxEntires>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxEntires$k__BackingField();
    // protected System.Int32 get_selectedIndex()
    // Offset: 0x27734B0
    int get_selectedIndex();
    // private System.Void set_selectedIndex(System.Int32 value)
    // Offset: 0x27734B8
    void set_selectedIndex(int value);
    // protected System.Int32 get_currentPage()
    // Offset: 0x27734C0
    int get_currentPage();
    // private System.Void set_currentPage(System.Int32 value)
    // Offset: 0x27734C8
    void set_currentPage(int value);
    // protected System.Int32 get_pages()
    // Offset: 0x27734D0
    int get_pages();
    // private System.Void set_pages(System.Int32 value)
    // Offset: 0x27734D8
    void set_pages(int value);
    // protected System.Int32 get_maxEntires()
    // Offset: 0x27734E0
    int get_maxEntires();
    // private System.Void set_maxEntires(System.Int32 value)
    // Offset: 0x27734E8
    void set_maxEntires(int value);
    // protected System.Int32 get_pageSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_pageSize();
    // protected System.Int32 get_entriesCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_entriesCount();
    // protected System.Void Start()
    // Offset: 0x27734F0
    void Start();
    // public System.Void SelectEntryOnPage(System.Int32 entryIndex)
    // Offset: 0x2773634
    void SelectEntryOnPage(int entryIndex);
    // public System.Void SelectEntryFromIndex(System.Int32 index)
    // Offset: 0x27736A4
    void SelectEntryFromIndex(int index);
    // public System.Void ChangePage(System.Boolean left)
    // Offset: 0x27737A8
    void ChangePage(bool left);
    // public System.Void SetPage(System.Int32 page)
    // Offset: 0x277370C
    void SetPage(int page);
    // protected System.Void ShowPage(System.Int32 selectedPage, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ShowPage(int selectedPage, int startIndex, int endIndex);
    // protected System.Void PageEntrySelected(System.Int32 pageEntry, System.Int32 selectionIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PageEntrySelected(int pageEntry, int selectionIndex);
    // protected System.Void .ctor()
    // Offset: 0x277382C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BasePageHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasePageHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BasePageHandler*, creationType>()));
    }
  }; // BasePageHandler
  #pragma pack(pop)
  static check_size<sizeof(BasePageHandler), 44 + sizeof(int)> __GlobalNamespace_BasePageHandlerSizeCheck;
  static_assert(sizeof(BasePageHandler) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_selectedIndex
// Il2CppName: get_selectedIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_selectedIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_selectedIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::set_selectedIndex
// Il2CppName: set_selectedIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::set_selectedIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "set_selectedIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_currentPage
// Il2CppName: get_currentPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_currentPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_currentPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::set_currentPage
// Il2CppName: set_currentPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::set_currentPage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "set_currentPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_pages
// Il2CppName: get_pages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_pages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_pages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::set_pages
// Il2CppName: set_pages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::set_pages)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "set_pages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_maxEntires
// Il2CppName: get_maxEntires
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_maxEntires)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_maxEntires", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::set_maxEntires
// Il2CppName: set_maxEntires
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::set_maxEntires)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "set_maxEntires", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_pageSize
// Il2CppName: get_pageSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_pageSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_pageSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::get_entriesCount
// Il2CppName: get_entriesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::get_entriesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "get_entriesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)()>(&GlobalNamespace::BasePageHandler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::SelectEntryOnPage
// Il2CppName: SelectEntryOnPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::SelectEntryOnPage)> {
  static const MethodInfo* get() {
    static auto* entryIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "SelectEntryOnPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::SelectEntryFromIndex
// Il2CppName: SelectEntryFromIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::SelectEntryFromIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "SelectEntryFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::ChangePage
// Il2CppName: ChangePage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(bool)>(&GlobalNamespace::BasePageHandler::ChangePage)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "ChangePage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::SetPage
// Il2CppName: SetPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int)>(&GlobalNamespace::BasePageHandler::SetPage)> {
  static const MethodInfo* get() {
    static auto* page = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "SetPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{page});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::ShowPage
// Il2CppName: ShowPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int, int, int)>(&GlobalNamespace::BasePageHandler::ShowPage)> {
  static const MethodInfo* get() {
    static auto* selectedPage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "ShowPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectedPage, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::PageEntrySelected
// Il2CppName: PageEntrySelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasePageHandler::*)(int, int)>(&GlobalNamespace::BasePageHandler::PageEntrySelected)> {
  static const MethodInfo* get() {
    static auto* pageEntry = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* selectionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasePageHandler*), "PageEntrySelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pageEntry, selectionIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasePageHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
