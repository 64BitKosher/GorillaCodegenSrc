// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: BodyDockPositions because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DropZone
  class DropZone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DropZone);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DropZone*, "", "DropZone");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: DropZone
  // [TokenAttribute] Offset: FFFFFFFF
  class DropZone : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BodyDockPositions forBodyDock
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BodyDockPositions* forBodyDock;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions*) == 0x8);
    // public BodyDockPositions/DropPositions dropPosition
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::BodyDockPositions::DropPositions dropPosition;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BodyDockPositions::DropPositions) == 0x4);
    // Padding between fields: dropPosition and: anchor
    char __padding1[0x4] = {};
    // public UnityEngine.Transform anchor
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* anchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public BodyDockPositions forBodyDock
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& dyn_forBodyDock();
    // Get instance field reference: public BodyDockPositions/DropPositions dropPosition
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& dyn_dropPosition();
    // Get instance field reference: public UnityEngine.Transform anchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_anchor();
    // public System.Void .ctor()
    // Offset: 0x29674D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DropZone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DropZone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DropZone*, creationType>()));
    }
  }; // DropZone
  #pragma pack(pop)
  static check_size<sizeof(DropZone), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_DropZoneSizeCheck;
  static_assert(sizeof(DropZone) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DropZone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
