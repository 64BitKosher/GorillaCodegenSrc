// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/PassthroughPreferenceFields
#include "GlobalNamespace/OVRPlugin_PassthroughPreferenceFields.hpp"
// Including type: OVRPlugin/PassthroughPreferenceFlags
#include "GlobalNamespace/OVRPlugin_PassthroughPreferenceFlags.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::PassthroughPreferences, "", "OVRPlugin/PassthroughPreferences");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/PassthroughPreferences
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::PassthroughPreferences/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/PassthroughPreferenceFields Fields
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFields Fields;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::PassthroughPreferenceFields) == 0x4);
    // Padding between fields: Fields and: Flags
    char __padding0[0x4] = {};
    // public OVRPlugin/PassthroughPreferenceFlags Flags
    // Size: 0x8
    // Offset: 0x8
    ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags Flags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags) == 0x8);
    public:
    // Creating value type constructor for type: PassthroughPreferences
    constexpr PassthroughPreferences(::GlobalNamespace::OVRPlugin::PassthroughPreferenceFields Fields_ = {}, ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags Flags_ = {}) noexcept : Fields{Fields_}, Flags{Flags_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/PassthroughPreferenceFields Fields
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFields& dyn_Fields();
    // Get instance field reference: public OVRPlugin/PassthroughPreferenceFlags Flags
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags& dyn_Flags();
  }; // OVRPlugin/PassthroughPreferences
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::PassthroughPreferences), 8 + sizeof(::GlobalNamespace::OVRPlugin::PassthroughPreferenceFlags)> __GlobalNamespace_OVRPlugin_PassthroughPreferencesSizeCheck;
  static_assert(sizeof(OVRPlugin::PassthroughPreferences) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
