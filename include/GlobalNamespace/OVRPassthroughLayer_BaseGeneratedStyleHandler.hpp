// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughLayer
#include "GlobalNamespace/OVRPassthroughLayer.hpp"
// Including type: OVRPassthroughLayer/IStyleHandler
#include "GlobalNamespace/OVRPassthroughLayer_IStyleHandler.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*, "", "OVRPassthroughLayer/BaseGeneratedStyleHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughLayer/BaseGeneratedStyleHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPassthroughLayer::BaseGeneratedStyleHandler : public ::Il2CppObject/*, public ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler*/ {
    public:
    public:
    // private System.Runtime.InteropServices.GCHandle _colorMapDataHandle
    // Size: 0x8
    // Offset: 0x10
    ::System::Runtime::InteropServices::GCHandle colorMapDataHandle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x8);
    // protected System.Byte[] _colorMapData
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> colorMapData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler
    operator ::GlobalNamespace::OVRPassthroughLayer::IStyleHandler() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRPassthroughLayer::IStyleHandler*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle _colorMapDataHandle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn__colorMapDataHandle();
    // Get instance field reference: protected System.Byte[] _colorMapData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__colorMapData();
    // protected System.UInt32 get_MapSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint get_MapSize();
    // public System.Boolean get_IsValid()
    // Offset: 0x48EBF34
    bool get_IsValid();
    // public System.Void .ctor(ref System.Runtime.InteropServices.GCHandle colorMapDataHandler, System.Byte[] colorMapData)
    // Offset: 0x48EBF3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughLayer::BaseGeneratedStyleHandler* New_ctor(ByRef<::System::Runtime::InteropServices::GCHandle> colorMapDataHandler, ::ArrayW<uint8_t> colorMapData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughLayer::BaseGeneratedStyleHandler*, creationType>(byref(colorMapDataHandler), colorMapData)));
    }
    // public System.Void Update(OVRPassthroughLayer/Settings settings)
    // Offset: 0x48EBF78
    void Update(::GlobalNamespace::OVRPassthroughLayer::Settings settings);
    // public System.Void ApplyStyleSettings(ref OVRPlugin/InsightPassthroughStyle2 style)
    // Offset: 0x48EBF7C
    void ApplyStyleSettings(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2> style);
    // public System.Void Clear()
    // Offset: 0x48EBFE4
    void Clear();
    // protected System.Void AllocateColorMapData(System.UInt32 size)
    // Offset: 0x48EBFF0
    void AllocateColorMapData(uint size);
    // protected System.Void DeallocateColorMapData()
    // Offset: 0x48EC094
    void DeallocateColorMapData();
    // protected System.Void WriteColorToColorMap(System.Int32 colorIndex, ref UnityEngine.Color color)
    // Offset: 0x48EC0DC
    void WriteColorToColorMap(int colorIndex, ByRef<::UnityEngine::Color> color);
    // protected System.Void WriteFloatToColorMap(System.Int32 index, System.Single value)
    // Offset: 0x48EC148
    void WriteFloatToColorMap(int index, float value);
    // static protected System.Void ComputeBrightnessContrastPosterizeMap(System.Byte[] result, System.Single brightness, System.Single contrast, System.Single posterize)
    // Offset: 0x48EC180
    static void ComputeBrightnessContrastPosterizeMap(::ArrayW<uint8_t> result, float brightness, float contrast, float posterize);
  }; // OVRPassthroughLayer/BaseGeneratedStyleHandler
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughLayer::BaseGeneratedStyleHandler), 24 + sizeof(::ArrayW<uint8_t>)> __GlobalNamespace_OVRPassthroughLayer_BaseGeneratedStyleHandlerSizeCheck;
  static_assert(sizeof(OVRPassthroughLayer::BaseGeneratedStyleHandler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::get_MapSize
// Il2CppName: get_MapSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::get_MapSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "get_MapSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)(::GlobalNamespace::OVRPassthroughLayer::Settings)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::Update)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughLayer/Settings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::ApplyStyleSettings
// Il2CppName: ApplyStyleSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2>)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::ApplyStyleSettings)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughStyle2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "ApplyStyleSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::AllocateColorMapData
// Il2CppName: AllocateColorMapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)(uint)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::AllocateColorMapData)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "AllocateColorMapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::DeallocateColorMapData
// Il2CppName: DeallocateColorMapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::DeallocateColorMapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "DeallocateColorMapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::WriteColorToColorMap
// Il2CppName: WriteColorToColorMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)(int, ByRef<::UnityEngine::Color>)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::WriteColorToColorMap)> {
  static const MethodInfo* get() {
    static auto* colorIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "WriteColorToColorMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorIndex, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::WriteFloatToColorMap
// Il2CppName: WriteFloatToColorMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::*)(int, float)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::WriteFloatToColorMap)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "WriteFloatToColorMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::ComputeBrightnessContrastPosterizeMap
// Il2CppName: ComputeBrightnessContrastPosterizeMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, float, float, float)>(&GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler::ComputeBrightnessContrastPosterizeMap)> {
  static const MethodInfo* get() {
    static auto* result = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* brightness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contrast = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* posterize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::BaseGeneratedStyleHandler*), "ComputeBrightnessContrastPosterizeMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, brightness, contrast, posterize});
  }
};
