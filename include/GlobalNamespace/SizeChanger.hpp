// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SizeChangerTrigger
  class SizeChangerTrigger;
  // Forward declaring type: VRRig
  class VRRig;
  // Skipping declaration: ChangerType because it is already included!
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction
  class UnityAction;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SizeChanger
  class SizeChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SizeChanger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeChanger*, "", "SizeChanger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: SizeChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class SizeChanger : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    // Nested type: ::GlobalNamespace::SizeChanger::ChangerType
    struct ChangerType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SizeChanger/ChangerType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ChangerType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ChangerType
      constexpr ChangerType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SizeChanger/ChangerType Static
      static constexpr const int Static = 0;
      // Get static field: static public SizeChanger/ChangerType Static
      static ::GlobalNamespace::SizeChanger::ChangerType _get_Static();
      // Set static field: static public SizeChanger/ChangerType Static
      static void _set_Static(::GlobalNamespace::SizeChanger::ChangerType value);
      // static field const value: static public SizeChanger/ChangerType Continuous
      static constexpr const int Continuous = 1;
      // Get static field: static public SizeChanger/ChangerType Continuous
      static ::GlobalNamespace::SizeChanger::ChangerType _get_Continuous();
      // Set static field: static public SizeChanger/ChangerType Continuous
      static void _set_Continuous(::GlobalNamespace::SizeChanger::ChangerType value);
      // static field const value: static public SizeChanger/ChangerType Radius
      static constexpr const int Radius = 2;
      // Get static field: static public SizeChanger/ChangerType Radius
      static ::GlobalNamespace::SizeChanger::ChangerType _get_Radius();
      // Set static field: static public SizeChanger/ChangerType Radius
      static void _set_Radius(::GlobalNamespace::SizeChanger::ChangerType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SizeChanger/ChangerType
    #pragma pack(pop)
    static check_size<sizeof(SizeChanger::ChangerType), 0 + sizeof(int)> __GlobalNamespace_SizeChanger_ChangerTypeSizeCheck;
    static_assert(sizeof(SizeChanger::ChangerType) == 0x4);
    public:
    // private SizeChanger/ChangerType myType
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::SizeChanger::ChangerType myType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeChanger::ChangerType) == 0x4);
    // private System.Single staticEasing
    // Size: 0x4
    // Offset: 0x2C
    float staticEasing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxScale
    // Size: 0x4
    // Offset: 0x30
    float maxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minScale
    // Size: 0x4
    // Offset: 0x34
    float minScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Collider myCollider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Collider* myCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.Transform startPos
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* startPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform endPos
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* endPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private SizeChangerTrigger enterTrigger
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SizeChangerTrigger* enterTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeChangerTrigger*) == 0x8);
    // private SizeChangerTrigger exitTrigger
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::SizeChangerTrigger* exitTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeChangerTrigger*) == 0x8);
    // private SizeChangerTrigger exitOnEnterTrigger
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::SizeChangerTrigger* exitOnEnterTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeChangerTrigger*) == 0x8);
    // public System.Boolean alwaysControlWhenEntered
    // Size: 0x1
    // Offset: 0x68
    bool alwaysControlWhenEntered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysControlWhenEntered and: priority
    char __padding10[0x3] = {};
    // public System.Int32 priority
    // Size: 0x4
    // Offset: 0x6C
    int priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean aprilFoolsEnabled
    // Size: 0x1
    // Offset: 0x70
    bool aprilFoolsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: aprilFoolsEnabled and: startRadius
    char __padding12[0x3] = {};
    // public System.Single startRadius
    // Size: 0x4
    // Offset: 0x74
    float startRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endRadius
    // Size: 0x4
    // Offset: 0x78
    float endRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean affectLayerA
    // Size: 0x1
    // Offset: 0x7C
    bool affectLayerA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerB
    // Size: 0x1
    // Offset: 0x7D
    bool affectLayerB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerC
    // Size: 0x1
    // Offset: 0x7E
    bool affectLayerC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerD
    // Size: 0x1
    // Offset: 0x7F
    bool affectLayerD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Events.UnityAction OnExit
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Events::UnityAction* OnExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction*) == 0x8);
    // public UnityEngine.Events.UnityAction OnEnter
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Events::UnityAction* OnEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction*) == 0x8);
    // private System.Collections.Generic.HashSet`1<VRRig> unregisteredPresentRigs
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::HashSet_1<::GlobalNamespace::VRRig*>* unregisteredPresentRigs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::VRRig*>*) == 0x8);
    public:
    // Get instance field reference: private SizeChanger/ChangerType myType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeChanger::ChangerType& dyn_myType();
    // Get instance field reference: private System.Single staticEasing
    [[deprecated("Use field access instead!")]] float& dyn_staticEasing();
    // Get instance field reference: private System.Single maxScale
    [[deprecated("Use field access instead!")]] float& dyn_maxScale();
    // Get instance field reference: private System.Single minScale
    [[deprecated("Use field access instead!")]] float& dyn_minScale();
    // Get instance field reference: private UnityEngine.Collider myCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_myCollider();
    // Get instance field reference: private UnityEngine.Transform startPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_startPos();
    // Get instance field reference: private UnityEngine.Transform endPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_endPos();
    // Get instance field reference: private SizeChangerTrigger enterTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeChangerTrigger*& dyn_enterTrigger();
    // Get instance field reference: private SizeChangerTrigger exitTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeChangerTrigger*& dyn_exitTrigger();
    // Get instance field reference: private SizeChangerTrigger exitOnEnterTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeChangerTrigger*& dyn_exitOnEnterTrigger();
    // Get instance field reference: public System.Boolean alwaysControlWhenEntered
    [[deprecated("Use field access instead!")]] bool& dyn_alwaysControlWhenEntered();
    // Get instance field reference: public System.Int32 priority
    [[deprecated("Use field access instead!")]] int& dyn_priority();
    // Get instance field reference: public System.Boolean aprilFoolsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_aprilFoolsEnabled();
    // Get instance field reference: public System.Single startRadius
    [[deprecated("Use field access instead!")]] float& dyn_startRadius();
    // Get instance field reference: public System.Single endRadius
    [[deprecated("Use field access instead!")]] float& dyn_endRadius();
    // Get instance field reference: public System.Boolean affectLayerA
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerA();
    // Get instance field reference: public System.Boolean affectLayerB
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerB();
    // Get instance field reference: public System.Boolean affectLayerC
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerC();
    // Get instance field reference: public System.Boolean affectLayerD
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerD();
    // Get instance field reference: public UnityEngine.Events.UnityAction OnExit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction*& dyn_OnExit();
    // Get instance field reference: public UnityEngine.Events.UnityAction OnEnter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction*& dyn_OnEnter();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<VRRig> unregisteredPresentRigs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GlobalNamespace::VRRig*>*& dyn_unregisteredPresentRigs();
    // public System.Int32 get_SizeLayerMask()
    // Offset: 0x272A37C
    int get_SizeLayerMask();
    // public SizeChanger/ChangerType get_MyType()
    // Offset: 0x272A3B4
    ::GlobalNamespace::SizeChanger::ChangerType get_MyType();
    // public System.Single get_MaxScale()
    // Offset: 0x272A3BC
    float get_MaxScale();
    // public System.Single get_MinScale()
    // Offset: 0x272A3C4
    float get_MinScale();
    // public UnityEngine.Transform get_StartPos()
    // Offset: 0x272A3CC
    ::UnityEngine::Transform* get_StartPos();
    // public UnityEngine.Transform get_EndPos()
    // Offset: 0x272A3D4
    ::UnityEngine::Transform* get_EndPos();
    // public System.Single get_StaticEasing()
    // Offset: 0x272A3DC
    float get_StaticEasing();
    // private System.Void Awake()
    // Offset: 0x272A3E4
    void Awake();
    // public System.Void OnEnable()
    // Offset: 0x272A450
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x272A81C
    void OnDisable();
    // public System.Void AddEnterTrigger(SizeChangerTrigger trigger)
    // Offset: 0x272AAE0
    void AddEnterTrigger(::GlobalNamespace::SizeChangerTrigger* trigger);
    // public System.Void RemoveEnterTrigger(SizeChangerTrigger trigger)
    // Offset: 0x272ABAC
    void RemoveEnterTrigger(::GlobalNamespace::SizeChangerTrigger* trigger);
    // public System.Void AddExitOnEnterTrigger(SizeChangerTrigger trigger)
    // Offset: 0x272AC78
    void AddExitOnEnterTrigger(::GlobalNamespace::SizeChangerTrigger* trigger);
    // public System.Void RemoveExitOnEnterTrigger(SizeChangerTrigger trigger)
    // Offset: 0x272AD44
    void RemoveExitOnEnterTrigger(::GlobalNamespace::SizeChangerTrigger* trigger);
    // public System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x272AE10
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void acceptRig(VRRig rig)
    // Offset: 0x272AF28
    void acceptRig(::GlobalNamespace::VRRig* rig);
    // public System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x272B034
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public UnityEngine.Vector3 ClosestPoint(UnityEngine.Vector3 position)
    // Offset: 0x272B1C0
    ::UnityEngine::Vector3 ClosestPoint(::UnityEngine::Vector3 position);
    // public System.Void .ctor()
    // Offset: 0x272B444
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SizeChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SizeChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SizeChanger*, creationType>()));
    }
  }; // SizeChanger
  #pragma pack(pop)
  static check_size<sizeof(SizeChanger), 144 + sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::VRRig*>*)> __GlobalNamespace_SizeChangerSizeCheck;
  static_assert(sizeof(SizeChanger) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeChanger::ChangerType, "", "SizeChanger/ChangerType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_SizeLayerMask
// Il2CppName: get_SizeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_SizeLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_SizeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_MyType
// Il2CppName: get_MyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SizeChanger::ChangerType (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_MyType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_MyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_MaxScale
// Il2CppName: get_MaxScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_MaxScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_MaxScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_MinScale
// Il2CppName: get_MinScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_MinScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_MinScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_StartPos
// Il2CppName: get_StartPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_StartPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_StartPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_EndPos
// Il2CppName: get_EndPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_EndPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_EndPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::get_StaticEasing
// Il2CppName: get_StaticEasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::get_StaticEasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "get_StaticEasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)()>(&GlobalNamespace::SizeChanger::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::AddEnterTrigger
// Il2CppName: AddEnterTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::GlobalNamespace::SizeChangerTrigger*)>(&GlobalNamespace::SizeChanger::AddEnterTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("", "SizeChangerTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "AddEnterTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::RemoveEnterTrigger
// Il2CppName: RemoveEnterTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::GlobalNamespace::SizeChangerTrigger*)>(&GlobalNamespace::SizeChanger::RemoveEnterTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("", "SizeChangerTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "RemoveEnterTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::AddExitOnEnterTrigger
// Il2CppName: AddExitOnEnterTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::GlobalNamespace::SizeChangerTrigger*)>(&GlobalNamespace::SizeChanger::AddExitOnEnterTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("", "SizeChangerTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "AddExitOnEnterTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::RemoveExitOnEnterTrigger
// Il2CppName: RemoveExitOnEnterTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::GlobalNamespace::SizeChangerTrigger*)>(&GlobalNamespace::SizeChanger::RemoveExitOnEnterTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("", "SizeChangerTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "RemoveExitOnEnterTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SizeChanger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::acceptRig
// Il2CppName: acceptRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::SizeChanger::acceptRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "acceptRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SizeChanger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::SizeChanger::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::ClosestPoint
// Il2CppName: ClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SizeChanger::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SizeChanger::ClosestPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeChanger*), "ClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
