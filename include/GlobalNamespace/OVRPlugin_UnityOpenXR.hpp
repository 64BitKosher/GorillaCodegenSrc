// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin::UnityOpenXR);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::UnityOpenXR*, "", "OVRPlugin/UnityOpenXR");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/UnityOpenXR
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPlugin::UnityOpenXR : public ::Il2CppObject {
    public:
    // Get static field: static public System.Boolean Enabled
    static bool _get_Enabled();
    // Set static field: static public System.Boolean Enabled
    static void _set_Enabled(bool value);
    // static public System.Void SetClientVersion()
    // Offset: 0x4909A94
    static void SetClientVersion();
    // static public System.IntPtr HookGetInstanceProcAddr(System.IntPtr func)
    // Offset: 0x4909C18
    static ::System::IntPtr HookGetInstanceProcAddr(::System::IntPtr func);
    // static public System.Boolean OnInstanceCreate(System.UInt64 xrInstance)
    // Offset: 0x4909D58
    static bool OnInstanceCreate(uint64_t xrInstance);
    // static public System.Void OnInstanceDestroy(System.UInt64 xrInstance)
    // Offset: 0x4909E9C
    static void OnInstanceDestroy(uint64_t xrInstance);
    // static public System.Void OnSessionCreate(System.UInt64 xrSession)
    // Offset: 0x4909FD8
    static void OnSessionCreate(uint64_t xrSession);
    // static public System.Void OnAppSpaceChange(System.UInt64 xrSpace)
    // Offset: 0x490A114
    static void OnAppSpaceChange(uint64_t xrSpace);
    // static public System.Void OnSessionStateChange(System.Int32 oldState, System.Int32 newState)
    // Offset: 0x490A250
    static void OnSessionStateChange(int oldState, int newState);
    // static public System.Void OnSessionBegin(System.UInt64 xrSession)
    // Offset: 0x490A3A8
    static void OnSessionBegin(uint64_t xrSession);
    // static public System.Void OnSessionEnd(System.UInt64 xrSession)
    // Offset: 0x490A4E4
    static void OnSessionEnd(uint64_t xrSession);
    // static public System.Void OnSessionExiting(System.UInt64 xrSession)
    // Offset: 0x490A620
    static void OnSessionExiting(uint64_t xrSession);
    // static public System.Void OnSessionDestroy(System.UInt64 xrSession)
    // Offset: 0x490A75C
    static void OnSessionDestroy(uint64_t xrSession);
    // public System.Void .ctor()
    // Offset: 0x490A898
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPlugin::UnityOpenXR* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPlugin::UnityOpenXR::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPlugin::UnityOpenXR*, creationType>()));
    }
  }; // OVRPlugin/UnityOpenXR
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::SetClientVersion
// Il2CppName: SetClientVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::UnityOpenXR::SetClientVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "SetClientVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::HookGetInstanceProcAddr
// Il2CppName: HookGetInstanceProcAddr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::HookGetInstanceProcAddr)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "HookGetInstanceProcAddr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnInstanceCreate
// Il2CppName: OnInstanceCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnInstanceCreate)> {
  static const MethodInfo* get() {
    static auto* xrInstance = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnInstanceCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrInstance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnInstanceDestroy
// Il2CppName: OnInstanceDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnInstanceDestroy)> {
  static const MethodInfo* get() {
    static auto* xrInstance = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnInstanceDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrInstance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionCreate
// Il2CppName: OnSessionCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionCreate)> {
  static const MethodInfo* get() {
    static auto* xrSession = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSession});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnAppSpaceChange
// Il2CppName: OnAppSpaceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnAppSpaceChange)> {
  static const MethodInfo* get() {
    static auto* xrSpace = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnAppSpaceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSpace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionStateChange
// Il2CppName: OnSessionStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionStateChange)> {
  static const MethodInfo* get() {
    static auto* oldState = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState, newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionBegin
// Il2CppName: OnSessionBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionBegin)> {
  static const MethodInfo* get() {
    static auto* xrSession = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSession});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionEnd
// Il2CppName: OnSessionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionEnd)> {
  static const MethodInfo* get() {
    static auto* xrSession = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSession});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionExiting
// Il2CppName: OnSessionExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionExiting)> {
  static const MethodInfo* get() {
    static auto* xrSession = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSession});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionDestroy
// Il2CppName: OnSessionDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::UnityOpenXR::OnSessionDestroy)> {
  static const MethodInfo* get() {
    static auto* xrSession = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::UnityOpenXR*), "OnSessionDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrSession});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UnityOpenXR::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
