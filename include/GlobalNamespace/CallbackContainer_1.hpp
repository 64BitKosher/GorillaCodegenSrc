// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ICallBack
  class ICallBack;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CallbackContainer`1<T>
  template<typename T>
  class CallbackContainer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::CallbackContainer_1, "", "CallbackContainer`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: CallbackContainer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class CallbackContainer_1 : public ::Il2CppObject {
    public:
    public:
    // protected System.Collections.Generic.List`1<T> callbackList
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* callbackList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // protected System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x0
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 callbackCount
    // Size: 0x4
    // Offset: 0x0
    int callbackCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: protected System.Collections.Generic.List`1<T> callbackList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_callbackList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::dyn_callbackList");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbackList"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::dyn_currentIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 callbackCount
    [[deprecated("Use field access instead!")]] int& dyn_callbackCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::dyn_callbackCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbackCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void Add(T inCallback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T inCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::Add");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallbackContainer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inCallback);
    }
    // public System.Void Remove(T inCallback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(T inCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::Remove");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallbackContainer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inCallback);
    }
    // public System.Void TryRunCallbacks()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TryRunCallbacks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::TryRunCallbacks");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallbackContainer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::Clear");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallbackContainer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallbackContainer_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbackContainer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallbackContainer_1<T>*, creationType>()));
    }
  }; // CallbackContainer`1
  // Could not write size check! Type: CallbackContainer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
