// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Oscillator
  class Oscillator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Oscillator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Oscillator*, "", "Oscillator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Oscillator
  // [TokenAttribute] Offset: FFFFFFFF
  class Oscillator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Oscillator::WaveTypeEnum
    struct WaveTypeEnum;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oscillator/WaveTypeEnum
    // [TokenAttribute] Offset: FFFFFFFF
    struct WaveTypeEnum/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WaveTypeEnum
      constexpr WaveTypeEnum(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oscillator/WaveTypeEnum Sine
      static constexpr const int Sine = 0;
      // Get static field: static public Oscillator/WaveTypeEnum Sine
      static ::GlobalNamespace::Oscillator::WaveTypeEnum _get_Sine();
      // Set static field: static public Oscillator/WaveTypeEnum Sine
      static void _set_Sine(::GlobalNamespace::Oscillator::WaveTypeEnum value);
      // static field const value: static public Oscillator/WaveTypeEnum Square
      static constexpr const int Square = 1;
      // Get static field: static public Oscillator/WaveTypeEnum Square
      static ::GlobalNamespace::Oscillator::WaveTypeEnum _get_Square();
      // Set static field: static public Oscillator/WaveTypeEnum Square
      static void _set_Square(::GlobalNamespace::Oscillator::WaveTypeEnum value);
      // static field const value: static public Oscillator/WaveTypeEnum Triangle
      static constexpr const int Triangle = 2;
      // Get static field: static public Oscillator/WaveTypeEnum Triangle
      static ::GlobalNamespace::Oscillator::WaveTypeEnum _get_Triangle();
      // Set static field: static public Oscillator/WaveTypeEnum Triangle
      static void _set_Triangle(::GlobalNamespace::Oscillator::WaveTypeEnum value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oscillator/WaveTypeEnum
    #pragma pack(pop)
    static check_size<sizeof(Oscillator::WaveTypeEnum), 0 + sizeof(int)> __GlobalNamespace_Oscillator_WaveTypeEnumSizeCheck;
    static_assert(sizeof(Oscillator::WaveTypeEnum) == 0x4);
    public:
    // public Oscillator/WaveTypeEnum WaveType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::Oscillator::WaveTypeEnum WaveType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Oscillator::WaveTypeEnum) == 0x4);
    // private UnityEngine.Vector3 m_initCenter
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 m_initCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean UseCenter
    // Size: 0x1
    // Offset: 0x30
    bool UseCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseCenter and: Center
    char __padding2[0x3] = {};
    // public UnityEngine.Vector3 Center
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Radius
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 Radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Frequency
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 Frequency;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Phase
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 Phase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public Oscillator/WaveTypeEnum WaveType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Oscillator::WaveTypeEnum& dyn_WaveType();
    // Get instance field reference: private UnityEngine.Vector3 m_initCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_initCenter();
    // Get instance field reference: public System.Boolean UseCenter
    [[deprecated("Use field access instead!")]] bool& dyn_UseCenter();
    // Get instance field reference: public UnityEngine.Vector3 Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Center();
    // Get instance field reference: public UnityEngine.Vector3 Radius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Radius();
    // Get instance field reference: public UnityEngine.Vector3 Frequency
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Frequency();
    // Get instance field reference: public UnityEngine.Vector3 Phase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Phase();
    // public System.Void Init(UnityEngine.Vector3 center, UnityEngine.Vector3 radius, UnityEngine.Vector3 frequency, UnityEngine.Vector3 startPhase)
    // Offset: 0x26859B4
    void Init(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 radius, ::UnityEngine::Vector3 frequency, ::UnityEngine::Vector3 startPhase);
    // private System.Single SampleWave(System.Single phase)
    // Offset: 0x26859E4
    float SampleWave(float phase);
    // public System.Void OnEnable()
    // Offset: 0x2685AE4
    void OnEnable();
    // public System.Void Update()
    // Offset: 0x2685B14
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2685C54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Oscillator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Oscillator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Oscillator*, creationType>()));
    }
  }; // Oscillator
  #pragma pack(pop)
  static check_size<sizeof(Oscillator), 88 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_OscillatorSizeCheck;
  static_assert(sizeof(Oscillator) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Oscillator::WaveTypeEnum, "", "Oscillator/WaveTypeEnum");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Oscillator::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Oscillator::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::Oscillator::Init)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startPhase = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Oscillator*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, frequency, startPhase});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Oscillator::SampleWave
// Il2CppName: SampleWave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::Oscillator::*)(float)>(&GlobalNamespace::Oscillator::SampleWave)> {
  static const MethodInfo* get() {
    static auto* phase = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Oscillator*), "SampleWave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{phase});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Oscillator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Oscillator::*)()>(&GlobalNamespace::Oscillator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Oscillator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Oscillator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Oscillator::*)()>(&GlobalNamespace::Oscillator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Oscillator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Oscillator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
