// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BuilderShelf
#include "GlobalNamespace/BuilderShelf.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderShelf::BuildPieceSpawn);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderShelf::BuildPieceSpawn*, "", "BuilderShelf/BuildPieceSpawn");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: BuilderShelf/BuildPieceSpawn
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderShelf::BuildPieceSpawn : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject buildPiecePrefab
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* buildPiecePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String materialID
    // Size: 0x8
    // Offset: 0x18
    ::StringW materialID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 localAxis
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 localAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 positionOffset
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rotationOffset
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Mesh previewMesh
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Mesh* previewMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject buildPiecePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_buildPiecePrefab();
    // Get instance field reference: public System.String materialID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_materialID();
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public UnityEngine.Vector3 localAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localAxis();
    // Get instance field reference: public UnityEngine.Vector3 positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_positionOffset();
    // Get instance field reference: public UnityEngine.Vector3 rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotationOffset();
    // Get instance field reference: public UnityEngine.Mesh previewMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_previewMesh();
    // public System.Void .ctor()
    // Offset: 0x26EEC00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderShelf::BuildPieceSpawn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderShelf::BuildPieceSpawn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderShelf::BuildPieceSpawn*, creationType>()));
    }
  }; // BuilderShelf/BuildPieceSpawn
  #pragma pack(pop)
  static check_size<sizeof(BuilderShelf::BuildPieceSpawn), 72 + sizeof(::UnityEngine::Mesh*)> __GlobalNamespace_BuilderShelf_BuildPieceSpawnSizeCheck;
  static_assert(sizeof(BuilderShelf::BuildPieceSpawn) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderShelf::BuildPieceSpawn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
