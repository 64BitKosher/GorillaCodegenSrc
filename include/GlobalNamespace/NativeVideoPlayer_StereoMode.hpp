// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NativeVideoPlayer
#include "GlobalNamespace/NativeVideoPlayer.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NativeVideoPlayer::StereoMode, "", "NativeVideoPlayer/StereoMode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: NativeVideoPlayer/StereoMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct NativeVideoPlayer::StereoMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StereoMode
    constexpr StereoMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public NativeVideoPlayer/StereoMode Unknown
    static constexpr const int Unknown = -1;
    // Get static field: static public NativeVideoPlayer/StereoMode Unknown
    static ::GlobalNamespace::NativeVideoPlayer::StereoMode _get_Unknown();
    // Set static field: static public NativeVideoPlayer/StereoMode Unknown
    static void _set_Unknown(::GlobalNamespace::NativeVideoPlayer::StereoMode value);
    // static field const value: static public NativeVideoPlayer/StereoMode Mono
    static constexpr const int Mono = 0;
    // Get static field: static public NativeVideoPlayer/StereoMode Mono
    static ::GlobalNamespace::NativeVideoPlayer::StereoMode _get_Mono();
    // Set static field: static public NativeVideoPlayer/StereoMode Mono
    static void _set_Mono(::GlobalNamespace::NativeVideoPlayer::StereoMode value);
    // static field const value: static public NativeVideoPlayer/StereoMode TopBottom
    static constexpr const int TopBottom = 1;
    // Get static field: static public NativeVideoPlayer/StereoMode TopBottom
    static ::GlobalNamespace::NativeVideoPlayer::StereoMode _get_TopBottom();
    // Set static field: static public NativeVideoPlayer/StereoMode TopBottom
    static void _set_TopBottom(::GlobalNamespace::NativeVideoPlayer::StereoMode value);
    // static field const value: static public NativeVideoPlayer/StereoMode LeftRight
    static constexpr const int LeftRight = 2;
    // Get static field: static public NativeVideoPlayer/StereoMode LeftRight
    static ::GlobalNamespace::NativeVideoPlayer::StereoMode _get_LeftRight();
    // Set static field: static public NativeVideoPlayer/StereoMode LeftRight
    static void _set_LeftRight(::GlobalNamespace::NativeVideoPlayer::StereoMode value);
    // static field const value: static public NativeVideoPlayer/StereoMode Mesh
    static constexpr const int Mesh = 3;
    // Get static field: static public NativeVideoPlayer/StereoMode Mesh
    static ::GlobalNamespace::NativeVideoPlayer::StereoMode _get_Mesh();
    // Set static field: static public NativeVideoPlayer/StereoMode Mesh
    static void _set_Mesh(::GlobalNamespace::NativeVideoPlayer::StereoMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // NativeVideoPlayer/StereoMode
  #pragma pack(pop)
  static check_size<sizeof(NativeVideoPlayer::StereoMode), 0 + sizeof(int)> __GlobalNamespace_NativeVideoPlayer_StereoModeSizeCheck;
  static_assert(sizeof(NativeVideoPlayer::StereoMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
