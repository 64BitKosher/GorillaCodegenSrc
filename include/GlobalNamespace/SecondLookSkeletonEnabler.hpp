// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Tappable
#include "GlobalNamespace/Tappable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SecondLookSkeleton
  class SecondLookSkeleton;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SecondLookSkeletonEnabler
  class SecondLookSkeletonEnabler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SecondLookSkeletonEnabler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SecondLookSkeletonEnabler*, "", "SecondLookSkeletonEnabler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: SecondLookSkeletonEnabler
  // [TokenAttribute] Offset: FFFFFFFF
  class SecondLookSkeletonEnabler : public ::GlobalNamespace::Tappable {
    public:
    public:
    // public System.Boolean isTapped
    // Size: 0x1
    // Offset: 0x44
    bool isTapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isTapped and: playOnDisappear
    char __padding0[0x3] = {};
    // public UnityEngine.AudioSource playOnDisappear
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioSource* playOnDisappear;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.ParticleSystem particles
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem* particles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.GameObject spookyText
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* spookyText;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private SecondLookSkeleton skele
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::SecondLookSkeleton* skele;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SecondLookSkeleton*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean isTapped
    [[deprecated("Use field access instead!")]] bool& dyn_isTapped();
    // Get instance field reference: public UnityEngine.AudioSource playOnDisappear
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_playOnDisappear();
    // Get instance field reference: public UnityEngine.ParticleSystem particles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particles();
    // Get instance field reference: public UnityEngine.GameObject spookyText
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spookyText();
    // Get instance field reference: private SecondLookSkeleton skele
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton*& dyn_skele();
    // private System.Void Awake()
    // Offset: 0x269AA68
    void Awake();
    // public override System.Void OnTapLocal(System.Single tapStrength, System.Single tapTime, Photon.Pun.PhotonMessageInfo sender)
    // Offset: 0x269AAFC
    // Implemented from: Tappable
    // Base method: System.Void Tappable::OnTapLocal(System.Single tapStrength, System.Single tapTime, Photon.Pun.PhotonMessageInfo sender)
    void OnTapLocal(float tapStrength, float tapTime, ::Photon::Pun::PhotonMessageInfo sender);
    // public System.Void .ctor()
    // Offset: 0x269AC08
    // Implemented from: Tappable
    // Base method: System.Void Tappable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecondLookSkeletonEnabler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecondLookSkeletonEnabler*, creationType>()));
    }
  }; // SecondLookSkeletonEnabler
  #pragma pack(pop)
  static check_size<sizeof(SecondLookSkeletonEnabler), 96 + sizeof(::GlobalNamespace::SecondLookSkeleton*)> __GlobalNamespace_SecondLookSkeletonEnablerSizeCheck;
  static_assert(sizeof(SecondLookSkeletonEnabler) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonEnabler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonEnabler::*)()>(&GlobalNamespace::SecondLookSkeletonEnabler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonEnabler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonEnabler::OnTapLocal
// Il2CppName: OnTapLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonEnabler::*)(float, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SecondLookSkeletonEnabler::OnTapLocal)> {
  static const MethodInfo* get() {
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tapTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonEnabler*), "OnTapLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tapStrength, tapTime, sender});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonEnabler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
