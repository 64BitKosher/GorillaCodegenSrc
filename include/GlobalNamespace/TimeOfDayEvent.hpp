// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BetterDayNightManager
  class BetterDayNightManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TimeOfDayEvent
  class TimeOfDayEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TimeOfDayEvent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TimeOfDayEvent*, "", "TimeOfDayEvent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: TimeOfDayEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class TimeOfDayEvent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _timeStart
    // Size: 0x4
    // Offset: 0x20
    float timeStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _timeEnd
    // Size: 0x4
    // Offset: 0x24
    float timeEnd;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentTime
    // Size: 0x4
    // Offset: 0x28
    float currentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _ongoing
    // Size: 0x1
    // Offset: 0x2C
    bool ongoing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ongoing and: onEventStart
    char __padding3[0x3] = {};
    // public UnityEngine.Events.UnityEvent onEventStart
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onEventStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onEventStop
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* onEventStop;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Double _currentSeconds
    // Size: 0x8
    // Offset: 0x40
    double currentSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _totalSecondsInRange
    // Size: 0x8
    // Offset: 0x48
    double totalSecondsInRange;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single _elapsed
    // Size: 0x4
    // Offset: 0x50
    float elapsed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: elapsed and: dayNightManager
    char __padding8[0x4] = {};
    // private BetterDayNightManager _dayNightManager
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::BetterDayNightManager* dayNightManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BetterDayNightManager*) == 0x8);
    public:
    // Get instance field reference: private System.Single _timeStart
    [[deprecated("Use field access instead!")]] float& dyn__timeStart();
    // Get instance field reference: private System.Single _timeEnd
    [[deprecated("Use field access instead!")]] float& dyn__timeEnd();
    // Get instance field reference: private System.Single _currentTime
    [[deprecated("Use field access instead!")]] float& dyn__currentTime();
    // Get instance field reference: private System.Boolean _ongoing
    [[deprecated("Use field access instead!")]] bool& dyn__ongoing();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onEventStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onEventStart();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onEventStop
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onEventStop();
    // Get instance field reference: private System.Double _currentSeconds
    [[deprecated("Use field access instead!")]] double& dyn__currentSeconds();
    // Get instance field reference: private System.Double _totalSecondsInRange
    [[deprecated("Use field access instead!")]] double& dyn__totalSecondsInRange();
    // Get instance field reference: private System.Single _elapsed
    [[deprecated("Use field access instead!")]] float& dyn__elapsed();
    // Get instance field reference: private BetterDayNightManager _dayNightManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BetterDayNightManager*& dyn__dayNightManager();
    // public System.Single get_currentTime()
    // Offset: 0x279FA48
    float get_currentTime();
    // public System.Single get_timeStart()
    // Offset: 0x279FA50
    float get_timeStart();
    // public System.Void set_timeStart(System.Single value)
    // Offset: 0x279FA58
    void set_timeStart(float value);
    // public System.Single get_timeEnd()
    // Offset: 0x279FA74
    float get_timeEnd();
    // public System.Void set_timeEnd(System.Single value)
    // Offset: 0x279FA7C
    void set_timeEnd(float value);
    // public System.Boolean get_isOngoing()
    // Offset: 0x279FA98
    bool get_isOngoing();
    // private System.Void Start()
    // Offset: 0x279FAA0
    void Start();
    // private System.Void Update()
    // Offset: 0x279FC08
    void Update();
    // private System.Void UpdateTime()
    // Offset: 0x279FC54
    void UpdateTime();
    // private System.Void StartEvent()
    // Offset: 0x279FDC0
    void StartEvent();
    // private System.Void StopEvent()
    // Offset: 0x279FDE0
    void StopEvent();
    // public System.Void .ctor()
    // Offset: 0x279FDFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeOfDayEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeOfDayEvent*, creationType>()));
    }
  }; // TimeOfDayEvent
  #pragma pack(pop)
  static check_size<sizeof(TimeOfDayEvent), 88 + sizeof(::GlobalNamespace::BetterDayNightManager*)> __GlobalNamespace_TimeOfDayEventSizeCheck;
  static_assert(sizeof(TimeOfDayEvent) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::get_currentTime
// Il2CppName: get_currentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::get_currentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "get_currentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::get_timeStart
// Il2CppName: get_timeStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::get_timeStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "get_timeStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::set_timeStart
// Il2CppName: set_timeStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)(float)>(&GlobalNamespace::TimeOfDayEvent::set_timeStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "set_timeStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::get_timeEnd
// Il2CppName: get_timeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::get_timeEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "get_timeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::set_timeEnd
// Il2CppName: set_timeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)(float)>(&GlobalNamespace::TimeOfDayEvent::set_timeEnd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "set_timeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::get_isOngoing
// Il2CppName: get_isOngoing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::get_isOngoing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "get_isOngoing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::UpdateTime
// Il2CppName: UpdateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::UpdateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "UpdateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::StartEvent
// Il2CppName: StartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::StartEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "StartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::StopEvent
// Il2CppName: StopEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TimeOfDayEvent::*)()>(&GlobalNamespace::TimeOfDayEvent::StopEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TimeOfDayEvent*), "StopEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TimeOfDayEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
