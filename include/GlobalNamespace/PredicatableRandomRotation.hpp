// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PredicatableRandomRotation
  class PredicatableRandomRotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PredicatableRandomRotation);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PredicatableRandomRotation*, "", "PredicatableRandomRotation");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: PredicatableRandomRotation
  // [TokenAttribute] Offset: FFFFFFFF
  class PredicatableRandomRotation : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 rot
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 rot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: rot and: source
    char __padding0[0x4] = {};
    // private UnityEngine.Transform source
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 rot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rot();
    // Get instance field reference: private UnityEngine.Transform source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_source();
    // private System.Void Start()
    // Offset: 0x277A04C
    void Start();
    // private System.Void Update()
    // Offset: 0x277A0E8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x277A1D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PredicatableRandomRotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PredicatableRandomRotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PredicatableRandomRotation*, creationType>()));
    }
  }; // PredicatableRandomRotation
  #pragma pack(pop)
  static check_size<sizeof(PredicatableRandomRotation), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_PredicatableRandomRotationSizeCheck;
  static_assert(sizeof(PredicatableRandomRotation) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PredicatableRandomRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PredicatableRandomRotation::*)()>(&GlobalNamespace::PredicatableRandomRotation::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PredicatableRandomRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PredicatableRandomRotation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PredicatableRandomRotation::*)()>(&GlobalNamespace::PredicatableRandomRotation::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PredicatableRandomRotation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PredicatableRandomRotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
