// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IDebugObject
#include "GlobalNamespace/IDebugObject.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DevConsoleInstance
  class DevConsoleInstance;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevConsole
  class DevConsole;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevConsole);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevConsole*, "", "DevConsole");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: DevConsole
  // [TokenAttribute] Offset: FFFFFFFF
  class DevConsole : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IDebugObject*/ {
    public:
    // Nested type: ::GlobalNamespace::DevConsole::LogEntry
    class LogEntry;
    // Nested type: ::GlobalNamespace::DevConsole::DisplayedLogLine
    class DisplayedLogLine;
    // Nested type: ::GlobalNamespace::DevConsole::MessagePayload
    class MessagePayload;
    public:
    // private UnityEngine.AudioClip errorSound
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioClip* errorSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single maxHeight
    // Size: 0x4
    // Offset: 0x30
    float maxHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxHeight and: logEntries
    char __padding2[0x4] = {};
    // private readonly System.Collections.Generic.List`1<DevConsole/LogEntry> _logEntries
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>* logEntries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>*) == 0x8);
    // public System.Int32 targetLogIndex
    // Size: 0x4
    // Offset: 0x40
    int targetLogIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentLogIndex
    // Size: 0x4
    // Offset: 0x44
    int currentLogIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isMuted
    // Size: 0x1
    // Offset: 0x48
    bool isMuted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMuted and: currentZoomLevel
    char __padding6[0x3] = {};
    // public System.Single currentZoomLevel
    // Size: 0x4
    // Offset: 0x4C
    float currentZoomLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> disableWhileActive
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* disableWhileActive;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> enableWhileActive
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* enableWhileActive;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Int32 expandAmount
    // Size: 0x4
    // Offset: 0x60
    int expandAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 expandedMessageIndex
    // Size: 0x4
    // Offset: 0x64
    int expandedMessageIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean canExpand
    // Size: 0x1
    // Offset: 0x68
    bool canExpand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canExpand and: logLines
    char __padding12[0x7] = {};
    // public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>* logLines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*) == 0x8);
    // public System.Single lineStartHeight
    // Size: 0x4
    // Offset: 0x78
    float lineStartHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single textStartHeight
    // Size: 0x4
    // Offset: 0x7C
    float textStartHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineStartTextWidth
    // Size: 0x4
    // Offset: 0x80
    float lineStartTextWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lineStartTextWidth and: textScale
    char __padding16[0x4] = {};
    // public System.Double textScale
    // Size: 0x8
    // Offset: 0x88
    double textScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Collections.Generic.List`1<DevConsoleInstance> instances
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>* instances;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IDebugObject
    operator ::GlobalNamespace::IDebugObject() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IDebugObject*>(this);
    }
    // Get static field: static private DevConsole _instance
    static ::GlobalNamespace::DevConsole* _get__instance();
    // Set static field: static private DevConsole _instance
    static void _set__instance(::GlobalNamespace::DevConsole* value);
    // Get static field: static public readonly System.String[] tracebackScrubbing
    static ::ArrayW<::StringW> _get_tracebackScrubbing();
    // Set static field: static public readonly System.String[] tracebackScrubbing
    static void _set_tracebackScrubbing(::ArrayW<::StringW> value);
    // static field const value: static private System.Int32 kLogEntriesCapacityIncrementAmount
    static constexpr const int kLogEntriesCapacityIncrementAmount = 1024;
    // Get static field: static private System.Int32 kLogEntriesCapacityIncrementAmount
    static int _get_kLogEntriesCapacityIncrementAmount();
    // Set static field: static private System.Int32 kLogEntriesCapacityIncrementAmount
    static void _set_kLogEntriesCapacityIncrementAmount(int value);
    // Get instance field reference: private UnityEngine.AudioClip errorSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_errorSound();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single maxHeight
    [[deprecated("Use field access instead!")]] float& dyn_maxHeight();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<DevConsole/LogEntry> _logEntries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>*& dyn__logEntries();
    // Get instance field reference: public System.Int32 targetLogIndex
    [[deprecated("Use field access instead!")]] int& dyn_targetLogIndex();
    // Get instance field reference: public System.Int32 currentLogIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentLogIndex();
    // Get instance field reference: public System.Boolean isMuted
    [[deprecated("Use field access instead!")]] bool& dyn_isMuted();
    // Get instance field reference: public System.Single currentZoomLevel
    [[deprecated("Use field access instead!")]] float& dyn_currentZoomLevel();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> disableWhileActive
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_disableWhileActive();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> enableWhileActive
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_enableWhileActive();
    // Get instance field reference: public System.Int32 expandAmount
    [[deprecated("Use field access instead!")]] int& dyn_expandAmount();
    // Get instance field reference: public System.Int32 expandedMessageIndex
    [[deprecated("Use field access instead!")]] int& dyn_expandedMessageIndex();
    // Get instance field reference: public System.Boolean canExpand
    [[deprecated("Use field access instead!")]] bool& dyn_canExpand();
    // Get instance field reference: public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*& dyn_logLines();
    // Get instance field reference: public System.Single lineStartHeight
    [[deprecated("Use field access instead!")]] float& dyn_lineStartHeight();
    // Get instance field reference: public System.Single textStartHeight
    [[deprecated("Use field access instead!")]] float& dyn_textStartHeight();
    // Get instance field reference: public System.Single lineStartTextWidth
    [[deprecated("Use field access instead!")]] float& dyn_lineStartTextWidth();
    // Get instance field reference: public System.Double textScale
    [[deprecated("Use field access instead!")]] double& dyn_textScale();
    // Get instance field reference: public System.Collections.Generic.List`1<DevConsoleInstance> instances
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>*& dyn_instances();
    // static public DevConsole get_instance()
    // Offset: 0x2799534
    static ::GlobalNamespace::DevConsole* get_instance();
    // static public System.Collections.Generic.List`1<DevConsole/LogEntry> get_logEntries()
    // Offset: 0x2799644
    static ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>* get_logEntries();
    // public System.Void OnDestroyDebugObject()
    // Offset: 0x27996A0
    void OnDestroyDebugObject();
    // private System.Void OnEnable()
    // Offset: 0x2799858
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x279987C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevConsole* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevConsole*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2799988
    static void _cctor();
  }; // DevConsole
  #pragma pack(pop)
  static check_size<sizeof(DevConsole), 144 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>*)> __GlobalNamespace_DevConsoleSizeCheck;
  static_assert(sizeof(DevConsole) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DevConsole* (*)()>(&GlobalNamespace::DevConsole::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::get_logEntries
// Il2CppName: get_logEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>* (*)()>(&GlobalNamespace::DevConsole::get_logEntries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole*), "get_logEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::OnDestroyDebugObject
// Il2CppName: OnDestroyDebugObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DevConsole::*)()>(&GlobalNamespace::DevConsole::OnDestroyDebugObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole*), "OnDestroyDebugObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DevConsole::*)()>(&GlobalNamespace::DevConsole::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DevConsole::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::DevConsole::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsole*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
