// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: NetworkSystemConfig
#include "GlobalNamespace/NetworkSystemConfig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkSystem
  class NetworkSystem;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: SO_NetworkVoiceSettings
  class SO_NetworkVoiceSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkWrapper
  class NetworkWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkWrapper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkWrapper*, "", "NetworkWrapper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: NetworkWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkWrapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public NetworkSystem activeNetworkSystem
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NetworkSystem* activeNetworkSystem;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkSystem*) == 0x8);
    // public UnityEngine.UI.Text titleRef
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* titleRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public NetworkSystemConfig netSysConfig
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::NetworkSystemConfig netSysConfig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkSystemConfig) == 0x4);
    // Padding between fields: netSysConfig and: networkRegionNames
    char __padding2[0x4] = {};
    // public System.String[] networkRegionNames
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::StringW> networkRegionNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] devNetworkRegionNames
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::StringW> devNetworkRegionNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.UI.Text stateTextRef
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Text* stateTextRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text playerCountTextRef
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* playerCountTextRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private GorillaNetworking.SO_NetworkVoiceSettings VoiceSettings
    // Size: 0x8
    // Offset: 0x58
    ::GorillaNetworking::SO_NetworkVoiceSettings* VoiceSettings;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::SO_NetworkVoiceSettings*) == 0x8);
    public:
    // static field const value: static private System.String WrapperResourcePath
    static constexpr const char* WrapperResourcePath = "P_NetworkWrapper";
    // Get static field: static private System.String WrapperResourcePath
    static ::StringW _get_WrapperResourcePath();
    // Set static field: static private System.String WrapperResourcePath
    static void _set_WrapperResourcePath(::StringW value);
    // Get instance field reference: public NetworkSystem activeNetworkSystem
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkSystem*& dyn_activeNetworkSystem();
    // Get instance field reference: public UnityEngine.UI.Text titleRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_titleRef();
    // Get instance field reference: public NetworkSystemConfig netSysConfig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkSystemConfig& dyn_netSysConfig();
    // Get instance field reference: public System.String[] networkRegionNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_networkRegionNames();
    // Get instance field reference: public System.String[] devNetworkRegionNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_devNetworkRegionNames();
    // Get instance field reference: public UnityEngine.UI.Text stateTextRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_stateTextRef();
    // Get instance field reference: public UnityEngine.UI.Text playerCountTextRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerCountTextRef();
    // Get instance field reference: private GorillaNetworking.SO_NetworkVoiceSettings VoiceSettings
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::SO_NetworkVoiceSettings*& dyn_VoiceSettings();
    // static public System.Void AutoInstantiate()
    // Offset: 0x2912014
    static void AutoInstantiate();
    // private System.Void Awake()
    // Offset: 0x29120C8
    void Awake();
    // private System.Void UpdatePlayerCountWrapper(System.Int32 playerID)
    // Offset: 0x291230C
    void UpdatePlayerCountWrapper(int playerID);
    // private System.Void UpdatePlayerCount()
    // Offset: 0x2912310
    void UpdatePlayerCount();
    // public System.Void .ctor()
    // Offset: 0x2912534
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkWrapper*, creationType>()));
    }
  }; // NetworkWrapper
  #pragma pack(pop)
  static check_size<sizeof(NetworkWrapper), 88 + sizeof(::GorillaNetworking::SO_NetworkVoiceSettings*)> __GlobalNamespace_NetworkWrapperSizeCheck;
  static_assert(sizeof(NetworkWrapper) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkWrapper::AutoInstantiate
// Il2CppName: AutoInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::NetworkWrapper::AutoInstantiate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkWrapper*), "AutoInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkWrapper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkWrapper::*)()>(&GlobalNamespace::NetworkWrapper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkWrapper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkWrapper::UpdatePlayerCountWrapper
// Il2CppName: UpdatePlayerCountWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkWrapper::*)(int)>(&GlobalNamespace::NetworkWrapper::UpdatePlayerCountWrapper)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkWrapper*), "UpdatePlayerCountWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkWrapper::UpdatePlayerCount
// Il2CppName: UpdatePlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkWrapper::*)()>(&GlobalNamespace::NetworkWrapper::UpdatePlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkWrapper*), "UpdatePlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
