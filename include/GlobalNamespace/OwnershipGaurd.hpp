// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OwnershipGaurd
  class OwnershipGaurd;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OwnershipGaurd);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OwnershipGaurd*, "", "OwnershipGaurd");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: OwnershipGaurd
  // [TokenAttribute] Offset: FFFFFFFF
  class OwnershipGaurd : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Photon.Pun.PhotonView[] photonViews
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Photon::Pun::PhotonView*> photonViews;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Pun::PhotonView*>) == 0x8);
    // private System.Boolean autoRegisterAll
    // Size: 0x1
    // Offset: 0x28
    bool autoRegisterAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Pun.PhotonView[] photonViews
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Pun::PhotonView*>& dyn_photonViews();
    // Get instance field reference: private System.Boolean autoRegisterAll
    [[deprecated("Use field access instead!")]] bool& dyn_autoRegisterAll();
    // private System.Void Start()
    // Offset: 0x275B7D8
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x275B878
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x275B8E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OwnershipGaurd* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurd::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OwnershipGaurd*, creationType>()));
    }
  }; // OwnershipGaurd
  #pragma pack(pop)
  static check_size<sizeof(OwnershipGaurd), 40 + sizeof(bool)> __GlobalNamespace_OwnershipGaurdSizeCheck;
  static_assert(sizeof(OwnershipGaurd) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OwnershipGaurd::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OwnershipGaurd::*)()>(&GlobalNamespace::OwnershipGaurd::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OwnershipGaurd*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OwnershipGaurd::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OwnershipGaurd::*)()>(&GlobalNamespace::OwnershipGaurd::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OwnershipGaurd*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OwnershipGaurd::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
