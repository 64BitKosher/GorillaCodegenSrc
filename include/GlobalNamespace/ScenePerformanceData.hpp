// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ScenePerformanceData
  class ScenePerformanceData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ScenePerformanceData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScenePerformanceData*, "", "ScenePerformanceData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ScenePerformanceData
  // [TokenAttribute] Offset: FFFFFFFF
  class ScenePerformanceData : public ::Il2CppObject {
    public:
    public:
    // public System.String mapName
    // Size: 0x8
    // Offset: 0x10
    ::StringW mapName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 msHigh
    // Size: 0x4
    // Offset: 0x18
    int msHigh;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 medianMS
    // Size: 0x4
    // Offset: 0x1C
    int medianMS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 averageMS
    // Size: 0x4
    // Offset: 0x20
    int averageMS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 fpsLow
    // Size: 0x4
    // Offset: 0x24
    int fpsLow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 medianFPS
    // Size: 0x4
    // Offset: 0x28
    int medianFPS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 averageFPS
    // Size: 0x4
    // Offset: 0x2C
    int averageFPS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String mapName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mapName();
    // Get instance field reference: public System.Int32 msHigh
    [[deprecated("Use field access instead!")]] int& dyn_msHigh();
    // Get instance field reference: public System.Int32 medianMS
    [[deprecated("Use field access instead!")]] int& dyn_medianMS();
    // Get instance field reference: public System.Int32 averageMS
    [[deprecated("Use field access instead!")]] int& dyn_averageMS();
    // Get instance field reference: public System.Int32 fpsLow
    [[deprecated("Use field access instead!")]] int& dyn_fpsLow();
    // Get instance field reference: public System.Int32 medianFPS
    [[deprecated("Use field access instead!")]] int& dyn_medianFPS();
    // Get instance field reference: public System.Int32 averageFPS
    [[deprecated("Use field access instead!")]] int& dyn_averageFPS();
    // public System.Void .ctor(System.String mapName, System.Int32 msHigh, System.Int32 medianMS, System.Int32 averageMS, System.Int32 fpsLow, System.Int32 medianFPS, System.Int32 averageFPS)
    // Offset: 0x289D5E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScenePerformanceData* New_ctor(::StringW mapName, int msHigh, int medianMS, int averageMS, int fpsLow, int medianFPS, int averageFPS) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScenePerformanceData*, creationType>(mapName, msHigh, medianMS, averageMS, fpsLow, medianFPS, averageFPS)));
    }
  }; // ScenePerformanceData
  #pragma pack(pop)
  static check_size<sizeof(ScenePerformanceData), 44 + sizeof(int)> __GlobalNamespace_ScenePerformanceDataSizeCheck;
  static_assert(sizeof(ScenePerformanceData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScenePerformanceData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
