// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: <>f__AnonymousType0`2<$HandFinger$j__TPar, $FingerFeatures$j__TPar>
  template<typename $HandFinger$j__TPar, typename $FingerFeatures$j__TPar>
  class $$f__AnonymousType0_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::$$f__AnonymousType0_2, "", "<>f__AnonymousType0`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: <>f__AnonymousType0`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename $HandFinger$j__TPar, typename $FingerFeatures$j__TPar>
  class $$f__AnonymousType0_2 : public ::Il2CppObject {
    public:
    public:
    // private readonly <HandFinger>j__TPar <HandFinger>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $HandFinger$j__TPar $HandFinger$i__Field;
    // private readonly <FingerFeatures>j__TPar <FingerFeatures>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $FingerFeatures$j__TPar $FingerFeatures$i__Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly <HandFinger>j__TPar <HandFinger>i__Field
    [[deprecated("Use field access instead!")]] $HandFinger$j__TPar& dyn_$HandFinger$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::dyn_$HandFinger$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HandFinger>i__Field"))->offset;
      return *reinterpret_cast<$HandFinger$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <FingerFeatures>j__TPar <FingerFeatures>i__Field
    [[deprecated("Use field access instead!")]] $FingerFeatures$j__TPar& dyn_$FingerFeatures$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::dyn_$FingerFeatures$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FingerFeatures>i__Field"))->offset;
      return *reinterpret_cast<$FingerFeatures$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public <HandFinger>j__TPar get_HandFinger()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $HandFinger$j__TPar get_HandFinger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::get_HandFinger");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$HandFinger$j__TPar, false>(this, ___internal__method);
    }
    // public <FingerFeatures>j__TPar get_FingerFeatures()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $FingerFeatures$j__TPar get_FingerFeatures() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::get_FingerFeatures");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FingerFeatures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$FingerFeatures$j__TPar, false>(this, ___internal__method);
    }
    // public System.Void .ctor(<HandFinger>j__TPar HandFinger, <FingerFeatures>j__TPar FingerFeatures)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static $$f__AnonymousType0_2<$HandFinger$j__TPar, $FingerFeatures$j__TPar>* New_ctor($HandFinger$j__TPar HandFinger, $FingerFeatures$j__TPar FingerFeatures) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<$$f__AnonymousType0_2<$HandFinger$j__TPar, $FingerFeatures$j__TPar>*, creationType>(HandFinger, FingerFeatures)));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // <>f__AnonymousType0`2
  // Could not write size check! Type: <>f__AnonymousType0`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
