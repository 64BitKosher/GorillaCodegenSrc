// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryWriter
  class BinaryWriter;
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SnapBounds
  struct SnapBounds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SnapBounds, "", "SnapBounds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: SnapBounds
  // [TokenAttribute] Offset: FFFFFFFF
  struct SnapBounds/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector2Int min
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2Int min;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // public UnityEngine.Vector2Int max
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2Int max;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    public:
    // Creating value type constructor for type: SnapBounds
    constexpr SnapBounds(::UnityEngine::Vector2Int min_ = {}, ::UnityEngine::Vector2Int max_ = {}) noexcept : min{min_}, max{max_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2Int min
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_min();
    // Get instance field reference: public UnityEngine.Vector2Int max
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_max();
    // public System.Void .ctor(UnityEngine.Vector2Int min, UnityEngine.Vector2Int max)
    // Offset: 0x26E0E98
    // ABORTED: conflicts with another method.  SnapBounds(::UnityEngine::Vector2Int min, ::UnityEngine::Vector2Int max);
    // public System.Void .ctor(System.Int32 minX, System.Int32 minY, System.Int32 maxX, System.Int32 maxY)
    // Offset: 0x26E0EA0
    SnapBounds(int minX, int minY, int maxX, int maxY);
    // public System.Void Clear()
    // Offset: 0x26E0EB8
    void Clear();
    // public System.Void Write(System.IO.BinaryWriter writer)
    // Offset: 0x26E0EC4
    void Write(::System::IO::BinaryWriter* writer);
    // public System.Void Read(System.IO.BinaryReader reader)
    // Offset: 0x26E0F44
    void Read(::System::IO::BinaryReader* reader);
  }; // SnapBounds
  #pragma pack(pop)
  static check_size<sizeof(SnapBounds), 8 + sizeof(::UnityEngine::Vector2Int)> __GlobalNamespace_SnapBoundsSizeCheck;
  static_assert(sizeof(SnapBounds) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SnapBounds::SnapBounds
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SnapBounds::SnapBounds
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SnapBounds::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnapBounds::*)()>(&GlobalNamespace::SnapBounds::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapBounds), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnapBounds::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnapBounds::*)(::System::IO::BinaryWriter*)>(&GlobalNamespace::SnapBounds::Write)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapBounds), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnapBounds::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnapBounds::*)(::System::IO::BinaryReader*)>(&GlobalNamespace::SnapBounds::Read)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapBounds), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
