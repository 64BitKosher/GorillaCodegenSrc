// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AverageVector3
  class AverageVector3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AverageVector3);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AverageVector3*, "", "AverageVector3");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: AverageVector3
  // [TokenAttribute] Offset: FFFFFFFF
  class AverageVector3 : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::AverageVector3::Sample
    struct Sample;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: AverageVector3/Sample
    // [TokenAttribute] Offset: FFFFFFFF
    struct Sample/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single timeStamp
      // Size: 0x4
      // Offset: 0x0
      float timeStamp;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public UnityEngine.Vector3 value
      // Size: 0xC
      // Offset: 0x4
      ::UnityEngine::Vector3 value;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: Sample
      constexpr Sample(float timeStamp_ = {}, ::UnityEngine::Vector3 value_ = {}) noexcept : timeStamp{timeStamp_}, value{value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single timeStamp
      [[deprecated("Use field access instead!")]] float& dyn_timeStamp();
      // Get instance field reference: public UnityEngine.Vector3 value
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_value();
    }; // AverageVector3/Sample
    #pragma pack(pop)
    static check_size<sizeof(AverageVector3::Sample), 4 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_AverageVector3_SampleSizeCheck;
    static_assert(sizeof(AverageVector3::Sample) == 0x10);
    public:
    // private System.Collections.Generic.List`1<AverageVector3/Sample> samples
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::GlobalNamespace::AverageVector3::Sample>* samples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::AverageVector3::Sample>*) == 0x8);
    // private System.Single timeWindow
    // Size: 0x4
    // Offset: 0x18
    float timeWindow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<AverageVector3/Sample> samples
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AverageVector3::Sample>*& dyn_samples();
    // Get instance field reference: private System.Single timeWindow
    [[deprecated("Use field access instead!")]] float& dyn_timeWindow();
    // public System.Void .ctor(System.Single averagingWindow)
    // Offset: 0x2772C34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AverageVector3* New_ctor(float averagingWindow) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AverageVector3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AverageVector3*, creationType>(averagingWindow)));
    }
    // public System.Void AddSample(UnityEngine.Vector3 sample, System.Single time)
    // Offset: 0x2772CDC
    void AddSample(::UnityEngine::Vector3 sample, float time);
    // public UnityEngine.Vector3 GetAverage()
    // Offset: 0x2772E7C
    ::UnityEngine::Vector3 GetAverage();
    // public System.Void Clear()
    // Offset: 0x2772F68
    void Clear();
    // private System.Void RefreshSamples()
    // Offset: 0x2772DAC
    void RefreshSamples();
  }; // AverageVector3
  #pragma pack(pop)
  static check_size<sizeof(AverageVector3), 24 + sizeof(float)> __GlobalNamespace_AverageVector3SizeCheck;
  static_assert(sizeof(AverageVector3) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AverageVector3::Sample, "", "AverageVector3/Sample");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AverageVector3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AverageVector3::AddSample
// Il2CppName: AddSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AverageVector3::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::AverageVector3::AddSample)> {
  static const MethodInfo* get() {
    static auto* sample = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AverageVector3*), "AddSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sample, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AverageVector3::GetAverage
// Il2CppName: GetAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::AverageVector3::*)()>(&GlobalNamespace::AverageVector3::GetAverage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AverageVector3*), "GetAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AverageVector3::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AverageVector3::*)()>(&GlobalNamespace::AverageVector3::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AverageVector3*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AverageVector3::RefreshSamples
// Il2CppName: RefreshSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AverageVector3::*)()>(&GlobalNamespace::AverageVector3::RefreshSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AverageVector3*), "RefreshSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
