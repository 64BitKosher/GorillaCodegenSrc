// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LinearSpline
  class LinearSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LinearSpline);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LinearSpline*, "", "LinearSpline");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: LinearSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class LinearSpline : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LinearSpline::CurveBoundary
    struct CurveBoundary;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: LinearSpline/CurveBoundary
    // [TokenAttribute] Offset: FFFFFFFF
    struct CurveBoundary/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 start
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 start;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 end
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 end;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: CurveBoundary
      constexpr CurveBoundary(::UnityEngine::Vector3 start_ = {}, ::UnityEngine::Vector3 end_ = {}) noexcept : start{start_}, end{end_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 start
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_start();
      // Get instance field reference: public UnityEngine.Vector3 end
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_end();
    }; // LinearSpline/CurveBoundary
    #pragma pack(pop)
    static check_size<sizeof(LinearSpline::CurveBoundary), 12 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_LinearSpline_CurveBoundarySizeCheck;
    static_assert(sizeof(LinearSpline::CurveBoundary) == 0x18);
    public:
    // public UnityEngine.Transform[] controlPointTransforms
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> controlPointTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Transform debugTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* debugTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Single> distances
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<float>* distances;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // public System.Collections.Generic.List`1<LinearSpline/CurveBoundary> curveBoundaries
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::LinearSpline::CurveBoundary>* curveBoundaries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LinearSpline::CurveBoundary>*) == 0x8);
    // public System.Boolean roundCorners
    // Size: 0x1
    // Offset: 0x48
    bool roundCorners;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: roundCorners and: cornerRadius
    char __padding5[0x3] = {};
    // public System.Single cornerRadius
    // Size: 0x4
    // Offset: 0x4C
    float cornerRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean looping
    // Size: 0x1
    // Offset: 0x50
    bool looping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: looping and: testFloat
    char __padding7[0x3] = {};
    // public System.Single testFloat
    // Size: 0x4
    // Offset: 0x54
    float testFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 gizmoResolution
    // Size: 0x4
    // Offset: 0x58
    int gizmoResolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single totalDistance
    // Size: 0x4
    // Offset: 0x5C
    float totalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform[] controlPointTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_controlPointTransforms();
    // Get instance field reference: public UnityEngine.Transform debugTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_debugTransform();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_controlPoints();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Single> distances
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_distances();
    // Get instance field reference: public System.Collections.Generic.List`1<LinearSpline/CurveBoundary> curveBoundaries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LinearSpline::CurveBoundary>*& dyn_curveBoundaries();
    // Get instance field reference: public System.Boolean roundCorners
    [[deprecated("Use field access instead!")]] bool& dyn_roundCorners();
    // Get instance field reference: public System.Single cornerRadius
    [[deprecated("Use field access instead!")]] float& dyn_cornerRadius();
    // Get instance field reference: public System.Boolean looping
    [[deprecated("Use field access instead!")]] bool& dyn_looping();
    // Get instance field reference: public System.Single testFloat
    [[deprecated("Use field access instead!")]] float& dyn_testFloat();
    // Get instance field reference: public System.Int32 gizmoResolution
    [[deprecated("Use field access instead!")]] int& dyn_gizmoResolution();
    // Get instance field reference: public System.Single totalDistance
    [[deprecated("Use field access instead!")]] float& dyn_totalDistance();
    // private System.Void RefreshControlPoints()
    // Offset: 0x277DBD4
    void RefreshControlPoints();
    // private System.Void Awake()
    // Offset: 0x277E23C
    void Awake();
    // public UnityEngine.Vector3 Evaluate(System.Single t)
    // Offset: 0x277E240
    ::UnityEngine::Vector3 Evaluate(float t);
    // public UnityEngine.Vector3 GetForwardTangent(System.Single t, System.Single step)
    // Offset: 0x277E830
    ::UnityEngine::Vector3 GetForwardTangent(float t, float step);
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x277E9A8
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x277EAB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinearSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinearSpline*, creationType>()));
    }
  }; // LinearSpline
  #pragma pack(pop)
  static check_size<sizeof(LinearSpline), 92 + sizeof(float)> __GlobalNamespace_LinearSplineSizeCheck;
  static_assert(sizeof(LinearSpline) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LinearSpline::CurveBoundary, "", "LinearSpline/CurveBoundary");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::RefreshControlPoints
// Il2CppName: RefreshControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LinearSpline::*)()>(&GlobalNamespace::LinearSpline::RefreshControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LinearSpline*), "RefreshControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LinearSpline::*)()>(&GlobalNamespace::LinearSpline::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LinearSpline*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LinearSpline::*)(float)>(&GlobalNamespace::LinearSpline::Evaluate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LinearSpline*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::GetForwardTangent
// Il2CppName: GetForwardTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LinearSpline::*)(float, float)>(&GlobalNamespace::LinearSpline::GetForwardTangent)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LinearSpline*), "GetForwardTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, step});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LinearSpline::*)()>(&GlobalNamespace::LinearSpline::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LinearSpline*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LinearSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
