// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FXSArgs
#include "GlobalNamespace/FXSArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandTapArgs
  class HandTapArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandTapArgs);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandTapArgs*, "", "HandTapArgs");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: HandTapArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class HandTapArgs : public ::GlobalNamespace::FXSArgs {
    public:
    public:
    // public System.Int32 soundIndex
    // Size: 0x4
    // Offset: 0x10
    int soundIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x14
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: tapVolume
    char __padding1[0x3] = {};
    // public System.Single tapVolume
    // Size: 0x4
    // Offset: 0x18
    float tapVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Int32 soundIndex
    [[deprecated("Use field access instead!")]] int& dyn_soundIndex();
    // Get instance field reference: public System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: public System.Single tapVolume
    [[deprecated("Use field access instead!")]] float& dyn_tapVolume();
    // public System.Void .ctor()
    // Offset: 0x26FE450
    // Implemented from: FXSArgs
    // Base method: System.Void FXSArgs::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandTapArgs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandTapArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandTapArgs*, creationType>()));
    }
  }; // HandTapArgs
  #pragma pack(pop)
  static check_size<sizeof(HandTapArgs), 24 + sizeof(float)> __GlobalNamespace_HandTapArgsSizeCheck;
  static_assert(sizeof(HandTapArgs) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandTapArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
