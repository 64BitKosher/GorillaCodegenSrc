// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RandomizeWavePhaseOffset
  class RandomizeWavePhaseOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RandomizeWavePhaseOffset);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RandomizeWavePhaseOffset*, "", "RandomizeWavePhaseOffset");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RandomizeWavePhaseOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class RandomizeWavePhaseOffset : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private ShaderHashId _VertexWavePhaseOffset
    // Size: 0xC
    // Offset: 0x20
    ::GlobalNamespace::ShaderHashId VertexWavePhaseOffset;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: VertexWavePhaseOffset and: minPhaseOffset
    char __padding0[0x4] = {};
    // private System.Single minPhaseOffset
    // Size: 0x4
    // Offset: 0x30
    float minPhaseOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxPhaseOffset
    // Size: 0x4
    // Offset: 0x34
    float maxPhaseOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private ShaderHashId _VertexWavePhaseOffset
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__VertexWavePhaseOffset();
    // Get instance field reference: private System.Single minPhaseOffset
    [[deprecated("Use field access instead!")]] float& dyn_minPhaseOffset();
    // Get instance field reference: private System.Single maxPhaseOffset
    [[deprecated("Use field access instead!")]] float& dyn_maxPhaseOffset();
    // private System.Void Start()
    // Offset: 0x2789040
    void Start();
    // public System.Void .ctor()
    // Offset: 0x27890C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomizeWavePhaseOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeWavePhaseOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomizeWavePhaseOffset*, creationType>()));
    }
  }; // RandomizeWavePhaseOffset
  #pragma pack(pop)
  static check_size<sizeof(RandomizeWavePhaseOffset), 52 + sizeof(float)> __GlobalNamespace_RandomizeWavePhaseOffsetSizeCheck;
  static_assert(sizeof(RandomizeWavePhaseOffset) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RandomizeWavePhaseOffset::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomizeWavePhaseOffset::*)()>(&GlobalNamespace::RandomizeWavePhaseOffset::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomizeWavePhaseOffset*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RandomizeWavePhaseOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
