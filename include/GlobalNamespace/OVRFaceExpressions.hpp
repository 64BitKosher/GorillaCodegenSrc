// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: OVRPlugin/FaceState
#include "GlobalNamespace/OVRPlugin_FaceState.hpp"
// Including type: OVRPermissionsRequester/Permission
#include "GlobalNamespace/OVRPermissionsRequester.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRFaceExpressions
  class OVRFaceExpressions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRFaceExpressions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRFaceExpressions*, "", "OVRFaceExpressions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: OVRFaceExpressions
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class OVRFaceExpressions : public ::UnityEngine::MonoBehaviour/*, public ::System::Collections::Generic::IReadOnlyCollection_1<float>, public ::GlobalNamespace::OVRFaceExpressions::WeightProvider*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRFaceExpressions::WeightProvider
    class WeightProvider;
    // Nested type: ::GlobalNamespace::OVRFaceExpressions::FaceRegionConfidence
    struct FaceRegionConfidence;
    // Nested type: ::GlobalNamespace::OVRFaceExpressions::FaceExpression
    struct FaceExpression;
    // Nested type: ::GlobalNamespace::OVRFaceExpressions::FaceExpressionsEnumerator
    struct FaceExpressionsEnumerator;
    // Size: 0x0
    #pragma pack(push, 1)
    // Autogenerated type: OVRFaceExpressions/WeightProvider
    // [TokenAttribute] Offset: FFFFFFFF
    class WeightProvider {
      public:
      // public System.Single GetWeight(OVRFaceExpressions/FaceExpression expression)
      // Offset: 0xFFFFFFFFFFFFFFFF
      float GetWeight(::GlobalNamespace::OVRFaceExpressions::FaceExpression expression);
    }; // OVRFaceExpressions/WeightProvider
    #pragma pack(pop)
    public:
    // private System.Boolean <ValidExpressions>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool ValidExpressions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <EyeFollowingBlendshapesValid>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool EyeFollowingBlendshapesValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EyeFollowingBlendshapesValid and: currentFaceState
    char __padding1[0x6] = {};
    // private OVRPlugin/FaceState _currentFaceState
    // Size: 0x20
    // Offset: 0x28
    ::GlobalNamespace::OVRPlugin::FaceState currentFaceState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::FaceState) == 0x20);
    // private System.Action`1<System.String> _onPermissionGranted
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::StringW>* onPermissionGranted;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<float>
    operator ::System::Collections::Generic::IReadOnlyCollection_1<float>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<float>*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRFaceExpressions::WeightProvider
    operator ::GlobalNamespace::OVRFaceExpressions::WeightProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRFaceExpressions::WeightProvider*>(this);
    }
    // static field const value: static private OVRPermissionsRequester/Permission FaceTrackingPermission
    static constexpr const int FaceTrackingPermission = 0;
    // Get static field: static private OVRPermissionsRequester/Permission FaceTrackingPermission
    static ::GlobalNamespace::OVRPermissionsRequester::Permission _get_FaceTrackingPermission();
    // Set static field: static private OVRPermissionsRequester/Permission FaceTrackingPermission
    static void _set_FaceTrackingPermission(::GlobalNamespace::OVRPermissionsRequester::Permission value);
    // Get static field: static private System.Int32 _trackingInstanceCount
    static int _get__trackingInstanceCount();
    // Set static field: static private System.Int32 _trackingInstanceCount
    static void _set__trackingInstanceCount(int value);
    // Get instance field reference: private System.Boolean <ValidExpressions>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ValidExpressions$k__BackingField();
    // Get instance field reference: private System.Boolean <EyeFollowingBlendshapesValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EyeFollowingBlendshapesValid$k__BackingField();
    // Get instance field reference: private OVRPlugin/FaceState _currentFaceState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::FaceState& dyn__currentFaceState();
    // Get instance field reference: private System.Action`1<System.String> _onPermissionGranted
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn__onPermissionGranted();
    // public System.Boolean get_FaceTrackingEnabled()
    // Offset: 0x48B9DB4
    bool get_FaceTrackingEnabled();
    // public System.Boolean get_ValidExpressions()
    // Offset: 0x48B9E04
    bool get_ValidExpressions();
    // private System.Void set_ValidExpressions(System.Boolean value)
    // Offset: 0x48B9E0C
    void set_ValidExpressions(bool value);
    // public System.Boolean get_EyeFollowingBlendshapesValid()
    // Offset: 0x48B9E18
    bool get_EyeFollowingBlendshapesValid();
    // private System.Void set_EyeFollowingBlendshapesValid(System.Boolean value)
    // Offset: 0x48B9E20
    void set_EyeFollowingBlendshapesValid(bool value);
    // private System.Void Awake()
    // Offset: 0x48B9E2C
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x48B9EB0
    void OnEnable();
    // private System.Void OnPermissionGranted(System.String permissionId)
    // Offset: 0x48BA000
    void OnPermissionGranted(::StringW permissionId);
    // private System.Boolean StartFaceTracking()
    // Offset: 0x48B9F28
    bool StartFaceTracking();
    // private System.Void OnDisable()
    // Offset: 0x48BA060
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x48BA0E8
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x48BA0F4
    void Update();
    // public System.Single get_Item(OVRFaceExpressions/FaceExpression expression)
    // Offset: 0x48BA190
    float get_Item(::GlobalNamespace::OVRFaceExpressions::FaceExpression expression);
    // public System.Single GetWeight(OVRFaceExpressions/FaceExpression expression)
    // Offset: 0x48BA2E8
    float GetWeight(::GlobalNamespace::OVRFaceExpressions::FaceExpression expression);
    // public System.Boolean TryGetFaceExpressionWeight(OVRFaceExpressions/FaceExpression expression, out System.Single weight)
    // Offset: 0x48BA2EC
    bool TryGetFaceExpressionWeight(::GlobalNamespace::OVRFaceExpressions::FaceExpression expression, ByRef<float> weight);
    // public System.Boolean TryGetWeightConfidence(OVRFaceExpressions/FaceRegionConfidence region, out System.Single weightConfidence)
    // Offset: 0x48BA348
    bool TryGetWeightConfidence(::GlobalNamespace::OVRFaceExpressions::FaceRegionConfidence region, ByRef<float> weightConfidence);
    // System.Void CheckValidity()
    // Offset: 0x48BA28C
    void CheckValidity();
    // public System.Void CopyTo(System.Single[] array, System.Int32 startIndex)
    // Offset: 0x48BA3A4
    void CopyTo(::ArrayW<float> array, int startIndex);
    // public System.Single[] ToArray()
    // Offset: 0x48BA5E8
    ::ArrayW<float> ToArray();
    // public OVRFaceExpressions/FaceExpressionsEnumerator GetEnumerator()
    // Offset: 0x48BA64C
    ::GlobalNamespace::OVRFaceExpressions::FaceExpressionsEnumerator GetEnumerator();
    // private System.Collections.Generic.IEnumerator`1<System.Single> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
    // Offset: 0x48BA6C0
    ::System::Collections::Generic::IEnumerator_1<float>* System_Collections_Generic_IEnumerable$System_Single$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x48BA724
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Int32 get_Count()
    // Offset: 0x48BA788
    int get_Count();
    // public System.Void .ctor()
    // Offset: 0x48BA7A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRFaceExpressions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRFaceExpressions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRFaceExpressions*, creationType>()));
    }
  }; // OVRFaceExpressions
  #pragma pack(pop)
  static check_size<sizeof(OVRFaceExpressions), 72 + sizeof(::System::Action_1<::StringW>*)> __GlobalNamespace_OVRFaceExpressionsSizeCheck;
  static_assert(sizeof(OVRFaceExpressions) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRFaceExpressions::WeightProvider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRFaceExpressions::WeightProvider*, "", "OVRFaceExpressions/WeightProvider");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::get_FaceTrackingEnabled
// Il2CppName: get_FaceTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::get_FaceTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "get_FaceTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::get_ValidExpressions
// Il2CppName: get_ValidExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::get_ValidExpressions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "get_ValidExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::set_ValidExpressions
// Il2CppName: set_ValidExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)(bool)>(&GlobalNamespace::OVRFaceExpressions::set_ValidExpressions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "set_ValidExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::get_EyeFollowingBlendshapesValid
// Il2CppName: get_EyeFollowingBlendshapesValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::get_EyeFollowingBlendshapesValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "get_EyeFollowingBlendshapesValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::set_EyeFollowingBlendshapesValid
// Il2CppName: set_EyeFollowingBlendshapesValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)(bool)>(&GlobalNamespace::OVRFaceExpressions::set_EyeFollowingBlendshapesValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "set_EyeFollowingBlendshapesValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::OnPermissionGranted
// Il2CppName: OnPermissionGranted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)(::StringW)>(&GlobalNamespace::OVRFaceExpressions::OnPermissionGranted)> {
  static const MethodInfo* get() {
    static auto* permissionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "OnPermissionGranted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permissionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::StartFaceTracking
// Il2CppName: StartFaceTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::StartFaceTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "StartFaceTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRFaceExpressions::*)(::GlobalNamespace::OVRFaceExpressions::FaceExpression)>(&GlobalNamespace::OVRFaceExpressions::get_Item)> {
  static const MethodInfo* get() {
    static auto* expression = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expression});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::GetWeight
// Il2CppName: GetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRFaceExpressions::*)(::GlobalNamespace::OVRFaceExpressions::FaceExpression)>(&GlobalNamespace::OVRFaceExpressions::GetWeight)> {
  static const MethodInfo* get() {
    static auto* expression = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "GetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expression});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::TryGetFaceExpressionWeight
// Il2CppName: TryGetFaceExpressionWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)(::GlobalNamespace::OVRFaceExpressions::FaceExpression, ByRef<float>)>(&GlobalNamespace::OVRFaceExpressions::TryGetFaceExpressionWeight)> {
  static const MethodInfo* get() {
    static auto* expression = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "TryGetFaceExpressionWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expression, weight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::TryGetWeightConfidence
// Il2CppName: TryGetWeightConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRFaceExpressions::*)(::GlobalNamespace::OVRFaceExpressions::FaceRegionConfidence, ByRef<float>)>(&GlobalNamespace::OVRFaceExpressions::TryGetWeightConfidence)> {
  static const MethodInfo* get() {
    static auto* region = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceRegionConfidence")->byval_arg;
    static auto* weightConfidence = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "TryGetWeightConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{region, weightConfidence});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::CheckValidity
// Il2CppName: CheckValidity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::CheckValidity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "CheckValidity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRFaceExpressions::*)(::ArrayW<float>, int)>(&GlobalNamespace::OVRFaceExpressions::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, startIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::ToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions::FaceExpressionsEnumerator (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::System_Collections_Generic_IEnumerable$System_Single$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<float>* (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::System_Collections_Generic_IEnumerable$System_Single$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRFaceExpressions::*)()>(&GlobalNamespace::OVRFaceExpressions::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRFaceExpressions*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRFaceExpressions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
