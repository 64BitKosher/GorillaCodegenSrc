// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ObjectToggle
  class ObjectToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ObjectToggle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectToggle*, "", "ObjectToggle");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: ObjectToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectToggle : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> objectsToToggle
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objectsToToggle;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Boolean _ignoreHierarchyState
    // Size: 0x1
    // Offset: 0x28
    bool ignoreHierarchyState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> _toggled
    // Size: 0xFFFFFFFF
    // Offset: 0x29
    ::System::Nullable_1<bool> toggled;
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> objectsToToggle
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_objectsToToggle();
    // Get instance field reference: private System.Boolean _ignoreHierarchyState
    [[deprecated("Use field access instead!")]] bool& dyn__ignoreHierarchyState();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _toggled
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__toggled();
    // public System.Void Toggle(System.Boolean initialState)
    // Offset: 0x274FA64
    void Toggle(bool initialState);
    // public System.Void Enable()
    // Offset: 0x274FAE4
    void Enable();
    // public System.Void Disable()
    // Offset: 0x274FC10
    void Disable();
    // public System.Void .ctor()
    // Offset: 0x274FD3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectToggle*, creationType>()));
    }
  }; // ObjectToggle
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectToggle::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectToggle::*)(bool)>(&GlobalNamespace::ObjectToggle::Toggle)> {
  static const MethodInfo* get() {
    static auto* initialState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectToggle*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectToggle::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectToggle::*)()>(&GlobalNamespace::ObjectToggle::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectToggle*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectToggle::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectToggle::*)()>(&GlobalNamespace::ObjectToggle::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectToggle*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
