// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRVirtualKeyboard
#include "GlobalNamespace/OVRVirtualKeyboard.hpp"
// Including type: OVRVirtualKeyboard/BaseInputSource
#include "GlobalNamespace/OVRVirtualKeyboard_BaseInputSource.hpp"
// Including type: OVRVirtualKeyboard/InputSource
#include "GlobalNamespace/OVRVirtualKeyboard_InputSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRHand
  class OVRHand;
  // Forward declaring type: OVRSkeleton
  class OVRSkeleton;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRVirtualKeyboard::HandInputSource);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRVirtualKeyboard::HandInputSource*, "", "OVRVirtualKeyboard/HandInputSource");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: OVRVirtualKeyboard/HandInputSource
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRVirtualKeyboard::HandInputSource : public ::GlobalNamespace::OVRVirtualKeyboard::BaseInputSource {
    public:
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::HandInputSource::$$c
    class $$c;
    public:
    // private readonly OVRHand _hand
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRHand* hand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private readonly OVRVirtualKeyboard/InputSource _inputSource
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::OVRVirtualKeyboard::InputSource inputSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard::InputSource) == 0x4);
    // Padding between fields: inputSource and: keyboard
    char __padding1[0x4] = {};
    // private readonly OVRVirtualKeyboard _keyboard
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OVRVirtualKeyboard* keyboard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard*) == 0x8);
    // private readonly OVRSkeleton _skeleton
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::OVRSkeleton* skeleton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeleton*) == 0x8);
    // private System.Int32 _lastFrameCount
    // Size: 0x4
    // Offset: 0x40
    int lastFrameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly OVRHand _hand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn__hand();
    // Get instance field reference: private readonly OVRVirtualKeyboard/InputSource _inputSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard::InputSource& dyn__inputSource();
    // Get instance field reference: private readonly OVRVirtualKeyboard _keyboard
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard*& dyn__keyboard();
    // Get instance field reference: private readonly OVRSkeleton _skeleton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& dyn__skeleton();
    // Get instance field reference: private System.Int32 _lastFrameCount
    [[deprecated("Use field access instead!")]] int& dyn__lastFrameCount();
    // public System.Void .ctor(OVRVirtualKeyboard keyboard, OVRVirtualKeyboard/InputSource inputSource, OVRHand hand)
    // Offset: 0x493A5F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRVirtualKeyboard::HandInputSource* New_ctor(::GlobalNamespace::OVRVirtualKeyboard* keyboard, ::GlobalNamespace::OVRVirtualKeyboard::InputSource inputSource, ::GlobalNamespace::OVRHand* hand) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVirtualKeyboard::HandInputSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRVirtualKeyboard::HandInputSource*, creationType>(keyboard, inputSource, hand)));
    }
    // protected override System.Void UpdateInput()
    // Offset: 0x493B8FC
    // Implemented from: OVRVirtualKeyboard/BaseInputSource
    // Base method: System.Void BaseInputSource::UpdateInput()
    void UpdateInput();
  }; // OVRVirtualKeyboard/HandInputSource
  #pragma pack(pop)
  static check_size<sizeof(OVRVirtualKeyboard::HandInputSource), 64 + sizeof(int)> __GlobalNamespace_OVRVirtualKeyboard_HandInputSourceSizeCheck;
  static_assert(sizeof(OVRVirtualKeyboard::HandInputSource) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::HandInputSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::HandInputSource::UpdateInput
// Il2CppName: UpdateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::HandInputSource::*)()>(&GlobalNamespace::OVRVirtualKeyboard::HandInputSource::UpdateInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard::HandInputSource*), "UpdateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
