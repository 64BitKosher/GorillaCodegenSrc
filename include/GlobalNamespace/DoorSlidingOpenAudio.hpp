// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBuildValidation
#include "GlobalNamespace/IBuildValidation.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GhostLabButton
  class GhostLabButton;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DoorSlidingOpenAudio
  class DoorSlidingOpenAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DoorSlidingOpenAudio);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DoorSlidingOpenAudio*, "", "DoorSlidingOpenAudio");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: DoorSlidingOpenAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class DoorSlidingOpenAudio : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IBuildValidation, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    public:
    // public GhostLabButton button
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::GhostLabButton* button;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLabButton*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBuildValidation
    operator ::GlobalNamespace::IBuildValidation() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBuildValidation*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get instance field reference: public GhostLabButton button
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLabButton*& dyn_button();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemTick_TickRunning$k__BackingField();
    // private System.Boolean ITickSystemTick.get_TickRunning()
    // Offset: 0x2695310
    bool ITickSystemTick_get_TickRunning();
    // private System.Void ITickSystemTick.set_TickRunning(System.Boolean value)
    // Offset: 0x2695318
    void ITickSystemTick_set_TickRunning(bool value);
    // private System.Void OnEnable()
    // Offset: 0x2695324
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2695390
    void OnDisable();
    // public System.Boolean BuildValidationCheck()
    // Offset: 0x26953FC
    bool BuildValidationCheck();
    // private System.Void ITickSystemTick.Tick()
    // Offset: 0x2695538
    void ITickSystemTick_Tick();
    // public System.Void .ctor()
    // Offset: 0x26958AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DoorSlidingOpenAudio* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DoorSlidingOpenAudio::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DoorSlidingOpenAudio*, creationType>()));
    }
  }; // DoorSlidingOpenAudio
  #pragma pack(pop)
  static check_size<sizeof(DoorSlidingOpenAudio), 48 + sizeof(bool)> __GlobalNamespace_DoorSlidingOpenAudioSizeCheck;
  static_assert(sizeof(DoorSlidingOpenAudio) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_get_TickRunning
// Il2CppName: ITickSystemTick.get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DoorSlidingOpenAudio::*)()>(&GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "ITickSystemTick.get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_set_TickRunning
// Il2CppName: ITickSystemTick.set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DoorSlidingOpenAudio::*)(bool)>(&GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "ITickSystemTick.set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DoorSlidingOpenAudio::*)()>(&GlobalNamespace::DoorSlidingOpenAudio::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DoorSlidingOpenAudio::*)()>(&GlobalNamespace::DoorSlidingOpenAudio::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::BuildValidationCheck
// Il2CppName: BuildValidationCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DoorSlidingOpenAudio::*)()>(&GlobalNamespace::DoorSlidingOpenAudio::BuildValidationCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "BuildValidationCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_Tick
// Il2CppName: ITickSystemTick.Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DoorSlidingOpenAudio::*)()>(&GlobalNamespace::DoorSlidingOpenAudio::ITickSystemTick_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DoorSlidingOpenAudio*), "ITickSystemTick.Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DoorSlidingOpenAudio::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
