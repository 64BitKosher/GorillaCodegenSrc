// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkInput
#include "Fusion/INetworkInput.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkedInput
  struct NetworkedInput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkedInput, "", "NetworkedInput");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: NetworkedInput
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkInputWeavedAttribute] Offset: FFFFFFFF
  struct NetworkedInput/*, public ::System::ValueType, public ::Fusion::INetworkInput*/ {
    public:
    public:
    // public UnityEngine.Quaternion headRot_LS
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Quaternion headRot_LS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 rightHandPos_LS
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 rightHandPos_LS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rightHandRot_LS
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Quaternion rightHandRot_LS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 leftHandPos_LS
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 leftHandPos_LS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion leftHandRot_LS
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Quaternion leftHandRot_LS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 rootPosition
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 rootPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rootRotation
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Quaternion rootRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean leftThumbTouch
    // Size: 0x1
    // Offset: 0x64
    bool leftThumbTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftThumbTouch and: leftThumbPress
    char __padding7[0x3] = {};
    // public System.Boolean leftThumbPress
    // Size: 0x1
    // Offset: 0x68
    bool leftThumbPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftThumbPress and: leftIndexValue
    char __padding8[0x3] = {};
    // public System.Single leftIndexValue
    // Size: 0x4
    // Offset: 0x6C
    float leftIndexValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single leftMiddleValue
    // Size: 0x4
    // Offset: 0x70
    float leftMiddleValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean rightThumbTouch
    // Size: 0x1
    // Offset: 0x74
    bool rightThumbTouch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightThumbTouch and: rightThumbPress
    char __padding11[0x3] = {};
    // public System.Boolean rightThumbPress
    // Size: 0x1
    // Offset: 0x78
    bool rightThumbPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightThumbPress and: rightIndexValue
    char __padding12[0x3] = {};
    // public System.Single rightIndexValue
    // Size: 0x4
    // Offset: 0x7C
    float rightIndexValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightMiddleValue
    // Size: 0x4
    // Offset: 0x80
    float rightMiddleValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x84
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 handPoseData
    // Size: 0x4
    // Offset: 0x88
    int handPoseData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetworkedInput
    constexpr NetworkedInput(::UnityEngine::Quaternion headRot_LS_ = {}, ::UnityEngine::Vector3 rightHandPos_LS_ = {}, ::UnityEngine::Quaternion rightHandRot_LS_ = {}, ::UnityEngine::Vector3 leftHandPos_LS_ = {}, ::UnityEngine::Quaternion leftHandRot_LS_ = {}, ::UnityEngine::Vector3 rootPosition_ = {}, ::UnityEngine::Quaternion rootRotation_ = {}, bool leftThumbTouch_ = {}, bool leftThumbPress_ = {}, float leftIndexValue_ = {}, float leftMiddleValue_ = {}, bool rightThumbTouch_ = {}, bool rightThumbPress_ = {}, float rightIndexValue_ = {}, float rightMiddleValue_ = {}, float scale_ = {}, int handPoseData_ = {}) noexcept : headRot_LS{headRot_LS_}, rightHandPos_LS{rightHandPos_LS_}, rightHandRot_LS{rightHandRot_LS_}, leftHandPos_LS{leftHandPos_LS_}, leftHandRot_LS{leftHandRot_LS_}, rootPosition{rootPosition_}, rootRotation{rootRotation_}, leftThumbTouch{leftThumbTouch_}, leftThumbPress{leftThumbPress_}, leftIndexValue{leftIndexValue_}, leftMiddleValue{leftMiddleValue_}, rightThumbTouch{rightThumbTouch_}, rightThumbPress{rightThumbPress_}, rightIndexValue{rightIndexValue_}, rightMiddleValue{rightMiddleValue_}, scale{scale_}, handPoseData{handPoseData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkInput
    operator ::Fusion::INetworkInput() noexcept {
      return *reinterpret_cast<::Fusion::INetworkInput*>(this);
    }
    // Get instance field reference: public UnityEngine.Quaternion headRot_LS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headRot_LS();
    // Get instance field reference: public UnityEngine.Vector3 rightHandPos_LS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandPos_LS();
    // Get instance field reference: public UnityEngine.Quaternion rightHandRot_LS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rightHandRot_LS();
    // Get instance field reference: public UnityEngine.Vector3 leftHandPos_LS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandPos_LS();
    // Get instance field reference: public UnityEngine.Quaternion leftHandRot_LS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_leftHandRot_LS();
    // Get instance field reference: public UnityEngine.Vector3 rootPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rootPosition();
    // Get instance field reference: public UnityEngine.Quaternion rootRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rootRotation();
    // Get instance field reference: public System.Boolean leftThumbTouch
    [[deprecated("Use field access instead!")]] bool& dyn_leftThumbTouch();
    // Get instance field reference: public System.Boolean leftThumbPress
    [[deprecated("Use field access instead!")]] bool& dyn_leftThumbPress();
    // Get instance field reference: public System.Single leftIndexValue
    [[deprecated("Use field access instead!")]] float& dyn_leftIndexValue();
    // Get instance field reference: public System.Single leftMiddleValue
    [[deprecated("Use field access instead!")]] float& dyn_leftMiddleValue();
    // Get instance field reference: public System.Boolean rightThumbTouch
    [[deprecated("Use field access instead!")]] bool& dyn_rightThumbTouch();
    // Get instance field reference: public System.Boolean rightThumbPress
    [[deprecated("Use field access instead!")]] bool& dyn_rightThumbPress();
    // Get instance field reference: public System.Single rightIndexValue
    [[deprecated("Use field access instead!")]] float& dyn_rightIndexValue();
    // Get instance field reference: public System.Single rightMiddleValue
    [[deprecated("Use field access instead!")]] float& dyn_rightMiddleValue();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public System.Int32 handPoseData
    [[deprecated("Use field access instead!")]] int& dyn_handPoseData();
  }; // NetworkedInput
  #pragma pack(pop)
  static check_size<sizeof(NetworkedInput), 136 + sizeof(int)> __GlobalNamespace_NetworkedInputSizeCheck;
  static_assert(sizeof(NetworkedInput) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
