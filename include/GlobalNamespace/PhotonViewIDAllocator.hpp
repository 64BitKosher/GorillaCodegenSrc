// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PhotonViewIDAllocator
  class PhotonViewIDAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PhotonViewIDAllocator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PhotonViewIDAllocator*, "", "PhotonViewIDAllocator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: PhotonViewIDAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonViewIDAllocator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean isStatic
    // Size: 0x1
    // Offset: 0x20
    bool isStatic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isStatic and: pathString
    char __padding0[0x7] = {};
    // public System.String pathString
    // Size: 0x8
    // Offset: 0x28
    ::StringW pathString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 order
    // Size: 0x4
    // Offset: 0x30
    int order;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Boolean isStatic
    [[deprecated("Use field access instead!")]] bool& dyn_isStatic();
    // Get instance field reference: public System.String pathString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_pathString();
    // Get instance field reference: public System.Int32 order
    [[deprecated("Use field access instead!")]] int& dyn_order();
    // public System.Void .ctor()
    // Offset: 0x27898C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonViewIDAllocator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonViewIDAllocator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonViewIDAllocator*, creationType>()));
    }
  }; // PhotonViewIDAllocator
  #pragma pack(pop)
  static check_size<sizeof(PhotonViewIDAllocator), 48 + sizeof(int)> __GlobalNamespace_PhotonViewIDAllocatorSizeCheck;
  static_assert(sizeof(PhotonViewIDAllocator) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PhotonViewIDAllocator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
