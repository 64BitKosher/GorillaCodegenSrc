// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RubberDuck
#include "GlobalNamespace/RubberDuck.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MonkeCandle
  class MonkeCandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MonkeCandle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MonkeCandle*, "", "MonkeCandle");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: MonkeCandle
  // [TokenAttribute] Offset: FFFFFFFF
  class MonkeCandle : public ::GlobalNamespace::RubberDuck {
    public:
    public:
    // private UnityEngine.ParticleSystem/Particle[] fxParticleArray
    // Size: 0x8
    // Offset: 0x340
    ::ArrayW<::UnityEngine::ParticleSystem::Particle> fxParticleArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::Particle>) == 0x8);
    // public UnityEngine.AudioSource movingFxAudio
    // Size: 0x8
    // Offset: 0x348
    ::UnityEngine::AudioSource* movingFxAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource fxExplodeAudio
    // Size: 0x8
    // Offset: 0x350
    ::UnityEngine::AudioSource* fxExplodeAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> currentParticles
    // Size: 0x8
    // Offset: 0x358
    ::System::Collections::Generic::List_1<uint>* currentParticles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
    // Size: 0x8
    // Offset: 0x360
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>* particleInfoDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Vector3 outPosition
    // Size: 0xC
    // Offset: 0x368
    ::UnityEngine::Vector3 outPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private UnityEngine.ParticleSystem/Particle[] fxParticleArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& dyn_fxParticleArray();
    // Get instance field reference: public UnityEngine.AudioSource movingFxAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_movingFxAudio();
    // Get instance field reference: public UnityEngine.AudioSource fxExplodeAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_fxExplodeAudio();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> currentParticles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& dyn_currentParticles();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*& dyn_particleInfoDict();
    // Get instance field reference: private UnityEngine.Vector3 outPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_outPosition();
    // protected override System.Void Start()
    // Offset: 0x26D9C9C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // public override System.Void LateUpdate()
    // Offset: 0x26D9D38
    // Implemented from: RubberDuck
    // Base method: System.Void RubberDuck::LateUpdate()
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26DA59C
    // Implemented from: RubberDuck
    // Base method: System.Void RubberDuck::.ctor()
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonkeCandle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonkeCandle*, creationType>()));
    }
  }; // MonkeCandle
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MonkeCandle::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MonkeCandle::*)()>(&GlobalNamespace::MonkeCandle::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MonkeCandle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MonkeCandle::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MonkeCandle::*)()>(&GlobalNamespace::MonkeCandle::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MonkeCandle*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MonkeCandle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
