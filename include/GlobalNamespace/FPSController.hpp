// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FPSController
  class FPSController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FPSController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FPSController*, "", "FPSController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: FPSController
  // [TokenAttribute] Offset: FFFFFFFF
  class FPSController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FPSController::OnStateChangeEventHandler
    class OnStateChangeEventHandler;
    public:
    // public System.Single baseMoveSpeed
    // Size: 0x4
    // Offset: 0x20
    float baseMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shiftMoveSpeed
    // Size: 0x4
    // Offset: 0x24
    float shiftMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ctrlMoveSpeed
    // Size: 0x4
    // Offset: 0x28
    float ctrlMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lookHorizontal
    // Size: 0x4
    // Offset: 0x2C
    float lookHorizontal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lookVertical
    // Size: 0x4
    // Offset: 0x30
    float lookVertical;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 leftControllerPosOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 leftControllerPosOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 leftControllerRotationOffset
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 leftControllerRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightControllerPosOffset
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 rightControllerPosOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightControllerRotationOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 rightControllerRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean toggleGrab
    // Size: 0x1
    // Offset: 0x64
    bool toggleGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: toggleGrab and: OnStartEvent
    char __padding9[0x3] = {};
    // private FPSController/OnStateChangeEventHandler OnStartEvent
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::FPSController::OnStateChangeEventHandler* OnStartEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FPSController::OnStateChangeEventHandler*) == 0x8);
    // private FPSController/OnStateChangeEventHandler OnStopEvent
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::FPSController::OnStateChangeEventHandler* OnStopEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FPSController::OnStateChangeEventHandler*) == 0x8);
    public:
    // Get instance field reference: public System.Single baseMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_baseMoveSpeed();
    // Get instance field reference: public System.Single shiftMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_shiftMoveSpeed();
    // Get instance field reference: public System.Single ctrlMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_ctrlMoveSpeed();
    // Get instance field reference: public System.Single lookHorizontal
    [[deprecated("Use field access instead!")]] float& dyn_lookHorizontal();
    // Get instance field reference: public System.Single lookVertical
    [[deprecated("Use field access instead!")]] float& dyn_lookVertical();
    // Get instance field reference: private UnityEngine.Vector3 leftControllerPosOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftControllerPosOffset();
    // Get instance field reference: private UnityEngine.Vector3 leftControllerRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftControllerRotationOffset();
    // Get instance field reference: private UnityEngine.Vector3 rightControllerPosOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightControllerPosOffset();
    // Get instance field reference: private UnityEngine.Vector3 rightControllerRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightControllerRotationOffset();
    // Get instance field reference: private System.Boolean toggleGrab
    [[deprecated("Use field access instead!")]] bool& dyn_toggleGrab();
    // Get instance field reference: private FPSController/OnStateChangeEventHandler OnStartEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FPSController::OnStateChangeEventHandler*& dyn_OnStartEvent();
    // Get instance field reference: private FPSController/OnStateChangeEventHandler OnStopEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FPSController::OnStateChangeEventHandler*& dyn_OnStopEvent();
    // public System.Void add_OnStartEvent(FPSController/OnStateChangeEventHandler value)
    // Offset: 0x2772348
    void add_OnStartEvent(::GlobalNamespace::FPSController::OnStateChangeEventHandler* value);
    // public System.Void remove_OnStartEvent(FPSController/OnStateChangeEventHandler value)
    // Offset: 0x27723E4
    void remove_OnStartEvent(::GlobalNamespace::FPSController::OnStateChangeEventHandler* value);
    // public System.Void add_OnStopEvent(FPSController/OnStateChangeEventHandler value)
    // Offset: 0x2772480
    void add_OnStopEvent(::GlobalNamespace::FPSController::OnStateChangeEventHandler* value);
    // public System.Void remove_OnStopEvent(FPSController/OnStateChangeEventHandler value)
    // Offset: 0x277251C
    void remove_OnStopEvent(::GlobalNamespace::FPSController::OnStateChangeEventHandler* value);
    // public System.Void .ctor()
    // Offset: 0x27725B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FPSController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FPSController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FPSController*, creationType>()));
    }
  }; // FPSController
  #pragma pack(pop)
  static check_size<sizeof(FPSController), 112 + sizeof(::GlobalNamespace::FPSController::OnStateChangeEventHandler*)> __GlobalNamespace_FPSControllerSizeCheck;
  static_assert(sizeof(FPSController) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FPSController::add_OnStartEvent
// Il2CppName: add_OnStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSController::*)(::GlobalNamespace::FPSController::OnStateChangeEventHandler*)>(&GlobalNamespace::FPSController::add_OnStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FPSController/OnStateChangeEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSController*), "add_OnStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSController::remove_OnStartEvent
// Il2CppName: remove_OnStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSController::*)(::GlobalNamespace::FPSController::OnStateChangeEventHandler*)>(&GlobalNamespace::FPSController::remove_OnStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FPSController/OnStateChangeEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSController*), "remove_OnStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSController::add_OnStopEvent
// Il2CppName: add_OnStopEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSController::*)(::GlobalNamespace::FPSController::OnStateChangeEventHandler*)>(&GlobalNamespace::FPSController::add_OnStopEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FPSController/OnStateChangeEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSController*), "add_OnStopEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSController::remove_OnStopEvent
// Il2CppName: remove_OnStopEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSController::*)(::GlobalNamespace::FPSController::OnStateChangeEventHandler*)>(&GlobalNamespace::FPSController::remove_OnStopEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FPSController/OnStateChangeEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSController*), "remove_OnStopEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
