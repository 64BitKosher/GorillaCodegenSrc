// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: WardrobeItemButton
  class WardrobeItemButton;
  // Forward declaring type: HeadModel
  class HeadModel;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WardrobeInstance
  class WardrobeInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WardrobeInstance);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WardrobeInstance*, "", "WardrobeInstance");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: WardrobeInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class WardrobeInstance : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public WardrobeItemButton[] wardrobeItemButtons
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::WardrobeItemButton*> wardrobeItemButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::WardrobeItemButton*>) == 0x8);
    // public HeadModel selfDoll
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::HeadModel* selfDoll;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HeadModel*) == 0x8);
    public:
    // Get instance field reference: public WardrobeItemButton[] wardrobeItemButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::WardrobeItemButton*>& dyn_wardrobeItemButtons();
    // Get instance field reference: public HeadModel selfDoll
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& dyn_selfDoll();
    // public System.Void Start()
    // Offset: 0x26D4D88
    void Start();
    // public System.Void OnDestroy()
    // Offset: 0x26D4DEC
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x26D4E50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WardrobeInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WardrobeInstance*, creationType>()));
    }
  }; // WardrobeInstance
  #pragma pack(pop)
  static check_size<sizeof(WardrobeInstance), 40 + sizeof(::GlobalNamespace::HeadModel*)> __GlobalNamespace_WardrobeInstanceSizeCheck;
  static_assert(sizeof(WardrobeInstance) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WardrobeInstance::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WardrobeInstance::*)()>(&GlobalNamespace::WardrobeInstance::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WardrobeInstance*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WardrobeInstance::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WardrobeInstance::*)()>(&GlobalNamespace::WardrobeInstance::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WardrobeInstance*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WardrobeInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
