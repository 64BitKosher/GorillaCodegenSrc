// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StageMicrophone
  class StageMicrophone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StageMicrophone);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StageMicrophone*, "", "StageMicrophone");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: StageMicrophone
  // [TokenAttribute] Offset: FFFFFFFF
  class StageMicrophone : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single PickupRadius
    // Size: 0x4
    // Offset: 0x20
    float PickupRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single AmplifiedSpatialBlend
    // Size: 0x4
    // Offset: 0x24
    float AmplifiedSpatialBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public StageMicrophone Instance
    static ::GlobalNamespace::StageMicrophone* _get_Instance();
    // Set static field: static public StageMicrophone Instance
    static void _set_Instance(::GlobalNamespace::StageMicrophone* value);
    // Get instance field reference: private System.Single PickupRadius
    [[deprecated("Use field access instead!")]] float& dyn_PickupRadius();
    // Get instance field reference: private System.Single AmplifiedSpatialBlend
    [[deprecated("Use field access instead!")]] float& dyn_AmplifiedSpatialBlend();
    // private System.Void Awake()
    // Offset: 0x27300F0
    void Awake();
    // public System.Boolean IsPlayerAmplified(VRRig player)
    // Offset: 0x2730148
    bool IsPlayerAmplified(::GlobalNamespace::VRRig* player);
    // public System.Single GetPlayerSpatialBlend(VRRig player)
    // Offset: 0x27301B4
    float GetPlayerSpatialBlend(::GlobalNamespace::VRRig* player);
    // public System.Void .ctor()
    // Offset: 0x27301DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StageMicrophone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StageMicrophone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StageMicrophone*, creationType>()));
    }
  }; // StageMicrophone
  #pragma pack(pop)
  static check_size<sizeof(StageMicrophone), 36 + sizeof(float)> __GlobalNamespace_StageMicrophoneSizeCheck;
  static_assert(sizeof(StageMicrophone) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StageMicrophone::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StageMicrophone::*)()>(&GlobalNamespace::StageMicrophone::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StageMicrophone*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StageMicrophone::IsPlayerAmplified
// Il2CppName: IsPlayerAmplified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StageMicrophone::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::StageMicrophone::IsPlayerAmplified)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StageMicrophone*), "IsPlayerAmplified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StageMicrophone::GetPlayerSpatialBlend
// Il2CppName: GetPlayerSpatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::StageMicrophone::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::StageMicrophone::GetPlayerSpatialBlend)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StageMicrophone*), "GetPlayerSpatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StageMicrophone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
