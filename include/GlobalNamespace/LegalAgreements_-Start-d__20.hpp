// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LegalAgreements
#include "GlobalNamespace/LegalAgreements.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder
#include "System/Runtime/CompilerServices/AsyncVoidMethodBuilder.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter
#include "System/Runtime/CompilerServices/YieldAwaitable_YieldAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter`1
#include "System/Runtime/CompilerServices/TaskAwaiter_1.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LegalAgreementTextAsset
  class LegalAgreementTextAsset;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegalAgreements::$Start$d__20, "", "LegalAgreements/<Start>d__20");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: LegalAgreements/<Start>d__20
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct LegalAgreements::$Start$d__20/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
    public:
    public:
    // public System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    // Size: 0x20
    // Offset: 0x8
    ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::AsyncVoidMethodBuilder) == 0x20);
    // public LegalAgreements <>4__this
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::LegalAgreements* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LegalAgreements*) == 0x8);
    // private System.Boolean <versionMismatch>5__2
    // Size: 0x1
    // Offset: 0x30
    bool $versionMismatch$5__2;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> <agreementResults>5__3
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* $agreementResults$5__3;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
    // Size: 0x1
    // Offset: 0x40
    ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter $$u__1;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter) == 0x1);
    // private System.Runtime.CompilerServices.TaskAwaiter`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> <>u__2
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*> $$u__2;
    // private LegalAgreementTextAsset[] <>7__wrap3
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*> $$7__wrap3;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>) == 0x8);
    // private System.Int32 <>7__wrap4
    // Size: 0x4
    // Offset: 0x58
    int $$7__wrap4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private LegalAgreementTextAsset <screen>5__6
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::LegalAgreementTextAsset* $screen$5__6;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LegalAgreementTextAsset*) == 0x8);
    // private System.String <latestVersion>5__7
    // Size: 0x8
    // Offset: 0x68
    ::StringW $latestVersion$5__7;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Runtime.CompilerServices.TaskAwaiter`1<System.String> <>u__3
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::System::Runtime::CompilerServices::TaskAwaiter_1<::StringW> $$u__3;
    // private System.Runtime.CompilerServices.TaskAwaiter <>u__4
    // Size: 0x8
    // Offset: 0x78
    ::System::Runtime::CompilerServices::TaskAwaiter $$u__4;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::TaskAwaiter) == 0x8);
    // private System.Runtime.CompilerServices.TaskAwaiter`1<System.Boolean> <>u__5
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::System::Runtime::CompilerServices::TaskAwaiter_1<bool> $$u__5;
    public:
    // Creating value type constructor for type: $Start$d__20
    constexpr $Start$d__20(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder_ = {}, ::GlobalNamespace::LegalAgreements* $$4__this_ = {}, bool $versionMismatch$5__2_ = {}, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* $agreementResults$5__3_ = {}, ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter $$u__1_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*> $$u__2_ = {}, ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*> $$7__wrap3_ = ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>(static_cast<void*>(nullptr)), int $$7__wrap4_ = {}, ::GlobalNamespace::LegalAgreementTextAsset* $screen$5__6_ = {}, ::StringW $latestVersion$5__7_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter_1<::StringW> $$u__3_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter $$u__4_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter_1<bool> $$u__5_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, $$4__this{$$4__this_}, $versionMismatch$5__2{$versionMismatch$5__2_}, $agreementResults$5__3{$agreementResults$5__3_}, $$u__1{$$u__1_}, $$u__2{$$u__2_}, $$7__wrap3{$$7__wrap3_}, $$7__wrap4{$$7__wrap4_}, $screen$5__6{$screen$5__6_}, $latestVersion$5__7{$latestVersion$5__7_}, $$u__3{$$u__3_}, $$u__4{$$u__4_}, $$u__5{$$u__5_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
    operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // Get instance field reference: public System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& dyn_$$t__builder();
    // Get instance field reference: public LegalAgreements <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& dyn_$$4__this();
    // Get instance field reference: private System.Boolean <versionMismatch>5__2
    [[deprecated("Use field access instead!")]] bool& dyn_$versionMismatch$5__2();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> <agreementResults>5__3
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_$agreementResults$5__3();
    // Get instance field reference: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& dyn_$$u__1();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> <>u__2
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>& dyn_$$u__2();
    // Get instance field reference: private LegalAgreementTextAsset[] <>7__wrap3
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& dyn_$$7__wrap3();
    // Get instance field reference: private System.Int32 <>7__wrap4
    [[deprecated("Use field access instead!")]] int& dyn_$$7__wrap4();
    // Get instance field reference: private LegalAgreementTextAsset <screen>5__6
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementTextAsset*& dyn_$screen$5__6();
    // Get instance field reference: private System.String <latestVersion>5__7
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$latestVersion$5__7();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter`1<System.String> <>u__3
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::StringW>& dyn_$$u__3();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter <>u__4
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& dyn_$$u__4();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Boolean> <>u__5
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<bool>& dyn_$$u__5();
    // private System.Void MoveNext()
    // Offset: 0x2754858
    void MoveNext();
    // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    // Offset: 0x2755940
    void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine);
  }; // LegalAgreements/<Start>d__20
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$Start$d__20::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$Start$d__20::*)()>(&GlobalNamespace::LegalAgreements::$Start$d__20::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$Start$d__20), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegalAgreements::$Start$d__20::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegalAgreements::$Start$d__20::*)(::System::Runtime::CompilerServices::IAsyncStateMachine*)>(&GlobalNamespace::LegalAgreements::$Start$d__20::SetStateMachine)> {
  static const MethodInfo* get() {
    static auto* stateMachine = &::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "IAsyncStateMachine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegalAgreements::$Start$d__20), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateMachine});
  }
};
