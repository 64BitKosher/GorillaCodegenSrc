// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VacuumHoldable
  class VacuumHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VacuumHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VacuumHoldable*, "", "VacuumHoldable");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: VacuumHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class VacuumHoldable : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::VacuumHoldable::VacuumState
    struct VacuumState;
    public:
    // public UnityEngine.ParticleSystem particleFX
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::ParticleSystem* particleFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single activationVibrationStartStrength
    // Size: 0x4
    // Offset: 0x2E0
    float activationVibrationStartStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single activationVibrationStartDuration
    // Size: 0x4
    // Offset: 0x2E4
    float activationVibrationStartDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single activationVibrationLoopStrength
    // Size: 0x4
    // Offset: 0x2E8
    float activationVibrationLoopStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single activationStartTime
    // Size: 0x4
    // Offset: 0x2EC
    float activationStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasAudioSource
    // Size: 0x1
    // Offset: 0x2F0
    bool hasAudioSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem particleFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleFX();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single activationVibrationStartStrength
    [[deprecated("Use field access instead!")]] float& dyn_activationVibrationStartStrength();
    // Get instance field reference: private System.Single activationVibrationStartDuration
    [[deprecated("Use field access instead!")]] float& dyn_activationVibrationStartDuration();
    // Get instance field reference: private System.Single activationVibrationLoopStrength
    [[deprecated("Use field access instead!")]] float& dyn_activationVibrationLoopStrength();
    // Get instance field reference: private System.Single activationStartTime
    [[deprecated("Use field access instead!")]] float& dyn_activationStartTime();
    // Get instance field reference: private System.Boolean hasAudioSource
    [[deprecated("Use field access instead!")]] bool& dyn_hasAudioSource();
    // private System.Void InitToDefault()
    // Offset: 0x26A20D8
    void InitToDefault();
    // public override System.Void OnSpawn()
    // Offset: 0x26A1F78
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public override System.Void OnEnable()
    // Offset: 0x26A1F98
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26A2060
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Void ResetToDefaultState()
    // Offset: 0x26A2148
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::ResetToDefaultState()
    void ResetToDefaultState();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x26A2164
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public override System.Void OnActivate()
    // Offset: 0x26A2368
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public override System.Void OnDeactivate()
    // Offset: 0x26A2414
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDeactivate()
    void OnDeactivate();
    // public System.Void .ctor()
    // Offset: 0x26A2434
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VacuumHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VacuumHoldable*, creationType>()));
    }
  }; // VacuumHoldable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::InitToDefault
// Il2CppName: InitToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::InitToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "InitToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VacuumHoldable::*)()>(&GlobalNamespace::VacuumHoldable::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VacuumHoldable*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VacuumHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
