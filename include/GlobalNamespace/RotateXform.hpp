// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RotateXform
  class RotateXform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RotateXform);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotateXform*, "", "RotateXform");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: RotateXform
  // [TokenAttribute] Offset: FFFFFFFF
  class RotateXform : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::RotateXform::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RotateXform/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RotateXform/Mode Local
      static constexpr const int Local = 0;
      // Get static field: static public RotateXform/Mode Local
      static ::GlobalNamespace::RotateXform::Mode _get_Local();
      // Set static field: static public RotateXform/Mode Local
      static void _set_Local(::GlobalNamespace::RotateXform::Mode value);
      // static field const value: static public RotateXform/Mode World
      static constexpr const int World = 1;
      // Get static field: static public RotateXform/Mode World
      static ::GlobalNamespace::RotateXform::Mode _get_World();
      // Set static field: static public RotateXform/Mode World
      static void _set_World(::GlobalNamespace::RotateXform::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RotateXform/Mode
    #pragma pack(pop)
    static check_size<sizeof(RotateXform::Mode), 0 + sizeof(int)> __GlobalNamespace_RotateXform_ModeSizeCheck;
    static_assert(sizeof(RotateXform::Mode) == 0x4);
    public:
    // public UnityEngine.Transform xform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* xform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 speed
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 speed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public RotateXform/Mode mode
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::RotateXform::Mode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RotateXform::Mode) == 0x4);
    // public System.Single speedFactor
    // Size: 0x4
    // Offset: 0x38
    float speedFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform xform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_xform();
    // Get instance field reference: public UnityEngine.Vector3 speed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_speed();
    // Get instance field reference: public RotateXform/Mode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RotateXform::Mode& dyn_mode();
    // Get instance field reference: public System.Single speedFactor
    [[deprecated("Use field access instead!")]] float& dyn_speedFactor();
    // private System.Void Update()
    // Offset: 0x2694B74
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2694C88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotateXform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateXform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotateXform*, creationType>()));
    }
  }; // RotateXform
  #pragma pack(pop)
  static check_size<sizeof(RotateXform), 56 + sizeof(float)> __GlobalNamespace_RotateXformSizeCheck;
  static_assert(sizeof(RotateXform) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotateXform::Mode, "", "RotateXform/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RotateXform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotateXform::*)()>(&GlobalNamespace::RotateXform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotateXform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotateXform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
