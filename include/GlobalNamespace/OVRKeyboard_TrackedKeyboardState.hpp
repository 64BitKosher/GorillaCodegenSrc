// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRKeyboard
#include "GlobalNamespace/OVRKeyboard.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRKeyboard::TrackedKeyboardState, "", "OVRKeyboard/TrackedKeyboardState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRKeyboard/TrackedKeyboardState
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRKeyboard::TrackedKeyboardState/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean isPositionValid
    // Size: 0x1
    // Offset: 0x0
    bool isPositionValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isPositionTracked
    // Size: 0x1
    // Offset: 0x1
    bool isPositionTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isOrientationValid
    // Size: 0x1
    // Offset: 0x2
    bool isOrientationValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isOrientationTracked
    // Size: 0x1
    // Offset: 0x3
    bool isOrientationTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x4
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Double timeInSeconds
    // Size: 0x8
    // Offset: 0x20
    double timeInSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: TrackedKeyboardState
    constexpr TrackedKeyboardState(bool isPositionValid_ = {}, bool isPositionTracked_ = {}, bool isOrientationValid_ = {}, bool isOrientationTracked_ = {}, ::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Quaternion rotation_ = {}, double timeInSeconds_ = {}) noexcept : isPositionValid{isPositionValid_}, isPositionTracked{isPositionTracked_}, isOrientationValid{isOrientationValid_}, isOrientationTracked{isOrientationTracked_}, position{position_}, rotation{rotation_}, timeInSeconds{timeInSeconds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean isPositionValid
    [[deprecated("Use field access instead!")]] bool& dyn_isPositionValid();
    // Get instance field reference: public System.Boolean isPositionTracked
    [[deprecated("Use field access instead!")]] bool& dyn_isPositionTracked();
    // Get instance field reference: public System.Boolean isOrientationValid
    [[deprecated("Use field access instead!")]] bool& dyn_isOrientationValid();
    // Get instance field reference: public System.Boolean isOrientationTracked
    [[deprecated("Use field access instead!")]] bool& dyn_isOrientationTracked();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public System.Double timeInSeconds
    [[deprecated("Use field access instead!")]] double& dyn_timeInSeconds();
  }; // OVRKeyboard/TrackedKeyboardState
  #pragma pack(pop)
  static check_size<sizeof(OVRKeyboard::TrackedKeyboardState), 32 + sizeof(double)> __GlobalNamespace_OVRKeyboard_TrackedKeyboardStateSizeCheck;
  static_assert(sizeof(OVRKeyboard::TrackedKeyboardState) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
