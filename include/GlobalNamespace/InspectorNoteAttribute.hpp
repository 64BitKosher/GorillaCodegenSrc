// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InspectorNoteAttribute
  class InspectorNoteAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InspectorNoteAttribute);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InspectorNoteAttribute*, "", "InspectorNoteAttribute");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: InspectorNoteAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class InspectorNoteAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // public readonly System.String header
    // Size: 0x8
    // Offset: 0x18
    ::StringW header;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String message
    // Size: 0x8
    // Offset: 0x20
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public readonly System.String header
    [[deprecated("Use field access instead!")]] ::StringW& dyn_header();
    // Get instance field reference: public readonly System.String message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    // public System.Void .ctor(System.String header, System.String message)
    // Offset: 0x4767C70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InspectorNoteAttribute* New_ctor(::StringW header, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InspectorNoteAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InspectorNoteAttribute*, creationType>(header, message)));
    }
  }; // InspectorNoteAttribute
  #pragma pack(pop)
  static check_size<sizeof(InspectorNoteAttribute), 32 + sizeof(::StringW)> __GlobalNamespace_InspectorNoteAttributeSizeCheck;
  static_assert(sizeof(InspectorNoteAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InspectorNoteAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
