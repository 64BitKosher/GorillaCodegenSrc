// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: OVRTelemetry
#include "GlobalNamespace/OVRTelemetry.hpp"
// Including type: OVRPlugin/Qpl/ResultType
#include "GlobalNamespace/OVRPlugin_Qpl_ResultType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRTelemetryMarkerState because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTelemetryMarker
  struct OVRTelemetryMarker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTelemetryMarker, "", "OVRTelemetryMarker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTelemetryMarker
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRTelemetryMarker/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState
    struct OVRTelemetryMarkerState;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRTelemetryMarker/OVRTelemetryMarkerState
    // [TokenAttribute] Offset: FFFFFFFF
    struct OVRTelemetryMarkerState/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Boolean <Sent>k__BackingField
      // Size: 0x1
      // Offset: 0x0
      bool Sent;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: Sent and: Result
      char __padding0[0x1] = {};
      // private OVRPlugin/Qpl/ResultType <Result>k__BackingField
      // Size: 0x2
      // Offset: 0x2
      ::GlobalNamespace::OVRPlugin::Qpl::ResultType Result;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Qpl::ResultType) == 0x2);
      public:
      // Creating value type constructor for type: OVRTelemetryMarkerState
      constexpr OVRTelemetryMarkerState(bool Sent_ = {}, ::GlobalNamespace::OVRPlugin::Qpl::ResultType Result_ = {}) noexcept : Sent{Sent_}, Result{Result_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Boolean <Sent>k__BackingField
      [[deprecated("Use field access instead!")]] bool& dyn_$Sent$k__BackingField();
      // Get instance field reference: private OVRPlugin/Qpl/ResultType <Result>k__BackingField
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Qpl::ResultType& dyn_$Result$k__BackingField();
      // public System.Boolean get_Sent()
      // Offset: 0x492FAE8
      bool get_Sent();
      // public System.Void set_Sent(System.Boolean value)
      // Offset: 0x492FAF0
      void set_Sent(bool value);
      // public OVRPlugin/Qpl/ResultType get_Result()
      // Offset: 0x492FAFC
      ::GlobalNamespace::OVRPlugin::Qpl::ResultType get_Result();
      // public System.Void set_Result(OVRPlugin/Qpl/ResultType value)
      // Offset: 0x492FB04
      void set_Result(::GlobalNamespace::OVRPlugin::Qpl::ResultType value);
      // public System.Void .ctor(System.Boolean sent, OVRPlugin/Qpl/ResultType result)
      // Offset: 0x492F9A8
      // ABORTED: conflicts with another method.  OVRTelemetryMarkerState(bool sent, ::GlobalNamespace::OVRPlugin::Qpl::ResultType result);
    }; // OVRTelemetryMarker/OVRTelemetryMarkerState
    #pragma pack(pop)
    static check_size<sizeof(OVRTelemetryMarker::OVRTelemetryMarkerState), 2 + sizeof(::GlobalNamespace::OVRPlugin::Qpl::ResultType)> __GlobalNamespace_OVRTelemetryMarker_OVRTelemetryMarkerStateSizeCheck;
    static_assert(sizeof(OVRTelemetryMarker::OVRTelemetryMarkerState) == 0x4);
    public:
    // private OVRTelemetryMarker/OVRTelemetryMarkerState <State>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState State;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState) == 0x4);
    // private readonly System.Int32 <MarkerId>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int MarkerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <InstanceKey>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int InstanceKey;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: InstanceKey and: client
    char __padding2[0x4] = {};
    // private readonly OVRTelemetry/TelemetryClient _client
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::OVRTelemetry::TelemetryClient* client;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTelemetry::TelemetryClient*) == 0x8);
    public:
    // Creating value type constructor for type: OVRTelemetryMarker
    constexpr OVRTelemetryMarker(::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState State_ = {}, int MarkerId_ = {}, int InstanceKey_ = {}, ::GlobalNamespace::OVRTelemetry::TelemetryClient* client_ = {}) noexcept : State{State_}, MarkerId{MarkerId_}, InstanceKey{InstanceKey_}, client{client_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private OVRTelemetryMarker/OVRTelemetryMarkerState <State>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState& dyn_$State$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <MarkerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MarkerId$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <InstanceKey>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$InstanceKey$k__BackingField();
    // Get instance field reference: private readonly OVRTelemetry/TelemetryClient _client
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTelemetry::TelemetryClient*& dyn__client();
    // private OVRTelemetryMarker/OVRTelemetryMarkerState get_State()
    // Offset: 0x492F908
    ::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState get_State();
    // private System.Void set_State(OVRTelemetryMarker/OVRTelemetryMarkerState value)
    // Offset: 0x492F910
    void set_State(::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState value);
    // public System.Boolean get_Sent()
    // Offset: 0x492F918
    bool get_Sent();
    // public OVRPlugin/Qpl/ResultType get_Result()
    // Offset: 0x492F928
    ::GlobalNamespace::OVRPlugin::Qpl::ResultType get_Result();
    // public System.Int32 get_MarkerId()
    // Offset: 0x492F930
    int get_MarkerId();
    // public System.Int32 get_InstanceKey()
    // Offset: 0x492F938
    int get_InstanceKey();
    // public System.Void .ctor(System.Int32 markerId, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F234
    OVRTelemetryMarker(int markerId, int instanceKey, int64_t timestampMs);
    // System.Void .ctor(OVRTelemetry/TelemetryClient client, System.Int32 markerId, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F940
    OVRTelemetryMarker(::GlobalNamespace::OVRTelemetry::TelemetryClient* client, int markerId, int instanceKey, int64_t timestampMs);
    // public OVRTelemetryMarker SetResult(OVRPlugin/Qpl/ResultType result)
    // Offset: 0x492F368
    ::GlobalNamespace::OVRTelemetryMarker SetResult(::GlobalNamespace::OVRPlugin::Qpl::ResultType result);
    // public OVRTelemetryMarker AddAnnotation(System.String annotationKey, System.String annotationValue)
    // Offset: 0x492F598
    ::GlobalNamespace::OVRTelemetryMarker AddAnnotation(::StringW annotationKey, ::StringW annotationValue);
    // public OVRTelemetryMarker AddAnnotationIfNotNullOrEmpty(System.String annotationKey, System.String annotationValue)
    // Offset: 0x492F9B8
    ::GlobalNamespace::OVRTelemetryMarker AddAnnotationIfNotNullOrEmpty(::StringW annotationKey, ::StringW annotationValue);
    // public OVRTelemetryMarker Send()
    // Offset: 0x492F390
    ::GlobalNamespace::OVRTelemetryMarker Send();
    // public OVRTelemetryMarker SendIf(System.Boolean condition)
    // Offset: 0x492FA2C
    ::GlobalNamespace::OVRTelemetryMarker SendIf(bool condition);
    // public OVRTelemetryMarker AddPoint(OVRTelemetry/MarkerPoint point)
    // Offset: 0x492FA74
    ::GlobalNamespace::OVRTelemetryMarker AddPoint(::GlobalNamespace::OVRTelemetry::MarkerPoint point);
    // public System.Void Dispose()
    // Offset: 0x492FAC4
    void Dispose();
  }; // OVRTelemetryMarker
  #pragma pack(pop)
  static check_size<sizeof(OVRTelemetryMarker), 16 + sizeof(::GlobalNamespace::OVRTelemetry::TelemetryClient*)> __GlobalNamespace_OVRTelemetryMarkerSizeCheck;
  static_assert(sizeof(OVRTelemetryMarker) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState, "", "OVRTelemetryMarker/OVRTelemetryMarkerState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetryMarker::*)(::GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarkerState)>(&GlobalNamespace::OVRTelemetryMarker::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRTelemetryMarker/OVRTelemetryMarkerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::get_Sent
// Il2CppName: get_Sent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::get_Sent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "get_Sent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::get_Result
// Il2CppName: get_Result
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Qpl::ResultType (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::get_Result)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "get_Result", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::get_MarkerId
// Il2CppName: get_MarkerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::get_MarkerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "get_MarkerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::get_InstanceKey
// Il2CppName: get_InstanceKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::get_InstanceKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "get_InstanceKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarker
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::OVRTelemetryMarker
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::SetResult
// Il2CppName: SetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)(::GlobalNamespace::OVRPlugin::Qpl::ResultType)>(&GlobalNamespace::OVRTelemetryMarker::SetResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Qpl/ResultType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "SetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::AddAnnotation
// Il2CppName: AddAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)(::StringW, ::StringW)>(&GlobalNamespace::OVRTelemetryMarker::AddAnnotation)> {
  static const MethodInfo* get() {
    static auto* annotationKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* annotationValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "AddAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotationKey, annotationValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::AddAnnotationIfNotNullOrEmpty
// Il2CppName: AddAnnotationIfNotNullOrEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)(::StringW, ::StringW)>(&GlobalNamespace::OVRTelemetryMarker::AddAnnotationIfNotNullOrEmpty)> {
  static const MethodInfo* get() {
    static auto* annotationKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* annotationValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "AddAnnotationIfNotNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotationKey, annotationValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::SendIf
// Il2CppName: SendIf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)(bool)>(&GlobalNamespace::OVRTelemetryMarker::SendIf)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "SendIf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::AddPoint
// Il2CppName: AddPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTelemetryMarker (GlobalNamespace::OVRTelemetryMarker::*)(::GlobalNamespace::OVRTelemetry::MarkerPoint)>(&GlobalNamespace::OVRTelemetryMarker::AddPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("", "OVRTelemetry/MarkerPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "AddPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetryMarker::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetryMarker::*)()>(&GlobalNamespace::OVRTelemetryMarker::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetryMarker), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
