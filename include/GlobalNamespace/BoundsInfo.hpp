// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BoundsInfo
  struct BoundsInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BoundsInfo, "", "BoundsInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoundsInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoundsInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 size
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 scale
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single inflate
    // Size: 0x4
    // Offset: 0x34
    float inflate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 centerAA
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 centerAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 sizeAA
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 sizeAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 scaleAA
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 scaleAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single inflateAA
    // Size: 0x4
    // Offset: 0x5C
    float inflateAA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: BoundsInfo
    constexpr BoundsInfo(::UnityEngine::Vector3 center_ = {}, ::UnityEngine::Vector3 size_ = {}, ::UnityEngine::Quaternion rotation_ = {}, ::UnityEngine::Vector3 scale_ = {}, float inflate_ = {}, ::UnityEngine::Vector3 centerAA_ = {}, ::UnityEngine::Vector3 sizeAA_ = {}, ::UnityEngine::Vector3 scaleAA_ = {}, float inflateAA_ = {}) noexcept : center{center_}, size{size_}, rotation{rotation_}, scale{scale_}, inflate{inflate_}, centerAA{centerAA_}, sizeAA{sizeAA_}, scaleAA{scaleAA_}, inflateAA{inflateAA_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector3 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_size();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scale();
    // Get instance field reference: public System.Single inflate
    [[deprecated("Use field access instead!")]] float& dyn_inflate();
    // Get instance field reference: public UnityEngine.Vector3 centerAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerAA();
    // Get instance field reference: public UnityEngine.Vector3 sizeAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_sizeAA();
    // Get instance field reference: public UnityEngine.Vector3 scaleAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scaleAA();
    // Get instance field reference: public System.Single inflateAA
    [[deprecated("Use field access instead!")]] float& dyn_inflateAA();
    // public UnityEngine.Vector3 get_sizeComputed()
    // Offset: 0x27A707C
    ::UnityEngine::Vector3 get_sizeComputed();
    // public UnityEngine.Vector3 get_sizeComputedAA()
    // Offset: 0x27A70A4
    ::UnityEngine::Vector3 get_sizeComputedAA();
    // static public BoundsInfo ComputeBounds(UnityEngine.Vector3[] vertices)
    // Offset: 0x27A6D00
    static ::GlobalNamespace::BoundsInfo ComputeBounds(::ArrayW<::UnityEngine::Vector3> vertices);
    // static public UnityEngine.BoxCollider CreateBoxCollider(BoundsInfo bounds)
    // Offset: 0x27A70CC
    static ::UnityEngine::BoxCollider* CreateBoxCollider(::GlobalNamespace::BoundsInfo bounds);
    // static public UnityEngine.BoxCollider CreateBoxColliderAA(BoundsInfo bounds)
    // Offset: 0x27A7328
    static ::UnityEngine::BoxCollider* CreateBoxColliderAA(::GlobalNamespace::BoundsInfo bounds);
  }; // BoundsInfo
  #pragma pack(pop)
  static check_size<sizeof(BoundsInfo), 92 + sizeof(float)> __GlobalNamespace_BoundsInfoSizeCheck;
  static_assert(sizeof(BoundsInfo) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BoundsInfo::get_sizeComputed
// Il2CppName: get_sizeComputed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BoundsInfo::*)()>(&GlobalNamespace::BoundsInfo::get_sizeComputed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsInfo), "get_sizeComputed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsInfo::get_sizeComputedAA
// Il2CppName: get_sizeComputedAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BoundsInfo::*)()>(&GlobalNamespace::BoundsInfo::get_sizeComputedAA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsInfo), "get_sizeComputedAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsInfo::ComputeBounds
// Il2CppName: ComputeBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BoundsInfo (*)(::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::BoundsInfo::ComputeBounds)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsInfo), "ComputeBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsInfo::CreateBoxCollider
// Il2CppName: CreateBoxCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoxCollider* (*)(::GlobalNamespace::BoundsInfo)>(&GlobalNamespace::BoundsInfo::CreateBoxCollider)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("", "BoundsInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsInfo), "CreateBoxCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsInfo::CreateBoxColliderAA
// Il2CppName: CreateBoxColliderAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoxCollider* (*)(::GlobalNamespace::BoundsInfo)>(&GlobalNamespace::BoundsInfo::CreateBoxColliderAA)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("", "BoundsInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsInfo), "CreateBoxColliderAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
