// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.RpcTarget
#include "Photon/Pun/RpcTarget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TappableManager
  class TappableManager;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Tappable
  class Tappable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Tappable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Tappable*, "", "Tappable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Tappable
  // [TokenAttribute] Offset: FFFFFFFF
  class Tappable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 tappableId
    // Size: 0x4
    // Offset: 0x20
    int tappableId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tappableId and: staticId
    char __padding0[0x4] = {};
    // public System.String staticId
    // Size: 0x8
    // Offset: 0x28
    ::StringW staticId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean useStaticId
    // Size: 0x1
    // Offset: 0x30
    bool useStaticId;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useStaticId and: manager
    char __padding2[0x7] = {};
    // public TappableManager manager
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::TappableManager* manager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TappableManager*) == 0x8);
    // public Photon.Pun.RpcTarget rpcTarget
    // Size: 0x4
    // Offset: 0x40
    ::Photon::Pun::RpcTarget rpcTarget;
    // Field size check
    static_assert(sizeof(::Photon::Pun::RpcTarget) == 0x4);
    public:
    // Get instance field reference: public System.Int32 tappableId
    [[deprecated("Use field access instead!")]] int& dyn_tappableId();
    // Get instance field reference: public System.String staticId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_staticId();
    // Get instance field reference: public System.Boolean useStaticId
    [[deprecated("Use field access instead!")]] bool& dyn_useStaticId();
    // Get instance field reference: public TappableManager manager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TappableManager*& dyn_manager();
    // Get instance field reference: public Photon.Pun.RpcTarget rpcTarget
    [[deprecated("Use field access instead!")]] ::Photon::Pun::RpcTarget& dyn_rpcTarget();
    // public System.Void Validate()
    // Offset: 0x272D178
    void Validate();
    // protected System.Void OnEnable()
    // Offset: 0x272D4E0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x272D640
    void OnDisable();
    // public System.Void OnTap(System.Single tapStrength, System.Single tapTime)
    // Offset: 0x272D78C
    void OnTap(float tapStrength, float tapTime);
    // public System.Void OnTapLocal(System.Single tapStrength, System.Single tapTime, Photon.Pun.PhotonMessageInfo sender)
    // Offset: 0x272D97C
    void OnTapLocal(float tapStrength, float tapTime, ::Photon::Pun::PhotonMessageInfo sender);
    // private System.Void EdRecalculateId()
    // Offset: 0x272D980
    void EdRecalculateId();
    // private System.Void CalculateId(System.Boolean force)
    // Offset: 0x272D180
    void CalculateId(bool force);
    // private System.Void OnValidate()
    // Offset: 0x272D988
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x272D990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tappable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Tappable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tappable*, creationType>()));
    }
  }; // Tappable
  #pragma pack(pop)
  static check_size<sizeof(Tappable), 64 + sizeof(::Photon::Pun::RpcTarget)> __GlobalNamespace_TappableSizeCheck;
  static_assert(sizeof(Tappable) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Tappable::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)()>(&GlobalNamespace::Tappable::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)()>(&GlobalNamespace::Tappable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)()>(&GlobalNamespace::Tappable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::OnTap
// Il2CppName: OnTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)(float, float)>(&GlobalNamespace::Tappable::OnTap)> {
  static const MethodInfo* get() {
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tapTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "OnTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tapStrength, tapTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::OnTapLocal
// Il2CppName: OnTapLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)(float, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::Tappable::OnTapLocal)> {
  static const MethodInfo* get() {
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tapTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "OnTapLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tapStrength, tapTime, sender});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::EdRecalculateId
// Il2CppName: EdRecalculateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)()>(&GlobalNamespace::Tappable::EdRecalculateId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "EdRecalculateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::CalculateId
// Il2CppName: CalculateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)(bool)>(&GlobalNamespace::Tappable::CalculateId)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "CalculateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Tappable::*)()>(&GlobalNamespace::Tappable::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Tappable*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Tappable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
