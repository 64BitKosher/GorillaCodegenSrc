// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRSceneVolumeMeshFilter
#include "GlobalNamespace/OVRSceneVolumeMeshFilter.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSceneVolumeMeshFilter::BakeMeshJob, "", "OVRSceneVolumeMeshFilter/BakeMeshJob");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRSceneVolumeMeshFilter/BakeMeshJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRSceneVolumeMeshFilter::BakeMeshJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public System.Int32 MeshID
    // Size: 0x4
    // Offset: 0x0
    int MeshID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean Convex
    // Size: 0x1
    // Offset: 0x4
    bool Convex;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: BakeMeshJob
    constexpr BakeMeshJob(int MeshID_ = {}, bool Convex_ = {}) noexcept : MeshID{MeshID_}, Convex{Convex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public System.Int32 MeshID
    [[deprecated("Use field access instead!")]] int& dyn_MeshID();
    // Get instance field reference: public System.Boolean Convex
    [[deprecated("Use field access instead!")]] bool& dyn_Convex();
    // public System.Void Execute()
    // Offset: 0x4927A48
    void Execute();
  }; // OVRSceneVolumeMeshFilter/BakeMeshJob
  #pragma pack(pop)
  static check_size<sizeof(OVRSceneVolumeMeshFilter::BakeMeshJob), 4 + sizeof(bool)> __GlobalNamespace_OVRSceneVolumeMeshFilter_BakeMeshJobSizeCheck;
  static_assert(sizeof(OVRSceneVolumeMeshFilter::BakeMeshJob) == 0x5);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSceneVolumeMeshFilter::BakeMeshJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSceneVolumeMeshFilter::BakeMeshJob::*)()>(&GlobalNamespace::OVRSceneVolumeMeshFilter::BakeMeshJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSceneVolumeMeshFilter::BakeMeshJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
