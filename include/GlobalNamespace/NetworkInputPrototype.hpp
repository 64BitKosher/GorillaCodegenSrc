// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkInput
#include "Fusion/INetworkInput.hpp"
// Including type: Fusion.NetworkButtons
#include "Fusion/NetworkButtons.hpp"
// Including type: Fusion.Angle
#include "Fusion/Angle.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkInputPrototype
  struct NetworkInputPrototype;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkInputPrototype, "", "NetworkInputPrototype");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: NetworkInputPrototype
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkInputWeavedAttribute] Offset: FFFFFFFF
  struct NetworkInputPrototype/*, public ::System::ValueType, public ::Fusion::INetworkInput*/ {
    public:
    public:
    // public Fusion.NetworkButtons Buttons
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::NetworkButtons Buttons;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkButtons) == 0x4);
    // public System.Byte Weapon
    // Size: 0x1
    // Offset: 0x4
    uint8_t Weapon;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Weapon and: Yaw
    char __padding1[0x3] = {};
    // public Fusion.Angle Yaw
    // Size: 0x4
    // Offset: 0x8
    ::Fusion::Angle Yaw;
    // Field size check
    static_assert(sizeof(::Fusion::Angle) == 0x4);
    // public Fusion.Angle Pitch
    // Size: 0x4
    // Offset: 0xC
    ::Fusion::Angle Pitch;
    // Field size check
    static_assert(sizeof(::Fusion::Angle) == 0x4);
    public:
    // Creating value type constructor for type: NetworkInputPrototype
    constexpr NetworkInputPrototype(::Fusion::NetworkButtons Buttons_ = {}, uint8_t Weapon_ = {}, ::Fusion::Angle Yaw_ = {}, ::Fusion::Angle Pitch_ = {}) noexcept : Buttons{Buttons_}, Weapon{Weapon_}, Yaw{Yaw_}, Pitch{Pitch_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkInput
    operator ::Fusion::INetworkInput() noexcept {
      return *reinterpret_cast<::Fusion::INetworkInput*>(this);
    }
    // static field const value: static public System.Int32 BUTTON_USE
    static constexpr const int BUTTON_USE = 0;
    // Get static field: static public System.Int32 BUTTON_USE
    static int _get_BUTTON_USE();
    // Set static field: static public System.Int32 BUTTON_USE
    static void _set_BUTTON_USE(int value);
    // static field const value: static public System.Int32 BUTTON_FIRE
    static constexpr const int BUTTON_FIRE = 1;
    // Get static field: static public System.Int32 BUTTON_FIRE
    static int _get_BUTTON_FIRE();
    // Set static field: static public System.Int32 BUTTON_FIRE
    static void _set_BUTTON_FIRE(int value);
    // static field const value: static public System.Int32 BUTTON_FIRE_ALT
    static constexpr const int BUTTON_FIRE_ALT = 2;
    // Get static field: static public System.Int32 BUTTON_FIRE_ALT
    static int _get_BUTTON_FIRE_ALT();
    // Set static field: static public System.Int32 BUTTON_FIRE_ALT
    static void _set_BUTTON_FIRE_ALT(int value);
    // static field const value: static public System.Int32 BUTTON_FORWARD
    static constexpr const int BUTTON_FORWARD = 3;
    // Get static field: static public System.Int32 BUTTON_FORWARD
    static int _get_BUTTON_FORWARD();
    // Set static field: static public System.Int32 BUTTON_FORWARD
    static void _set_BUTTON_FORWARD(int value);
    // static field const value: static public System.Int32 BUTTON_BACKWARD
    static constexpr const int BUTTON_BACKWARD = 4;
    // Get static field: static public System.Int32 BUTTON_BACKWARD
    static int _get_BUTTON_BACKWARD();
    // Set static field: static public System.Int32 BUTTON_BACKWARD
    static void _set_BUTTON_BACKWARD(int value);
    // static field const value: static public System.Int32 BUTTON_LEFT
    static constexpr const int BUTTON_LEFT = 5;
    // Get static field: static public System.Int32 BUTTON_LEFT
    static int _get_BUTTON_LEFT();
    // Set static field: static public System.Int32 BUTTON_LEFT
    static void _set_BUTTON_LEFT(int value);
    // static field const value: static public System.Int32 BUTTON_RIGHT
    static constexpr const int BUTTON_RIGHT = 6;
    // Get static field: static public System.Int32 BUTTON_RIGHT
    static int _get_BUTTON_RIGHT();
    // Set static field: static public System.Int32 BUTTON_RIGHT
    static void _set_BUTTON_RIGHT(int value);
    // static field const value: static public System.Int32 BUTTON_JUMP
    static constexpr const int BUTTON_JUMP = 7;
    // Get static field: static public System.Int32 BUTTON_JUMP
    static int _get_BUTTON_JUMP();
    // Set static field: static public System.Int32 BUTTON_JUMP
    static void _set_BUTTON_JUMP(int value);
    // static field const value: static public System.Int32 BUTTON_CROUCH
    static constexpr const int BUTTON_CROUCH = 8;
    // Get static field: static public System.Int32 BUTTON_CROUCH
    static int _get_BUTTON_CROUCH();
    // Set static field: static public System.Int32 BUTTON_CROUCH
    static void _set_BUTTON_CROUCH(int value);
    // static field const value: static public System.Int32 BUTTON_WALK
    static constexpr const int BUTTON_WALK = 9;
    // Get static field: static public System.Int32 BUTTON_WALK
    static int _get_BUTTON_WALK();
    // Set static field: static public System.Int32 BUTTON_WALK
    static void _set_BUTTON_WALK(int value);
    // static field const value: static public System.Int32 BUTTON_ACTION1
    static constexpr const int BUTTON_ACTION1 = 10;
    // Get static field: static public System.Int32 BUTTON_ACTION1
    static int _get_BUTTON_ACTION1();
    // Set static field: static public System.Int32 BUTTON_ACTION1
    static void _set_BUTTON_ACTION1(int value);
    // static field const value: static public System.Int32 BUTTON_ACTION2
    static constexpr const int BUTTON_ACTION2 = 11;
    // Get static field: static public System.Int32 BUTTON_ACTION2
    static int _get_BUTTON_ACTION2();
    // Set static field: static public System.Int32 BUTTON_ACTION2
    static void _set_BUTTON_ACTION2(int value);
    // static field const value: static public System.Int32 BUTTON_ACTION3
    static constexpr const int BUTTON_ACTION3 = 12;
    // Get static field: static public System.Int32 BUTTON_ACTION3
    static int _get_BUTTON_ACTION3();
    // Set static field: static public System.Int32 BUTTON_ACTION3
    static void _set_BUTTON_ACTION3(int value);
    // static field const value: static public System.Int32 BUTTON_ACTION4
    static constexpr const int BUTTON_ACTION4 = 14;
    // Get static field: static public System.Int32 BUTTON_ACTION4
    static int _get_BUTTON_ACTION4();
    // Set static field: static public System.Int32 BUTTON_ACTION4
    static void _set_BUTTON_ACTION4(int value);
    // static field const value: static public System.Int32 BUTTON_RELOAD
    static constexpr const int BUTTON_RELOAD = 15;
    // Get static field: static public System.Int32 BUTTON_RELOAD
    static int _get_BUTTON_RELOAD();
    // Set static field: static public System.Int32 BUTTON_RELOAD
    static void _set_BUTTON_RELOAD(int value);
    // Get instance field reference: public Fusion.NetworkButtons Buttons
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkButtons& dyn_Buttons();
    // Get instance field reference: public System.Byte Weapon
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Weapon();
    // Get instance field reference: public Fusion.Angle Yaw
    [[deprecated("Use field access instead!")]] ::Fusion::Angle& dyn_Yaw();
    // Get instance field reference: public Fusion.Angle Pitch
    [[deprecated("Use field access instead!")]] ::Fusion::Angle& dyn_Pitch();
    // public System.Boolean IsUp(System.Int32 button)
    // Offset: 0x295BA6C
    bool IsUp(int button);
    // public System.Boolean IsDown(System.Int32 button)
    // Offset: 0x295B7BC
    bool IsDown(int button);
  }; // NetworkInputPrototype
  #pragma pack(pop)
  static check_size<sizeof(NetworkInputPrototype), 12 + sizeof(::Fusion::Angle)> __GlobalNamespace_NetworkInputPrototypeSizeCheck;
  static_assert(sizeof(NetworkInputPrototype) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkInputPrototype::IsUp
// Il2CppName: IsUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkInputPrototype::*)(int)>(&GlobalNamespace::NetworkInputPrototype::IsUp)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkInputPrototype), "IsUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkInputPrototype::IsDown
// Il2CppName: IsDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkInputPrototype::*)(int)>(&GlobalNamespace::NetworkInputPrototype::IsDown)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkInputPrototype), "IsDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
