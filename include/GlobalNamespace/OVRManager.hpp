// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: OVRPlugin/LayerSharpenType
#include "GlobalNamespace/OVRPlugin_LayerSharpenType.hpp"
// Including type: OVRManager/ColorSpace
#include "GlobalNamespace/OVRManager_ColorSpace.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager_TrackingOrigin.hpp"
// Including type: OVRManager/ControllerDrivenHandPosesType
#include "GlobalNamespace/OVRManager_ControllerDrivenHandPosesType.hpp"
// Including type: OVRSpace
#include "GlobalNamespace/OVRSpace.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: OVRPlugin/SpaceStorageLocation
#include "GlobalNamespace/OVRPlugin_SpaceStorageLocation.hpp"
// Including type: OVRSpatialAnchor/OperationResult
#include "GlobalNamespace/OVRSpatialAnchor.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: OVRManager/XRDevice
#include "GlobalNamespace/OVRManager_XRDevice.hpp"
// Including type: UnityEngine.DepthTextureMode
#include "UnityEngine/DepthTextureMode.hpp"
// Including type: OVRPlugin/EventDataBuffer
#include "GlobalNamespace/OVRPlugin_EventDataBuffer.hpp"
// Including type: OVRManager/PassthroughInitializationState
#include "GlobalNamespace/OVRManager_PassthroughInitializationState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
  // Forward declaring type: EventListener
  class OVRManager_EventListener;
  // Forward declaring type: OVRDisplay
  class OVRDisplay;
  // Forward declaring type: OVRTracker
  class OVRTracker;
  // Forward declaring type: OVRBoundary
  class OVRBoundary;
  // Forward declaring type: OVRRuntimeSettings
  class OVRRuntimeSettings;
  // Forward declaring type: OVRProfile
  class OVRProfile;
  // Forward declaring type: OVRMixedRealityCaptureSettings
  class OVRMixedRealityCaptureSettings;
  // Forward declaring type: Observable`1<T>
  template<typename T>
  class OVRManager_Observable_1;
  // Forward declaring type: PassthroughCapabilities
  class OVRManager_PassthroughCapabilities;
  // Forward declaring type: XrApi
  struct OVRManager_XrApi;
  // Forward declaring type: ProcessorPerformanceLevel
  struct OVRManager_ProcessorPerformanceLevel;
  // Forward declaring type: EyeTextureFormat
  struct OVRManager_EyeTextureFormat;
  // Forward declaring type: FoveatedRenderingLevel
  struct OVRManager_FoveatedRenderingLevel;
  // Forward declaring type: FixedFoveatedRenderingLevel
  struct OVRManager_FixedFoveatedRenderingLevel;
  // Forward declaring type: TiledMultiResLevel
  struct OVRManager_TiledMultiResLevel;
  // Forward declaring type: SystemHeadsetType
  struct OVRManager_SystemHeadsetType;
  // Forward declaring type: OVRPose
  struct OVRPose;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`6<T1, T2, T3, T4, T5, T6>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  class Action_6;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: WeakReference`1<T>
  template<typename T>
  class WeakReference_1;
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRDisplaySubsystem
  class XRDisplaySubsystem;
  // Forward declaring type: XRDisplaySubsystemDescriptor
  class XRDisplaySubsystemDescriptor;
  // Forward declaring type: XRInputSubsystem
  class XRInputSubsystem;
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRManager
  class OVRManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRManager*, "", "OVRManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x128
  #pragma pack(push, 1)
  // Autogenerated type: OVRManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRManager : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::OVRMixedRealityCaptureConfiguration*/ {
    public:
    public:
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> disabledCameras
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>* disabledCameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>*) == 0x8);
    // private System.Single prevTimeScale
    // Size: 0x4
    // Offset: 0x28
    float prevTimeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useRecommendedMSAALevel
    // Size: 0x1
    // Offset: 0x2C
    bool useRecommendedMSAALevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _monoscopic
    // Size: 0x1
    // Offset: 0x2D
    bool monoscopic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: monoscopic and: sharpenType
    char __padding3[0x2] = {};
    // private OVRPlugin/LayerSharpenType _sharpenType
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRPlugin::LayerSharpenType sharpenType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::LayerSharpenType) == 0x4);
    // private OVRManager/ColorSpace _colorGamut
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::OVRManager_ColorSpace colorGamut;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_ColorSpace) == 0x4);
    // public System.Boolean enableDynamicResolution
    // Size: 0x1
    // Offset: 0x38
    bool enableDynamicResolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableDynamicResolution and: minDynamicResolutionScale
    char __padding6[0x3] = {};
    // public System.Single minDynamicResolutionScale
    // Size: 0x4
    // Offset: 0x3C
    float minDynamicResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDynamicResolutionScale
    // Size: 0x4
    // Offset: 0x40
    float maxDynamicResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minRenderScale
    // Size: 0x4
    // Offset: 0x44
    float minRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxRenderScale
    // Size: 0x4
    // Offset: 0x48
    float maxRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _headPoseRelativeOffsetRotation
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 headPoseRelativeOffsetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _headPoseRelativeOffsetTranslation
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 headPoseRelativeOffsetTranslation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 profilerTcpPort
    // Size: 0x4
    // Offset: 0x64
    int profilerTcpPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean expandMixedRealityCapturePropertySheet
    // Size: 0x1
    // Offset: 0x68
    bool expandMixedRealityCapturePropertySheet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean enableMixedReality
    // Size: 0x1
    // Offset: 0x69
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: compositionMethod
    char __padding15[0x2] = {};
    // public OVRManager/CompositionMethod compositionMethod
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::OVRManager_CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CompositionMethod) == 0x4);
    // public UnityEngine.LayerMask extraHiddenLayers
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask extraVisibleLayers
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::LayerMask extraVisibleLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean dynamicCullingMask
    // Size: 0x1
    // Offset: 0x78
    bool dynamicCullingMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dynamicCullingMask and: externalCompositionBackdropColorRift
    char __padding19[0x3] = {};
    // public UnityEngine.Color externalCompositionBackdropColorRift
    // Size: 0x10
    // Offset: 0x7C
    ::UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color externalCompositionBackdropColorQuest
    // Size: 0x10
    // Offset: 0x8C
    ::UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public OVRManager/CameraDevice capturingCameraDevice
    // Size: 0x4
    // Offset: 0x9C
    ::GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CameraDevice) == 0x4);
    // public System.Boolean flipCameraFrameHorizontally
    // Size: 0x1
    // Offset: 0xA0
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipCameraFrameVertically
    // Size: 0x1
    // Offset: 0xA1
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding24[0x2] = {};
    // public System.Single handPoseStateLatency
    // Size: 0x4
    // Offset: 0xA4
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sandwichCompositionRenderLatency
    // Size: 0x4
    // Offset: 0xA8
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 sandwichCompositionBufferedFrames
    // Size: 0x4
    // Offset: 0xAC
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color chromaKeyColor
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single chromaKeySimilarity
    // Size: 0x4
    // Offset: 0xC0
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySmoothRange
    // Size: 0x4
    // Offset: 0xC4
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySpillRange
    // Size: 0x4
    // Offset: 0xC8
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0xCC
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding32[0x3] = {};
    // public OVRManager/DepthQuality depthQuality
    // Size: 0x4
    // Offset: 0xD0
    ::GlobalNamespace::OVRManager_DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_DepthQuality) == 0x4);
    // public System.Single dynamicLightingSmoothFactor
    // Size: 0x4
    // Offset: 0xD4
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dynamicLightingDepthVariationClampingValue
    // Size: 0x4
    // Offset: 0xD8
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    // Size: 0x4
    // Offset: 0xDC
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // public System.Single virtualGreenScreenTopY
    // Size: 0x4
    // Offset: 0xE0
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single virtualGreenScreenBottomY
    // Size: 0x4
    // Offset: 0xE4
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean virtualGreenScreenApplyDepthCulling
    // Size: 0x1
    // Offset: 0xE8
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding39[0x3] = {};
    // public System.Single virtualGreenScreenDepthTolerance
    // Size: 0x4
    // Offset: 0xEC
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRManager/MrcActivationMode mrcActivationMode
    // Size: 0x4
    // Offset: 0xF0
    ::GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_MrcActivationMode) == 0x4);
    // Padding between fields: mrcActivationMode and: instantiateMixedRealityCameraGameObject
    char __padding41[0x4] = {};
    // public OVRManager/InstantiateMrcCameraDelegate instantiateMixedRealityCameraGameObject
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*) == 0x8);
    // public System.Boolean launchMultimodalHandsControllersOnStartup
    // Size: 0x1
    // Offset: 0x100
    bool launchMultimodalHandsControllersOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isInsightPassthroughEnabled
    // Size: 0x1
    // Offset: 0x101
    bool isInsightPassthroughEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requestBodyTrackingPermissionOnStartup
    // Size: 0x1
    // Offset: 0x102
    bool requestBodyTrackingPermissionOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requestFaceTrackingPermissionOnStartup
    // Size: 0x1
    // Offset: 0x103
    bool requestFaceTrackingPermissionOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requestEyeTrackingPermissionOnStartup
    // Size: 0x1
    // Offset: 0x104
    bool requestEyeTrackingPermissionOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requestScenePermissionOnStartup
    // Size: 0x1
    // Offset: 0x105
    bool requestScenePermissionOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _localDimming
    // Size: 0x1
    // Offset: 0x106
    bool localDimming;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: localDimming and: trackingOriginType
    char __padding49[0x1] = {};
    // private OVRManager/TrackingOrigin _trackingOriginType
    // Size: 0x4
    // Offset: 0x108
    ::GlobalNamespace::OVRManager_TrackingOrigin trackingOriginType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_TrackingOrigin) == 0x4);
    // public System.Boolean usePositionTracking
    // Size: 0x1
    // Offset: 0x10C
    bool usePositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useRotationTracking
    // Size: 0x1
    // Offset: 0x10D
    bool useRotationTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useIPDInPositionTracking
    // Size: 0x1
    // Offset: 0x10E
    bool useIPDInPositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean resetTrackerOnLoad
    // Size: 0x1
    // Offset: 0x10F
    bool resetTrackerOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AllowRecenter
    // Size: 0x1
    // Offset: 0x110
    bool AllowRecenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LateControllerUpdate
    // Size: 0x1
    // Offset: 0x111
    bool LateControllerUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LateLatching
    // Size: 0x1
    // Offset: 0x112
    bool LateLatching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LateLatching and: readOnlyControllerDrivenHandPosesType
    char __padding57[0x1] = {};
    // private OVRManager/ControllerDrivenHandPosesType _readOnlyControllerDrivenHandPosesType
    // Size: 0x4
    // Offset: 0x114
    ::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType readOnlyControllerDrivenHandPosesType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType) == 0x4);
    // public OVRManager/ControllerDrivenHandPosesType controllerDrivenHandPosesType
    // Size: 0x4
    // Offset: 0x118
    ::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType controllerDrivenHandPosesType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType) == 0x4);
    // private System.Boolean <isSupportedPlatform>k__BackingField
    // Size: 0x1
    // Offset: 0x11C
    bool isSupportedPlatform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSupportedPlatform and: eventListeners
    char __padding60[0x3] = {};
    // private System.Collections.Generic.HashSet`1<OVRManager/EventListener> eventListeners
    // Size: 0x8
    // Offset: 0x120
    ::System::Collections::Generic::HashSet_1<::GlobalNamespace::OVRManager_EventListener*>* eventListeners;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::OVRManager_EventListener*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRMixedRealityCaptureConfiguration
    operator ::GlobalNamespace::OVRMixedRealityCaptureConfiguration() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(this);
    }
    // Get static field: static private OVRManager <instance>k__BackingField
    static ::GlobalNamespace::OVRManager* _get_$instance$k__BackingField();
    // Set static field: static private OVRManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GlobalNamespace::OVRManager* value);
    // Get static field: static private OVRDisplay <display>k__BackingField
    static ::GlobalNamespace::OVRDisplay* _get_$display$k__BackingField();
    // Set static field: static private OVRDisplay <display>k__BackingField
    static void _set_$display$k__BackingField(::GlobalNamespace::OVRDisplay* value);
    // Get static field: static private OVRTracker <tracker>k__BackingField
    static ::GlobalNamespace::OVRTracker* _get_$tracker$k__BackingField();
    // Set static field: static private OVRTracker <tracker>k__BackingField
    static void _set_$tracker$k__BackingField(::GlobalNamespace::OVRTracker* value);
    // Get static field: static private OVRBoundary <boundary>k__BackingField
    static ::GlobalNamespace::OVRBoundary* _get_$boundary$k__BackingField();
    // Set static field: static private OVRBoundary <boundary>k__BackingField
    static void _set_$boundary$k__BackingField(::GlobalNamespace::OVRBoundary* value);
    // Get static field: static private OVRRuntimeSettings <runtimeSettings>k__BackingField
    static ::GlobalNamespace::OVRRuntimeSettings* _get_$runtimeSettings$k__BackingField();
    // Set static field: static private OVRRuntimeSettings <runtimeSettings>k__BackingField
    static void _set_$runtimeSettings$k__BackingField(::GlobalNamespace::OVRRuntimeSettings* value);
    // Get static field: static private OVRProfile _profile
    static ::GlobalNamespace::OVRProfile* _get__profile();
    // Set static field: static private OVRProfile _profile
    static void _set__profile(::GlobalNamespace::OVRProfile* value);
    // Get static field: static private System.Action HMDAcquired
    static ::System::Action* _get_HMDAcquired();
    // Set static field: static private System.Action HMDAcquired
    static void _set_HMDAcquired(::System::Action* value);
    // Get static field: static private System.Action HMDLost
    static ::System::Action* _get_HMDLost();
    // Set static field: static private System.Action HMDLost
    static void _set_HMDLost(::System::Action* value);
    // Get static field: static private System.Action HMDMounted
    static ::System::Action* _get_HMDMounted();
    // Set static field: static private System.Action HMDMounted
    static void _set_HMDMounted(::System::Action* value);
    // Get static field: static private System.Action HMDUnmounted
    static ::System::Action* _get_HMDUnmounted();
    // Set static field: static private System.Action HMDUnmounted
    static void _set_HMDUnmounted(::System::Action* value);
    // Get static field: static private System.Action VrFocusAcquired
    static ::System::Action* _get_VrFocusAcquired();
    // Set static field: static private System.Action VrFocusAcquired
    static void _set_VrFocusAcquired(::System::Action* value);
    // Get static field: static private System.Action VrFocusLost
    static ::System::Action* _get_VrFocusLost();
    // Set static field: static private System.Action VrFocusLost
    static void _set_VrFocusLost(::System::Action* value);
    // Get static field: static private System.Action InputFocusAcquired
    static ::System::Action* _get_InputFocusAcquired();
    // Set static field: static private System.Action InputFocusAcquired
    static void _set_InputFocusAcquired(::System::Action* value);
    // Get static field: static private System.Action InputFocusLost
    static ::System::Action* _get_InputFocusLost();
    // Set static field: static private System.Action InputFocusLost
    static void _set_InputFocusLost(::System::Action* value);
    // Get static field: static private System.Action AudioOutChanged
    static ::System::Action* _get_AudioOutChanged();
    // Set static field: static private System.Action AudioOutChanged
    static void _set_AudioOutChanged(::System::Action* value);
    // Get static field: static private System.Action AudioInChanged
    static ::System::Action* _get_AudioInChanged();
    // Set static field: static private System.Action AudioInChanged
    static void _set_AudioInChanged(::System::Action* value);
    // Get static field: static private System.Action TrackingAcquired
    static ::System::Action* _get_TrackingAcquired();
    // Set static field: static private System.Action TrackingAcquired
    static void _set_TrackingAcquired(::System::Action* value);
    // Get static field: static private System.Action TrackingLost
    static ::System::Action* _get_TrackingLost();
    // Set static field: static private System.Action TrackingLost
    static void _set_TrackingLost(::System::Action* value);
    // Get static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static ::System::Action_2<float, float>* _get_DisplayRefreshRateChanged();
    // Set static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static void _set_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // Get static field: static private System.Action`4<System.UInt64,System.Boolean,OVRSpace,System.Guid> SpatialAnchorCreateComplete
    static ::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>* _get_SpatialAnchorCreateComplete();
    // Set static field: static private System.Action`4<System.UInt64,System.Boolean,OVRSpace,System.Guid> SpatialAnchorCreateComplete
    static void _set_SpatialAnchorCreateComplete(::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>* value);
    // Get static field: static private System.Action`6<System.UInt64,System.Boolean,OVRSpace,System.Guid,OVRPlugin/SpaceComponentType,System.Boolean> SpaceSetComponentStatusComplete
    static ::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>* _get_SpaceSetComponentStatusComplete();
    // Set static field: static private System.Action`6<System.UInt64,System.Boolean,OVRSpace,System.Guid,OVRPlugin/SpaceComponentType,System.Boolean> SpaceSetComponentStatusComplete
    static void _set_SpaceSetComponentStatusComplete(::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>* value);
    // Get static field: static private System.Action`1<System.UInt64> SpaceQueryResults
    static ::System::Action_1<uint64_t>* _get_SpaceQueryResults();
    // Set static field: static private System.Action`1<System.UInt64> SpaceQueryResults
    static void _set_SpaceQueryResults(::System::Action_1<uint64_t>* value);
    // Get static field: static private System.Action`2<System.UInt64,System.Boolean> SpaceQueryComplete
    static ::System::Action_2<uint64_t, bool>* _get_SpaceQueryComplete();
    // Set static field: static private System.Action`2<System.UInt64,System.Boolean> SpaceQueryComplete
    static void _set_SpaceQueryComplete(::System::Action_2<uint64_t, bool>* value);
    // Get static field: static private System.Action`4<System.UInt64,OVRSpace,System.Boolean,System.Guid> SpaceSaveComplete
    static ::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>* _get_SpaceSaveComplete();
    // Set static field: static private System.Action`4<System.UInt64,OVRSpace,System.Boolean,System.Guid> SpaceSaveComplete
    static void _set_SpaceSaveComplete(::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>* value);
    // Get static field: static private System.Action`4<System.UInt64,System.Boolean,System.Guid,OVRPlugin/SpaceStorageLocation> SpaceEraseComplete
    static ::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>* _get_SpaceEraseComplete();
    // Set static field: static private System.Action`4<System.UInt64,System.Boolean,System.Guid,OVRPlugin/SpaceStorageLocation> SpaceEraseComplete
    static void _set_SpaceEraseComplete(::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>* value);
    // Get static field: static private System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> ShareSpacesComplete
    static ::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* _get_ShareSpacesComplete();
    // Set static field: static private System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> ShareSpacesComplete
    static void _set_ShareSpacesComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // Get static field: static private System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> SpaceListSaveComplete
    static ::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* _get_SpaceListSaveComplete();
    // Set static field: static private System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> SpaceListSaveComplete
    static void _set_SpaceListSaveComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // Get static field: static private System.Action`2<System.UInt64,System.Boolean> SceneCaptureComplete
    static ::System::Action_2<uint64_t, bool>* _get_SceneCaptureComplete();
    // Set static field: static private System.Action`2<System.UInt64,System.Boolean> SceneCaptureComplete
    static void _set_SceneCaptureComplete(::System::Action_2<uint64_t, bool>* value);
    // Get static field: static private System.Action HSWDismissed
    static ::System::Action* _get_HSWDismissed();
    // Set static field: static private System.Action HSWDismissed
    static void _set_HSWDismissed(::System::Action* value);
    // Get static field: static private System.Boolean _isHmdPresentCached
    static bool _get__isHmdPresentCached();
    // Set static field: static private System.Boolean _isHmdPresentCached
    static void _set__isHmdPresentCached(bool value);
    // Get static field: static private System.Boolean _isHmdPresent
    static bool _get__isHmdPresent();
    // Set static field: static private System.Boolean _isHmdPresent
    static void _set__isHmdPresent(bool value);
    // Get static field: static private System.Boolean _wasHmdPresent
    static bool _get__wasHmdPresent();
    // Set static field: static private System.Boolean _wasHmdPresent
    static void _set__wasHmdPresent(bool value);
    // Get static field: static private System.Boolean _hasVrFocusCached
    static bool _get__hasVrFocusCached();
    // Set static field: static private System.Boolean _hasVrFocusCached
    static void _set__hasVrFocusCached(bool value);
    // Get static field: static private System.Boolean _hasVrFocus
    static bool _get__hasVrFocus();
    // Set static field: static private System.Boolean _hasVrFocus
    static void _set__hasVrFocus(bool value);
    // Get static field: static private System.Boolean _hadVrFocus
    static bool _get__hadVrFocus();
    // Set static field: static private System.Boolean _hadVrFocus
    static void _set__hadVrFocus(bool value);
    // Get static field: static private System.Boolean _hadInputFocus
    static bool _get__hadInputFocus();
    // Set static field: static private System.Boolean _hadInputFocus
    static void _set__hadInputFocus(bool value);
    // static field const value: static private System.Int32 _pixelStepPerFrame
    static constexpr const int _pixelStepPerFrame = 32;
    // Get static field: static private System.Int32 _pixelStepPerFrame
    static int _get__pixelStepPerFrame();
    // Set static field: static private System.Int32 _pixelStepPerFrame
    static void _set__pixelStepPerFrame(int value);
    // Get static field: static public System.String OCULUS_UNITY_NAME_STR
    static ::StringW _get_OCULUS_UNITY_NAME_STR();
    // Set static field: static public System.String OCULUS_UNITY_NAME_STR
    static void _set_OCULUS_UNITY_NAME_STR(::StringW value);
    // Get static field: static public System.String OPENVR_UNITY_NAME_STR
    static ::StringW _get_OPENVR_UNITY_NAME_STR();
    // Set static field: static public System.String OPENVR_UNITY_NAME_STR
    static void _set_OPENVR_UNITY_NAME_STR(::StringW value);
    // Get static field: static public OVRManager/XRDevice loadedXRDevice
    static ::GlobalNamespace::OVRManager_XRDevice _get_loadedXRDevice();
    // Set static field: static public OVRManager/XRDevice loadedXRDevice
    static void _set_loadedXRDevice(::GlobalNamespace::OVRManager_XRDevice value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static ::UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static void _set_OpenVRTouchRotationOffsetEulerLeft(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static ::UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static void _set_OpenVRTouchRotationOffsetEulerRight(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static ::UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static void _set_OpenVRTouchPositionOffsetLeft(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static ::UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static void _set_OpenVRTouchPositionOffsetRight(::UnityEngine::Vector3 value);
    // Get static field: static private System.Boolean m_SpaceWarpEnabled
    static bool _get_m_SpaceWarpEnabled();
    // Set static field: static private System.Boolean m_SpaceWarpEnabled
    static void _set_m_SpaceWarpEnabled(bool value);
    // Get static field: static private UnityEngine.Transform m_AppSpaceTransform
    static ::UnityEngine::Transform* _get_m_AppSpaceTransform();
    // Set static field: static private UnityEngine.Transform m_AppSpaceTransform
    static void _set_m_AppSpaceTransform(::UnityEngine::Transform* value);
    // Get static field: static private UnityEngine.DepthTextureMode m_CachedDepthTextureMode
    static ::UnityEngine::DepthTextureMode _get_m_CachedDepthTextureMode();
    // Set static field: static private UnityEngine.DepthTextureMode m_CachedDepthTextureMode
    static void _set_m_CachedDepthTextureMode(::UnityEngine::DepthTextureMode value);
    // Get static field: static private System.Boolean _isUserPresentCached
    static bool _get__isUserPresentCached();
    // Set static field: static private System.Boolean _isUserPresentCached
    static void _set__isUserPresentCached(bool value);
    // Get static field: static private System.Boolean _isUserPresent
    static bool _get__isUserPresent();
    // Set static field: static private System.Boolean _isUserPresent
    static void _set__isUserPresent(bool value);
    // Get static field: static private System.Boolean _wasUserPresent
    static bool _get__wasUserPresent();
    // Set static field: static private System.Boolean _wasUserPresent
    static void _set__wasUserPresent(bool value);
    // Get static field: static private System.Boolean prevAudioOutIdIsCached
    static bool _get_prevAudioOutIdIsCached();
    // Set static field: static private System.Boolean prevAudioOutIdIsCached
    static void _set_prevAudioOutIdIsCached(bool value);
    // Get static field: static private System.Boolean prevAudioInIdIsCached
    static bool _get_prevAudioInIdIsCached();
    // Set static field: static private System.Boolean prevAudioInIdIsCached
    static void _set_prevAudioInIdIsCached(bool value);
    // Get static field: static private System.String prevAudioOutId
    static ::StringW _get_prevAudioOutId();
    // Set static field: static private System.String prevAudioOutId
    static void _set_prevAudioOutId(::StringW value);
    // Get static field: static private System.String prevAudioInId
    static ::StringW _get_prevAudioInId();
    // Set static field: static private System.String prevAudioInId
    static void _set_prevAudioInId(::StringW value);
    // Get static field: static private System.Boolean wasPositionTracked
    static bool _get_wasPositionTracked();
    // Set static field: static private System.Boolean wasPositionTracked
    static void _set_wasPositionTracked(bool value);
    // Get static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static ::GlobalNamespace::OVRPlugin::EventDataBuffer _get_eventDataBuffer();
    // Set static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static void _set_eventDataBuffer(::GlobalNamespace::OVRPlugin::EventDataBuffer value);
    // Get static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static ::StringW _get_UnityAlphaOrBetaVersionWarningMessage();
    // Set static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static void _set_UnityAlphaOrBetaVersionWarningMessage(::StringW value);
    // Get static field: static public System.Boolean OVRManagerinitialized
    static bool _get_OVRManagerinitialized();
    // Set static field: static public System.Boolean OVRManagerinitialized
    static void _set_OVRManagerinitialized(bool value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystem> s_displaySubsystems
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystem*>* _get_s_displaySubsystems();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystem> s_displaySubsystems
    static void _set_s_displaySubsystems(::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystem*>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystemDescriptor> s_displaySubsystemDescriptors
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystemDescriptor*>* _get_s_displaySubsystemDescriptors();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystemDescriptor> s_displaySubsystemDescriptors
    static void _set_s_displaySubsystemDescriptors(::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystemDescriptor*>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRInputSubsystem> s_inputSubsystems
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRInputSubsystem*>* _get_s_inputSubsystems();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRInputSubsystem> s_inputSubsystems
    static void _set_s_inputSubsystems(::System::Collections::Generic::List_1<::UnityEngine::XR::XRInputSubsystem*>* value);
    // Get static field: static private System.Boolean multipleMainCameraWarningPresented
    static bool _get_multipleMainCameraWarningPresented();
    // Set static field: static private System.Boolean multipleMainCameraWarningPresented
    static void _set_multipleMainCameraWarningPresented(bool value);
    // Get static field: static private System.Boolean suppressUnableToFindMainCameraMessage
    static bool _get_suppressUnableToFindMainCameraMessage();
    // Set static field: static private System.Boolean suppressUnableToFindMainCameraMessage
    static void _set_suppressUnableToFindMainCameraMessage(bool value);
    // Get static field: static private System.WeakReference`1<UnityEngine.Camera> lastFoundMainCamera
    static ::System::WeakReference_1<::UnityEngine::Camera*>* _get_lastFoundMainCamera();
    // Set static field: static private System.WeakReference`1<UnityEngine.Camera> lastFoundMainCamera
    static void _set_lastFoundMainCamera(::System::WeakReference_1<::UnityEngine::Camera*>* value);
    // Get static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static bool _get_staticMixedRealityCaptureInitialized();
    // Set static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static void _set_staticMixedRealityCaptureInitialized(bool value);
    // Get static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static bool _get_staticPrevEnableMixedRealityCapture();
    // Set static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static void _set_staticPrevEnableMixedRealityCapture(bool value);
    // Get static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static ::GlobalNamespace::OVRMixedRealityCaptureSettings* _get_staticMrcSettings();
    // Set static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static void _set_staticMrcSettings(::GlobalNamespace::OVRMixedRealityCaptureSettings* value);
    // Get static field: static private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    static bool _get_suppressDisableMixedRealityBecauseOfNoMainCameraWarning();
    // Set static field: static private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    static void _set_suppressDisableMixedRealityBecauseOfNoMainCameraWarning(bool value);
    // Get static field: static public System.Action`1<System.Boolean> OnPassthroughInitializedStateChange
    static ::System::Action_1<bool>* _get_OnPassthroughInitializedStateChange();
    // Set static field: static public System.Action`1<System.Boolean> OnPassthroughInitializedStateChange
    static void _set_OnPassthroughInitializedStateChange(::System::Action_1<bool>* value);
    // Get static field: static private OVRManager/Observable`1<OVRManager/PassthroughInitializationState> _passthroughInitializationState
    static ::GlobalNamespace::OVRManager_Observable_1<::GlobalNamespace::OVRManager_PassthroughInitializationState>* _get__passthroughInitializationState();
    // Set static field: static private OVRManager/Observable`1<OVRManager/PassthroughInitializationState> _passthroughInitializationState
    static void _set__passthroughInitializationState(::GlobalNamespace::OVRManager_Observable_1<::GlobalNamespace::OVRManager_PassthroughInitializationState>* value);
    // Get static field: static private OVRManager/PassthroughCapabilities _passthroughCapabilities
    static ::GlobalNamespace::OVRManager_PassthroughCapabilities* _get__passthroughCapabilities();
    // Set static field: static private OVRManager/PassthroughCapabilities _passthroughCapabilities
    static void _set__passthroughCapabilities(::GlobalNamespace::OVRManager_PassthroughCapabilities* value);
    // Get instance field reference: private System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> disabledCameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>*& dyn_disabledCameras();
    // Get instance field reference: private System.Single prevTimeScale
    [[deprecated("Use field access instead!")]] float& dyn_prevTimeScale();
    // Get instance field reference: public System.Boolean useRecommendedMSAALevel
    [[deprecated("Use field access instead!")]] bool& dyn_useRecommendedMSAALevel();
    // Get instance field reference: private System.Boolean _monoscopic
    [[deprecated("Use field access instead!")]] bool& dyn__monoscopic();
    // Get instance field reference: private OVRPlugin/LayerSharpenType _sharpenType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::LayerSharpenType& dyn__sharpenType();
    // Get instance field reference: private OVRManager/ColorSpace _colorGamut
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_ColorSpace& dyn__colorGamut();
    // Get instance field reference: public System.Boolean enableDynamicResolution
    [[deprecated("Use field access instead!")]] bool& dyn_enableDynamicResolution();
    // Get instance field reference: public System.Single minDynamicResolutionScale
    [[deprecated("Use field access instead!")]] float& dyn_minDynamicResolutionScale();
    // Get instance field reference: public System.Single maxDynamicResolutionScale
    [[deprecated("Use field access instead!")]] float& dyn_maxDynamicResolutionScale();
    // Get instance field reference: public System.Single minRenderScale
    [[deprecated("Use field access instead!")]] float& dyn_minRenderScale();
    // Get instance field reference: public System.Single maxRenderScale
    [[deprecated("Use field access instead!")]] float& dyn_maxRenderScale();
    // Get instance field reference: private UnityEngine.Vector3 _headPoseRelativeOffsetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headPoseRelativeOffsetRotation();
    // Get instance field reference: private UnityEngine.Vector3 _headPoseRelativeOffsetTranslation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headPoseRelativeOffsetTranslation();
    // Get instance field reference: public System.Int32 profilerTcpPort
    [[deprecated("Use field access instead!")]] int& dyn_profilerTcpPort();
    // Get instance field reference: public System.Boolean expandMixedRealityCapturePropertySheet
    [[deprecated("Use field access instead!")]] bool& dyn_expandMixedRealityCapturePropertySheet();
    // Get instance field reference: public System.Boolean enableMixedReality
    [[deprecated("Use field access instead!")]] bool& dyn_enableMixedReality();
    // Get instance field reference: public OVRManager/CompositionMethod compositionMethod
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& dyn_compositionMethod();
    // Get instance field reference: public UnityEngine.LayerMask extraHiddenLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_extraHiddenLayers();
    // Get instance field reference: public UnityEngine.LayerMask extraVisibleLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_extraVisibleLayers();
    // Get instance field reference: public System.Boolean dynamicCullingMask
    [[deprecated("Use field access instead!")]] bool& dyn_dynamicCullingMask();
    // Get instance field reference: public UnityEngine.Color externalCompositionBackdropColorRift
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_externalCompositionBackdropColorRift();
    // Get instance field reference: public UnityEngine.Color externalCompositionBackdropColorQuest
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_externalCompositionBackdropColorQuest();
    // Get instance field reference: public OVRManager/CameraDevice capturingCameraDevice
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& dyn_capturingCameraDevice();
    // Get instance field reference: public System.Boolean flipCameraFrameHorizontally
    [[deprecated("Use field access instead!")]] bool& dyn_flipCameraFrameHorizontally();
    // Get instance field reference: public System.Boolean flipCameraFrameVertically
    [[deprecated("Use field access instead!")]] bool& dyn_flipCameraFrameVertically();
    // Get instance field reference: public System.Single handPoseStateLatency
    [[deprecated("Use field access instead!")]] float& dyn_handPoseStateLatency();
    // Get instance field reference: public System.Single sandwichCompositionRenderLatency
    [[deprecated("Use field access instead!")]] float& dyn_sandwichCompositionRenderLatency();
    // Get instance field reference: public System.Int32 sandwichCompositionBufferedFrames
    [[deprecated("Use field access instead!")]] int& dyn_sandwichCompositionBufferedFrames();
    // Get instance field reference: public UnityEngine.Color chromaKeyColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_chromaKeyColor();
    // Get instance field reference: public System.Single chromaKeySimilarity
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySimilarity();
    // Get instance field reference: public System.Single chromaKeySmoothRange
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySmoothRange();
    // Get instance field reference: public System.Single chromaKeySpillRange
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySpillRange();
    // Get instance field reference: public System.Boolean useDynamicLighting
    [[deprecated("Use field access instead!")]] bool& dyn_useDynamicLighting();
    // Get instance field reference: public OVRManager/DepthQuality depthQuality
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& dyn_depthQuality();
    // Get instance field reference: public System.Single dynamicLightingSmoothFactor
    [[deprecated("Use field access instead!")]] float& dyn_dynamicLightingSmoothFactor();
    // Get instance field reference: public System.Single dynamicLightingDepthVariationClampingValue
    [[deprecated("Use field access instead!")]] float& dyn_dynamicLightingDepthVariationClampingValue();
    // Get instance field reference: public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& dyn_virtualGreenScreenType();
    // Get instance field reference: public System.Single virtualGreenScreenTopY
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenTopY();
    // Get instance field reference: public System.Single virtualGreenScreenBottomY
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenBottomY();
    // Get instance field reference: public System.Boolean virtualGreenScreenApplyDepthCulling
    [[deprecated("Use field access instead!")]] bool& dyn_virtualGreenScreenApplyDepthCulling();
    // Get instance field reference: public System.Single virtualGreenScreenDepthTolerance
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenDepthTolerance();
    // Get instance field reference: public OVRManager/MrcActivationMode mrcActivationMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& dyn_mrcActivationMode();
    // Get instance field reference: public OVRManager/InstantiateMrcCameraDelegate instantiateMixedRealityCameraGameObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*& dyn_instantiateMixedRealityCameraGameObject();
    // Get instance field reference: public System.Boolean launchMultimodalHandsControllersOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_launchMultimodalHandsControllersOnStartup();
    // Get instance field reference: public System.Boolean isInsightPassthroughEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isInsightPassthroughEnabled();
    // Get instance field reference: System.Boolean requestBodyTrackingPermissionOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_requestBodyTrackingPermissionOnStartup();
    // Get instance field reference: System.Boolean requestFaceTrackingPermissionOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_requestFaceTrackingPermissionOnStartup();
    // Get instance field reference: System.Boolean requestEyeTrackingPermissionOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_requestEyeTrackingPermissionOnStartup();
    // Get instance field reference: System.Boolean requestScenePermissionOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_requestScenePermissionOnStartup();
    // Get instance field reference: private System.Boolean _localDimming
    [[deprecated("Use field access instead!")]] bool& dyn__localDimming();
    // Get instance field reference: private OVRManager/TrackingOrigin _trackingOriginType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_TrackingOrigin& dyn__trackingOriginType();
    // Get instance field reference: public System.Boolean usePositionTracking
    [[deprecated("Use field access instead!")]] bool& dyn_usePositionTracking();
    // Get instance field reference: public System.Boolean useRotationTracking
    [[deprecated("Use field access instead!")]] bool& dyn_useRotationTracking();
    // Get instance field reference: public System.Boolean useIPDInPositionTracking
    [[deprecated("Use field access instead!")]] bool& dyn_useIPDInPositionTracking();
    // Get instance field reference: public System.Boolean resetTrackerOnLoad
    [[deprecated("Use field access instead!")]] bool& dyn_resetTrackerOnLoad();
    // Get instance field reference: public System.Boolean AllowRecenter
    [[deprecated("Use field access instead!")]] bool& dyn_AllowRecenter();
    // Get instance field reference: public System.Boolean LateControllerUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_LateControllerUpdate();
    // Get instance field reference: public System.Boolean LateLatching
    [[deprecated("Use field access instead!")]] bool& dyn_LateLatching();
    // Get instance field reference: private OVRManager/ControllerDrivenHandPosesType _readOnlyControllerDrivenHandPosesType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType& dyn__readOnlyControllerDrivenHandPosesType();
    // Get instance field reference: public OVRManager/ControllerDrivenHandPosesType controllerDrivenHandPosesType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_ControllerDrivenHandPosesType& dyn_controllerDrivenHandPosesType();
    // Get instance field reference: private System.Boolean <isSupportedPlatform>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isSupportedPlatform$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<OVRManager/EventListener> eventListeners
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GlobalNamespace::OVRManager_EventListener*>*& dyn_eventListeners();
    // static public OVRManager get_instance()
    // Offset: 0x48D4318
    static ::GlobalNamespace::OVRManager* get_instance();
    // static private System.Void set_instance(OVRManager value)
    // Offset: 0x48D4370
    static void set_instance(::GlobalNamespace::OVRManager* value);
    // static public OVRDisplay get_display()
    // Offset: 0x48D43D8
    static ::GlobalNamespace::OVRDisplay* get_display();
    // static private System.Void set_display(OVRDisplay value)
    // Offset: 0x48D4430
    static void set_display(::GlobalNamespace::OVRDisplay* value);
    // static public OVRTracker get_tracker()
    // Offset: 0x48D4490
    static ::GlobalNamespace::OVRTracker* get_tracker();
    // static private System.Void set_tracker(OVRTracker value)
    // Offset: 0x48D44E8
    static void set_tracker(::GlobalNamespace::OVRTracker* value);
    // static public OVRBoundary get_boundary()
    // Offset: 0x48D4548
    static ::GlobalNamespace::OVRBoundary* get_boundary();
    // static private System.Void set_boundary(OVRBoundary value)
    // Offset: 0x48D45A0
    static void set_boundary(::GlobalNamespace::OVRBoundary* value);
    // static public OVRRuntimeSettings get_runtimeSettings()
    // Offset: 0x48D4600
    static ::GlobalNamespace::OVRRuntimeSettings* get_runtimeSettings();
    // static private System.Void set_runtimeSettings(OVRRuntimeSettings value)
    // Offset: 0x48D4658
    static void set_runtimeSettings(::GlobalNamespace::OVRRuntimeSettings* value);
    // static public OVRProfile get_profile()
    // Offset: 0x48D46B8
    static ::GlobalNamespace::OVRProfile* get_profile();
    // static public System.Void add_HMDAcquired(System.Action value)
    // Offset: 0x48D47B4
    static void add_HMDAcquired(::System::Action* value);
    // static public System.Void remove_HMDAcquired(System.Action value)
    // Offset: 0x48D4890
    static void remove_HMDAcquired(::System::Action* value);
    // static public System.Void add_HMDLost(System.Action value)
    // Offset: 0x48D496C
    static void add_HMDLost(::System::Action* value);
    // static public System.Void remove_HMDLost(System.Action value)
    // Offset: 0x48D4A48
    static void remove_HMDLost(::System::Action* value);
    // static public System.Void add_HMDMounted(System.Action value)
    // Offset: 0x48D4B24
    static void add_HMDMounted(::System::Action* value);
    // static public System.Void remove_HMDMounted(System.Action value)
    // Offset: 0x48D4C00
    static void remove_HMDMounted(::System::Action* value);
    // static public System.Void add_HMDUnmounted(System.Action value)
    // Offset: 0x48D4CDC
    static void add_HMDUnmounted(::System::Action* value);
    // static public System.Void remove_HMDUnmounted(System.Action value)
    // Offset: 0x48D4DB8
    static void remove_HMDUnmounted(::System::Action* value);
    // static public System.Void add_VrFocusAcquired(System.Action value)
    // Offset: 0x48D4E94
    static void add_VrFocusAcquired(::System::Action* value);
    // static public System.Void remove_VrFocusAcquired(System.Action value)
    // Offset: 0x48D4F70
    static void remove_VrFocusAcquired(::System::Action* value);
    // static public System.Void add_VrFocusLost(System.Action value)
    // Offset: 0x48D504C
    static void add_VrFocusLost(::System::Action* value);
    // static public System.Void remove_VrFocusLost(System.Action value)
    // Offset: 0x48D5128
    static void remove_VrFocusLost(::System::Action* value);
    // static public System.Void add_InputFocusAcquired(System.Action value)
    // Offset: 0x48D5204
    static void add_InputFocusAcquired(::System::Action* value);
    // static public System.Void remove_InputFocusAcquired(System.Action value)
    // Offset: 0x48D52E0
    static void remove_InputFocusAcquired(::System::Action* value);
    // static public System.Void add_InputFocusLost(System.Action value)
    // Offset: 0x48D53BC
    static void add_InputFocusLost(::System::Action* value);
    // static public System.Void remove_InputFocusLost(System.Action value)
    // Offset: 0x48D5498
    static void remove_InputFocusLost(::System::Action* value);
    // static public System.Void add_AudioOutChanged(System.Action value)
    // Offset: 0x48D5574
    static void add_AudioOutChanged(::System::Action* value);
    // static public System.Void remove_AudioOutChanged(System.Action value)
    // Offset: 0x48D5650
    static void remove_AudioOutChanged(::System::Action* value);
    // static public System.Void add_AudioInChanged(System.Action value)
    // Offset: 0x48D572C
    static void add_AudioInChanged(::System::Action* value);
    // static public System.Void remove_AudioInChanged(System.Action value)
    // Offset: 0x48D5808
    static void remove_AudioInChanged(::System::Action* value);
    // static public System.Void add_TrackingAcquired(System.Action value)
    // Offset: 0x48D58E4
    static void add_TrackingAcquired(::System::Action* value);
    // static public System.Void remove_TrackingAcquired(System.Action value)
    // Offset: 0x48D59C0
    static void remove_TrackingAcquired(::System::Action* value);
    // static public System.Void add_TrackingLost(System.Action value)
    // Offset: 0x48D5A9C
    static void add_TrackingLost(::System::Action* value);
    // static public System.Void remove_TrackingLost(System.Action value)
    // Offset: 0x48D5B78
    static void remove_TrackingLost(::System::Action* value);
    // static public System.Void add_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0x48D5C54
    static void add_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // static public System.Void remove_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0x48D5D48
    static void remove_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // static public System.Void add_SpatialAnchorCreateComplete(System.Action`4<System.UInt64,System.Boolean,OVRSpace,System.Guid> value)
    // Offset: 0x48D5E3C
    static void add_SpatialAnchorCreateComplete(::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>* value);
    // static public System.Void remove_SpatialAnchorCreateComplete(System.Action`4<System.UInt64,System.Boolean,OVRSpace,System.Guid> value)
    // Offset: 0x48D5F30
    static void remove_SpatialAnchorCreateComplete(::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>* value);
    // static public System.Void add_SpaceSetComponentStatusComplete(System.Action`6<System.UInt64,System.Boolean,OVRSpace,System.Guid,OVRPlugin/SpaceComponentType,System.Boolean> value)
    // Offset: 0x48D6024
    static void add_SpaceSetComponentStatusComplete(::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>* value);
    // static public System.Void remove_SpaceSetComponentStatusComplete(System.Action`6<System.UInt64,System.Boolean,OVRSpace,System.Guid,OVRPlugin/SpaceComponentType,System.Boolean> value)
    // Offset: 0x48D6118
    static void remove_SpaceSetComponentStatusComplete(::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>* value);
    // static public System.Void add_SpaceQueryResults(System.Action`1<System.UInt64> value)
    // Offset: 0x48D620C
    static void add_SpaceQueryResults(::System::Action_1<uint64_t>* value);
    // static public System.Void remove_SpaceQueryResults(System.Action`1<System.UInt64> value)
    // Offset: 0x48D6300
    static void remove_SpaceQueryResults(::System::Action_1<uint64_t>* value);
    // static public System.Void add_SpaceQueryComplete(System.Action`2<System.UInt64,System.Boolean> value)
    // Offset: 0x48D63F4
    static void add_SpaceQueryComplete(::System::Action_2<uint64_t, bool>* value);
    // static public System.Void remove_SpaceQueryComplete(System.Action`2<System.UInt64,System.Boolean> value)
    // Offset: 0x48D64E8
    static void remove_SpaceQueryComplete(::System::Action_2<uint64_t, bool>* value);
    // static public System.Void add_SpaceSaveComplete(System.Action`4<System.UInt64,OVRSpace,System.Boolean,System.Guid> value)
    // Offset: 0x48D65DC
    static void add_SpaceSaveComplete(::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>* value);
    // static public System.Void remove_SpaceSaveComplete(System.Action`4<System.UInt64,OVRSpace,System.Boolean,System.Guid> value)
    // Offset: 0x48D66D0
    static void remove_SpaceSaveComplete(::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>* value);
    // static public System.Void add_SpaceEraseComplete(System.Action`4<System.UInt64,System.Boolean,System.Guid,OVRPlugin/SpaceStorageLocation> value)
    // Offset: 0x48D67C4
    static void add_SpaceEraseComplete(::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>* value);
    // static public System.Void remove_SpaceEraseComplete(System.Action`4<System.UInt64,System.Boolean,System.Guid,OVRPlugin/SpaceStorageLocation> value)
    // Offset: 0x48D68B8
    static void remove_SpaceEraseComplete(::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>* value);
    // static public System.Void add_ShareSpacesComplete(System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x48D69AC
    static void add_ShareSpacesComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // static public System.Void remove_ShareSpacesComplete(System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x48D6AA0
    static void remove_ShareSpacesComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // static public System.Void add_SpaceListSaveComplete(System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x48D6B94
    static void add_SpaceListSaveComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // static public System.Void remove_SpaceListSaveComplete(System.Action`2<System.UInt64,OVRSpatialAnchor/OperationResult> value)
    // Offset: 0x48D6C88
    static void remove_SpaceListSaveComplete(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>* value);
    // static public System.Void add_SceneCaptureComplete(System.Action`2<System.UInt64,System.Boolean> value)
    // Offset: 0x48D6D7C
    static void add_SceneCaptureComplete(::System::Action_2<uint64_t, bool>* value);
    // static public System.Void remove_SceneCaptureComplete(System.Action`2<System.UInt64,System.Boolean> value)
    // Offset: 0x48D6E70
    static void remove_SceneCaptureComplete(::System::Action_2<uint64_t, bool>* value);
    // static public System.Void add_HSWDismissed(System.Action value)
    // Offset: 0x48D6F64
    static void add_HSWDismissed(::System::Action* value);
    // static public System.Void remove_HSWDismissed(System.Action value)
    // Offset: 0x48D7040
    static void remove_HSWDismissed(::System::Action* value);
    // static public System.Boolean get_isHmdPresent()
    // Offset: 0x48D711C
    static bool get_isHmdPresent();
    // static private System.Void set_isHmdPresent(System.Boolean value)
    // Offset: 0x48D71F4
    static void set_isHmdPresent(bool value);
    // static public System.String get_audioOutId()
    // Offset: 0x48D725C
    static ::StringW get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0x48D72AC
    static ::StringW get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0x48D72FC
    static bool get_hasVrFocus();
    // static private System.Void set_hasVrFocus(System.Boolean value)
    // Offset: 0x48D73D4
    static void set_hasVrFocus(bool value);
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0x48D743C
    static bool get_hasInputFocus();
    // public System.Boolean get_chromatic()
    // Offset: 0x48D748C
    bool get_chromatic();
    // public System.Void set_chromatic(System.Boolean value)
    // Offset: 0x48D7518
    void set_chromatic(bool value);
    // public System.Boolean get_monoscopic()
    // Offset: 0x48D75A8
    bool get_monoscopic();
    // public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0x48D7638
    void set_monoscopic(bool value);
    // public OVRPlugin/LayerSharpenType get_sharpenType()
    // Offset: 0x48D76D4
    ::GlobalNamespace::OVRPlugin::LayerSharpenType get_sharpenType();
    // public System.Void set_sharpenType(OVRPlugin/LayerSharpenType value)
    // Offset: 0x48D76DC
    void set_sharpenType(::GlobalNamespace::OVRPlugin::LayerSharpenType value);
    // public OVRManager/ColorSpace get_colorGamut()
    // Offset: 0x48D7744
    ::GlobalNamespace::OVRManager_ColorSpace get_colorGamut();
    // public System.Void set_colorGamut(OVRManager/ColorSpace value)
    // Offset: 0x48D774C
    void set_colorGamut(::GlobalNamespace::OVRManager_ColorSpace value);
    // public OVRManager/ColorSpace get_nativeColorGamut()
    // Offset: 0x48D77B4
    ::GlobalNamespace::OVRManager_ColorSpace get_nativeColorGamut();
    // static public System.Boolean IsAdaptiveResSupportedByEngine()
    // Offset: 0x48D7804
    static bool IsAdaptiveResSupportedByEngine();
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetRotation()
    // Offset: 0x48D780C
    ::UnityEngine::Vector3 get_headPoseRelativeOffsetRotation();
    // public System.Void set_headPoseRelativeOffsetRotation(UnityEngine.Vector3 value)
    // Offset: 0x48D7818
    void set_headPoseRelativeOffsetRotation(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetTranslation()
    // Offset: 0x48D7900
    ::UnityEngine::Vector3 get_headPoseRelativeOffsetTranslation();
    // public System.Void set_headPoseRelativeOffsetTranslation(UnityEngine.Vector3 value)
    // Offset: 0x48D790C
    void set_headPoseRelativeOffsetTranslation(::UnityEngine::Vector3 value);
    // static public System.Boolean get_eyeFovPremultipliedAlphaModeEnabled()
    // Offset: 0x48D7A24
    static bool get_eyeFovPremultipliedAlphaModeEnabled();
    // static public System.Void set_eyeFovPremultipliedAlphaModeEnabled(System.Boolean value)
    // Offset: 0x48D7A74
    static void set_eyeFovPremultipliedAlphaModeEnabled(bool value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_enableMixedReality()
    // Offset: 0x48D7ACC
    bool OVRMixedRealityCaptureConfiguration_get_enableMixedReality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_enableMixedReality(System.Boolean value)
    // Offset: 0x48D7AD4
    void OVRMixedRealityCaptureConfiguration_set_enableMixedReality(bool value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers()
    // Offset: 0x48D7AE0
    ::UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0x48D7AE8
    void OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers(::UnityEngine::LayerMask value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers()
    // Offset: 0x48D7AF0
    ::UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0x48D7AF8
    void OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers(::UnityEngine::LayerMask value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask()
    // Offset: 0x48D7B00
    bool OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask(System.Boolean value)
    // Offset: 0x48D7B08
    void OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask(bool value);
    // private OVRManager/CompositionMethod OVRMixedRealityCaptureConfiguration.get_compositionMethod()
    // Offset: 0x48D7B14
    ::GlobalNamespace::OVRManager_CompositionMethod OVRMixedRealityCaptureConfiguration_get_compositionMethod();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0x48D7B1C
    void OVRMixedRealityCaptureConfiguration_set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift()
    // Offset: 0x48D7B24
    ::UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0x48D7B30
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift(::UnityEngine::Color value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest()
    // Offset: 0x48D7B3C
    ::UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0x48D7B48
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest(::UnityEngine::Color value);
    // private OVRManager/CameraDevice OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice()
    // Offset: 0x48D7B54
    ::GlobalNamespace::OVRManager_CameraDevice OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0x48D7B5C
    void OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally()
    // Offset: 0x48D7B64
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0x48D7B6C
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally(bool value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically()
    // Offset: 0x48D7B78
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0x48D7B80
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency()
    // Offset: 0x48D7B8C
    float OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency(System.Single value)
    // Offset: 0x48D7B94
    void OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency()
    // Offset: 0x48D7B9C
    float OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0x48D7BA4
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency(float value);
    // private System.Int32 OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames()
    // Offset: 0x48D7BAC
    int OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0x48D7BB4
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames(int value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_chromaKeyColor()
    // Offset: 0x48D7BBC
    ::UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_chromaKeyColor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0x48D7BC8
    void OVRMixedRealityCaptureConfiguration_set_chromaKeyColor(::UnityEngine::Color value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity()
    // Offset: 0x48D7BD4
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity(System.Single value)
    // Offset: 0x48D7BDC
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange()
    // Offset: 0x48D7BE4
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange(System.Single value)
    // Offset: 0x48D7BEC
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange()
    // Offset: 0x48D7BF4
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange(System.Single value)
    // Offset: 0x48D7BFC
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_useDynamicLighting()
    // Offset: 0x48D7C04
    bool OVRMixedRealityCaptureConfiguration_get_useDynamicLighting();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_useDynamicLighting(System.Boolean value)
    // Offset: 0x48D7C0C
    void OVRMixedRealityCaptureConfiguration_set_useDynamicLighting(bool value);
    // private OVRManager/DepthQuality OVRMixedRealityCaptureConfiguration.get_depthQuality()
    // Offset: 0x48D7C18
    ::GlobalNamespace::OVRManager_DepthQuality OVRMixedRealityCaptureConfiguration_get_depthQuality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0x48D7C20
    void OVRMixedRealityCaptureConfiguration_set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor()
    // Offset: 0x48D7C28
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0x48D7C30
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0x48D7C38
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0x48D7C40
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue(float value);
    // private OVRManager/VirtualGreenScreenType OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType()
    // Offset: 0x48D7C48
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0x48D7C50
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY()
    // Offset: 0x48D7C58
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0x48D7C60
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY()
    // Offset: 0x48D7C68
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0x48D7C70
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0x48D7C78
    bool OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0x48D7C80
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance()
    // Offset: 0x48D7C8C
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0x48D7C94
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance(float value);
    // private OVRManager/MrcActivationMode OVRMixedRealityCaptureConfiguration.get_mrcActivationMode()
    // Offset: 0x48D7C9C
    ::GlobalNamespace::OVRManager_MrcActivationMode OVRMixedRealityCaptureConfiguration_get_mrcActivationMode();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0x48D7CA4
    void OVRMixedRealityCaptureConfiguration_set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value);
    // private OVRManager/InstantiateMrcCameraDelegate OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject()
    // Offset: 0x48D7CAC
    ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0x48D7CB4
    void OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
    // public OVRManager/XrApi get_xrApi()
    // Offset: 0x48D7CBC
    ::GlobalNamespace::OVRManager_XrApi get_xrApi();
    // public System.UInt64 get_xrInstance()
    // Offset: 0x48D7D0C
    uint64_t get_xrInstance();
    // public System.UInt64 get_xrSession()
    // Offset: 0x48D7D5C
    uint64_t get_xrSession();
    // public System.Int32 get_vsyncCount()
    // Offset: 0x48D7DAC
    int get_vsyncCount();
    // public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0x48D7E38
    void set_vsyncCount(int value);
    // static public System.Single get_batteryLevel()
    // Offset: 0x48D7EC8
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0x48D7F54
    static float get_batteryTemperature();
    // static public System.Int32 get_batteryStatus()
    // Offset: 0x48D7FE0
    static int get_batteryStatus();
    // static public System.Single get_volumeLevel()
    // Offset: 0x48D806C
    static float get_volumeLevel();
    // static public OVRManager/ProcessorPerformanceLevel get_suggestedCpuPerfLevel()
    // Offset: 0x48D80F8
    static ::GlobalNamespace::OVRManager_ProcessorPerformanceLevel get_suggestedCpuPerfLevel();
    // static public System.Void set_suggestedCpuPerfLevel(OVRManager/ProcessorPerformanceLevel value)
    // Offset: 0x48D8184
    static void set_suggestedCpuPerfLevel(::GlobalNamespace::OVRManager_ProcessorPerformanceLevel value);
    // static public OVRManager/ProcessorPerformanceLevel get_suggestedGpuPerfLevel()
    // Offset: 0x48D8214
    static ::GlobalNamespace::OVRManager_ProcessorPerformanceLevel get_suggestedGpuPerfLevel();
    // static public System.Void set_suggestedGpuPerfLevel(OVRManager/ProcessorPerformanceLevel value)
    // Offset: 0x48D82A0
    static void set_suggestedGpuPerfLevel(::GlobalNamespace::OVRManager_ProcessorPerformanceLevel value);
    // static public System.Int32 get_cpuLevel()
    // Offset: 0x48D8330
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0x48D83BC
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0x48D844C
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0x48D84D8
    static void set_gpuLevel(int value);
    // static public System.Boolean get_isPowerSavingActive()
    // Offset: 0x48D8568
    static bool get_isPowerSavingActive();
    // static public OVRManager/EyeTextureFormat get_eyeTextureFormat()
    // Offset: 0x48D85F4
    static ::GlobalNamespace::OVRManager_EyeTextureFormat get_eyeTextureFormat();
    // static public System.Void set_eyeTextureFormat(OVRManager/EyeTextureFormat value)
    // Offset: 0x48D8644
    static void set_eyeTextureFormat(::GlobalNamespace::OVRManager_EyeTextureFormat value);
    // static public System.Boolean get_eyeTrackedFoveatedRenderingSupported()
    // Offset: 0x48D869C
    static bool get_eyeTrackedFoveatedRenderingSupported();
    // static public System.Boolean get_eyeTrackedFoveatedRenderingEnabled()
    // Offset: 0x48D86EC
    static bool get_eyeTrackedFoveatedRenderingEnabled();
    // static public System.Void set_eyeTrackedFoveatedRenderingEnabled(System.Boolean value)
    // Offset: 0x48D873C
    static void set_eyeTrackedFoveatedRenderingEnabled(bool value);
    // static private System.Void OnPermissionGranted(System.String permissionId)
    // Offset: 0x48D8914
    static void OnPermissionGranted(::StringW permissionId);
    // static public OVRManager/FoveatedRenderingLevel get_foveatedRenderingLevel()
    // Offset: 0x48D89E8
    static ::GlobalNamespace::OVRManager_FoveatedRenderingLevel get_foveatedRenderingLevel();
    // static public System.Void set_foveatedRenderingLevel(OVRManager/FoveatedRenderingLevel value)
    // Offset: 0x48D8A38
    static void set_foveatedRenderingLevel(::GlobalNamespace::OVRManager_FoveatedRenderingLevel value);
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0x48D8A90
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRManager/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0x48D8AE0
    static ::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRManager/FixedFoveatedRenderingLevel value)
    // Offset: 0x48D8B30
    static void set_fixedFoveatedRenderingLevel(::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_useDynamicFoveatedRendering()
    // Offset: 0x48D8B88
    static bool get_useDynamicFoveatedRendering();
    // static public System.Void set_useDynamicFoveatedRendering(System.Boolean value)
    // Offset: 0x48D8BD8
    static void set_useDynamicFoveatedRendering(bool value);
    // static public System.Boolean get_useDynamicFixedFoveatedRendering()
    // Offset: 0x48D8C30
    static bool get_useDynamicFixedFoveatedRendering();
    // static public System.Void set_useDynamicFixedFoveatedRendering(System.Boolean value)
    // Offset: 0x48D8C80
    static void set_useDynamicFixedFoveatedRendering(bool value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0x48D8CD8
    static bool get_tiledMultiResSupported();
    // static public OVRManager/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0x48D8D28
    static ::GlobalNamespace::OVRManager_TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRManager/TiledMultiResLevel value)
    // Offset: 0x48D8D78
    static void set_tiledMultiResLevel(::GlobalNamespace::OVRManager_TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0x48D8DD0
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0x48D8E20
    static float get_gpuUtilLevel();
    // static public OVRManager/SystemHeadsetType get_systemHeadsetType()
    // Offset: 0x48D8ED0
    static ::GlobalNamespace::OVRManager_SystemHeadsetType get_systemHeadsetType();
    // static public System.Void SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0x48D8F20
    static void SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Void SetOpenVRLocalPose(UnityEngine.Vector3 leftPos, UnityEngine.Vector3 rightPos, UnityEngine.Quaternion leftRot, UnityEngine.Quaternion rightRot)
    // Offset: 0x48D8FD8
    static void SetOpenVRLocalPose(::UnityEngine::Vector3 leftPos, ::UnityEngine::Vector3 rightPos, ::UnityEngine::Quaternion leftRot, ::UnityEngine::Quaternion rightRot);
    // static public OVRPose GetOpenVRControllerOffset(UnityEngine.XR.XRNode hand)
    // Offset: 0x48D90E0
    static ::GlobalNamespace::OVRPose GetOpenVRControllerOffset(::UnityEngine::XR::XRNode hand);
    // static public System.Void SetSpaceWarp(System.Boolean enabled)
    // Offset: 0x48D92D8
    static void SetSpaceWarp(bool enabled);
    // static public System.Boolean GetSpaceWarp()
    // Offset: 0x48D9ADC
    static bool GetSpaceWarp();
    // static public System.Boolean SetDepthSubmission(System.Boolean enable)
    // Offset: 0x48D9B34
    static bool SetDepthSubmission(bool enable);
    // public OVRManager/TrackingOrigin get_trackingOriginType()
    // Offset: 0x48D9B50
    ::GlobalNamespace::OVRManager_TrackingOrigin get_trackingOriginType();
    // public System.Void set_trackingOriginType(OVRManager/TrackingOrigin value)
    // Offset: 0x48D9BE0
    void set_trackingOriginType(::GlobalNamespace::OVRManager_TrackingOrigin value);
    // public System.Boolean get_IsSimultaneousHandsAndControllersSupported()
    // Offset: 0x48D9C7C
    bool get_IsSimultaneousHandsAndControllersSupported();
    // public System.Boolean get_isSupportedPlatform()
    // Offset: 0x48D9C9C
    bool get_isSupportedPlatform();
    // private System.Void set_isSupportedPlatform(System.Boolean value)
    // Offset: 0x48D9CA4
    void set_isSupportedPlatform(bool value);
    // public System.Boolean get_isUserPresent()
    // Offset: 0x48D9CB0
    bool get_isUserPresent();
    // private System.Void set_isUserPresent(System.Boolean value)
    // Offset: 0x48D9D88
    void set_isUserPresent(bool value);
    // public System.Void RegisterEventListener(OVRManager/EventListener listener)
    // Offset: 0x48D9DF0
    void RegisterEventListener(::GlobalNamespace::OVRManager_EventListener* listener);
    // public System.Void DeregisterEventListener(OVRManager/EventListener listener)
    // Offset: 0x48D9E48
    void DeregisterEventListener(::GlobalNamespace::OVRManager_EventListener* listener);
    // static public System.Version get_utilitiesVersion()
    // Offset: 0x48D9EA0
    static ::System::Version* get_utilitiesVersion();
    // static public System.Version get_pluginVersion()
    // Offset: 0x48D9EF8
    static ::System::Version* get_pluginVersion();
    // static public System.Version get_sdkVersion()
    // Offset: 0x48D9F48
    static ::System::Version* get_sdkVersion();
    // static private System.Boolean MixedRealityEnabledFromCmd()
    // Offset: 0x48D9F98
    static bool MixedRealityEnabledFromCmd();
    // static private System.Boolean UseDirectCompositionFromCmd()
    // Offset: 0x48DA050
    static bool UseDirectCompositionFromCmd();
    // static private System.Boolean UseExternalCompositionFromCmd()
    // Offset: 0x48DA108
    static bool UseExternalCompositionFromCmd();
    // static private System.Boolean CreateMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0x48DA1C0
    static bool CreateMixedRealityCaptureConfigurationFileFromCmd();
    // static private System.Boolean LoadMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0x48DA278
    static bool LoadMixedRealityCaptureConfigurationFileFromCmd();
    // static public System.Boolean IsUnityAlphaOrBetaVersion()
    // Offset: 0x48DA330
    static bool IsUnityAlphaOrBetaVersion();
    // private System.Void InitOVRManager()
    // Offset: 0x48DA420
    void InitOVRManager();
    // private System.Void InitPermissionRequest()
    // Offset: 0x48DBCB4
    void InitPermissionRequest();
    // private System.Void Awake()
    // Offset: 0x48DBFDC
    void Awake();
    // private System.Void SetCurrentXRDevice()
    // Offset: 0x48DC048
    void SetCurrentXRDevice();
    // static public UnityEngine.XR.XRDisplaySubsystem GetCurrentDisplaySubsystem()
    // Offset: 0x48DC198
    static ::UnityEngine::XR::XRDisplaySubsystem* GetCurrentDisplaySubsystem();
    // static public UnityEngine.XR.XRDisplaySubsystemDescriptor GetCurrentDisplaySubsystemDescriptor()
    // Offset: 0x48DC334
    static ::UnityEngine::XR::XRDisplaySubsystemDescriptor* GetCurrentDisplaySubsystemDescriptor();
    // static public UnityEngine.XR.XRInputSubsystem GetCurrentInputSubsystem()
    // Offset: 0x48DC4D0
    static ::UnityEngine::XR::XRInputSubsystem* GetCurrentInputSubsystem();
    // private System.Void Initialize()
    // Offset: 0x48DBA14
    void Initialize();
    // private System.Void Update()
    // Offset: 0x48DC66C
    void Update();
    // private System.Void UpdateHMDEvents()
    // Offset: 0x48DE984
    void UpdateHMDEvents();
    // static private UnityEngine.Camera FindMainCamera()
    // Offset: 0x48D9434
    static ::UnityEngine::Camera* FindMainCamera();
    // private System.Void OnDisable()
    // Offset: 0x48DFB5C
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0x48DFC14
    void LateUpdate();
    // private System.Void FixedUpdate()
    // Offset: 0x48DFE28
    void FixedUpdate();
    // private System.Void OnDestroy()
    // Offset: 0x48DFE78
    void OnDestroy();
    // private System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0x48DFF14
    void OnApplicationPause(bool pause);
    // private System.Void OnApplicationFocus(System.Boolean focus)
    // Offset: 0x48DFF9C
    void OnApplicationFocus(bool focus);
    // private System.Void OnApplicationQuit()
    // Offset: 0x48E0024
    void OnApplicationQuit();
    // public System.Void ReturnToLauncher()
    // Offset: 0x48E008C
    void ReturnToLauncher();
    // static public System.Void PlatformUIConfirmQuit()
    // Offset: 0x48E00D8
    static void PlatformUIConfirmQuit();
    // static public System.Void StaticInitializeMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration)
    // Offset: 0x48DB498
    static void StaticInitializeMixedRealityCapture(::GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration);
    // static public System.Void StaticUpdateMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration, UnityEngine.GameObject gameObject, OVRManager/TrackingOrigin trackingOrigin)
    // Offset: 0x48DF430
    static void StaticUpdateMixedRealityCapture(::GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration, ::UnityEngine::GameObject* gameObject, ::GlobalNamespace::OVRManager_TrackingOrigin trackingOrigin);
    // static public System.Void StaticShutdownMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration)
    // Offset: 0x48DE6F0
    static void StaticShutdownMixedRealityCapture(::GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration);
    // static private System.Boolean PassthroughInitializedOrPending(OVRManager/PassthroughInitializationState state)
    // Offset: 0x48E0748
    static bool PassthroughInitializedOrPending(::GlobalNamespace::OVRManager_PassthroughInitializationState state);
    // static private System.Boolean InitializeInsightPassthrough()
    // Offset: 0x48DBDB4
    static bool InitializeInsightPassthrough();
    // static private System.Void ShutdownInsightPassthrough()
    // Offset: 0x48DE804
    static void ShutdownInsightPassthrough();
    // static private System.Void UpdateInsightPassthrough(System.Boolean shouldBeEnabled)
    // Offset: 0x48DF8F4
    static void UpdateInsightPassthrough(bool shouldBeEnabled);
    // static public System.Boolean IsMultimodalHandsControllersSupported()
    // Offset: 0x48E0758
    static bool IsMultimodalHandsControllersSupported();
    // static public System.Boolean IsInsightPassthroughSupported()
    // Offset: 0x48E07A8
    static bool IsInsightPassthroughSupported();
    // static public OVRManager/PassthroughCapabilities GetPassthroughCapabilities()
    // Offset: 0x48E07F8
    static ::GlobalNamespace::OVRManager_PassthroughCapabilities* GetPassthroughCapabilities();
    // static public System.Boolean IsInsightPassthroughInitialized()
    // Offset: 0x48E099C
    static bool IsInsightPassthroughInitialized();
    // static public System.Boolean HasInsightPassthroughInitFailed()
    // Offset: 0x48E0A14
    static bool HasInsightPassthroughInitFailed();
    // static public System.Boolean IsInsightPassthroughInitPending()
    // Offset: 0x48E0A8C
    static bool IsInsightPassthroughInitPending();
    // static public System.Boolean IsPassthroughRecommended()
    // Offset: 0x48E0B04
    static bool IsPassthroughRecommended();
    // static public System.Boolean IsOpenXRLoaderActive()
    // Offset: 0x48E0B70
    static bool IsOpenXRLoaderActive();
    // public System.Void .ctor()
    // Offset: 0x48E0B78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x48E0C9C
    static void _cctor();
  }; // OVRManager
  #pragma pack(pop)
  static check_size<sizeof(OVRManager), 288 + sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::OVRManager_EventListener*>*)> __GlobalNamespace_OVRManagerSizeCheck;
  static_assert(sizeof(OVRManager) == 0x128);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager* (*)()>(&GlobalNamespace::OVRManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager*)>(&GlobalNamespace::OVRManager::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_display
// Il2CppName: get_display
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRDisplay* (*)()>(&GlobalNamespace::OVRManager::get_display)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_display", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_display
// Il2CppName: set_display
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRDisplay*)>(&GlobalNamespace::OVRManager::set_display)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRDisplay")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_display", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tracker
// Il2CppName: get_tracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTracker* (*)()>(&GlobalNamespace::OVRManager::get_tracker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_tracker
// Il2CppName: set_tracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRTracker*)>(&GlobalNamespace::OVRManager::set_tracker)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_tracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_boundary
// Il2CppName: get_boundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRBoundary* (*)()>(&GlobalNamespace::OVRManager::get_boundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_boundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_boundary
// Il2CppName: set_boundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRBoundary*)>(&GlobalNamespace::OVRManager::set_boundary)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRBoundary")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_boundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_runtimeSettings
// Il2CppName: get_runtimeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRRuntimeSettings* (*)()>(&GlobalNamespace::OVRManager::get_runtimeSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_runtimeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_runtimeSettings
// Il2CppName: set_runtimeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRRuntimeSettings*)>(&GlobalNamespace::OVRManager::set_runtimeSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRRuntimeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_runtimeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_profile
// Il2CppName: get_profile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRProfile* (*)()>(&GlobalNamespace::OVRManager::get_profile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_profile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDAcquired
// Il2CppName: add_HMDAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDAcquired
// Il2CppName: remove_HMDAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDLost
// Il2CppName: add_HMDLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDLost
// Il2CppName: remove_HMDLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDMounted
// Il2CppName: add_HMDMounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDMounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDMounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDMounted
// Il2CppName: remove_HMDMounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDMounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDMounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDUnmounted
// Il2CppName: add_HMDUnmounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDUnmounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDUnmounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDUnmounted
// Il2CppName: remove_HMDUnmounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDUnmounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDUnmounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_VrFocusAcquired
// Il2CppName: add_VrFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_VrFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_VrFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_VrFocusAcquired
// Il2CppName: remove_VrFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_VrFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_VrFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_VrFocusLost
// Il2CppName: add_VrFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_VrFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_VrFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_VrFocusLost
// Il2CppName: remove_VrFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_VrFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_VrFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_InputFocusAcquired
// Il2CppName: add_InputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_InputFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_InputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_InputFocusAcquired
// Il2CppName: remove_InputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_InputFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_InputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_InputFocusLost
// Il2CppName: add_InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_InputFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_InputFocusLost
// Il2CppName: remove_InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_InputFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_AudioOutChanged
// Il2CppName: add_AudioOutChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_AudioOutChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_AudioOutChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_AudioOutChanged
// Il2CppName: remove_AudioOutChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_AudioOutChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_AudioOutChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_AudioInChanged
// Il2CppName: add_AudioInChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_AudioInChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_AudioInChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_AudioInChanged
// Il2CppName: remove_AudioInChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_AudioInChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_AudioInChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_TrackingAcquired
// Il2CppName: add_TrackingAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_TrackingAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_TrackingAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_TrackingAcquired
// Il2CppName: remove_TrackingAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_TrackingAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_TrackingAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_TrackingLost
// Il2CppName: add_TrackingLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_TrackingLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_TrackingLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_TrackingLost
// Il2CppName: remove_TrackingLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_TrackingLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_TrackingLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_DisplayRefreshRateChanged
// Il2CppName: add_DisplayRefreshRateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<float, float>*)>(&GlobalNamespace::OVRManager::add_DisplayRefreshRateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_DisplayRefreshRateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_DisplayRefreshRateChanged
// Il2CppName: remove_DisplayRefreshRateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<float, float>*)>(&GlobalNamespace::OVRManager::remove_DisplayRefreshRateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_DisplayRefreshRateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpatialAnchorCreateComplete
// Il2CppName: add_SpatialAnchorCreateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>*)>(&GlobalNamespace::OVRManager::add_SpatialAnchorCreateComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpatialAnchorCreateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpatialAnchorCreateComplete
// Il2CppName: remove_SpatialAnchorCreateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid>*)>(&GlobalNamespace::OVRManager::remove_SpatialAnchorCreateComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpatialAnchorCreateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceSetComponentStatusComplete
// Il2CppName: add_SpaceSetComponentStatusComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>*)>(&GlobalNamespace::OVRManager::add_SpaceSetComponentStatusComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`6"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Guid"), ::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceSetComponentStatusComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceSetComponentStatusComplete
// Il2CppName: remove_SpaceSetComponentStatusComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_6<uint64_t, bool, ::GlobalNamespace::OVRSpace, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceComponentType, bool>*)>(&GlobalNamespace::OVRManager::remove_SpaceSetComponentStatusComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`6"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Guid"), ::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceSetComponentStatusComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceQueryResults
// Il2CppName: add_SpaceQueryResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<uint64_t>*)>(&GlobalNamespace::OVRManager::add_SpaceQueryResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceQueryResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceQueryResults
// Il2CppName: remove_SpaceQueryResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<uint64_t>*)>(&GlobalNamespace::OVRManager::remove_SpaceQueryResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceQueryResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceQueryComplete
// Il2CppName: add_SpaceQueryComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, bool>*)>(&GlobalNamespace::OVRManager::add_SpaceQueryComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceQueryComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceQueryComplete
// Il2CppName: remove_SpaceQueryComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, bool>*)>(&GlobalNamespace::OVRManager::remove_SpaceQueryComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceQueryComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceSaveComplete
// Il2CppName: add_SpaceSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>*)>(&GlobalNamespace::OVRManager::add_SpaceSaveComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceSaveComplete
// Il2CppName: remove_SpaceSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, ::GlobalNamespace::OVRSpace, bool, ::System::Guid>*)>(&GlobalNamespace::OVRManager::remove_SpaceSaveComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpace"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceEraseComplete
// Il2CppName: add_SpaceEraseComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>*)>(&GlobalNamespace::OVRManager::add_SpaceEraseComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "Guid"), ::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceEraseComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceEraseComplete
// Il2CppName: remove_SpaceEraseComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_4<uint64_t, bool, ::System::Guid, ::GlobalNamespace::OVRPlugin::SpaceStorageLocation>*)>(&GlobalNamespace::OVRManager::remove_SpaceEraseComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "Guid"), ::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceStorageLocation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceEraseComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_ShareSpacesComplete
// Il2CppName: add_ShareSpacesComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRManager::add_ShareSpacesComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_ShareSpacesComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_ShareSpacesComplete
// Il2CppName: remove_ShareSpacesComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRManager::remove_ShareSpacesComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_ShareSpacesComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SpaceListSaveComplete
// Il2CppName: add_SpaceListSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRManager::add_SpaceListSaveComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SpaceListSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SpaceListSaveComplete
// Il2CppName: remove_SpaceListSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, ::GlobalNamespace::OVRSpatialAnchor::OperationResult>*)>(&GlobalNamespace::OVRManager::remove_SpaceListSaveComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor/OperationResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SpaceListSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_SceneCaptureComplete
// Il2CppName: add_SceneCaptureComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, bool>*)>(&GlobalNamespace::OVRManager::add_SceneCaptureComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_SceneCaptureComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_SceneCaptureComplete
// Il2CppName: remove_SceneCaptureComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<uint64_t, bool>*)>(&GlobalNamespace::OVRManager::remove_SceneCaptureComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_SceneCaptureComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HSWDismissed
// Il2CppName: add_HSWDismissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HSWDismissed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HSWDismissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HSWDismissed
// Il2CppName: remove_HSWDismissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HSWDismissed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HSWDismissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isHmdPresent
// Il2CppName: get_isHmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_isHmdPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isHmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isHmdPresent
// Il2CppName: set_isHmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_isHmdPresent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isHmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_audioOutId
// Il2CppName: get_audioOutId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRManager::get_audioOutId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_audioOutId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_audioInId
// Il2CppName: get_audioInId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRManager::get_audioInId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_audioInId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_hasVrFocus
// Il2CppName: get_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_hasVrFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_hasVrFocus
// Il2CppName: set_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_hasVrFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_hasInputFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_chromatic
// Il2CppName: get_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_chromatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_chromatic
// Il2CppName: set_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_chromatic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_monoscopic
// Il2CppName: get_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_monoscopic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_monoscopic
// Il2CppName: set_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_monoscopic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_sharpenType
// Il2CppName: get_sharpenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::LayerSharpenType (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_sharpenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_sharpenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_sharpenType
// Il2CppName: set_sharpenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRPlugin::LayerSharpenType)>(&GlobalNamespace::OVRManager::set_sharpenType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerSharpenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_sharpenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_colorGamut
// Il2CppName: get_colorGamut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_ColorSpace (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_colorGamut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_colorGamut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_colorGamut
// Il2CppName: set_colorGamut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_ColorSpace)>(&GlobalNamespace::OVRManager::set_colorGamut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/ColorSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_colorGamut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_nativeColorGamut
// Il2CppName: get_nativeColorGamut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_ColorSpace (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_nativeColorGamut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_nativeColorGamut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsAdaptiveResSupportedByEngine
// Il2CppName: IsAdaptiveResSupportedByEngine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsAdaptiveResSupportedByEngine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsAdaptiveResSupportedByEngine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_headPoseRelativeOffsetRotation
// Il2CppName: get_headPoseRelativeOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_headPoseRelativeOffsetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_headPoseRelativeOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_headPoseRelativeOffsetRotation
// Il2CppName: set_headPoseRelativeOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRManager::set_headPoseRelativeOffsetRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_headPoseRelativeOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_headPoseRelativeOffsetTranslation
// Il2CppName: get_headPoseRelativeOffsetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_headPoseRelativeOffsetTranslation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_headPoseRelativeOffsetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_headPoseRelativeOffsetTranslation
// Il2CppName: set_headPoseRelativeOffsetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRManager::set_headPoseRelativeOffsetTranslation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_headPoseRelativeOffsetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: get_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: set_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_enableMixedReality
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_enableMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_enableMixedReality
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_enableMixedReality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::LayerMask)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::LayerMask)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_compositionMethod
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_CompositionMethod (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_compositionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_compositionMethod
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_CompositionMethod)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_compositionMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/CompositionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_CameraDevice (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_CameraDevice)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/CameraDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(int)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeyColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeyColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_useDynamicLighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_useDynamicLighting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_depthQuality
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_DepthQuality (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_depthQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_depthQuality
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_DepthQuality)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_depthQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/DepthQuality")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_VirtualGreenScreenType (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_VirtualGreenScreenType)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/VirtualGreenScreenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(float)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_MrcActivationMode (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_mrcActivationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_MrcActivationMode)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_mrcActivationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/MrcActivationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject
// Il2CppName: OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject
// Il2CppName: OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)>(&GlobalNamespace::OVRManager::OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/InstantiateMrcCameraDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrApi
// Il2CppName: get_xrApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_XrApi (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrInstance
// Il2CppName: get_xrInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrSession
// Il2CppName: get_xrSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_vsyncCount
// Il2CppName: get_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_vsyncCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_vsyncCount
// Il2CppName: set_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(int)>(&GlobalNamespace::OVRManager::set_vsyncCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryLevel
// Il2CppName: get_batteryLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_batteryLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryTemperature
// Il2CppName: get_batteryTemperature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_batteryTemperature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryTemperature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryStatus
// Il2CppName: get_batteryStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_batteryStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_volumeLevel
// Il2CppName: get_volumeLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_volumeLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_volumeLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_suggestedCpuPerfLevel
// Il2CppName: get_suggestedCpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRManager::get_suggestedCpuPerfLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_suggestedCpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_suggestedCpuPerfLevel
// Il2CppName: set_suggestedCpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_ProcessorPerformanceLevel)>(&GlobalNamespace::OVRManager::set_suggestedCpuPerfLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/ProcessorPerformanceLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_suggestedCpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_suggestedGpuPerfLevel
// Il2CppName: get_suggestedGpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRManager::get_suggestedGpuPerfLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_suggestedGpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_suggestedGpuPerfLevel
// Il2CppName: set_suggestedGpuPerfLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_ProcessorPerformanceLevel)>(&GlobalNamespace::OVRManager::set_suggestedGpuPerfLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/ProcessorPerformanceLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_suggestedGpuPerfLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_cpuLevel
// Il2CppName: get_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_cpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_cpuLevel
// Il2CppName: set_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRManager::set_cpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuLevel
// Il2CppName: get_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_gpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_gpuLevel
// Il2CppName: set_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRManager::set_gpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isPowerSavingActive
// Il2CppName: get_isPowerSavingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_isPowerSavingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isPowerSavingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_eyeTextureFormat
// Il2CppName: get_eyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_EyeTextureFormat (*)()>(&GlobalNamespace::OVRManager::get_eyeTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_eyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_eyeTextureFormat
// Il2CppName: set_eyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_EyeTextureFormat)>(&GlobalNamespace::OVRManager::set_eyeTextureFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/EyeTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_eyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_eyeTrackedFoveatedRenderingSupported
// Il2CppName: get_eyeTrackedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_eyeTrackedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_eyeTrackedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: get_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: set_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnPermissionGranted
// Il2CppName: OnPermissionGranted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::OVRManager::OnPermissionGranted)> {
  static const MethodInfo* get() {
    static auto* permissionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnPermissionGranted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permissionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_foveatedRenderingLevel
// Il2CppName: get_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_FoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRManager::get_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_foveatedRenderingLevel
// Il2CppName: set_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_FoveatedRenderingLevel)>(&GlobalNamespace::OVRManager::set_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/FoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_fixedFoveatedRenderingSupported
// Il2CppName: get_fixedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_fixedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_fixedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_fixedFoveatedRenderingLevel
// Il2CppName: get_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRManager::get_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_fixedFoveatedRenderingLevel
// Il2CppName: set_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel)>(&GlobalNamespace::OVRManager::set_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/FixedFoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_useDynamicFoveatedRendering
// Il2CppName: get_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_useDynamicFoveatedRendering
// Il2CppName: set_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_useDynamicFixedFoveatedRendering
// Il2CppName: get_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_useDynamicFixedFoveatedRendering
// Il2CppName: set_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tiledMultiResSupported
// Il2CppName: get_tiledMultiResSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_tiledMultiResSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tiledMultiResLevel
// Il2CppName: get_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_TiledMultiResLevel (*)()>(&GlobalNamespace::OVRManager::get_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_tiledMultiResLevel
// Il2CppName: set_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_TiledMultiResLevel)>(&GlobalNamespace::OVRManager::set_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/TiledMultiResLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuUtilSupported
// Il2CppName: get_gpuUtilSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_gpuUtilSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuUtilLevel
// Il2CppName: get_gpuUtilLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_gpuUtilLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_systemHeadsetType
// Il2CppName: get_systemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_SystemHeadsetType (*)()>(&GlobalNamespace::OVRManager::get_systemHeadsetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_systemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetColorScaleAndOffset
// Il2CppName: SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4, bool)>(&GlobalNamespace::OVRManager::SetColorScaleAndOffset)> {
  static const MethodInfo* get() {
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* applyToAllLayers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScale, colorOffset, applyToAllLayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetOpenVRLocalPose
// Il2CppName: SetOpenVRLocalPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&GlobalNamespace::OVRManager::SetOpenVRLocalPose)> {
  static const MethodInfo* get() {
    static auto* leftPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rightPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* leftRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rightRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetOpenVRLocalPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftPos, rightPos, leftRot, rightRot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetOpenVRControllerOffset
// Il2CppName: GetOpenVRControllerOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPose (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::OVRManager::GetOpenVRControllerOffset)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetOpenVRControllerOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetSpaceWarp
// Il2CppName: SetSpaceWarp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::SetSpaceWarp)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetSpaceWarp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetSpaceWarp
// Il2CppName: GetSpaceWarp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::GetSpaceWarp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetSpaceWarp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetDepthSubmission
// Il2CppName: SetDepthSubmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRManager::SetDepthSubmission)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetDepthSubmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_trackingOriginType
// Il2CppName: get_trackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_TrackingOrigin (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_trackingOriginType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_trackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_trackingOriginType
// Il2CppName: set_trackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_TrackingOrigin)>(&GlobalNamespace::OVRManager::set_trackingOriginType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_trackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_IsSimultaneousHandsAndControllersSupported
// Il2CppName: get_IsSimultaneousHandsAndControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_IsSimultaneousHandsAndControllersSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_IsSimultaneousHandsAndControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isSupportedPlatform
// Il2CppName: get_isSupportedPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_isSupportedPlatform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isSupportedPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isSupportedPlatform
// Il2CppName: set_isSupportedPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_isSupportedPlatform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isSupportedPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isUserPresent
// Il2CppName: get_isUserPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_isUserPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isUserPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isUserPresent
// Il2CppName: set_isUserPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_isUserPresent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isUserPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::RegisterEventListener
// Il2CppName: RegisterEventListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_EventListener*)>(&GlobalNamespace::OVRManager::RegisterEventListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("", "OVRManager/EventListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "RegisterEventListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::DeregisterEventListener
// Il2CppName: DeregisterEventListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_EventListener*)>(&GlobalNamespace::OVRManager::DeregisterEventListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("", "OVRManager/EventListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "DeregisterEventListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_utilitiesVersion
// Il2CppName: get_utilitiesVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_utilitiesVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_utilitiesVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_pluginVersion
// Il2CppName: get_pluginVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_pluginVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_pluginVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_sdkVersion
// Il2CppName: get_sdkVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_sdkVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_sdkVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::MixedRealityEnabledFromCmd
// Il2CppName: MixedRealityEnabledFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::MixedRealityEnabledFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "MixedRealityEnabledFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UseDirectCompositionFromCmd
// Il2CppName: UseDirectCompositionFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::UseDirectCompositionFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UseDirectCompositionFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UseExternalCompositionFromCmd
// Il2CppName: UseExternalCompositionFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::UseExternalCompositionFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UseExternalCompositionFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::CreateMixedRealityCaptureConfigurationFileFromCmd
// Il2CppName: CreateMixedRealityCaptureConfigurationFileFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::CreateMixedRealityCaptureConfigurationFileFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "CreateMixedRealityCaptureConfigurationFileFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::LoadMixedRealityCaptureConfigurationFileFromCmd
// Il2CppName: LoadMixedRealityCaptureConfigurationFileFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::LoadMixedRealityCaptureConfigurationFileFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "LoadMixedRealityCaptureConfigurationFileFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsUnityAlphaOrBetaVersion
// Il2CppName: IsUnityAlphaOrBetaVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsUnityAlphaOrBetaVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsUnityAlphaOrBetaVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::InitOVRManager
// Il2CppName: InitOVRManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::InitOVRManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "InitOVRManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::InitPermissionRequest
// Il2CppName: InitPermissionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::InitPermissionRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "InitPermissionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetCurrentXRDevice
// Il2CppName: SetCurrentXRDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::SetCurrentXRDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetCurrentXRDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetCurrentDisplaySubsystem
// Il2CppName: GetCurrentDisplaySubsystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRDisplaySubsystem* (*)()>(&GlobalNamespace::OVRManager::GetCurrentDisplaySubsystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetCurrentDisplaySubsystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetCurrentDisplaySubsystemDescriptor
// Il2CppName: GetCurrentDisplaySubsystemDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRDisplaySubsystemDescriptor* (*)()>(&GlobalNamespace::OVRManager::GetCurrentDisplaySubsystemDescriptor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetCurrentDisplaySubsystemDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetCurrentInputSubsystem
// Il2CppName: GetCurrentInputSubsystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRInputSubsystem* (*)()>(&GlobalNamespace::OVRManager::GetCurrentInputSubsystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetCurrentInputSubsystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UpdateHMDEvents
// Il2CppName: UpdateHMDEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::UpdateHMDEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UpdateHMDEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::FindMainCamera
// Il2CppName: FindMainCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (*)()>(&GlobalNamespace::OVRManager::FindMainCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "FindMainCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::ReturnToLauncher
// Il2CppName: ReturnToLauncher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::ReturnToLauncher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "ReturnToLauncher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::PlatformUIConfirmQuit
// Il2CppName: PlatformUIConfirmQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRManager::PlatformUIConfirmQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "PlatformUIConfirmQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticInitializeMixedRealityCapture
// Il2CppName: StaticInitializeMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*)>(&GlobalNamespace::OVRManager::StaticInitializeMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "OVRMixedRealityCaptureConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticInitializeMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticUpdateMixedRealityCapture
// Il2CppName: StaticUpdateMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*, ::UnityEngine::GameObject*, ::GlobalNamespace::OVRManager_TrackingOrigin)>(&GlobalNamespace::OVRManager::StaticUpdateMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "OVRMixedRealityCaptureConfiguration")->byval_arg;
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* trackingOrigin = &::il2cpp_utils::GetClassFromName("", "OVRManager/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticUpdateMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration, gameObject, trackingOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticShutdownMixedRealityCapture
// Il2CppName: StaticShutdownMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRMixedRealityCaptureConfiguration*)>(&GlobalNamespace::OVRManager::StaticShutdownMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "OVRMixedRealityCaptureConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticShutdownMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::PassthroughInitializedOrPending
// Il2CppName: PassthroughInitializedOrPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRManager_PassthroughInitializationState)>(&GlobalNamespace::OVRManager::PassthroughInitializedOrPending)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "OVRManager/PassthroughInitializationState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "PassthroughInitializedOrPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::InitializeInsightPassthrough
// Il2CppName: InitializeInsightPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::InitializeInsightPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "InitializeInsightPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::ShutdownInsightPassthrough
// Il2CppName: ShutdownInsightPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRManager::ShutdownInsightPassthrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "ShutdownInsightPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UpdateInsightPassthrough
// Il2CppName: UpdateInsightPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::UpdateInsightPassthrough)> {
  static const MethodInfo* get() {
    static auto* shouldBeEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UpdateInsightPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsMultimodalHandsControllersSupported
// Il2CppName: IsMultimodalHandsControllersSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsMultimodalHandsControllersSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsMultimodalHandsControllersSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsInsightPassthroughSupported
// Il2CppName: IsInsightPassthroughSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsInsightPassthroughSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsInsightPassthroughSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetPassthroughCapabilities
// Il2CppName: GetPassthroughCapabilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_PassthroughCapabilities* (*)()>(&GlobalNamespace::OVRManager::GetPassthroughCapabilities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetPassthroughCapabilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsInsightPassthroughInitialized
// Il2CppName: IsInsightPassthroughInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsInsightPassthroughInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsInsightPassthroughInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::HasInsightPassthroughInitFailed
// Il2CppName: HasInsightPassthroughInitFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::HasInsightPassthroughInitFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "HasInsightPassthroughInitFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsInsightPassthroughInitPending
// Il2CppName: IsInsightPassthroughInitPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsInsightPassthroughInitPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsInsightPassthroughInitPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsPassthroughRecommended
// Il2CppName: IsPassthroughRecommended
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsPassthroughRecommended)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsPassthroughRecommended", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsOpenXRLoaderActive
// Il2CppName: IsOpenXRLoaderActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsOpenXRLoaderActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsOpenXRLoaderActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
