// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayerCollection
#include "GlobalNamespace/PlayerCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0*, "", "PlayerCollection/<>c__DisplayClass5_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayerCollection/<>c__DisplayClass5_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlayerCollection::$$c__DisplayClass5_0 : public ::Il2CppObject {
    public:
    public:
    // public NetPlayer otherPlayer
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::NetPlayer* otherPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetPlayer*) == 0x8);
    public:
    // Creating conversion operator: operator ::GlobalNamespace::NetPlayer*
    constexpr operator ::GlobalNamespace::NetPlayer*() const noexcept {
      return otherPlayer;
    }
    // Get instance field reference: public NetPlayer otherPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& dyn_otherPlayer();
    // public System.Void .ctor()
    // Offset: 0x29614A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerCollection::$$c__DisplayClass5_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerCollection::$$c__DisplayClass5_0*, creationType>()));
    }
    // System.Boolean <OnPlayerLeftRoom>b__0(VRRig r)
    // Offset: 0x2961534
    bool $OnPlayerLeftRoom$b__0(::GlobalNamespace::VRRig* r);
  }; // PlayerCollection/<>c__DisplayClass5_0
  #pragma pack(pop)
  static check_size<sizeof(PlayerCollection::$$c__DisplayClass5_0), 16 + sizeof(::GlobalNamespace::NetPlayer*)> __GlobalNamespace_PlayerCollection_$$c__DisplayClass5_0SizeCheck;
  static_assert(sizeof(PlayerCollection::$$c__DisplayClass5_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0::$OnPlayerLeftRoom$b__0
// Il2CppName: <OnPlayerLeftRoom>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0::$OnPlayerLeftRoom$b__0)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerCollection::$$c__DisplayClass5_0*), "<OnPlayerLeftRoom>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
