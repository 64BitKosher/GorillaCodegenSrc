// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RandomNumberGenerator
  class RandomNumberGenerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AESHMAC
  class AESHMAC;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AESHMAC);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AESHMAC*, "", "AESHMAC");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: AESHMAC
  // [TokenAttribute] Offset: FFFFFFFF
  class AESHMAC : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Security.Cryptography.RandomNumberGenerator gRNG
    static ::System::Security::Cryptography::RandomNumberGenerator* _get_gRNG();
    // Set static field: static private readonly System.Security.Cryptography.RandomNumberGenerator gRNG
    static void _set_gRNG(::System::Security::Cryptography::RandomNumberGenerator* value);
    // static field const value: static public System.Int32 BlockBitSize
    static constexpr const int BlockBitSize = 128;
    // Get static field: static public System.Int32 BlockBitSize
    static int _get_BlockBitSize();
    // Set static field: static public System.Int32 BlockBitSize
    static void _set_BlockBitSize(int value);
    // static field const value: static public System.Int32 KeyBitSize
    static constexpr const int KeyBitSize = 256;
    // Get static field: static public System.Int32 KeyBitSize
    static int _get_KeyBitSize();
    // Set static field: static public System.Int32 KeyBitSize
    static void _set_KeyBitSize(int value);
    // static field const value: static public System.Int32 SaltBitSize
    static constexpr const int SaltBitSize = 64;
    // Get static field: static public System.Int32 SaltBitSize
    static int _get_SaltBitSize();
    // Set static field: static public System.Int32 SaltBitSize
    static void _set_SaltBitSize(int value);
    // static field const value: static public System.Int32 Iterations
    static constexpr const int Iterations = 10000;
    // Get static field: static public System.Int32 Iterations
    static int _get_Iterations();
    // Set static field: static public System.Int32 Iterations
    static void _set_Iterations(int value);
    // static field const value: static public System.Int32 MinPasswordLength
    static constexpr const int MinPasswordLength = 12;
    // Get static field: static public System.Int32 MinPasswordLength
    static int _get_MinPasswordLength();
    // Set static field: static public System.Int32 MinPasswordLength
    static void _set_MinPasswordLength(int value);
    // static public System.Byte[] NewKey()
    // Offset: 0x274765C
    static ::ArrayW<uint8_t> NewKey();
    // static public System.String SimpleEncrypt(System.String plaintext, System.Byte[] key, System.Byte[] auth, System.Byte[] salt)
    // Offset: 0x27476F8
    static ::StringW SimpleEncrypt(::StringW plaintext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, ::ArrayW<uint8_t> salt);
    // static public System.String SimpleDecrypt(System.String ciphertext, System.Byte[] key, System.Byte[] auth, System.Int32 saltLength)
    // Offset: 0x27486D8
    static ::StringW SimpleDecrypt(::StringW ciphertext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, int saltLength);
    // static public System.String SimpleEncryptWithKey(System.String plaintext, System.String key, System.Byte[] salt)
    // Offset: 0x27493F4
    static ::StringW SimpleEncryptWithKey(::StringW plaintext, ::StringW key, ::ArrayW<uint8_t> salt);
    // static public System.String SimpleDecryptWithKey(System.String ciphertext, System.String key, System.Int32 saltLength)
    // Offset: 0x2749A8C
    static ::StringW SimpleDecryptWithKey(::StringW ciphertext, ::StringW key, int saltLength);
    // static public System.Byte[] SimpleEncrypt(System.Byte[] plaintext, System.Byte[] key, System.Byte[] auth, System.Byte[] salt)
    // Offset: 0x2747830
    static ::ArrayW<uint8_t> SimpleEncrypt(::ArrayW<uint8_t> plaintext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, ::ArrayW<uint8_t> salt);
    // static public System.Byte[] SimpleDecrypt(System.Byte[] ciphertext, System.Byte[] key, System.Byte[] auth, System.Int32 saltLength)
    // Offset: 0x2748818
    static ::ArrayW<uint8_t> SimpleDecrypt(::ArrayW<uint8_t> ciphertext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, int saltLength);
    // static public System.Byte[] SimpleEncryptWithKey(System.Byte[] plaintext, System.String key, System.Byte[] salt)
    // Offset: 0x274951C
    static ::ArrayW<uint8_t> SimpleEncryptWithKey(::ArrayW<uint8_t> plaintext, ::StringW key, ::ArrayW<uint8_t> salt);
    // static public System.Byte[] SimpleDecryptWithKey(System.Byte[] ciphertext, System.String key, System.Int32 saltLength)
    // Offset: 0x2749BC4
    static ::ArrayW<uint8_t> SimpleDecryptWithKey(::ArrayW<uint8_t> ciphertext, ::StringW key, int saltLength);
    // static private System.Byte[] Rfc2898DeriveBytes(System.String password, System.Byte[] salt, System.Int32 iterations, System.Int32 numBytes)
    // Offset: 0x2749DF0
    static ::ArrayW<uint8_t> Rfc2898DeriveBytes(::StringW password, ::ArrayW<uint8_t> salt, int iterations, int numBytes);
    // static private System.Void .cctor()
    // Offset: 0x2749FB8
    static void _cctor();
  }; // AESHMAC
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::NewKey
// Il2CppName: NewKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)()>(&GlobalNamespace::AESHMAC::NewKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "NewKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleEncrypt
// Il2CppName: SimpleEncrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&GlobalNamespace::AESHMAC::SimpleEncrypt)> {
  static const MethodInfo* get() {
    static auto* plaintext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* auth = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* salt = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleEncrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plaintext, key, auth, salt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleDecrypt
// Il2CppName: SimpleDecrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, int)>(&GlobalNamespace::AESHMAC::SimpleDecrypt)> {
  static const MethodInfo* get() {
    static auto* ciphertext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* auth = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* saltLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleDecrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ciphertext, key, auth, saltLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleEncryptWithKey
// Il2CppName: SimpleEncryptWithKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::ArrayW<uint8_t>)>(&GlobalNamespace::AESHMAC::SimpleEncryptWithKey)> {
  static const MethodInfo* get() {
    static auto* plaintext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* salt = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleEncryptWithKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plaintext, key, salt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleDecryptWithKey
// Il2CppName: SimpleDecryptWithKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, int)>(&GlobalNamespace::AESHMAC::SimpleDecryptWithKey)> {
  static const MethodInfo* get() {
    static auto* ciphertext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* saltLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleDecryptWithKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ciphertext, key, saltLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleEncrypt
// Il2CppName: SimpleEncrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&GlobalNamespace::AESHMAC::SimpleEncrypt)> {
  static const MethodInfo* get() {
    static auto* plaintext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* auth = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* salt = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleEncrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plaintext, key, auth, salt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleDecrypt
// Il2CppName: SimpleDecrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, int)>(&GlobalNamespace::AESHMAC::SimpleDecrypt)> {
  static const MethodInfo* get() {
    static auto* ciphertext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* auth = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* saltLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleDecrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ciphertext, key, auth, saltLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleEncryptWithKey
// Il2CppName: SimpleEncryptWithKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::StringW, ::ArrayW<uint8_t>)>(&GlobalNamespace::AESHMAC::SimpleEncryptWithKey)> {
  static const MethodInfo* get() {
    static auto* plaintext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* salt = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleEncryptWithKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plaintext, key, salt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::SimpleDecryptWithKey
// Il2CppName: SimpleDecryptWithKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::StringW, int)>(&GlobalNamespace::AESHMAC::SimpleDecryptWithKey)> {
  static const MethodInfo* get() {
    static auto* ciphertext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* saltLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "SimpleDecryptWithKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ciphertext, key, saltLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::Rfc2898DeriveBytes
// Il2CppName: Rfc2898DeriveBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW, ::ArrayW<uint8_t>, int, int)>(&GlobalNamespace::AESHMAC::Rfc2898DeriveBytes)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* salt = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* iterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), "Rfc2898DeriveBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password, salt, iterations, numBytes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AESHMAC::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AESHMAC::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AESHMAC*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
