// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
// Including type: SecondLookSkeleton/GhostState
#include "GlobalNamespace/SecondLookSkeleton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: SecondLookSkeleton because it is already included!
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SecondLookSkeletonSynchValues
  class SecondLookSkeletonSynchValues;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SecondLookSkeletonSynchValues);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SecondLookSkeletonSynchValues*, "", "SecondLookSkeletonSynchValues");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: SecondLookSkeletonSynchValues
  // [TokenAttribute] Offset: FFFFFFFF
  class SecondLookSkeletonSynchValues : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IOnPhotonViewOwnerChange*/ {
    public:
    public:
    // public SecondLookSkeleton/GhostState currentState
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::SecondLookSkeleton::GhostState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SecondLookSkeleton::GhostState) == 0x4);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public SecondLookSkeleton mySkeleton
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SecondLookSkeleton* mySkeleton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SecondLookSkeleton*) == 0x8);
    // public System.Int32 currentNode
    // Size: 0x4
    // Offset: 0x50
    int currentNode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 nextNode
    // Size: 0x4
    // Offset: 0x54
    int nextNode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 angerPoint
    // Size: 0x4
    // Offset: 0x58
    int angerPoint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // Get instance field reference: public SecondLookSkeleton/GhostState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton::GhostState& dyn_currentState();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public SecondLookSkeleton mySkeleton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton*& dyn_mySkeleton();
    // Get instance field reference: public System.Int32 currentNode
    [[deprecated("Use field access instead!")]] int& dyn_currentNode();
    // Get instance field reference: public System.Int32 nextNode
    [[deprecated("Use field access instead!")]] int& dyn_nextNode();
    // Get instance field reference: public System.Int32 angerPoint
    [[deprecated("Use field access instead!")]] int& dyn_angerPoint();
    // public System.Void OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x269AC10
    void OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x269ACB4
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RemoteActivateGhost(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x269B168
    void RemoteActivateGhost(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RemotePlayerSeen(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x269B238
    void RemotePlayerSeen(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RemotePlayerCaught(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x269B3C8
    void RemotePlayerCaught(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x269B548
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecondLookSkeletonSynchValues* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecondLookSkeletonSynchValues*, creationType>()));
    }
  }; // SecondLookSkeletonSynchValues
  #pragma pack(pop)
  static check_size<sizeof(SecondLookSkeletonSynchValues), 88 + sizeof(int)> __GlobalNamespace_SecondLookSkeletonSynchValuesSizeCheck;
  static_assert(sizeof(SecondLookSkeletonSynchValues) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::OnOwnerChange
// Il2CppName: OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonSynchValues::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::SecondLookSkeletonSynchValues::OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonSynchValues*), "OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonSynchValues::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SecondLookSkeletonSynchValues::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonSynchValues*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::RemoteActivateGhost
// Il2CppName: RemoteActivateGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonSynchValues::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SecondLookSkeletonSynchValues::RemoteActivateGhost)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonSynchValues*), "RemoteActivateGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerSeen
// Il2CppName: RemotePlayerSeen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonSynchValues::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerSeen)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonSynchValues*), "RemotePlayerSeen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerCaught
// Il2CppName: RemotePlayerCaught
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SecondLookSkeletonSynchValues::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerCaught)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SecondLookSkeletonSynchValues*), "RemotePlayerCaught", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SecondLookSkeletonSynchValues::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
