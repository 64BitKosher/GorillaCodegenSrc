// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRGLTFInputNode
#include "GlobalNamespace/OVRGLTFInputNode.hpp"
// Including type: OVRBinaryChunk
#include "GlobalNamespace/OVRBinaryChunk.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFAnimationNodeMorphTargetHandler
  class OVRGLTFAnimationNodeMorphTargetHandler;
}
// Forward declaring namespace: OVRSimpleJSON
namespace OVRSimpleJSON {
  // Forward declaring type: JSONNode
  class JSONNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFAnimatinonNode
  class OVRGLTFAnimatinonNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRGLTFAnimatinonNode);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRGLTFAnimatinonNode*, "", "OVRGLTFAnimatinonNode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: OVRGLTFAnimatinonNode
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRGLTFAnimatinonNode : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection
    struct ThumbstickDirection;
    // Nested type: ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRGLTFTransformType
    struct OVRGLTFTransformType;
    // Nested type: ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRInterpolationType
    struct OVRInterpolationType;
    // Nested type: ::GlobalNamespace::OVRGLTFAnimatinonNode::InputNodeState
    struct InputNodeState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRGLTFAnimatinonNode/ThumbstickDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct ThumbstickDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ThumbstickDirection
      constexpr ThumbstickDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection None
      static constexpr const int None = 0;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection None
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_None();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection None
      static void _set_None(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection North
      static constexpr const int North = 1;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection North
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_North();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection North
      static void _set_North(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthEast
      static constexpr const int NorthEast = 2;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthEast
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_NorthEast();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthEast
      static void _set_NorthEast(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection East
      static constexpr const int East = 3;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection East
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_East();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection East
      static void _set_East(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthEast
      static constexpr const int SouthEast = 4;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthEast
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_SouthEast();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthEast
      static void _set_SouthEast(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection South
      static constexpr const int South = 5;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection South
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_South();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection South
      static void _set_South(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthWest
      static constexpr const int SouthWest = 6;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthWest
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_SouthWest();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection SouthWest
      static void _set_SouthWest(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection West
      static constexpr const int West = 7;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection West
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_West();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection West
      static void _set_West(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // static field const value: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthWest
      static constexpr const int NorthWest = 8;
      // Get static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthWest
      static ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection _get_NorthWest();
      // Set static field: static public OVRGLTFAnimatinonNode/ThumbstickDirection NorthWest
      static void _set_NorthWest(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRGLTFAnimatinonNode/ThumbstickDirection
    #pragma pack(pop)
    static check_size<sizeof(OVRGLTFAnimatinonNode::ThumbstickDirection), 0 + sizeof(int)> __GlobalNamespace_OVRGLTFAnimatinonNode_ThumbstickDirectionSizeCheck;
    static_assert(sizeof(OVRGLTFAnimatinonNode::ThumbstickDirection) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRGLTFAnimatinonNode/InputNodeState
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputNodeState/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean down
      // Size: 0x1
      // Offset: 0x0
      bool down;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: down and: t
      char __padding0[0x3] = {};
      // public System.Single t
      // Size: 0x4
      // Offset: 0x4
      float t;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public UnityEngine.Vector2 vecT
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Vector2 vecT;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      public:
      // Creating value type constructor for type: InputNodeState
      constexpr InputNodeState(bool down_ = {}, float t_ = {}, ::UnityEngine::Vector2 vecT_ = {}) noexcept : down{down_}, t{t_}, vecT{vecT_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean down
      [[deprecated("Use field access instead!")]] bool& dyn_down();
      // Get instance field reference: public System.Single t
      [[deprecated("Use field access instead!")]] float& dyn_t();
      // Get instance field reference: public UnityEngine.Vector2 vecT
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vecT();
    }; // OVRGLTFAnimatinonNode/InputNodeState
    #pragma pack(pop)
    static check_size<sizeof(OVRGLTFAnimatinonNode::InputNodeState), 8 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_OVRGLTFAnimatinonNode_InputNodeStateSizeCheck;
    static_assert(sizeof(OVRGLTFAnimatinonNode::InputNodeState) == 0x10);
    public:
    // private OVRGLTFInputNode m_intputNodeType
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::OVRGLTFInputNode m_intputNodeType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRGLTFInputNode) == 0x4);
    // Padding between fields: m_intputNodeType and: m_jsonData
    char __padding0[0x4] = {};
    // private OVRSimpleJSON.JSONNode m_jsonData
    // Size: 0x8
    // Offset: 0x18
    ::OVRSimpleJSON::JSONNode* m_jsonData;
    // Field size check
    static_assert(sizeof(::OVRSimpleJSON::JSONNode*) == 0x8);
    // private OVRBinaryChunk m_binaryChunk
    // Size: 0x18
    // Offset: 0x20
    ::GlobalNamespace::OVRBinaryChunk m_binaryChunk;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRBinaryChunk) == 0x18);
    // private UnityEngine.GameObject m_gameObj
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_gameObj;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OVRGLTFAnimatinonNode/InputNodeState m_inputNodeState
    // Size: 0x10
    // Offset: 0x40
    ::GlobalNamespace::OVRGLTFAnimatinonNode::InputNodeState m_inputNodeState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRGLTFAnimatinonNode::InputNodeState) == 0x10);
    // private OVRGLTFAnimationNodeMorphTargetHandler m_morphTargetHandler
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler* m_morphTargetHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> m_translations
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_translations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Quaternion> m_rotations
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>* m_rotations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> m_scales
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_scales;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Single> m_weights
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<float>* m_weights;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // private System.Int32 m_additiveWeightIndex
    // Size: 0x4
    // Offset: 0x78
    int m_additiveWeightIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,System.Int32> InputNodeKeyFrames
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, int>* _get_InputNodeKeyFrames();
    // Set static field: static private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,System.Int32> InputNodeKeyFrames
    static void _set_InputNodeKeyFrames(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, int>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> ThumbStickKeyFrames
    static ::System::Collections::Generic::List_1<int>* _get_ThumbStickKeyFrames();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> ThumbStickKeyFrames
    static void _set_ThumbStickKeyFrames(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private UnityEngine.Vector2[] CardDirections
    static ::ArrayW<::UnityEngine::Vector2> _get_CardDirections();
    // Set static field: static private UnityEngine.Vector2[] CardDirections
    static void _set_CardDirections(::ArrayW<::UnityEngine::Vector2> value);
    // Get instance field reference: private OVRGLTFInputNode m_intputNodeType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGLTFInputNode& dyn_m_intputNodeType();
    // Get instance field reference: private OVRSimpleJSON.JSONNode m_jsonData
    [[deprecated("Use field access instead!")]] ::OVRSimpleJSON::JSONNode*& dyn_m_jsonData();
    // Get instance field reference: private OVRBinaryChunk m_binaryChunk
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRBinaryChunk& dyn_m_binaryChunk();
    // Get instance field reference: private UnityEngine.GameObject m_gameObj
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_gameObj();
    // Get instance field reference: private OVRGLTFAnimatinonNode/InputNodeState m_inputNodeState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGLTFAnimatinonNode::InputNodeState& dyn_m_inputNodeState();
    // Get instance field reference: private OVRGLTFAnimationNodeMorphTargetHandler m_morphTargetHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler*& dyn_m_morphTargetHandler();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> m_translations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_m_translations();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Quaternion> m_rotations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*& dyn_m_rotations();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> m_scales
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_m_scales();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> m_weights
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_m_weights();
    // Get instance field reference: private System.Int32 m_additiveWeightIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_additiveWeightIndex();
    // public System.Void .ctor(OVRSimpleJSON.JSONNode jsonData, OVRBinaryChunk binaryChunk, OVRGLTFInputNode inputNodeType, UnityEngine.GameObject gameObj, OVRGLTFAnimationNodeMorphTargetHandler morphTargetHandler)
    // Offset: 0x48BCA38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGLTFAnimatinonNode* New_ctor(::OVRSimpleJSON::JSONNode* jsonData, ::GlobalNamespace::OVRBinaryChunk binaryChunk, ::GlobalNamespace::OVRGLTFInputNode inputNodeType, ::UnityEngine::GameObject* gameObj, ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler* morphTargetHandler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFAnimatinonNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGLTFAnimatinonNode*, creationType>(jsonData, binaryChunk, inputNodeType, gameObj, morphTargetHandler)));
    }
    // public System.Void AddChannel(OVRSimpleJSON.JSONNode channel, OVRSimpleJSON.JSONNode samplers)
    // Offset: 0x48BCDCC
    void AddChannel(::OVRSimpleJSON::JSONNode* channel, ::OVRSimpleJSON::JSONNode* samplers);
    // public System.Void UpdatePose(System.Boolean down)
    // Offset: 0x48BD8D0
    void UpdatePose(bool down);
    // public System.Void UpdatePose(System.Single t, System.Boolean applyDeadZone)
    // Offset: 0x48BDA64
    void UpdatePose(float t, bool applyDeadZone);
    // public System.Void UpdatePose(UnityEngine.Vector2 joystick)
    // Offset: 0x48BDEC4
    void UpdatePose(::UnityEngine::Vector2 joystick);
    // private System.Tuple`2<OVRGLTFAnimatinonNode/ThumbstickDirection,OVRGLTFAnimatinonNode/ThumbstickDirection> GetCardinalThumbsticks(UnityEngine.Vector2 joystick)
    // Offset: 0x48BE1F4
    ::System::Tuple_2<::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection, ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection>* GetCardinalThumbsticks(::UnityEngine::Vector2 joystick);
    // private UnityEngine.Vector2 GetCardinalWeights(UnityEngine.Vector2 joystick, System.Tuple`2<OVRGLTFAnimatinonNode/ThumbstickDirection,OVRGLTFAnimatinonNode/ThumbstickDirection> cardinals)
    // Offset: 0x48BE3A8
    ::UnityEngine::Vector2 GetCardinalWeights(::UnityEngine::Vector2 joystick, ::System::Tuple_2<::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection, ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection>* cardinals);
    // private System.Void ProcessAnimationSampler(OVRSimpleJSON.JSONNode samplerNode, System.Int32 nodeId, OVRGLTFAnimatinonNode/OVRGLTFTransformType transformType, OVRSimpleJSON.JSONNode extras)
    // Offset: 0x48BD0D0
    void ProcessAnimationSampler(::OVRSimpleJSON::JSONNode* samplerNode, int nodeId, ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRGLTFTransformType transformType, ::OVRSimpleJSON::JSONNode* extras);
    // private OVRGLTFAnimatinonNode/OVRGLTFTransformType GetTransformType(System.String transform)
    // Offset: 0x48BCF5C
    ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRGLTFTransformType GetTransformType(::StringW transform);
    // private OVRGLTFAnimatinonNode/OVRInterpolationType ToOVRInterpolationType(System.String interpolationType)
    // Offset: 0x48BE4FC
    ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRInterpolationType ToOVRInterpolationType(::StringW interpolationType);
    // private System.Void CopyData(ref System.Collections.Generic.List`1<T> dest, T[] src)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void CopyData(ByRef<::System::Collections::Generic::List_1<T>*> dest, ::ArrayW<T> src) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFAnimatinonNode::CopyData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractType(src)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(dest), src);
    }
    // private UnityEngine.Vector3 CloneVector3(UnityEngine.Vector3 v)
    // Offset: 0x48BCDC4
    ::UnityEngine::Vector3 CloneVector3(::UnityEngine::Vector3 v);
    // private UnityEngine.Quaternion CloneQuaternion(UnityEngine.Quaternion q)
    // Offset: 0x48BCDC8
    ::UnityEngine::Quaternion CloneQuaternion(::UnityEngine::Quaternion q);
    // static private System.Void .cctor()
    // Offset: 0x48BE660
    static void _cctor();
  }; // OVRGLTFAnimatinonNode
  #pragma pack(pop)
  static check_size<sizeof(OVRGLTFAnimatinonNode), 120 + sizeof(int)> __GlobalNamespace_OVRGLTFAnimatinonNodeSizeCheck;
  static_assert(sizeof(OVRGLTFAnimatinonNode) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRGLTFAnimatinonNode::InputNodeState, "", "OVRGLTFAnimatinonNode/InputNodeState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection, "", "OVRGLTFAnimatinonNode/ThumbstickDirection");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::AddChannel
// Il2CppName: AddChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::OVRSimpleJSON::JSONNode*, ::OVRSimpleJSON::JSONNode*)>(&GlobalNamespace::OVRGLTFAnimatinonNode::AddChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* samplers = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "AddChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, samplers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose
// Il2CppName: UpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFAnimatinonNode::*)(bool)>(&GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose)> {
  static const MethodInfo* get() {
    static auto* down = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "UpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{down});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose
// Il2CppName: UpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFAnimatinonNode::*)(float, bool)>(&GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* applyDeadZone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "UpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, applyDeadZone});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose
// Il2CppName: UpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::UnityEngine::Vector2)>(&GlobalNamespace::OVRGLTFAnimatinonNode::UpdatePose)> {
  static const MethodInfo* get() {
    static auto* joystick = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "UpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joystick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::GetCardinalThumbsticks
// Il2CppName: GetCardinalThumbsticks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Tuple_2<::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection, ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection>* (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::UnityEngine::Vector2)>(&GlobalNamespace::OVRGLTFAnimatinonNode::GetCardinalThumbsticks)> {
  static const MethodInfo* get() {
    static auto* joystick = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "GetCardinalThumbsticks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joystick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::GetCardinalWeights
// Il2CppName: GetCardinalWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::UnityEngine::Vector2, ::System::Tuple_2<::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection, ::GlobalNamespace::OVRGLTFAnimatinonNode::ThumbstickDirection>*)>(&GlobalNamespace::OVRGLTFAnimatinonNode::GetCardinalWeights)> {
  static const MethodInfo* get() {
    static auto* joystick = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* cardinals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Tuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRGLTFAnimatinonNode/ThumbstickDirection"), ::il2cpp_utils::GetClassFromName("", "OVRGLTFAnimatinonNode/ThumbstickDirection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "GetCardinalWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joystick, cardinals});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::ProcessAnimationSampler
// Il2CppName: ProcessAnimationSampler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::OVRSimpleJSON::JSONNode*, int, ::GlobalNamespace::OVRGLTFAnimatinonNode::OVRGLTFTransformType, ::OVRSimpleJSON::JSONNode*)>(&GlobalNamespace::OVRGLTFAnimatinonNode::ProcessAnimationSampler)> {
  static const MethodInfo* get() {
    static auto* samplerNode = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformType = &::il2cpp_utils::GetClassFromName("", "OVRGLTFAnimatinonNode/OVRGLTFTransformType")->byval_arg;
    static auto* extras = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "ProcessAnimationSampler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplerNode, nodeId, transformType, extras});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::GetTransformType
// Il2CppName: GetTransformType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRGLTFAnimatinonNode::OVRGLTFTransformType (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::StringW)>(&GlobalNamespace::OVRGLTFAnimatinonNode::GetTransformType)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "GetTransformType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::ToOVRInterpolationType
// Il2CppName: ToOVRInterpolationType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRGLTFAnimatinonNode::OVRInterpolationType (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::StringW)>(&GlobalNamespace::OVRGLTFAnimatinonNode::ToOVRInterpolationType)> {
  static const MethodInfo* get() {
    static auto* interpolationType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "ToOVRInterpolationType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interpolationType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::CopyData
// Il2CppName: CopyData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::CloneVector3
// Il2CppName: CloneVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRGLTFAnimatinonNode::CloneVector3)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "CloneVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::CloneQuaternion
// Il2CppName: CloneQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::OVRGLTFAnimatinonNode::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::OVRGLTFAnimatinonNode::CloneQuaternion)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), "CloneQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFAnimatinonNode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRGLTFAnimatinonNode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFAnimatinonNode*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
