// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StringEnum`1<TEnum>
  template<typename TEnum>
  struct StringEnum_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::StringEnum_1, "", "StringEnum`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: StringEnum`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TEnum>
  struct StringEnum_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private TEnum m_EnumValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TEnum m_EnumValue;
    public:
    // Creating value type constructor for type: StringEnum_1
    constexpr StringEnum_1(TEnum m_EnumValue_ = {}) noexcept : m_EnumValue{m_EnumValue_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private TEnum m_EnumValue
    [[deprecated("Use field access instead!")]] TEnum& dyn_m_EnumValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringEnum_1::dyn_m_EnumValue");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EnumValue"))->offset;
      return *reinterpret_cast<TEnum*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
  }; // StringEnum`1
  // Could not write size check! Type: StringEnum`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
