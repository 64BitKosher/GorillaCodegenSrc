// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRendererFeature
#include "UnityEngine/Rendering/Universal/ScriptableRendererFeature.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPassInput
#include "UnityEngine/Rendering/Universal/ScriptableRenderPassInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FullScreenPassRendererFeature
  class FullScreenPassRendererFeature;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FullScreenPassRendererFeature);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FullScreenPassRendererFeature*, "", "FullScreenPassRendererFeature");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: FullScreenPassRendererFeature
  // [TokenAttribute] Offset: FFFFFFFF
  class FullScreenPassRendererFeature : public ::UnityEngine::Rendering::Universal::ScriptableRendererFeature {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint
    struct InjectionPoint;
    // Nested type: ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass
    class FullScreenRenderPass;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FullScreenPassRendererFeature/InjectionPoint
    // [TokenAttribute] Offset: FFFFFFFF
    struct InjectionPoint/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InjectionPoint
      constexpr InjectionPoint(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingTransparents
      static constexpr const int BeforeRenderingTransparents = 450;
      // Get static field: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingTransparents
      static ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint _get_BeforeRenderingTransparents();
      // Set static field: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingTransparents
      static void _set_BeforeRenderingTransparents(::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint value);
      // static field const value: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingPostProcessing
      static constexpr const int BeforeRenderingPostProcessing = 550;
      // Get static field: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingPostProcessing
      static ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint _get_BeforeRenderingPostProcessing();
      // Set static field: static public FullScreenPassRendererFeature/InjectionPoint BeforeRenderingPostProcessing
      static void _set_BeforeRenderingPostProcessing(::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint value);
      // static field const value: static public FullScreenPassRendererFeature/InjectionPoint AfterRenderingPostProcessing
      static constexpr const int AfterRenderingPostProcessing = 600;
      // Get static field: static public FullScreenPassRendererFeature/InjectionPoint AfterRenderingPostProcessing
      static ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint _get_AfterRenderingPostProcessing();
      // Set static field: static public FullScreenPassRendererFeature/InjectionPoint AfterRenderingPostProcessing
      static void _set_AfterRenderingPostProcessing(::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FullScreenPassRendererFeature/InjectionPoint
    #pragma pack(pop)
    static check_size<sizeof(FullScreenPassRendererFeature::InjectionPoint), 0 + sizeof(int)> __GlobalNamespace_FullScreenPassRendererFeature_InjectionPointSizeCheck;
    static_assert(sizeof(FullScreenPassRendererFeature::InjectionPoint) == 0x4);
    public:
    // public UnityEngine.Material passMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* passMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public FullScreenPassRendererFeature/InjectionPoint injectionPoint
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint injectionPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint) == 0x4);
    // public UnityEngine.Rendering.Universal.ScriptableRenderPassInput requirements
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::Rendering::Universal::ScriptableRenderPassInput requirements;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderPassInput) == 0x4);
    // public System.Int32 passIndex
    // Size: 0x4
    // Offset: 0x30
    int passIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: passIndex and: fullScreenPass
    char __padding3[0x4] = {};
    // private FullScreenPassRendererFeature/FullScreenRenderPass fullScreenPass
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass* fullScreenPass;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*) == 0x8);
    // private System.Boolean requiresColor
    // Size: 0x1
    // Offset: 0x40
    bool requiresColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean injectedBeforeTransparents
    // Size: 0x1
    // Offset: 0x41
    bool injectedBeforeTransparents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Material passMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_passMaterial();
    // Get instance field reference: public FullScreenPassRendererFeature/InjectionPoint injectionPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint& dyn_injectionPoint();
    // Get instance field reference: public UnityEngine.Rendering.Universal.ScriptableRenderPassInput requirements
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderPassInput& dyn_requirements();
    // Get instance field reference: public System.Int32 passIndex
    [[deprecated("Use field access instead!")]] int& dyn_passIndex();
    // Get instance field reference: private FullScreenPassRendererFeature/FullScreenRenderPass fullScreenPass
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass*& dyn_fullScreenPass();
    // Get instance field reference: private System.Boolean requiresColor
    [[deprecated("Use field access instead!")]] bool& dyn_requiresColor();
    // Get instance field reference: private System.Boolean injectedBeforeTransparents
    [[deprecated("Use field access instead!")]] bool& dyn_injectedBeforeTransparents();
    // public override System.Void Create()
    // Offset: 0x526973C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Create()
    void Create();
    // public override System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5269840
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void AddRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x5269B74
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public System.Void .ctor()
    // Offset: 0x5269BB4
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullScreenPassRendererFeature* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullScreenPassRendererFeature::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullScreenPassRendererFeature*, creationType>()));
    }
  }; // FullScreenPassRendererFeature
  #pragma pack(pop)
  static check_size<sizeof(FullScreenPassRendererFeature), 65 + sizeof(bool)> __GlobalNamespace_FullScreenPassRendererFeatureSizeCheck;
  static_assert(sizeof(FullScreenPassRendererFeature) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FullScreenPassRendererFeature::InjectionPoint, "", "FullScreenPassRendererFeature/InjectionPoint");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::*)()>(&GlobalNamespace::FullScreenPassRendererFeature::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::AddRenderPasses
// Il2CppName: AddRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&GlobalNamespace::FullScreenPassRendererFeature::AddRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature*), "AddRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FullScreenPassRendererFeature::*)(bool)>(&GlobalNamespace::FullScreenPassRendererFeature::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FullScreenPassRendererFeature*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
