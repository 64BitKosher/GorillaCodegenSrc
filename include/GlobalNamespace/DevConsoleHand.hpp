// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DevConsoleInstance
#include "GlobalNamespace/DevConsoleInstance.hpp"
// Including type: ConsoleMode
#include "GlobalNamespace/ConsoleMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaDevButton
  class GorillaDevButton;
  // Forward declaring type: DevInspector
  class DevInspector;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevConsoleHand
  class DevConsoleHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevConsoleHand);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevConsoleHand*, "", "DevConsoleHand");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: DevConsoleHand
  // [TokenAttribute] Offset: FFFFFFFF
  class DevConsoleHand : public ::GlobalNamespace::DevConsoleInstance {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> otherButtonsList
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* otherButtonsList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Boolean isActuallyEnabled
    // Size: 0x1
    // Offset: 0xA8
    bool isActuallyEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isStillEnabled
    // Size: 0x1
    // Offset: 0xA9
    bool isStillEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0xAA
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: mode
    char __padding3[0x1] = {};
    // public ConsoleMode mode
    // Size: 0x4
    // Offset: 0xAC
    ::GlobalNamespace::ConsoleMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ConsoleMode) == 0x4);
    // public System.Double debugScale
    // Size: 0x8
    // Offset: 0xB0
    double debugScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double inspectorScale
    // Size: 0x8
    // Offset: 0xB8
    double inspectorScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double componentInspectorScale
    // Size: 0x8
    // Offset: 0xC0
    double componentInspectorScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> consoleButtons
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* consoleButtons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> inspectorButtons
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* inspectorButtons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> componentInspectorButtons
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* componentInspectorButtons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public GorillaDevButton consoleButton
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::GorillaDevButton* consoleButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public GorillaDevButton inspectorButton
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::GorillaDevButton* inspectorButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public GorillaDevButton componentInspectorButton
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::GorillaDevButton* componentInspectorButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public GorillaDevButton showNonStarItems
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::GorillaDevButton* showNonStarItems;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public GorillaDevButton showPrivateItems
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::GorillaDevButton* showPrivateItems;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public UnityEngine.UI.Text componentInspectionText
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UI::Text* componentInspectionText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public DevInspector selectedInspector
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::DevInspector* selectedInspector;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DevInspector*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> otherButtonsList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_otherButtonsList();
    // Get instance field reference: private System.Boolean isActuallyEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isActuallyEnabled();
    // Get instance field reference: public System.Boolean isStillEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isStillEnabled();
    // Get instance field reference: public System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: public ConsoleMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ConsoleMode& dyn_mode();
    // Get instance field reference: public System.Double debugScale
    [[deprecated("Use field access instead!")]] double& dyn_debugScale();
    // Get instance field reference: public System.Double inspectorScale
    [[deprecated("Use field access instead!")]] double& dyn_inspectorScale();
    // Get instance field reference: public System.Double componentInspectorScale
    [[deprecated("Use field access instead!")]] double& dyn_componentInspectorScale();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> consoleButtons
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_consoleButtons();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> inspectorButtons
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_inspectorButtons();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> componentInspectorButtons
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_componentInspectorButtons();
    // Get instance field reference: public GorillaDevButton consoleButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_consoleButton();
    // Get instance field reference: public GorillaDevButton inspectorButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_inspectorButton();
    // Get instance field reference: public GorillaDevButton componentInspectorButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_componentInspectorButton();
    // Get instance field reference: public GorillaDevButton showNonStarItems
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_showNonStarItems();
    // Get instance field reference: public GorillaDevButton showPrivateItems
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_showPrivateItems();
    // Get instance field reference: public UnityEngine.UI.Text componentInspectionText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_componentInspectionText();
    // Get instance field reference: public DevInspector selectedInspector
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DevInspector*& dyn_selectedInspector();
    // public System.Void .ctor()
    // Offset: 0x279A9E8
    // Implemented from: DevConsoleInstance
    // Base method: System.Void DevConsoleInstance::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevConsoleHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevConsoleHand*, creationType>()));
    }
  }; // DevConsoleHand
  #pragma pack(pop)
  static check_size<sizeof(DevConsoleHand), 272 + sizeof(::GlobalNamespace::DevInspector*)> __GlobalNamespace_DevConsoleHandSizeCheck;
  static_assert(sizeof(DevConsoleHand) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevConsoleHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
