// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTelemetry
#include "GlobalNamespace/OVRTelemetry.hpp"
// Including type: OVRTelemetry/TelemetryClient
#include "GlobalNamespace/OVRTelemetry_TelemetryClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTelemetry::NullTelemetryClient);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTelemetry::NullTelemetryClient*, "", "OVRTelemetry/NullTelemetryClient");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRTelemetry/NullTelemetryClient
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTelemetry::NullTelemetryClient : public ::GlobalNamespace::OVRTelemetry::TelemetryClient {
    public:
    // public override System.Void MarkerStart(System.Int32 markerId, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F7B8
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Void TelemetryClient::MarkerStart(System.Int32 markerId, System.Int32 instanceKey, System.Int64 timestampMs)
    void MarkerStart(int markerId, int instanceKey, int64_t timestampMs);
    // public override System.Void MarkerPointCached(System.Int32 markerId, System.Int32 nameHandle, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F7BC
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Void TelemetryClient::MarkerPointCached(System.Int32 markerId, System.Int32 nameHandle, System.Int32 instanceKey, System.Int64 timestampMs)
    void MarkerPointCached(int markerId, int nameHandle, int instanceKey, int64_t timestampMs);
    // public override System.Void MarkerAnnotation(System.Int32 markerId, System.String annotationKey, System.String annotationValue, System.Int32 instanceKey)
    // Offset: 0x492F7C0
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Void TelemetryClient::MarkerAnnotation(System.Int32 markerId, System.String annotationKey, System.String annotationValue, System.Int32 instanceKey)
    void MarkerAnnotation(int markerId, ::StringW annotationKey, ::StringW annotationValue, int instanceKey);
    // public override System.Void MarkerEnd(System.Int32 markerId, OVRPlugin/Qpl/ResultType resultTypeId, System.Int32 instanceKey, System.Int64 timestampMs)
    // Offset: 0x492F7C4
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Void TelemetryClient::MarkerEnd(System.Int32 markerId, OVRPlugin/Qpl/ResultType resultTypeId, System.Int32 instanceKey, System.Int64 timestampMs)
    void MarkerEnd(int markerId, ::GlobalNamespace::OVRPlugin::Qpl::ResultType resultTypeId, int instanceKey, int64_t timestampMs);
    // public override System.Boolean CreateMarkerHandle(System.String name, out System.Int32 nameHandle)
    // Offset: 0x492F7C8
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Boolean TelemetryClient::CreateMarkerHandle(System.String name, out System.Int32 nameHandle)
    bool CreateMarkerHandle(::StringW name, ByRef<int> nameHandle);
    // public override System.Boolean DestroyMarkerHandle(System.Int32 nameHandle)
    // Offset: 0x492F7D4
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Boolean TelemetryClient::DestroyMarkerHandle(System.Int32 nameHandle)
    bool DestroyMarkerHandle(int nameHandle);
    // public System.Void .ctor()
    // Offset: 0x492F6A8
    // Implemented from: OVRTelemetry/TelemetryClient
    // Base method: System.Void TelemetryClient::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRTelemetry::NullTelemetryClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTelemetry::NullTelemetryClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRTelemetry::NullTelemetryClient*, creationType>()));
    }
  }; // OVRTelemetry/NullTelemetryClient
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerStart
// Il2CppName: MarkerStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(int, int, int64_t)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerStart)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* timestampMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "MarkerStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, instanceKey, timestampMs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerPointCached
// Il2CppName: MarkerPointCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(int, int, int, int64_t)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerPointCached)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nameHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* timestampMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "MarkerPointCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, nameHandle, instanceKey, timestampMs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerAnnotation
// Il2CppName: MarkerAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(int, ::StringW, ::StringW, int)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerAnnotation)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* annotationKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* annotationValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "MarkerAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, annotationKey, annotationValue, instanceKey});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerEnd
// Il2CppName: MarkerEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(int, ::GlobalNamespace::OVRPlugin::Qpl::ResultType, int, int64_t)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::MarkerEnd)> {
  static const MethodInfo* get() {
    static auto* markerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resultTypeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Qpl/ResultType")->byval_arg;
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* timestampMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "MarkerEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markerId, resultTypeId, instanceKey, timestampMs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::CreateMarkerHandle
// Il2CppName: CreateMarkerHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(::StringW, ByRef<int>)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::CreateMarkerHandle)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nameHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "CreateMarkerHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, nameHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::DestroyMarkerHandle
// Il2CppName: DestroyMarkerHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTelemetry::NullTelemetryClient::*)(int)>(&GlobalNamespace::OVRTelemetry::NullTelemetryClient::DestroyMarkerHandle)> {
  static const MethodInfo* get() {
    static auto* nameHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTelemetry::NullTelemetryClient*), "DestroyMarkerHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameHandle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTelemetry::NullTelemetryClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
