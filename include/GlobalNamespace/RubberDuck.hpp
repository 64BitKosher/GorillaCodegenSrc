// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RubberDuckEvents
  class RubberDuckEvents;
  // Forward declaring type: SoundEffects
  class SoundEffects;
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RubberDuck
  class RubberDuck;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RubberDuck);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RubberDuck*, "", "RubberDuck");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: RubberDuck
  // [TokenAttribute] Offset: FFFFFFFF
  class RubberDuck : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // public System.Boolean disableActivation
    // Size: 0x1
    // Offset: 0x2C9
    bool disableActivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableDeactivation
    // Size: 0x1
    // Offset: 0x2CA
    bool disableDeactivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.SkinnedMeshRenderer skinRenderer
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::SkinnedMeshRenderer* skinRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // public System.Single blendShapeMaxWeight
    // Size: 0x4
    // Offset: 0x2D8
    float blendShapeMaxWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 tempHandPos
    // Size: 0x4
    // Offset: 0x2DC
    int tempHandPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 squeezeSound
    // Size: 0x4
    // Offset: 0x2E0
    int squeezeSound;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 squeezeReleaseSound
    // Size: 0x4
    // Offset: 0x2E4
    int squeezeReleaseSound;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single squeezeStrength
    // Size: 0x4
    // Offset: 0x2E8
    float squeezeStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single releaseStrength
    // Size: 0x4
    // Offset: 0x2EC
    float releaseStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.ParticleSystem particleFX
    // Size: 0x8
    // Offset: 0x2F0
    ::UnityEngine::ParticleSystem* particleFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Single particleFXEmissionIdle
    // Size: 0x4
    // Offset: 0x2F8
    float particleFXEmissionIdle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single particleFXEmissionSqueeze
    // Size: 0x4
    // Offset: 0x2FC
    float particleFXEmissionSqueeze;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AnimationCurve particleFXEmissionCooldownCurve
    // Size: 0x8
    // Offset: 0x300
    ::UnityEngine::AnimationCurve* particleFXEmissionCooldownCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Boolean hasSkinRenderer
    // Size: 0x1
    // Offset: 0x308
    bool hasSkinRenderer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.ParticleSystem/EmissionModule pFXEmissionModule
    // Size: 0x8
    // Offset: 0x310
    ::UnityEngine::ParticleSystem::EmissionModule pFXEmissionModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // private System.Boolean hasParticleFX
    // Size: 0x1
    // Offset: 0x318
    bool hasParticleFX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single squeezeTimeElapsed
    // Size: 0x4
    // Offset: 0x31C
    float squeezeTimeElapsed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private RubberDuckEvents _events
    // Size: 0x8
    // Offset: 0x320
    ::GlobalNamespace::RubberDuckEvents* events;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RubberDuckEvents*) == 0x8);
    // private System.Boolean _raiseActivate
    // Size: 0x1
    // Offset: 0x328
    bool raiseActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _raiseDeactivate
    // Size: 0x1
    // Offset: 0x329
    bool raiseDeactivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private SoundEffects _sfxActivate
    // Size: 0x8
    // Offset: 0x330
    ::GlobalNamespace::SoundEffects* sfxActivate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundEffects*) == 0x8);
    // private System.Boolean _fxActive
    // Size: 0x1
    // Offset: 0x338
    bool fxActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean disableActivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableActivation();
    // Get instance field reference: public System.Boolean disableDeactivation
    [[deprecated("Use field access instead!")]] bool& dyn_disableDeactivation();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer skinRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_skinRenderer();
    // Get instance field reference: public System.Single blendShapeMaxWeight
    [[deprecated("Use field access instead!")]] float& dyn_blendShapeMaxWeight();
    // Get instance field reference: private System.Int32 tempHandPos
    [[deprecated("Use field access instead!")]] int& dyn_tempHandPos();
    // Get instance field reference: public System.Int32 squeezeSound
    [[deprecated("Use field access instead!")]] int& dyn_squeezeSound();
    // Get instance field reference: public System.Int32 squeezeReleaseSound
    [[deprecated("Use field access instead!")]] int& dyn_squeezeReleaseSound();
    // Get instance field reference: public System.Single squeezeStrength
    [[deprecated("Use field access instead!")]] float& dyn_squeezeStrength();
    // Get instance field reference: public System.Single releaseStrength
    [[deprecated("Use field access instead!")]] float& dyn_releaseStrength();
    // Get instance field reference: public UnityEngine.ParticleSystem particleFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleFX();
    // Get instance field reference: public System.Single particleFXEmissionIdle
    [[deprecated("Use field access instead!")]] float& dyn_particleFXEmissionIdle();
    // Get instance field reference: public System.Single particleFXEmissionSqueeze
    [[deprecated("Use field access instead!")]] float& dyn_particleFXEmissionSqueeze();
    // Get instance field reference: public UnityEngine.AnimationCurve particleFXEmissionCooldownCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_particleFXEmissionCooldownCurve();
    // Get instance field reference: private System.Boolean hasSkinRenderer
    [[deprecated("Use field access instead!")]] bool& dyn_hasSkinRenderer();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule pFXEmissionModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn_pFXEmissionModule();
    // Get instance field reference: private System.Boolean hasParticleFX
    [[deprecated("Use field access instead!")]] bool& dyn_hasParticleFX();
    // Get instance field reference: private System.Single squeezeTimeElapsed
    [[deprecated("Use field access instead!")]] float& dyn_squeezeTimeElapsed();
    // Get instance field reference: private RubberDuckEvents _events
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RubberDuckEvents*& dyn__events();
    // Get instance field reference: private System.Boolean _raiseActivate
    [[deprecated("Use field access instead!")]] bool& dyn__raiseActivate();
    // Get instance field reference: private System.Boolean _raiseDeactivate
    [[deprecated("Use field access instead!")]] bool& dyn__raiseDeactivate();
    // Get instance field reference: private SoundEffects _sfxActivate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundEffects*& dyn__sfxActivate();
    // Get instance field reference: private System.Boolean _fxActive
    [[deprecated("Use field access instead!")]] bool& dyn__fxActive();
    // public System.Boolean get_fxActive()
    // Offset: 0x26DA730
    bool get_fxActive();
    // public System.Void set_fxActive(System.Boolean value)
    // Offset: 0x26DA750
    void set_fxActive(bool value);
    // private System.Void OnSqueezeActivate(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x26DB05C
    void OnSqueezeActivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // private System.Void SqueezeActivateLocal()
    // Offset: 0x26DB128
    void SqueezeActivateLocal();
    // private System.Void OnSqueezeDeactivate(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x26DB488
    void OnSqueezeDeactivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // private System.Void SqueezeDeactivateLocal()
    // Offset: 0x26DB558
    void SqueezeDeactivateLocal();
    // public System.Void PlayParticleFX(System.Single rate)
    // Offset: 0x26DB1F0
    void PlayParticleFX(float rate);
    // public override System.Void OnSpawn()
    // Offset: 0x26DA788
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // public override System.Void OnEnable()
    // Offset: 0x26DA908
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x26DAEA0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Void LateUpdate()
    // Offset: 0x26DA2D0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdate()
    void LateUpdate();
    // public override System.Void OnActivate()
    // Offset: 0x26DB560
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnActivate()
    void OnActivate();
    // public override System.Void OnDeactivate()
    // Offset: 0x26DB974
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDeactivate()
    void OnDeactivate();
    // public override System.Boolean CanActivate()
    // Offset: 0x26DBD44
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanActivate()
    bool CanActivate();
    // public override System.Boolean CanDeactivate()
    // Offset: 0x26DBD54
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::CanDeactivate()
    bool CanDeactivate();
    // public System.Void .ctor()
    // Offset: 0x26DA6A4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RubberDuck* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RubberDuck*, creationType>()));
    }
  }; // RubberDuck
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::get_fxActive
// Il2CppName: get_fxActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::get_fxActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "get_fxActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::set_fxActive
// Il2CppName: set_fxActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)(bool)>(&GlobalNamespace::RubberDuck::set_fxActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "set_fxActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnSqueezeActivate
// Il2CppName: OnSqueezeActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::RubberDuck::OnSqueezeActivate)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnSqueezeActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::SqueezeActivateLocal
// Il2CppName: SqueezeActivateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::SqueezeActivateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "SqueezeActivateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnSqueezeDeactivate
// Il2CppName: OnSqueezeDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::RubberDuck::OnSqueezeDeactivate)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnSqueezeDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::SqueezeDeactivateLocal
// Il2CppName: SqueezeDeactivateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::SqueezeDeactivateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "SqueezeDeactivateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::PlayParticleFX
// Il2CppName: PlayParticleFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)(float)>(&GlobalNamespace::RubberDuck::PlayParticleFX)> {
  static const MethodInfo* get() {
    static auto* rate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "PlayParticleFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::OnDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RubberDuck::*)()>(&GlobalNamespace::RubberDuck::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RubberDuck*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RubberDuck::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
