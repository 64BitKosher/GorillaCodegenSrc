// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GliderWindVolume
  class GliderWindVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GliderWindVolume);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GliderWindVolume*, "", "GliderWindVolume");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: GliderWindVolume
  // [TokenAttribute] Offset: FFFFFFFF
  class GliderWindVolume : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x20
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxAccel
    // Size: 0x4
    // Offset: 0x24
    float maxAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve speedVsAccelCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* speedVsAccelCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Vector3 localWindDirection
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 localWindDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: private System.Single maxAccel
    [[deprecated("Use field access instead!")]] float& dyn_maxAccel();
    // Get instance field reference: private UnityEngine.AnimationCurve speedVsAccelCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_speedVsAccelCurve();
    // Get instance field reference: private UnityEngine.Vector3 localWindDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localWindDirection();
    // public UnityEngine.Vector3 get_WindDirection()
    // Offset: 0x27626C0
    ::UnityEngine::Vector3 get_WindDirection();
    // public UnityEngine.Vector3 GetAccelFromVelocity(UnityEngine.Vector3 velocity)
    // Offset: 0x2762624
    ::UnityEngine::Vector3 GetAccelFromVelocity(::UnityEngine::Vector3 velocity);
    // public System.Void .ctor()
    // Offset: 0x2763240
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GliderWindVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GliderWindVolume*, creationType>()));
    }
  }; // GliderWindVolume
  #pragma pack(pop)
  static check_size<sizeof(GliderWindVolume), 48 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_GliderWindVolumeSizeCheck;
  static_assert(sizeof(GliderWindVolume) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GliderWindVolume::get_WindDirection
// Il2CppName: get_WindDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::GliderWindVolume::*)()>(&GlobalNamespace::GliderWindVolume::get_WindDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GliderWindVolume*), "get_WindDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GliderWindVolume::GetAccelFromVelocity
// Il2CppName: GetAccelFromVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::GliderWindVolume::*)(::UnityEngine::Vector3)>(&GlobalNamespace::GliderWindVolume::GetAccelFromVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GliderWindVolume*), "GetAccelFromVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GliderWindVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
