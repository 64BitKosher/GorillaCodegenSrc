// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GiantSnowflakeAudio
  class GiantSnowflakeAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GiantSnowflakeAudio);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GiantSnowflakeAudio*, "", "GiantSnowflakeAudio");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GiantSnowflakeAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class GiantSnowflakeAudio : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride
    struct SnowflakeScaleOverride;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GiantSnowflakeAudio/SnowflakeScaleOverride
    // [TokenAttribute] Offset: FFFFFFFF
    struct SnowflakeScaleOverride/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single scaleMax
      // Size: 0x4
      // Offset: 0x0
      float scaleMax;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Int32 newOverrideIndex
      // Size: 0x4
      // Offset: 0x4
      int newOverrideIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SnowflakeScaleOverride
      constexpr SnowflakeScaleOverride(float scaleMax_ = {}, int newOverrideIndex_ = {}) noexcept : scaleMax{scaleMax_}, newOverrideIndex{newOverrideIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single scaleMax
      [[deprecated("Use field access instead!")]] float& dyn_scaleMax();
      // Get instance field reference: public System.Int32 newOverrideIndex
      [[deprecated("Use field access instead!")]] int& dyn_newOverrideIndex();
    }; // GiantSnowflakeAudio/SnowflakeScaleOverride
    #pragma pack(pop)
    static check_size<sizeof(GiantSnowflakeAudio::SnowflakeScaleOverride), 4 + sizeof(int)> __GlobalNamespace_GiantSnowflakeAudio_SnowflakeScaleOverrideSizeCheck;
    static_assert(sizeof(GiantSnowflakeAudio::SnowflakeScaleOverride) == 0x8);
    public:
    // public System.Collections.Generic.List`1<GiantSnowflakeAudio/SnowflakeScaleOverride> audioOverrides
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride>* audioOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride>*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<GiantSnowflakeAudio/SnowflakeScaleOverride> audioOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride>*& dyn_audioOverrides();
    // private System.Void Start()
    // Offset: 0x26F6628
    void Start();
    // public System.Void .ctor()
    // Offset: 0x26F67D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GiantSnowflakeAudio* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GiantSnowflakeAudio::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GiantSnowflakeAudio*, creationType>()));
    }
  }; // GiantSnowflakeAudio
  #pragma pack(pop)
  static check_size<sizeof(GiantSnowflakeAudio), 32 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride>*)> __GlobalNamespace_GiantSnowflakeAudioSizeCheck;
  static_assert(sizeof(GiantSnowflakeAudio) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GiantSnowflakeAudio::SnowflakeScaleOverride, "", "GiantSnowflakeAudio/SnowflakeScaleOverride");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GiantSnowflakeAudio::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GiantSnowflakeAudio::*)()>(&GlobalNamespace::GiantSnowflakeAudio::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GiantSnowflakeAudio*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GiantSnowflakeAudio::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
