// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Sirenix.OdinInspector.ISelfValidator
#include "Sirenix/OdinInspector/ISelfValidator.hpp"
// Including type: NetworkingState
#include "GlobalNamespace/NetworkingState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IRequestableOwnershipGuardCallbacks
  class IRequestableOwnershipGuardCallbacks;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Sirenix::OdinInspector
namespace Sirenix::OdinInspector {
  // Forward declaring type: SelfValidationResult
  class SelfValidationResult;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RequestableOwnershipGuard
  class RequestableOwnershipGuard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RequestableOwnershipGuard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RequestableOwnershipGuard*, "", "RequestableOwnershipGuard");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: RequestableOwnershipGuard
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class RequestableOwnershipGuard : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Sirenix::OdinInspector::ISelfValidator*/ {
    public:
    // Nested type: ::GlobalNamespace::RequestableOwnershipGuard::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    // Nested type: ::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42
    class $RequestTimeout$d__42;
    public:
    // public NetworkingState currentState
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::NetworkingState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkingState) == 0x4);
    // Padding between fields: currentState and: photonViews
    char __padding0[0x4] = {};
    // private Photon.Pun.PhotonView[] photonViews
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Photon::Pun::PhotonView*> photonViews;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Pun::PhotonView*>) == 0x8);
    // private System.Boolean autoRegister
    // Size: 0x1
    // Offset: 0x38
    bool autoRegister;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoRegister and: currentOwner
    char __padding2[0x7] = {};
    // public Photon.Realtime.Player currentOwner
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Realtime::Player* currentOwner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Player currentMasterClient
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Realtime::Player* currentMasterClient;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Player fallbackOwner
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Realtime::Player* fallbackOwner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Realtime.Player creator
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Realtime::Player* creator;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Boolean giveCreatorAbsoluteAuthority
    // Size: 0x1
    // Offset: 0x60
    bool giveCreatorAbsoluteAuthority;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean attemptMasterAssistedTakeoverOnDeny
    // Size: 0x1
    // Offset: 0x61
    bool attemptMasterAssistedTakeoverOnDeny;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attemptMasterAssistedTakeoverOnDeny and: ownershipDenied
    char __padding8[0x6] = {};
    // private System.Action ownershipDenied
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* ownershipDenied;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action ownershipRequestAccepted
    // Size: 0x8
    // Offset: 0x70
    ::System::Action* ownershipRequestAccepted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public Photon.Realtime.Player actualOwner
    // Size: 0x8
    // Offset: 0x78
    ::Photon::Realtime::Player* actualOwner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.String ownershipRequestNonce
    // Size: 0x8
    // Offset: 0x80
    ::StringW ownershipRequestNonce;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<IRequestableOwnershipGuardCallbacks> callbacksList
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* callbacksList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Sirenix::OdinInspector::ISelfValidator
    operator ::Sirenix::OdinInspector::ISelfValidator() noexcept {
      return *reinterpret_cast<::Sirenix::OdinInspector::ISelfValidator*>(this);
    }
    // Get instance field reference: public NetworkingState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkingState& dyn_currentState();
    // Get instance field reference: private Photon.Pun.PhotonView[] photonViews
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Pun::PhotonView*>& dyn_photonViews();
    // Get instance field reference: private System.Boolean autoRegister
    [[deprecated("Use field access instead!")]] bool& dyn_autoRegister();
    // Get instance field reference: public Photon.Realtime.Player currentOwner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentOwner();
    // Get instance field reference: private Photon.Realtime.Player currentMasterClient
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentMasterClient();
    // Get instance field reference: private Photon.Realtime.Player fallbackOwner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_fallbackOwner();
    // Get instance field reference: public Photon.Realtime.Player creator
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_creator();
    // Get instance field reference: public System.Boolean giveCreatorAbsoluteAuthority
    [[deprecated("Use field access instead!")]] bool& dyn_giveCreatorAbsoluteAuthority();
    // Get instance field reference: public System.Boolean attemptMasterAssistedTakeoverOnDeny
    [[deprecated("Use field access instead!")]] bool& dyn_attemptMasterAssistedTakeoverOnDeny();
    // Get instance field reference: private System.Action ownershipDenied
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_ownershipDenied();
    // Get instance field reference: private System.Action ownershipRequestAccepted
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_ownershipRequestAccepted();
    // Get instance field reference: public Photon.Realtime.Player actualOwner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_actualOwner();
    // Get instance field reference: public System.String ownershipRequestNonce
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ownershipRequestNonce();
    // Get instance field reference: public System.Collections.Generic.List`1<IRequestableOwnershipGuardCallbacks> callbacksList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*& dyn_callbacksList();
    // private System.Void SetViewToRequest()
    // Offset: 0x28922E8
    void SetViewToRequest();
    // private Photon.Pun.PhotonView get_photonView()
    // Offset: 0x2892344
    ::Photon::Pun::PhotonView* get_photonView();
    // public System.Boolean get_isTrulyMine()
    // Offset: 0x2892374
    bool get_isTrulyMine();
    // public System.Boolean get_isMine()
    // Offset: 0x28923DC
    bool get_isMine();
    // private System.Void BindPhotonViews()
    // Offset: 0x2892444
    void BindPhotonViews();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2892A88
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestCurrentOwnerFromAuthorityRPC(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2893518
    void RequestCurrentOwnerFromAuthorityRPC(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void TransferOwnershipFromToRPC(Photon.Realtime.Player player, System.String nonce, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2893668
    void TransferOwnershipFromToRPC(::Photon::Realtime::Player* player, ::StringW nonce, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void SetOwnershipFromMasterClient(Photon.Realtime.Player player, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2893998
    void SetOwnershipFromMasterClient(::Photon::Realtime::Player* player, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnMasterClientAssistedTakeoverRequest(System.String nonce, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2893D60
    void OnMasterClientAssistedTakeoverRequest(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OwnershipRequested(System.String nonce, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2894328
    void OwnershipRequested(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void TransferOwnershipWithID(System.Int32 id)
    // Offset: 0x2894680
    void TransferOwnershipWithID(int id);
    // public System.Void TransferOwnership(Photon.Realtime.Player player, System.String Nonce)
    // Offset: 0x2894090
    void TransferOwnership(::Photon::Realtime::Player* player, ::StringW Nonce);
    // public System.Void RequestTheCurrentOwnerFromAuthority()
    // Offset: 0x289299C
    void RequestTheCurrentOwnerFromAuthority();
    // protected System.Void SetCurrentOwner(Photon.Realtime.Player player)
    // Offset: 0x289478C
    void SetCurrentOwner(::Photon::Realtime::Player* player);
    // protected internal System.Void SetOwnership(Photon.Realtime.Player player, System.Boolean isLocalOnly, System.Boolean dontPropigate)
    // Offset: 0x28927E8
    void SetOwnership(::Photon::Realtime::Player* player, bool isLocalOnly, bool dontPropigate);
    // public Photon.Realtime.Player GetAuthoritativePlayer()
    // Offset: 0x2894720
    ::Photon::Realtime::Player* GetAuthoritativePlayer();
    // public System.Boolean PlayerHasAuthority(Photon.Realtime.Player player)
    // Offset: 0x2892980
    bool PlayerHasAuthority(::Photon::Realtime::Player* player);
    // public System.Void OwnershipRequestDenied(System.String nonce, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2894868
    void OwnershipRequestDenied(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Collections.IEnumerator RequestTimeout()
    // Offset: 0x2894BDC
    ::System::Collections::IEnumerator* RequestTimeout();
    // public System.Void RequestOwnership(System.Action onRequestSuccess, System.Action onRequestFailed)
    // Offset: 0x2894C70
    void RequestOwnership(::System::Action* onRequestSuccess, ::System::Action* onRequestFailed);
    // public System.Void RequestOwnershipImmediately(System.Action onRequestFailed)
    // Offset: 0x2890248
    void RequestOwnershipImmediately(::System::Action* onRequestFailed);
    // public System.Void RequestOwnershipImmediatelyWithGuaranteedAuthority()
    // Offset: 0x2894F48
    void RequestOwnershipImmediatelyWithGuaranteedAuthority();
    // public System.Void Validate(Sirenix.OdinInspector.SelfValidationResult result)
    // Offset: 0x2895210
    void Validate(::Sirenix::OdinInspector::SelfValidationResult* result);
    // public System.Void AddCallbackTarget(IRequestableOwnershipGuardCallbacks callbackObject)
    // Offset: 0x2895214
    void AddCallbackTarget(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callbackObject);
    // public System.Void RemoveCallbackTarget(IRequestableOwnershipGuardCallbacks callbackObject)
    // Offset: 0x2895374
    void RemoveCallbackTarget(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callbackObject);
    // public System.Void SetCreator(Photon.Realtime.Player player)
    // Offset: 0x2895484
    void SetCreator(::Photon::Realtime::Player* player);
    // private NetworkingState get_EdCurrentState()
    // Offset: 0x289548C
    ::GlobalNamespace::NetworkingState get_EdCurrentState();
    // public System.Void .ctor()
    // Offset: 0x2895494
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RequestableOwnershipGuard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RequestableOwnershipGuard*, creationType>()));
    }
    // private System.Void <OnEnable>b__17_0()
    // Offset: 0x2895524
    void $OnEnable$b__17_0();
    // public override System.Void OnDisable()
    // Offset: 0x289249C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
    // public override System.Void OnEnable()
    // Offset: 0x2892574
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x2892AC0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void OnPreLeavingRoom()
    // Offset: 0x2892C28
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPreLeavingRoom()
    void OnPreLeavingRoom();
    // public override System.Void OnJoinedRoom()
    // Offset: 0x2892DF0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x2892ED0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x28933F0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
  }; // RequestableOwnershipGuard
  #pragma pack(pop)
  static check_size<sizeof(RequestableOwnershipGuard), 136 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*)> __GlobalNamespace_RequestableOwnershipGuardSizeCheck;
  static_assert(sizeof(RequestableOwnershipGuard) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::SetViewToRequest
// Il2CppName: SetViewToRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::SetViewToRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "SetViewToRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::get_photonView
// Il2CppName: get_photonView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::get_photonView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "get_photonView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::get_isTrulyMine
// Il2CppName: get_isTrulyMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::get_isTrulyMine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "get_isTrulyMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::get_isMine
// Il2CppName: get_isMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::get_isMine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "get_isMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::BindPhotonViews
// Il2CppName: BindPhotonViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::BindPhotonViews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "BindPhotonViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestCurrentOwnerFromAuthorityRPC
// Il2CppName: RequestCurrentOwnerFromAuthorityRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::RequestCurrentOwnerFromAuthorityRPC)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestCurrentOwnerFromAuthorityRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipFromToRPC
// Il2CppName: TransferOwnershipFromToRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*, ::StringW, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipFromToRPC)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "TransferOwnershipFromToRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, nonce, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::SetOwnershipFromMasterClient
// Il2CppName: SetOwnershipFromMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::SetOwnershipFromMasterClient)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "SetOwnershipFromMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnMasterClientAssistedTakeoverRequest
// Il2CppName: OnMasterClientAssistedTakeoverRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::StringW, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::OnMasterClientAssistedTakeoverRequest)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnMasterClientAssistedTakeoverRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OwnershipRequested
// Il2CppName: OwnershipRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::StringW, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::OwnershipRequested)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OwnershipRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipWithID
// Il2CppName: TransferOwnershipWithID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(int)>(&GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipWithID)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "TransferOwnershipWithID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::TransferOwnership
// Il2CppName: TransferOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*, ::StringW)>(&GlobalNamespace::RequestableOwnershipGuard::TransferOwnership)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* Nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "TransferOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, Nonce});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestTheCurrentOwnerFromAuthority
// Il2CppName: RequestTheCurrentOwnerFromAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::RequestTheCurrentOwnerFromAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestTheCurrentOwnerFromAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::SetCurrentOwner
// Il2CppName: SetCurrentOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::SetCurrentOwner)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "SetCurrentOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::SetOwnership
// Il2CppName: SetOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*, bool, bool)>(&GlobalNamespace::RequestableOwnershipGuard::SetOwnership)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* isLocalOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* dontPropigate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "SetOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, isLocalOnly, dontPropigate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::GetAuthoritativePlayer
// Il2CppName: GetAuthoritativePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::GetAuthoritativePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "GetAuthoritativePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::PlayerHasAuthority
// Il2CppName: PlayerHasAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::PlayerHasAuthority)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "PlayerHasAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OwnershipRequestDenied
// Il2CppName: OwnershipRequestDenied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::StringW, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RequestableOwnershipGuard::OwnershipRequestDenied)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OwnershipRequestDenied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestTimeout
// Il2CppName: RequestTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::RequestTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestOwnership
// Il2CppName: RequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::System::Action*, ::System::Action*)>(&GlobalNamespace::RequestableOwnershipGuard::RequestOwnership)> {
  static const MethodInfo* get() {
    static auto* onRequestSuccess = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* onRequestFailed = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onRequestSuccess, onRequestFailed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediately
// Il2CppName: RequestOwnershipImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::System::Action*)>(&GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediately)> {
  static const MethodInfo* get() {
    static auto* onRequestFailed = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestOwnershipImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onRequestFailed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediatelyWithGuaranteedAuthority
// Il2CppName: RequestOwnershipImmediatelyWithGuaranteedAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediatelyWithGuaranteedAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RequestOwnershipImmediatelyWithGuaranteedAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Sirenix::OdinInspector::SelfValidationResult*)>(&GlobalNamespace::RequestableOwnershipGuard::Validate)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("Sirenix.OdinInspector", "SelfValidationResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::AddCallbackTarget
// Il2CppName: AddCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*)>(&GlobalNamespace::RequestableOwnershipGuard::AddCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* callbackObject = &::il2cpp_utils::GetClassFromName("", "IRequestableOwnershipGuardCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "AddCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::RemoveCallbackTarget
// Il2CppName: RemoveCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*)>(&GlobalNamespace::RequestableOwnershipGuard::RemoveCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* callbackObject = &::il2cpp_utils::GetClassFromName("", "IRequestableOwnershipGuardCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "RemoveCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::SetCreator
// Il2CppName: SetCreator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::SetCreator)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "SetCreator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::get_EdCurrentState
// Il2CppName: get_EdCurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetworkingState (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::get_EdCurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "get_EdCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::$OnEnable$b__17_0
// Il2CppName: <OnEnable>b__17_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::$OnEnable$b__17_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "<OnEnable>b__17_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnPreLeavingRoom
// Il2CppName: OnPreLeavingRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::OnPreLeavingRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnPreLeavingRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)()>(&GlobalNamespace::RequestableOwnershipGuard::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RequestableOwnershipGuard::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
