// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaUITransformFollow
  class GorillaUITransformFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaUITransformFollow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaUITransformFollow*, "", "GorillaUITransformFollow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: GorillaUITransformFollow
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaUITransformFollow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform transformToFollow
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* transformToFollow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean doesMove
    // Size: 0x1
    // Offset: 0x34
    bool doesMove;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Transform transformToFollow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transformToFollow();
    // Get instance field reference: public UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // Get instance field reference: public System.Boolean doesMove
    [[deprecated("Use field access instead!")]] bool& dyn_doesMove();
    // private System.Void Start()
    // Offset: 0x2722818
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x272281C
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x27228FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaUITransformFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaUITransformFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaUITransformFollow*, creationType>()));
    }
  }; // GorillaUITransformFollow
  #pragma pack(pop)
  static check_size<sizeof(GorillaUITransformFollow), 52 + sizeof(bool)> __GlobalNamespace_GorillaUITransformFollowSizeCheck;
  static_assert(sizeof(GorillaUITransformFollow) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaUITransformFollow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaUITransformFollow::*)()>(&GlobalNamespace::GorillaUITransformFollow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaUITransformFollow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaUITransformFollow::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaUITransformFollow::*)()>(&GlobalNamespace::GorillaUITransformFollow::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaUITransformFollow*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaUITransformFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
