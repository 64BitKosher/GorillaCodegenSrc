// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRSkeleton
  class OVRSkeleton;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandMeshMask
  class HandMeshMask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandMeshMask);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandMeshMask*, "", "HandMeshMask");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: HandMeshMask
  // [TokenAttribute] Offset: FFFFFFFF
  class HandMeshMask : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public OVRSkeleton referenceHand
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRSkeleton* referenceHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeleton*) == 0x8);
    // public UnityEngine.Material maskMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* maskMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 radialDivisions
    // Size: 0x4
    // Offset: 0x30
    int radialDivisions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single borderSize
    // Size: 0x4
    // Offset: 0x34
    float borderSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fingerTaper
    // Size: 0x4
    // Offset: 0x38
    float fingerTaper;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fingerTipLength
    // Size: 0x4
    // Offset: 0x3C
    float fingerTipLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single webOffset
    // Size: 0x4
    // Offset: 0x40
    float webOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single handScale
    // Size: 0x4
    // Offset: 0x44
    float handScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.GameObject maskMeshObject
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* maskMeshObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Mesh maskMesh
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Mesh* maskMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Vector3[] handVertices
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> handVertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector2[] handUVs
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Vector2> handUVs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Color32[] handColors
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Color32> handColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private System.Int32[] handTriangles
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<int> handTriangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 vertCounter
    // Size: 0x4
    // Offset: 0x78
    int vertCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 triCounter
    // Size: 0x4
    // Offset: 0x7C
    int triCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public OVRSkeleton referenceHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& dyn_referenceHand();
    // Get instance field reference: public UnityEngine.Material maskMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_maskMaterial();
    // Get instance field reference: public System.Int32 radialDivisions
    [[deprecated("Use field access instead!")]] int& dyn_radialDivisions();
    // Get instance field reference: public System.Single borderSize
    [[deprecated("Use field access instead!")]] float& dyn_borderSize();
    // Get instance field reference: public System.Single fingerTaper
    [[deprecated("Use field access instead!")]] float& dyn_fingerTaper();
    // Get instance field reference: public System.Single fingerTipLength
    [[deprecated("Use field access instead!")]] float& dyn_fingerTipLength();
    // Get instance field reference: public System.Single webOffset
    [[deprecated("Use field access instead!")]] float& dyn_webOffset();
    // Get instance field reference: private System.Single handScale
    [[deprecated("Use field access instead!")]] float& dyn_handScale();
    // Get instance field reference: private UnityEngine.GameObject maskMeshObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_maskMeshObject();
    // Get instance field reference: private UnityEngine.Mesh maskMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_maskMesh();
    // Get instance field reference: private UnityEngine.Vector3[] handVertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_handVertices();
    // Get instance field reference: private UnityEngine.Vector2[] handUVs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_handUVs();
    // Get instance field reference: private UnityEngine.Color32[] handColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_handColors();
    // Get instance field reference: private System.Int32[] handTriangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_handTriangles();
    // Get instance field reference: private System.Int32 vertCounter
    [[deprecated("Use field access instead!")]] int& dyn_vertCounter();
    // Get instance field reference: private System.Int32 triCounter
    [[deprecated("Use field access instead!")]] int& dyn_triCounter();
    // private System.Void Awake()
    // Offset: 0x2933544
    void Awake();
    // private System.Void Update()
    // Offset: 0x293379C
    void Update();
    // private System.Void CreateHandMesh()
    // Offset: 0x2933964
    void CreateHandMesh();
    // private System.Void AddKnuckleMesh(System.Int32 knuckleVerts, System.Single point1scale, System.Single point2scale, UnityEngine.Vector3 point1, UnityEngine.Vector3 point2)
    // Offset: 0x2933FB4
    void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, ::UnityEngine::Vector3 point1, ::UnityEngine::Vector3 point2);
    // private System.Void AddPalmMesh(System.Int32 knuckleVerts)
    // Offset: 0x293452C
    void AddPalmMesh(int knuckleVerts);
    // private System.Void AddVertex(UnityEngine.Vector3 position, UnityEngine.Vector2 uv, UnityEngine.Color color)
    // Offset: 0x293682C
    void AddVertex(::UnityEngine::Vector3 position, ::UnityEngine::Vector2 uv, ::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x29368D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandMeshMask* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandMeshMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandMeshMask*, creationType>()));
    }
  }; // HandMeshMask
  #pragma pack(pop)
  static check_size<sizeof(HandMeshMask), 124 + sizeof(int)> __GlobalNamespace_HandMeshMaskSizeCheck;
  static_assert(sizeof(HandMeshMask) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)()>(&GlobalNamespace::HandMeshMask::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)()>(&GlobalNamespace::HandMeshMask::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::CreateHandMesh
// Il2CppName: CreateHandMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)()>(&GlobalNamespace::HandMeshMask::CreateHandMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "CreateHandMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::AddKnuckleMesh
// Il2CppName: AddKnuckleMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)(int, float, float, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::HandMeshMask::AddKnuckleMesh)> {
  static const MethodInfo* get() {
    static auto* knuckleVerts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* point1scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* point2scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* point1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "AddKnuckleMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{knuckleVerts, point1scale, point2scale, point1, point2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::AddPalmMesh
// Il2CppName: AddPalmMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)(int)>(&GlobalNamespace::HandMeshMask::AddPalmMesh)> {
  static const MethodInfo* get() {
    static auto* knuckleVerts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "AddPalmMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{knuckleVerts});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::AddVertex
// Il2CppName: AddVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandMeshMask::*)(::UnityEngine::Vector3, ::UnityEngine::Vector2, ::UnityEngine::Color)>(&GlobalNamespace::HandMeshMask::AddVertex)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandMeshMask*), "AddVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, uv, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandMeshMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
