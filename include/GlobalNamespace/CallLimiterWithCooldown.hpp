// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: CallLimiter
#include "GlobalNamespace/CallLimiter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CallLimiterWithCooldown
  class CallLimiterWithCooldown;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CallLimiterWithCooldown);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CallLimiterWithCooldown*, "", "CallLimiterWithCooldown");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: CallLimiterWithCooldown
  // [TokenAttribute] Offset: FFFFFFFF
  class CallLimiterWithCooldown : public ::GlobalNamespace::CallLimiter {
    public:
    public:
    // private System.Single spamCoolDown
    // Size: 0x4
    // Offset: 0x30
    float spamCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return spamCoolDown;
    }
    // Get instance field reference: private System.Single spamCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_spamCoolDown();
    // public System.Void .ctor(System.Single coolDownSpam, System.Int32 historyLength, System.Single coolDown)
    // Offset: 0x2765714
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallLimiterWithCooldown* New_ctor(float coolDownSpam, int historyLength, float coolDown) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiterWithCooldown::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallLimiterWithCooldown*, creationType>(coolDownSpam, historyLength, coolDown)));
    }
    // public System.Void .ctor(System.Single coolDownSpam, System.Int32 historyLength, System.Single coolDown, System.Single latencyMax)
    // Offset: 0x2765744
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallLimiterWithCooldown* New_ctor(float coolDownSpam, int historyLength, float coolDown, float latencyMax) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiterWithCooldown::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallLimiterWithCooldown*, creationType>(coolDownSpam, historyLength, coolDown, latencyMax)));
    }
    // public override System.Boolean CheckCallTime(System.Single time)
    // Offset: 0x2765770
    // Implemented from: CallLimiter
    // Base method: System.Boolean CallLimiter::CheckCallTime(System.Single time)
    bool CheckCallTime(float time);
  }; // CallLimiterWithCooldown
  #pragma pack(pop)
  static check_size<sizeof(CallLimiterWithCooldown), 48 + sizeof(float)> __GlobalNamespace_CallLimiterWithCooldownSizeCheck;
  static_assert(sizeof(CallLimiterWithCooldown) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CallLimiterWithCooldown::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CallLimiterWithCooldown::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CallLimiterWithCooldown::CheckCallTime
// Il2CppName: CheckCallTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CallLimiterWithCooldown::*)(float)>(&GlobalNamespace::CallLimiterWithCooldown::CheckCallTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallLimiterWithCooldown*), "CheckCallTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
