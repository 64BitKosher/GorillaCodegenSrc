// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughColorLut
#include "GlobalNamespace/OVRPassthroughColorLut.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter*, "", "OVRPassthroughColorLut/ColorLutTextureConverter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughColorLut/ColorLutTextureConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPassthroughColorLut::ColorLutTextureConverter : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::MapColorValuesJob
    struct MapColorValuesJob;
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings
    struct TextureSettings;
    // static public System.Void TextureToColorByteMap(UnityEngine.Texture2D lut, System.Int32 channelCount, System.Byte[] target, System.Boolean flipY)
    // Offset: 0x4961DC0
    static void TextureToColorByteMap(::UnityEngine::Texture2D* lut, int channelCount, ::ArrayW<uint8_t> target, bool flipY);
    // static private System.Void MapColorValues(OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings settings, Unity.Collections.NativeArray`1<System.Byte> source, System.Byte[] target)
    // Offset: 0x4962AD8
    static void MapColorValues(::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings settings, ::Unity::Collections::NativeArray_1<uint8_t> source, ::ArrayW<uint8_t> target);
    // static private OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings GetTextureSettings(UnityEngine.Texture2D lut, System.Int32 channelCount, System.Boolean flipY)
    // Offset: 0x49629DC
    static ::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings GetTextureSettings(::UnityEngine::Texture2D* lut, int channelCount, bool flipY);
    // static System.Boolean TryGetTextureLayout(System.Int32 width, System.Int32 height, out System.Int32 resolution, out System.Int32 slicesPerRow, out System.String errorMessage)
    // Offset: 0x49622D8
    static bool TryGetTextureLayout(int width, int height, ByRef<int> resolution, ByRef<int> slicesPerRow, ByRef<::StringW> errorMessage);
  }; // OVRPassthroughColorLut/ColorLutTextureConverter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureToColorByteMap
// Il2CppName: TextureToColorByteMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture2D*, int, ::ArrayW<uint8_t>, bool)>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureToColorByteMap)> {
  static const MethodInfo* get() {
    static auto* lut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* channelCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* flipY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter*), "TextureToColorByteMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lut, channelCount, target, flipY});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::MapColorValues
// Il2CppName: MapColorValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings, ::Unity::Collections::NativeArray_1<uint8_t>, ::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::MapColorValues)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings")->byval_arg;
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter*), "MapColorValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, source, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::GetTextureSettings
// Il2CppName: GetTextureSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings (*)(::UnityEngine::Texture2D*, int, bool)>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::GetTextureSettings)> {
  static const MethodInfo* get() {
    static auto* lut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* channelCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flipY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter*), "GetTextureSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lut, channelCount, flipY});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TryGetTextureLayout
// Il2CppName: TryGetTextureLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, ByRef<int>, ByRef<int>, ByRef<::StringW>)>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TryGetTextureLayout)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* slicesPerRow = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter*), "TryGetTextureLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, resolution, slicesPerRow, errorMessage});
  }
};
