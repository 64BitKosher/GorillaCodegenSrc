// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransform
#include "Fusion/NetworkTransform.hpp"
// Including type: Fusion.Changed`1
#include "Fusion/Changed_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CharacterController
  class CharacterController;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ChangedDelegate`1<T>
  template<typename T>
  class ChangedDelegate_1;
  // Forward declaring type: NetworkBehaviourCallbacks`1<T>
  template<typename T>
  class NetworkBehaviourCallbacks_1;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Nullable`1 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkCharacterControllerPrototype
  class NetworkCharacterControllerPrototype;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkCharacterControllerPrototype);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkCharacterControllerPrototype*, "", "NetworkCharacterControllerPrototype");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: NetworkCharacterControllerPrototype
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [OrderBeforeAttribute] Offset: FFFFFFFF
  class NetworkCharacterControllerPrototype : public ::Fusion::NetworkTransform {
    public:
    public:
    // public System.Single gravity
    // Size: 0x4
    // Offset: 0x144
    float gravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single jumpImpulse
    // Size: 0x4
    // Offset: 0x148
    float jumpImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single acceleration
    // Size: 0x4
    // Offset: 0x14C
    float acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single braking
    // Size: 0x4
    // Offset: 0x150
    float braking;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x154
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationSpeed
    // Size: 0x4
    // Offset: 0x158
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _IsGrounded
    // Size: 0x1
    // Offset: 0x15C
    bool IsGrounded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsGrounded and: Velocity
    char __padding6[0x3] = {};
    // private UnityEngine.Vector3 _Velocity
    // Size: 0xC
    // Offset: 0x160
    ::UnityEngine::Vector3 Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: Velocity and: Controller
    char __padding7[0x4] = {};
    // private UnityEngine.CharacterController <Controller>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::CharacterController* Controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterController*) == 0x8);
    public:
    // Get static field: static Fusion.Changed`1<NetworkCharacterControllerPrototype> $IL2CPP_CHANGED
    static ::Fusion::Changed_1<::GlobalNamespace::NetworkCharacterControllerPrototype*> _get_$IL2CPP_CHANGED();
    // Set static field: static Fusion.Changed`1<NetworkCharacterControllerPrototype> $IL2CPP_CHANGED
    static void _set_$IL2CPP_CHANGED(::Fusion::Changed_1<::GlobalNamespace::NetworkCharacterControllerPrototype*> value);
    // Get static field: static Fusion.ChangedDelegate`1<NetworkCharacterControllerPrototype> $IL2CPP_CHANGED_DELEGATE
    static ::Fusion::ChangedDelegate_1<::GlobalNamespace::NetworkCharacterControllerPrototype*>* _get_$IL2CPP_CHANGED_DELEGATE();
    // Set static field: static Fusion.ChangedDelegate`1<NetworkCharacterControllerPrototype> $IL2CPP_CHANGED_DELEGATE
    static void _set_$IL2CPP_CHANGED_DELEGATE(::Fusion::ChangedDelegate_1<::GlobalNamespace::NetworkCharacterControllerPrototype*>* value);
    // Get static field: static Fusion.NetworkBehaviourCallbacks`1<NetworkCharacterControllerPrototype> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static ::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::NetworkCharacterControllerPrototype*>* _get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS();
    // Set static field: static Fusion.NetworkBehaviourCallbacks`1<NetworkCharacterControllerPrototype> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static void _set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS(::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::NetworkCharacterControllerPrototype*>* value);
    // Get instance field reference: public System.Single gravity
    [[deprecated("Use field access instead!")]] float& dyn_gravity();
    // Get instance field reference: public System.Single jumpImpulse
    [[deprecated("Use field access instead!")]] float& dyn_jumpImpulse();
    // Get instance field reference: public System.Single acceleration
    [[deprecated("Use field access instead!")]] float& dyn_acceleration();
    // Get instance field reference: public System.Single braking
    [[deprecated("Use field access instead!")]] float& dyn_braking();
    // Get instance field reference: public System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: public System.Single rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotationSpeed();
    // Get instance field reference: private System.Boolean _IsGrounded
    [[deprecated("Use field access instead!")]] bool& dyn__IsGrounded();
    // Get instance field reference: private UnityEngine.Vector3 _Velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__Velocity();
    // Get instance field reference: private UnityEngine.CharacterController <Controller>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& dyn_$Controller$k__BackingField();
    // public System.Boolean get_IsGrounded()
    // Offset: 0x295BA88
    bool get_IsGrounded();
    // public System.Void set_IsGrounded(System.Boolean value)
    // Offset: 0x295BAF0
    void set_IsGrounded(bool value);
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x295BB54
    ::UnityEngine::Vector3 get_Velocity();
    // public System.Void set_Velocity(UnityEngine.Vector3 value)
    // Offset: 0x295BBD8
    void set_Velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.CharacterController get_Controller()
    // Offset: 0x295BCCC
    ::UnityEngine::CharacterController* get_Controller();
    // private System.Void set_Controller(UnityEngine.CharacterController value)
    // Offset: 0x295BCD4
    void set_Controller(::UnityEngine::CharacterController* value);
    // private System.Void CacheController()
    // Offset: 0x295BD00
    void CacheController();
    // public System.Void Jump(System.Boolean ignoreGrounded, System.Nullable`1<System.Single> overrideImpulse)
    // Offset: 0x295BE04
    void Jump(bool ignoreGrounded, ::System::Nullable_1<float> overrideImpulse);
    // public System.Void Move(UnityEngine.Vector3 direction)
    // Offset: 0x295BEA0
    void Move(::UnityEngine::Vector3 direction);
    // public System.Void .ctor()
    // Offset: 0x295C25C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkCharacterControllerPrototype* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkCharacterControllerPrototype::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkCharacterControllerPrototype*, creationType>()));
    }
    // protected override UnityEngine.Vector3 get_DefaultTeleportInterpolationVelocity()
    // Offset: 0x295BCB8
    // Implemented from: Fusion.NetworkTransform
    // Base method: UnityEngine.Vector3 NetworkTransform::get_DefaultTeleportInterpolationVelocity()
    ::UnityEngine::Vector3 get_DefaultTeleportInterpolationVelocity();
    // protected override UnityEngine.Vector3 get_DefaultTeleportInterpolationAngularVelocity()
    // Offset: 0x295BCBC
    // Implemented from: Fusion.NetworkTransform
    // Base method: UnityEngine.Vector3 NetworkTransform::get_DefaultTeleportInterpolationAngularVelocity()
    ::UnityEngine::Vector3 get_DefaultTeleportInterpolationAngularVelocity();
    // protected override System.Void Awake()
    // Offset: 0x295BCE4
    // Implemented from: Fusion.NetworkPosition
    // Base method: System.Void NetworkPosition::Awake()
    void Awake();
    // public override System.Void Spawned()
    // Offset: 0x295BDA4
    // Implemented from: Fusion.NetworkTransform
    // Base method: System.Void NetworkTransform::Spawned()
    void Spawned();
    // protected override System.Void CopyFromBufferToEngine()
    // Offset: 0x295BDC0
    // Implemented from: Fusion.NetworkPositionRotation
    // Base method: System.Void NetworkPositionRotation::CopyFromBufferToEngine()
    void CopyFromBufferToEngine();
    // public override System.Void CopyBackingFieldsToState(System.Boolean )
    // Offset: 0x295C280
    // Implemented from: Fusion.NetworkTransform
    // Base method: System.Void NetworkTransform::CopyBackingFieldsToState(System.Boolean )
    void CopyBackingFieldsToState(bool param_0);
    // public override System.Void CopyStateToBackingFields()
    // Offset: 0x295C2B8
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyStateToBackingFields()
    void CopyStateToBackingFields();
  }; // NetworkCharacterControllerPrototype
  #pragma pack(pop)
  static check_size<sizeof(NetworkCharacterControllerPrototype), 368 + sizeof(::UnityEngine::CharacterController*)> __GlobalNamespace_NetworkCharacterControllerPrototypeSizeCheck;
  static_assert(sizeof(NetworkCharacterControllerPrototype) == 0x178);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::get_IsGrounded
// Il2CppName: get_IsGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::get_IsGrounded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "get_IsGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::set_IsGrounded
// Il2CppName: set_IsGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(bool)>(&GlobalNamespace::NetworkCharacterControllerPrototype::set_IsGrounded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "set_IsGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::set_Velocity
// Il2CppName: set_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(::UnityEngine::Vector3)>(&GlobalNamespace::NetworkCharacterControllerPrototype::set_Velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "set_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::get_Controller
// Il2CppName: get_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::CharacterController* (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::get_Controller)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "get_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::set_Controller
// Il2CppName: set_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(::UnityEngine::CharacterController*)>(&GlobalNamespace::NetworkCharacterControllerPrototype::set_Controller)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "CharacterController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "set_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::CacheController
// Il2CppName: CacheController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::CacheController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "CacheController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::Jump
// Il2CppName: Jump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(bool, ::System::Nullable_1<float>)>(&GlobalNamespace::NetworkCharacterControllerPrototype::Jump)> {
  static const MethodInfo* get() {
    static auto* ignoreGrounded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overrideImpulse = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "Jump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ignoreGrounded, overrideImpulse});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(::UnityEngine::Vector3)>(&GlobalNamespace::NetworkCharacterControllerPrototype::Move)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::get_DefaultTeleportInterpolationVelocity
// Il2CppName: get_DefaultTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::get_DefaultTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "get_DefaultTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::get_DefaultTeleportInterpolationAngularVelocity
// Il2CppName: get_DefaultTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::get_DefaultTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "get_DefaultTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::CopyFromBufferToEngine
// Il2CppName: CopyFromBufferToEngine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::CopyFromBufferToEngine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "CopyFromBufferToEngine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)(bool)>(&GlobalNamespace::NetworkCharacterControllerPrototype::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkCharacterControllerPrototype::CopyStateToBackingFields
// Il2CppName: CopyStateToBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkCharacterControllerPrototype::*)()>(&GlobalNamespace::NetworkCharacterControllerPrototype::CopyStateToBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkCharacterControllerPrototype*), "CopyStateToBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
