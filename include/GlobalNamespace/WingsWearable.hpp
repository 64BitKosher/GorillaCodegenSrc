// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WingsWearable
  class WingsWearable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WingsWearable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WingsWearable*, "", "WingsWearable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: WingsWearable
  // [TokenAttribute] Offset: FFFFFFFF
  class WingsWearable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.AnimationCurve flapSpeedCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* flapSpeedCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Transform xform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* xform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 oldPos
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 oldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly System.Int32 flapSpeedParamID
    // Size: 0x4
    // Offset: 0x44
    int flapSpeedParamID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: public UnityEngine.AnimationCurve flapSpeedCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_flapSpeedCurve();
    // Get instance field reference: private UnityEngine.Transform xform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_xform();
    // Get instance field reference: private UnityEngine.Vector3 oldPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_oldPos();
    // Get instance field reference: private readonly System.Int32 flapSpeedParamID
    [[deprecated("Use field access instead!")]] int& dyn_flapSpeedParamID();
    // private System.Void Awake()
    // Offset: 0x26A041C
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x26A044C
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x26A0478
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26A0568
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WingsWearable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WingsWearable*, creationType>()));
    }
  }; // WingsWearable
  #pragma pack(pop)
  static check_size<sizeof(WingsWearable), 68 + sizeof(int)> __GlobalNamespace_WingsWearableSizeCheck;
  static_assert(sizeof(WingsWearable) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WingsWearable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WingsWearable::*)()>(&GlobalNamespace::WingsWearable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WingsWearable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WingsWearable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WingsWearable::*)()>(&GlobalNamespace::WingsWearable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WingsWearable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WingsWearable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WingsWearable::*)()>(&GlobalNamespace::WingsWearable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WingsWearable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WingsWearable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
