// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: WatchableIntSO
  class WatchableIntSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HitTargetScoreDisplay
  class HitTargetScoreDisplay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HitTargetScoreDisplay);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HitTargetScoreDisplay*, "", "HitTargetScoreDisplay");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: HitTargetScoreDisplay
  // [TokenAttribute] Offset: FFFFFFFF
  class HitTargetScoreDisplay : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19
    class $RotatingCo$d__19;
    public:
    // private GorillaTag.WatchableIntSO networkedScore
    // Size: 0x8
    // Offset: 0x20
    ::GorillaTag::WatchableIntSO* networkedScore;
    // Field size check
    static_assert(sizeof(::GorillaTag::WatchableIntSO*) == 0x8);
    // private System.Int32 currentScore
    // Size: 0x4
    // Offset: 0x28
    int currentScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 tensOld
    // Size: 0x4
    // Offset: 0x2C
    int tensOld;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 hundredsOld
    // Size: 0x4
    // Offset: 0x30
    int hundredsOld;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single rotateTimeTotal
    // Size: 0x4
    // Offset: 0x34
    float rotateTimeTotal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 shaderPropID_MainTex_ST
    // Size: 0x4
    // Offset: 0x38
    int shaderPropID_MainTex_ST;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shaderPropID_MainTex_ST and: matPropBlock
    char __padding5[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock matPropBlock
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MaterialPropertyBlock* matPropBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private readonly UnityEngine.Vector4[] numberSheet
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector4> numberSheet;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public System.Int32 rotateSpeed
    // Size: 0x4
    // Offset: 0x50
    int rotateSpeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rotateSpeed and: singlesCard
    char __padding8[0x4] = {};
    // public UnityEngine.Transform singlesCard
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* singlesCard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform tensCard
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* tensCard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform hundredsCard
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* hundredsCard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Renderer singlesRend
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Renderer* singlesRend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.Renderer tensRend
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Renderer* tensRend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public UnityEngine.Renderer hundredsRend
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Renderer* hundredsRend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Coroutine currentRotationCoroutine
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Coroutine* currentRotationCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: private GorillaTag.WatchableIntSO networkedScore
    [[deprecated("Use field access instead!")]] ::GorillaTag::WatchableIntSO*& dyn_networkedScore();
    // Get instance field reference: private System.Int32 currentScore
    [[deprecated("Use field access instead!")]] int& dyn_currentScore();
    // Get instance field reference: private System.Int32 tensOld
    [[deprecated("Use field access instead!")]] int& dyn_tensOld();
    // Get instance field reference: private System.Int32 hundredsOld
    [[deprecated("Use field access instead!")]] int& dyn_hundredsOld();
    // Get instance field reference: private System.Single rotateTimeTotal
    [[deprecated("Use field access instead!")]] float& dyn_rotateTimeTotal();
    // Get instance field reference: private System.Int32 shaderPropID_MainTex_ST
    [[deprecated("Use field access instead!")]] int& dyn_shaderPropID_MainTex_ST();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
    // Get instance field reference: private readonly UnityEngine.Vector4[] numberSheet
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_numberSheet();
    // Get instance field reference: public System.Int32 rotateSpeed
    [[deprecated("Use field access instead!")]] int& dyn_rotateSpeed();
    // Get instance field reference: public UnityEngine.Transform singlesCard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_singlesCard();
    // Get instance field reference: public UnityEngine.Transform tensCard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tensCard();
    // Get instance field reference: public UnityEngine.Transform hundredsCard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_hundredsCard();
    // Get instance field reference: public UnityEngine.Renderer singlesRend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_singlesRend();
    // Get instance field reference: public UnityEngine.Renderer tensRend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_tensRend();
    // Get instance field reference: public UnityEngine.Renderer hundredsRend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_hundredsRend();
    // Get instance field reference: private UnityEngine.Coroutine currentRotationCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_currentRotationCoroutine();
    // protected System.Void Awake()
    // Offset: 0x2968C60
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2968E68
    void OnDestroy();
    // private System.Void ResetRotation()
    // Offset: 0x2968DD4
    void ResetRotation();
    // private System.Collections.IEnumerator RotatingCo()
    // Offset: 0x2968F0C
    ::System::Collections::IEnumerator* RotatingCo();
    // private System.Void OnScoreChanged(System.Int32 newScore)
    // Offset: 0x2968FA0
    void OnScoreChanged(int newScore);
    // public System.Void .ctor()
    // Offset: 0x2969014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitTargetScoreDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitTargetScoreDisplay*, creationType>()));
    }
  }; // HitTargetScoreDisplay
  #pragma pack(pop)
  static check_size<sizeof(HitTargetScoreDisplay), 136 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_HitTargetScoreDisplaySizeCheck;
  static_assert(sizeof(HitTargetScoreDisplay) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HitTargetScoreDisplay::*)()>(&GlobalNamespace::HitTargetScoreDisplay::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitTargetScoreDisplay*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HitTargetScoreDisplay::*)()>(&GlobalNamespace::HitTargetScoreDisplay::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitTargetScoreDisplay*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::ResetRotation
// Il2CppName: ResetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HitTargetScoreDisplay::*)()>(&GlobalNamespace::HitTargetScoreDisplay::ResetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitTargetScoreDisplay*), "ResetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::RotatingCo
// Il2CppName: RotatingCo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HitTargetScoreDisplay::*)()>(&GlobalNamespace::HitTargetScoreDisplay::RotatingCo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitTargetScoreDisplay*), "RotatingCo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::OnScoreChanged
// Il2CppName: OnScoreChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HitTargetScoreDisplay::*)(int)>(&GlobalNamespace::HitTargetScoreDisplay::OnScoreChanged)> {
  static const MethodInfo* get() {
    static auto* newScore = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitTargetScoreDisplay*), "OnScoreChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newScore});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitTargetScoreDisplay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
