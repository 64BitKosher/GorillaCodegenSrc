// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RotationStepper
  class RotationStepper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RotationStepper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotationStepper*, "", "RotationStepper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RotationStepper
  // [TokenAttribute] Offset: FFFFFFFF
  class RotationStepper : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::RotationStepper::ModeEnum
    struct ModeEnum;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RotationStepper/ModeEnum
    // [TokenAttribute] Offset: FFFFFFFF
    struct ModeEnum/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ModeEnum
      constexpr ModeEnum(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RotationStepper/ModeEnum Fixed
      static constexpr const int Fixed = 0;
      // Get static field: static public RotationStepper/ModeEnum Fixed
      static ::GlobalNamespace::RotationStepper::ModeEnum _get_Fixed();
      // Set static field: static public RotationStepper/ModeEnum Fixed
      static void _set_Fixed(::GlobalNamespace::RotationStepper::ModeEnum value);
      // static field const value: static public RotationStepper/ModeEnum Random
      static constexpr const int Random = 1;
      // Get static field: static public RotationStepper/ModeEnum Random
      static ::GlobalNamespace::RotationStepper::ModeEnum _get_Random();
      // Set static field: static public RotationStepper/ModeEnum Random
      static void _set_Random(::GlobalNamespace::RotationStepper::ModeEnum value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RotationStepper/ModeEnum
    #pragma pack(pop)
    static check_size<sizeof(RotationStepper::ModeEnum), 0 + sizeof(int)> __GlobalNamespace_RotationStepper_ModeEnumSizeCheck;
    static_assert(sizeof(RotationStepper::ModeEnum) == 0x4);
    public:
    // public RotationStepper/ModeEnum Mode
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::RotationStepper::ModeEnum Mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RotationStepper::ModeEnum) == 0x4);
    // public System.Single Angle
    // Size: 0x4
    // Offset: 0x24
    float Angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Frequency
    // Size: 0x4
    // Offset: 0x28
    float Frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_phase
    // Size: 0x4
    // Offset: 0x2C
    float m_phase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public RotationStepper/ModeEnum Mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RotationStepper::ModeEnum& dyn_Mode();
    // Get instance field reference: public System.Single Angle
    [[deprecated("Use field access instead!")]] float& dyn_Angle();
    // Get instance field reference: public System.Single Frequency
    [[deprecated("Use field access instead!")]] float& dyn_Frequency();
    // Get instance field reference: private System.Single m_phase
    [[deprecated("Use field access instead!")]] float& dyn_m_phase();
    // public System.Void OnEnable()
    // Offset: 0x2685C5C
    void OnEnable();
    // public System.Void Update()
    // Offset: 0x2685C6C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2685D94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationStepper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationStepper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationStepper*, creationType>()));
    }
  }; // RotationStepper
  #pragma pack(pop)
  static check_size<sizeof(RotationStepper), 44 + sizeof(float)> __GlobalNamespace_RotationStepperSizeCheck;
  static_assert(sizeof(RotationStepper) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotationStepper::ModeEnum, "", "RotationStepper/ModeEnum");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RotationStepper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotationStepper::*)()>(&GlobalNamespace::RotationStepper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotationStepper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotationStepper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotationStepper::*)()>(&GlobalNamespace::RotationStepper::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotationStepper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotationStepper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
