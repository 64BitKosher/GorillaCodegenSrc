// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: EnterPlayID
#include "GlobalNamespace/EnterPlayID.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WatchableStringSO
  class WatchableStringSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WatchableStringSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WatchableStringSO*, "", "WatchableStringSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: WatchableStringSO
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class WatchableStringSO : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String InitialValue
    // Size: 0x8
    // Offset: 0x18
    ::StringW InitialValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <_value>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private EnterPlayID enterPlayID
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::EnterPlayID enterPlayID;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnterPlayID) == 0x4);
    // Padding between fields: enterPlayID and: callbacks
    char __padding2[0x4] = {};
    // private System.Collections.Generic.List`1<System.Action`1<System.String>> callbacks
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String InitialValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_InitialValue();
    // Get instance field reference: private System.String <_value>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$_value$k__BackingField();
    // Get instance field reference: private EnterPlayID enterPlayID
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnterPlayID& dyn_enterPlayID();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Action`1<System.String>> callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>*& dyn_callbacks();
    // private System.String get__value()
    // Offset: 0x2898BBC
    ::StringW get__value();
    // private System.Void set__value(System.String value)
    // Offset: 0x2898BC4
    void set__value(::StringW value);
    // public System.String get_Value()
    // Offset: 0x2898BCC
    ::StringW get_Value();
    // public System.Void set_Value(System.String value)
    // Offset: 0x2898CB4
    void set_Value(::StringW value);
    // private System.Void EnsureInitialized()
    // Offset: 0x2898BE4
    void EnsureInitialized();
    // public System.Void AddCallback(System.Action`1<System.String> callback, System.Boolean shouldCallbackNow)
    // Offset: 0x2898E28
    void AddCallback(::System::Action_1<::StringW>* callback, bool shouldCallbackNow);
    // public System.Void RemoveCallback(System.Action`1<System.String> callback)
    // Offset: 0x289901C
    void RemoveCallback(::System::Action_1<::StringW>* callback);
    // public System.Void .ctor()
    // Offset: 0x2899094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WatchableStringSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WatchableStringSO*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x289907C
    // Implemented from: UnityEngine.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // WatchableStringSO
  #pragma pack(pop)
  static check_size<sizeof(WatchableStringSO), 48 + sizeof(::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>*)> __GlobalNamespace_WatchableStringSOSizeCheck;
  static_assert(sizeof(WatchableStringSO) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::get__value
// Il2CppName: get__value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::WatchableStringSO::*)()>(&GlobalNamespace::WatchableStringSO::get__value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "get__value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::set__value
// Il2CppName: set__value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WatchableStringSO::*)(::StringW)>(&GlobalNamespace::WatchableStringSO::set__value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "set__value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::WatchableStringSO::*)()>(&GlobalNamespace::WatchableStringSO::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WatchableStringSO::*)(::StringW)>(&GlobalNamespace::WatchableStringSO::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::EnsureInitialized
// Il2CppName: EnsureInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WatchableStringSO::*)()>(&GlobalNamespace::WatchableStringSO::EnsureInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "EnsureInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::AddCallback
// Il2CppName: AddCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WatchableStringSO::*)(::System::Action_1<::StringW>*, bool)>(&GlobalNamespace::WatchableStringSO::AddCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* shouldCallbackNow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "AddCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, shouldCallbackNow});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::RemoveCallback
// Il2CppName: RemoveCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WatchableStringSO::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::WatchableStringSO::RemoveCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "RemoveCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WatchableStringSO::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::WatchableStringSO::*)()>(&GlobalNamespace::WatchableStringSO::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WatchableStringSO*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
