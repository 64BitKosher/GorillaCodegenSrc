// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PassthroughBrush
  class PassthroughBrush;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrushController
  class BrushController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrushController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrushController*, "", "BrushController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BrushController
  // [TokenAttribute] Offset: FFFFFFFF
  class BrushController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BrushController::$FadeCameraClearColor$d__8
    class $FadeCameraClearColor$d__8;
    // Nested type: ::GlobalNamespace::BrushController::$FadeSphere$d__9
    class $FadeSphere$d__9;
    public:
    // public PassthroughBrush brush
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PassthroughBrush* brush;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PassthroughBrush*) == 0x8);
    // public UnityEngine.MeshRenderer backgroundSphere
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* backgroundSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Collections.IEnumerator grabRoutine
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::IEnumerator* grabRoutine;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // private System.Collections.IEnumerator releaseRoutine
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::IEnumerator* releaseRoutine;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    public:
    // Get instance field reference: public PassthroughBrush brush
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PassthroughBrush*& dyn_brush();
    // Get instance field reference: public UnityEngine.MeshRenderer backgroundSphere
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_backgroundSphere();
    // Get instance field reference: private System.Collections.IEnumerator grabRoutine
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_grabRoutine();
    // Get instance field reference: private System.Collections.IEnumerator releaseRoutine
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_releaseRoutine();
    // private System.Void Start()
    // Offset: 0x29313D4
    void Start();
    // private System.Void Update()
    // Offset: 0x29316A8
    void Update();
    // public System.Void Grab(OVRInput/Controller grabHand)
    // Offset: 0x29316F8
    void Grab(::GlobalNamespace::OVRInput::Controller grabHand);
    // public System.Void Release()
    // Offset: 0x2931868
    void Release();
    // private System.Collections.IEnumerator FadeCameraClearColor(UnityEngine.Color newColor, System.Single fadeTime)
    // Offset: 0x293190C
    ::System::Collections::IEnumerator* FadeCameraClearColor(::UnityEngine::Color newColor, float fadeTime);
    // private System.Collections.IEnumerator FadeSphere(UnityEngine.Color newColor, System.Single fadeTime, System.Boolean disableOnFinish)
    // Offset: 0x29317B0
    ::System::Collections::IEnumerator* FadeSphere(::UnityEngine::Color newColor, float fadeTime, bool disableOnFinish);
    // public System.Void .ctor()
    // Offset: 0x29319EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrushController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrushController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrushController*, creationType>()));
    }
  }; // BrushController
  #pragma pack(pop)
  static check_size<sizeof(BrushController), 56 + sizeof(::System::Collections::IEnumerator*)> __GlobalNamespace_BrushControllerSizeCheck;
  static_assert(sizeof(BrushController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrushController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrushController::*)()>(&GlobalNamespace::BrushController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrushController::*)()>(&GlobalNamespace::BrushController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrushController::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::BrushController::Grab)> {
  static const MethodInfo* get() {
    static auto* grabHand = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrushController::*)()>(&GlobalNamespace::BrushController::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::FadeCameraClearColor
// Il2CppName: FadeCameraClearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BrushController::*)(::UnityEngine::Color, float)>(&GlobalNamespace::BrushController::FadeCameraClearColor)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "FadeCameraClearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor, fadeTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::FadeSphere
// Il2CppName: FadeSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BrushController::*)(::UnityEngine::Color, float, bool)>(&GlobalNamespace::BrushController::FadeSphere)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* disableOnFinish = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrushController*), "FadeSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor, fadeTime, disableOnFinish});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrushController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
