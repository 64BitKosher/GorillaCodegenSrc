// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Slingshot
#include "GlobalNamespace/Slingshot.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Slingshot::SlingshotState, "", "Slingshot/SlingshotState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Slingshot/SlingshotState
  // [TokenAttribute] Offset: FFFFFFFF
  struct Slingshot::SlingshotState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SlingshotState
    constexpr SlingshotState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Slingshot/SlingshotState NoState
    static constexpr const int NoState = 1;
    // Get static field: static public Slingshot/SlingshotState NoState
    static ::GlobalNamespace::Slingshot::SlingshotState _get_NoState();
    // Set static field: static public Slingshot/SlingshotState NoState
    static void _set_NoState(::GlobalNamespace::Slingshot::SlingshotState value);
    // static field const value: static public Slingshot/SlingshotState OnChest
    static constexpr const int OnChest = 2;
    // Get static field: static public Slingshot/SlingshotState OnChest
    static ::GlobalNamespace::Slingshot::SlingshotState _get_OnChest();
    // Set static field: static public Slingshot/SlingshotState OnChest
    static void _set_OnChest(::GlobalNamespace::Slingshot::SlingshotState value);
    // static field const value: static public Slingshot/SlingshotState LeftHandDrawing
    static constexpr const int LeftHandDrawing = 4;
    // Get static field: static public Slingshot/SlingshotState LeftHandDrawing
    static ::GlobalNamespace::Slingshot::SlingshotState _get_LeftHandDrawing();
    // Set static field: static public Slingshot/SlingshotState LeftHandDrawing
    static void _set_LeftHandDrawing(::GlobalNamespace::Slingshot::SlingshotState value);
    // static field const value: static public Slingshot/SlingshotState RightHandDrawing
    static constexpr const int RightHandDrawing = 8;
    // Get static field: static public Slingshot/SlingshotState RightHandDrawing
    static ::GlobalNamespace::Slingshot::SlingshotState _get_RightHandDrawing();
    // Set static field: static public Slingshot/SlingshotState RightHandDrawing
    static void _set_RightHandDrawing(::GlobalNamespace::Slingshot::SlingshotState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Slingshot/SlingshotState
  #pragma pack(pop)
  static check_size<sizeof(Slingshot::SlingshotState), 0 + sizeof(int)> __GlobalNamespace_Slingshot_SlingshotStateSizeCheck;
  static_assert(sizeof(Slingshot::SlingshotState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
