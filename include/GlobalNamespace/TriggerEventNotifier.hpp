// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TriggerEventNotifier
  class TriggerEventNotifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TriggerEventNotifier);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TriggerEventNotifier*, "", "TriggerEventNotifier");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: TriggerEventNotifier
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerEventNotifier : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TriggerEventNotifier::TriggerEvent
    class TriggerEvent;
    public:
    // private TriggerEventNotifier/TriggerEvent TriggerEnterEvent
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::TriggerEventNotifier::TriggerEvent* TriggerEnterEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*) == 0x8);
    // private TriggerEventNotifier/TriggerEvent TriggerExitEvent
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::TriggerEventNotifier::TriggerEvent* TriggerExitEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*) == 0x8);
    // public System.Int32 maskIndex
    // Size: 0x4
    // Offset: 0x30
    int maskIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private TriggerEventNotifier/TriggerEvent TriggerEnterEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TriggerEventNotifier::TriggerEvent*& dyn_TriggerEnterEvent();
    // Get instance field reference: private TriggerEventNotifier/TriggerEvent TriggerExitEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TriggerEventNotifier::TriggerEvent*& dyn_TriggerExitEvent();
    // Get instance field reference: public System.Int32 maskIndex
    [[deprecated("Use field access instead!")]] int& dyn_maskIndex();
    // public System.Void add_TriggerEnterEvent(TriggerEventNotifier/TriggerEvent value)
    // Offset: 0x2774E80
    void add_TriggerEnterEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value);
    // public System.Void remove_TriggerEnterEvent(TriggerEventNotifier/TriggerEvent value)
    // Offset: 0x2775154
    void remove_TriggerEnterEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value);
    // public System.Void add_TriggerExitEvent(TriggerEventNotifier/TriggerEvent value)
    // Offset: 0x2774F1C
    void add_TriggerExitEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value);
    // public System.Void remove_TriggerExitEvent(TriggerEventNotifier/TriggerEvent value)
    // Offset: 0x27751F0
    void remove_TriggerExitEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x2782D90
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x2782DB8
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x2782DE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerEventNotifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerEventNotifier*, creationType>()));
    }
  }; // TriggerEventNotifier
  #pragma pack(pop)
  static check_size<sizeof(TriggerEventNotifier), 48 + sizeof(int)> __GlobalNamespace_TriggerEventNotifierSizeCheck;
  static_assert(sizeof(TriggerEventNotifier) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::add_TriggerEnterEvent
// Il2CppName: add_TriggerEnterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*)>(&GlobalNamespace::TriggerEventNotifier::add_TriggerEnterEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "add_TriggerEnterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::remove_TriggerEnterEvent
// Il2CppName: remove_TriggerEnterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*)>(&GlobalNamespace::TriggerEventNotifier::remove_TriggerEnterEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "remove_TriggerEnterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::add_TriggerExitEvent
// Il2CppName: add_TriggerExitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*)>(&GlobalNamespace::TriggerEventNotifier::add_TriggerExitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "add_TriggerExitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::remove_TriggerExitEvent
// Il2CppName: remove_TriggerExitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*)>(&GlobalNamespace::TriggerEventNotifier::remove_TriggerExitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TriggerEventNotifier/TriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "remove_TriggerExitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::UnityEngine::Collider*)>(&GlobalNamespace::TriggerEventNotifier::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerEventNotifier::*)(::UnityEngine::Collider*)>(&GlobalNamespace::TriggerEventNotifier::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerEventNotifier*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerEventNotifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
