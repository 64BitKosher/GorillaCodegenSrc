// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: DevConsole
#include "GlobalNamespace/DevConsole.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaDevButton
  class GorillaDevButton;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevConsoleInstance
  class DevConsoleInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevConsoleInstance);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevConsoleInstance*, "", "DevConsoleInstance");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: DevConsoleInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class DevConsoleInstance : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GorillaDevButton[] buttons
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::GorillaDevButton*> buttons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaDevButton*>) == 0x8);
    // public UnityEngine.GameObject[] disableWhileActive
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> disableWhileActive;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] enableWhileActive
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::GameObject*> enableWhileActive;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.Single maxHeight
    // Size: 0x4
    // Offset: 0x38
    float maxHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineHeight
    // Size: 0x4
    // Offset: 0x3C
    float lineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 targetLogIndex
    // Size: 0x4
    // Offset: 0x40
    int targetLogIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentLogIndex
    // Size: 0x4
    // Offset: 0x44
    int currentLogIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 expandAmount
    // Size: 0x4
    // Offset: 0x48
    int expandAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 expandedMessageIndex
    // Size: 0x4
    // Offset: 0x4C
    int expandedMessageIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean canExpand
    // Size: 0x1
    // Offset: 0x50
    bool canExpand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canExpand and: logLines
    char __padding9[0x7] = {};
    // public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>* logLines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*) == 0x8);
    // public System.Collections.Generic.HashSet`1<UnityEngine.LogType> selectedLogTypes
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::HashSet_1<::UnityEngine::LogType>* selectedLogTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::LogType>*) == 0x8);
    // private GorillaDevButton[] logTypeButtons
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::GlobalNamespace::GorillaDevButton*> logTypeButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaDevButton*>) == 0x8);
    // private GorillaDevButton BottomButton
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::GorillaDevButton* BottomButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaDevButton*) == 0x8);
    // public System.Single lineStartHeight
    // Size: 0x4
    // Offset: 0x78
    float lineStartHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineStartZ
    // Size: 0x4
    // Offset: 0x7C
    float lineStartZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single textStartHeight
    // Size: 0x4
    // Offset: 0x80
    float textStartHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineStartTextWidth
    // Size: 0x4
    // Offset: 0x84
    float lineStartTextWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Double textScale
    // Size: 0x8
    // Offset: 0x88
    double textScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Boolean isEnabled
    // Size: 0x1
    // Offset: 0x90
    bool isEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isEnabled and: ConsoleLineExample
    char __padding19[0x7] = {};
    // private UnityEngine.GameObject ConsoleLineExample
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* ConsoleLineExample;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public GorillaDevButton[] buttons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaDevButton*>& dyn_buttons();
    // Get instance field reference: public UnityEngine.GameObject[] disableWhileActive
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_disableWhileActive();
    // Get instance field reference: public UnityEngine.GameObject[] enableWhileActive
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_enableWhileActive();
    // Get instance field reference: public System.Single maxHeight
    [[deprecated("Use field access instead!")]] float& dyn_maxHeight();
    // Get instance field reference: public System.Single lineHeight
    [[deprecated("Use field access instead!")]] float& dyn_lineHeight();
    // Get instance field reference: public System.Int32 targetLogIndex
    [[deprecated("Use field access instead!")]] int& dyn_targetLogIndex();
    // Get instance field reference: public System.Int32 currentLogIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentLogIndex();
    // Get instance field reference: public System.Int32 expandAmount
    [[deprecated("Use field access instead!")]] int& dyn_expandAmount();
    // Get instance field reference: public System.Int32 expandedMessageIndex
    [[deprecated("Use field access instead!")]] int& dyn_expandedMessageIndex();
    // Get instance field reference: public System.Boolean canExpand
    [[deprecated("Use field access instead!")]] bool& dyn_canExpand();
    // Get instance field reference: public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*& dyn_logLines();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<UnityEngine.LogType> selectedLogTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::LogType>*& dyn_selectedLogTypes();
    // Get instance field reference: private GorillaDevButton[] logTypeButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaDevButton*>& dyn_logTypeButtons();
    // Get instance field reference: private GorillaDevButton BottomButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& dyn_BottomButton();
    // Get instance field reference: public System.Single lineStartHeight
    [[deprecated("Use field access instead!")]] float& dyn_lineStartHeight();
    // Get instance field reference: public System.Single lineStartZ
    [[deprecated("Use field access instead!")]] float& dyn_lineStartZ();
    // Get instance field reference: public System.Single textStartHeight
    [[deprecated("Use field access instead!")]] float& dyn_textStartHeight();
    // Get instance field reference: public System.Single lineStartTextWidth
    [[deprecated("Use field access instead!")]] float& dyn_lineStartTextWidth();
    // Get instance field reference: public System.Double textScale
    [[deprecated("Use field access instead!")]] double& dyn_textScale();
    // Get instance field reference: public System.Boolean isEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isEnabled();
    // Get instance field reference: private UnityEngine.GameObject ConsoleLineExample
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ConsoleLineExample();
    // private System.Void OnEnable()
    // Offset: 0x279AB64
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x279A9F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevConsoleInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevConsoleInstance*, creationType>()));
    }
  }; // DevConsoleInstance
  #pragma pack(pop)
  static check_size<sizeof(DevConsoleInstance), 152 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_DevConsoleInstanceSizeCheck;
  static_assert(sizeof(DevConsoleInstance) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevConsoleInstance::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DevConsoleInstance::*)()>(&GlobalNamespace::DevConsoleInstance::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevConsoleInstance*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevConsoleInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
