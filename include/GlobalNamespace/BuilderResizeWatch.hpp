// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HeldButton
  class HeldButton;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: SizeManager
  class SizeManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderResizeWatch
  class BuilderResizeWatch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderResizeWatch);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderResizeWatch*, "", "BuilderResizeWatch");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: BuilderResizeWatch
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderResizeWatch : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private HeldButton enlargeButton
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::HeldButton* enlargeButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HeldButton*) == 0x8);
    // private VRRig ownerRig
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private SizeManager sizeManager
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SizeManager* sizeManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeManager*) == 0x8);
    // public System.Boolean affectLayerA
    // Size: 0x1
    // Offset: 0x38
    bool affectLayerA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerB
    // Size: 0x1
    // Offset: 0x39
    bool affectLayerB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerC
    // Size: 0x1
    // Offset: 0x3A
    bool affectLayerC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean affectLayerD
    // Size: 0x1
    // Offset: 0x3B
    bool affectLayerD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private HeldButton enlargeButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HeldButton*& dyn_enlargeButton();
    // Get instance field reference: private VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // Get instance field reference: private SizeManager sizeManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeManager*& dyn_sizeManager();
    // Get instance field reference: public System.Boolean affectLayerA
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerA();
    // Get instance field reference: public System.Boolean affectLayerB
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerB();
    // Get instance field reference: public System.Boolean affectLayerC
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerC();
    // Get instance field reference: public System.Boolean affectLayerD
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerD();
    // public System.Int32 get_SizeLayerMask()
    // Offset: 0x26EE028
    int get_SizeLayerMask();
    // private System.Void Start()
    // Offset: 0x26EE060
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x26EE15C
    void OnDestroy();
    // private System.Void OnEnlargeButtonPressed()
    // Offset: 0x26EE234
    void OnEnlargeButtonPressed();
    // public System.Void .ctor()
    // Offset: 0x26EE3A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderResizeWatch* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderResizeWatch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderResizeWatch*, creationType>()));
    }
  }; // BuilderResizeWatch
  #pragma pack(pop)
  static check_size<sizeof(BuilderResizeWatch), 59 + sizeof(bool)> __GlobalNamespace_BuilderResizeWatchSizeCheck;
  static_assert(sizeof(BuilderResizeWatch) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderResizeWatch::get_SizeLayerMask
// Il2CppName: get_SizeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuilderResizeWatch::*)()>(&GlobalNamespace::BuilderResizeWatch::get_SizeLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderResizeWatch*), "get_SizeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderResizeWatch::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderResizeWatch::*)()>(&GlobalNamespace::BuilderResizeWatch::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderResizeWatch*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderResizeWatch::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderResizeWatch::*)()>(&GlobalNamespace::BuilderResizeWatch::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderResizeWatch*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderResizeWatch::OnEnlargeButtonPressed
// Il2CppName: OnEnlargeButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderResizeWatch::*)()>(&GlobalNamespace::BuilderResizeWatch::OnEnlargeButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderResizeWatch*), "OnEnlargeButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuilderResizeWatch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
