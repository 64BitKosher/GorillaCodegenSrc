// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: TransferrableObject/ItemStates
// Already included the same include: GlobalNamespace/TransferrableObject.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RequestableOwnershipGuard
  class RequestableOwnershipGuard;
  // Forward declaring type: TransformViewTeleportSerializer
  class TransformViewTeleportSerializer;
  // Forward declaring type: WorldTargetItem
  class WorldTargetItem;
  // Skipping declaration: TransferrableObject because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WorldShareableItem
  class WorldShareableItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WorldShareableItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WorldShareableItem*, "", "WorldShareableItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: WorldShareableItem
  // [TokenAttribute] Offset: FFFFFFFF
  class WorldShareableItem : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunInstantiateMagicCallback, public ::Photon::Pun::IOnPhotonViewOwnerChange, public ::Photon::Pun::IPunObservable, public ::GlobalNamespace::IRequestableOwnershipGuardCallbacks*/ {
    public:
    // Nested type: ::GlobalNamespace::WorldShareableItem::Delegate
    class Delegate;
    // Nested type: ::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate
    class OnOwnerChangeDelegate;
    // Nested type: ::GlobalNamespace::WorldShareableItem::CachedData
    struct CachedData;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: WorldShareableItem/CachedData
    // [TokenAttribute] Offset: FFFFFFFF
    struct CachedData/*, public ::System::ValueType*/ {
      public:
      public:
      // public TransferrableObject/PositionState cachedTransferableObjectState
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::TransferrableObject::PositionState cachedTransferableObjectState;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
      // public TransferrableObject/ItemStates cachedTransferableObjectItemState
      // Size: 0x4
      // Offset: 0x4
      ::GlobalNamespace::TransferrableObject::ItemStates cachedTransferableObjectItemState;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::TransferrableObject::ItemStates) == 0x4);
      public:
      // Creating value type constructor for type: CachedData
      constexpr CachedData(::GlobalNamespace::TransferrableObject::PositionState cachedTransferableObjectState_ = {}, ::GlobalNamespace::TransferrableObject::ItemStates cachedTransferableObjectItemState_ = {}) noexcept : cachedTransferableObjectState{cachedTransferableObjectState_}, cachedTransferableObjectItemState{cachedTransferableObjectItemState_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public TransferrableObject/PositionState cachedTransferableObjectState
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_cachedTransferableObjectState();
      // Get instance field reference: public TransferrableObject/ItemStates cachedTransferableObjectItemState
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& dyn_cachedTransferableObjectItemState();
    }; // WorldShareableItem/CachedData
    #pragma pack(pop)
    static check_size<sizeof(WorldShareableItem::CachedData), 4 + sizeof(::GlobalNamespace::TransferrableObject::ItemStates)> __GlobalNamespace_WorldShareableItem_CachedDataSizeCheck;
    static_assert(sizeof(WorldShareableItem::CachedData) == 0x8);
    public:
    // private TransferrableObject/PositionState <transferableObjectState>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::TransferrableObject::PositionState transferableObjectState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // private TransferrableObject/ItemStates <transferableObjectItemState>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::TransferrableObject::ItemStates transferableObjectItemState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::ItemStates) == 0x4);
    // private System.Boolean validShareable
    // Size: 0x1
    // Offset: 0x30
    bool validShareable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: validShareable and: view
    char __padding2[0x7] = {};
    // Photon.Pun.PhotonView view
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Pun::PhotonView* view;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public RequestableOwnershipGuard guard
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::RequestableOwnershipGuard* guard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RequestableOwnershipGuard*) == 0x8);
    // private TransformViewTeleportSerializer teleportSerializer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::TransformViewTeleportSerializer* teleportSerializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransformViewTeleportSerializer*) == 0x8);
    // private WorldTargetItem target
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::WorldTargetItem* target;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldTargetItem*) == 0x8);
    // public WorldShareableItem/OnOwnerChangeDelegate onOwnerChangeCb
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate* onOwnerChangeCb;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*) == 0x8);
    // public System.Action rpcCallBack
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* rpcCallBack;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean enableRemoteSync
    // Size: 0x1
    // Offset: 0x68
    bool enableRemoteSync;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableRemoteSync and: cachedDatas
    char __padding9[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<Photon.Realtime.Player,WorldShareableItem/CachedData> cachedDatas
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>* cachedDatas;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks
    operator ::GlobalNamespace::IRequestableOwnershipGuardCallbacks() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>(this);
    }
    // Get instance field reference: private TransferrableObject/PositionState <transferableObjectState>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_$transferableObjectState$k__BackingField();
    // Get instance field reference: private TransferrableObject/ItemStates <transferableObjectItemState>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& dyn_$transferableObjectItemState$k__BackingField();
    // Get instance field reference: private System.Boolean validShareable
    [[deprecated("Use field access instead!")]] bool& dyn_validShareable();
    // Get instance field reference: Photon.Pun.PhotonView view
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_view();
    // Get instance field reference: public RequestableOwnershipGuard guard
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& dyn_guard();
    // Get instance field reference: private TransformViewTeleportSerializer teleportSerializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransformViewTeleportSerializer*& dyn_teleportSerializer();
    // Get instance field reference: private WorldTargetItem target
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldTargetItem*& dyn_target();
    // Get instance field reference: public WorldShareableItem/OnOwnerChangeDelegate onOwnerChangeCb
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*& dyn_onOwnerChangeCb();
    // Get instance field reference: public System.Action rpcCallBack
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_rpcCallBack();
    // Get instance field reference: private System.Boolean enableRemoteSync
    [[deprecated("Use field access instead!")]] bool& dyn_enableRemoteSync();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<Photon.Realtime.Player,WorldShareableItem/CachedData> cachedDatas
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>*& dyn_cachedDatas();
    // public TransferrableObject/PositionState get_transferableObjectState()
    // Offset: 0x2972E6C
    ::GlobalNamespace::TransferrableObject::PositionState get_transferableObjectState();
    // public System.Void set_transferableObjectState(TransferrableObject/PositionState value)
    // Offset: 0x2972E74
    void set_transferableObjectState(::GlobalNamespace::TransferrableObject::PositionState value);
    // public TransferrableObject/ItemStates get_transferableObjectItemState()
    // Offset: 0x2972E7C
    ::GlobalNamespace::TransferrableObject::ItemStates get_transferableObjectItemState();
    // public System.Void set_transferableObjectItemState(TransferrableObject/ItemStates value)
    // Offset: 0x2972E84
    void set_transferableObjectItemState(::GlobalNamespace::TransferrableObject::ItemStates value);
    // public WorldTargetItem get_Target()
    // Offset: 0x2972E8C
    ::GlobalNamespace::WorldTargetItem* get_Target();
    // private System.Void Awake()
    // Offset: 0x2972E94
    void Awake();
    // public System.Void OnDestroy()
    // Offset: 0x29733F4
    void OnDestroy();
    // public System.Void SetupSharableViewIDs(Photon.Realtime.Player player, System.Int32 slotID)
    // Offset: 0x2973450
    void SetupSharableViewIDs(::Photon::Realtime::Player* player, int slotID);
    // public System.Void ResetViews()
    // Offset: 0x2973554
    void ResetViews();
    // public System.Void SetupSharableObject(System.Int32 itemIDx, Photon.Realtime.Player owner, UnityEngine.Transform targetXform)
    // Offset: 0x297362C
    void SetupSharableObject(int itemIDx, ::Photon::Realtime::Player* owner, ::UnityEngine::Transform* targetXform);
    // public System.Void OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2973A64
    void OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x2973A68
    void Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // public System.Boolean get_EnableRemoteSync()
    // Offset: 0x2973A84
    bool get_EnableRemoteSync();
    // public System.Void set_EnableRemoteSync(System.Boolean value)
    // Offset: 0x2973A8C
    void set_EnableRemoteSync(bool value);
    // public System.Void TriggeredUpdate()
    // Offset: 0x2973A98
    void TriggeredUpdate();
    // public System.Void SyncToSceneObject(TransferrableObject transferrableObject)
    // Offset: 0x2973C5C
    void SyncToSceneObject(::GlobalNamespace::TransferrableObject* transferrableObject);
    // public System.Void SetupSceneObjectOnNetwork(Photon.Realtime.Player owner)
    // Offset: 0x2973D28
    void SetupSceneObjectOnNetwork(::Photon::Realtime::Player* owner);
    // public System.Boolean IsValid()
    // Offset: 0x2973C4C
    bool IsValid();
    // public System.Void Invalidate()
    // Offset: 0x29739D4
    void Invalidate();
    // public System.Void OnOwnershipTransferred(Photon.Realtime.Player toPlayer, Photon.Realtime.Player fromPlayer)
    // Offset: 0x2973D4C
    void OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer);
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2973DF0
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // System.Void RPCWorldShareable(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2974028
    void RPCWorldShareable(::Photon::Pun::PhotonMessageInfo info);
    // public System.Boolean OnMasterClientAssistedTakeoverRequest(Photon.Realtime.Player fromPlayer, Photon.Realtime.Player toPlayer)
    // Offset: 0x297410C
    bool OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer);
    // public System.Void OnMyCreatorLeft()
    // Offset: 0x2974114
    void OnMyCreatorLeft();
    // public System.Boolean OnOwnershipRequest(Photon.Realtime.Player fromPlayer)
    // Offset: 0x2974118
    bool OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer);
    // public System.Void OnMyOwnerLeft()
    // Offset: 0x2974120
    void OnMyOwnerLeft();
    // public System.Void SetWillTeleport()
    // Offset: 0x2974124
    void SetWillTeleport();
    // public System.Void .ctor()
    // Offset: 0x2974140
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WorldShareableItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WorldShareableItem*, creationType>()));
    }
    // public override System.Void OnEnable()
    // Offset: 0x2972F54
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x297319C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
    // public override System.Void OnLeftRoom()
    // Offset: 0x2973448
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
  }; // WorldShareableItem
  #pragma pack(pop)
  static check_size<sizeof(WorldShareableItem), 112 + sizeof(::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>*)> __GlobalNamespace_WorldShareableItemSizeCheck;
  static_assert(sizeof(WorldShareableItem) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WorldShareableItem::CachedData, "", "WorldShareableItem/CachedData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::get_transferableObjectState
// Il2CppName: get_transferableObjectState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject::PositionState (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::get_transferableObjectState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "get_transferableObjectState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::set_transferableObjectState
// Il2CppName: set_transferableObjectState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::GlobalNamespace::TransferrableObject::PositionState)>(&GlobalNamespace::WorldShareableItem::set_transferableObjectState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/PositionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "set_transferableObjectState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::get_transferableObjectItemState
// Il2CppName: get_transferableObjectItemState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TransferrableObject::ItemStates (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::get_transferableObjectItemState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "get_transferableObjectItemState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::set_transferableObjectItemState
// Il2CppName: set_transferableObjectItemState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::GlobalNamespace::TransferrableObject::ItemStates)>(&GlobalNamespace::WorldShareableItem::set_transferableObjectItemState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TransferrableObject/ItemStates")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "set_transferableObjectItemState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::WorldTargetItem* (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::SetupSharableViewIDs
// Il2CppName: SetupSharableViewIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*, int)>(&GlobalNamespace::WorldShareableItem::SetupSharableViewIDs)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* slotID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "SetupSharableViewIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, slotID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::ResetViews
// Il2CppName: ResetViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::ResetViews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "ResetViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::SetupSharableObject
// Il2CppName: SetupSharableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(int, ::Photon::Realtime::Player*, ::UnityEngine::Transform*)>(&GlobalNamespace::WorldShareableItem::SetupSharableObject)> {
  static const MethodInfo* get() {
    static auto* itemIDx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* targetXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "SetupSharableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemIDx, owner, targetXform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnPhotonInstantiate
// Il2CppName: OnPhotonInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::WorldShareableItem::OnPhotonInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnPhotonInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange
// Il2CppName: Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::WorldShareableItem::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::get_EnableRemoteSync
// Il2CppName: get_EnableRemoteSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::get_EnableRemoteSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "get_EnableRemoteSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::set_EnableRemoteSync
// Il2CppName: set_EnableRemoteSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(bool)>(&GlobalNamespace::WorldShareableItem::set_EnableRemoteSync)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "set_EnableRemoteSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::TriggeredUpdate
// Il2CppName: TriggeredUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::TriggeredUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "TriggeredUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::SyncToSceneObject
// Il2CppName: SyncToSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::GlobalNamespace::TransferrableObject*)>(&GlobalNamespace::WorldShareableItem::SyncToSceneObject)> {
  static const MethodInfo* get() {
    static auto* transferrableObject = &::il2cpp_utils::GetClassFromName("", "TransferrableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "SyncToSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transferrableObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::SetupSceneObjectOnNetwork
// Il2CppName: SetupSceneObjectOnNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::WorldShareableItem::SetupSceneObjectOnNetwork)> {
  static const MethodInfo* get() {
    static auto* owner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "SetupSceneObjectOnNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::Invalidate
// Il2CppName: Invalidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::Invalidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "Invalidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnOwnershipTransferred
// Il2CppName: OnOwnershipTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::WorldShareableItem::OnOwnershipTransferred)> {
  static const MethodInfo* get() {
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnOwnershipTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toPlayer, fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::WorldShareableItem::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::RPCWorldShareable
// Il2CppName: RPCWorldShareable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::WorldShareableItem::RPCWorldShareable)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "RPCWorldShareable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnMasterClientAssistedTakeoverRequest
// Il2CppName: OnMasterClientAssistedTakeoverRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::WorldShareableItem::OnMasterClientAssistedTakeoverRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnMasterClientAssistedTakeoverRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer, toPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnMyCreatorLeft
// Il2CppName: OnMyCreatorLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnMyCreatorLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnMyCreatorLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnOwnershipRequest
// Il2CppName: OnOwnershipRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::WorldShareableItem::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::WorldShareableItem::OnOwnershipRequest)> {
  static const MethodInfo* get() {
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnOwnershipRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnMyOwnerLeft
// Il2CppName: OnMyOwnerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnMyOwnerLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnMyOwnerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::SetWillTeleport
// Il2CppName: SetWillTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::SetWillTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "SetWillTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldShareableItem::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WorldShareableItem::*)()>(&GlobalNamespace::WorldShareableItem::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldShareableItem*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
