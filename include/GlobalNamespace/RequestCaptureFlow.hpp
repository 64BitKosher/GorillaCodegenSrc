// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Button
#include "GlobalNamespace/OVRInput_Button.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRSceneManager
  class OVRSceneManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RequestCaptureFlow
  class RequestCaptureFlow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RequestCaptureFlow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RequestCaptureFlow*, "", "RequestCaptureFlow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RequestCaptureFlow
  // [TokenAttribute] Offset: FFFFFFFF
  class RequestCaptureFlow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public OVRInput/Button RequestCaptureBtn
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Button RequestCaptureBtn;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    // Padding between fields: RequestCaptureBtn and: sceneManager
    char __padding0[0x4] = {};
    // private OVRSceneManager _sceneManager
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRSceneManager* sceneManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSceneManager*) == 0x8);
    public:
    // Get instance field reference: public OVRInput/Button RequestCaptureBtn
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn_RequestCaptureBtn();
    // Get instance field reference: private OVRSceneManager _sceneManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSceneManager*& dyn__sceneManager();
    // private System.Void Start()
    // Offset: 0x2947CB8
    void Start();
    // private System.Void Update()
    // Offset: 0x2947D30
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2947DB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RequestCaptureFlow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestCaptureFlow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RequestCaptureFlow*, creationType>()));
    }
  }; // RequestCaptureFlow
  #pragma pack(pop)
  static check_size<sizeof(RequestCaptureFlow), 40 + sizeof(::GlobalNamespace::OVRSceneManager*)> __GlobalNamespace_RequestCaptureFlowSizeCheck;
  static_assert(sizeof(RequestCaptureFlow) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RequestCaptureFlow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestCaptureFlow::*)()>(&GlobalNamespace::RequestCaptureFlow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestCaptureFlow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestCaptureFlow::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestCaptureFlow::*)()>(&GlobalNamespace::RequestCaptureFlow::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestCaptureFlow*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RequestCaptureFlow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
