// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FusionGraphBase
#include "GlobalNamespace/FusionGraphBase.hpp"
// Including type: Fusion.FusionGraphVisualization
#include "Fusion/FusionGraphVisualization.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Dropdown
  class Dropdown;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Layouts because it is already included!
  // Skipping declaration: ShowGraphOptions because it is already included!
  // Forward declaring type: FusionStats
  class FusionStats;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: IStatsBuffer
  class IStatsBuffer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FusionGraph
  class FusionGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FusionGraph);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraph*, "", "FusionGraph");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x170
  #pragma pack(push, 1)
  // Autogenerated type: FusionGraph
  // [TokenAttribute] Offset: FFFFFFFF
  class FusionGraph : public ::GlobalNamespace::FusionGraphBase {
    public:
    // Nested type: ::GlobalNamespace::FusionGraph::Layouts
    struct Layouts;
    // Nested type: ::GlobalNamespace::FusionGraph::ShowGraphOptions
    struct ShowGraphOptions;
    // Nested type: ::GlobalNamespace::FusionGraph::ShaderType
    struct ShaderType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionGraph/Layouts
    // [TokenAttribute] Offset: FFFFFFFF
    struct Layouts/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Layouts
      constexpr Layouts(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionGraph/Layouts Auto
      static constexpr const int Auto = 0;
      // Get static field: static public FusionGraph/Layouts Auto
      static ::GlobalNamespace::FusionGraph::Layouts _get_Auto();
      // Set static field: static public FusionGraph/Layouts Auto
      static void _set_Auto(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts FullAuto
      static constexpr const int FullAuto = 1;
      // Get static field: static public FusionGraph/Layouts FullAuto
      static ::GlobalNamespace::FusionGraph::Layouts _get_FullAuto();
      // Set static field: static public FusionGraph/Layouts FullAuto
      static void _set_FullAuto(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts FullNoOverlap
      static constexpr const int FullNoOverlap = 2;
      // Get static field: static public FusionGraph/Layouts FullNoOverlap
      static ::GlobalNamespace::FusionGraph::Layouts _get_FullNoOverlap();
      // Set static field: static public FusionGraph/Layouts FullNoOverlap
      static void _set_FullNoOverlap(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts CenteredAuto
      static constexpr const int CenteredAuto = 3;
      // Get static field: static public FusionGraph/Layouts CenteredAuto
      static ::GlobalNamespace::FusionGraph::Layouts _get_CenteredAuto();
      // Set static field: static public FusionGraph/Layouts CenteredAuto
      static void _set_CenteredAuto(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts CenteredNoGraph
      static constexpr const int CenteredNoGraph = 4;
      // Get static field: static public FusionGraph/Layouts CenteredNoGraph
      static ::GlobalNamespace::FusionGraph::Layouts _get_CenteredNoGraph();
      // Set static field: static public FusionGraph/Layouts CenteredNoGraph
      static void _set_CenteredNoGraph(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts CenteredNoOverlap
      static constexpr const int CenteredNoOverlap = 5;
      // Get static field: static public FusionGraph/Layouts CenteredNoOverlap
      static ::GlobalNamespace::FusionGraph::Layouts _get_CenteredNoOverlap();
      // Set static field: static public FusionGraph/Layouts CenteredNoOverlap
      static void _set_CenteredNoOverlap(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts CompactAuto
      static constexpr const int CompactAuto = 6;
      // Get static field: static public FusionGraph/Layouts CompactAuto
      static ::GlobalNamespace::FusionGraph::Layouts _get_CompactAuto();
      // Set static field: static public FusionGraph/Layouts CompactAuto
      static void _set_CompactAuto(::GlobalNamespace::FusionGraph::Layouts value);
      // static field const value: static public FusionGraph/Layouts CompactNoGraph
      static constexpr const int CompactNoGraph = 7;
      // Get static field: static public FusionGraph/Layouts CompactNoGraph
      static ::GlobalNamespace::FusionGraph::Layouts _get_CompactNoGraph();
      // Set static field: static public FusionGraph/Layouts CompactNoGraph
      static void _set_CompactNoGraph(::GlobalNamespace::FusionGraph::Layouts value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionGraph/Layouts
    #pragma pack(pop)
    static check_size<sizeof(FusionGraph::Layouts), 0 + sizeof(int)> __GlobalNamespace_FusionGraph_LayoutsSizeCheck;
    static_assert(sizeof(FusionGraph::Layouts) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionGraph/ShowGraphOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShowGraphOptions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShowGraphOptions
      constexpr ShowGraphOptions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionGraph/ShowGraphOptions Never
      static constexpr const int Never = 0;
      // Get static field: static public FusionGraph/ShowGraphOptions Never
      static ::GlobalNamespace::FusionGraph::ShowGraphOptions _get_Never();
      // Set static field: static public FusionGraph/ShowGraphOptions Never
      static void _set_Never(::GlobalNamespace::FusionGraph::ShowGraphOptions value);
      // static field const value: static public FusionGraph/ShowGraphOptions OverlayOnly
      static constexpr const int OverlayOnly = 1;
      // Get static field: static public FusionGraph/ShowGraphOptions OverlayOnly
      static ::GlobalNamespace::FusionGraph::ShowGraphOptions _get_OverlayOnly();
      // Set static field: static public FusionGraph/ShowGraphOptions OverlayOnly
      static void _set_OverlayOnly(::GlobalNamespace::FusionGraph::ShowGraphOptions value);
      // static field const value: static public FusionGraph/ShowGraphOptions Always
      static constexpr const int Always = 2;
      // Get static field: static public FusionGraph/ShowGraphOptions Always
      static ::GlobalNamespace::FusionGraph::ShowGraphOptions _get_Always();
      // Set static field: static public FusionGraph/ShowGraphOptions Always
      static void _set_Always(::GlobalNamespace::FusionGraph::ShowGraphOptions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionGraph/ShowGraphOptions
    #pragma pack(pop)
    static check_size<sizeof(FusionGraph::ShowGraphOptions), 0 + sizeof(int)> __GlobalNamespace_FusionGraph_ShowGraphOptionsSizeCheck;
    static_assert(sizeof(FusionGraph::ShowGraphOptions) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FusionGraph/ShaderType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShaderType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShaderType
      constexpr ShaderType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FusionGraph/ShaderType None
      static constexpr const int None = 0;
      // Get static field: static public FusionGraph/ShaderType None
      static ::GlobalNamespace::FusionGraph::ShaderType _get_None();
      // Set static field: static public FusionGraph/ShaderType None
      static void _set_None(::GlobalNamespace::FusionGraph::ShaderType value);
      // static field const value: static public FusionGraph/ShaderType Overlay
      static constexpr const int Overlay = 1;
      // Get static field: static public FusionGraph/ShaderType Overlay
      static ::GlobalNamespace::FusionGraph::ShaderType _get_Overlay();
      // Set static field: static public FusionGraph/ShaderType Overlay
      static void _set_Overlay(::GlobalNamespace::FusionGraph::ShaderType value);
      // static field const value: static public FusionGraph/ShaderType GameObject
      static constexpr const int GameObject = 2;
      // Get static field: static public FusionGraph/ShaderType GameObject
      static ::GlobalNamespace::FusionGraph::ShaderType _get_GameObject();
      // Set static field: static public FusionGraph/ShaderType GameObject
      static void _set_GameObject(::GlobalNamespace::FusionGraph::ShaderType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FusionGraph/ShaderType
    #pragma pack(pop)
    static check_size<sizeof(FusionGraph::ShaderType), 0 + sizeof(int)> __GlobalNamespace_FusionGraph_ShaderTypeSizeCheck;
    static_assert(sizeof(FusionGraph::ShaderType) == 0x4);
    public:
    // public System.Single Height
    // Size: 0x4
    // Offset: 0xB8
    float Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private FusionGraph/Layouts _layout
    // Size: 0x4
    // Offset: 0xBC
    ::GlobalNamespace::FusionGraph::Layouts layout;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionGraph::Layouts) == 0x4);
    // private FusionGraph/ShowGraphOptions _showGraph
    // Size: 0x4
    // Offset: 0xC0
    ::GlobalNamespace::FusionGraph::ShowGraphOptions showGraph;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionGraph::ShowGraphOptions) == 0x4);
    // public System.Single Padding
    // Size: 0x4
    // Offset: 0xC4
    float Padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _alwaysExpandGraph
    // Size: 0x1
    // Offset: 0xC8
    bool alwaysExpandGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showUITargets
    // Size: 0x1
    // Offset: 0xC9
    bool showUITargets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showUITargets and: GraphImg
    char __padding5[0x6] = {};
    // public UnityEngine.UI.Image GraphImg
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::UI::Image* GraphImg;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Text LabelMin
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::UI::Text* LabelMin;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text LabelMax
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::UI::Text* LabelMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text LabelAvg
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::UI::Text* LabelAvg;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text LabelLast
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::UI::Text* LabelLast;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text LabelPer
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::UI::Text* LabelPer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Dropdown _viewDropdown
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UI::Dropdown* viewDropdown;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Dropdown*) == 0x8);
    // public UnityEngine.UI.Button _avgBttn
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UI::Button* avgBttn;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private System.Single _min
    // Size: 0x4
    // Offset: 0x110
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _max
    // Size: 0x4
    // Offset: 0x114
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] _values
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<float> values;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _intensity
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<float> intensity;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _histogram
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<float> histogram;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> DropdownLookup
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<int>* DropdownLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private Fusion.FusionGraphVisualization _graphVisualization
    // Size: 0x4
    // Offset: 0x138
    ::Fusion::FusionGraphVisualization graphVisualization;
    // Field size check
    static_assert(sizeof(::Fusion::FusionGraphVisualization) == 0x4);
    // private FusionGraph/ShaderType _currentShader
    // Size: 0x4
    // Offset: 0x13C
    ::GlobalNamespace::FusionGraph::ShaderType currentShader;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FusionGraph::ShaderType) == 0x4);
    // private System.ValueTuple`2<System.Int32,System.Single>[] _cachedValues
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::System::ValueTuple_2<int, float>> cachedValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::ValueTuple_2<int, float>>) == 0x8);
    // private System.Double _lastCachedTickTime
    // Size: 0x8
    // Offset: 0x148
    double lastCachedTickTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 _lastCachedTick
    // Size: 0x4
    // Offset: 0x150
    int lastCachedTick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _histoHighestUsedBucketIndex
    // Size: 0x4
    // Offset: 0x154
    int histoHighestUsedBucketIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _histoAvgSampleCount
    // Size: 0x4
    // Offset: 0x158
    int histoAvgSampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: histoAvgSampleCount and: histoStepInverse
    char __padding26[0x4] = {};
    // private System.Double _histoStepInverse
    // Size: 0x8
    // Offset: 0x160
    double histoStepInverse;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _histoAvg
    // Size: 0x8
    // Offset: 0x168
    double histoAvg;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static private System.Int32 GRPH_TOP_PAD
    static constexpr const int GRPH_TOP_PAD = 36;
    // Get static field: static private System.Int32 GRPH_TOP_PAD
    static int _get_GRPH_TOP_PAD();
    // Set static field: static private System.Int32 GRPH_TOP_PAD
    static void _set_GRPH_TOP_PAD(int value);
    // static field const value: static private System.Int32 GRPH_BTM_PAD
    static constexpr const int GRPH_BTM_PAD = 36;
    // Get static field: static private System.Int32 GRPH_BTM_PAD
    static int _get_GRPH_BTM_PAD();
    // Set static field: static private System.Int32 GRPH_BTM_PAD
    static void _set_GRPH_BTM_PAD(int value);
    // static field const value: static private System.Int32 HIDE_XTRAS_WDTH
    static constexpr const int HIDE_XTRAS_WDTH = 200;
    // Get static field: static private System.Int32 HIDE_XTRAS_WDTH
    static int _get_HIDE_XTRAS_WDTH();
    // Set static field: static private System.Int32 HIDE_XTRAS_WDTH
    static void _set_HIDE_XTRAS_WDTH(int value);
    // static field const value: static private System.Int32 INTERMITTENT_DATA_ARRAYSIZE
    static constexpr const int INTERMITTENT_DATA_ARRAYSIZE = 128;
    // Get static field: static private System.Int32 INTERMITTENT_DATA_ARRAYSIZE
    static int _get_INTERMITTENT_DATA_ARRAYSIZE();
    // Set static field: static private System.Int32 INTERMITTENT_DATA_ARRAYSIZE
    static void _set_INTERMITTENT_DATA_ARRAYSIZE(int value);
    // static field const value: static private System.Int32 EXPAND_GRPH_THRESH
    static constexpr const int EXPAND_GRPH_THRESH = 112;
    // Get static field: static private System.Int32 EXPAND_GRPH_THRESH
    static int _get_EXPAND_GRPH_THRESH();
    // Set static field: static private System.Int32 EXPAND_GRPH_THRESH
    static void _set_EXPAND_GRPH_THRESH(int value);
    // static field const value: static private System.Int32 COMPACT_THRESH
    static constexpr const int COMPACT_THRESH = 52;
    // Get static field: static private System.Int32 COMPACT_THRESH
    static int _get_COMPACT_THRESH();
    // Set static field: static private System.Int32 COMPACT_THRESH
    static void _set_COMPACT_THRESH(int value);
    // Get instance field reference: public System.Single Height
    [[deprecated("Use field access instead!")]] float& dyn_Height();
    // Get instance field reference: private FusionGraph/Layouts _layout
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionGraph::Layouts& dyn__layout();
    // Get instance field reference: private FusionGraph/ShowGraphOptions _showGraph
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionGraph::ShowGraphOptions& dyn__showGraph();
    // Get instance field reference: public System.Single Padding
    [[deprecated("Use field access instead!")]] float& dyn_Padding();
    // Get instance field reference: private System.Boolean _alwaysExpandGraph
    [[deprecated("Use field access instead!")]] bool& dyn__alwaysExpandGraph();
    // Get instance field reference: private System.Boolean _showUITargets
    [[deprecated("Use field access instead!")]] bool& dyn__showUITargets();
    // Get instance field reference: public UnityEngine.UI.Image GraphImg
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_GraphImg();
    // Get instance field reference: public UnityEngine.UI.Text LabelMin
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelMin();
    // Get instance field reference: public UnityEngine.UI.Text LabelMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelMax();
    // Get instance field reference: public UnityEngine.UI.Text LabelAvg
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelAvg();
    // Get instance field reference: public UnityEngine.UI.Text LabelLast
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelLast();
    // Get instance field reference: public UnityEngine.UI.Text LabelPer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_LabelPer();
    // Get instance field reference: public UnityEngine.UI.Dropdown _viewDropdown
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Dropdown*& dyn__viewDropdown();
    // Get instance field reference: public UnityEngine.UI.Button _avgBttn
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__avgBttn();
    // Get instance field reference: private System.Single _min
    [[deprecated("Use field access instead!")]] float& dyn__min();
    // Get instance field reference: private System.Single _max
    [[deprecated("Use field access instead!")]] float& dyn__max();
    // Get instance field reference: private System.Single[] _values
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__values();
    // Get instance field reference: private System.Single[] _intensity
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__intensity();
    // Get instance field reference: private System.Single[] _histogram
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__histogram();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> DropdownLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_DropdownLookup();
    // Get instance field reference: private Fusion.FusionGraphVisualization _graphVisualization
    [[deprecated("Use field access instead!")]] ::Fusion::FusionGraphVisualization& dyn__graphVisualization();
    // Get instance field reference: private FusionGraph/ShaderType _currentShader
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FusionGraph::ShaderType& dyn__currentShader();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Single>[] _cachedValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::ValueTuple_2<int, float>>& dyn__cachedValues();
    // Get instance field reference: private System.Double _lastCachedTickTime
    [[deprecated("Use field access instead!")]] double& dyn__lastCachedTickTime();
    // Get instance field reference: private System.Int32 _lastCachedTick
    [[deprecated("Use field access instead!")]] int& dyn__lastCachedTick();
    // Get instance field reference: private System.Int32 _histoHighestUsedBucketIndex
    [[deprecated("Use field access instead!")]] int& dyn__histoHighestUsedBucketIndex();
    // Get instance field reference: private System.Int32 _histoAvgSampleCount
    [[deprecated("Use field access instead!")]] int& dyn__histoAvgSampleCount();
    // Get instance field reference: private System.Double _histoStepInverse
    [[deprecated("Use field access instead!")]] double& dyn__histoStepInverse();
    // Get instance field reference: private System.Double _histoAvg
    [[deprecated("Use field access instead!")]] double& dyn__histoAvg();
    // static private UnityEngine.Shader get_Shader()
    // Offset: 0x294E8D0
    static ::UnityEngine::Shader* get_Shader();
    // public FusionGraph/Layouts get_Layout()
    // Offset: 0x294E928
    ::GlobalNamespace::FusionGraph::Layouts get_Layout();
    // public System.Void set_Layout(FusionGraph/Layouts value)
    // Offset: 0x294E930
    void set_Layout(::GlobalNamespace::FusionGraph::Layouts value);
    // public FusionGraph/ShowGraphOptions get_ShowGraph()
    // Offset: 0x294E940
    ::GlobalNamespace::FusionGraph::ShowGraphOptions get_ShowGraph();
    // public System.Void set_ShowGraph(FusionGraph/ShowGraphOptions value)
    // Offset: 0x294E948
    void set_ShowGraph(::GlobalNamespace::FusionGraph::ShowGraphOptions value);
    // public System.Boolean get_AlwaysExpandGraph()
    // Offset: 0x294E970
    bool get_AlwaysExpandGraph();
    // public System.Void set_AlwaysExpandGraph(System.Boolean value)
    // Offset: 0x294E978
    void set_AlwaysExpandGraph(bool value);
    // public System.Void set_GraphVisualization(Fusion.FusionGraphVisualization value)
    // Offset: 0x294EEE4
    void set_GraphVisualization(::Fusion::FusionGraphVisualization value);
    // private System.Void Reset()
    // Offset: 0x294EEEC
    void Reset();
    // public System.Void Clear()
    // Offset: 0x294F1CC
    void Clear();
    // public System.Void OnDropdownChanged(System.Int32 value)
    // Offset: 0x294F36C
    void OnDropdownChanged(int value);
    // private System.Void ResetShaderButton()
    // Offset: 0x294F3D8
    void ResetShaderButton();
    // private System.Void ResetGraphShader()
    // Offset: 0x294EF34
    void ResetGraphShader();
    // private System.Void SetPerText()
    // Offset: 0x294ED00
    void SetPerText();
    // private System.Void UpdateContinuousTick(ref Fusion.IStatsBuffer data)
    // Offset: 0x294F8C0
    void UpdateContinuousTick(ByRef<::Fusion::IStatsBuffer*> data);
    // private System.Void UpdateIntermittentTick(ref Fusion.IStatsBuffer data)
    // Offset: 0x294FE18
    void UpdateIntermittentTick(ByRef<::Fusion::IStatsBuffer*> data);
    // private System.Void UpdateIntermittentTime(ref Fusion.IStatsBuffer data)
    // Offset: 0x2950328
    void UpdateIntermittentTime(ByRef<::Fusion::IStatsBuffer*> data);
    // private System.Void ApplyScaling(ref System.Single min, ref System.Single max)
    // Offset: 0x2951034
    void ApplyScaling(ByRef<float> min, ByRef<float> max);
    // private System.Void UpdateUiText(System.Single min, System.Single max, System.Single avg, System.Single last)
    // Offset: 0x2951150
    void UpdateUiText(float min, float max, float avg, float last);
    // private System.Single GetIntermittentAverageInfo(ref Fusion.IStatsBuffer data, System.Single sum)
    // Offset: 0x295185C
    float GetIntermittentAverageInfo(ByRef<::Fusion::IStatsBuffer*> data, float sum);
    // private System.Void UpdateTickValueHistogram(ref Fusion.IStatsBuffer data)
    // Offset: 0x29505CC
    void UpdateTickValueHistogram(ByRef<::Fusion::IStatsBuffer*> data);
    // static public FusionGraph Create(FusionStats iFusionStats, Fusion.Simulation/Statistics/StatSourceTypes statSourceType, System.Int32 statId, UnityEngine.RectTransform parentRT)
    // Offset: 0x2951B24
    static ::GlobalNamespace::FusionGraph* Create(::GlobalNamespace::FusionStats* iFusionStats, ::Fusion::Simulation::Statistics::StatSourceTypes statSourceType, int statId, ::UnityEngine::RectTransform* parentRT);
    // public System.Void Generate(Fusion.Simulation/Statistics/StatSourceTypes type, System.Int32 statId, UnityEngine.RectTransform root)
    // Offset: 0x2951C48
    void Generate(::Fusion::Simulation::Statistics::StatSourceTypes type, int statId, ::UnityEngine::RectTransform* root);
    // protected override System.Boolean TryConnect()
    // Offset: 0x294E9A4
    // Implemented from: FusionGraphBase
    // Base method: System.Boolean FusionGraphBase::TryConnect()
    bool TryConnect();
    // public override System.Void Initialize()
    // Offset: 0x294F268
    // Implemented from: FusionGraphBase
    // Base method: System.Void FusionGraphBase::Initialize()
    void Initialize();
    // public override System.Void CyclePer()
    // Offset: 0x294F5DC
    // Implemented from: FusionGraphBase
    // Base method: System.Void FusionGraphBase::CyclePer()
    void CyclePer();
    // public override System.Void Refresh()
    // Offset: 0x294F614
    // Implemented from: FusionGraphBase
    // Base method: System.Void FusionGraphBase::Refresh()
    void Refresh();
    // public override System.Void CalculateLayout()
    // Offset: 0x2952330
    // Implemented from: FusionGraphBase
    // Base method: System.Void FusionGraphBase::CalculateLayout()
    void CalculateLayout();
    // public System.Void .ctor()
    // Offset: 0x2952EB4
    // Implemented from: FusionGraphBase
    // Base method: System.Void FusionGraphBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FusionGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionGraph*, creationType>()));
    }
  }; // FusionGraph
  #pragma pack(pop)
  static check_size<sizeof(FusionGraph), 360 + sizeof(double)> __GlobalNamespace_FusionGraphSizeCheck;
  static_assert(sizeof(FusionGraph) == 0x170);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraph::ShaderType, "", "FusionGraph/ShaderType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraph::ShowGraphOptions, "", "FusionGraph/ShowGraphOptions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FusionGraph::Layouts, "", "FusionGraph/Layouts");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::get_Shader
// Il2CppName: get_Shader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)()>(&GlobalNamespace::FusionGraph::get_Shader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "get_Shader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::get_Layout
// Il2CppName: get_Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionGraph::Layouts (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::get_Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "get_Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::set_Layout
// Il2CppName: set_Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(::GlobalNamespace::FusionGraph::Layouts)>(&GlobalNamespace::FusionGraph::set_Layout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FusionGraph/Layouts")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "set_Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::get_ShowGraph
// Il2CppName: get_ShowGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionGraph::ShowGraphOptions (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::get_ShowGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "get_ShowGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::set_ShowGraph
// Il2CppName: set_ShowGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(::GlobalNamespace::FusionGraph::ShowGraphOptions)>(&GlobalNamespace::FusionGraph::set_ShowGraph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "FusionGraph/ShowGraphOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "set_ShowGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::get_AlwaysExpandGraph
// Il2CppName: get_AlwaysExpandGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::get_AlwaysExpandGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "get_AlwaysExpandGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::set_AlwaysExpandGraph
// Il2CppName: set_AlwaysExpandGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(bool)>(&GlobalNamespace::FusionGraph::set_AlwaysExpandGraph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "set_AlwaysExpandGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::set_GraphVisualization
// Il2CppName: set_GraphVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(::Fusion::FusionGraphVisualization)>(&GlobalNamespace::FusionGraph::set_GraphVisualization)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "FusionGraphVisualization")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "set_GraphVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::OnDropdownChanged
// Il2CppName: OnDropdownChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(int)>(&GlobalNamespace::FusionGraph::OnDropdownChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "OnDropdownChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::ResetShaderButton
// Il2CppName: ResetShaderButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::ResetShaderButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "ResetShaderButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::ResetGraphShader
// Il2CppName: ResetGraphShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::ResetGraphShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "ResetGraphShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::SetPerText
// Il2CppName: SetPerText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::SetPerText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "SetPerText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::UpdateContinuousTick
// Il2CppName: UpdateContinuousTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(ByRef<::Fusion::IStatsBuffer*>)>(&GlobalNamespace::FusionGraph::UpdateContinuousTick)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "IStatsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "UpdateContinuousTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::UpdateIntermittentTick
// Il2CppName: UpdateIntermittentTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(ByRef<::Fusion::IStatsBuffer*>)>(&GlobalNamespace::FusionGraph::UpdateIntermittentTick)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "IStatsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "UpdateIntermittentTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::UpdateIntermittentTime
// Il2CppName: UpdateIntermittentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(ByRef<::Fusion::IStatsBuffer*>)>(&GlobalNamespace::FusionGraph::UpdateIntermittentTime)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "IStatsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "UpdateIntermittentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::ApplyScaling
// Il2CppName: ApplyScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(ByRef<float>, ByRef<float>)>(&GlobalNamespace::FusionGraph::ApplyScaling)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "ApplyScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::UpdateUiText
// Il2CppName: UpdateUiText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(float, float, float, float)>(&GlobalNamespace::FusionGraph::UpdateUiText)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* avg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* last = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "UpdateUiText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max, avg, last});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::GetIntermittentAverageInfo
// Il2CppName: GetIntermittentAverageInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::FusionGraph::*)(ByRef<::Fusion::IStatsBuffer*>, float)>(&GlobalNamespace::FusionGraph::GetIntermittentAverageInfo)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "IStatsBuffer")->this_arg;
    static auto* sum = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "GetIntermittentAverageInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, sum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::UpdateTickValueHistogram
// Il2CppName: UpdateTickValueHistogram
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(ByRef<::Fusion::IStatsBuffer*>)>(&GlobalNamespace::FusionGraph::UpdateTickValueHistogram)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "IStatsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "UpdateTickValueHistogram", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FusionGraph* (*)(::GlobalNamespace::FusionStats*, ::Fusion::Simulation::Statistics::StatSourceTypes, int, ::UnityEngine::RectTransform*)>(&GlobalNamespace::FusionGraph::Create)> {
  static const MethodInfo* get() {
    static auto* iFusionStats = &::il2cpp_utils::GetClassFromName("", "FusionStats")->byval_arg;
    static auto* statSourceType = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/StatSourceTypes")->byval_arg;
    static auto* statId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentRT = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iFusionStats, statSourceType, statId, parentRT});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Generate
// Il2CppName: Generate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)(::Fusion::Simulation::Statistics::StatSourceTypes, int, ::UnityEngine::RectTransform*)>(&GlobalNamespace::FusionGraph::Generate)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/StatSourceTypes")->byval_arg;
    static auto* statId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Generate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, statId, root});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::TryConnect
// Il2CppName: TryConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::TryConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "TryConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::CyclePer
// Il2CppName: CyclePer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::CyclePer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "CyclePer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::CalculateLayout
// Il2CppName: CalculateLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FusionGraph::*)()>(&GlobalNamespace::FusionGraph::CalculateLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FusionGraph*), "CalculateLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FusionGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
