// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: StringComparison
  struct StringComparison;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StringUtils
  class StringUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StringUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StringUtils*, "", "StringUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: StringUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class StringUtils : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::StringUtils::$$c
    class $$c;
    // static field const value: static public System.String kForwardSlash
    static constexpr const char* kForwardSlash = "/";
    // Get static field: static public System.String kForwardSlash
    static ::StringW _get_kForwardSlash();
    // Set static field: static public System.String kForwardSlash
    static void _set_kForwardSlash(::StringW value);
    // static field const value: static public System.String kBackSlash
    static constexpr const char* kBackSlash = "/";
    // Get static field: static public System.String kBackSlash
    static ::StringW _get_kBackSlash();
    // Set static field: static public System.String kBackSlash
    static void _set_kBackSlash(::StringW value);
    // static field const value: static public System.String kBackTick
    static constexpr const char* kBackTick = "`";
    // Get static field: static public System.String kBackTick
    static ::StringW _get_kBackTick();
    // Set static field: static public System.String kBackTick
    static void _set_kBackTick(::StringW value);
    // static field const value: static public System.String kMinusDash
    static constexpr const char* kMinusDash = "-";
    // Get static field: static public System.String kMinusDash
    static ::StringW _get_kMinusDash();
    // Set static field: static public System.String kMinusDash
    static void _set_kMinusDash(::StringW value);
    // static field const value: static public System.String kPeriod
    static constexpr const char* kPeriod = ".";
    // Get static field: static public System.String kPeriod
    static ::StringW _get_kPeriod();
    // Set static field: static public System.String kPeriod
    static void _set_kPeriod(::StringW value);
    // static field const value: static public System.String kUnderScore
    static constexpr const char* kUnderScore = "_";
    // Get static field: static public System.String kUnderScore
    static ::StringW _get_kUnderScore();
    // Set static field: static public System.String kUnderScore
    static void _set_kUnderScore(::StringW value);
    // static field const value: static public System.String kColon
    static constexpr const char* kColon = ":";
    // Get static field: static public System.String kColon
    static ::StringW _get_kColon();
    // Set static field: static public System.String kColon
    static void _set_kColon(::StringW value);
    // static public System.String ToAlphaNumeric(System.String s)
    // Offset: 0x2781650
    static ::StringW ToAlphaNumeric(::StringW s);
    // static public System.String Capitalize(System.String s)
    // Offset: 0x2781870
    static ::StringW Capitalize(::StringW s);
    // static public System.String Concat(System.Collections.Generic.IEnumerable`1<System.String> source)
    // Offset: 0x2781930
    static ::StringW Concat(::System::Collections::Generic::IEnumerable_1<::StringW>* source);
    // static public System.String Join(System.Collections.Generic.IEnumerable`1<System.String> source, System.String separator)
    // Offset: 0x2781938
    static ::StringW Join(::System::Collections::Generic::IEnumerable_1<::StringW>* source, ::StringW separator);
    // static public System.String Join(System.Collections.Generic.IEnumerable`1<System.String> source, System.Char separator)
    // Offset: 0x278194C
    static ::StringW Join(::System::Collections::Generic::IEnumerable_1<::StringW>* source, ::Il2CppChar separator);
    // static public System.String RemoveAll(System.String s, System.String value, System.StringComparison mode)
    // Offset: 0x27819A4
    static ::StringW RemoveAll(::StringW s, ::StringW value, ::System::StringComparison mode);
    // static public System.String RemoveAll(System.String s, System.Char value, System.StringComparison mode)
    // Offset: 0x2781A3C
    static ::StringW RemoveAll(::StringW s, ::Il2CppChar value, ::System::StringComparison mode);
    // static public System.Byte[] ToBytesASCII(System.String s)
    // Offset: 0x2781A78
    static ::ArrayW<uint8_t> ToBytesASCII(::StringW s);
    // static public System.Byte[] ToBytesUTF8(System.String s)
    // Offset: 0x2781AA8
    static ::ArrayW<uint8_t> ToBytesUTF8(::StringW s);
    // static public System.Byte[] ToBytesUnicode(System.String s)
    // Offset: 0x2781AD8
    static ::ArrayW<uint8_t> ToBytesUnicode(::StringW s);
    // static public System.String ComputeSHV2(System.String s)
    // Offset: 0x2781B08
    static ::StringW ComputeSHV2(::StringW s);
    // static public System.String ToQueryString(System.Collections.Generic.Dictionary`2<System.String,System.String> d)
    // Offset: 0x2781B34
    static ::StringW ToQueryString(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* d);
    // static public System.String Combine(System.String separator, params System.String[] values)
    // Offset: 0x2781CA0
    static ::StringW Combine(::StringW separator, ::ArrayW<::StringW> values);
    // static public System.String ToUpperCamelCase(System.String input)
    // Offset: 0x2781D98
    static ::StringW ToUpperCamelCase(::StringW input);
    // static public System.String RemoveStart(System.String s, System.String value, System.StringComparison comparison)
    // Offset: 0x2781F98
    static ::StringW RemoveStart(::StringW s, ::StringW value, ::System::StringComparison comparison);
    // static public System.String RemoveEnd(System.String s, System.String value, System.StringComparison comparison)
    // Offset: 0x2782004
    static ::StringW RemoveEnd(::StringW s, ::StringW value, ::System::StringComparison comparison);
    // static public System.String RemoveBothEnds(System.String s, System.String value, System.StringComparison comparison)
    // Offset: 0x278207C
    static ::StringW RemoveBothEnds(::StringW s, ::StringW value, ::System::StringComparison comparison);
  }; // StringUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToAlphaNumeric
// Il2CppName: ToAlphaNumeric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::StringUtils::ToAlphaNumeric)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToAlphaNumeric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::Capitalize
// Il2CppName: Capitalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::StringUtils::Capitalize)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "Capitalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&GlobalNamespace::StringUtils::Concat)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::Generic::IEnumerable_1<::StringW>*, ::StringW)>(&GlobalNamespace::StringUtils::Join)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, separator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::Generic::IEnumerable_1<::StringW>*, ::Il2CppChar)>(&GlobalNamespace::StringUtils::Join)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, separator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::RemoveAll
// Il2CppName: RemoveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::System::StringComparison)>(&GlobalNamespace::StringUtils::RemoveAll)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "RemoveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, value, mode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::RemoveAll
// Il2CppName: RemoveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar, ::System::StringComparison)>(&GlobalNamespace::StringUtils::RemoveAll)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "RemoveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, value, mode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToBytesASCII
// Il2CppName: ToBytesASCII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&GlobalNamespace::StringUtils::ToBytesASCII)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToBytesASCII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToBytesUTF8
// Il2CppName: ToBytesUTF8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&GlobalNamespace::StringUtils::ToBytesUTF8)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToBytesUTF8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToBytesUnicode
// Il2CppName: ToBytesUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&GlobalNamespace::StringUtils::ToBytesUnicode)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToBytesUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ComputeSHV2
// Il2CppName: ComputeSHV2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::StringUtils::ComputeSHV2)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ComputeSHV2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToQueryString
// Il2CppName: ToQueryString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&GlobalNamespace::StringUtils::ToQueryString)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToQueryString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::Combine
// Il2CppName: Combine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::ArrayW<::StringW>)>(&GlobalNamespace::StringUtils::Combine)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "Combine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::ToUpperCamelCase
// Il2CppName: ToUpperCamelCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::StringUtils::ToUpperCamelCase)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "ToUpperCamelCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::RemoveStart
// Il2CppName: RemoveStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::System::StringComparison)>(&GlobalNamespace::StringUtils::RemoveStart)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparison = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "RemoveStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, value, comparison});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::RemoveEnd
// Il2CppName: RemoveEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::System::StringComparison)>(&GlobalNamespace::StringUtils::RemoveEnd)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparison = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "RemoveEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, value, comparison});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StringUtils::RemoveBothEnds
// Il2CppName: RemoveBothEnds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::System::StringComparison)>(&GlobalNamespace::StringUtils::RemoveBothEnds)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparison = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StringUtils*), "RemoveBothEnds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, value, comparison});
  }
};
