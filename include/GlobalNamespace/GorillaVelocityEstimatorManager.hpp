// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimatorManager
  class GorillaVelocityEstimatorManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaVelocityEstimatorManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaVelocityEstimatorManager*, "", "GorillaVelocityEstimatorManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: GorillaVelocityEstimatorManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaVelocityEstimatorManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public GorillaVelocityEstimatorManager instance
    static ::GlobalNamespace::GorillaVelocityEstimatorManager* _get_instance();
    // Set static field: static public GorillaVelocityEstimatorManager instance
    static void _set_instance(::GlobalNamespace::GorillaVelocityEstimatorManager* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get static field: static public readonly System.Collections.Generic.List`1<GorillaVelocityEstimator> estimators
    static ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>* _get_estimators();
    // Set static field: static public readonly System.Collections.Generic.List`1<GorillaVelocityEstimator> estimators
    static void _set_estimators(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>* value);
    // protected System.Void Awake()
    // Offset: 0x269D3D4
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x269D5E8
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x269D6B8
    void LateUpdate();
    // static public System.Void CreateManager()
    // Offset: 0x269D830
    static void CreateManager();
    // static private System.Void SetInstance(GorillaVelocityEstimatorManager manager)
    // Offset: 0x269D4CC
    static void SetInstance(::GlobalNamespace::GorillaVelocityEstimatorManager* manager);
    // static public System.Void Register(GorillaVelocityEstimator velEstimator)
    // Offset: 0x269CCA8
    static void Register(::GlobalNamespace::GorillaVelocityEstimator* velEstimator);
    // static public System.Void Unregister(GorillaVelocityEstimator velEstimator)
    // Offset: 0x269CE88
    static void Unregister(::GlobalNamespace::GorillaVelocityEstimator* velEstimator);
    // public System.Void .ctor()
    // Offset: 0x269D928
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaVelocityEstimatorManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaVelocityEstimatorManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x269D930
    static void _cctor();
  }; // GorillaVelocityEstimatorManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimatorManager::*)()>(&GlobalNamespace::GorillaVelocityEstimatorManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimatorManager::*)()>(&GlobalNamespace::GorillaVelocityEstimatorManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaVelocityEstimatorManager::*)()>(&GlobalNamespace::GorillaVelocityEstimatorManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::CreateManager
// Il2CppName: CreateManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaVelocityEstimatorManager::CreateManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "CreateManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::SetInstance
// Il2CppName: SetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaVelocityEstimatorManager*)>(&GlobalNamespace::GorillaVelocityEstimatorManager::SetInstance)> {
  static const MethodInfo* get() {
    static auto* manager = &::il2cpp_utils::GetClassFromName("", "GorillaVelocityEstimatorManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "SetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manager});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaVelocityEstimator*)>(&GlobalNamespace::GorillaVelocityEstimatorManager::Register)> {
  static const MethodInfo* get() {
    static auto* velEstimator = &::il2cpp_utils::GetClassFromName("", "GorillaVelocityEstimator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velEstimator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaVelocityEstimator*)>(&GlobalNamespace::GorillaVelocityEstimatorManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* velEstimator = &::il2cpp_utils::GetClassFromName("", "GorillaVelocityEstimator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velEstimator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaVelocityEstimatorManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaVelocityEstimatorManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaVelocityEstimatorManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
