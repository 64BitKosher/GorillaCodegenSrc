// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TextureUtils
#include "GlobalNamespace/TextureUtils.hpp"
// Including type: SaveTextureFileFormat
#include "GlobalNamespace/SaveTextureFileFormat.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: AsyncGPUReadbackRequest
  struct AsyncGPUReadbackRequest;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0*, "", "TextureUtils/<>c__DisplayClass2_0");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TextureUtils/<>c__DisplayClass2_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TextureUtils::$$c__DisplayClass2_0 : public ::Il2CppObject {
    public:
    public:
    // public SaveTextureFileFormat fileFormat
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::SaveTextureFileFormat fileFormat;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaveTextureFileFormat) == 0x4);
    // public Unity.Collections.NativeArray`1<System.Byte> narray
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::Unity::Collections::NativeArray_1<uint8_t> narray;
    // public UnityEngine.RenderTexture resizeRT
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RenderTexture* resizeRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x30
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x34
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 jpgQuality
    // Size: 0x4
    // Offset: 0x38
    int jpgQuality;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String filePath
    // Size: 0x8
    // Offset: 0x40
    ::StringW filePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<System.Boolean> done
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<bool>* done;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    public:
    // Get instance field reference: public SaveTextureFileFormat fileFormat
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaveTextureFileFormat& dyn_fileFormat();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Byte> narray
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint8_t>& dyn_narray();
    // Get instance field reference: public UnityEngine.RenderTexture resizeRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_resizeRT();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // Get instance field reference: public System.Int32 jpgQuality
    [[deprecated("Use field access instead!")]] int& dyn_jpgQuality();
    // Get instance field reference: public System.String filePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_filePath();
    // Get instance field reference: public System.Action`1<System.Boolean> done
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_done();
    // public System.Void .ctor()
    // Offset: 0x2782678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureUtils::$$c__DisplayClass2_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureUtils::$$c__DisplayClass2_0*, creationType>()));
    }
    // System.Void <SaveToFile>b__0(UnityEngine.Rendering.AsyncGPUReadbackRequest request)
    // Offset: 0x27828A4
    void $SaveToFile$b__0(::UnityEngine::Rendering::AsyncGPUReadbackRequest request);
  }; // TextureUtils/<>c__DisplayClass2_0
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::$SaveToFile$b__0
// Il2CppName: <SaveToFile>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::*)(::UnityEngine::Rendering::AsyncGPUReadbackRequest)>(&GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::$SaveToFile$b__0)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextureUtils::$$c__DisplayClass2_0*), "<SaveToFile>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
