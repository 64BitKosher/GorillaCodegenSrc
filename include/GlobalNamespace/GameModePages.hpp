// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BasePageHandler
#include "GlobalNamespace/BasePageHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameModeSelectButton
  class GameModeSelectButton;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameModePages
  class GameModePages;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameModePages);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameModePages*, "", "GameModePages");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: GameModePages
  // [TokenAttribute] Offset: FFFFFFFF
  class GameModePages : public ::GlobalNamespace::BasePageHandler {
    public:
    public:
    // private System.Int32 currentButtonIndex
    // Size: 0x4
    // Offset: 0x30
    int currentButtonIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 maxEntries
    // Size: 0x4
    // Offset: 0x34
    int maxEntries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UI.Text gameModeText
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Text* gameModeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private GameModeSelectButton[] buttons
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::GameModeSelectButton*> buttons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GameModeSelectButton*>) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x48
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Int32 sharedSelectedIndex
    static int _get_sharedSelectedIndex();
    // Set static field: static private System.Int32 sharedSelectedIndex
    static void _set_sharedSelectedIndex(int value);
    // Get static field: static private System.Text.StringBuilder textBuilder
    static ::System::Text::StringBuilder* _get_textBuilder();
    // Set static field: static private System.Text.StringBuilder textBuilder
    static void _set_textBuilder(::System::Text::StringBuilder* value);
    // Get static field: static private System.Collections.Generic.List`1<GameModePages> gameModeSelectorInstances
    static ::System::Collections::Generic::List_1<::GlobalNamespace::GameModePages*>* _get_gameModeSelectorInstances();
    // Set static field: static private System.Collections.Generic.List`1<GameModePages> gameModeSelectorInstances
    static void _set_gameModeSelectorInstances(::System::Collections::Generic::List_1<::GlobalNamespace::GameModePages*>* value);
    // Get instance field reference: private System.Int32 currentButtonIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentButtonIndex();
    // Get instance field reference: private System.Int32 maxEntries
    [[deprecated("Use field access instead!")]] int& dyn_maxEntries();
    // Get instance field reference: private UnityEngine.UI.Text gameModeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_gameModeText();
    // Get instance field reference: private GameModeSelectButton[] buttons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GameModeSelectButton*>& dyn_buttons();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // private System.Void Awake()
    // Offset: 0x26DD938
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x26DDB08
    void OnEnable();
    // private System.Void OnDestroy()
    // Offset: 0x26DDB80
    void OnDestroy();
    // private System.Void UpdateAllButtons(System.Int32 onButton)
    // Offset: 0x26DDDC8
    void UpdateAllButtons(int onButton);
    // private System.Void EnableEntryButtons(System.Int32 buttonsMissing)
    // Offset: 0x26DDE84
    void EnableEntryButtons(int buttonsMissing);
    // static public System.Void SetSelectedGameModeShared(System.String gameMode)
    // Offset: 0x26DE098
    static void SetSelectedGameModeShared(::StringW gameMode);
    // static private System.Void .cctor()
    // Offset: 0x26DE200
    static void _cctor();
    // protected override System.Int32 get_pageSize()
    // Offset: 0x26DD8AC
    // Implemented from: BasePageHandler
    // Base method: System.Int32 BasePageHandler::get_pageSize()
    int get_pageSize();
    // protected override System.Int32 get_entriesCount()
    // Offset: 0x26DD8C8
    // Implemented from: BasePageHandler
    // Base method: System.Int32 BasePageHandler::get_entriesCount()
    int get_entriesCount();
    // protected override System.Void Start()
    // Offset: 0x26DDA8C
    // Implemented from: BasePageHandler
    // Base method: System.Void BasePageHandler::Start()
    void Start();
    // protected override System.Void ShowPage(System.Int32 selectedPage, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0x26DDC00
    // Implemented from: BasePageHandler
    // Base method: System.Void BasePageHandler::ShowPage(System.Int32 selectedPage, System.Int32 startIndex, System.Int32 endIndex)
    void ShowPage(int selectedPage, int startIndex, int endIndex);
    // protected override System.Void PageEntrySelected(System.Int32 pageEntry, System.Int32 selectionIndex)
    // Offset: 0x26DDF58
    // Implemented from: BasePageHandler
    // Base method: System.Void BasePageHandler::PageEntrySelected(System.Int32 pageEntry, System.Int32 selectionIndex)
    void PageEntrySelected(int pageEntry, int selectionIndex);
    // public System.Void .ctor()
    // Offset: 0x26DE1F8
    // Implemented from: BasePageHandler
    // Base method: System.Void BasePageHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameModePages* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameModePages::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameModePages*, creationType>()));
    }
  }; // GameModePages
  #pragma pack(pop)
  static check_size<sizeof(GameModePages), 72 + sizeof(bool)> __GlobalNamespace_GameModePagesSizeCheck;
  static_assert(sizeof(GameModePages) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::UpdateAllButtons
// Il2CppName: UpdateAllButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)(int)>(&GlobalNamespace::GameModePages::UpdateAllButtons)> {
  static const MethodInfo* get() {
    static auto* onButton = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "UpdateAllButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onButton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::EnableEntryButtons
// Il2CppName: EnableEntryButtons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)(int)>(&GlobalNamespace::GameModePages::EnableEntryButtons)> {
  static const MethodInfo* get() {
    static auto* buttonsMissing = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "EnableEntryButtons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonsMissing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::SetSelectedGameModeShared
// Il2CppName: SetSelectedGameModeShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::GameModePages::SetSelectedGameModeShared)> {
  static const MethodInfo* get() {
    static auto* gameMode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "SetSelectedGameModeShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GameModePages::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::get_pageSize
// Il2CppName: get_pageSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::get_pageSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "get_pageSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::get_entriesCount
// Il2CppName: get_entriesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::get_entriesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "get_entriesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)()>(&GlobalNamespace::GameModePages::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::ShowPage
// Il2CppName: ShowPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)(int, int, int)>(&GlobalNamespace::GameModePages::ShowPage)> {
  static const MethodInfo* get() {
    static auto* selectedPage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "ShowPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectedPage, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::PageEntrySelected
// Il2CppName: PageEntrySelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameModePages::*)(int, int)>(&GlobalNamespace::GameModePages::PageEntrySelected)> {
  static const MethodInfo* get() {
    static auto* pageEntry = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* selectionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameModePages*), "PageEntrySelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pageEntry, selectionIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameModePages::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
