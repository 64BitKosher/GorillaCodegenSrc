// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColorUtils
  class ColorUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorUtils*, "", "ColorUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ColorUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorUtils : public ::Il2CppObject {
    public:
    // static field const value: static private System.Byte kMaxByteForOverexposedColor
    static constexpr const uint8_t kMaxByteForOverexposedColor = 191u;
    // Get static field: static private System.Byte kMaxByteForOverexposedColor
    static uint8_t _get_kMaxByteForOverexposedColor();
    // Set static field: static private System.Byte kMaxByteForOverexposedColor
    static void _set_kMaxByteForOverexposedColor(uint8_t value);
    // static public UnityEngine.Color ComposeHDR(UnityEngine.Color baseColor, System.Single intensity)
    // Offset: 0x2773B74
    static ::UnityEngine::Color ComposeHDR(::UnityEngine::Color baseColor, float intensity);
    // static public System.ValueTuple`2<UnityEngine.Color,System.Single> DecomposeHDR(UnityEngine.Color hdrColor)
    // Offset: 0x2773C3C
    static ::System::ValueTuple_2<::UnityEngine::Color, float> DecomposeHDR(::UnityEngine::Color hdrColor);
  }; // ColorUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorUtils::ComposeHDR
// Il2CppName: ComposeHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(::UnityEngine::Color, float)>(&GlobalNamespace::ColorUtils::ComposeHDR)> {
  static const MethodInfo* get() {
    static auto* baseColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorUtils*), "ComposeHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseColor, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorUtils::DecomposeHDR
// Il2CppName: DecomposeHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Color, float> (*)(::UnityEngine::Color)>(&GlobalNamespace::ColorUtils::DecomposeHDR)> {
  static const MethodInfo* get() {
    static auto* hdrColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorUtils*), "DecomposeHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdrColor});
  }
};
