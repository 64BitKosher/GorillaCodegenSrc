// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRFaceExpressions/FaceExpression
#include "GlobalNamespace/OVRFaceExpressions_FaceExpression.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCustomFace
  class OVRCustomFace;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRCustomFaceExtensions
  class OVRCustomFaceExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRCustomFaceExtensions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCustomFaceExtensions*, "", "OVRCustomFaceExtensions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRCustomFaceExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRCustomFaceExtensions : public ::Il2CppObject {
    public:
    // static public OVRFaceExpressions/FaceExpression[] AutoGenerateMapping(UnityEngine.Mesh skinnedMesh, System.String[] blendShapeNames, OVRFaceExpressions/FaceExpression[] faceExpressions, System.Boolean allowDuplicateMapping)
    // Offset: 0x49453B8
    static ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> AutoGenerateMapping(::UnityEngine::Mesh* skinnedMesh, ::ArrayW<::StringW> blendShapeNames, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> faceExpressions, bool allowDuplicateMapping);
    // static private OVRFaceExpressions/FaceExpression FindBestMatch(System.Collections.Generic.HashSet`1<System.String>[] tokenizedOptions, System.String searchString, OVRFaceExpressions/FaceExpression[] expressions, OVRFaceExpressions/FaceExpression fallback)
    // Offset: 0x4945B5C
    static ::GlobalNamespace::OVRFaceExpressions::FaceExpression FindBestMatch(::ArrayW<::System::Collections::Generic::HashSet_1<::StringW>*> tokenizedOptions, ::StringW searchString, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> expressions, ::GlobalNamespace::OVRFaceExpressions::FaceExpression fallback);
    // static private System.Boolean IsLipsToward(System.String blendshapeName)
    // Offset: 0x4945F48
    static bool IsLipsToward(::StringW blendshapeName);
    // static System.Collections.Generic.HashSet`1<System.String> TokenizeString(System.String s)
    // Offset: 0x494563C
    static ::System::Collections::Generic::HashSet_1<::StringW>* TokenizeString(::StringW s);
    // static private System.String SplitCamelCase(System.String input)
    // Offset: 0x4946044
    static ::StringW SplitCamelCase(::StringW input);
    // static public System.Void AutoMapBlendshapes(OVRCustomFace customFace)
    // Offset: 0x49460E0
    static void AutoMapBlendshapes(::GlobalNamespace::OVRCustomFace* customFace);
    // static public System.Void ClearBlendshapes(OVRCustomFace customFace)
    // Offset: 0x4946540
    static void ClearBlendshapes(::GlobalNamespace::OVRCustomFace* customFace);
    // static OVRFaceExpressions/FaceExpression[] OculusFaceAutoGenerateMapping(UnityEngine.Mesh sharedMesh, System.Boolean allowDuplicateMapping)
    // Offset: 0x49463D8
    static ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> OculusFaceAutoGenerateMapping(::UnityEngine::Mesh* sharedMesh, bool allowDuplicateMapping);
    // static OVRFaceExpressions/FaceExpression[] CustomAutoGeneratedMapping(OVRCustomFace customFace, UnityEngine.Mesh sharedMesh, System.Boolean allowDuplicateMapping)
    // Offset: 0x49464F8
    static ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> CustomAutoGeneratedMapping(::GlobalNamespace::OVRCustomFace* customFace, ::UnityEngine::Mesh* sharedMesh, bool allowDuplicateMapping);
  }; // OVRCustomFaceExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::AutoGenerateMapping
// Il2CppName: AutoGenerateMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> (*)(::UnityEngine::Mesh*, ::ArrayW<::StringW>, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>, bool)>(&GlobalNamespace::OVRCustomFaceExtensions::AutoGenerateMapping)> {
  static const MethodInfo* get() {
    static auto* skinnedMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* blendShapeNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* faceExpressions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression"), 1)->byval_arg;
    static auto* allowDuplicateMapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "AutoGenerateMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skinnedMesh, blendShapeNames, faceExpressions, allowDuplicateMapping});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::FindBestMatch
// Il2CppName: FindBestMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions::FaceExpression (*)(::ArrayW<::System::Collections::Generic::HashSet_1<::StringW>*>, ::StringW, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>, ::GlobalNamespace::OVRFaceExpressions::FaceExpression)>(&GlobalNamespace::OVRCustomFaceExtensions::FindBestMatch)> {
  static const MethodInfo* get() {
    static auto* tokenizedOptions = &il2cpp_functions::array_class_get(::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")}), 1)->byval_arg;
    static auto* searchString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expressions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression"), 1)->byval_arg;
    static auto* fallback = &::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "FindBestMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tokenizedOptions, searchString, expressions, fallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::IsLipsToward
// Il2CppName: IsLipsToward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&GlobalNamespace::OVRCustomFaceExtensions::IsLipsToward)> {
  static const MethodInfo* get() {
    static auto* blendshapeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "IsLipsToward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendshapeName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::TokenizeString
// Il2CppName: TokenizeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (*)(::StringW)>(&GlobalNamespace::OVRCustomFaceExtensions::TokenizeString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "TokenizeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::SplitCamelCase
// Il2CppName: SplitCamelCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::OVRCustomFaceExtensions::SplitCamelCase)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "SplitCamelCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::AutoMapBlendshapes
// Il2CppName: AutoMapBlendshapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRCustomFace*)>(&GlobalNamespace::OVRCustomFaceExtensions::AutoMapBlendshapes)> {
  static const MethodInfo* get() {
    static auto* customFace = &::il2cpp_utils::GetClassFromName("", "OVRCustomFace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "AutoMapBlendshapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customFace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::ClearBlendshapes
// Il2CppName: ClearBlendshapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRCustomFace*)>(&GlobalNamespace::OVRCustomFaceExtensions::ClearBlendshapes)> {
  static const MethodInfo* get() {
    static auto* customFace = &::il2cpp_utils::GetClassFromName("", "OVRCustomFace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "ClearBlendshapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customFace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::OculusFaceAutoGenerateMapping
// Il2CppName: OculusFaceAutoGenerateMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> (*)(::UnityEngine::Mesh*, bool)>(&GlobalNamespace::OVRCustomFaceExtensions::OculusFaceAutoGenerateMapping)> {
  static const MethodInfo* get() {
    static auto* sharedMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* allowDuplicateMapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "OculusFaceAutoGenerateMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sharedMesh, allowDuplicateMapping});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFaceExtensions::CustomAutoGeneratedMapping
// Il2CppName: CustomAutoGeneratedMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> (*)(::GlobalNamespace::OVRCustomFace*, ::UnityEngine::Mesh*, bool)>(&GlobalNamespace::OVRCustomFaceExtensions::CustomAutoGeneratedMapping)> {
  static const MethodInfo* get() {
    static auto* customFace = &::il2cpp_utils::GetClassFromName("", "OVRCustomFace")->byval_arg;
    static auto* sharedMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* allowDuplicateMapping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFaceExtensions*), "CustomAutoGeneratedMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customFace, sharedMesh, allowDuplicateMapping});
  }
};
