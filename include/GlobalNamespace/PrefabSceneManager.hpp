// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: OVRLocatable
#include "GlobalNamespace/OVRLocatable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRRoomLayout
  struct OVRRoomLayout;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PrefabSceneManager
  class PrefabSceneManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PrefabSceneManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PrefabSceneManager*, "", "PrefabSceneManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PrefabSceneManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PrefabSceneManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PrefabSceneManager::$$LoadSceneAsync$b__7_0$d
    struct $$LoadSceneAsync$b__7_0$d;
    // Nested type: ::GlobalNamespace::PrefabSceneManager::$$c__DisplayClass8_0
    class $$c__DisplayClass8_0;
    // Nested type: ::GlobalNamespace::PrefabSceneManager::$CreateSceneAnchors$d__8
    struct $CreateSceneAnchors$d__8;
    // Nested type: ::GlobalNamespace::PrefabSceneManager::$LoadSceneAsync$d__7
    struct $LoadSceneAsync$d__7;
    // Nested type: ::GlobalNamespace::PrefabSceneManager::$UpdateAnchorsPeriodically$d__9
    class $UpdateAnchorsPeriodically$d__9;
    public:
    // public UnityEngine.GameObject WallPrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* WallPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject CeilingPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* CeilingPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject FloorPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* FloorPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject FallbackPrefab
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* FallbackPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single UpdateFrequencySeconds
    // Size: 0x4
    // Offset: 0x40
    float UpdateFrequencySeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: UpdateFrequencySeconds and: locatableObjects
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.GameObject,OVRLocatable>> _locatableObjects
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::GameObject*, ::GlobalNamespace::OVRLocatable>>* locatableObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::GameObject*, ::GlobalNamespace::OVRLocatable>>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject WallPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_WallPrefab();
    // Get instance field reference: public UnityEngine.GameObject CeilingPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CeilingPrefab();
    // Get instance field reference: public UnityEngine.GameObject FloorPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_FloorPrefab();
    // Get instance field reference: public UnityEngine.GameObject FallbackPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_FallbackPrefab();
    // Get instance field reference: public System.Single UpdateFrequencySeconds
    [[deprecated("Use field access instead!")]] float& dyn_UpdateFrequencySeconds();
    // Get instance field reference: private System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.GameObject,OVRLocatable>> _locatableObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::GameObject*, ::GlobalNamespace::OVRLocatable>>*& dyn__locatableObjects();
    // private System.Void Start()
    // Offset: 0x2941A9C
    void Start();
    // private System.Void LoadSceneAsync()
    // Offset: 0x2941AD0
    void LoadSceneAsync();
    // private System.Threading.Tasks.Task CreateSceneAnchors(UnityEngine.GameObject roomGameObject, OVRRoomLayout roomLayout, System.Collections.Generic.List`1<OVRAnchor> anchors)
    // Offset: 0x2941BFC
    ::System::Threading::Tasks::Task* CreateSceneAnchors(::UnityEngine::GameObject* roomGameObject, ::GlobalNamespace::OVRRoomLayout roomLayout, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* anchors);
    // private System.Collections.IEnumerator UpdateAnchorsPeriodically()
    // Offset: 0x2941B88
    ::System::Collections::IEnumerator* UpdateAnchorsPeriodically();
    // public System.Void .ctor()
    // Offset: 0x2941D18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrefabSceneManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PrefabSceneManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrefabSceneManager*, creationType>()));
    }
    // private System.Threading.Tasks.Task <LoadSceneAsync>b__7_0(OVRAnchor room)
    // Offset: 0x2941DA8
    ::System::Threading::Tasks::Task* $LoadSceneAsync$b__7_0(::GlobalNamespace::OVRAnchor room);
  }; // PrefabSceneManager
  #pragma pack(pop)
  static check_size<sizeof(PrefabSceneManager), 72 + sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::GameObject*, ::GlobalNamespace::OVRLocatable>>*)> __GlobalNamespace_PrefabSceneManagerSizeCheck;
  static_assert(sizeof(PrefabSceneManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrefabSceneManager::*)()>(&GlobalNamespace::PrefabSceneManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrefabSceneManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::LoadSceneAsync
// Il2CppName: LoadSceneAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrefabSceneManager::*)()>(&GlobalNamespace::PrefabSceneManager::LoadSceneAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrefabSceneManager*), "LoadSceneAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::CreateSceneAnchors
// Il2CppName: CreateSceneAnchors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::PrefabSceneManager::*)(::UnityEngine::GameObject*, ::GlobalNamespace::OVRRoomLayout, ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*)>(&GlobalNamespace::PrefabSceneManager::CreateSceneAnchors)> {
  static const MethodInfo* get() {
    static auto* roomGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* roomLayout = &::il2cpp_utils::GetClassFromName("", "OVRRoomLayout")->byval_arg;
    static auto* anchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrefabSceneManager*), "CreateSceneAnchors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomGameObject, roomLayout, anchors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::UpdateAnchorsPeriodically
// Il2CppName: UpdateAnchorsPeriodically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PrefabSceneManager::*)()>(&GlobalNamespace::PrefabSceneManager::UpdateAnchorsPeriodically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrefabSceneManager*), "UpdateAnchorsPeriodically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PrefabSceneManager::$LoadSceneAsync$b__7_0
// Il2CppName: <LoadSceneAsync>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::PrefabSceneManager::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::PrefabSceneManager::$LoadSceneAsync$b__7_0)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrefabSceneManager*), "<LoadSceneAsync>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
