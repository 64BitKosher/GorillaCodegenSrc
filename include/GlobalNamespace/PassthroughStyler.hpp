// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRPassthroughLayer/ColorMapEditorType
#include "GlobalNamespace/OVRPassthroughLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRPassthroughLayer because it is already included!
  // Forward declaring type: OVRPassthroughColorLut
  class OVRPassthroughColorLut;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PassthroughStyler
  class PassthroughStyler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PassthroughStyler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PassthroughStyler*, "", "PassthroughStyler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: PassthroughStyler
  // [TokenAttribute] Offset: FFFFFFFF
  class PassthroughStyler : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PassthroughStyler::$FadeTo$d__33
    class $FadeTo$d__33;
    // Nested type: ::GlobalNamespace::PassthroughStyler::$FadeToCurrentStyle$d__31
    class $FadeToCurrentStyle$d__31;
    // Nested type: ::GlobalNamespace::PassthroughStyler::$FadeToDefaultPassthrough$d__32
    class $FadeToDefaultPassthrough$d__32;
    public:
    // private OVRInput/Controller _controllerHand
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controllerHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: controllerHand and: passthroughLayer
    char __padding0[0x4] = {};
    // private OVRPassthroughLayer _passthroughLayer
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRPassthroughLayer* passthroughLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer*) == 0x8);
    // private UnityEngine.RectTransform _colorWheel
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RectTransform* colorWheel;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Texture2D _colorTexture
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Texture2D* colorTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D _colorLutTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture2D* colorLutTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.CanvasGroup _mainCanvas
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::CanvasGroup* mainCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // private UnityEngine.GameObject[] _compactObjects
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::GameObject*> compactObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] _objectsToHideForColorPassthrough
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::GameObject*> objectsToHideForColorPassthrough;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.Vector3 _cursorPosition
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 cursorPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _settingColor
    // Size: 0x1
    // Offset: 0x6C
    bool settingColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: settingColor and: savedColor
    char __padding9[0x3] = {};
    // private UnityEngine.Color _savedColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color savedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _savedBrightness
    // Size: 0x4
    // Offset: 0x80
    float savedBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _savedContrast
    // Size: 0x4
    // Offset: 0x84
    float savedContrast;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _savedSaturation
    // Size: 0x4
    // Offset: 0x88
    float savedSaturation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRPassthroughLayer/ColorMapEditorType _currentStyle
    // Size: 0x4
    // Offset: 0x8C
    ::GlobalNamespace::OVRPassthroughLayer::ColorMapEditorType currentStyle;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer::ColorMapEditorType) == 0x4);
    // private System.Single _savedBlend
    // Size: 0x4
    // Offset: 0x90
    float savedBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: savedBlend and: passthroughColorLut
    char __padding15[0x4] = {};
    // private OVRPassthroughColorLut _passthroughColorLut
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::OVRPassthroughColorLut* passthroughColorLut;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughColorLut*) == 0x8);
    // private System.Collections.IEnumerator _fade
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::IEnumerator* fade;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    public:
    // static field const value: static private System.Single FadeDuration
    static constexpr const float FadeDuration = 0.2;
    // Get static field: static private System.Single FadeDuration
    static float _get_FadeDuration();
    // Set static field: static private System.Single FadeDuration
    static void _set_FadeDuration(float value);
    // Get instance field reference: private OVRInput/Controller _controllerHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__controllerHand();
    // Get instance field reference: private OVRPassthroughLayer _passthroughLayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer*& dyn__passthroughLayer();
    // Get instance field reference: private UnityEngine.RectTransform _colorWheel
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__colorWheel();
    // Get instance field reference: private UnityEngine.Texture2D _colorTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__colorTexture();
    // Get instance field reference: private UnityEngine.Texture2D _colorLutTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__colorLutTexture();
    // Get instance field reference: private UnityEngine.CanvasGroup _mainCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__mainCanvas();
    // Get instance field reference: private UnityEngine.GameObject[] _compactObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__compactObjects();
    // Get instance field reference: private UnityEngine.GameObject[] _objectsToHideForColorPassthrough
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__objectsToHideForColorPassthrough();
    // Get instance field reference: private UnityEngine.Vector3 _cursorPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__cursorPosition();
    // Get instance field reference: private System.Boolean _settingColor
    [[deprecated("Use field access instead!")]] bool& dyn__settingColor();
    // Get instance field reference: private UnityEngine.Color _savedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__savedColor();
    // Get instance field reference: private System.Single _savedBrightness
    [[deprecated("Use field access instead!")]] float& dyn__savedBrightness();
    // Get instance field reference: private System.Single _savedContrast
    [[deprecated("Use field access instead!")]] float& dyn__savedContrast();
    // Get instance field reference: private System.Single _savedSaturation
    [[deprecated("Use field access instead!")]] float& dyn__savedSaturation();
    // Get instance field reference: private OVRPassthroughLayer/ColorMapEditorType _currentStyle
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer::ColorMapEditorType& dyn__currentStyle();
    // Get instance field reference: private System.Single _savedBlend
    [[deprecated("Use field access instead!")]] float& dyn__savedBlend();
    // Get instance field reference: private OVRPassthroughColorLut _passthroughColorLut
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughColorLut*& dyn__passthroughColorLut();
    // Get instance field reference: private System.Collections.IEnumerator _fade
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn__fade();
    // private System.Void Start()
    // Offset: 0x293B160
    void Start();
    // private System.Void Update()
    // Offset: 0x293B4F0
    void Update();
    // public System.Void OnBrightnessChanged(System.Single newValue)
    // Offset: 0x293B888
    void OnBrightnessChanged(float newValue);
    // public System.Void OnContrastChanged(System.Single newValue)
    // Offset: 0x293B8B8
    void OnContrastChanged(float newValue);
    // public System.Void OnSaturationChanged(System.Single newValue)
    // Offset: 0x293B8C0
    void OnSaturationChanged(float newValue);
    // public System.Void OnAlphaChanged(System.Single newValue)
    // Offset: 0x293B8C8
    void OnAlphaChanged(float newValue);
    // public System.Void OnBlendChange(System.Single newValue)
    // Offset: 0x293B8FC
    void OnBlendChange(float newValue);
    // public System.Void DoColorDrag(System.Boolean doDrag)
    // Offset: 0x293B924
    void DoColorDrag(bool doDrag);
    // public System.Void SetPassthroughStyleToColorAdjustment(System.Boolean isOn)
    // Offset: 0x293B930
    void SetPassthroughStyleToColorAdjustment(bool isOn);
    // public System.Void SetPassthroughStyleToColorLut(System.Boolean isOn)
    // Offset: 0x293B980
    void SetPassthroughStyleToColorLut(bool isOn);
    // private System.Void Grab(OVRInput/Controller grabHand)
    // Offset: 0x293B990
    void Grab(::GlobalNamespace::OVRInput::Controller grabHand);
    // private System.Void Release()
    // Offset: 0x293BAE8
    void Release();
    // private System.Collections.IEnumerator FadeToCurrentStyle(System.Single fadeTime)
    // Offset: 0x293BA6C
    ::System::Collections::IEnumerator* FadeToCurrentStyle(float fadeTime);
    // private System.Collections.IEnumerator FadeToDefaultPassthrough(System.Single fadeTime)
    // Offset: 0x293BBB8
    ::System::Collections::IEnumerator* FadeToDefaultPassthrough(float fadeTime);
    // private System.Collections.IEnumerator FadeTo(System.Single styleValueMultiplier, System.Single duration)
    // Offset: 0x293BC84
    ::System::Collections::IEnumerator* FadeTo(float styleValueMultiplier, float duration);
    // private System.Void UpdateBrighnessContrastSaturation()
    // Offset: 0x293B890
    void UpdateBrighnessContrastSaturation();
    // private System.Void ShowFullMenu(System.Boolean doShow)
    // Offset: 0x293B488
    void ShowFullMenu(bool doShow);
    // private System.Void Cursor(UnityEngine.Vector3 cP)
    // Offset: 0x293BD2C
    void Cursor(::UnityEngine::Vector3 cP);
    // private System.Void GetColorFromWheel()
    // Offset: 0x293B508
    void GetColorFromWheel();
    // private System.Void SetPassthroughStyle(OVRPassthroughLayer/ColorMapEditorType passthroughStyle)
    // Offset: 0x293B944
    void SetPassthroughStyle(::GlobalNamespace::OVRPassthroughLayer::ColorMapEditorType passthroughStyle);
    // public System.Void .ctor()
    // Offset: 0x293BD38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PassthroughStyler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PassthroughStyler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PassthroughStyler*, creationType>()));
    }
  }; // PassthroughStyler
  #pragma pack(pop)
  static check_size<sizeof(PassthroughStyler), 160 + sizeof(::System::Collections::IEnumerator*)> __GlobalNamespace_PassthroughStylerSizeCheck;
  static_assert(sizeof(PassthroughStyler) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)()>(&GlobalNamespace::PassthroughStyler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)()>(&GlobalNamespace::PassthroughStyler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::OnBrightnessChanged
// Il2CppName: OnBrightnessChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::OnBrightnessChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "OnBrightnessChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::OnContrastChanged
// Il2CppName: OnContrastChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::OnContrastChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "OnContrastChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::OnSaturationChanged
// Il2CppName: OnSaturationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::OnSaturationChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "OnSaturationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::OnAlphaChanged
// Il2CppName: OnAlphaChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::OnAlphaChanged)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "OnAlphaChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::OnBlendChange
// Il2CppName: OnBlendChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::OnBlendChange)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "OnBlendChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::DoColorDrag
// Il2CppName: DoColorDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(bool)>(&GlobalNamespace::PassthroughStyler::DoColorDrag)> {
  static const MethodInfo* get() {
    static auto* doDrag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "DoColorDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doDrag});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::SetPassthroughStyleToColorAdjustment
// Il2CppName: SetPassthroughStyleToColorAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(bool)>(&GlobalNamespace::PassthroughStyler::SetPassthroughStyleToColorAdjustment)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "SetPassthroughStyleToColorAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::SetPassthroughStyleToColorLut
// Il2CppName: SetPassthroughStyleToColorLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(bool)>(&GlobalNamespace::PassthroughStyler::SetPassthroughStyleToColorLut)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "SetPassthroughStyleToColorLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::PassthroughStyler::Grab)> {
  static const MethodInfo* get() {
    static auto* grabHand = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)()>(&GlobalNamespace::PassthroughStyler::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::FadeToCurrentStyle
// Il2CppName: FadeToCurrentStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::FadeToCurrentStyle)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "FadeToCurrentStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::FadeToDefaultPassthrough
// Il2CppName: FadeToDefaultPassthrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PassthroughStyler::*)(float)>(&GlobalNamespace::PassthroughStyler::FadeToDefaultPassthrough)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "FadeToDefaultPassthrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::FadeTo
// Il2CppName: FadeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PassthroughStyler::*)(float, float)>(&GlobalNamespace::PassthroughStyler::FadeTo)> {
  static const MethodInfo* get() {
    static auto* styleValueMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "FadeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{styleValueMultiplier, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::UpdateBrighnessContrastSaturation
// Il2CppName: UpdateBrighnessContrastSaturation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)()>(&GlobalNamespace::PassthroughStyler::UpdateBrighnessContrastSaturation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "UpdateBrighnessContrastSaturation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::ShowFullMenu
// Il2CppName: ShowFullMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(bool)>(&GlobalNamespace::PassthroughStyler::ShowFullMenu)> {
  static const MethodInfo* get() {
    static auto* doShow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "ShowFullMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doShow});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::Cursor
// Il2CppName: Cursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(::UnityEngine::Vector3)>(&GlobalNamespace::PassthroughStyler::Cursor)> {
  static const MethodInfo* get() {
    static auto* cP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "Cursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cP});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::GetColorFromWheel
// Il2CppName: GetColorFromWheel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)()>(&GlobalNamespace::PassthroughStyler::GetColorFromWheel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "GetColorFromWheel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::SetPassthroughStyle
// Il2CppName: SetPassthroughStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PassthroughStyler::*)(::GlobalNamespace::OVRPassthroughLayer::ColorMapEditorType)>(&GlobalNamespace::PassthroughStyler::SetPassthroughStyle)> {
  static const MethodInfo* get() {
    static auto* passthroughStyle = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughLayer/ColorMapEditorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PassthroughStyler*), "SetPassthroughStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passthroughStyle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PassthroughStyler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
