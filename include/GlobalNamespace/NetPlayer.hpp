// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetPlayer
  class NetPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetPlayer*, "", "NetPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NetPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class NetPlayer : public ::Il2CppObject {
    public:
    // public System.Boolean get_IsValid()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsValid();
    // public System.Int32 get_ID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_ID();
    // public System.String get_UserId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_UserId();
    // public System.Boolean get_IsMaster()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsMaster();
    // public System.Boolean get_IsLocal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsLocal();
    // public System.Boolean get_IsNull()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsNull();
    // public System.String get_NickName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_NickName();
    // public System.String get_DefaultName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_DefaultName();
    // public System.Boolean get_InRoom()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_InRoom();
    // public System.Boolean Equals(NetPlayer myPlayer, NetPlayer other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::GlobalNamespace::NetPlayer* myPlayer, ::GlobalNamespace::NetPlayer* other);
    // protected System.Void .ctor()
    // Offset: 0x290F00C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetPlayer*, creationType>()));
    }
  }; // NetPlayer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_UserId
// Il2CppName: get_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_UserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_IsMaster
// Il2CppName: get_IsMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_IsMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_IsMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_IsLocal
// Il2CppName: get_IsLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_IsLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_IsLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_NickName
// Il2CppName: get_NickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_NickName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_NickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_DefaultName
// Il2CppName: get_DefaultName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_DefaultName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_DefaultName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::get_InRoom
// Il2CppName: get_InRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)()>(&GlobalNamespace::NetPlayer::get_InRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "get_InRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetPlayer::*)(::GlobalNamespace::NetPlayer*, ::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::NetPlayer::Equals)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetPlayer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
