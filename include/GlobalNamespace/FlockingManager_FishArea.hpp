// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FlockingManager
#include "GlobalNamespace/FlockingManager.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Flocking
  class Flocking;
  // Forward declaring type: ZoneBasedObject
  class ZoneBasedObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlockingManager::FishArea);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlockingManager::FishArea*, "", "FlockingManager/FishArea");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: FlockingManager/FishArea
  // [TokenAttribute] Offset: FFFFFFFF
  class FlockingManager::FishArea : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<Flocking> fishList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>* fishList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>*) == 0x8);
    // public UnityEngine.Vector3 colliderCenter
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 colliderCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: colliderCenter and: colliders
    char __padding2[0x4] = {};
    // public UnityEngine.BoxCollider[] colliders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::BoxCollider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoxCollider*>) == 0x8);
    // public UnityEngine.Vector3 nextWaypoint
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 nextWaypoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: nextWaypoint and: zoneBasedObject
    char __padding4[0x4] = {};
    // public ZoneBasedObject zoneBasedObject
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::ZoneBasedObject* zoneBasedObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneBasedObject*) == 0x8);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.Collections.Generic.List`1<Flocking> fishList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>*& dyn_fishList();
    // Get instance field reference: public UnityEngine.Vector3 colliderCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_colliderCenter();
    // Get instance field reference: public UnityEngine.BoxCollider[] colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoxCollider*>& dyn_colliders();
    // Get instance field reference: public UnityEngine.Vector3 nextWaypoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_nextWaypoint();
    // Get instance field reference: public ZoneBasedObject zoneBasedObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneBasedObject*& dyn_zoneBasedObject();
    // public System.Void .ctor()
    // Offset: 0x26F5B7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlockingManager::FishArea* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlockingManager::FishArea::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlockingManager::FishArea*, creationType>()));
    }
  }; // FlockingManager/FishArea
  #pragma pack(pop)
  static check_size<sizeof(FlockingManager::FishArea), 72 + sizeof(::GlobalNamespace::ZoneBasedObject*)> __GlobalNamespace_FlockingManager_FishAreaSizeCheck;
  static_assert(sizeof(FlockingManager::FishArea) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::FishArea::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
