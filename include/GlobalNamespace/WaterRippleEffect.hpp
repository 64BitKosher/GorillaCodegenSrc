// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WaterRippleEffect
  class WaterRippleEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WaterRippleEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WaterRippleEffect*, "", "WaterRippleEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: WaterRippleEffect
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class WaterRippleEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single ripplePlaybackSpeed
    // Size: 0x4
    // Offset: 0x20
    float ripplePlaybackSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fadeOutDelay
    // Size: 0x4
    // Offset: 0x24
    float fadeOutDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fadeOutTime
    // Size: 0x4
    // Offset: 0x28
    float fadeOutTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeOutTime and: ripplePlaybackSpeedName
    char __padding2[0x4] = {};
    // private System.String ripplePlaybackSpeedName
    // Size: 0x8
    // Offset: 0x30
    ::StringW ripplePlaybackSpeedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 ripplePlaybackSpeedHash
    // Size: 0x4
    // Offset: 0x38
    int ripplePlaybackSpeedHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single rippleStartTime
    // Size: 0x4
    // Offset: 0x3C
    float rippleStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.SpriteRenderer renderer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::SpriteRenderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume waterVolume
    // Size: 0x8
    // Offset: 0x50
    ::GorillaLocomotion::Swimming::WaterVolume* waterVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    public:
    // Get instance field reference: private System.Single ripplePlaybackSpeed
    [[deprecated("Use field access instead!")]] float& dyn_ripplePlaybackSpeed();
    // Get instance field reference: private System.Single fadeOutDelay
    [[deprecated("Use field access instead!")]] float& dyn_fadeOutDelay();
    // Get instance field reference: private System.Single fadeOutTime
    [[deprecated("Use field access instead!")]] float& dyn_fadeOutTime();
    // Get instance field reference: private System.String ripplePlaybackSpeedName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ripplePlaybackSpeedName();
    // Get instance field reference: private System.Int32 ripplePlaybackSpeedHash
    [[deprecated("Use field access instead!")]] int& dyn_ripplePlaybackSpeedHash();
    // Get instance field reference: private System.Single rippleStartTime
    [[deprecated("Use field access instead!")]] float& dyn_rippleStartTime();
    // Get instance field reference: private UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: private UnityEngine.SpriteRenderer renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_renderer();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume waterVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_waterVolume();
    // private System.Void Awake()
    // Offset: 0x289909C
    void Awake();
    // public System.Void Destroy()
    // Offset: 0x2899140
    void Destroy();
    // public System.Void PlayEffect(GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x28991BC
    void PlayEffect(::GorillaLocomotion::Swimming::WaterVolume* volume);
    // private System.Void Update()
    // Offset: 0x28992E4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x289955C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterRippleEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterRippleEffect*, creationType>()));
    }
  }; // WaterRippleEffect
  #pragma pack(pop)
  static check_size<sizeof(WaterRippleEffect), 80 + sizeof(::GorillaLocomotion::Swimming::WaterVolume*)> __GlobalNamespace_WaterRippleEffectSizeCheck;
  static_assert(sizeof(WaterRippleEffect) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WaterRippleEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterRippleEffect::*)()>(&GlobalNamespace::WaterRippleEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterRippleEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterRippleEffect::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterRippleEffect::*)()>(&GlobalNamespace::WaterRippleEffect::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterRippleEffect*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterRippleEffect::PlayEffect
// Il2CppName: PlayEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterRippleEffect::*)(::GorillaLocomotion::Swimming::WaterVolume*)>(&GlobalNamespace::WaterRippleEffect::PlayEffect)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterRippleEffect*), "PlayEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterRippleEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WaterRippleEffect::*)()>(&GlobalNamespace::WaterRippleEffect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WaterRippleEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WaterRippleEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
