// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: Behaviour
  class Behaviour;
  // Forward declaring type: Hash128
  struct Hash128;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ComponentUtils
  class ComponentUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ComponentUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ComponentUtils*, "", "ComponentUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ComponentUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ComponentUtils : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.UInt32[] kHashBits
    static ::ArrayW<uint> _get_kHashBits();
    // Set static field: static private readonly System.UInt32[] kHashBits
    static void _set_kHashBits(::ArrayW<uint> value);
    // static public T AddComponent(UnityEngine.Component c)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AddComponent(::UnityEngine::Component* c) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::AddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "AddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, c);
    }
    // static public System.Void GetOrAddComponent(UnityEngine.Component c, out T result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void GetOrAddComponent(::UnityEngine::Component* c, ByRef<T> result) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, c, byref(result));
    }
    // static private System.Boolean IsNull(T unityObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsNull(T unityObject) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::IsNull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "IsNull", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unityObject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, unityObject);
    }
    // static public System.Boolean GetComponentAndSetFieldIfNullElseLogAndDisable(UnityEngine.Behaviour c, ref T fieldRef, System.String fieldName, System.String fieldTypeName, System.String msgSuffix, System.String caller)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool GetComponentAndSetFieldIfNullElseLogAndDisable(::UnityEngine::Behaviour* c, ByRef<T> fieldRef, ::StringW fieldName, ::StringW fieldTypeName, ::StringW msgSuffix, ::StringW caller) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::GetComponentAndSetFieldIfNullElseLogAndDisable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "GetComponentAndSetFieldIfNullElseLogAndDisable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(fieldRef), ::il2cpp_utils::ExtractType(fieldName), ::il2cpp_utils::ExtractType(fieldTypeName), ::il2cpp_utils::ExtractType(msgSuffix), ::il2cpp_utils::ExtractType(caller)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, c, byref(fieldRef), fieldName, fieldTypeName, msgSuffix, caller);
    }
    // static public System.Boolean GetComponentAndSetFieldIfNullElseLog(UnityEngine.Behaviour c, ref T fieldRef, System.String fieldName, System.String fieldTypeName, System.String msgSuffix, System.String caller)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool GetComponentAndSetFieldIfNullElseLog(::UnityEngine::Behaviour* c, ByRef<T> fieldRef, ::StringW fieldName, ::StringW fieldTypeName, ::StringW msgSuffix, ::StringW caller) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::GetComponentAndSetFieldIfNullElseLog");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "GetComponentAndSetFieldIfNullElseLog", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(fieldRef), ::il2cpp_utils::ExtractType(fieldName), ::il2cpp_utils::ExtractType(fieldTypeName), ::il2cpp_utils::ExtractType(msgSuffix), ::il2cpp_utils::ExtractType(caller)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, c, byref(fieldRef), fieldName, fieldTypeName, msgSuffix, caller);
    }
    // static public System.Boolean DisableIfNull(UnityEngine.Behaviour c, T fieldRef, System.String fieldName, System.String fieldTypeName, System.String caller)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool DisableIfNull(::UnityEngine::Behaviour* c, T fieldRef, ::StringW fieldName, ::StringW fieldTypeName, ::StringW caller) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentUtils::DisableIfNull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ComponentUtils", "DisableIfNull", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(fieldRef), ::il2cpp_utils::ExtractType(fieldName), ::il2cpp_utils::ExtractType(fieldTypeName), ::il2cpp_utils::ExtractType(caller)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, c, fieldRef, fieldName, fieldTypeName, caller);
    }
    // static public UnityEngine.Hash128 ComputeStaticHash128(UnityEngine.Component c, System.String k)
    // Offset: 0x27740BC
    static ::UnityEngine::Hash128 ComputeStaticHash128(::UnityEngine::Component* c, ::StringW k);
    // static public UnityEngine.Hash128 ComputeStaticHash128(UnityEngine.Component c, System.Int32 k)
    // Offset: 0x27741E0
    static ::UnityEngine::Hash128 ComputeStaticHash128(::UnityEngine::Component* c, int k);
    // static private System.Void .cctor()
    // Offset: 0x2774818
    static void _cctor();
  }; // ComponentUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::AddComponent
// Il2CppName: AddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::IsNull
// Il2CppName: IsNull
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::GetComponentAndSetFieldIfNullElseLogAndDisable
// Il2CppName: GetComponentAndSetFieldIfNullElseLogAndDisable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::GetComponentAndSetFieldIfNullElseLog
// Il2CppName: GetComponentAndSetFieldIfNullElseLog
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::DisableIfNull
// Il2CppName: DisableIfNull
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::ComputeStaticHash128
// Il2CppName: ComputeStaticHash128
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Hash128 (*)(::UnityEngine::Component*, ::StringW)>(&GlobalNamespace::ComponentUtils::ComputeStaticHash128)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentUtils*), "ComputeStaticHash128", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, k});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::ComputeStaticHash128
// Il2CppName: ComputeStaticHash128
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Hash128 (*)(::UnityEngine::Component*, int)>(&GlobalNamespace::ComponentUtils::ComputeStaticHash128)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentUtils*), "ComputeStaticHash128", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, k});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ComponentUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ComponentUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ComponentUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
