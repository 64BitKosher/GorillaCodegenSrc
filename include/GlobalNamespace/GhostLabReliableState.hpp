// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
// Including type: GhostLab/EntranceDoorsState
#include "GlobalNamespace/GhostLab.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GhostLabReliableState
  class GhostLabReliableState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GhostLabReliableState);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GhostLabReliableState*, "", "GhostLabReliableState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GhostLabReliableState
  // [TokenAttribute] Offset: FFFFFFFF
  class GhostLabReliableState : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IOnPhotonViewOwnerChange*/ {
    public:
    public:
    // public GhostLab/EntranceDoorsState doorState
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::GhostLab::EntranceDoorsState doorState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GhostLab::EntranceDoorsState) == 0x4);
    // public System.Int32 singleDoorCount
    // Size: 0x4
    // Offset: 0x2C
    int singleDoorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean[] singleDoorOpen
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<bool> singleDoorOpen;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // Get instance field reference: public GhostLab/EntranceDoorsState doorState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab::EntranceDoorsState& dyn_doorState();
    // Get instance field reference: public System.Int32 singleDoorCount
    [[deprecated("Use field access instead!")]] int& dyn_singleDoorCount();
    // Get instance field reference: public System.Boolean[] singleDoorOpen
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_singleDoorOpen();
    // private System.Void Awake()
    // Offset: 0x2696BBC
    void Awake();
    // public System.Void OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x2696C14
    void OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2696C64
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void UpdateEntranceDoorsState(GhostLab/EntranceDoorsState newState)
    // Offset: 0x26963A0
    void UpdateEntranceDoorsState(::GlobalNamespace::GhostLab::EntranceDoorsState newState);
    // public System.Void UpdateSingleDoorState(System.Int32 singleDoorIndex)
    // Offset: 0x2696194
    void UpdateSingleDoorState(int singleDoorIndex);
    // public System.Void RemoteEntranceDoorState(GhostLab/EntranceDoorsState newState, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2696E60
    void RemoteEntranceDoorState(::GlobalNamespace::GhostLab::EntranceDoorsState newState, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RemoteSingleDoorState(System.Int32 doorIndex, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2696F2C
    void RemoteSingleDoorState(int doorIndex, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x2697028
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GhostLabReliableState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GhostLabReliableState*, creationType>()));
    }
  }; // GhostLabReliableState
  #pragma pack(pop)
  static check_size<sizeof(GhostLabReliableState), 48 + sizeof(::ArrayW<bool>)> __GlobalNamespace_GhostLabReliableStateSizeCheck;
  static_assert(sizeof(GhostLabReliableState) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)()>(&GlobalNamespace::GhostLabReliableState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::OnOwnerChange
// Il2CppName: OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GhostLabReliableState::OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GhostLabReliableState::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::UpdateEntranceDoorsState
// Il2CppName: UpdateEntranceDoorsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(::GlobalNamespace::GhostLab::EntranceDoorsState)>(&GlobalNamespace::GhostLabReliableState::UpdateEntranceDoorsState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "GhostLab/EntranceDoorsState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "UpdateEntranceDoorsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::UpdateSingleDoorState
// Il2CppName: UpdateSingleDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(int)>(&GlobalNamespace::GhostLabReliableState::UpdateSingleDoorState)> {
  static const MethodInfo* get() {
    static auto* singleDoorIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "UpdateSingleDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{singleDoorIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::RemoteEntranceDoorState
// Il2CppName: RemoteEntranceDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(::GlobalNamespace::GhostLab::EntranceDoorsState, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GhostLabReliableState::RemoteEntranceDoorState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "GhostLab/EntranceDoorsState")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "RemoteEntranceDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::RemoteSingleDoorState
// Il2CppName: RemoteSingleDoorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GhostLabReliableState::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GhostLabReliableState::RemoteSingleDoorState)> {
  static const MethodInfo* get() {
    static auto* doorIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GhostLabReliableState*), "RemoteSingleDoorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doorIndex, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GhostLabReliableState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
