// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Realtime.IInRoomCallbacks
#include "Photon/Realtime/IInRoomCallbacks.hpp"
// Including type: Photon.Realtime.IMatchmakingCallbacks
#include "Photon/Realtime/IMatchmakingCallbacks.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: ExitGames.Client.Photon.SendOptions
#include "ExitGames/Client/Photon/SendOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: RoomSystemSettings
  class RoomSystemSettings;
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
  // Skipping declaration: StatusEffects because it is already included!
  // Skipping declaration: SoundEffect because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
  // Forward declaring type: RaiseEventOptions
  class RaiseEventOptions;
  // Forward declaring type: FriendInfo
  class FriendInfo;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Timers
namespace System::Timers {
  // Forward declaring type: Timer
  class Timer;
  // Forward declaring type: ElapsedEventArgs
  class ElapsedEventArgs;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomSystem
  class RoomSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomSystem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystem*, "", "RoomSystem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RoomSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomSystem : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Realtime::IInRoomCallbacks, public ::Photon::Realtime::IMatchmakingCallbacks*/ {
    public:
    // Nested type: ::GlobalNamespace::RoomSystem::ImpactFxContainer
    class ImpactFxContainer;
    // Nested type: ::GlobalNamespace::RoomSystem::LaunchProjectileContainer
    class LaunchProjectileContainer;
    // Nested type: ::GlobalNamespace::RoomSystem::ProjectileSource
    struct ProjectileSource;
    // Nested type: ::GlobalNamespace::RoomSystem::Events
    struct Events;
    // Nested type: ::GlobalNamespace::RoomSystem::StatusEffects
    struct StatusEffects;
    // Nested type: ::GlobalNamespace::RoomSystem::SoundEffect
    struct SoundEffect;
    // Nested type: ::GlobalNamespace::RoomSystem::PlayerEffect
    struct PlayerEffect;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RoomSystem/StatusEffects
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatusEffects/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatusEffects
      constexpr StatusEffects(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RoomSystem/StatusEffects TaggedTime
      static constexpr const int TaggedTime = 0;
      // Get static field: static public RoomSystem/StatusEffects TaggedTime
      static ::GlobalNamespace::RoomSystem::StatusEffects _get_TaggedTime();
      // Set static field: static public RoomSystem/StatusEffects TaggedTime
      static void _set_TaggedTime(::GlobalNamespace::RoomSystem::StatusEffects value);
      // static field const value: static public RoomSystem/StatusEffects JoinedTaggedTime
      static constexpr const int JoinedTaggedTime = 1;
      // Get static field: static public RoomSystem/StatusEffects JoinedTaggedTime
      static ::GlobalNamespace::RoomSystem::StatusEffects _get_JoinedTaggedTime();
      // Set static field: static public RoomSystem/StatusEffects JoinedTaggedTime
      static void _set_JoinedTaggedTime(::GlobalNamespace::RoomSystem::StatusEffects value);
      // static field const value: static public RoomSystem/StatusEffects SetSlowedTime
      static constexpr const int SetSlowedTime = 2;
      // Get static field: static public RoomSystem/StatusEffects SetSlowedTime
      static ::GlobalNamespace::RoomSystem::StatusEffects _get_SetSlowedTime();
      // Set static field: static public RoomSystem/StatusEffects SetSlowedTime
      static void _set_SetSlowedTime(::GlobalNamespace::RoomSystem::StatusEffects value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RoomSystem/StatusEffects
    #pragma pack(pop)
    static check_size<sizeof(RoomSystem::StatusEffects), 0 + sizeof(int)> __GlobalNamespace_RoomSystem_StatusEffectsSizeCheck;
    static_assert(sizeof(RoomSystem::StatusEffects) == 0x4);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: RoomSystem/SoundEffect
    // [TokenAttribute] Offset: FFFFFFFF
    struct SoundEffect/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 id
      // Size: 0x4
      // Offset: 0x0
      int id;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Single volume
      // Size: 0x4
      // Offset: 0x4
      float volume;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: SoundEffect
      constexpr SoundEffect(int id_ = {}, float volume_ = {}) noexcept : id{id_}, volume{volume_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 id
      [[deprecated("Use field access instead!")]] int& dyn_id();
      // Get instance field reference: public System.Single volume
      [[deprecated("Use field access instead!")]] float& dyn_volume();
      // public System.Void .ctor(System.Int32 soundID, System.Single soundVolume)
      // Offset: 0x2770B50
      // ABORTED: conflicts with another method.  SoundEffect(int soundID, float soundVolume);
    }; // RoomSystem/SoundEffect
    #pragma pack(pop)
    static check_size<sizeof(RoomSystem::SoundEffect), 4 + sizeof(float)> __GlobalNamespace_RoomSystem_SoundEffectSizeCheck;
    static_assert(sizeof(RoomSystem::SoundEffect) == 0x8);
    public:
    // private RoomSystemSettings roomSettings
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::RoomSystemSettings* roomSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomSystemSettings*) == 0x8);
    // private System.String[] prefabsToInstantiateByPath
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> prefabsToInstantiateByPath;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> prefabsInstantiated
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* prefabsInstantiated;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IInRoomCallbacks
    operator ::Photon::Realtime::IInRoomCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IInRoomCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Realtime::IMatchmakingCallbacks
    operator ::Photon::Realtime::IMatchmakingCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IMatchmakingCallbacks*>(this);
    }
    // Get static field: static private RoomSystem/ImpactFxContainer impactEffect
    static ::GlobalNamespace::RoomSystem::ImpactFxContainer* _get_impactEffect();
    // Set static field: static private RoomSystem/ImpactFxContainer impactEffect
    static void _set_impactEffect(::GlobalNamespace::RoomSystem::ImpactFxContainer* value);
    // Get static field: static private RoomSystem/LaunchProjectileContainer launchProjectile
    static ::GlobalNamespace::RoomSystem::LaunchProjectileContainer* _get_launchProjectile();
    // Set static field: static private RoomSystem/LaunchProjectileContainer launchProjectile
    static void _set_launchProjectile(::GlobalNamespace::RoomSystem::LaunchProjectileContainer* value);
    // Get static field: static private UnityEngine.GameObject playerImpactEffectPrefab
    static ::UnityEngine::GameObject* _get_playerImpactEffectPrefab();
    // Set static field: static private UnityEngine.GameObject playerImpactEffectPrefab
    static void _set_playerImpactEffectPrefab(::UnityEngine::GameObject* value);
    // Get static field: static private readonly System.Object[] projectileSendData
    static ::ArrayW<::Il2CppObject*> _get_projectileSendData();
    // Set static field: static private readonly System.Object[] projectileSendData
    static void _set_projectileSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static private readonly System.Object[] impactSendData
    static ::ArrayW<::Il2CppObject*> _get_impactSendData();
    // Set static field: static private readonly System.Object[] impactSendData
    static void _set_impactSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static private readonly System.Collections.Generic.List`1<System.Int32> hashValues
    static ::System::Collections::Generic::List_1<int>* _get_hashValues();
    // Set static field: static private readonly System.Collections.Generic.List`1<System.Int32> hashValues
    static void _set_hashValues(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private RoomSystem callbackInstance
    static ::GlobalNamespace::RoomSystem* _get_callbackInstance();
    // Set static field: static private RoomSystem callbackInstance
    static void _set_callbackInstance(::GlobalNamespace::RoomSystem* value);
    // Get static field: static private System.Collections.Generic.List`1<Photon.Realtime.Player> playersInRoom
    static ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* _get_playersInRoom();
    // Set static field: static private System.Collections.Generic.List`1<Photon.Realtime.Player> playersInRoom
    static void _set_playersInRoom(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* value);
    // Get static field: static private System.String roomGameMode
    static ::StringW _get_roomGameMode();
    // Set static field: static private System.String roomGameMode
    static void _set_roomGameMode(::StringW value);
    // Get static field: static private System.Boolean joinedRoom
    static bool _get_joinedRoom();
    // Set static field: static private System.Boolean joinedRoom
    static void _set_joinedRoom(bool value);
    // Get static field: static private Photon.Pun.PhotonView[] sceneViews
    static ::ArrayW<::Photon::Pun::PhotonView*> _get_sceneViews();
    // Set static field: static private Photon.Pun.PhotonView[] sceneViews
    static void _set_sceneViews(::ArrayW<::Photon::Pun::PhotonView*> value);
    // Get static field: static public System.Action LeftRoomEvent
    static ::System::Action* _get_LeftRoomEvent();
    // Set static field: static public System.Action LeftRoomEvent
    static void _set_LeftRoomEvent(::System::Action* value);
    // Get static field: static public System.Action JoinedRoomEvent
    static ::System::Action* _get_JoinedRoomEvent();
    // Set static field: static public System.Action JoinedRoomEvent
    static void _set_JoinedRoomEvent(::System::Action* value);
    // Get static field: static public System.Action`1<Photon.Realtime.Player> PlayerJoinedEvent
    static ::System::Action_1<::Photon::Realtime::Player*>* _get_PlayerJoinedEvent();
    // Set static field: static public System.Action`1<Photon.Realtime.Player> PlayerJoinedEvent
    static void _set_PlayerJoinedEvent(::System::Action_1<::Photon::Realtime::Player*>* value);
    // Get static field: static public System.Action`1<Photon.Realtime.Player> PlayerLeftEvent
    static ::System::Action_1<::Photon::Realtime::Player*>* _get_PlayerLeftEvent();
    // Set static field: static public System.Action`1<Photon.Realtime.Player> PlayerLeftEvent
    static void _set_PlayerLeftEvent(::System::Action_1<::Photon::Realtime::Player*>* value);
    // Get static field: static public System.Action PlayersChangedEvent
    static ::System::Action* _get_PlayersChangedEvent();
    // Set static field: static public System.Action PlayersChangedEvent
    static void _set_PlayersChangedEvent(::System::Action* value);
    // Get static field: static private System.Timers.Timer disconnectTimer
    static ::System::Timers::Timer* _get_disconnectTimer();
    // Set static field: static private System.Timers.Timer disconnectTimer
    static void _set_disconnectTimer(::System::Timers::Timer* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> playerBanned
    static ::System::Collections::Generic::HashSet_1<int>* _get_playerBanned();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> playerBanned
    static void _set_playerBanned(::System::Collections::Generic::HashSet_1<int>* value);
    // Get static field: static readonly System.Collections.Generic.Dictionary`2<System.Byte,System.Action`2<System.Object[],Photon.Pun.PhotonMessageInfo>> netEventCallbacks
    static ::System::Collections::Generic::Dictionary_2<uint8_t, ::System::Action_2<::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo>*>* _get_netEventCallbacks();
    // Set static field: static readonly System.Collections.Generic.Dictionary`2<System.Byte,System.Action`2<System.Object[],Photon.Pun.PhotonMessageInfo>> netEventCallbacks
    static void _set_netEventCallbacks(::System::Collections::Generic::Dictionary_2<uint8_t, ::System::Action_2<::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo>*>* value);
    // Get static field: static private readonly System.Object[] sendEventData
    static ::ArrayW<::Il2CppObject*> _get_sendEventData();
    // Set static field: static private readonly System.Object[] sendEventData
    static void _set_sendEventData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static private readonly ExitGames.Client.Photon.SendOptions soUnreliable
    static ::ExitGames::Client::Photon::SendOptions _get_soUnreliable();
    // Set static field: static private readonly ExitGames.Client.Photon.SendOptions soUnreliable
    static void _set_soUnreliable(::ExitGames::Client::Photon::SendOptions value);
    // Get static field: static private readonly Photon.Realtime.RaiseEventOptions reoOthers
    static ::Photon::Realtime::RaiseEventOptions* _get_reoOthers();
    // Set static field: static private readonly Photon.Realtime.RaiseEventOptions reoOthers
    static void _set_reoOthers(::Photon::Realtime::RaiseEventOptions* value);
    // Get static field: static private readonly Photon.Realtime.RaiseEventOptions reoMaster
    static ::Photon::Realtime::RaiseEventOptions* _get_reoMaster();
    // Set static field: static private readonly Photon.Realtime.RaiseEventOptions reoMaster
    static void _set_reoMaster(::Photon::Realtime::RaiseEventOptions* value);
    // Get static field: static private readonly Photon.Realtime.RaiseEventOptions reoTarget
    static ::Photon::Realtime::RaiseEventOptions* _get_reoTarget();
    // Set static field: static private readonly Photon.Realtime.RaiseEventOptions reoTarget
    static void _set_reoTarget(::Photon::Realtime::RaiseEventOptions* value);
    // Get static field: static private readonly System.Object[] groupJoinSendData
    static ::ArrayW<::Il2CppObject*> _get_groupJoinSendData();
    // Set static field: static private readonly System.Object[] groupJoinSendData
    static void _set_groupJoinSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static private readonly System.Object[] reportTouchSendData
    static ::ArrayW<::Il2CppObject*> _get_reportTouchSendData();
    // Set static field: static private readonly System.Object[] reportTouchSendData
    static void _set_reportTouchSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static public System.Action`2<Photon.Realtime.Player,Photon.Realtime.Player> playerTouchedCallback
    static ::System::Action_2<::Photon::Realtime::Player*, ::Photon::Realtime::Player*>* _get_playerTouchedCallback();
    // Set static field: static public System.Action`2<Photon.Realtime.Player,Photon.Realtime.Player> playerTouchedCallback
    static void _set_playerTouchedCallback(::System::Action_2<::Photon::Realtime::Player*, ::Photon::Realtime::Player*>* value);
    // Get static field: static private System.Object[] statusSendData
    static ::ArrayW<::Il2CppObject*> _get_statusSendData();
    // Set static field: static private System.Object[] statusSendData
    static void _set_statusSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static public System.Action`1<RoomSystem/StatusEffects> statusEffectCallback
    static ::System::Action_1<::GlobalNamespace::RoomSystem::StatusEffects>* _get_statusEffectCallback();
    // Set static field: static public System.Action`1<RoomSystem/StatusEffects> statusEffectCallback
    static void _set_statusEffectCallback(::System::Action_1<::GlobalNamespace::RoomSystem::StatusEffects>* value);
    // Get static field: static private System.Object[] soundSendData
    static ::ArrayW<::Il2CppObject*> _get_soundSendData();
    // Set static field: static private System.Object[] soundSendData
    static void _set_soundSendData(::ArrayW<::Il2CppObject*> value);
    // Get static field: static private System.Object[] sendSoundDataOther
    static ::ArrayW<::Il2CppObject*> _get_sendSoundDataOther();
    // Set static field: static private System.Object[] sendSoundDataOther
    static void _set_sendSoundDataOther(::ArrayW<::Il2CppObject*> value);
    // Get static field: static public System.Action`2<RoomSystem/SoundEffect,Photon.Realtime.Player> soundEffectCallback
    static ::System::Action_2<::GlobalNamespace::RoomSystem::SoundEffect, ::Photon::Realtime::Player*>* _get_soundEffectCallback();
    // Set static field: static public System.Action`2<RoomSystem/SoundEffect,Photon.Realtime.Player> soundEffectCallback
    static void _set_soundEffectCallback(::System::Action_2<::GlobalNamespace::RoomSystem::SoundEffect, ::Photon::Realtime::Player*>* value);
    // Get static field: static private System.Object[] playerEffectData
    static ::ArrayW<::Il2CppObject*> _get_playerEffectData();
    // Set static field: static private System.Object[] playerEffectData
    static void _set_playerEffectData(::ArrayW<::Il2CppObject*> value);
    // Get instance field reference: private RoomSystemSettings roomSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomSystemSettings*& dyn_roomSettings();
    // Get instance field reference: private System.String[] prefabsToInstantiateByPath
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_prefabsToInstantiateByPath();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> prefabsInstantiated
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_prefabsInstantiated();
    // static System.Void DeserializeLaunchProjectile(System.Object[] projectileData, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2769AE8
    static void DeserializeLaunchProjectile(::ArrayW<::Il2CppObject*> projectileData, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendLaunchProjectile(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, RoomSystem/ProjectileSource projectileSource, System.Int32 projectileCount, System.Boolean randomColour, System.Byte r, System.Byte g, System.Byte b, System.Byte a)
    // Offset: 0x276A22C
    static void SendLaunchProjectile(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, ::GlobalNamespace::RoomSystem::ProjectileSource projectileSource, int projectileCount, bool randomColour, uint8_t r, uint8_t g, uint8_t b, uint8_t a);
    // static System.Void ImpactEffect(VRRig targetRig, UnityEngine.Vector3 position, System.Single r, System.Single g, System.Single b, System.Single a, System.Int32 projectileCount, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276A960
    static void ImpactEffect(::GlobalNamespace::VRRig* targetRig, ::UnityEngine::Vector3 position, float r, float g, float b, float a, int projectileCount, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void DeserializeImpactEffect(System.Object[] impactData, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276AA7C
    static void DeserializeImpactEffect(::ArrayW<::Il2CppObject*> impactData, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendImpactEffect(UnityEngine.Vector3 position, System.Single r, System.Single g, System.Single b, System.Single a, System.Int32 projectileCount)
    // Offset: 0x276AF90
    static void SendImpactEffect(::UnityEngine::Vector3 position, float r, float g, float b, float a, int projectileCount);
    // private System.Void Awake()
    // Offset: 0x276B390
    void Awake();
    // private System.Void Start()
    // Offset: 0x276B530
    void Start();
    // private System.Void OnApplicationPause(System.Boolean paused)
    // Offset: 0x276B7F0
    void OnApplicationPause(bool paused);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
    // Offset: 0x276B8A4
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom();
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x276BE94
    void Photon_Realtime_IInRoomCallbacks_OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
    // Offset: 0x276C0A4
    void Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom();
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x276C434
    void Photon_Realtime_IInRoomCallbacks_OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // static public System.Collections.Generic.List`1<Photon.Realtime.Player> get_PlayersInRoom()
    // Offset: 0x276C5C8
    static ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* get_PlayersInRoom();
    // static public System.String get_RoomGameMode()
    // Offset: 0x276C620
    static ::StringW get_RoomGameMode();
    // static public System.Boolean get_JoinedRoom()
    // Offset: 0x276A6CC
    static bool get_JoinedRoom();
    // static public System.Boolean get_AmITheHost()
    // Offset: 0x276C678
    static bool get_AmITheHost();
    // static private System.Void .cctor()
    // Offset: 0x276C6F8
    static void _cctor();
    // static private System.Void StaticLoad()
    // Offset: 0x276CC90
    static void StaticLoad();
    // static private System.Void TimerDC(System.Object sender, System.Timers.ElapsedEventArgs args)
    // Offset: 0x276D010
    static void TimerDC(::Il2CppObject* sender, ::System::Timers::ElapsedEventArgs* args);
    // static public System.Boolean IsPlayerBanned(Photon.Realtime.Player player)
    // Offset: 0x276A1CC
    static bool IsPlayerBanned(::Photon::Realtime::Player* player);
    // static public System.Boolean IsPlayerBanned(NetPlayer netPlayer)
    // Offset: 0x276D144
    static bool IsPlayerBanned(::GlobalNamespace::NetPlayer* netPlayer);
    // static public System.Boolean IsPlayerBanned(System.Int32 player)
    // Offset: 0x276D0C4
    static bool IsPlayerBanned(int player);
    // static System.Boolean CheckPlayerBanned(Photon.Realtime.Player player, in System.String cosmeticString)
    // Offset: 0x2768148
    static bool CheckPlayerBanned(::Photon::Realtime::Player* player, ByRef<::StringW> cosmeticString);
    // static System.Boolean CheckPlayerBanned(System.Int32 player, in System.String cosmeticString)
    // Offset: 0x276D1B8
    static bool CheckPlayerBanned(int player, ByRef<::StringW> cosmeticString);
    // static System.Void SendEvent(in System.Byte code, in System.Object evData, in Photon.Realtime.Player target, in ExitGames.Client.Photon.SendOptions so)
    // Offset: 0x276D278
    static void SendEvent(ByRef<uint8_t> code, ByRef<::Il2CppObject*> evData, ByRef<::Photon::Realtime::Player*> target, ByRef<::ExitGames::Client::Photon::SendOptions> so);
    // static System.Void SendEvent(in System.Byte code, in System.Object evData, in Photon.Realtime.RaiseEventOptions reo, in ExitGames.Client.Photon.SendOptions so)
    // Offset: 0x276A764
    static void SendEvent(ByRef<uint8_t> code, ByRef<::Il2CppObject*> evData, ByRef<::Photon::Realtime::RaiseEventOptions*> reo, ByRef<::ExitGames::Client::Photon::SendOptions> so);
    // static private System.Void OnEvent(ExitGames.Client.Photon.EventData data)
    // Offset: 0x276D328
    static void OnEvent(::ExitGames::Client::Photon::EventData* data);
    // static System.Void SearchForNearby(System.Object[] shuffleData, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276D6BC
    static void SearchForNearby(::ArrayW<::Il2CppObject*> shuffleData, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SearchForParty(System.Object[] shuffleData, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276D9B8
    static void SearchForParty(::ArrayW<::Il2CppObject*> shuffleData, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendNearbyFollowCommand(GorillaFriendCollider friendCollider, System.String shuffler, System.String keyStr)
    // Offset: 0x276DDC4
    static void SendNearbyFollowCommand(::GlobalNamespace::GorillaFriendCollider* friendCollider, ::StringW shuffler, ::StringW keyStr);
    // static System.Void SendPartyFollowCommand(System.String shuffler, System.String keyStr)
    // Offset: 0x276E134
    static void SendPartyFollowCommand(::StringW shuffler, ::StringW keyStr);
    // static private System.Void DeserializeReportTouch(System.Object[] data, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276E6FC
    static void DeserializeReportTouch(::ArrayW<::Il2CppObject*> data, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendReportTouch(Photon.Realtime.Player touchedPlayer)
    // Offset: 0x276E824
    static void SendReportTouch(::Photon::Realtime::Player* touchedPlayer);
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x276E97C
    void Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
    // Offset: 0x276E980
    void Photon_Realtime_IInRoomCallbacks_OnPlayerPropertiesUpdate(::Photon::Realtime::Player* targetPlayer, ::ExitGames::Client::Photon::Hashtable* changedProps);
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    // Offset: 0x276E984
    void Photon_Realtime_IInRoomCallbacks_OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(System.Collections.Generic.List`1<Photon.Realtime.FriendInfo> friendList)
    // Offset: 0x276E988
    void Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>* friendList);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
    // Offset: 0x276E98C
    void Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom();
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x276E990
    void Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed(int16_t returnCode, ::StringW message);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x276E994
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed(int16_t returnCode, ::StringW message);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x276E998
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed(int16_t returnCode, ::StringW message);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom()
    // Offset: 0x276E99C
    void Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom();
    // static private System.Void SetSlowedTime()
    // Offset: 0x276E9A0
    static void SetSlowedTime();
    // static private System.Void SetTaggedTime()
    // Offset: 0x276EA80
    static void SetTaggedTime();
    // static private System.Void SetJoinedTaggedTime()
    // Offset: 0x276EB54
    static void SetJoinedTaggedTime();
    // static private System.Void OnStatusEffect(RoomSystem/StatusEffects status)
    // Offset: 0x276EBEC
    static void OnStatusEffect(::GlobalNamespace::RoomSystem::StatusEffects status);
    // static private System.Void DeserializeStatusEffect(System.Object[] data, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276ECA4
    static void DeserializeStatusEffect(::ArrayW<::Il2CppObject*> data, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendStatusEffectAll(RoomSystem/StatusEffects status)
    // Offset: 0x276EEC4
    static void SendStatusEffectAll(::GlobalNamespace::RoomSystem::StatusEffects status);
    // static System.Void SendStatusEffectToPlayer(RoomSystem/StatusEffects status, Photon.Realtime.Player target)
    // Offset: 0x276F01C
    static void SendStatusEffectToPlayer(::GlobalNamespace::RoomSystem::StatusEffects status, ::Photon::Realtime::Player* target);
    // static System.Void PlaySoundEffect(System.Int32 soundIndex, System.Single soundVolume)
    // Offset: 0x276F150
    static void PlaySoundEffect(int soundIndex, float soundVolume);
    // static System.Void PlaySoundEffect(System.Int32 soundIndex, System.Single soundVolume, Photon.Realtime.Player target)
    // Offset: 0x276F20C
    static void PlaySoundEffect(int soundIndex, float soundVolume, ::Photon::Realtime::Player* target);
    // static private System.Void OnPlaySoundEffect(RoomSystem/SoundEffect sound, Photon.Realtime.Player target)
    // Offset: 0x276F2F8
    static void OnPlaySoundEffect(::GlobalNamespace::RoomSystem::SoundEffect sound, ::Photon::Realtime::Player* target);
    // static private System.Void DeserializeSoundEffect(System.Object[] data, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276F388
    static void DeserializeSoundEffect(::ArrayW<::Il2CppObject*> data, ::Photon::Pun::PhotonMessageInfo info);
    // static System.Void SendSoundEffectAll(System.Int32 soundIndex, System.Single soundVolume)
    // Offset: 0x276F6C8
    static void SendSoundEffectAll(int soundIndex, float soundVolume);
    // static System.Void SendSoundEffectAll(RoomSystem/SoundEffect sound)
    // Offset: 0x276F744
    static void SendSoundEffectAll(::GlobalNamespace::RoomSystem::SoundEffect sound);
    // static System.Void SendSoundEffectToPlayer(System.Int32 soundIndex, System.Single soundVolume, Photon.Realtime.Player player)
    // Offset: 0x276F948
    static void SendSoundEffectToPlayer(int soundIndex, float soundVolume, ::Photon::Realtime::Player* player);
    // static System.Void SendSoundEffectToPlayer(RoomSystem/SoundEffect sound, Photon.Realtime.Player player)
    // Offset: 0x276F9DC
    static void SendSoundEffectToPlayer(::GlobalNamespace::RoomSystem::SoundEffect sound, ::Photon::Realtime::Player* player);
    // static System.Void SendSoundEffectOnOther(System.Int32 soundIndex, System.Single soundvolume, Photon.Realtime.Player target)
    // Offset: 0x276FBA8
    static void SendSoundEffectOnOther(int soundIndex, float soundvolume, ::Photon::Realtime::Player* target);
    // static System.Void SendSoundEffectOnOther(RoomSystem/SoundEffect sound, Photon.Realtime.Player target)
    // Offset: 0x276FC3C
    static void SendSoundEffectOnOther(::GlobalNamespace::RoomSystem::SoundEffect sound, ::Photon::Realtime::Player* target);
    // static System.Void OnPlayerEffect(RoomSystem/PlayerEffect effect, Photon.Realtime.Player target)
    // Offset: 0x276FE58
    static void OnPlayerEffect(::GlobalNamespace::RoomSystem::PlayerEffect effect, ::Photon::Realtime::Player* target);
    // static private System.Void DeserializePlayerEffect(System.Object[] data, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x276FE5C
    static void DeserializePlayerEffect(::ArrayW<::Il2CppObject*> data, ::Photon::Pun::PhotonMessageInfo info);
    // static private System.Void SendPlayerEffect(RoomSystem/PlayerEffect effect, Photon.Realtime.Player target)
    // Offset: 0x2770010
    static void SendPlayerEffect(::GlobalNamespace::RoomSystem::PlayerEffect effect, ::Photon::Realtime::Player* target);
    // public System.Void .ctor()
    // Offset: 0x2770150
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomSystem*, creationType>()));
    }
  }; // RoomSystem
  #pragma pack(pop)
  static check_size<sizeof(RoomSystem), 48 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)> __GlobalNamespace_RoomSystemSizeCheck;
  static_assert(sizeof(RoomSystem) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystem::SoundEffect, "", "RoomSystem/SoundEffect");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomSystem::StatusEffects, "", "RoomSystem/StatusEffects");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializeLaunchProjectile
// Il2CppName: DeserializeLaunchProjectile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializeLaunchProjectile)> {
  static const MethodInfo* get() {
    static auto* projectileData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializeLaunchProjectile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectileData, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendLaunchProjectile
// Il2CppName: SendLaunchProjectile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::GlobalNamespace::RoomSystem::ProjectileSource, int, bool, uint8_t, uint8_t, uint8_t, uint8_t)>(&GlobalNamespace::RoomSystem::SendLaunchProjectile)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* projectileSource = &::il2cpp_utils::GetClassFromName("", "RoomSystem/ProjectileSource")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* randomColour = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendLaunchProjectile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity, projectileSource, projectileCount, randomColour, r, g, b, a});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::ImpactEffect
// Il2CppName: ImpactEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::VRRig*, ::UnityEngine::Vector3, float, float, float, float, int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::ImpactEffect)> {
  static const MethodInfo* get() {
    static auto* targetRig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "ImpactEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRig, position, r, g, b, a, projectileCount, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializeImpactEffect
// Il2CppName: DeserializeImpactEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializeImpactEffect)> {
  static const MethodInfo* get() {
    static auto* impactData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializeImpactEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{impactData, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendImpactEffect
// Il2CppName: SendImpactEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, float, float, int)>(&GlobalNamespace::RoomSystem::SendImpactEffect)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* projectileCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendImpactEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, r, g, b, a, projectileCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(bool)>(&GlobalNamespace::RoomSystem::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerEnteredRoom
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerLeftRoom
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::get_PlayersInRoom
// Il2CppName: get_PlayersInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* (*)()>(&GlobalNamespace::RoomSystem::get_PlayersInRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "get_PlayersInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::get_RoomGameMode
// Il2CppName: get_RoomGameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::RoomSystem::get_RoomGameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "get_RoomGameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::get_JoinedRoom
// Il2CppName: get_JoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::RoomSystem::get_JoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "get_JoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::get_AmITheHost
// Il2CppName: get_AmITheHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::RoomSystem::get_AmITheHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "get_AmITheHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::StaticLoad
// Il2CppName: StaticLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomSystem::StaticLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "StaticLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::TimerDC
// Il2CppName: TimerDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::System::Timers::ElapsedEventArgs*)>(&GlobalNamespace::RoomSystem::TimerDC)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Timers", "ElapsedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "TimerDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::IsPlayerBanned
// Il2CppName: IsPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::IsPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "IsPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::IsPlayerBanned
// Il2CppName: IsPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::RoomSystem::IsPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* netPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "IsPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::IsPlayerBanned
// Il2CppName: IsPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::RoomSystem::IsPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "IsPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::CheckPlayerBanned
// Il2CppName: CheckPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Photon::Realtime::Player*, ByRef<::StringW>)>(&GlobalNamespace::RoomSystem::CheckPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* cosmeticString = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "CheckPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, cosmeticString});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::CheckPlayerBanned
// Il2CppName: CheckPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<::StringW>)>(&GlobalNamespace::RoomSystem::CheckPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cosmeticString = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "CheckPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, cosmeticString});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint8_t>, ByRef<::Il2CppObject*>, ByRef<::Photon::Realtime::Player*>, ByRef<::ExitGames::Client::Photon::SendOptions>)>(&GlobalNamespace::RoomSystem::SendEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* evData = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->this_arg;
    static auto* so = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, evData, target, so});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint8_t>, ByRef<::Il2CppObject*>, ByRef<::Photon::Realtime::RaiseEventOptions*>, ByRef<::ExitGames::Client::Photon::SendOptions>)>(&GlobalNamespace::RoomSystem::SendEvent)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* evData = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    static auto* reo = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "RaiseEventOptions")->this_arg;
    static auto* so = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, evData, reo, so});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::OnEvent
// Il2CppName: OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ExitGames::Client::Photon::EventData*)>(&GlobalNamespace::RoomSystem::OnEvent)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SearchForNearby
// Il2CppName: SearchForNearby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::SearchForNearby)> {
  static const MethodInfo* get() {
    static auto* shuffleData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SearchForNearby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shuffleData, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SearchForParty
// Il2CppName: SearchForParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::SearchForParty)> {
  static const MethodInfo* get() {
    static auto* shuffleData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SearchForParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shuffleData, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendNearbyFollowCommand
// Il2CppName: SendNearbyFollowCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaFriendCollider*, ::StringW, ::StringW)>(&GlobalNamespace::RoomSystem::SendNearbyFollowCommand)> {
  static const MethodInfo* get() {
    static auto* friendCollider = &::il2cpp_utils::GetClassFromName("", "GorillaFriendCollider")->byval_arg;
    static auto* shuffler = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keyStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendNearbyFollowCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendCollider, shuffler, keyStr});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendPartyFollowCommand
// Il2CppName: SendPartyFollowCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GlobalNamespace::RoomSystem::SendPartyFollowCommand)> {
  static const MethodInfo* get() {
    static auto* shuffler = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keyStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendPartyFollowCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shuffler, keyStr});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializeReportTouch
// Il2CppName: DeserializeReportTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializeReportTouch)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializeReportTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendReportTouch
// Il2CppName: SendReportTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendReportTouch)> {
  static const MethodInfo* get() {
    static auto* touchedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendReportTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touchedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerPropertiesUpdate
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::Photon::Realtime::Player*, ::ExitGames::Client::Photon::Hashtable*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnPlayerPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* changedProps = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, changedProps});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnRoomPropertiesUpdate
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::ExitGames::Client::Photon::Hashtable*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IInRoomCallbacks_OnRoomPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* propertiesThatChanged = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesThatChanged});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>*)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate)> {
  static const MethodInfo* get() {
    static auto* friendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "FriendInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(int16_t, ::StringW)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(int16_t, ::StringW)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)(int16_t, ::StringW)>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomSystem::*)()>(&GlobalNamespace::RoomSystem::Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SetSlowedTime
// Il2CppName: SetSlowedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomSystem::SetSlowedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SetSlowedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SetTaggedTime
// Il2CppName: SetTaggedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomSystem::SetTaggedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SetTaggedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SetJoinedTaggedTime
// Il2CppName: SetJoinedTaggedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomSystem::SetJoinedTaggedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SetJoinedTaggedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::OnStatusEffect
// Il2CppName: OnStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::StatusEffects)>(&GlobalNamespace::RoomSystem::OnStatusEffect)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "RoomSystem/StatusEffects")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "OnStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializeStatusEffect
// Il2CppName: DeserializeStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializeStatusEffect)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializeStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendStatusEffectAll
// Il2CppName: SendStatusEffectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::StatusEffects)>(&GlobalNamespace::RoomSystem::SendStatusEffectAll)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "RoomSystem/StatusEffects")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendStatusEffectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendStatusEffectToPlayer
// Il2CppName: SendStatusEffectToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::StatusEffects, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendStatusEffectToPlayer)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "RoomSystem/StatusEffects")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendStatusEffectToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::PlaySoundEffect
// Il2CppName: PlaySoundEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float)>(&GlobalNamespace::RoomSystem::PlaySoundEffect)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "PlaySoundEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::PlaySoundEffect
// Il2CppName: PlaySoundEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::PlaySoundEffect)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "PlaySoundEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundVolume, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::OnPlaySoundEffect
// Il2CppName: OnPlaySoundEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::SoundEffect, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::OnPlaySoundEffect)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("", "RoomSystem/SoundEffect")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "OnPlaySoundEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializeSoundEffect
// Il2CppName: DeserializeSoundEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializeSoundEffect)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializeSoundEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectAll
// Il2CppName: SendSoundEffectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float)>(&GlobalNamespace::RoomSystem::SendSoundEffectAll)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectAll
// Il2CppName: SendSoundEffectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::SoundEffect)>(&GlobalNamespace::RoomSystem::SendSoundEffectAll)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("", "RoomSystem/SoundEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectToPlayer
// Il2CppName: SendSoundEffectToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendSoundEffectToPlayer)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundVolume, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectToPlayer
// Il2CppName: SendSoundEffectToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::SoundEffect, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendSoundEffectToPlayer)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("", "RoomSystem/SoundEffect")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectOnOther
// Il2CppName: SendSoundEffectOnOther
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendSoundEffectOnOther)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* soundvolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectOnOther", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, soundvolume, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendSoundEffectOnOther
// Il2CppName: SendSoundEffectOnOther
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::SoundEffect, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendSoundEffectOnOther)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("", "RoomSystem/SoundEffect")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendSoundEffectOnOther", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::OnPlayerEffect
// Il2CppName: OnPlayerEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::PlayerEffect, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::OnPlayerEffect)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("", "RoomSystem/PlayerEffect")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "OnPlayerEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::DeserializePlayerEffect
// Il2CppName: DeserializePlayerEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppObject*>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::RoomSystem::DeserializePlayerEffect)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "DeserializePlayerEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::SendPlayerEffect
// Il2CppName: SendPlayerEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::RoomSystem::PlayerEffect, ::Photon::Realtime::Player*)>(&GlobalNamespace::RoomSystem::SendPlayerEffect)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("", "RoomSystem/PlayerEffect")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomSystem*), "SendPlayerEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
