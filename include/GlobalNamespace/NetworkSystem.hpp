// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: NetworkSystemConfig
#include "GlobalNamespace/NetworkSystemConfig.hpp"
// Including type: NetSystemState
#include "GlobalNamespace/NetSystemState.hpp"
// Including type: NetJoinResult
#include "GlobalNamespace/NetJoinResult.hpp"
// Including type: RPCArgBuffer`1
#include "GlobalNamespace/RPCArgBuffer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetPlayer
  class NetPlayer;
  // Forward declaring type: RoomConfig
  class RoomConfig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
  // Forward declaring type: Speaker
  class Speaker;
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: SO_NetworkVoiceSettings
  class SO_NetworkVoiceSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: UserProof
  class UserProof;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkSystem
  class NetworkSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkSystem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkSystem*, "", "NetworkSystem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: NetworkSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkSystem : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::NetworkSystem::RPC
    class RPC;
    // Nested type: ::GlobalNamespace::NetworkSystem::StringRPC
    class StringRPC;
    // Nested type: ::GlobalNamespace::NetworkSystem::StaticRPC
    class StaticRPC;
    // Nested type: ::GlobalNamespace::NetworkSystem::StaticRPCPlaceholder
    class StaticRPCPlaceholder;
    // Nested type: ::GlobalNamespace::NetworkSystem::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::NetworkSystem::$$c__DisplayClass82_0
    class $$c__DisplayClass82_0;
    // Nested type: ::GlobalNamespace::NetworkSystem::$$c__DisplayClass83_0
    class $$c__DisplayClass83_0;
    // Nested type: ::GlobalNamespace::NetworkSystem::$ReGetNonce$d__80
    class $ReGetNonce$d__80;
    // Nested type: ::GlobalNamespace::NetworkSystem::$RefreshOculusNonce$d__78
    struct $RefreshOculusNonce$d__78;
    public:
    // public NetworkSystemConfig config
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::NetworkSystemConfig config;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkSystemConfig) == 0x4);
    // public System.Boolean changingSceneManually
    // Size: 0x1
    // Offset: 0x24
    bool changingSceneManually;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changingSceneManually and: regionNames
    char __padding1[0x3] = {};
    // public System.String[] regionNames
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> regionNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Int32 currentRegionIndex
    // Size: 0x4
    // Offset: 0x30
    int currentRegionIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <groupJoinInProgress>k__BackingField
    // Size: 0x1
    // Offset: 0x34
    bool groupJoinInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean nonceRefreshed
    // Size: 0x1
    // Offset: 0x35
    bool nonceRefreshed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean isWrongVersion
    // Size: 0x1
    // Offset: 0x36
    bool isWrongVersion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isWrongVersion and: testState
    char __padding6[0x1] = {};
    // private NetSystemState testState
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::NetSystemState testState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetSystemState) == 0x4);
    // Padding between fields: testState and: playerIDCache
    char __padding7[0x4] = {};
    // protected System.Int32[] playerIDCache
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> playerIDCache;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // protected System.Collections.Generic.List`1<NetPlayer> netPlayerCache
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>* netPlayerCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>*) == 0x8);
    // protected Photon.Voice.Unity.Recorder localRecorder
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Voice::Unity::Recorder* localRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // protected Photon.Voice.Unity.Speaker localSpeaker
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Voice::Unity::Speaker* localSpeaker;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Speaker*) == 0x8);
    // private Photon.Voice.Unity.Speaker <LocalSpeaker>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::Photon::Voice::Unity::Speaker* LocalSpeaker;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Speaker*) == 0x8);
    // protected GorillaNetworking.SO_NetworkVoiceSettings VoiceSettings
    // Size: 0x8
    // Offset: 0x68
    ::GorillaNetworking::SO_NetworkVoiceSettings* VoiceSettings;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::SO_NetworkVoiceSettings*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Action`1<Photon.Voice.Unity.RemoteVoiceLink>> remoteVoiceAddedCallbacks
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*>* remoteVoiceAddedCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*>*) == 0x8);
    // private System.Action OnMultiplayerStarted
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* OnMultiplayerStarted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action OnReturnedToSinglePlayer
    // Size: 0x8
    // Offset: 0x80
    ::System::Action* OnReturnedToSinglePlayer;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<System.Int32> OnPlayerJoined
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<int>* OnPlayerJoined;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    // private System.Action`1<System.Int32> OnPlayerLeft
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_1<int>* OnPlayerLeft;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    // private RoomConfig <CurrentRoom>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::RoomConfig* CurrentRoom;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomConfig*) == 0x8);
    public:
    // Get static field: static public NetworkSystem Instance
    static ::GlobalNamespace::NetworkSystem* _get_Instance();
    // Set static field: static public NetworkSystem Instance
    static void _set_Instance(::GlobalNamespace::NetworkSystem* value);
    // Get static field: static protected readonly System.Byte[] EmptyArgs
    static ::ArrayW<uint8_t> _get_EmptyArgs();
    // Set static field: static protected readonly System.Byte[] EmptyArgs
    static void _set_EmptyArgs(::ArrayW<uint8_t> value);
    // static field const value: static public System.String roomCharacters
    static constexpr const char* roomCharacters = "ABCDEFGHIJKLMNPQRSTUVWXYZ123456789";
    // Get static field: static public System.String roomCharacters
    static ::StringW _get_roomCharacters();
    // Set static field: static public System.String roomCharacters
    static void _set_roomCharacters(::StringW value);
    // static field const value: static public System.String shuffleCharacters
    static constexpr const char* shuffleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    // Get static field: static public System.String shuffleCharacters
    static ::StringW _get_shuffleCharacters();
    // Set static field: static public System.String shuffleCharacters
    static void _set_shuffleCharacters(::StringW value);
    // Get static field: static private System.Text.StringBuilder shuffleStringBuilder
    static ::System::Text::StringBuilder* _get_shuffleStringBuilder();
    // Set static field: static private System.Text.StringBuilder shuffleStringBuilder
    static void _set_shuffleStringBuilder(::System::Text::StringBuilder* value);
    // Get instance field reference: public NetworkSystemConfig config
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkSystemConfig& dyn_config();
    // Get instance field reference: public System.Boolean changingSceneManually
    [[deprecated("Use field access instead!")]] bool& dyn_changingSceneManually();
    // Get instance field reference: public System.String[] regionNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_regionNames();
    // Get instance field reference: public System.Int32 currentRegionIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentRegionIndex();
    // Get instance field reference: private System.Boolean <groupJoinInProgress>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$groupJoinInProgress$k__BackingField();
    // Get instance field reference: private System.Boolean nonceRefreshed
    [[deprecated("Use field access instead!")]] bool& dyn_nonceRefreshed();
    // Get instance field reference: protected System.Boolean isWrongVersion
    [[deprecated("Use field access instead!")]] bool& dyn_isWrongVersion();
    // Get instance field reference: private NetSystemState testState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetSystemState& dyn_testState();
    // Get instance field reference: protected System.Int32[] playerIDCache
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_playerIDCache();
    // Get instance field reference: protected System.Collections.Generic.List`1<NetPlayer> netPlayerCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>*& dyn_netPlayerCache();
    // Get instance field reference: protected Photon.Voice.Unity.Recorder localRecorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_localRecorder();
    // Get instance field reference: protected Photon.Voice.Unity.Speaker localSpeaker
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Speaker*& dyn_localSpeaker();
    // Get instance field reference: private Photon.Voice.Unity.Speaker <LocalSpeaker>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Speaker*& dyn_$LocalSpeaker$k__BackingField();
    // Get instance field reference: protected GorillaNetworking.SO_NetworkVoiceSettings VoiceSettings
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::SO_NetworkVoiceSettings*& dyn_VoiceSettings();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Action`1<Photon.Voice.Unity.RemoteVoiceLink>> remoteVoiceAddedCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*>*& dyn_remoteVoiceAddedCallbacks();
    // Get instance field reference: private System.Action OnMultiplayerStarted
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnMultiplayerStarted();
    // Get instance field reference: private System.Action OnReturnedToSinglePlayer
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnReturnedToSinglePlayer();
    // Get instance field reference: private System.Action`1<System.Int32> OnPlayerJoined
    [[deprecated("Use field access instead!")]] ::System::Action_1<int>*& dyn_OnPlayerJoined();
    // Get instance field reference: private System.Action`1<System.Int32> OnPlayerLeft
    [[deprecated("Use field access instead!")]] ::System::Action_1<int>*& dyn_OnPlayerLeft();
    // Get instance field reference: private RoomConfig <CurrentRoom>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomConfig*& dyn_$CurrentRoom$k__BackingField();
    // public System.Boolean get_groupJoinInProgress()
    // Offset: 0x290F898
    bool get_groupJoinInProgress();
    // protected System.Void set_groupJoinInProgress(System.Boolean value)
    // Offset: 0x290F8A0
    void set_groupJoinInProgress(bool value);
    // public NetSystemState get_netState()
    // Offset: 0x290F8AC
    ::GlobalNamespace::NetSystemState get_netState();
    // protected System.Void set_netState(NetSystemState value)
    // Offset: 0x290B464
    void set_netState(::GlobalNamespace::NetSystemState value);
    // public NetPlayer get_LocalPlayer()
    // Offset: 0x290F8B4
    ::GlobalNamespace::NetPlayer* get_LocalPlayer();
    // public System.Boolean get_IsMasterClient()
    // Offset: 0x290F9B8
    bool get_IsMasterClient();
    // public Photon.Voice.Unity.Recorder get_LocalRecorder()
    // Offset: 0x290F9D8
    ::Photon::Voice::Unity::Recorder* get_LocalRecorder();
    // public Photon.Voice.Unity.Speaker get_LocalSpeaker()
    // Offset: 0x290F9E0
    ::Photon::Voice::Unity::Speaker* get_LocalSpeaker();
    // public System.Void set_LocalSpeaker(Photon.Voice.Unity.Speaker value)
    // Offset: 0x290F9E8
    void set_LocalSpeaker(::Photon::Voice::Unity::Speaker* value);
    // public System.Void add_OnMultiplayerStarted(System.Action value)
    // Offset: 0x290F9F0
    void add_OnMultiplayerStarted(::System::Action* value);
    // public System.Void remove_OnMultiplayerStarted(System.Action value)
    // Offset: 0x290FA8C
    void remove_OnMultiplayerStarted(::System::Action* value);
    // protected System.Void MultiplayerStarted()
    // Offset: 0x290B96C
    void MultiplayerStarted();
    // public System.Void add_OnReturnedToSinglePlayer(System.Action value)
    // Offset: 0x290FB28
    void add_OnReturnedToSinglePlayer(::System::Action* value);
    // public System.Void remove_OnReturnedToSinglePlayer(System.Action value)
    // Offset: 0x290FBC4
    void remove_OnReturnedToSinglePlayer(::System::Action* value);
    // protected System.Void SinglePlayerStarted()
    // Offset: 0x290B988
    void SinglePlayerStarted();
    // public System.Void add_OnPlayerJoined(System.Action`1<System.Int32> value)
    // Offset: 0x290FC60
    void add_OnPlayerJoined(::System::Action_1<int>* value);
    // public System.Void remove_OnPlayerJoined(System.Action`1<System.Int32> value)
    // Offset: 0x290FD10
    void remove_OnPlayerJoined(::System::Action_1<int>* value);
    // protected System.Void PlayerJoined(System.Int32 playerID)
    // Offset: 0x290B9A4
    void PlayerJoined(int playerID);
    // public System.Void add_OnPlayerLeft(System.Action`1<System.Int32> value)
    // Offset: 0x290FDC0
    void add_OnPlayerLeft(::System::Action_1<int>* value);
    // public System.Void remove_OnPlayerLeft(System.Action`1<System.Int32> value)
    // Offset: 0x290FE70
    void remove_OnPlayerLeft(::System::Action_1<int>* value);
    // protected System.Void PlayerLeft(System.Int32 playerID)
    // Offset: 0x2908F6C
    void PlayerLeft(int playerID);
    // public System.Void Initialise()
    // Offset: 0x290B11C
    void Initialise();
    // protected System.Void Update()
    // Offset: 0x290FF20
    void Update();
    // public System.Void SetAuthenticationValues(System.Collections.Generic.Dictionary`2<System.String,System.String> authValues)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetAuthenticationValues(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* authValues);
    // public System.Threading.Tasks.Task`1<NetJoinResult> ConnectToRoom(System.String roomName, RoomConfig opts, System.Int32 regionIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::NetJoinResult>* ConnectToRoom(::StringW roomName, ::GlobalNamespace::RoomConfig* opts, int regionIndex);
    // public System.Threading.Tasks.Task JoinFriendsRoom(System.String userID, System.Int32 actorID, System.String keyToFollow, System.String shufflerToFollow)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* JoinFriendsRoom(::StringW userID, int actorID, ::StringW keyToFollow, ::StringW shufflerToFollow);
    // public System.Threading.Tasks.Task ReturnToSinglePlayer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* ReturnToSinglePlayer();
    // public System.Void JoinPubWithFriends()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void JoinPubWithFriends();
    // public System.Boolean get_WrongVersion()
    // Offset: 0x290FF24
    bool get_WrongVersion();
    // public System.Void SetWrongVersion()
    // Offset: 0x290FF2C
    void SetWrongVersion();
    // public UnityEngine.GameObject NetInstantiate(UnityEngine.GameObject prefab, System.Boolean isRoomObject)
    // Offset: 0x290FF38
    ::UnityEngine::GameObject* NetInstantiate(::UnityEngine::GameObject* prefab, bool isRoomObject);
    // public UnityEngine.GameObject NetInstantiate(UnityEngine.GameObject prefab, UnityEngine.Vector3 position, System.Boolean isRoomObject)
    // Offset: 0x290FFF8
    ::UnityEngine::GameObject* NetInstantiate(::UnityEngine::GameObject* prefab, ::UnityEngine::Vector3 position, bool isRoomObject);
    // public UnityEngine.GameObject NetInstantiate(UnityEngine.GameObject prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean isRoomObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::GameObject* NetInstantiate(::UnityEngine::GameObject* prefab, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool isRoomObject);
    // public UnityEngine.GameObject NetInstantiate(UnityEngine.GameObject prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Int32 playerAuthID, System.Boolean isRoomObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::GameObject* NetInstantiate(::UnityEngine::GameObject* prefab, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, int playerAuthID, bool isRoomObject);
    // public System.Void SetPlayerObject(UnityEngine.GameObject playerInstance, System.Nullable`1<System.Int32> owningPlayerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetPlayerObject(::UnityEngine::GameObject* playerInstance, ::System::Nullable_1<int> owningPlayerID);
    // public System.Void NetDestroy(UnityEngine.GameObject instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void NetDestroy(::UnityEngine::GameObject* instance);
    // public System.Void CallRPC(UnityEngine.MonoBehaviour component, NetworkSystem/RPC rpcMethod, System.Boolean sendToSelf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CallRPC(::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::RPC* rpcMethod, bool sendToSelf);
    // public System.Void CallRPC(UnityEngine.MonoBehaviour component, NetworkSystem/RPC rpcMethod, RPCArgBuffer`1<T> args, System.Boolean sendToSelf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void CallRPC(::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::RPC* rpcMethod, ::GlobalNamespace::RPCArgBuffer_1<T> args, bool sendToSelf) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkSystem::CallRPC");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::NetworkSystem*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, component, rpcMethod, args, sendToSelf);
    }
    // public System.Void CallRPC(UnityEngine.MonoBehaviour component, NetworkSystem/StringRPC rpcMethod, System.String message, System.Boolean sendToSelf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CallRPC(::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::StringRPC* rpcMethod, ::StringW message, bool sendToSelf);
    // public System.Void CallRPC(System.Int32 targetPlayerID, UnityEngine.MonoBehaviour component, NetworkSystem/RPC rpcMethod)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CallRPC(int targetPlayerID, ::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::RPC* rpcMethod);
    // public System.Void CallRPC(System.Int32 targetPlayerID, UnityEngine.MonoBehaviour component, NetworkSystem/RPC rpcMethod, RPCArgBuffer`1<T> args)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void CallRPC(int targetPlayerID, ::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::RPC* rpcMethod, ::GlobalNamespace::RPCArgBuffer_1<T> args) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkSystem::CallRPC");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::NetworkSystem*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, targetPlayerID, component, rpcMethod, args);
    }
    // public System.Void CallRPC(System.Int32 targetPlayerID, UnityEngine.MonoBehaviour component, NetworkSystem/StringRPC rpcMethod, System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CallRPC(int targetPlayerID, ::UnityEngine::MonoBehaviour* component, ::GlobalNamespace::NetworkSystem::StringRPC* rpcMethod, ::StringW message);
    // static public System.String GetRandomRoomName()
    // Offset: 0x290DF0C
    static ::StringW GetRandomRoomName();
    // public System.String GetRandomWeightedRegion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetRandomWeightedRegion();
    // protected System.Threading.Tasks.Task RefreshOculusNonce()
    // Offset: 0x291008C
    ::System::Threading::Tasks::Task* RefreshOculusNonce();
    // protected System.Void GetOculusNonceCallback(Oculus.Platform.Message`1<Oculus.Platform.Models.UserProof> message)
    // Offset: 0x2910170
    void GetOculusNonceCallback(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserProof*>* message);
    // private System.Collections.IEnumerator ReGetNonce()
    // Offset: 0x291030C
    ::System::Collections::IEnumerator* ReGetNonce();
    // public System.Void BroadcastMyRoom(System.Boolean create, System.String key, System.String shuffler)
    // Offset: 0x29103A0
    void BroadcastMyRoom(bool create, ::StringW key, ::StringW shuffler);
    // public System.Boolean InstantCheckGroupData(System.String userID, System.String keyToFollow)
    // Offset: 0x2910BBC
    bool InstantCheckGroupData(::StringW userID, ::StringW keyToFollow);
    // public NetPlayer GetNetPlayerByID(System.Int32 playerActorNumber)
    // Offset: 0x2910E60
    ::GlobalNamespace::NetPlayer* GetNetPlayerByID(int playerActorNumber);
    // static public System.String ShuffleRoomName(System.String room, System.String shuffle, System.Boolean encode)
    // Offset: 0x2910978
    static ::StringW ShuffleRoomName(::StringW room, ::StringW shuffle, bool encode);
    // static public System.Int32 mod(System.Int32 x, System.Int32 m)
    // Offset: 0x2910F40
    static int mod(int x, int m);
    // public System.Threading.Tasks.Task AwaitSceneReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* AwaitSceneReady();
    // public System.String get_CurrentPhotonBackend()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_CurrentPhotonBackend();
    // public NetPlayer GetLocalPlayer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::NetPlayer* GetLocalPlayer();
    // public NetPlayer GetPlayer(System.Int32 PlayerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::NetPlayer* GetPlayer(int PlayerID);
    // public System.Void SetMyNickName(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetMyNickName(::StringW name);
    // public System.String GetMyNickName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetMyNickName();
    // public System.String GetMyDefaultName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetMyDefaultName();
    // public System.String GetNickName(System.Int32 playerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetNickName(int playerID);
    // public System.String GetMyUserID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetMyUserID();
    // public System.String GetUserID(System.Int32 playerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetUserID(int playerID);
    // public System.Void SetMyTutorialComplete()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetMyTutorialComplete();
    // public System.Boolean GetMyTutorialCompletion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool GetMyTutorialCompletion();
    // public System.Boolean GetPlayerTutorialCompletion(System.Int32 playerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool GetPlayerTutorialCompletion(int playerID);
    // public System.Void AddVoiceSettings(GorillaNetworking.SO_NetworkVoiceSettings settings)
    // Offset: 0x2910F58
    void AddVoiceSettings(::GorillaNetworking::SO_NetworkVoiceSettings* settings);
    // public System.Void AddRemoteVoiceAddedCallback(System.Action`1<Photon.Voice.Unity.RemoteVoiceLink> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddRemoteVoiceAddedCallback(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>* callback);
    // public Photon.Voice.Unity.VoiceConnection get_VoiceConnection()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::Unity::VoiceConnection* get_VoiceConnection();
    // public System.Boolean get_IsOnline()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsOnline();
    // public System.Boolean get_InRoom()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_InRoom();
    // public System.String get_RoomName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_RoomName();
    // public System.String get_GameModeString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_GameModeString();
    // public System.String get_CurrentRegion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_CurrentRegion();
    // public System.Boolean get_SessionIsPrivate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_SessionIsPrivate();
    // public System.Int32 get_LocalPlayerID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_LocalPlayerID();
    // public System.Int32 get_MasterAuthID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_MasterAuthID();
    // public System.Int32[] get_AllPlayerIDs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<int> get_AllPlayerIDs();
    // public NetPlayer[] get_AllNetPlayers()
    // Offset: 0x2910F60
    ::ArrayW<::GlobalNamespace::NetPlayer*> get_AllNetPlayers();
    // protected System.Void UpdatePlayerIDCache()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdatePlayerIDCache();
    // protected System.Void UpdateNetPlayerList()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateNetPlayerList();
    // public System.Single get_SimTime()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_SimTime();
    // public System.Single get_SimDeltaTime()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_SimDeltaTime();
    // public System.Int32 get_SimTick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_SimTick();
    // public System.Int32 get_RoomPlayerCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_RoomPlayerCount();
    // public System.Int32 GlobalPlayerCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GlobalPlayerCount();
    // public RoomConfig get_CurrentRoom()
    // Offset: 0x2910FB0
    ::GlobalNamespace::RoomConfig* get_CurrentRoom();
    // protected System.Void set_CurrentRoom(RoomConfig value)
    // Offset: 0x2910FB8
    void set_CurrentRoom(::GlobalNamespace::RoomConfig* value);
    // public System.Boolean IsObjectLocallyOwned(UnityEngine.GameObject obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsObjectLocallyOwned(::UnityEngine::GameObject* obj);
    // public System.Boolean IsObjectRoomObject(UnityEngine.GameObject obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsObjectRoomObject(::UnityEngine::GameObject* obj);
    // public System.Boolean ShouldUpdateObject(UnityEngine.GameObject obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldUpdateObject(::UnityEngine::GameObject* obj);
    // public System.Boolean ShouldWriteObjectData(UnityEngine.GameObject obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldWriteObjectData(::UnityEngine::GameObject* obj);
    // public System.Int32 GetOwningPlayerID(UnityEngine.GameObject obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetOwningPlayerID(::UnityEngine::GameObject* obj);
    // public System.Boolean ShouldSpawnLocally(System.Int32 playerID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldSpawnLocally(int playerID);
    // public System.Boolean IsTotalAuthority()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTotalAuthority();
    // protected System.Void .ctor()
    // Offset: 0x290B03C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkSystem*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2910FC0
    static void _cctor();
  }; // NetworkSystem
  #pragma pack(pop)
  static check_size<sizeof(NetworkSystem), 152 + sizeof(::GlobalNamespace::RoomConfig*)> __GlobalNamespace_NetworkSystemSizeCheck;
  static_assert(sizeof(NetworkSystem) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_groupJoinInProgress
// Il2CppName: get_groupJoinInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_groupJoinInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_groupJoinInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::set_groupJoinInProgress
// Il2CppName: set_groupJoinInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(bool)>(&GlobalNamespace::NetworkSystem::set_groupJoinInProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "set_groupJoinInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_netState
// Il2CppName: get_netState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetSystemState (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_netState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_netState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::set_netState
// Il2CppName: set_netState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::GlobalNamespace::NetSystemState)>(&GlobalNamespace::NetworkSystem::set_netState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NetSystemState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "set_netState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_LocalPlayer
// Il2CppName: get_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetPlayer* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_LocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_IsMasterClient
// Il2CppName: get_IsMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_IsMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_IsMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_LocalRecorder
// Il2CppName: get_LocalRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_LocalRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_LocalRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_LocalSpeaker
// Il2CppName: get_LocalSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Speaker* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_LocalSpeaker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_LocalSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::set_LocalSpeaker
// Il2CppName: set_LocalSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::Photon::Voice::Unity::Speaker*)>(&GlobalNamespace::NetworkSystem::set_LocalSpeaker)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "set_LocalSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::add_OnMultiplayerStarted
// Il2CppName: add_OnMultiplayerStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action*)>(&GlobalNamespace::NetworkSystem::add_OnMultiplayerStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "add_OnMultiplayerStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::remove_OnMultiplayerStarted
// Il2CppName: remove_OnMultiplayerStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action*)>(&GlobalNamespace::NetworkSystem::remove_OnMultiplayerStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "remove_OnMultiplayerStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::MultiplayerStarted
// Il2CppName: MultiplayerStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::MultiplayerStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "MultiplayerStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::add_OnReturnedToSinglePlayer
// Il2CppName: add_OnReturnedToSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action*)>(&GlobalNamespace::NetworkSystem::add_OnReturnedToSinglePlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "add_OnReturnedToSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::remove_OnReturnedToSinglePlayer
// Il2CppName: remove_OnReturnedToSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action*)>(&GlobalNamespace::NetworkSystem::remove_OnReturnedToSinglePlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "remove_OnReturnedToSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SinglePlayerStarted
// Il2CppName: SinglePlayerStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::SinglePlayerStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SinglePlayerStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::add_OnPlayerJoined
// Il2CppName: add_OnPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action_1<int>*)>(&GlobalNamespace::NetworkSystem::add_OnPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "add_OnPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::remove_OnPlayerJoined
// Il2CppName: remove_OnPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action_1<int>*)>(&GlobalNamespace::NetworkSystem::remove_OnPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "remove_OnPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::PlayerJoined
// Il2CppName: PlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::PlayerJoined)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "PlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::add_OnPlayerLeft
// Il2CppName: add_OnPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action_1<int>*)>(&GlobalNamespace::NetworkSystem::add_OnPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "add_OnPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::remove_OnPlayerLeft
// Il2CppName: remove_OnPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action_1<int>*)>(&GlobalNamespace::NetworkSystem::remove_OnPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "remove_OnPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::PlayerLeft
// Il2CppName: PlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::PlayerLeft)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "PlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::Initialise
// Il2CppName: Initialise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::Initialise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "Initialise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SetAuthenticationValues
// Il2CppName: SetAuthenticationValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&GlobalNamespace::NetworkSystem::SetAuthenticationValues)> {
  static const MethodInfo* get() {
    static auto* authValues = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SetAuthenticationValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{authValues});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ConnectToRoom
// Il2CppName: ConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::NetJoinResult>* (GlobalNamespace::NetworkSystem::*)(::StringW, ::GlobalNamespace::RoomConfig*, int)>(&GlobalNamespace::NetworkSystem::ConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* opts = &::il2cpp_utils::GetClassFromName("", "RoomConfig")->byval_arg;
    static auto* regionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, opts, regionIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::JoinFriendsRoom
// Il2CppName: JoinFriendsRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkSystem::*)(::StringW, int, ::StringW, ::StringW)>(&GlobalNamespace::NetworkSystem::JoinFriendsRoom)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* actorID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keyToFollow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shufflerToFollow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "JoinFriendsRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID, actorID, keyToFollow, shufflerToFollow});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ReturnToSinglePlayer
// Il2CppName: ReturnToSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::ReturnToSinglePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ReturnToSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::JoinPubWithFriends
// Il2CppName: JoinPubWithFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::JoinPubWithFriends)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "JoinPubWithFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_WrongVersion
// Il2CppName: get_WrongVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_WrongVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_WrongVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SetWrongVersion
// Il2CppName: SetWrongVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::SetWrongVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SetWrongVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::NetInstantiate
// Il2CppName: NetInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*, bool)>(&GlobalNamespace::NetworkSystem::NetInstantiate)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* isRoomObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "NetInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, isRoomObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::NetInstantiate
// Il2CppName: NetInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, bool)>(&GlobalNamespace::NetworkSystem::NetInstantiate)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* isRoomObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "NetInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, isRoomObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::NetInstantiate
// Il2CppName: NetInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool)>(&GlobalNamespace::NetworkSystem::NetInstantiate)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* isRoomObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "NetInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, rotation, isRoomObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::NetInstantiate
// Il2CppName: NetInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, bool)>(&GlobalNamespace::NetworkSystem::NetInstantiate)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* playerAuthID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isRoomObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "NetInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, rotation, playerAuthID, isRoomObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SetPlayerObject
// Il2CppName: SetPlayerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*, ::System::Nullable_1<int>)>(&GlobalNamespace::NetworkSystem::SetPlayerObject)> {
  static const MethodInfo* get() {
    static auto* playerInstance = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* owningPlayerID = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SetPlayerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerInstance, owningPlayerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::NetDestroy
// Il2CppName: NetDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::NetDestroy)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "NetDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::UnityEngine::MonoBehaviour*, ::GlobalNamespace::NetworkSystem::RPC*, bool)>(&GlobalNamespace::NetworkSystem::CallRPC)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")->byval_arg;
    static auto* rpcMethod = &::il2cpp_utils::GetClassFromName("", "NetworkSystem/RPC")->byval_arg;
    static auto* sendToSelf = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "CallRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, rpcMethod, sendToSelf});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::UnityEngine::MonoBehaviour*, ::GlobalNamespace::NetworkSystem::StringRPC*, ::StringW, bool)>(&GlobalNamespace::NetworkSystem::CallRPC)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")->byval_arg;
    static auto* rpcMethod = &::il2cpp_utils::GetClassFromName("", "NetworkSystem/StringRPC")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sendToSelf = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "CallRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, rpcMethod, message, sendToSelf});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(int, ::UnityEngine::MonoBehaviour*, ::GlobalNamespace::NetworkSystem::RPC*)>(&GlobalNamespace::NetworkSystem::CallRPC)> {
  static const MethodInfo* get() {
    static auto* targetPlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")->byval_arg;
    static auto* rpcMethod = &::il2cpp_utils::GetClassFromName("", "NetworkSystem/RPC")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "CallRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayerID, component, rpcMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::CallRPC
// Il2CppName: CallRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(int, ::UnityEngine::MonoBehaviour*, ::GlobalNamespace::NetworkSystem::StringRPC*, ::StringW)>(&GlobalNamespace::NetworkSystem::CallRPC)> {
  static const MethodInfo* get() {
    static auto* targetPlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")->byval_arg;
    static auto* rpcMethod = &::il2cpp_utils::GetClassFromName("", "NetworkSystem/StringRPC")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "CallRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayerID, component, rpcMethod, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetRandomRoomName
// Il2CppName: GetRandomRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::NetworkSystem::GetRandomRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetRandomRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetRandomWeightedRegion
// Il2CppName: GetRandomWeightedRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetRandomWeightedRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetRandomWeightedRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::RefreshOculusNonce
// Il2CppName: RefreshOculusNonce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::RefreshOculusNonce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "RefreshOculusNonce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetOculusNonceCallback
// Il2CppName: GetOculusNonceCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::UserProof*>*)>(&GlobalNamespace::NetworkSystem::GetOculusNonceCallback)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "UserProof")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetOculusNonceCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ReGetNonce
// Il2CppName: ReGetNonce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::ReGetNonce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ReGetNonce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::BroadcastMyRoom
// Il2CppName: BroadcastMyRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(bool, ::StringW, ::StringW)>(&GlobalNamespace::NetworkSystem::BroadcastMyRoom)> {
  static const MethodInfo* get() {
    static auto* create = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shuffler = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "BroadcastMyRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{create, key, shuffler});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::InstantCheckGroupData
// Il2CppName: InstantCheckGroupData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(::StringW, ::StringW)>(&GlobalNamespace::NetworkSystem::InstantCheckGroupData)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keyToFollow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "InstantCheckGroupData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID, keyToFollow});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetNetPlayerByID
// Il2CppName: GetNetPlayerByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetPlayer* (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::GetNetPlayerByID)> {
  static const MethodInfo* get() {
    static auto* playerActorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetNetPlayerByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerActorNumber});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ShuffleRoomName
// Il2CppName: ShuffleRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, bool)>(&GlobalNamespace::NetworkSystem::ShuffleRoomName)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shuffle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ShuffleRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, shuffle, encode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::mod
// Il2CppName: mod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&GlobalNamespace::NetworkSystem::mod)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "mod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, m});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::AwaitSceneReady
// Il2CppName: AwaitSceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::AwaitSceneReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "AwaitSceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_CurrentPhotonBackend
// Il2CppName: get_CurrentPhotonBackend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_CurrentPhotonBackend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_CurrentPhotonBackend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetLocalPlayer
// Il2CppName: GetLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetPlayer* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetLocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NetPlayer* (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* PlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PlayerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SetMyNickName
// Il2CppName: SetMyNickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::StringW)>(&GlobalNamespace::NetworkSystem::SetMyNickName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SetMyNickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetMyNickName
// Il2CppName: GetMyNickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetMyNickName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetMyNickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetMyDefaultName
// Il2CppName: GetMyDefaultName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetMyDefaultName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetMyDefaultName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetNickName
// Il2CppName: GetNickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::GetNickName)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetNickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetMyUserID
// Il2CppName: GetMyUserID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetMyUserID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetMyUserID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetUserID
// Il2CppName: GetUserID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::GetUserID)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetUserID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::SetMyTutorialComplete
// Il2CppName: SetMyTutorialComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::SetMyTutorialComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "SetMyTutorialComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetMyTutorialCompletion
// Il2CppName: GetMyTutorialCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GetMyTutorialCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetMyTutorialCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetPlayerTutorialCompletion
// Il2CppName: GetPlayerTutorialCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::GetPlayerTutorialCompletion)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetPlayerTutorialCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::AddVoiceSettings
// Il2CppName: AddVoiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::GorillaNetworking::SO_NetworkVoiceSettings*)>(&GlobalNamespace::NetworkSystem::AddVoiceSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "SO_NetworkVoiceSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "AddVoiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::AddRemoteVoiceAddedCallback
// Il2CppName: AddRemoteVoiceAddedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*)>(&GlobalNamespace::NetworkSystem::AddRemoteVoiceAddedCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "AddRemoteVoiceAddedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_VoiceConnection
// Il2CppName: get_VoiceConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::VoiceConnection* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_VoiceConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_VoiceConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_IsOnline
// Il2CppName: get_IsOnline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_IsOnline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_IsOnline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_InRoom
// Il2CppName: get_InRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_InRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_InRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_RoomName
// Il2CppName: get_RoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_RoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_RoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_GameModeString
// Il2CppName: get_GameModeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_GameModeString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_GameModeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_CurrentRegion
// Il2CppName: get_CurrentRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_CurrentRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_CurrentRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_SessionIsPrivate
// Il2CppName: get_SessionIsPrivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_SessionIsPrivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_SessionIsPrivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_LocalPlayerID
// Il2CppName: get_LocalPlayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_LocalPlayerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_LocalPlayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_MasterAuthID
// Il2CppName: get_MasterAuthID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_MasterAuthID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_MasterAuthID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_AllPlayerIDs
// Il2CppName: get_AllPlayerIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_AllPlayerIDs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_AllPlayerIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_AllNetPlayers
// Il2CppName: get_AllNetPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::NetPlayer*> (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_AllNetPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_AllNetPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::UpdatePlayerIDCache
// Il2CppName: UpdatePlayerIDCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::UpdatePlayerIDCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "UpdatePlayerIDCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::UpdateNetPlayerList
// Il2CppName: UpdateNetPlayerList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::UpdateNetPlayerList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "UpdateNetPlayerList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_SimTime
// Il2CppName: get_SimTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_SimTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_SimTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_SimDeltaTime
// Il2CppName: get_SimDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_SimDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_SimDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_SimTick
// Il2CppName: get_SimTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_SimTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_SimTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_RoomPlayerCount
// Il2CppName: get_RoomPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_RoomPlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_RoomPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GlobalPlayerCount
// Il2CppName: GlobalPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::GlobalPlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GlobalPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::get_CurrentRoom
// Il2CppName: get_CurrentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::RoomConfig* (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::get_CurrentRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "get_CurrentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::set_CurrentRoom
// Il2CppName: set_CurrentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkSystem::*)(::GlobalNamespace::RoomConfig*)>(&GlobalNamespace::NetworkSystem::set_CurrentRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "RoomConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "set_CurrentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::IsObjectLocallyOwned
// Il2CppName: IsObjectLocallyOwned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::IsObjectLocallyOwned)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "IsObjectLocallyOwned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::IsObjectRoomObject
// Il2CppName: IsObjectRoomObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::IsObjectRoomObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "IsObjectRoomObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ShouldUpdateObject
// Il2CppName: ShouldUpdateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::ShouldUpdateObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ShouldUpdateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ShouldWriteObjectData
// Il2CppName: ShouldWriteObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::ShouldWriteObjectData)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ShouldWriteObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::GetOwningPlayerID
// Il2CppName: GetOwningPlayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::NetworkSystem::GetOwningPlayerID)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "GetOwningPlayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::ShouldSpawnLocally
// Il2CppName: ShouldSpawnLocally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)(int)>(&GlobalNamespace::NetworkSystem::ShouldSpawnLocally)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "ShouldSpawnLocally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::IsTotalAuthority
// Il2CppName: IsTotalAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NetworkSystem::*)()>(&GlobalNamespace::NetworkSystem::IsTotalAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), "IsTotalAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NetworkSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::NetworkSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
