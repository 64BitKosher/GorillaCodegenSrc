// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FireworksController
  class FireworksController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Firework
  class Firework;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Firework);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Firework*, "", "Firework");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7B
  #pragma pack(push, 1)
  // Autogenerated type: Firework
  // [TokenAttribute] Offset: FFFFFFFF
  class Firework : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Firework::$$c
    class $$c;
    public:
    // private FireworksController _controller
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::FireworksController* controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FireworksController*) == 0x8);
    // public UnityEngine.Transform origin
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Color colorOrigin
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color colorOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color colorTarget
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color colorTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.AudioSource sourceOrigin
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioSource* sourceOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource sourceTarget
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioSource* sourceTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.ParticleSystem trail
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::ParticleSystem* trail;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem[] explosions
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::ParticleSystem*> explosions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // public System.Boolean doTrail
    // Size: 0x1
    // Offset: 0x78
    bool doTrail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean doTrailAudio
    // Size: 0x1
    // Offset: 0x79
    bool doTrailAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean doExplosion
    // Size: 0x1
    // Offset: 0x7A
    bool doExplosion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private FireworksController _controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworksController*& dyn__controller();
    // Get instance field reference: public UnityEngine.Transform origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_origin();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public UnityEngine.Color colorOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colorOrigin();
    // Get instance field reference: public UnityEngine.Color colorTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colorTarget();
    // Get instance field reference: public UnityEngine.AudioSource sourceOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_sourceOrigin();
    // Get instance field reference: public UnityEngine.AudioSource sourceTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_sourceTarget();
    // Get instance field reference: public UnityEngine.ParticleSystem trail
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_trail();
    // Get instance field reference: public UnityEngine.ParticleSystem[] explosions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_explosions();
    // Get instance field reference: public System.Boolean doTrail
    [[deprecated("Use field access instead!")]] bool& dyn_doTrail();
    // Get instance field reference: public System.Boolean doTrailAudio
    [[deprecated("Use field access instead!")]] bool& dyn_doTrailAudio();
    // Get instance field reference: public System.Boolean doExplosion
    [[deprecated("Use field access instead!")]] bool& dyn_doExplosion();
    // private System.Void Launch()
    // Offset: 0x279E774
    void Launch();
    // private System.Void OnValidate()
    // Offset: 0x279EC9C
    void OnValidate();
    // private System.Void OnDrawGizmos()
    // Offset: 0x279EF34
    void OnDrawGizmos();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x279F1D4
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x279F26C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Firework* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Firework*, creationType>()));
    }
  }; // Firework
  #pragma pack(pop)
  static check_size<sizeof(Firework), 122 + sizeof(bool)> __GlobalNamespace_FireworkSizeCheck;
  static_assert(sizeof(Firework) == 0x7B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Firework::Launch
// Il2CppName: Launch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Firework::*)()>(&GlobalNamespace::Firework::Launch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Firework*), "Launch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Firework::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Firework::*)()>(&GlobalNamespace::Firework::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Firework*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Firework::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Firework::*)()>(&GlobalNamespace::Firework::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Firework*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Firework::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Firework::*)()>(&GlobalNamespace::Firework::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Firework*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Firework::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
