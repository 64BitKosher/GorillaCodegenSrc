// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObject
  class TransferrableObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WorldTargetItem
  class WorldTargetItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WorldTargetItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WorldTargetItem*, "", "WorldTargetItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: WorldTargetItem
  // [TokenAttribute] Offset: FFFFFFFF
  class WorldTargetItem : public ::Il2CppObject {
    public:
    public:
    // public readonly Photon.Realtime.Player owner
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* owner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public readonly System.Int32 itemIdx
    // Size: 0x4
    // Offset: 0x18
    int itemIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: itemIdx and: targetObject
    char __padding1[0x4] = {};
    // public readonly UnityEngine.Transform targetObject
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* targetObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public readonly TransferrableObject transferrableObject
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::TransferrableObject* transferrableObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject*) == 0x8);
    public:
    // Get instance field reference: public readonly Photon.Realtime.Player owner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_owner();
    // Get instance field reference: public readonly System.Int32 itemIdx
    [[deprecated("Use field access instead!")]] int& dyn_itemIdx();
    // Get instance field reference: public readonly UnityEngine.Transform targetObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetObject();
    // Get instance field reference: public readonly TransferrableObject transferrableObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& dyn_transferrableObject();
    // public System.Boolean IsValid()
    // Offset: 0x2972B58
    bool IsValid();
    // static public WorldTargetItem GenerateTargetFromPlayerAndID(Photon.Realtime.Player owner, System.Int32 itemIdx)
    // Offset: 0x2972B7C
    static ::GlobalNamespace::WorldTargetItem* GenerateTargetFromPlayerAndID(::Photon::Realtime::Player* owner, int itemIdx);
    // static public WorldTargetItem GenerateTargetFromWorldSharableItem(Photon.Realtime.Player owner, System.Int32 itemIdx, UnityEngine.Transform transform)
    // Offset: 0x2972D74
    static ::GlobalNamespace::WorldTargetItem* GenerateTargetFromWorldSharableItem(::Photon::Realtime::Player* owner, int itemIdx, ::UnityEngine::Transform* transform);
    // private System.Void .ctor(Photon.Realtime.Player owner, System.Int32 itemIdx, UnityEngine.Transform transform)
    // Offset: 0x2972CD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WorldTargetItem* New_ctor(::Photon::Realtime::Player* owner, int itemIdx, ::UnityEngine::Transform* transform) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WorldTargetItem*, creationType>(owner, itemIdx, transform)));
    }
    // public override System.String ToString()
    // Offset: 0x2972DE4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // WorldTargetItem
  #pragma pack(pop)
  static check_size<sizeof(WorldTargetItem), 40 + sizeof(::GlobalNamespace::TransferrableObject*)> __GlobalNamespace_WorldTargetItemSizeCheck;
  static_assert(sizeof(WorldTargetItem) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WorldTargetItem::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::WorldTargetItem::*)()>(&GlobalNamespace::WorldTargetItem::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldTargetItem*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldTargetItem::GenerateTargetFromPlayerAndID
// Il2CppName: GenerateTargetFromPlayerAndID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::WorldTargetItem* (*)(::Photon::Realtime::Player*, int)>(&GlobalNamespace::WorldTargetItem::GenerateTargetFromPlayerAndID)> {
  static const MethodInfo* get() {
    static auto* owner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* itemIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldTargetItem*), "GenerateTargetFromPlayerAndID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owner, itemIdx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldTargetItem::GenerateTargetFromWorldSharableItem
// Il2CppName: GenerateTargetFromWorldSharableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::WorldTargetItem* (*)(::Photon::Realtime::Player*, int, ::UnityEngine::Transform*)>(&GlobalNamespace::WorldTargetItem::GenerateTargetFromWorldSharableItem)> {
  static const MethodInfo* get() {
    static auto* owner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* itemIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldTargetItem*), "GenerateTargetFromWorldSharableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owner, itemIdx, transform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::WorldTargetItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WorldTargetItem::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::WorldTargetItem::*)()>(&GlobalNamespace::WorldTargetItem::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WorldTargetItem*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
