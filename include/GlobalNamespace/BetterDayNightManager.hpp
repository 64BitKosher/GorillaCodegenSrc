// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITimeOfDaySystem
#include "GlobalNamespace/ITimeOfDaySystem.hpp"
// Including type: TimeSettings
#include "GlobalNamespace/TimeSettings.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AddCollidersToParticleSystemTriggers
  class AddCollidersToParticleSystemTriggers;
  // Forward declaring type: PerSceneRenderData
  class PerSceneRenderData;
  // Skipping declaration: WeatherType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BetterDayNightManager
  class BetterDayNightManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BetterDayNightManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BetterDayNightManager*, "", "BetterDayNightManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x248
  #pragma pack(push, 1)
  // Autogenerated type: BetterDayNightManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BetterDayNightManager : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITimeOfDaySystem*/ {
    public:
    // Nested type: ::GlobalNamespace::BetterDayNightManager::WeatherType
    struct WeatherType;
    // Nested type: ::GlobalNamespace::BetterDayNightManager::ScheduledEvent
    class ScheduledEvent;
    // Nested type: ::GlobalNamespace::BetterDayNightManager::$AnimateLightFlashCo$d__104
    class $AnimateLightFlashCo$d__104;
    // Nested type: ::GlobalNamespace::BetterDayNightManager::$UpdateTimeOfDay$d__79
    class $UpdateTimeOfDay$d__79;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BetterDayNightManager/WeatherType
    // [TokenAttribute] Offset: FFFFFFFF
    struct WeatherType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WeatherType
      constexpr WeatherType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BetterDayNightManager/WeatherType None
      static constexpr const int None = 0;
      // Get static field: static public BetterDayNightManager/WeatherType None
      static ::GlobalNamespace::BetterDayNightManager::WeatherType _get_None();
      // Set static field: static public BetterDayNightManager/WeatherType None
      static void _set_None(::GlobalNamespace::BetterDayNightManager::WeatherType value);
      // static field const value: static public BetterDayNightManager/WeatherType Raining
      static constexpr const int Raining = 1;
      // Get static field: static public BetterDayNightManager/WeatherType Raining
      static ::GlobalNamespace::BetterDayNightManager::WeatherType _get_Raining();
      // Set static field: static public BetterDayNightManager/WeatherType Raining
      static void _set_Raining(::GlobalNamespace::BetterDayNightManager::WeatherType value);
      // static field const value: static public BetterDayNightManager/WeatherType All
      static constexpr const int All = 2;
      // Get static field: static public BetterDayNightManager/WeatherType All
      static ::GlobalNamespace::BetterDayNightManager::WeatherType _get_All();
      // Set static field: static public BetterDayNightManager/WeatherType All
      static void _set_All(::GlobalNamespace::BetterDayNightManager::WeatherType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BetterDayNightManager/WeatherType
    #pragma pack(pop)
    static check_size<sizeof(BetterDayNightManager::WeatherType), 0 + sizeof(int)> __GlobalNamespace_BetterDayNightManager_WeatherTypeSizeCheck;
    static_assert(sizeof(BetterDayNightManager::WeatherType) == 0x4);
    public:
    // public UnityEngine.Shader standard
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* standard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader standardCutout
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Shader* standardCutout;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader gorillaUnlit
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Shader* gorillaUnlit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader gorillaUnlitCutout
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Shader* gorillaUnlitCutout;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Material[] standardMaterialsUnlit
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Material*> standardMaterialsUnlit;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public UnityEngine.Material[] standardMaterialsUnlitDarker
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Material*> standardMaterialsUnlitDarker;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public UnityEngine.Material[] dayNightSupportedMaterials
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Material*> dayNightSupportedMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public UnityEngine.Material[] dayNightSupportedMaterialsCutout
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Material*> dayNightSupportedMaterialsCutout;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public System.String[] dayNightLightmapNames
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> dayNightLightmapNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] dayNightWeatherLightmapNames
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::StringW> dayNightWeatherLightmapNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.Texture2D[] dayNightSkyboxTextures
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Texture2D*> dayNightSkyboxTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public UnityEngine.Texture2D[] cloudsDayNightSkyboxTextures
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Texture2D*> cloudsDayNightSkyboxTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public UnityEngine.Texture2D[] beachDayNightSkyboxTextures
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Texture2D*> beachDayNightSkyboxTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public UnityEngine.Texture2D[] dayNightWeatherSkyboxTextures
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Texture2D*> dayNightWeatherSkyboxTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public System.Single[] standardUnlitColor
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<float> standardUnlitColor;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] standardUnlitColorWithPremadeColorDarker
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<float> standardUnlitColorWithPremadeColorDarker;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single currentLerp
    // Size: 0x4
    // Offset: 0xA0
    float currentLerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentTimestep
    // Size: 0x4
    // Offset: 0xA4
    float currentTimestep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Double[] timeOfDayRange
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<double> timeOfDayRange;
    // Field size check
    static_assert(sizeof(::ArrayW<double>) == 0x8);
    // public System.Double timeMultiplier
    // Size: 0x8
    // Offset: 0xB0
    double timeMultiplier;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single lastTime
    // Size: 0x4
    // Offset: 0xB8
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastTime and: currentTime
    char __padding20[0x4] = {};
    // private System.Double currentTime
    // Size: 0x8
    // Offset: 0xC0
    double currentTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double totalHours
    // Size: 0x8
    // Offset: 0xC8
    double totalHours;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double totalSeconds
    // Size: 0x8
    // Offset: 0xD0
    double totalSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single colorFrom
    // Size: 0x4
    // Offset: 0xD8
    float colorFrom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single colorTo
    // Size: 0x4
    // Offset: 0xDC
    float colorTo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single colorFromDarker
    // Size: 0x4
    // Offset: 0xE0
    float colorFromDarker;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single colorToDarker
    // Size: 0x4
    // Offset: 0xE4
    float colorToDarker;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 currentTimeIndex
    // Size: 0x4
    // Offset: 0xE8
    int currentTimeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentWeatherIndex
    // Size: 0x4
    // Offset: 0xEC
    int currentWeatherIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastIndex
    // Size: 0x4
    // Offset: 0xF0
    int lastIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastIndex and: currentIndexSeconds
    char __padding30[0x4] = {};
    // private System.Double currentIndexSeconds
    // Size: 0x8
    // Offset: 0xF8
    double currentIndexSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single tempLerp
    // Size: 0x4
    // Offset: 0x100
    float tempLerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: tempLerp and: baseSeconds
    char __padding32[0x4] = {};
    // private System.Double baseSeconds
    // Size: 0x8
    // Offset: 0x108
    double baseSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean computerInit
    // Size: 0x1
    // Offset: 0x110
    bool computerInit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: computerInit and: h
    char __padding34[0x3] = {};
    // private System.Single h
    // Size: 0x4
    // Offset: 0x114
    float h;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single s
    // Size: 0x4
    // Offset: 0x118
    float s;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single v
    // Size: 0x4
    // Offset: 0x11C
    float v;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 mySeed
    // Size: 0x4
    // Offset: 0x120
    int mySeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mySeed and: randomNumberGenerator
    char __padding38[0x4] = {};
    // public System.Random randomNumberGenerator
    // Size: 0x8
    // Offset: 0x128
    ::System::Random* randomNumberGenerator;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // public BetterDayNightManager/WeatherType[] weatherCycle
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::GlobalNamespace::BetterDayNightManager::WeatherType> weatherCycle;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BetterDayNightManager::WeatherType>) == 0x8);
    // private System.String <currentTimeOfDay>k__BackingField
    // Size: 0x8
    // Offset: 0x138
    ::StringW currentTimeOfDay;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single rainChance
    // Size: 0x4
    // Offset: 0x140
    float rainChance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxRainDuration
    // Size: 0x4
    // Offset: 0x144
    int maxRainDuration;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rainDuration
    // Size: 0x4
    // Offset: 0x148
    int rainDuration;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single remainingSeconds
    // Size: 0x4
    // Offset: 0x14C
    float remainingSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int64 initialDayCycles
    // Size: 0x8
    // Offset: 0x150
    int64_t initialDayCycles;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 gameEpochDay
    // Size: 0x8
    // Offset: 0x158
    int64_t gameEpochDay;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 currentWeatherCycle
    // Size: 0x4
    // Offset: 0x160
    int currentWeatherCycle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 fromWeatherIndex
    // Size: 0x4
    // Offset: 0x164
    int fromWeatherIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 toWeatherIndex
    // Size: 0x4
    // Offset: 0x168
    int toWeatherIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: toWeatherIndex and: fromSky
    char __padding50[0x4] = {};
    // private UnityEngine.Texture2D fromSky
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Texture2D* fromSky;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D fromSky2
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Texture2D* fromSky2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D fromSky3
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::Texture2D* fromSky3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D toSky
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Texture2D* toSky;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D toSky2
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::Texture2D* toSky2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D toSky3
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::Texture2D* toSky3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public AddCollidersToParticleSystemTriggers[] weatherSystems
    // Size: 0x8
    // Offset: 0x1A0
    ::ArrayW<::GlobalNamespace::AddCollidersToParticleSystemTriggers*> weatherSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::AddCollidersToParticleSystemTriggers*>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Collider> collidersToAddToWeatherSystems
    // Size: 0x8
    // Offset: 0x1A8
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* collidersToAddToWeatherSystems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public System.Int32 overrideIndex
    // Size: 0x4
    // Offset: 0x1B0
    int overrideIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public TimeSettings currentSetting
    // Size: 0x4
    // Offset: 0x1B4
    ::GlobalNamespace::TimeSettings currentSetting;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSettings) == 0x4);
    // private ShaderHashId _Color
    // Size: 0xC
    // Offset: 0x1B8
    ::GlobalNamespace::ShaderHashId Color;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: Color and: GlobalDayNightLerpValue
    char __padding61[0x4] = {};
    // private ShaderHashId _GlobalDayNightLerpValue
    // Size: 0xC
    // Offset: 0x1C8
    ::GlobalNamespace::ShaderHashId GlobalDayNightLerpValue;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightLerpValue and: GlobalDayNightSkyTex1
    char __padding62[0x4] = {};
    // private ShaderHashId _GlobalDayNightSkyTex1
    // Size: 0xC
    // Offset: 0x1D8
    ::GlobalNamespace::ShaderHashId GlobalDayNightSkyTex1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSkyTex1 and: GlobalDayNightSkyTex2
    char __padding63[0x4] = {};
    // private ShaderHashId _GlobalDayNightSkyTex2
    // Size: 0xC
    // Offset: 0x1E8
    ::GlobalNamespace::ShaderHashId GlobalDayNightSkyTex2;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSkyTex2 and: GlobalDayNightSky2Tex1
    char __padding64[0x4] = {};
    // private ShaderHashId _GlobalDayNightSky2Tex1
    // Size: 0xC
    // Offset: 0x1F8
    ::GlobalNamespace::ShaderHashId GlobalDayNightSky2Tex1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSky2Tex1 and: GlobalDayNightSky2Tex2
    char __padding65[0x4] = {};
    // private ShaderHashId _GlobalDayNightSky2Tex2
    // Size: 0xC
    // Offset: 0x208
    ::GlobalNamespace::ShaderHashId GlobalDayNightSky2Tex2;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSky2Tex2 and: GlobalDayNightSky3Tex1
    char __padding66[0x4] = {};
    // private ShaderHashId _GlobalDayNightSky3Tex1
    // Size: 0xC
    // Offset: 0x218
    ::GlobalNamespace::ShaderHashId GlobalDayNightSky3Tex1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSky3Tex1 and: GlobalDayNightSky3Tex2
    char __padding67[0x4] = {};
    // private ShaderHashId _GlobalDayNightSky3Tex2
    // Size: 0xC
    // Offset: 0x228
    ::GlobalNamespace::ShaderHashId GlobalDayNightSky3Tex2;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: GlobalDayNightSky3Tex2 and: shouldRepopulate
    char __padding68[0x4] = {};
    // private System.Boolean shouldRepopulate
    // Size: 0x1
    // Offset: 0x238
    bool shouldRepopulate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldRepopulate and: animatingLightFlash
    char __padding69[0x7] = {};
    // private UnityEngine.Coroutine animatingLightFlash
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::Coroutine* animatingLightFlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITimeOfDaySystem
    operator ::GlobalNamespace::ITimeOfDaySystem() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITimeOfDaySystem*>(this);
    }
    // Get static field: static public BetterDayNightManager instance
    static ::GlobalNamespace::BetterDayNightManager* _get_instance();
    // Set static field: static public BetterDayNightManager instance
    static void _set_instance(::GlobalNamespace::BetterDayNightManager* value);
    // Get static field: static public System.Collections.Generic.List`1<PerSceneRenderData> allScenesRenderData
    static ::System::Collections::Generic::List_1<::GlobalNamespace::PerSceneRenderData*>* _get_allScenesRenderData();
    // Set static field: static public System.Collections.Generic.List`1<PerSceneRenderData> allScenesRenderData
    static void _set_allScenesRenderData(::System::Collections::Generic::List_1<::GlobalNamespace::PerSceneRenderData*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,BetterDayNightManager/ScheduledEvent> scheduledEvents
    static ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BetterDayNightManager::ScheduledEvent*>* _get_scheduledEvents();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,BetterDayNightManager/ScheduledEvent> scheduledEvents
    static void _set_scheduledEvents(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BetterDayNightManager::ScheduledEvent*>* value);
    // Get instance field reference: public UnityEngine.Shader standard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_standard();
    // Get instance field reference: public UnityEngine.Shader standardCutout
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_standardCutout();
    // Get instance field reference: public UnityEngine.Shader gorillaUnlit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_gorillaUnlit();
    // Get instance field reference: public UnityEngine.Shader gorillaUnlitCutout
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_gorillaUnlitCutout();
    // Get instance field reference: public UnityEngine.Material[] standardMaterialsUnlit
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_standardMaterialsUnlit();
    // Get instance field reference: public UnityEngine.Material[] standardMaterialsUnlitDarker
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_standardMaterialsUnlitDarker();
    // Get instance field reference: public UnityEngine.Material[] dayNightSupportedMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_dayNightSupportedMaterials();
    // Get instance field reference: public UnityEngine.Material[] dayNightSupportedMaterialsCutout
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_dayNightSupportedMaterialsCutout();
    // Get instance field reference: public System.String[] dayNightLightmapNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_dayNightLightmapNames();
    // Get instance field reference: public System.String[] dayNightWeatherLightmapNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_dayNightWeatherLightmapNames();
    // Get instance field reference: public UnityEngine.Texture2D[] dayNightSkyboxTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_dayNightSkyboxTextures();
    // Get instance field reference: public UnityEngine.Texture2D[] cloudsDayNightSkyboxTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_cloudsDayNightSkyboxTextures();
    // Get instance field reference: public UnityEngine.Texture2D[] beachDayNightSkyboxTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_beachDayNightSkyboxTextures();
    // Get instance field reference: public UnityEngine.Texture2D[] dayNightWeatherSkyboxTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_dayNightWeatherSkyboxTextures();
    // Get instance field reference: public System.Single[] standardUnlitColor
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_standardUnlitColor();
    // Get instance field reference: public System.Single[] standardUnlitColorWithPremadeColorDarker
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_standardUnlitColorWithPremadeColorDarker();
    // Get instance field reference: public System.Single currentLerp
    [[deprecated("Use field access instead!")]] float& dyn_currentLerp();
    // Get instance field reference: public System.Single currentTimestep
    [[deprecated("Use field access instead!")]] float& dyn_currentTimestep();
    // Get instance field reference: public System.Double[] timeOfDayRange
    [[deprecated("Use field access instead!")]] ::ArrayW<double>& dyn_timeOfDayRange();
    // Get instance field reference: public System.Double timeMultiplier
    [[deprecated("Use field access instead!")]] double& dyn_timeMultiplier();
    // Get instance field reference: private System.Single lastTime
    [[deprecated("Use field access instead!")]] float& dyn_lastTime();
    // Get instance field reference: private System.Double currentTime
    [[deprecated("Use field access instead!")]] double& dyn_currentTime();
    // Get instance field reference: private System.Double totalHours
    [[deprecated("Use field access instead!")]] double& dyn_totalHours();
    // Get instance field reference: private System.Double totalSeconds
    [[deprecated("Use field access instead!")]] double& dyn_totalSeconds();
    // Get instance field reference: private System.Single colorFrom
    [[deprecated("Use field access instead!")]] float& dyn_colorFrom();
    // Get instance field reference: private System.Single colorTo
    [[deprecated("Use field access instead!")]] float& dyn_colorTo();
    // Get instance field reference: private System.Single colorFromDarker
    [[deprecated("Use field access instead!")]] float& dyn_colorFromDarker();
    // Get instance field reference: private System.Single colorToDarker
    [[deprecated("Use field access instead!")]] float& dyn_colorToDarker();
    // Get instance field reference: public System.Int32 currentTimeIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentTimeIndex();
    // Get instance field reference: public System.Int32 currentWeatherIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentWeatherIndex();
    // Get instance field reference: private System.Int32 lastIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastIndex();
    // Get instance field reference: private System.Double currentIndexSeconds
    [[deprecated("Use field access instead!")]] double& dyn_currentIndexSeconds();
    // Get instance field reference: private System.Single tempLerp
    [[deprecated("Use field access instead!")]] float& dyn_tempLerp();
    // Get instance field reference: private System.Double baseSeconds
    [[deprecated("Use field access instead!")]] double& dyn_baseSeconds();
    // Get instance field reference: private System.Boolean computerInit
    [[deprecated("Use field access instead!")]] bool& dyn_computerInit();
    // Get instance field reference: private System.Single h
    [[deprecated("Use field access instead!")]] float& dyn_h();
    // Get instance field reference: private System.Single s
    [[deprecated("Use field access instead!")]] float& dyn_s();
    // Get instance field reference: private System.Single v
    [[deprecated("Use field access instead!")]] float& dyn_v();
    // Get instance field reference: public System.Int32 mySeed
    [[deprecated("Use field access instead!")]] int& dyn_mySeed();
    // Get instance field reference: public System.Random randomNumberGenerator
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_randomNumberGenerator();
    // Get instance field reference: public BetterDayNightManager/WeatherType[] weatherCycle
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BetterDayNightManager::WeatherType>& dyn_weatherCycle();
    // Get instance field reference: private System.String <currentTimeOfDay>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$currentTimeOfDay$k__BackingField();
    // Get instance field reference: public System.Single rainChance
    [[deprecated("Use field access instead!")]] float& dyn_rainChance();
    // Get instance field reference: public System.Int32 maxRainDuration
    [[deprecated("Use field access instead!")]] int& dyn_maxRainDuration();
    // Get instance field reference: private System.Int32 rainDuration
    [[deprecated("Use field access instead!")]] int& dyn_rainDuration();
    // Get instance field reference: private System.Single remainingSeconds
    [[deprecated("Use field access instead!")]] float& dyn_remainingSeconds();
    // Get instance field reference: private System.Int64 initialDayCycles
    [[deprecated("Use field access instead!")]] int64_t& dyn_initialDayCycles();
    // Get instance field reference: private System.Int64 gameEpochDay
    [[deprecated("Use field access instead!")]] int64_t& dyn_gameEpochDay();
    // Get instance field reference: private System.Int32 currentWeatherCycle
    [[deprecated("Use field access instead!")]] int& dyn_currentWeatherCycle();
    // Get instance field reference: private System.Int32 fromWeatherIndex
    [[deprecated("Use field access instead!")]] int& dyn_fromWeatherIndex();
    // Get instance field reference: private System.Int32 toWeatherIndex
    [[deprecated("Use field access instead!")]] int& dyn_toWeatherIndex();
    // Get instance field reference: private UnityEngine.Texture2D fromSky
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_fromSky();
    // Get instance field reference: private UnityEngine.Texture2D fromSky2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_fromSky2();
    // Get instance field reference: private UnityEngine.Texture2D fromSky3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_fromSky3();
    // Get instance field reference: private UnityEngine.Texture2D toSky
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_toSky();
    // Get instance field reference: private UnityEngine.Texture2D toSky2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_toSky2();
    // Get instance field reference: private UnityEngine.Texture2D toSky3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_toSky3();
    // Get instance field reference: public AddCollidersToParticleSystemTriggers[] weatherSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::AddCollidersToParticleSystemTriggers*>& dyn_weatherSystems();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Collider> collidersToAddToWeatherSystems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_collidersToAddToWeatherSystems();
    // Get instance field reference: public System.Int32 overrideIndex
    [[deprecated("Use field access instead!")]] int& dyn_overrideIndex();
    // Get instance field reference: public TimeSettings currentSetting
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSettings& dyn_currentSetting();
    // Get instance field reference: private ShaderHashId _Color
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__Color();
    // Get instance field reference: private ShaderHashId _GlobalDayNightLerpValue
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightLerpValue();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSkyTex1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSkyTex1();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSkyTex2
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSkyTex2();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSky2Tex1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSky2Tex1();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSky2Tex2
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSky2Tex2();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSky3Tex1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSky3Tex1();
    // Get instance field reference: private ShaderHashId _GlobalDayNightSky3Tex2
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__GlobalDayNightSky3Tex2();
    // Get instance field reference: private System.Boolean shouldRepopulate
    [[deprecated("Use field access instead!")]] bool& dyn_shouldRepopulate();
    // Get instance field reference: private UnityEngine.Coroutine animatingLightFlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_animatingLightFlash();
    // static public System.Void Register(PerSceneRenderData data)
    // Offset: 0x27369D8
    static void Register(::GlobalNamespace::PerSceneRenderData* data);
    // static public System.Void Unregister(PerSceneRenderData data)
    // Offset: 0x2736AAC
    static void Unregister(::GlobalNamespace::PerSceneRenderData* data);
    // public System.String get_currentTimeOfDay()
    // Offset: 0x2736B2C
    ::StringW get_currentTimeOfDay();
    // private System.Void set_currentTimeOfDay(System.String value)
    // Offset: 0x2736B34
    void set_currentTimeOfDay(::StringW value);
    // private System.Double ITimeOfDaySystem.get_currentTimeInSeconds()
    // Offset: 0x2736B44
    double ITimeOfDaySystem_get_currentTimeInSeconds();
    // private System.Double ITimeOfDaySystem.get_totalTimeInSeconds()
    // Offset: 0x2736B4C
    double ITimeOfDaySystem_get_totalTimeInSeconds();
    // private System.Void OnEnable()
    // Offset: 0x2736B54
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2737208
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x2737210
    void OnDestroy();
    // private UnityEngine.Vector4 MaterialColorCorrection(UnityEngine.Vector4 color)
    // Offset: 0x2737214
    ::UnityEngine::Vector4 MaterialColorCorrection(::UnityEngine::Vector4 color);
    // private System.Collections.IEnumerator UpdateTimeOfDay()
    // Offset: 0x273719C
    ::System::Collections::IEnumerator* UpdateTimeOfDay();
    // private System.Void ChangeLerps(System.Single newLerp)
    // Offset: 0x273727C
    void ChangeLerps(float newLerp);
    // private System.Void ChangeMaps(System.Int32 fromIndex, System.Int32 toIndex)
    // Offset: 0x2736F20
    void ChangeMaps(int fromIndex, int toIndex);
    // private System.Void Update()
    // Offset: 0x2737628
    void Update();
    // public System.Void RequestRepopulateLightmaps()
    // Offset: 0x27377F4
    void RequestRepopulateLightmaps();
    // public System.Void PopulateAllLightmaps()
    // Offset: 0x27377C8
    void PopulateAllLightmaps();
    // public System.Void PopulateAllLightmaps(System.Int32 fromIndex, System.Int32 toIndex)
    // Offset: 0x27373F0
    void PopulateAllLightmaps(int fromIndex, int toIndex);
    // public BetterDayNightManager/WeatherType CurrentWeather()
    // Offset: 0x2737800
    ::GlobalNamespace::BetterDayNightManager::WeatherType CurrentWeather();
    // public BetterDayNightManager/WeatherType NextWeather()
    // Offset: 0x2737834
    ::GlobalNamespace::BetterDayNightManager::WeatherType NextWeather();
    // public BetterDayNightManager/WeatherType LastWeather()
    // Offset: 0x2737874
    ::GlobalNamespace::BetterDayNightManager::WeatherType LastWeather();
    // private System.Void GenerateWeatherEventTimes()
    // Offset: 0x2736D84
    void GenerateWeatherEventTimes();
    // static public System.Int32 RegisterScheduledEvent(System.Int32 hour, System.Action action)
    // Offset: 0x27378B4
    static int RegisterScheduledEvent(int hour, ::System::Action* action);
    // static public System.Void UnregisterScheduledEvent(System.Int32 id)
    // Offset: 0x2737A5C
    static void UnregisterScheduledEvent(int id);
    // public System.Void SetOverrideIndex(System.Int32 index)
    // Offset: 0x2737ADC
    void SetOverrideIndex(int index);
    // public System.Void AnimateLightFlash(System.Int32 index, System.Single fadeInDuration, System.Single holdDuration, System.Single fadeOutDuration)
    // Offset: 0x2737B44
    void AnimateLightFlash(int index, float fadeInDuration, float holdDuration, float fadeOutDuration);
    // private System.Collections.IEnumerator AnimateLightFlashCo(System.Int32 index, System.Single fadeInDuration, System.Single holdDuration, System.Single fadeOutDuration)
    // Offset: 0x2737BB8
    ::System::Collections::IEnumerator* AnimateLightFlashCo(int index, float fadeInDuration, float holdDuration, float fadeOutDuration);
    // public System.Void SetTimeOfDay(System.Int32 timeIndex)
    // Offset: 0x2737C70
    void SetTimeOfDay(int timeIndex);
    // public System.Void FastForward(System.Single seconds)
    // Offset: 0x2737CE0
    void FastForward(float seconds);
    // public System.Void .ctor()
    // Offset: 0x2737CF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BetterDayNightManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetterDayNightManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BetterDayNightManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2737F90
    static void _cctor();
  }; // BetterDayNightManager
  #pragma pack(pop)
  static check_size<sizeof(BetterDayNightManager), 576 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_BetterDayNightManagerSizeCheck;
  static_assert(sizeof(BetterDayNightManager) == 0x248);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BetterDayNightManager::WeatherType, "", "BetterDayNightManager/WeatherType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::PerSceneRenderData*)>(&GlobalNamespace::BetterDayNightManager::Register)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("", "PerSceneRenderData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::PerSceneRenderData*)>(&GlobalNamespace::BetterDayNightManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("", "PerSceneRenderData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::get_currentTimeOfDay
// Il2CppName: get_currentTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::get_currentTimeOfDay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "get_currentTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::set_currentTimeOfDay
// Il2CppName: set_currentTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(::StringW)>(&GlobalNamespace::BetterDayNightManager::set_currentTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "set_currentTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::ITimeOfDaySystem_get_currentTimeInSeconds
// Il2CppName: ITimeOfDaySystem.get_currentTimeInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::ITimeOfDaySystem_get_currentTimeInSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "ITimeOfDaySystem.get_currentTimeInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::ITimeOfDaySystem_get_totalTimeInSeconds
// Il2CppName: ITimeOfDaySystem.get_totalTimeInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::ITimeOfDaySystem_get_totalTimeInSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "ITimeOfDaySystem.get_totalTimeInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::MaterialColorCorrection
// Il2CppName: MaterialColorCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::BetterDayNightManager::*)(::UnityEngine::Vector4)>(&GlobalNamespace::BetterDayNightManager::MaterialColorCorrection)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "MaterialColorCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::UpdateTimeOfDay
// Il2CppName: UpdateTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::UpdateTimeOfDay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "UpdateTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::ChangeLerps
// Il2CppName: ChangeLerps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(float)>(&GlobalNamespace::BetterDayNightManager::ChangeLerps)> {
  static const MethodInfo* get() {
    static auto* newLerp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "ChangeLerps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLerp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::ChangeMaps
// Il2CppName: ChangeMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(int, int)>(&GlobalNamespace::BetterDayNightManager::ChangeMaps)> {
  static const MethodInfo* get() {
    static auto* fromIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* toIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "ChangeMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromIndex, toIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::RequestRepopulateLightmaps
// Il2CppName: RequestRepopulateLightmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::RequestRepopulateLightmaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "RequestRepopulateLightmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::PopulateAllLightmaps
// Il2CppName: PopulateAllLightmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::PopulateAllLightmaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "PopulateAllLightmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::PopulateAllLightmaps
// Il2CppName: PopulateAllLightmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(int, int)>(&GlobalNamespace::BetterDayNightManager::PopulateAllLightmaps)> {
  static const MethodInfo* get() {
    static auto* fromIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* toIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "PopulateAllLightmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromIndex, toIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::CurrentWeather
// Il2CppName: CurrentWeather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BetterDayNightManager::WeatherType (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::CurrentWeather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "CurrentWeather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::NextWeather
// Il2CppName: NextWeather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BetterDayNightManager::WeatherType (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::NextWeather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "NextWeather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::LastWeather
// Il2CppName: LastWeather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BetterDayNightManager::WeatherType (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::LastWeather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "LastWeather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::GenerateWeatherEventTimes
// Il2CppName: GenerateWeatherEventTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)()>(&GlobalNamespace::BetterDayNightManager::GenerateWeatherEventTimes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "GenerateWeatherEventTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::RegisterScheduledEvent
// Il2CppName: RegisterScheduledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::System::Action*)>(&GlobalNamespace::BetterDayNightManager::RegisterScheduledEvent)> {
  static const MethodInfo* get() {
    static auto* hour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "RegisterScheduledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hour, action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::UnregisterScheduledEvent
// Il2CppName: UnregisterScheduledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::BetterDayNightManager::UnregisterScheduledEvent)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "UnregisterScheduledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::SetOverrideIndex
// Il2CppName: SetOverrideIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(int)>(&GlobalNamespace::BetterDayNightManager::SetOverrideIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "SetOverrideIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::AnimateLightFlash
// Il2CppName: AnimateLightFlash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(int, float, float, float)>(&GlobalNamespace::BetterDayNightManager::AnimateLightFlash)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeInDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* holdDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeOutDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "AnimateLightFlash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, fadeInDuration, holdDuration, fadeOutDuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::AnimateLightFlashCo
// Il2CppName: AnimateLightFlashCo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BetterDayNightManager::*)(int, float, float, float)>(&GlobalNamespace::BetterDayNightManager::AnimateLightFlashCo)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fadeInDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* holdDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeOutDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "AnimateLightFlashCo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, fadeInDuration, holdDuration, fadeOutDuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::SetTimeOfDay
// Il2CppName: SetTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(int)>(&GlobalNamespace::BetterDayNightManager::SetTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* timeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "SetTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::FastForward
// Il2CppName: FastForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetterDayNightManager::*)(float)>(&GlobalNamespace::BetterDayNightManager::FastForward)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), "FastForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BetterDayNightManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BetterDayNightManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetterDayNightManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
