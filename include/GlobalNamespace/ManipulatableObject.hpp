// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ManipulatableObject
  class ManipulatableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ManipulatableObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ManipulatableObject*, "", "ManipulatableObject");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ManipulatableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class ManipulatableObject : public ::GlobalNamespace::HoldableObject {
    public:
    public:
    // protected System.Boolean isHeld
    // Size: 0x1
    // Offset: 0x28
    bool isHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHeld and: holdingHand
    char __padding0[0x7] = {};
    // protected UnityEngine.GameObject holdingHand
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* holdingHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: protected System.Boolean isHeld
    [[deprecated("Use field access instead!")]] bool& dyn_isHeld();
    // Get instance field reference: protected UnityEngine.GameObject holdingHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_holdingHand();
    // protected System.Void OnStartManipulation(UnityEngine.GameObject grabbingHand)
    // Offset: 0x26B6FC0
    void OnStartManipulation(::UnityEngine::GameObject* grabbingHand);
    // protected System.Void OnStopManipulation(UnityEngine.GameObject releasingHand, UnityEngine.Vector3 releaseVelocity)
    // Offset: 0x26B6FC4
    void OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity);
    // protected System.Boolean ShouldHandDetach(UnityEngine.GameObject hand)
    // Offset: 0x26B6FC8
    bool ShouldHandDetach(::UnityEngine::GameObject* hand);
    // protected System.Void OnHeldUpdate(UnityEngine.GameObject hand)
    // Offset: 0x26B6FD0
    void OnHeldUpdate(::UnityEngine::GameObject* hand);
    // protected System.Void OnReleasedUpdate()
    // Offset: 0x26B6FD4
    void OnReleasedUpdate();
    // public System.Void LateUpdate()
    // Offset: 0x26B6FD8
    void LateUpdate();
    // public override System.Void OnHover(InteractionPoint pointHovered, UnityEngine.GameObject hoveringHand)
    // Offset: 0x26B70EC
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnHover(InteractionPoint pointHovered, UnityEngine.GameObject hoveringHand)
    void OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand);
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x26B70F0
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x26B71F8
    // Implemented from: HoldableObject
    // Base method: System.Boolean HoldableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public override System.Void DropItemCleanup()
    // Offset: 0x26B7424
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::DropItemCleanup()
    void DropItemCleanup();
    // public System.Void .ctor()
    // Offset: 0x26B6FB0
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManipulatableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManipulatableObject*, creationType>()));
    }
  }; // ManipulatableObject
  #pragma pack(pop)
  static check_size<sizeof(ManipulatableObject), 48 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_ManipulatableObjectSizeCheck;
  static_assert(sizeof(ManipulatableObject) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnStartManipulation
// Il2CppName: OnStartManipulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::OnStartManipulation)> {
  static const MethodInfo* get() {
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnStartManipulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnStopManipulation
// Il2CppName: OnStopManipulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3)>(&GlobalNamespace::ManipulatableObject::OnStopManipulation)> {
  static const MethodInfo* get() {
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* releaseVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnStopManipulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{releasingHand, releaseVelocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::ShouldHandDetach
// Il2CppName: ShouldHandDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ManipulatableObject::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::ShouldHandDetach)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "ShouldHandDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnHeldUpdate
// Il2CppName: OnHeldUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::OnHeldUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnHeldUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnReleasedUpdate
// Il2CppName: OnReleasedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)()>(&GlobalNamespace::ManipulatableObject::OnReleasedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnReleasedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)()>(&GlobalNamespace::ManipulatableObject::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnHover
// Il2CppName: OnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::OnHover)> {
  static const MethodInfo* get() {
    static auto* pointHovered = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* hoveringHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointHovered, hoveringHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ManipulatableObject::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::ManipulatableObject::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::DropItemCleanup
// Il2CppName: DropItemCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ManipulatableObject::*)()>(&GlobalNamespace::ManipulatableObject::DropItemCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ManipulatableObject*), "DropItemCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ManipulatableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
