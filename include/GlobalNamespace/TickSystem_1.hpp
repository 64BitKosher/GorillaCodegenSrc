// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ObjectPoolEvents
#include "GlobalNamespace/ObjectPoolEvents.hpp"
// Including type: ICallBack
#include "GlobalNamespace/ICallBack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: TickCallbackWrapper`1 because it is already included!
  // Skipping declaration: TickCallbackWrapperPre because it is already included!
  // Skipping declaration: TickCallbackWrapperTick because it is already included!
  // Skipping declaration: TickCallbackWrapperPost because it is already included!
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
  // Forward declaring type: CallbackContainer`1<T>
  template<typename T>
  class CallbackContainer_1;
  // Forward declaring type: ITickSystemPre
  class ITickSystemPre;
  // Forward declaring type: ITickSystemTick
  class ITickSystemTick;
  // Forward declaring type: ITickSystemPost
  class ITickSystemPost;
  // Forward declaring type: ITickSystem
  class ITickSystem;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TickSystem`1<T>
  template<typename T>
  class TickSystem_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::TickSystem_1, "", "TickSystem`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TickSystem`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class TickSystem_1 : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1<T, U>
    template<typename U>
    class TickCallbackWrapper_1;
    // Nested type: ::GlobalNamespace::TickSystem_1::TickCallbackWrapperPre<T>
    class TickCallbackWrapperPre;
    // Nested type: ::GlobalNamespace::TickSystem_1::TickCallbackWrapperTick<T>
    class TickCallbackWrapperTick;
    // Nested type: ::GlobalNamespace::TickSystem_1::TickCallbackWrapperPost<T>
    class TickCallbackWrapperPost;
    // WARNING Size may be invalid!
    // Autogenerated type: TickSystem`1/TickCallbackWrapper`1
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename U>
    class TickCallbackWrapper_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::GlobalNamespace::ObjectPoolEvents, public ::GlobalNamespace::ICallBack*/ {
      public:
      using declaring_type = TickSystem_1<T>*;
      static constexpr std::string_view NESTED_NAME = "TickCallbackWrapper`1";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public U target
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      U target;
      public:
      // Creating interface conversion operator: operator ::GlobalNamespace::ObjectPoolEvents
      operator ::GlobalNamespace::ObjectPoolEvents() noexcept {
        return *reinterpret_cast<::GlobalNamespace::ObjectPoolEvents*>(this);
      }
      // Creating interface conversion operator: operator ::GlobalNamespace::ICallBack
      operator ::GlobalNamespace::ICallBack() noexcept {
        return *reinterpret_cast<::GlobalNamespace::ICallBack*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public U target
      [[deprecated("Use field access instead!")]] U& dyn_target() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1::dyn_target");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
        return *reinterpret_cast<U*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void CallBack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void CallBack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1::CallBack");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void OnTaken()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void OnTaken() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1::OnTaken");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void OnReturned()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void OnReturned() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1::OnReturned");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TickSystem_1<T>::TickCallbackWrapper_1<U>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapper_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TickSystem_1<T>::TickCallbackWrapper_1<U>*, creationType>()));
      }
    }; // TickSystem`1/TickCallbackWrapper`1
    // Could not write size check! Type: TickSystem`1/TickCallbackWrapper`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: TickSystem`1/TickCallbackWrapperPre
    // [TokenAttribute] Offset: FFFFFFFF
    class TickCallbackWrapperPre : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<::GlobalNamespace::ITickSystemPre*> {
      public:
      using declaring_type = TickSystem_1<T>*;
      static constexpr std::string_view NESTED_NAME = "TickCallbackWrapperPre";
      static constexpr bool IS_VALUE_TYPE = false;
      // public override System.Void CallBack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::CallBack()
      void CallBack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperPre::CallBack");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TickSystem_1<T>::TickCallbackWrapperPre* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperPre::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TickSystem_1<T>::TickCallbackWrapperPre*, creationType>()));
      }
    }; // TickSystem`1/TickCallbackWrapperPre
    // Could not write size check! Type: TickSystem`1/TickCallbackWrapperPre is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: TickSystem`1/TickCallbackWrapperTick
    // [TokenAttribute] Offset: FFFFFFFF
    class TickCallbackWrapperTick : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<::GlobalNamespace::ITickSystemTick*> {
      public:
      using declaring_type = TickSystem_1<T>*;
      static constexpr std::string_view NESTED_NAME = "TickCallbackWrapperTick";
      static constexpr bool IS_VALUE_TYPE = false;
      // public override System.Void CallBack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::CallBack()
      void CallBack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperTick::CallBack");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TickSystem_1<T>::TickCallbackWrapperTick* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperTick::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TickSystem_1<T>::TickCallbackWrapperTick*, creationType>()));
      }
    }; // TickSystem`1/TickCallbackWrapperTick
    // Could not write size check! Type: TickSystem`1/TickCallbackWrapperTick is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: TickSystem`1/TickCallbackWrapperPost
    // [TokenAttribute] Offset: FFFFFFFF
    class TickCallbackWrapperPost : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<::GlobalNamespace::ITickSystemPost*> {
      public:
      using declaring_type = TickSystem_1<T>*;
      static constexpr std::string_view NESTED_NAME = "TickCallbackWrapperPost";
      static constexpr bool IS_VALUE_TYPE = false;
      // public override System.Void CallBack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::CallBack()
      void CallBack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperPost::CallBack");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapper_1<U>*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: TickSystem`1/TickCallbackWrapper`1
      // Base method: System.Void TickCallbackWrapper_1::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TickSystem_1<T>::TickCallbackWrapperPost* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::TickCallbackWrapperPost::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TickSystem_1<T>::TickCallbackWrapperPost*, creationType>()));
      }
    }; // TickSystem`1/TickCallbackWrapperPost
    // Could not write size check! Type: TickSystem`1/TickCallbackWrapperPost is generic, or has no fields that are valid for size checks!
    // Autogenerated static field getter
    // Get static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperPre<T>> preTickWrapperPool
    static ::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* _get_preTickWrapperPool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_preTickWrapperPool");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickWrapperPool"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperPre<T>> preTickWrapperPool
    static void _set_preTickWrapperPool(::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_preTickWrapperPool");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickWrapperPool", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperPre<T>> preTickCallbacks
    static ::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* _get_preTickCallbacks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_preTickCallbacks");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickCallbacks"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperPre<T>> preTickCallbacks
    static void _set_preTickCallbacks(::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_preTickCallbacks");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickCallbacks", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemPre,TickSystem`1/TickCallbackWrapperPre<T>> preTickWrapperTable
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPre*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* _get_preTickWrapperTable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_preTickWrapperTable");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPre*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickWrapperTable")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemPre,TickSystem`1/TickCallbackWrapperPre<T>> preTickWrapperTable
    static void _set_preTickWrapperTable(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPre*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPre*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_preTickWrapperTable");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "preTickWrapperTable", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperTick<T>> tickWrapperPool
    static ::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* _get_tickWrapperPool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_tickWrapperPool");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickWrapperPool"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperTick<T>> tickWrapperPool
    static void _set_tickWrapperPool(::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_tickWrapperPool");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickWrapperPool", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperTick<T>> tickCallbacks
    static ::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* _get_tickCallbacks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_tickCallbacks");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickCallbacks"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperTick<T>> tickCallbacks
    static void _set_tickCallbacks(::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_tickCallbacks");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickCallbacks", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemTick,TickSystem`1/TickCallbackWrapperTick<T>> tickWrapperTable
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemTick*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* _get_tickWrapperTable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_tickWrapperTable");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemTick*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickWrapperTable")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemTick,TickSystem`1/TickCallbackWrapperTick<T>> tickWrapperTable
    static void _set_tickWrapperTable(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemTick*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperTick*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_tickWrapperTable");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "tickWrapperTable", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperPost<T>> postTickWrapperPool
    static ::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* _get_postTickWrapperPool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_postTickWrapperPool");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickWrapperPool"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly ObjectPool`1<TickSystem`1/TickCallbackWrapperPost<T>> postTickWrapperPool
    static void _set_postTickWrapperPool(::GlobalNamespace::ObjectPool_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_postTickWrapperPool");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickWrapperPool", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperPost<T>> postTickCallbacks
    static ::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* _get_postTickCallbacks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_postTickCallbacks");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickCallbacks"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly CallbackContainer`1<TickSystem`1/TickCallbackWrapperPost<T>> postTickCallbacks
    static void _set_postTickCallbacks(::GlobalNamespace::CallbackContainer_1<typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_postTickCallbacks");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickCallbacks", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemPost,TickSystem`1/TickCallbackWrapperPost<T>> postTickWrapperTable
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPost*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* _get_postTickWrapperTable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_get_postTickWrapperTable");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPost*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickWrapperTable")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<ITickSystemPost,TickSystem`1/TickCallbackWrapperPost<T>> postTickWrapperTable
    static void _set_postTickWrapperTable(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ITickSystemPost*, typename ::GlobalNamespace::TickSystem_1<T>::TickCallbackWrapperPost*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::_set_postTickWrapperTable");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "postTickWrapperTable", value));
    }
    // private System.Void Awake()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Awake() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::Awake");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void Update()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Update() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::Update");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void LateUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LateUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::LateUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Void OnEnterPlay()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void OnEnterPlay() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::OnEnterPlay");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "OnEnterPlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static public System.Void AddPreTickCallback(ITickSystemPre callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void AddPreTickCallback(::GlobalNamespace::ITickSystemPre* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::AddPreTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "AddPreTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void AddTickCallback(ITickSystemTick callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void AddTickCallback(::GlobalNamespace::ITickSystemTick* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::AddTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "AddTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void AddPostTickCallback(ITickSystemPost callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void AddPostTickCallback(::GlobalNamespace::ITickSystemPost* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::AddPostTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "AddPostTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void AddTickSystemCallBack(ITickSystem callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void AddTickSystemCallBack(::GlobalNamespace::ITickSystem* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::AddTickSystemCallBack");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "AddTickSystemCallBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void AddCallbackTarget(System.Object target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void AddCallbackTarget(::Il2CppObject* target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::AddCallbackTarget");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "AddCallbackTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
    }
    // static public System.Void RemovePreTickCallback(ITickSystemPre callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void RemovePreTickCallback(::GlobalNamespace::ITickSystemPre* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::RemovePreTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "RemovePreTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void RemoveTickCallback(ITickSystemTick callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void RemoveTickCallback(::GlobalNamespace::ITickSystemTick* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::RemoveTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "RemoveTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void RemovePostTickCallback(ITickSystemPost callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void RemovePostTickCallback(::GlobalNamespace::ITickSystemPost* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::RemovePostTickCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "RemovePostTickCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void RemoveTickSystemCallback(ITickSystem callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void RemoveTickSystemCallback(::GlobalNamespace::ITickSystem* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::RemoveTickSystemCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "RemoveTickSystemCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callback);
    }
    // static public System.Void RemoveCallbackTarget(System.Object target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void RemoveCallbackTarget(::Il2CppObject* target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::RemoveCallbackTarget");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TickSystem_1<T>*>::get(), "RemoveCallbackTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TickSystem_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TickSystem_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TickSystem_1<T>*, creationType>()));
    }
  }; // TickSystem`1
  // Could not write size check! Type: TickSystem`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
