// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LimiterType
  class LimiterType;
  // Forward declaring type: CooldownType
  class CooldownType;
  // Forward declaring type: CallLimitType`1<T>
  template<typename T>
  class CallLimitType_1;
  // Forward declaring type: CallLimiter
  class CallLimiter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FXSystemSettings
  class FXSystemSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FXSystemSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FXSystemSettings*, "", "FXSystemSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: FXSystemSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class FXSystemSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private LimiterType[] callLimits
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::LimiterType*> callLimits;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LimiterType*>) == 0x8);
    // private CooldownType[] CallLimitsCooldown
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::CooldownType*> CallLimitsCooldown;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::CooldownType*>) == 0x8);
    // public System.Boolean forLocalRig
    // Size: 0x1
    // Offset: 0x28
    bool forLocalRig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forLocalRig and: callSettings
    char __padding2[0x7] = {};
    // public CallLimitType`1<CallLimiter>[] callSettings
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*> callSettings;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private LimiterType[] callLimits
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LimiterType*>& dyn_callLimits();
    // Get instance field reference: private CooldownType[] CallLimitsCooldown
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CooldownType*>& dyn_CallLimitsCooldown();
    // Get instance field reference: public System.Boolean forLocalRig
    [[deprecated("Use field access instead!")]] bool& dyn_forLocalRig();
    // Get instance field reference: public CallLimitType`1<CallLimiter>[] callSettings
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*>& dyn_callSettings();
    // public System.Void Awake()
    // Offset: 0x2765AFC
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x2765DEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FXSystemSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FXSystemSettings*, creationType>()));
    }
  }; // FXSystemSettings
  #pragma pack(pop)
  static check_size<sizeof(FXSystemSettings), 48 + sizeof(::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*>)> __GlobalNamespace_FXSystemSettingsSizeCheck;
  static_assert(sizeof(FXSystemSettings) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FXSystemSettings::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FXSystemSettings::*)()>(&GlobalNamespace::FXSystemSettings::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FXSystemSettings*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FXSystemSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
