// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/RawButton
#include "GlobalNamespace/OVRInput_RawButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BouncingBallMgr
  class BouncingBallMgr;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BouncingBallMgr);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BouncingBallMgr*, "", "BouncingBallMgr");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: BouncingBallMgr
  // [TokenAttribute] Offset: FFFFFFFF
  class BouncingBallMgr : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform trackingspace
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* trackingspace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject rightControllerPivot
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* rightControllerPivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OVRInput/RawButton actionBtn
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRInput::RawButton actionBtn;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawButton) == 0x4);
    // Padding between fields: actionBtn and: ball
    char __padding2[0x4] = {};
    // private UnityEngine.GameObject ball
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* ball;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject currentBall
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* currentBall;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean ballGrabbed
    // Size: 0x1
    // Offset: 0x48
    bool ballGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform trackingspace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_trackingspace();
    // Get instance field reference: private UnityEngine.GameObject rightControllerPivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightControllerPivot();
    // Get instance field reference: private OVRInput/RawButton actionBtn
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& dyn_actionBtn();
    // Get instance field reference: private UnityEngine.GameObject ball
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ball();
    // Get instance field reference: private UnityEngine.GameObject currentBall
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_currentBall();
    // Get instance field reference: private System.Boolean ballGrabbed
    [[deprecated("Use field access instead!")]] bool& dyn_ballGrabbed();
    // private System.Void Update()
    // Offset: 0x293D4E0
    void Update();
    // public System.Void .ctor()
    // Offset: 0x293D7F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BouncingBallMgr* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BouncingBallMgr::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BouncingBallMgr*, creationType>()));
    }
  }; // BouncingBallMgr
  #pragma pack(pop)
  static check_size<sizeof(BouncingBallMgr), 72 + sizeof(bool)> __GlobalNamespace_BouncingBallMgrSizeCheck;
  static_assert(sizeof(BouncingBallMgr) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BouncingBallMgr::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BouncingBallMgr::*)()>(&GlobalNamespace::BouncingBallMgr::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BouncingBallMgr*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BouncingBallMgr::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
