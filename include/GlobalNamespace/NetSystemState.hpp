// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetSystemState
  struct NetSystemState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetSystemState, "", "NetSystemState");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: NetSystemState
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetSystemState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetSystemState
    constexpr NetSystemState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public NetSystemState Initialization
    static constexpr const int Initialization = 0;
    // Get static field: static public NetSystemState Initialization
    static ::GlobalNamespace::NetSystemState _get_Initialization();
    // Set static field: static public NetSystemState Initialization
    static void _set_Initialization(::GlobalNamespace::NetSystemState value);
    // static field const value: static public NetSystemState PingRecon
    static constexpr const int PingRecon = 1;
    // Get static field: static public NetSystemState PingRecon
    static ::GlobalNamespace::NetSystemState _get_PingRecon();
    // Set static field: static public NetSystemState PingRecon
    static void _set_PingRecon(::GlobalNamespace::NetSystemState value);
    // static field const value: static public NetSystemState Idle
    static constexpr const int Idle = 2;
    // Get static field: static public NetSystemState Idle
    static ::GlobalNamespace::NetSystemState _get_Idle();
    // Set static field: static public NetSystemState Idle
    static void _set_Idle(::GlobalNamespace::NetSystemState value);
    // static field const value: static public NetSystemState Connecting
    static constexpr const int Connecting = 3;
    // Get static field: static public NetSystemState Connecting
    static ::GlobalNamespace::NetSystemState _get_Connecting();
    // Set static field: static public NetSystemState Connecting
    static void _set_Connecting(::GlobalNamespace::NetSystemState value);
    // static field const value: static public NetSystemState InGame
    static constexpr const int InGame = 4;
    // Get static field: static public NetSystemState InGame
    static ::GlobalNamespace::NetSystemState _get_InGame();
    // Set static field: static public NetSystemState InGame
    static void _set_InGame(::GlobalNamespace::NetSystemState value);
    // static field const value: static public NetSystemState Disconnecting
    static constexpr const int Disconnecting = 5;
    // Get static field: static public NetSystemState Disconnecting
    static ::GlobalNamespace::NetSystemState _get_Disconnecting();
    // Set static field: static public NetSystemState Disconnecting
    static void _set_Disconnecting(::GlobalNamespace::NetSystemState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // NetSystemState
  #pragma pack(pop)
  static check_size<sizeof(NetSystemState), 0 + sizeof(int)> __GlobalNamespace_NetSystemStateSizeCheck;
  static_assert(sizeof(NetSystemState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
