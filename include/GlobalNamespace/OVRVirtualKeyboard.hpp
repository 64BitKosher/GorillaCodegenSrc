// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRGLTFScene
#include "GlobalNamespace/OVRGLTFScene.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: InputField
  class InputField;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRHand
  class OVRHand;
  // Skipping declaration: KeyboardPosition because it is already included!
  // Forward declaring type: OVRPose
  struct OVRPose;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: OVRPhysicsRaycaster
  class OVRPhysicsRaycaster;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRVirtualKeyboard
  class OVRVirtualKeyboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRVirtualKeyboard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRVirtualKeyboard*, "", "OVRVirtualKeyboard");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x168
  #pragma pack(push, 1)
  // Autogenerated type: OVRVirtualKeyboard
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRVirtualKeyboard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition
    struct KeyboardPosition;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::InteractorRootTransformOverride
    class InteractorRootTransformOverride;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::InputSource
    struct InputSource;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::IInputSource
    class IInputSource;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::BaseInputSource
    class BaseInputSource;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::ControllerInputSource
    class ControllerInputSource;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::HandInputSource
    class HandInputSource;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener
    class KeyboardEventListener;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::CommitTextUnityEvent
    class CommitTextUnityEvent;
    // Nested type: ::GlobalNamespace::OVRVirtualKeyboard::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRVirtualKeyboard/KeyboardPosition
    // [TokenAttribute] Offset: FFFFFFFF
    struct KeyboardPosition/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: KeyboardPosition
      constexpr KeyboardPosition(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRVirtualKeyboard/KeyboardPosition Far
      static constexpr const int Far = 0;
      // Get static field: static public OVRVirtualKeyboard/KeyboardPosition Far
      static ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition _get_Far();
      // Set static field: static public OVRVirtualKeyboard/KeyboardPosition Far
      static void _set_Far(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition value);
      // static field const value: static public OVRVirtualKeyboard/KeyboardPosition Near
      static constexpr const int Near = 1;
      // Get static field: static public OVRVirtualKeyboard/KeyboardPosition Near
      static ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition _get_Near();
      // Set static field: static public OVRVirtualKeyboard/KeyboardPosition Near
      static void _set_Near(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition value);
      // static field const value: static public OVRVirtualKeyboard/KeyboardPosition Direct
      static constexpr const int Direct = 1;
      // Get static field: static public OVRVirtualKeyboard/KeyboardPosition Direct
      static ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition _get_Direct();
      // Set static field: static public OVRVirtualKeyboard/KeyboardPosition Direct
      static void _set_Direct(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition value);
      // static field const value: static public OVRVirtualKeyboard/KeyboardPosition Custom
      static constexpr const int Custom = 2;
      // Get static field: static public OVRVirtualKeyboard/KeyboardPosition Custom
      static ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition _get_Custom();
      // Set static field: static public OVRVirtualKeyboard/KeyboardPosition Custom
      static void _set_Custom(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRVirtualKeyboard/KeyboardPosition
    #pragma pack(pop)
    static check_size<sizeof(OVRVirtualKeyboard::KeyboardPosition), 0 + sizeof(int)> __GlobalNamespace_OVRVirtualKeyboard_KeyboardPositionSizeCheck;
    static_assert(sizeof(OVRVirtualKeyboard::KeyboardPosition) == 0x4);
    public:
    // private System.Action`1<System.String> CommitText
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::StringW>* CommitText;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action Backspace
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* Backspace;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action Enter
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* Enter;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action KeyboardShown
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* KeyboardShown;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action KeyboardHidden
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* KeyboardHidden;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Collider <Collider>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Collider* Collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private OVRVirtualKeyboard/KeyboardPosition InitialPosition
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition InitialPosition;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition) == 0x4);
    // Padding between fields: InitialPosition and: textCommitField
    char __padding6[0x4] = {};
    // private UnityEngine.UI.InputField textCommitField
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::InputField* textCommitField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::InputField*) == 0x8);
    // public UnityEngine.Transform leftControllerRootTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* leftControllerRootTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftControllerDirectTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* leftControllerDirectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightControllerRootTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* rightControllerRootTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightControllerDirectTransform
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* rightControllerDirectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean controllerDirectInteraction
    // Size: 0x1
    // Offset: 0x80
    bool controllerDirectInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean controllerRayInteraction
    // Size: 0x1
    // Offset: 0x81
    bool controllerRayInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: controllerRayInteraction and: controllerRaycaster
    char __padding13[0x6] = {};
    // public UnityEngine.EventSystems.OVRPhysicsRaycaster controllerRaycaster
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::EventSystems::OVRPhysicsRaycaster* controllerRaycaster;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::OVRPhysicsRaycaster*) == 0x8);
    // public OVRHand handLeft
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::OVRHand* handLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // public OVRHand handRight
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::OVRHand* handRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // public System.Boolean handDirectInteraction
    // Size: 0x1
    // Offset: 0xA0
    bool handDirectInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean handRayInteraction
    // Size: 0x1
    // Offset: 0xA1
    bool handRayInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: handRayInteraction and: handRaycaster
    char __padding18[0x6] = {};
    // public UnityEngine.EventSystems.OVRPhysicsRaycaster handRaycaster
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::EventSystems::OVRPhysicsRaycaster* handRaycaster;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::OVRPhysicsRaycaster*) == 0x8);
    // public UnityEngine.Shader keyboardModelShader
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Shader* keyboardModelShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader keyboardModelAlphaBlendShader
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Shader* keyboardModelAlphaBlendShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public System.Boolean InputEnabled
    // Size: 0x1
    // Offset: 0xC0
    bool InputEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InputEnabled and: CommitTextEvent
    char __padding22[0x7] = {};
    // public OVRVirtualKeyboard/CommitTextUnityEvent CommitTextEvent
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::OVRVirtualKeyboard::CommitTextUnityEvent* CommitTextEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard::CommitTextUnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent BackspaceEvent
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Events::UnityEvent* BackspaceEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent EnterEvent
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Events::UnityEvent* EnterEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent KeyboardShownEvent
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Events::UnityEvent* KeyboardShownEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent KeyboardHiddenEvent
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Events::UnityEvent* KeyboardHiddenEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Boolean isKeyboardCreated_
    // Size: 0x1
    // Offset: 0xF0
    bool isKeyboardCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isKeyboardCreated and: keyboardSpace
    char __padding28[0x7] = {};
    // private System.UInt64 keyboardSpace_
    // Size: 0x8
    // Offset: 0xF8
    uint64_t keyboardSpace;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.List`1<UnityEngine.Material>> virtualKeyboardTextures_
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*>* virtualKeyboardTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*>*) == 0x8);
    // private OVRGLTFScene virtualKeyboardScene_
    // Size: 0x28
    // Offset: 0x108
    ::GlobalNamespace::OVRGLTFScene virtualKeyboardScene;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRGLTFScene) == 0x28);
    // private System.UInt64 virtualKeyboardModelKey_
    // Size: 0x8
    // Offset: 0x130
    uint64_t virtualKeyboardModelKey;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Boolean modelInitialized_
    // Size: 0x1
    // Offset: 0x138
    bool modelInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean modelAvailable_
    // Size: 0x1
    // Offset: 0x139
    bool modelAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean keyboardVisible_
    // Size: 0x1
    // Offset: 0x13A
    bool keyboardVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keyboardVisible and: interactorRootTransformOverride
    char __padding35[0x5] = {};
    // private OVRVirtualKeyboard/InteractorRootTransformOverride _interactorRootTransformOverride
    // Size: 0x8
    // Offset: 0x140
    ::GlobalNamespace::OVRVirtualKeyboard::InteractorRootTransformOverride* interactorRootTransformOverride;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard::InteractorRootTransformOverride*) == 0x8);
    // private System.Collections.Generic.List`1<OVRVirtualKeyboard/IInputSource> _inputSources
    // Size: 0x8
    // Offset: 0x148
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRVirtualKeyboard::IInputSource*>* inputSources;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OVRVirtualKeyboard::IInputSource*>*) == 0x8);
    // private System.Boolean ignoreTextCommmitFieldOnValueChanged_
    // Size: 0x1
    // Offset: 0x150
    bool ignoreTextCommmitFieldOnValueChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreTextCommmitFieldOnValueChanged and: runtimeInputField
    char __padding38[0x7] = {};
    // private UnityEngine.UI.InputField runtimeInputField_
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::UI::InputField* runtimeInputField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::InputField*) == 0x8);
    // private OVRVirtualKeyboard/KeyboardEventListener keyboardEventListener_
    // Size: 0x8
    // Offset: 0x160
    ::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener* keyboardEventListener;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener*) == 0x8);
    public:
    // Get static field: static private OVRVirtualKeyboard singleton_
    static ::GlobalNamespace::OVRVirtualKeyboard* _get_singleton_();
    // Set static field: static private OVRVirtualKeyboard singleton_
    static void _set_singleton_(::GlobalNamespace::OVRVirtualKeyboard* value);
    // Get instance field reference: private System.Action`1<System.String> CommitText
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_CommitText();
    // Get instance field reference: private System.Action Backspace
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_Backspace();
    // Get instance field reference: private System.Action Enter
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_Enter();
    // Get instance field reference: private System.Action KeyboardShown
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_KeyboardShown();
    // Get instance field reference: private System.Action KeyboardHidden
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_KeyboardHidden();
    // Get instance field reference: private UnityEngine.Collider <Collider>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_$Collider$k__BackingField();
    // Get instance field reference: private OVRVirtualKeyboard/KeyboardPosition InitialPosition
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition& dyn_InitialPosition();
    // Get instance field reference: private UnityEngine.UI.InputField textCommitField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::InputField*& dyn_textCommitField();
    // Get instance field reference: public UnityEngine.Transform leftControllerRootTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftControllerRootTransform();
    // Get instance field reference: public UnityEngine.Transform leftControllerDirectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftControllerDirectTransform();
    // Get instance field reference: public UnityEngine.Transform rightControllerRootTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightControllerRootTransform();
    // Get instance field reference: public UnityEngine.Transform rightControllerDirectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightControllerDirectTransform();
    // Get instance field reference: public System.Boolean controllerDirectInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_controllerDirectInteraction();
    // Get instance field reference: public System.Boolean controllerRayInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_controllerRayInteraction();
    // Get instance field reference: public UnityEngine.EventSystems.OVRPhysicsRaycaster controllerRaycaster
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::OVRPhysicsRaycaster*& dyn_controllerRaycaster();
    // Get instance field reference: public OVRHand handLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn_handLeft();
    // Get instance field reference: public OVRHand handRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn_handRight();
    // Get instance field reference: public System.Boolean handDirectInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_handDirectInteraction();
    // Get instance field reference: public System.Boolean handRayInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_handRayInteraction();
    // Get instance field reference: public UnityEngine.EventSystems.OVRPhysicsRaycaster handRaycaster
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::OVRPhysicsRaycaster*& dyn_handRaycaster();
    // Get instance field reference: public UnityEngine.Shader keyboardModelShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_keyboardModelShader();
    // Get instance field reference: public UnityEngine.Shader keyboardModelAlphaBlendShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_keyboardModelAlphaBlendShader();
    // Get instance field reference: public System.Boolean InputEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_InputEnabled();
    // Get instance field reference: public OVRVirtualKeyboard/CommitTextUnityEvent CommitTextEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard::CommitTextUnityEvent*& dyn_CommitTextEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent BackspaceEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_BackspaceEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent EnterEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_EnterEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent KeyboardShownEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_KeyboardShownEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent KeyboardHiddenEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_KeyboardHiddenEvent();
    // Get instance field reference: private System.Boolean isKeyboardCreated_
    [[deprecated("Use field access instead!")]] bool& dyn_isKeyboardCreated_();
    // Get instance field reference: private System.UInt64 keyboardSpace_
    [[deprecated("Use field access instead!")]] uint64_t& dyn_keyboardSpace_();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt64,System.Collections.Generic.List`1<UnityEngine.Material>> virtualKeyboardTextures_
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint64_t, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*>*& dyn_virtualKeyboardTextures_();
    // Get instance field reference: private OVRGLTFScene virtualKeyboardScene_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRGLTFScene& dyn_virtualKeyboardScene_();
    // Get instance field reference: private System.UInt64 virtualKeyboardModelKey_
    [[deprecated("Use field access instead!")]] uint64_t& dyn_virtualKeyboardModelKey_();
    // Get instance field reference: private System.Boolean modelInitialized_
    [[deprecated("Use field access instead!")]] bool& dyn_modelInitialized_();
    // Get instance field reference: private System.Boolean modelAvailable_
    [[deprecated("Use field access instead!")]] bool& dyn_modelAvailable_();
    // Get instance field reference: private System.Boolean keyboardVisible_
    [[deprecated("Use field access instead!")]] bool& dyn_keyboardVisible_();
    // Get instance field reference: private OVRVirtualKeyboard/InteractorRootTransformOverride _interactorRootTransformOverride
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard::InteractorRootTransformOverride*& dyn__interactorRootTransformOverride();
    // Get instance field reference: private System.Collections.Generic.List`1<OVRVirtualKeyboard/IInputSource> _inputSources
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OVRVirtualKeyboard::IInputSource*>*& dyn__inputSources();
    // Get instance field reference: private System.Boolean ignoreTextCommmitFieldOnValueChanged_
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreTextCommmitFieldOnValueChanged_();
    // Get instance field reference: private UnityEngine.UI.InputField runtimeInputField_
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::InputField*& dyn_runtimeInputField_();
    // Get instance field reference: private OVRVirtualKeyboard/KeyboardEventListener keyboardEventListener_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener*& dyn_keyboardEventListener_();
    // public System.Void add_CommitText(System.Action`1<System.String> value)
    // Offset: 0x4936820
    void add_CommitText(::System::Action_1<::StringW>* value);
    // public System.Void remove_CommitText(System.Action`1<System.String> value)
    // Offset: 0x49368D0
    void remove_CommitText(::System::Action_1<::StringW>* value);
    // public System.Void add_Backspace(System.Action value)
    // Offset: 0x4936980
    void add_Backspace(::System::Action* value);
    // public System.Void remove_Backspace(System.Action value)
    // Offset: 0x4936A1C
    void remove_Backspace(::System::Action* value);
    // public System.Void add_Enter(System.Action value)
    // Offset: 0x4936AB8
    void add_Enter(::System::Action* value);
    // public System.Void remove_Enter(System.Action value)
    // Offset: 0x4936B54
    void remove_Enter(::System::Action* value);
    // public System.Void add_KeyboardShown(System.Action value)
    // Offset: 0x4936BF0
    void add_KeyboardShown(::System::Action* value);
    // public System.Void remove_KeyboardShown(System.Action value)
    // Offset: 0x4936C8C
    void remove_KeyboardShown(::System::Action* value);
    // public System.Void add_KeyboardHidden(System.Action value)
    // Offset: 0x4936D28
    void add_KeyboardHidden(::System::Action* value);
    // public System.Void remove_KeyboardHidden(System.Action value)
    // Offset: 0x4936DC4
    void remove_KeyboardHidden(::System::Action* value);
    // public UnityEngine.Collider get_Collider()
    // Offset: 0x4936E60
    ::UnityEngine::Collider* get_Collider();
    // private System.Void set_Collider(UnityEngine.Collider value)
    // Offset: 0x4936E68
    void set_Collider(::UnityEngine::Collider* value);
    // public UnityEngine.UI.InputField get_TextCommitField()
    // Offset: 0x4936E70
    ::UnityEngine::UI::InputField* get_TextCommitField();
    // public System.Void set_TextCommitField(UnityEngine.UI.InputField value)
    // Offset: 0x4936E78
    void set_TextCommitField(::UnityEngine::UI::InputField* value);
    // private System.Void Awake()
    // Offset: 0x4937110
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x4937738
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x4937BFC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4937F08
    void OnDisable();
    // public System.Void UseSuggestedLocation(OVRVirtualKeyboard/KeyboardPosition position)
    // Offset: 0x4937F20
    void UseSuggestedLocation(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition position);
    // public System.Void SendVirtualKeyboardRayInput(UnityEngine.Transform inputTransform, OVRVirtualKeyboard/InputSource source, System.Boolean isPressed, System.Boolean useRaycastMask)
    // Offset: 0x49384C0
    void SendVirtualKeyboardRayInput(::UnityEngine::Transform* inputTransform, ::GlobalNamespace::OVRVirtualKeyboard::InputSource source, bool isPressed, bool useRaycastMask);
    // public System.Void SendVirtualKeyboardDirectInput(UnityEngine.Vector3 position, OVRVirtualKeyboard/InputSource source, System.Boolean isPressed, UnityEngine.Transform interactorRootTransform)
    // Offset: 0x4938A70
    void SendVirtualKeyboardDirectInput(::UnityEngine::Vector3 position, ::GlobalNamespace::OVRVirtualKeyboard::InputSource source, bool isPressed, ::UnityEngine::Transform* interactorRootTransform);
    // public System.Void ChangeTextContext(System.String textContext)
    // Offset: 0x4938B38
    void ChangeTextContext(::StringW textContext);
    // private System.Boolean LoadRuntimeVirtualKeyboardMesh()
    // Offset: 0x4938C18
    bool LoadRuntimeVirtualKeyboardMesh();
    // static private System.Void ApplyHideFlags(UnityEngine.Transform t)
    // Offset: 0x4939028
    static void ApplyHideFlags(::UnityEngine::Transform* t);
    // private System.Void PopulateCollision()
    // Offset: 0x49390A4
    void PopulateCollision();
    // private System.Void ShowKeyboard()
    // Offset: 0x4937C00
    void ShowKeyboard();
    // private System.Void SetKeyboardVisibility(System.Boolean visible)
    // Offset: 0x4939350
    void SetKeyboardVisibility(bool visible);
    // private System.Void HideKeyboard()
    // Offset: 0x4937F0C
    void HideKeyboard();
    // private System.Void DestroyKeyboard()
    // Offset: 0x4937A90
    void DestroyKeyboard();
    // private System.Single MaxElement(UnityEngine.Vector3 vec)
    // Offset: 0x49394A4
    float MaxElement(::UnityEngine::Vector3 vec);
    // private OVRPlugin/VirtualKeyboardLocationInfo ComputeLocation(UnityEngine.Transform transform)
    // Offset: 0x4938144
    ::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationInfo ComputeLocation(::UnityEngine::Transform* transform);
    // private System.Void Update()
    // Offset: 0x49394B8
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x493A1B0
    void LateUpdate();
    // private System.Void SendVirtualKeyboardInput(OVRPlugin/VirtualKeyboardInputSource inputSource, OVRPose pose, System.Boolean isPressed, UnityEngine.Transform interactorRootTransform)
    // Offset: 0x4938878
    void SendVirtualKeyboardInput(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource inputSource, ::GlobalNamespace::OVRPose pose, bool isPressed, ::UnityEngine::Transform* interactorRootTransform);
    // private System.Void UpdateInputs()
    // Offset: 0x49394E8
    void UpdateInputs();
    // private System.Void SyncKeyboardLocation()
    // Offset: 0x49381FC
    void SyncKeyboardLocation();
    // private System.Void UpdateAnimationState()
    // Offset: 0x4939A38
    void UpdateAnimationState();
    // private System.Void OnCommitText(System.String text)
    // Offset: 0x493A7E0
    void OnCommitText(::StringW text);
    // private System.Void OnTextCommitFieldChange(System.String textContext)
    // Offset: 0x493A9E0
    void OnTextCommitFieldChange(::StringW textContext);
    // private System.Void ChangeTextContextInternal(System.String textContext)
    // Offset: 0x4937058
    void ChangeTextContextInternal(::StringW textContext);
    // private System.Void OnBackspace()
    // Offset: 0x493A9F0
    void OnBackspace();
    // private System.Void OnEnter()
    // Offset: 0x493AC28
    void OnEnter();
    // private System.Void OnKeyboardShown()
    // Offset: 0x493AD00
    void OnKeyboardShown();
    // private System.Void OnKeyboardHidden()
    // Offset: 0x493AD18
    void OnKeyboardHidden();
    // private System.Void UpdateVisibleState()
    // Offset: 0x49392F8
    void UpdateVisibleState();
    // public System.Void .ctor()
    // Offset: 0x493AD2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRVirtualKeyboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRVirtualKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRVirtualKeyboard*, creationType>()));
    }
    // private UnityEngine.Texture2D <LoadRuntimeVirtualKeyboardMesh>b__75_1(System.String rawUri, UnityEngine.Material mat)
    // Offset: 0x493AFD8
    ::UnityEngine::Texture2D* $LoadRuntimeVirtualKeyboardMesh$b__75_1(::StringW rawUri, ::UnityEngine::Material* mat);
  }; // OVRVirtualKeyboard
  #pragma pack(pop)
  static check_size<sizeof(OVRVirtualKeyboard), 352 + sizeof(::GlobalNamespace::OVRVirtualKeyboard::KeyboardEventListener*)> __GlobalNamespace_OVRVirtualKeyboardSizeCheck;
  static_assert(sizeof(OVRVirtualKeyboard) == 0x168);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition, "", "OVRVirtualKeyboard/KeyboardPosition");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::add_CommitText
// Il2CppName: add_CommitText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::OVRVirtualKeyboard::add_CommitText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "add_CommitText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::remove_CommitText
// Il2CppName: remove_CommitText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::OVRVirtualKeyboard::remove_CommitText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "remove_CommitText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::add_Backspace
// Il2CppName: add_Backspace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::add_Backspace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "add_Backspace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::remove_Backspace
// Il2CppName: remove_Backspace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::remove_Backspace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "remove_Backspace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::add_Enter
// Il2CppName: add_Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::add_Enter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "add_Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::remove_Enter
// Il2CppName: remove_Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::remove_Enter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "remove_Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::add_KeyboardShown
// Il2CppName: add_KeyboardShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::add_KeyboardShown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "add_KeyboardShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::remove_KeyboardShown
// Il2CppName: remove_KeyboardShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::remove_KeyboardShown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "remove_KeyboardShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::add_KeyboardHidden
// Il2CppName: add_KeyboardHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::add_KeyboardHidden)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "add_KeyboardHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::remove_KeyboardHidden
// Il2CppName: remove_KeyboardHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::System::Action*)>(&GlobalNamespace::OVRVirtualKeyboard::remove_KeyboardHidden)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "remove_KeyboardHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::get_Collider
// Il2CppName: get_Collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::get_Collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "get_Collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::set_Collider
// Il2CppName: set_Collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::Collider*)>(&GlobalNamespace::OVRVirtualKeyboard::set_Collider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "set_Collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::get_TextCommitField
// Il2CppName: get_TextCommitField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::InputField* (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::get_TextCommitField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "get_TextCommitField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::set_TextCommitField
// Il2CppName: set_TextCommitField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::UI::InputField*)>(&GlobalNamespace::OVRVirtualKeyboard::set_TextCommitField)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "InputField")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "set_TextCommitField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::UseSuggestedLocation
// Il2CppName: UseSuggestedLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::GlobalNamespace::OVRVirtualKeyboard::KeyboardPosition)>(&GlobalNamespace::OVRVirtualKeyboard::UseSuggestedLocation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("", "OVRVirtualKeyboard/KeyboardPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "UseSuggestedLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardRayInput
// Il2CppName: SendVirtualKeyboardRayInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::Transform*, ::GlobalNamespace::OVRVirtualKeyboard::InputSource, bool, bool)>(&GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardRayInput)> {
  static const MethodInfo* get() {
    static auto* inputTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("", "OVRVirtualKeyboard/InputSource")->byval_arg;
    static auto* isPressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useRaycastMask = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "SendVirtualKeyboardRayInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputTransform, source, isPressed, useRaycastMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardDirectInput
// Il2CppName: SendVirtualKeyboardDirectInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::Vector3, ::GlobalNamespace::OVRVirtualKeyboard::InputSource, bool, ::UnityEngine::Transform*)>(&GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardDirectInput)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("", "OVRVirtualKeyboard/InputSource")->byval_arg;
    static auto* isPressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* interactorRootTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "SendVirtualKeyboardDirectInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, source, isPressed, interactorRootTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::ChangeTextContext
// Il2CppName: ChangeTextContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::StringW)>(&GlobalNamespace::OVRVirtualKeyboard::ChangeTextContext)> {
  static const MethodInfo* get() {
    static auto* textContext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "ChangeTextContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textContext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::LoadRuntimeVirtualKeyboardMesh
// Il2CppName: LoadRuntimeVirtualKeyboardMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::LoadRuntimeVirtualKeyboardMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "LoadRuntimeVirtualKeyboardMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::ApplyHideFlags
// Il2CppName: ApplyHideFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRVirtualKeyboard::ApplyHideFlags)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "ApplyHideFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::PopulateCollision
// Il2CppName: PopulateCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::PopulateCollision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "PopulateCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::ShowKeyboard
// Il2CppName: ShowKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::ShowKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "ShowKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::SetKeyboardVisibility
// Il2CppName: SetKeyboardVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(bool)>(&GlobalNamespace::OVRVirtualKeyboard::SetKeyboardVisibility)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "SetKeyboardVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::HideKeyboard
// Il2CppName: HideKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::HideKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "HideKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::DestroyKeyboard
// Il2CppName: DestroyKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::DestroyKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "DestroyKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::MaxElement
// Il2CppName: MaxElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRVirtualKeyboard::MaxElement)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "MaxElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::ComputeLocation
// Il2CppName: ComputeLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::VirtualKeyboardLocationInfo (GlobalNamespace::OVRVirtualKeyboard::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OVRVirtualKeyboard::ComputeLocation)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "ComputeLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardInput
// Il2CppName: SendVirtualKeyboardInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource, ::GlobalNamespace::OVRPose, bool, ::UnityEngine::Transform*)>(&GlobalNamespace::OVRVirtualKeyboard::SendVirtualKeyboardInput)> {
  static const MethodInfo* get() {
    static auto* inputSource = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/VirtualKeyboardInputSource")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPose")->byval_arg;
    static auto* isPressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* interactorRootTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "SendVirtualKeyboardInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputSource, pose, isPressed, interactorRootTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::UpdateInputs
// Il2CppName: UpdateInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::UpdateInputs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "UpdateInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::SyncKeyboardLocation
// Il2CppName: SyncKeyboardLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::SyncKeyboardLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "SyncKeyboardLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::UpdateAnimationState
// Il2CppName: UpdateAnimationState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::UpdateAnimationState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "UpdateAnimationState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnCommitText
// Il2CppName: OnCommitText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::StringW)>(&GlobalNamespace::OVRVirtualKeyboard::OnCommitText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnCommitText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnTextCommitFieldChange
// Il2CppName: OnTextCommitFieldChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::StringW)>(&GlobalNamespace::OVRVirtualKeyboard::OnTextCommitFieldChange)> {
  static const MethodInfo* get() {
    static auto* textContext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnTextCommitFieldChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textContext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::ChangeTextContextInternal
// Il2CppName: ChangeTextContextInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)(::StringW)>(&GlobalNamespace::OVRVirtualKeyboard::ChangeTextContextInternal)> {
  static const MethodInfo* get() {
    static auto* textContext = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "ChangeTextContextInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textContext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnBackspace
// Il2CppName: OnBackspace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnBackspace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnBackspace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnEnter
// Il2CppName: OnEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnKeyboardShown
// Il2CppName: OnKeyboardShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnKeyboardShown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnKeyboardShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::OnKeyboardHidden
// Il2CppName: OnKeyboardHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::OnKeyboardHidden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "OnKeyboardHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::UpdateVisibleState
// Il2CppName: UpdateVisibleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRVirtualKeyboard::*)()>(&GlobalNamespace::OVRVirtualKeyboard::UpdateVisibleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "UpdateVisibleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRVirtualKeyboard::$LoadRuntimeVirtualKeyboardMesh$b__75_1
// Il2CppName: <LoadRuntimeVirtualKeyboardMesh>b__75_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::OVRVirtualKeyboard::*)(::StringW, ::UnityEngine::Material*)>(&GlobalNamespace::OVRVirtualKeyboard::$LoadRuntimeVirtualKeyboardMesh$b__75_1)> {
  static const MethodInfo* get() {
    static auto* rawUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRVirtualKeyboard*), "<LoadRuntimeVirtualKeyboardMesh>b__75_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawUri, mat});
  }
};
