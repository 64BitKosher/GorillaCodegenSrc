// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRKeyboard/TrackedKeyboardInfo
#include "GlobalNamespace/OVRKeyboard_TrackedKeyboardInfo.hpp"
// Including type: OVRPlugin/TrackedKeyboardQueryFlags
#include "GlobalNamespace/OVRPlugin_TrackedKeyboardQueryFlags.hpp"
// Including type: OVRTextureQualityFiltering
#include "GlobalNamespace/OVRTextureQualityFiltering.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVROverlay
  class OVROverlay;
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Forward declaring type: OVRPassthroughLayer
  class OVRPassthroughLayer;
  // Skipping declaration: TrackedKeyboardState because it is already included!
  // Skipping declaration: KeyboardPresentation because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTrackedKeyboard
  class OVRTrackedKeyboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTrackedKeyboard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboard*, "", "OVRTrackedKeyboard");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: OVRTrackedKeyboard
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTrackedKeyboard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState
    struct TrackedKeyboardState;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation
    struct KeyboardPresentation;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent
    struct TrackedKeyboardVisibilityChangedEvent;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent
    struct TrackedKeyboardSetActiveEvent;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$InitializeHandPresenceData$d__86
    class $InitializeHandPresenceData$d__86;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$Start$d__85
    class $Start$d__85;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$StartKeyboardTrackingCoroutine$d__93
    class $StartKeyboardTrackingCoroutine$d__93;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$UpdateKeyboardPose$d__95
    class $UpdateKeyboardPose$d__95;
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboard::$UpdateTrackingStateCoroutine$d__92
    class $UpdateTrackingStateCoroutine$d__92;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRTrackedKeyboard/TrackedKeyboardState
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedKeyboardState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackedKeyboardState
      constexpr TrackedKeyboardState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState Uninitialized
      static constexpr const int Uninitialized = 0;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState Uninitialized
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_Uninitialized();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState Uninitialized
      static void _set_Uninitialized(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState NoTrackableKeyboard
      static constexpr const int NoTrackableKeyboard = 1;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState NoTrackableKeyboard
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_NoTrackableKeyboard();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState NoTrackableKeyboard
      static void _set_NoTrackableKeyboard(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState Offline
      static constexpr const int Offline = 2;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState Offline
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_Offline();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState Offline
      static void _set_Offline(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState StartedNotTracked
      static constexpr const int StartedNotTracked = 3;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState StartedNotTracked
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_StartedNotTracked();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState StartedNotTracked
      static void _set_StartedNotTracked(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState Stale
      static constexpr const int Stale = 4;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState Stale
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_Stale();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState Stale
      static void _set_Stale(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState Valid
      static constexpr const int Valid = 5;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState Valid
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_Valid();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState Valid
      static void _set_Valid(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState Error
      static constexpr const int Error = 6;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState Error
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_Error();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState Error
      static void _set_Error(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // static field const value: static public OVRTrackedKeyboard/TrackedKeyboardState ErrorExtensionFailed
      static constexpr const int ErrorExtensionFailed = 7;
      // Get static field: static public OVRTrackedKeyboard/TrackedKeyboardState ErrorExtensionFailed
      static ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState _get_ErrorExtensionFailed();
      // Set static field: static public OVRTrackedKeyboard/TrackedKeyboardState ErrorExtensionFailed
      static void _set_ErrorExtensionFailed(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRTrackedKeyboard/TrackedKeyboardState
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboard::TrackedKeyboardState), 0 + sizeof(int)> __GlobalNamespace_OVRTrackedKeyboard_TrackedKeyboardStateSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboard::TrackedKeyboardState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRTrackedKeyboard/KeyboardPresentation
    // [TokenAttribute] Offset: FFFFFFFF
    struct KeyboardPresentation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: KeyboardPresentation
      constexpr KeyboardPresentation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRTrackedKeyboard/KeyboardPresentation PreferOpaque
      static constexpr const int PreferOpaque = 0;
      // Get static field: static public OVRTrackedKeyboard/KeyboardPresentation PreferOpaque
      static ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation _get_PreferOpaque();
      // Set static field: static public OVRTrackedKeyboard/KeyboardPresentation PreferOpaque
      static void _set_PreferOpaque(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation value);
      // static field const value: static public OVRTrackedKeyboard/KeyboardPresentation PreferMR
      static constexpr const int PreferMR = 1;
      // Get static field: static public OVRTrackedKeyboard/KeyboardPresentation PreferMR
      static ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation _get_PreferMR();
      // Set static field: static public OVRTrackedKeyboard/KeyboardPresentation PreferMR
      static void _set_PreferMR(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRTrackedKeyboard/KeyboardPresentation
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboard::KeyboardPresentation), 0 + sizeof(int)> __GlobalNamespace_OVRTrackedKeyboard_KeyboardPresentationSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboard::KeyboardPresentation) == 0x4);
    // Size: 0xD
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedKeyboardVisibilityChangedEvent/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.String ActiveKeyboardName
      // Size: 0x8
      // Offset: 0x0
      ::StringW ActiveKeyboardName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly OVRTrackedKeyboard/TrackedKeyboardState State
      // Size: 0x4
      // Offset: 0x8
      ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState State;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState) == 0x4);
      // public readonly System.Boolean TrackingTimeout
      // Size: 0x1
      // Offset: 0xC
      bool TrackingTimeout;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: TrackedKeyboardVisibilityChangedEvent
      constexpr TrackedKeyboardVisibilityChangedEvent(::StringW ActiveKeyboardName_ = {}, ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState State_ = {}, bool TrackingTimeout_ = {}) noexcept : ActiveKeyboardName{ActiveKeyboardName_}, State{State_}, TrackingTimeout{TrackingTimeout_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.String ActiveKeyboardName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_ActiveKeyboardName();
      // Get instance field reference: public readonly OVRTrackedKeyboard/TrackedKeyboardState State
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState& dyn_State();
      // Get instance field reference: public readonly System.Boolean TrackingTimeout
      [[deprecated("Use field access instead!")]] bool& dyn_TrackingTimeout();
      // public System.Void .ctor(System.String keyboardModel, OVRTrackedKeyboard/TrackedKeyboardState state, System.Boolean timeout)
      // Offset: 0x4931A28
      // ABORTED: conflicts with another method.  TrackedKeyboardVisibilityChangedEvent(::StringW keyboardModel, ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState state, bool timeout);
    }; // OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent), 12 + sizeof(bool)> __GlobalNamespace_OVRTrackedKeyboard_TrackedKeyboardVisibilityChangedEventSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent) == 0xD);
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedKeyboardSetActiveEvent/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.Boolean IsEnabled
      // Size: 0x1
      // Offset: 0x0
      bool IsEnabled;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: TrackedKeyboardSetActiveEvent
      constexpr TrackedKeyboardSetActiveEvent(bool IsEnabled_ = {}) noexcept : IsEnabled{IsEnabled_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator bool
      constexpr operator bool() const noexcept {
        return IsEnabled;
      }
      // Get instance field reference: public readonly System.Boolean IsEnabled
      [[deprecated("Use field access instead!")]] bool& dyn_IsEnabled();
      // public System.Void .ctor(System.Boolean isEnabled)
      // Offset: 0x4931C80
      // ABORTED: conflicts with another method.  TrackedKeyboardSetActiveEvent(bool isEnabled);
    }; // OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent
    #pragma pack(pop)
    static check_size<sizeof(OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent), 0 + sizeof(bool)> __GlobalNamespace_OVRTrackedKeyboard_TrackedKeyboardSetActiveEventSizeCheck;
    static_assert(sizeof(OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent) == 0x1);
    public:
    // private System.Single <CurrentKeyboardAngleFromUp>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float CurrentKeyboardAngleFromUp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRTrackedKeyboard/TrackedKeyboardState <TrackingState>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState TrackingState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState) == 0x4);
    // private OVRKeyboard/TrackedKeyboardInfo <ActiveKeyboardInfo>k__BackingField
    // Size: 0x24
    // Offset: 0x28
    ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo ActiveKeyboardInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo) == 0x24);
    // private OVRKeyboard/TrackedKeyboardInfo <SystemKeyboardInfo>k__BackingField
    // Size: 0x24
    // Offset: 0x50
    ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo SystemKeyboardInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo) == 0x24);
    // private System.Boolean trackingEnabled
    // Size: 0x1
    // Offset: 0x78
    bool trackingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean connectionRequired
    // Size: 0x1
    // Offset: 0x79
    bool connectionRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean showUntracked
    // Size: 0x1
    // Offset: 0x7A
    bool showUntracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private OVRPlugin/TrackedKeyboardQueryFlags keyboardQueryFlags
    // Size: 0x4
    // Offset: 0x7C
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags keyboardQueryFlags;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags) == 0x4);
    // private OVRTrackedKeyboard/KeyboardPresentation presentation
    // Size: 0x4
    // Offset: 0x80
    ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation presentation;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation) == 0x4);
    // public OVRTextureQualityFiltering textureFiltering
    // Size: 0x4
    // Offset: 0x84
    ::GlobalNamespace::OVRTextureQualityFiltering textureFiltering;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTextureQualityFiltering) == 0x4);
    // public System.Single mipmapBias
    // Size: 0x4
    // Offset: 0x88
    float mipmapBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PassthroughBorderMultiplier
    // Size: 0x4
    // Offset: 0x8C
    float PassthroughBorderMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Shader keyboardModelShader
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Shader* keyboardModelShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader keyboardModelAlphaBlendShader
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Shader* keyboardModelAlphaBlendShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private OVRPlugin/TrackedKeyboardPresentationStyles currentKeyboardPresentationStyles
    // Size: 0x4
    // Offset: 0xA0
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles currentKeyboardPresentationStyles;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles) == 0x4);
    // private OVROverlay projectedPassthroughOpaque_
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::OVROverlay* projectedPassthroughOpaque;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVROverlay*) == 0x8);
    // private UnityEngine.MeshRenderer[] activeKeyboardRenderers_
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::MeshRenderer*> activeKeyboardRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // private UnityEngine.GameObject activeKeyboardMesh_
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* activeKeyboardMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.MeshRenderer activeKeyboardMeshRenderer_
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::MeshRenderer* activeKeyboardMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.GameObject passthroughQuad_
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* passthroughQuad;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Texture2D dynamicQualityTexture_
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Texture2D* dynamicQualityTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Vector3 untrackedPosition_
    // Size: 0xC
    // Offset: 0xD8
    ::UnityEngine::Vector3 untrackedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Shader PassthroughShader
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Shader* PassthroughShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Transform projectedPassthroughRoot
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Transform* projectedPassthroughRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.MeshFilter projectedPassthroughMesh
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::MeshFilter* projectedPassthroughMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public OVRPassthroughLayer ProjectedPassthroughMR
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::OVRPassthroughLayer* ProjectedPassthroughMR;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughLayer*) == 0x8);
    // public System.Action`1<OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent> TrackedKeyboardActiveChanged
    // Size: 0x8
    // Offset: 0x108
    ::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent>* TrackedKeyboardActiveChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent>*) == 0x8);
    // public System.Action`1<OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent> TrackedKeyboardVisibilityChanged
    // Size: 0x8
    // Offset: 0x110
    ::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent>* TrackedKeyboardVisibilityChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent>*) == 0x8);
    // public UnityEngine.Transform ActiveKeyboardTransform
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Transform* ActiveKeyboardTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean HandsOverKeyboard
    // Size: 0x1
    // Offset: 0x120
    bool HandsOverKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private OVRCameraRig cameraRig_
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::OVRCameraRig* cameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private UnityEngine.Coroutine updateKeyboardRoutine_
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Coroutine* updateKeyboardRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.BoxCollider keyboardBoundingBox_
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::BoxCollider* keyboardBoundingBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private System.Single staleTimeoutCounter_
    // Size: 0x4
    // Offset: 0x140
    float staleTimeoutCounter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single reacquisitionTimer_
    // Size: 0x4
    // Offset: 0x144
    float reacquisitionTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sendFilteredPoseEventTimer_
    // Size: 0x4
    // Offset: 0x148
    float sendFilteredPoseEventTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 skippedPoseCount_
    // Size: 0x4
    // Offset: 0x14C
    int skippedPoseCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Nullable`1<UnityEngine.Vector3> EWAPosition
    // Size: 0xFFFFFFFF
    // Offset: 0x150
    ::System::Nullable_1<::UnityEngine::Vector3> EWAPosition;
    // private System.Nullable`1<UnityEngine.Quaternion> EWARotation
    // Size: 0xFFFFFFFF
    // Offset: 0x160
    ::System::Nullable_1<::UnityEngine::Quaternion> EWARotation;
    // private System.Single HAND_HEIGHT_TUNING
    // Size: 0x4
    // Offset: 0x174
    float HAND_HEIGHT_TUNING;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean UseHeuristicRollback
    // Size: 0x1
    // Offset: 0x178
    bool UseHeuristicRollback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Single underlayScaleMultX_
    static float _get_underlayScaleMultX_();
    // Set static field: static private readonly System.Single underlayScaleMultX_
    static void _set_underlayScaleMultX_(float value);
    // Get static field: static private readonly System.Single underlayScaleConstY_
    static float _get_underlayScaleConstY_();
    // Set static field: static private readonly System.Single underlayScaleConstY_
    static void _set_underlayScaleConstY_(float value);
    // Get static field: static private readonly System.Single underlayScaleMultZ_
    static float _get_underlayScaleMultZ_();
    // Set static field: static private readonly System.Single underlayScaleMultZ_
    static void _set_underlayScaleMultZ_(float value);
    // Get static field: static private readonly UnityEngine.Vector3 underlayOffset_
    static ::UnityEngine::Vector3 _get_underlayOffset_();
    // Set static field: static private readonly UnityEngine.Vector3 underlayOffset_
    static void _set_underlayOffset_(::UnityEngine::Vector3 value);
    // Get static field: static private readonly System.Single boundingBoxAboveKeyboardY_
    static float _get_boundingBoxAboveKeyboardY_();
    // Set static field: static private readonly System.Single boundingBoxAboveKeyboardY_
    static void _set_boundingBoxAboveKeyboardY_(float value);
    // Get static field: static private readonly System.Single initialHorizontalDistanceKeyboard_
    static float _get_initialHorizontalDistanceKeyboard_();
    // Set static field: static private readonly System.Single initialHorizontalDistanceKeyboard_
    static void _set_initialHorizontalDistanceKeyboard_(float value);
    // Get static field: static private readonly System.Single initialVerticalDistanceKeyboard_
    static float _get_initialVerticalDistanceKeyboard_();
    // Set static field: static private readonly System.Single initialVerticalDistanceKeyboard_
    static void _set_initialVerticalDistanceKeyboard_(float value);
    // static field const value: static private System.Single STALE_TIMEOUT
    static constexpr const float STALE_TIMEOUT = 10;
    // Get static field: static private System.Single STALE_TIMEOUT
    static float _get_STALE_TIMEOUT();
    // Set static field: static private System.Single STALE_TIMEOUT
    static void _set_STALE_TIMEOUT(float value);
    // static field const value: static private System.Single FILTERED_POSE_TIMEOUT
    static constexpr const float FILTERED_POSE_TIMEOUT = 15;
    // Get static field: static private System.Single FILTERED_POSE_TIMEOUT
    static float _get_FILTERED_POSE_TIMEOUT();
    // Set static field: static private System.Single FILTERED_POSE_TIMEOUT
    static void _set_FILTERED_POSE_TIMEOUT(float value);
    // Get instance field reference: private System.Single <CurrentKeyboardAngleFromUp>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$CurrentKeyboardAngleFromUp$k__BackingField();
    // Get instance field reference: private OVRTrackedKeyboard/TrackedKeyboardState <TrackingState>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState& dyn_$TrackingState$k__BackingField();
    // Get instance field reference: private OVRKeyboard/TrackedKeyboardInfo <ActiveKeyboardInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo& dyn_$ActiveKeyboardInfo$k__BackingField();
    // Get instance field reference: private OVRKeyboard/TrackedKeyboardInfo <SystemKeyboardInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo& dyn_$SystemKeyboardInfo$k__BackingField();
    // Get instance field reference: private System.Boolean trackingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_trackingEnabled();
    // Get instance field reference: private System.Boolean connectionRequired
    [[deprecated("Use field access instead!")]] bool& dyn_connectionRequired();
    // Get instance field reference: private System.Boolean showUntracked
    [[deprecated("Use field access instead!")]] bool& dyn_showUntracked();
    // Get instance field reference: private OVRPlugin/TrackedKeyboardQueryFlags keyboardQueryFlags
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags& dyn_keyboardQueryFlags();
    // Get instance field reference: private OVRTrackedKeyboard/KeyboardPresentation presentation
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation& dyn_presentation();
    // Get instance field reference: public OVRTextureQualityFiltering textureFiltering
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTextureQualityFiltering& dyn_textureFiltering();
    // Get instance field reference: public System.Single mipmapBias
    [[deprecated("Use field access instead!")]] float& dyn_mipmapBias();
    // Get instance field reference: public System.Single PassthroughBorderMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_PassthroughBorderMultiplier();
    // Get instance field reference: public UnityEngine.Shader keyboardModelShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_keyboardModelShader();
    // Get instance field reference: public UnityEngine.Shader keyboardModelAlphaBlendShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_keyboardModelAlphaBlendShader();
    // Get instance field reference: private OVRPlugin/TrackedKeyboardPresentationStyles currentKeyboardPresentationStyles
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackedKeyboardPresentationStyles& dyn_currentKeyboardPresentationStyles();
    // Get instance field reference: private OVROverlay projectedPassthroughOpaque_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVROverlay*& dyn_projectedPassthroughOpaque_();
    // Get instance field reference: private UnityEngine.MeshRenderer[] activeKeyboardRenderers_
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_activeKeyboardRenderers_();
    // Get instance field reference: private UnityEngine.GameObject activeKeyboardMesh_
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_activeKeyboardMesh_();
    // Get instance field reference: private UnityEngine.MeshRenderer activeKeyboardMeshRenderer_
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_activeKeyboardMeshRenderer_();
    // Get instance field reference: private UnityEngine.GameObject passthroughQuad_
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_passthroughQuad_();
    // Get instance field reference: private UnityEngine.Texture2D dynamicQualityTexture_
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_dynamicQualityTexture_();
    // Get instance field reference: private UnityEngine.Vector3 untrackedPosition_
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_untrackedPosition_();
    // Get instance field reference: public UnityEngine.Shader PassthroughShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_PassthroughShader();
    // Get instance field reference: private UnityEngine.Transform projectedPassthroughRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_projectedPassthroughRoot();
    // Get instance field reference: private UnityEngine.MeshFilter projectedPassthroughMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_projectedPassthroughMesh();
    // Get instance field reference: public OVRPassthroughLayer ProjectedPassthroughMR
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughLayer*& dyn_ProjectedPassthroughMR();
    // Get instance field reference: public System.Action`1<OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent> TrackedKeyboardActiveChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent>*& dyn_TrackedKeyboardActiveChanged();
    // Get instance field reference: public System.Action`1<OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent> TrackedKeyboardVisibilityChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent>*& dyn_TrackedKeyboardVisibilityChanged();
    // Get instance field reference: public UnityEngine.Transform ActiveKeyboardTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ActiveKeyboardTransform();
    // Get instance field reference: public System.Boolean HandsOverKeyboard
    [[deprecated("Use field access instead!")]] bool& dyn_HandsOverKeyboard();
    // Get instance field reference: private OVRCameraRig cameraRig_
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn_cameraRig_();
    // Get instance field reference: private UnityEngine.Coroutine updateKeyboardRoutine_
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_updateKeyboardRoutine_();
    // Get instance field reference: private UnityEngine.BoxCollider keyboardBoundingBox_
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_keyboardBoundingBox_();
    // Get instance field reference: private System.Single staleTimeoutCounter_
    [[deprecated("Use field access instead!")]] float& dyn_staleTimeoutCounter_();
    // Get instance field reference: private System.Single reacquisitionTimer_
    [[deprecated("Use field access instead!")]] float& dyn_reacquisitionTimer_();
    // Get instance field reference: private System.Single sendFilteredPoseEventTimer_
    [[deprecated("Use field access instead!")]] float& dyn_sendFilteredPoseEventTimer_();
    // Get instance field reference: private System.Int32 skippedPoseCount_
    [[deprecated("Use field access instead!")]] int& dyn_skippedPoseCount_();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Vector3> EWAPosition
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& dyn_EWAPosition();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Quaternion> EWARotation
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Quaternion>& dyn_EWARotation();
    // Get instance field reference: private System.Single HAND_HEIGHT_TUNING
    [[deprecated("Use field access instead!")]] float& dyn_HAND_HEIGHT_TUNING();
    // Get instance field reference: public System.Boolean UseHeuristicRollback
    [[deprecated("Use field access instead!")]] bool& dyn_UseHeuristicRollback();
    // public System.Single get_CurrentKeyboardAngleFromUp()
    // Offset: 0x492FD9C
    float get_CurrentKeyboardAngleFromUp();
    // private System.Void set_CurrentKeyboardAngleFromUp(System.Single value)
    // Offset: 0x492FDA4
    void set_CurrentKeyboardAngleFromUp(float value);
    // public OVRTrackedKeyboard/TrackedKeyboardState get_TrackingState()
    // Offset: 0x492FDAC
    ::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState get_TrackingState();
    // private System.Void set_TrackingState(OVRTrackedKeyboard/TrackedKeyboardState value)
    // Offset: 0x492FDB4
    void set_TrackingState(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState value);
    // public OVRKeyboard/TrackedKeyboardInfo get_ActiveKeyboardInfo()
    // Offset: 0x492FDBC
    ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo get_ActiveKeyboardInfo();
    // private System.Void set_ActiveKeyboardInfo(OVRKeyboard/TrackedKeyboardInfo value)
    // Offset: 0x492FDD4
    void set_ActiveKeyboardInfo(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo value);
    // public OVRKeyboard/TrackedKeyboardInfo get_SystemKeyboardInfo()
    // Offset: 0x492FDF8
    ::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo get_SystemKeyboardInfo();
    // private System.Void set_SystemKeyboardInfo(OVRKeyboard/TrackedKeyboardInfo value)
    // Offset: 0x492FE0C
    void set_SystemKeyboardInfo(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo value);
    // public OVRTrackedKeyboard/KeyboardPresentation get_Presentation()
    // Offset: 0x492FE2C
    ::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation get_Presentation();
    // public System.Void set_Presentation(OVRTrackedKeyboard/KeyboardPresentation value)
    // Offset: 0x492FE34
    void set_Presentation(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation value);
    // public System.Boolean get_TrackingEnabled()
    // Offset: 0x4930020
    bool get_TrackingEnabled();
    // public System.Void set_TrackingEnabled(System.Boolean value)
    // Offset: 0x4930028
    void set_TrackingEnabled(bool value);
    // public System.Boolean get_ConnectionRequired()
    // Offset: 0x4930034
    bool get_ConnectionRequired();
    // public System.Void set_ConnectionRequired(System.Boolean value)
    // Offset: 0x493003C
    void set_ConnectionRequired(bool value);
    // public System.Boolean get_ShowUntracked()
    // Offset: 0x4930048
    bool get_ShowUntracked();
    // public System.Void set_ShowUntracked(System.Boolean value)
    // Offset: 0x4930050
    void set_ShowUntracked(bool value);
    // public System.Boolean get_RemoteKeyboard()
    // Offset: 0x493005C
    bool get_RemoteKeyboard();
    // public System.Void set_RemoteKeyboard(System.Boolean value)
    // Offset: 0x493006C
    void set_RemoteKeyboard(bool value);
    // public OVRPlugin/TrackedKeyboardQueryFlags get_KeyboardQueryFlags()
    // Offset: 0x4930084
    ::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags get_KeyboardQueryFlags();
    // public System.Void set_KeyboardQueryFlags(OVRPlugin/TrackedKeyboardQueryFlags value)
    // Offset: 0x493008C
    void set_KeyboardQueryFlags(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags value);
    // public OVROverlay get_PassthroughOverlay()
    // Offset: 0x4930094
    ::GlobalNamespace::OVROverlay* get_PassthroughOverlay();
    // private System.Void set_PassthroughOverlay(OVROverlay value)
    // Offset: 0x493009C
    void set_PassthroughOverlay(::GlobalNamespace::OVROverlay* value);
    // private System.Collections.IEnumerator Start()
    // Offset: 0x49300A0
    ::System::Collections::IEnumerator* Start();
    // private System.Collections.IEnumerator InitializeHandPresenceData()
    // Offset: 0x4930134
    ::System::Collections::IEnumerator* InitializeHandPresenceData();
    // private System.Void RegisterPassthroughMeshToSDK()
    // Offset: 0x49301C8
    void RegisterPassthroughMeshToSDK();
    // public System.Single GetDistanceToKeyboard(UnityEngine.Vector3 point)
    // Offset: 0x4930260
    float GetDistanceToKeyboard(::UnityEngine::Vector3 point);
    // public System.Void LaunchLocalKeyboardSelectionDialog()
    // Offset: 0x493048C
    void LaunchLocalKeyboardSelectionDialog();
    // public System.Void LaunchRemoteKeyboardSelectionDialog()
    // Offset: 0x49308A4
    void LaunchRemoteKeyboardSelectionDialog();
    // private System.Boolean KeyboardTrackerIsRunning()
    // Offset: 0x49308E4
    bool KeyboardTrackerIsRunning();
    // private System.Collections.IEnumerator UpdateTrackingStateCoroutine()
    // Offset: 0x49308F8
    ::System::Collections::IEnumerator* UpdateTrackingStateCoroutine();
    // private System.Collections.IEnumerator StartKeyboardTrackingCoroutine()
    // Offset: 0x493098C
    ::System::Collections::IEnumerator* StartKeyboardTrackingCoroutine();
    // private System.Void StopKeyboardTrackingInternal()
    // Offset: 0x4930A20
    void StopKeyboardTrackingInternal();
    // private System.Collections.IEnumerator UpdateKeyboardPose()
    // Offset: 0x4930D74
    ::System::Collections::IEnumerator* UpdateKeyboardPose();
    // private System.Void UpdateSkippedPoseTimer()
    // Offset: 0x4930E08
    void UpdateSkippedPoseTimer();
    // private System.Void LoadKeyboardMesh()
    // Offset: 0x4930E50
    void LoadKeyboardMesh();
    // private System.Void UpdateTextureQuality()
    // Offset: 0x4931674
    void UpdateTextureQuality();
    // private System.Void UpdatePresentation(System.Boolean isVisible)
    // Offset: 0x492FEC8
    void UpdatePresentation(bool isVisible);
    // private UnityEngine.GameObject LoadRuntimeKeyboardMesh()
    // Offset: 0x49313B0
    ::UnityEngine::GameObject* LoadRuntimeKeyboardMesh();
    // public System.Void UpdateKeyboardVisibility()
    // Offset: 0x49317A4
    void UpdateKeyboardVisibility();
    // private System.Void SetKeyboardState(OVRTrackedKeyboard/TrackedKeyboardState state)
    // Offset: 0x4930C24
    void SetKeyboardState(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState state);
    // private System.Boolean GetKeyboardVisibility()
    // Offset: 0x492FE84
    bool GetKeyboardVisibility();
    // private System.Void InitializeKeyboardInfo()
    // Offset: 0x4930CE4
    void InitializeKeyboardInfo();
    // private System.Void LaunchOverlayIntent(System.String dataUri)
    // Offset: 0x49304CC
    void LaunchOverlayIntent(::StringW dataUri);
    // public System.Void Dispose()
    // Offset: 0x4931914
    void Dispose();
    // private System.Void DispatchVisibilityEvent(System.Boolean timeOut)
    // Offset: 0x49318B8
    void DispatchVisibilityEvent(bool timeOut);
    // public System.Void .ctor()
    // Offset: 0x4931A58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRTrackedKeyboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTrackedKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRTrackedKeyboard*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4931C08
    static void _cctor();
  }; // OVRTrackedKeyboard
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardSetActiveEvent, "", "OVRTrackedKeyboard/TrackedKeyboardSetActiveEvent");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardVisibilityChangedEvent, "", "OVRTrackedKeyboard/TrackedKeyboardVisibilityChangedEvent");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation, "", "OVRTrackedKeyboard/KeyboardPresentation");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState, "", "OVRTrackedKeyboard/TrackedKeyboardState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_CurrentKeyboardAngleFromUp
// Il2CppName: get_CurrentKeyboardAngleFromUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_CurrentKeyboardAngleFromUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_CurrentKeyboardAngleFromUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_CurrentKeyboardAngleFromUp
// Il2CppName: set_CurrentKeyboardAngleFromUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(float)>(&GlobalNamespace::OVRTrackedKeyboard::set_CurrentKeyboardAngleFromUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_CurrentKeyboardAngleFromUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_TrackingState
// Il2CppName: get_TrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_TrackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_TrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_TrackingState
// Il2CppName: set_TrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState)>(&GlobalNamespace::OVRTrackedKeyboard::set_TrackingState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRTrackedKeyboard/TrackedKeyboardState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_TrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_ActiveKeyboardInfo
// Il2CppName: get_ActiveKeyboardInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_ActiveKeyboardInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_ActiveKeyboardInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_ActiveKeyboardInfo
// Il2CppName: set_ActiveKeyboardInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo)>(&GlobalNamespace::OVRTrackedKeyboard::set_ActiveKeyboardInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRKeyboard/TrackedKeyboardInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_ActiveKeyboardInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_SystemKeyboardInfo
// Il2CppName: get_SystemKeyboardInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_SystemKeyboardInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_SystemKeyboardInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_SystemKeyboardInfo
// Il2CppName: set_SystemKeyboardInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRKeyboard::TrackedKeyboardInfo)>(&GlobalNamespace::OVRTrackedKeyboard::set_SystemKeyboardInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRKeyboard/TrackedKeyboardInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_SystemKeyboardInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_Presentation
// Il2CppName: get_Presentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_Presentation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_Presentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_Presentation
// Il2CppName: set_Presentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRTrackedKeyboard::KeyboardPresentation)>(&GlobalNamespace::OVRTrackedKeyboard::set_Presentation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRTrackedKeyboard/KeyboardPresentation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_Presentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_TrackingEnabled
// Il2CppName: get_TrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_TrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_TrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_TrackingEnabled
// Il2CppName: set_TrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::set_TrackingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_TrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_ConnectionRequired
// Il2CppName: get_ConnectionRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_ConnectionRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_ConnectionRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_ConnectionRequired
// Il2CppName: set_ConnectionRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::set_ConnectionRequired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_ConnectionRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_ShowUntracked
// Il2CppName: get_ShowUntracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_ShowUntracked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_ShowUntracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_ShowUntracked
// Il2CppName: set_ShowUntracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::set_ShowUntracked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_ShowUntracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_RemoteKeyboard
// Il2CppName: get_RemoteKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_RemoteKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_RemoteKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_RemoteKeyboard
// Il2CppName: set_RemoteKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::set_RemoteKeyboard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_RemoteKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_KeyboardQueryFlags
// Il2CppName: get_KeyboardQueryFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_KeyboardQueryFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_KeyboardQueryFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_KeyboardQueryFlags
// Il2CppName: set_KeyboardQueryFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRPlugin::TrackedKeyboardQueryFlags)>(&GlobalNamespace::OVRTrackedKeyboard::set_KeyboardQueryFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackedKeyboardQueryFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_KeyboardQueryFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::get_PassthroughOverlay
// Il2CppName: get_PassthroughOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVROverlay* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::get_PassthroughOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "get_PassthroughOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::set_PassthroughOverlay
// Il2CppName: set_PassthroughOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVROverlay*)>(&GlobalNamespace::OVRTrackedKeyboard::set_PassthroughOverlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVROverlay")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "set_PassthroughOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::InitializeHandPresenceData
// Il2CppName: InitializeHandPresenceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::InitializeHandPresenceData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "InitializeHandPresenceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::RegisterPassthroughMeshToSDK
// Il2CppName: RegisterPassthroughMeshToSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::RegisterPassthroughMeshToSDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "RegisterPassthroughMeshToSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::GetDistanceToKeyboard
// Il2CppName: GetDistanceToKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OVRTrackedKeyboard::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRTrackedKeyboard::GetDistanceToKeyboard)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "GetDistanceToKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::LaunchLocalKeyboardSelectionDialog
// Il2CppName: LaunchLocalKeyboardSelectionDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::LaunchLocalKeyboardSelectionDialog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "LaunchLocalKeyboardSelectionDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::LaunchRemoteKeyboardSelectionDialog
// Il2CppName: LaunchRemoteKeyboardSelectionDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::LaunchRemoteKeyboardSelectionDialog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "LaunchRemoteKeyboardSelectionDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::KeyboardTrackerIsRunning
// Il2CppName: KeyboardTrackerIsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::KeyboardTrackerIsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "KeyboardTrackerIsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdateTrackingStateCoroutine
// Il2CppName: UpdateTrackingStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::UpdateTrackingStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdateTrackingStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::StartKeyboardTrackingCoroutine
// Il2CppName: StartKeyboardTrackingCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::StartKeyboardTrackingCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "StartKeyboardTrackingCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::StopKeyboardTrackingInternal
// Il2CppName: StopKeyboardTrackingInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::StopKeyboardTrackingInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "StopKeyboardTrackingInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdateKeyboardPose
// Il2CppName: UpdateKeyboardPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::UpdateKeyboardPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdateKeyboardPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdateSkippedPoseTimer
// Il2CppName: UpdateSkippedPoseTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::UpdateSkippedPoseTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdateSkippedPoseTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::LoadKeyboardMesh
// Il2CppName: LoadKeyboardMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::LoadKeyboardMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "LoadKeyboardMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdateTextureQuality
// Il2CppName: UpdateTextureQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::UpdateTextureQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdateTextureQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdatePresentation
// Il2CppName: UpdatePresentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::UpdatePresentation)> {
  static const MethodInfo* get() {
    static auto* isVisible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdatePresentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isVisible});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::LoadRuntimeKeyboardMesh
// Il2CppName: LoadRuntimeKeyboardMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::LoadRuntimeKeyboardMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "LoadRuntimeKeyboardMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::UpdateKeyboardVisibility
// Il2CppName: UpdateKeyboardVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::UpdateKeyboardVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "UpdateKeyboardVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::SetKeyboardState
// Il2CppName: SetKeyboardState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::GlobalNamespace::OVRTrackedKeyboard::TrackedKeyboardState)>(&GlobalNamespace::OVRTrackedKeyboard::SetKeyboardState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "OVRTrackedKeyboard/TrackedKeyboardState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "SetKeyboardState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::GetKeyboardVisibility
// Il2CppName: GetKeyboardVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::GetKeyboardVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "GetKeyboardVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::InitializeKeyboardInfo
// Il2CppName: InitializeKeyboardInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::InitializeKeyboardInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "InitializeKeyboardInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::LaunchOverlayIntent
// Il2CppName: LaunchOverlayIntent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(::StringW)>(&GlobalNamespace::OVRTrackedKeyboard::LaunchOverlayIntent)> {
  static const MethodInfo* get() {
    static auto* dataUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "LaunchOverlayIntent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataUri});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)()>(&GlobalNamespace::OVRTrackedKeyboard::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::DispatchVisibilityEvent
// Il2CppName: DispatchVisibilityEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboard::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboard::DispatchVisibilityEvent)> {
  static const MethodInfo* get() {
    static auto* timeOut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), "DispatchVisibilityEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeOut});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboard::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRTrackedKeyboard::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboard*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
