// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDelayedExecListener
  class IDelayedExecListener;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GTDelayedExec
  class GTDelayedExec;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GTDelayedExec);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDelayedExec*, "", "GTDelayedExec");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x15
  #pragma pack(push, 1)
  // Autogenerated type: GTDelayedExec
  // [TokenAttribute] Offset: FFFFFFFF
  class GTDelayedExec : public ::Il2CppObject/*, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    // Nested type: ::GlobalNamespace::GTDelayedExec::Listener
    struct Listener;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GTDelayedExec/Listener
    // [TokenAttribute] Offset: FFFFFFFF
    struct Listener/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly IDelayedExecListener listener
      // Size: 0x8
      // Offset: 0x0
      ::GlobalNamespace::IDelayedExecListener* listener;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IDelayedExecListener*) == 0x8);
      // public readonly System.Int32 contextId
      // Size: 0x4
      // Offset: 0x8
      int contextId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Listener
      constexpr Listener(::GlobalNamespace::IDelayedExecListener* listener_ = {}, int contextId_ = {}) noexcept : listener{listener_}, contextId{contextId_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly IDelayedExecListener listener
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IDelayedExecListener*& dyn_listener();
      // Get instance field reference: public readonly System.Int32 contextId
      [[deprecated("Use field access instead!")]] int& dyn_contextId();
      // public System.Void .ctor(IDelayedExecListener listener, System.Int32 contextId)
      // Offset: 0x2766564
      // ABORTED: conflicts with another method.  Listener(::GlobalNamespace::IDelayedExecListener* listener, int contextId);
    }; // GTDelayedExec/Listener
    #pragma pack(pop)
    static check_size<sizeof(GTDelayedExec::Listener), 8 + sizeof(int)> __GlobalNamespace_GTDelayedExec_ListenerSizeCheck;
    static_assert(sizeof(GTDelayedExec::Listener) == 0xC);
    public:
    // private System.Int32 <listenerCount>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int listenerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get static field: static private GTDelayedExec <instance>k__BackingField
    static ::GlobalNamespace::GTDelayedExec* _get_$instance$k__BackingField();
    // Set static field: static private GTDelayedExec <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GlobalNamespace::GTDelayedExec* value);
    // static field const value: static public System.Int32 kMaxListeners
    static constexpr const int kMaxListeners = 1024;
    // Get static field: static public System.Int32 kMaxListeners
    static int _get_kMaxListeners();
    // Set static field: static public System.Int32 kMaxListeners
    static void _set_kMaxListeners(int value);
    // Get static field: static private readonly System.Single[] _listenerDelays
    static ::ArrayW<float> _get__listenerDelays();
    // Set static field: static private readonly System.Single[] _listenerDelays
    static void _set__listenerDelays(::ArrayW<float> value);
    // Get static field: static private readonly GTDelayedExec/Listener[] _listeners
    static ::ArrayW<::GlobalNamespace::GTDelayedExec::Listener> _get__listeners();
    // Set static field: static private readonly GTDelayedExec/Listener[] _listeners
    static void _set__listeners(::ArrayW<::GlobalNamespace::GTDelayedExec::Listener> value);
    // Get instance field reference: private System.Int32 <listenerCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$listenerCount$k__BackingField();
    // Get instance field reference: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemTick_TickRunning$k__BackingField();
    // static public GTDelayedExec get_instance()
    // Offset: 0x27660F8
    static ::GlobalNamespace::GTDelayedExec* get_instance();
    // static private System.Void set_instance(GTDelayedExec value)
    // Offset: 0x2766150
    static void set_instance(::GlobalNamespace::GTDelayedExec* value);
    // public System.Int32 get_listenerCount()
    // Offset: 0x27661B8
    int get_listenerCount();
    // private System.Void set_listenerCount(System.Int32 value)
    // Offset: 0x27661C0
    void set_listenerCount(int value);
    // static private System.Void InitializeAfterAssemblies()
    // Offset: 0x27661C8
    static void InitializeAfterAssemblies();
    // static System.Void Add(IDelayedExecListener listener, System.Single delay, System.Int32 contextId)
    // Offset: 0x27662FC
    static void Add(::GlobalNamespace::IDelayedExecListener* listener, float delay, int contextId);
    // private System.Boolean ITickSystemTick.get_TickRunning()
    // Offset: 0x276658C
    bool ITickSystemTick_get_TickRunning();
    // private System.Void ITickSystemTick.set_TickRunning(System.Boolean value)
    // Offset: 0x2766594
    void ITickSystemTick_set_TickRunning(bool value);
    // private System.Void ITickSystemTick.Tick()
    // Offset: 0x27665A0
    void ITickSystemTick_Tick();
    // public System.Void .ctor()
    // Offset: 0x27662F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTDelayedExec* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTDelayedExec*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2766874
    static void _cctor();
  }; // GTDelayedExec
  #pragma pack(pop)
  static check_size<sizeof(GTDelayedExec), 20 + sizeof(bool)> __GlobalNamespace_GTDelayedExecSizeCheck;
  static_assert(sizeof(GTDelayedExec) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GTDelayedExec::Listener, "", "GTDelayedExec/Listener");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GTDelayedExec* (*)()>(&GlobalNamespace::GTDelayedExec::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GTDelayedExec*)>(&GlobalNamespace::GTDelayedExec::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GTDelayedExec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::get_listenerCount
// Il2CppName: get_listenerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GTDelayedExec::*)()>(&GlobalNamespace::GTDelayedExec::get_listenerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "get_listenerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::set_listenerCount
// Il2CppName: set_listenerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDelayedExec::*)(int)>(&GlobalNamespace::GTDelayedExec::set_listenerCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "set_listenerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::InitializeAfterAssemblies
// Il2CppName: InitializeAfterAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTDelayedExec::InitializeAfterAssemblies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "InitializeAfterAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::IDelayedExecListener*, float, int)>(&GlobalNamespace::GTDelayedExec::Add)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("", "IDelayedExecListener")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contextId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, delay, contextId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::ITickSystemTick_get_TickRunning
// Il2CppName: ITickSystemTick.get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GTDelayedExec::*)()>(&GlobalNamespace::GTDelayedExec::ITickSystemTick_get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "ITickSystemTick.get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::ITickSystemTick_set_TickRunning
// Il2CppName: ITickSystemTick.set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDelayedExec::*)(bool)>(&GlobalNamespace::GTDelayedExec::ITickSystemTick_set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "ITickSystemTick.set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::ITickSystemTick_Tick
// Il2CppName: ITickSystemTick.Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GTDelayedExec::*)()>(&GlobalNamespace::GTDelayedExec::ITickSystemTick_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), "ITickSystemTick.Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GTDelayedExec::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GTDelayedExec::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GTDelayedExec*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
