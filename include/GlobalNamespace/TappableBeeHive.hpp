// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Tappable
#include "GlobalNamespace/Tappable.hpp"
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TappableBeeHive
  class TappableBeeHive;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TappableBeeHive);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TappableBeeHive*, "", "TappableBeeHive");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: TappableBeeHive
  // [TokenAttribute] Offset: FFFFFFFF
  class TappableBeeHive : public ::GlobalNamespace::Tappable {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // private UnityEngine.GameObject swarmEmergeFromPoint
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* swarmEmergeFromPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject swarmEmergeToPoint
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* swarmEmergeToPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject honeycombSurface
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* honeycombSurface;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single honeycombDisableDuration
    // Size: 0x4
    // Offset: 0x60
    float honeycombDisableDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: honeycombDisableDuration and: timeSinceLastTap
    char __padding3[0x4] = {};
    // private TimeSince _timeSinceLastTap
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::TimeSince timeSinceLastTap;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeSince) == 0x8);
    // private System.Single reenableHoneycombAtTimestamp
    // Size: 0x4
    // Offset: 0x70
    float reenableHoneycombAtTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: reenableHoneycombAtTimestamp and: reenableHoneycombCoroutine
    char __padding5[0x4] = {};
    // private UnityEngine.Coroutine reenableHoneycombCoroutine
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Coroutine* reenableHoneycombCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.GameObject swarmEmergeFromPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_swarmEmergeFromPoint();
    // Get instance field reference: private UnityEngine.GameObject swarmEmergeToPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_swarmEmergeToPoint();
    // Get instance field reference: private UnityEngine.GameObject honeycombSurface
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_honeycombSurface();
    // Get instance field reference: private System.Single honeycombDisableDuration
    [[deprecated("Use field access instead!")]] float& dyn_honeycombDisableDuration();
    // Get instance field reference: private TimeSince _timeSinceLastTap
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& dyn__timeSinceLastTap();
    // Get instance field reference: private System.Single reenableHoneycombAtTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_reenableHoneycombAtTimestamp();
    // Get instance field reference: private UnityEngine.Coroutine reenableHoneycombCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_reenableHoneycombCoroutine();
    // private System.Void Awake()
    // Offset: 0x27328C0
    void Awake();
    // public System.Void OnSlingshotHit(SlingshotProjectile projectile, UnityEngine.Collision collision)
    // Offset: 0x2732C1C
    void OnSlingshotHit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision);
    // public override System.Void OnTapLocal(System.Single tapStrength, System.Single tapTime, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2732A60
    // Implemented from: Tappable
    // Base method: System.Void Tappable::OnTapLocal(System.Single tapStrength, System.Single tapTime, Photon.Pun.PhotonMessageInfo info)
    void OnTapLocal(float tapStrength, float tapTime, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x2732DD8
    // Implemented from: Tappable
    // Base method: System.Void Tappable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TappableBeeHive* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TappableBeeHive::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TappableBeeHive*, creationType>()));
    }
  }; // TappableBeeHive
  #pragma pack(pop)
  static check_size<sizeof(TappableBeeHive), 120 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_TappableBeeHiveSizeCheck;
  static_assert(sizeof(TappableBeeHive) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TappableBeeHive::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableBeeHive::*)()>(&GlobalNamespace::TappableBeeHive::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableBeeHive*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableBeeHive::OnSlingshotHit
// Il2CppName: OnSlingshotHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableBeeHive::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collision*)>(&GlobalNamespace::TappableBeeHive::OnSlingshotHit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableBeeHive*), "OnSlingshotHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableBeeHive::OnTapLocal
// Il2CppName: OnTapLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableBeeHive::*)(float, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::TappableBeeHive::OnTapLocal)> {
  static const MethodInfo* get() {
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tapTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableBeeHive*), "OnTapLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tapStrength, tapTime, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableBeeHive::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
