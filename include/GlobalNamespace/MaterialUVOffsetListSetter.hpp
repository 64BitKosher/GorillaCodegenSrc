// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MaterialUVOffsetListSetter
  class MaterialUVOffsetListSetter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MaterialUVOffsetListSetter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MaterialUVOffsetListSetter*, "", "MaterialUVOffsetListSetter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: MaterialUVOffsetListSetter
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class MaterialUVOffsetListSetter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Vector2> uvOffsetList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvOffsetList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    // private UnityEngine.MeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock matPropertyBlock
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MaterialPropertyBlock* matPropertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private System.Int32 shaderPropertyID
    // Size: 0x4
    // Offset: 0x38
    int shaderPropertyID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector2> uvOffsetList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_uvOffsetList();
    // Get instance field reference: private UnityEngine.MeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_meshRenderer();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropertyBlock();
    // Get instance field reference: private System.Int32 shaderPropertyID
    [[deprecated("Use field access instead!")]] int& dyn_shaderPropertyID();
    // private System.Void Awake()
    // Offset: 0x277688C
    void Awake();
    // public System.Void SetUVOffset(System.Int32 listIndex)
    // Offset: 0x2776940
    void SetUVOffset(int listIndex);
    // public System.Void .ctor()
    // Offset: 0x2776A38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialUVOffsetListSetter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialUVOffsetListSetter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialUVOffsetListSetter*, creationType>()));
    }
  }; // MaterialUVOffsetListSetter
  #pragma pack(pop)
  static check_size<sizeof(MaterialUVOffsetListSetter), 56 + sizeof(int)> __GlobalNamespace_MaterialUVOffsetListSetterSizeCheck;
  static_assert(sizeof(MaterialUVOffsetListSetter) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MaterialUVOffsetListSetter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialUVOffsetListSetter::*)()>(&GlobalNamespace::MaterialUVOffsetListSetter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialUVOffsetListSetter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialUVOffsetListSetter::SetUVOffset
// Il2CppName: SetUVOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialUVOffsetListSetter::*)(int)>(&GlobalNamespace::MaterialUVOffsetListSetter::SetUVOffset)> {
  static const MethodInfo* get() {
    static auto* listIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialUVOffsetListSetter*), "SetUVOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialUVOffsetListSetter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
