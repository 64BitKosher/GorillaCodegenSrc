// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRInput/InputDeviceShowState
#include "GlobalNamespace/OVRInput_InputDeviceShowState.hpp"
// Including type: OVRInput/ControllerInHandState
#include "GlobalNamespace/OVRInput_ControllerInHandState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Animator
  class Animator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRControllerHelper
  class OVRControllerHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRControllerHelper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRControllerHelper*, "", "OVRControllerHelper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: OVRControllerHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRControllerHelper : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRControllerHelper::ControllerType
    struct ControllerType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRControllerHelper/ControllerType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ControllerType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ControllerType
      constexpr ControllerType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRControllerHelper/ControllerType QuestAndRiftS
      static constexpr const int QuestAndRiftS = 1;
      // Get static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
      static ::GlobalNamespace::OVRControllerHelper::ControllerType _get_QuestAndRiftS();
      // Set static field: static public OVRControllerHelper/ControllerType QuestAndRiftS
      static void _set_QuestAndRiftS(::GlobalNamespace::OVRControllerHelper::ControllerType value);
      // static field const value: static public OVRControllerHelper/ControllerType Rift
      static constexpr const int Rift = 2;
      // Get static field: static public OVRControllerHelper/ControllerType Rift
      static ::GlobalNamespace::OVRControllerHelper::ControllerType _get_Rift();
      // Set static field: static public OVRControllerHelper/ControllerType Rift
      static void _set_Rift(::GlobalNamespace::OVRControllerHelper::ControllerType value);
      // static field const value: static public OVRControllerHelper/ControllerType Quest2
      static constexpr const int Quest2 = 3;
      // Get static field: static public OVRControllerHelper/ControllerType Quest2
      static ::GlobalNamespace::OVRControllerHelper::ControllerType _get_Quest2();
      // Set static field: static public OVRControllerHelper/ControllerType Quest2
      static void _set_Quest2(::GlobalNamespace::OVRControllerHelper::ControllerType value);
      // static field const value: static public OVRControllerHelper/ControllerType TouchPro
      static constexpr const int TouchPro = 4;
      // Get static field: static public OVRControllerHelper/ControllerType TouchPro
      static ::GlobalNamespace::OVRControllerHelper::ControllerType _get_TouchPro();
      // Set static field: static public OVRControllerHelper/ControllerType TouchPro
      static void _set_TouchPro(::GlobalNamespace::OVRControllerHelper::ControllerType value);
      // static field const value: static public OVRControllerHelper/ControllerType TouchPlus
      static constexpr const int TouchPlus = 5;
      // Get static field: static public OVRControllerHelper/ControllerType TouchPlus
      static ::GlobalNamespace::OVRControllerHelper::ControllerType _get_TouchPlus();
      // Set static field: static public OVRControllerHelper/ControllerType TouchPlus
      static void _set_TouchPlus(::GlobalNamespace::OVRControllerHelper::ControllerType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRControllerHelper/ControllerType
    #pragma pack(pop)
    static check_size<sizeof(OVRControllerHelper::ControllerType), 0 + sizeof(int)> __GlobalNamespace_OVRControllerHelper_ControllerTypeSizeCheck;
    static_assert(sizeof(OVRControllerHelper::ControllerType) == 0x4);
    public:
    // public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSLeftController
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* m_modelOculusTouchQuestAndRiftSLeftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSRightController
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* m_modelOculusTouchQuestAndRiftSRightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelOculusTouchRiftLeftController
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* m_modelOculusTouchRiftLeftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelOculusTouchRiftRightController
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_modelOculusTouchRiftRightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelOculusTouchQuest2LeftController
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* m_modelOculusTouchQuest2LeftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelOculusTouchQuest2RightController
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* m_modelOculusTouchQuest2RightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelMetaTouchProLeftController
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* m_modelMetaTouchProLeftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelMetaTouchProRightController
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* m_modelMetaTouchProRightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelMetaTouchPlusLeftController
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* m_modelMetaTouchPlusLeftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject m_modelMetaTouchPlusRightController
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* m_modelMetaTouchPlusRightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public OVRInput/Controller m_controller
    // Size: 0x4
    // Offset: 0x70
    ::GlobalNamespace::OVRInput::Controller m_controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // public OVRInput/InputDeviceShowState m_showState
    // Size: 0x4
    // Offset: 0x74
    ::GlobalNamespace::OVRInput::InputDeviceShowState m_showState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::InputDeviceShowState) == 0x4);
    // public System.Boolean showWhenHandsArePoweredByNaturalControllerPoses
    // Size: 0x1
    // Offset: 0x78
    bool showWhenHandsArePoweredByNaturalControllerPoses;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showWhenHandsArePoweredByNaturalControllerPoses and: m_animator
    char __padding12[0x7] = {};
    // private UnityEngine.Animator m_animator
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Animator* m_animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.GameObject m_activeController
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* m_activeController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_controllerModelsInitialized
    // Size: 0x1
    // Offset: 0x90
    bool m_controllerModelsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_hasInputFocus
    // Size: 0x1
    // Offset: 0x91
    bool m_hasInputFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_hasInputFocusPrev
    // Size: 0x1
    // Offset: 0x92
    bool m_hasInputFocusPrev;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_hasInputFocusPrev and: activeControllerType
    char __padding17[0x1] = {};
    // private OVRControllerHelper/ControllerType activeControllerType
    // Size: 0x4
    // Offset: 0x94
    ::GlobalNamespace::OVRControllerHelper::ControllerType activeControllerType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRControllerHelper::ControllerType) == 0x4);
    // private System.Boolean m_prevControllerConnected
    // Size: 0x1
    // Offset: 0x98
    bool m_prevControllerConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_prevControllerConnectedCached
    // Size: 0x1
    // Offset: 0x99
    bool m_prevControllerConnectedCached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_prevControllerConnectedCached and: m_prevControllerInHandState
    char __padding20[0x2] = {};
    // private OVRInput/ControllerInHandState m_prevControllerInHandState
    // Size: 0x4
    // Offset: 0x9C
    ::GlobalNamespace::OVRInput::ControllerInHandState m_prevControllerInHandState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::ControllerInHandState) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSLeftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchQuestAndRiftSLeftController();
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchQuestAndRiftSRightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchQuestAndRiftSRightController();
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchRiftLeftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchRiftLeftController();
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchRiftRightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchRiftRightController();
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchQuest2LeftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchQuest2LeftController();
    // Get instance field reference: public UnityEngine.GameObject m_modelOculusTouchQuest2RightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelOculusTouchQuest2RightController();
    // Get instance field reference: public UnityEngine.GameObject m_modelMetaTouchProLeftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelMetaTouchProLeftController();
    // Get instance field reference: public UnityEngine.GameObject m_modelMetaTouchProRightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelMetaTouchProRightController();
    // Get instance field reference: public UnityEngine.GameObject m_modelMetaTouchPlusLeftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelMetaTouchPlusLeftController();
    // Get instance field reference: public UnityEngine.GameObject m_modelMetaTouchPlusRightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_modelMetaTouchPlusRightController();
    // Get instance field reference: public OVRInput/Controller m_controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_m_controller();
    // Get instance field reference: public OVRInput/InputDeviceShowState m_showState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::InputDeviceShowState& dyn_m_showState();
    // Get instance field reference: public System.Boolean showWhenHandsArePoweredByNaturalControllerPoses
    [[deprecated("Use field access instead!")]] bool& dyn_showWhenHandsArePoweredByNaturalControllerPoses();
    // Get instance field reference: private UnityEngine.Animator m_animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_m_animator();
    // Get instance field reference: private UnityEngine.GameObject m_activeController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_activeController();
    // Get instance field reference: private System.Boolean m_controllerModelsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_m_controllerModelsInitialized();
    // Get instance field reference: private System.Boolean m_hasInputFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasInputFocus();
    // Get instance field reference: private System.Boolean m_hasInputFocusPrev
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasInputFocusPrev();
    // Get instance field reference: private OVRControllerHelper/ControllerType activeControllerType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRControllerHelper::ControllerType& dyn_activeControllerType();
    // Get instance field reference: private System.Boolean m_prevControllerConnected
    [[deprecated("Use field access instead!")]] bool& dyn_m_prevControllerConnected();
    // Get instance field reference: private System.Boolean m_prevControllerConnectedCached
    [[deprecated("Use field access instead!")]] bool& dyn_m_prevControllerConnectedCached();
    // Get instance field reference: private OVRInput/ControllerInHandState m_prevControllerInHandState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::ControllerInHandState& dyn_m_prevControllerInHandState();
    // private System.Void Start()
    // Offset: 0x493F564
    void Start();
    // private System.Void InitializeControllerModels()
    // Offset: 0x493F5D4
    void InitializeControllerModels();
    // private System.Void Update()
    // Offset: 0x493FA98
    void Update();
    // public System.Void InputFocusAquired()
    // Offset: 0x4940540
    void InputFocusAquired();
    // public System.Void InputFocusLost()
    // Offset: 0x494054C
    void InputFocusLost();
    // public System.Void .ctor()
    // Offset: 0x4940554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRControllerHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRControllerHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRControllerHelper*, creationType>()));
    }
  }; // OVRControllerHelper
  #pragma pack(pop)
  static check_size<sizeof(OVRControllerHelper), 156 + sizeof(::GlobalNamespace::OVRInput::ControllerInHandState)> __GlobalNamespace_OVRControllerHelperSizeCheck;
  static_assert(sizeof(OVRControllerHelper) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRControllerHelper::ControllerType, "", "OVRControllerHelper/ControllerType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRControllerHelper::*)()>(&GlobalNamespace::OVRControllerHelper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRControllerHelper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::InitializeControllerModels
// Il2CppName: InitializeControllerModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRControllerHelper::*)()>(&GlobalNamespace::OVRControllerHelper::InitializeControllerModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRControllerHelper*), "InitializeControllerModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRControllerHelper::*)()>(&GlobalNamespace::OVRControllerHelper::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRControllerHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::InputFocusAquired
// Il2CppName: InputFocusAquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRControllerHelper::*)()>(&GlobalNamespace::OVRControllerHelper::InputFocusAquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRControllerHelper*), "InputFocusAquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::InputFocusLost
// Il2CppName: InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRControllerHelper::*)()>(&GlobalNamespace::OVRControllerHelper::InputFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRControllerHelper*), "InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRControllerHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
