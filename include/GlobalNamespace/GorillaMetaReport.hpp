// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaReportButton
  class GorillaReportButton;
  // Forward declaring type: GorillaScoreBoard
  class GorillaScoreBoard;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: PlatformInitialize
  class PlatformInitialize;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaMetaReport
  class GorillaMetaReport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaMetaReport);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaMetaReport*, "", "GorillaMetaReport");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaMetaReport
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaMetaReport : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaMetaReport::$Submitted$d__17
    class $Submitted$d__17;
    public:
    // private UnityEngine.GameObject occluder
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* occluder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject reportScoreboard
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* reportScoreboard;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject ReportText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* ReportText;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.LayerMask visibleLayers
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::LayerMask visibleLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: visibleLayers and: closeButton
    char __padding3[0x4] = {};
    // private GorillaReportButton closeButton
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GorillaReportButton* closeButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaReportButton*) == 0x8);
    // private UnityEngine.GameObject leftHandObject
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* leftHandObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject rightHandObject
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* rightHandObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 playerLocalScreenPosition
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 playerLocalScreenPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single blockButtonsUntilTimestamp
    // Size: 0x4
    // Offset: 0x64
    float blockButtonsUntilTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaScoreBoard currentScoreboard
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::GorillaScoreBoard* currentScoreboard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaScoreBoard*) == 0x8);
    // private System.Int32 savedCullingLayers
    // Size: 0x4
    // Offset: 0x70
    int savedCullingLayers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean testPress
    // Size: 0x1
    // Offset: 0x74
    bool testPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isMoving
    // Size: 0x1
    // Offset: 0x75
    bool isMoving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMoving and: movementTime
    char __padding12[0x2] = {};
    // private System.Single movementTime
    // Size: 0x4
    // Offset: 0x78
    float movementTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.GameObject occluder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_occluder();
    // Get instance field reference: private UnityEngine.GameObject reportScoreboard
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_reportScoreboard();
    // Get instance field reference: private UnityEngine.GameObject ReportText
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ReportText();
    // Get instance field reference: private UnityEngine.LayerMask visibleLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_visibleLayers();
    // Get instance field reference: private GorillaReportButton closeButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaReportButton*& dyn_closeButton();
    // Get instance field reference: private UnityEngine.GameObject leftHandObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftHandObject();
    // Get instance field reference: private UnityEngine.GameObject rightHandObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightHandObject();
    // Get instance field reference: private UnityEngine.Vector3 playerLocalScreenPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_playerLocalScreenPosition();
    // Get instance field reference: private System.Single blockButtonsUntilTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_blockButtonsUntilTimestamp();
    // Get instance field reference: private GorillaScoreBoard currentScoreboard
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaScoreBoard*& dyn_currentScoreboard();
    // Get instance field reference: private System.Int32 savedCullingLayers
    [[deprecated("Use field access instead!")]] int& dyn_savedCullingLayers();
    // Get instance field reference: public System.Boolean testPress
    [[deprecated("Use field access instead!")]] bool& dyn_testPress();
    // Get instance field reference: public System.Boolean isMoving
    [[deprecated("Use field access instead!")]] bool& dyn_isMoving();
    // Get instance field reference: private System.Single movementTime
    [[deprecated("Use field access instead!")]] float& dyn_movementTime();
    // private GorillaLocomotion.Player get_localPlayer()
    // Offset: 0x2961564
    ::GorillaLocomotion::Player* get_localPlayer();
    // private System.Void Start()
    // Offset: 0x29615A4
    void Start();
    // private System.Void OnDisable()
    // Offset: 0x29616CC
    void OnDisable();
    // private System.Void OnReportButtonIntentNotif(Oculus.Platform.Message`1<System.String> message)
    // Offset: 0x2961770
    void OnReportButtonIntentNotif(::Oculus::Platform::Message_1<::StringW>* message);
    // private System.Collections.IEnumerator Submitted()
    // Offset: 0x2961CD0
    ::System::Collections::IEnumerator* Submitted();
    // private System.Void DuplicateScoreboard()
    // Offset: 0x2961D64
    void DuplicateScoreboard();
    // private System.Void ToggleLevelVisibility(System.Boolean state)
    // Offset: 0x296209C
    void ToggleLevelVisibility(bool state);
    // private System.Void Teardown()
    // Offset: 0x2962170
    void Teardown();
    // private System.Void CheckReportSubmit()
    // Offset: 0x296247C
    void CheckReportSubmit();
    // private System.Void GetIdealScreenPositionRotation(out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out UnityEngine.Vector3 scale)
    // Offset: 0x2961F18
    void GetIdealScreenPositionRotation(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> scale);
    // private System.Void StartOverlay()
    // Offset: 0x296183C
    void StartOverlay();
    // private System.Void CheckDistance()
    // Offset: 0x2962718
    void CheckDistance();
    // private System.Void Update()
    // Offset: 0x2962A7C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2962E44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaMetaReport* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaMetaReport*, creationType>()));
    }
    // private System.Void <Start>b__14_0(Oculus.Platform.Message`1<Oculus.Platform.Models.PlatformInitialize> message)
    // Offset: 0x2962E4C
    void $Start$b__14_0(::Oculus::Platform::Message_1<::Oculus::Platform::Models::PlatformInitialize*>* message);
  }; // GorillaMetaReport
  #pragma pack(pop)
  static check_size<sizeof(GorillaMetaReport), 120 + sizeof(float)> __GlobalNamespace_GorillaMetaReportSizeCheck;
  static_assert(sizeof(GorillaMetaReport) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Player* (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::get_localPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::OnReportButtonIntentNotif
// Il2CppName: OnReportButtonIntentNotif
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)(::Oculus::Platform::Message_1<::StringW>*)>(&GlobalNamespace::GorillaMetaReport::OnReportButtonIntentNotif)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "OnReportButtonIntentNotif", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::Submitted
// Il2CppName: Submitted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::Submitted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "Submitted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::DuplicateScoreboard
// Il2CppName: DuplicateScoreboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::DuplicateScoreboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "DuplicateScoreboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::ToggleLevelVisibility
// Il2CppName: ToggleLevelVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)(bool)>(&GlobalNamespace::GorillaMetaReport::ToggleLevelVisibility)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "ToggleLevelVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::Teardown
// Il2CppName: Teardown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::Teardown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "Teardown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::CheckReportSubmit
// Il2CppName: CheckReportSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::CheckReportSubmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "CheckReportSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::GetIdealScreenPositionRotation
// Il2CppName: GetIdealScreenPositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&GlobalNamespace::GorillaMetaReport::GetIdealScreenPositionRotation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "GetIdealScreenPositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::StartOverlay
// Il2CppName: StartOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::StartOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "StartOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::CheckDistance
// Il2CppName: CheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::CheckDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "CheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)()>(&GlobalNamespace::GorillaMetaReport::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaMetaReport::$Start$b__14_0
// Il2CppName: <Start>b__14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaMetaReport::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::PlatformInitialize*>*)>(&GlobalNamespace::GorillaMetaReport::$Start$b__14_0)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "PlatformInitialize")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaMetaReport*), "<Start>b__14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
