// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRDeserialize
#include "GlobalNamespace/OVRDeserialize.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRDeserialize::SpaceQueryCompleteData, "", "OVRDeserialize/SpaceQueryCompleteData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRDeserialize/SpaceQueryCompleteData
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRDeserialize::SpaceQueryCompleteData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt64 RequestId
    // Size: 0x8
    // Offset: 0x0
    uint64_t RequestId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int32 Result
    // Size: 0x4
    // Offset: 0x8
    int Result;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SpaceQueryCompleteData
    constexpr SpaceQueryCompleteData(uint64_t RequestId_ = {}, int Result_ = {}) noexcept : RequestId{RequestId_}, Result{Result_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt64 RequestId
    [[deprecated("Use field access instead!")]] uint64_t& dyn_RequestId();
    // Get instance field reference: public System.Int32 Result
    [[deprecated("Use field access instead!")]] int& dyn_Result();
  }; // OVRDeserialize/SpaceQueryCompleteData
  #pragma pack(pop)
  static check_size<sizeof(OVRDeserialize::SpaceQueryCompleteData), 8 + sizeof(int)> __GlobalNamespace_OVRDeserialize_SpaceQueryCompleteDataSizeCheck;
  static_assert(sizeof(OVRDeserialize::SpaceQueryCompleteData) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
