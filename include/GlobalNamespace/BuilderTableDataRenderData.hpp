// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: Unity.Collections.NativeList`1
#include "Unity/Collections/NativeList_1.hpp"
// Including type: BuilderTableSubMesh
#include "GlobalNamespace/BuilderTableSubMesh.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Texture2DArray
  class Texture2DArray;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderTableDataRenderIndirectBatch
  class BuilderTableDataRenderIndirectBatch;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuilderTableDataRenderData
  class BuilderTableDataRenderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuilderTableDataRenderData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderTableDataRenderData*, "", "BuilderTableDataRenderData");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: BuilderTableDataRenderData
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTableDataRenderData : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 texWidth
    // Size: 0x4
    // Offset: 0x10
    int texWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 texHeight
    // Size: 0x4
    // Offset: 0x14
    int texHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.TextureFormat textureFormat
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::TextureFormat textureFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextureFormat) == 0x4);
    // public System.Collections.Generic.Dictionary`2<UnityEngine.Material,System.Int32> materialToIndex
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>* materialToIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Material> materials
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* materials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Material*>*) == 0x8);
    // public UnityEngine.Material sharedMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* sharedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material sharedMaterialIndirect
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* sharedMaterialIndirect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<UnityEngine.Texture2D,System.Int32> textureToIndex
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture2D*, int>* textureToIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture2D*, int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> textures
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* textures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Material> perTextureMaterial
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* perTextureMaterial;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Material*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.MaterialPropertyBlock> perTexturePropertyBlock
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::MaterialPropertyBlock*>* perTexturePropertyBlock;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MaterialPropertyBlock*>*) == 0x8);
    // public UnityEngine.Texture2DArray sharedTexArray
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Texture2DArray* sharedTexArray;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2DArray*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,System.Int32> meshToIndex
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, int>* meshToIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Mesh> meshes
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* meshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> meshInstanceCount
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<int>* meshInstanceCount;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public Unity.Collections.NativeList`1<BuilderTableSubMesh> subMeshes
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::Unity::Collections::NativeList_1<::GlobalNamespace::BuilderTableSubMesh> subMeshes;
    // public UnityEngine.Mesh sharedMesh
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Mesh* sharedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public BuilderTableDataRenderIndirectBatch dynamicBatch
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::BuilderTableDataRenderIndirectBatch* dynamicBatch;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*) == 0x8);
    // public BuilderTableDataRenderIndirectBatch staticBatch
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::BuilderTableDataRenderIndirectBatch* staticBatch;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderTableDataRenderIndirectBatch*) == 0x8);
    public:
    // static field const value: static public System.Int32 NUM_SPLIT_MESH_INSTANCE_GROUPS
    static constexpr const int NUM_SPLIT_MESH_INSTANCE_GROUPS = 1;
    // Get static field: static public System.Int32 NUM_SPLIT_MESH_INSTANCE_GROUPS
    static int _get_NUM_SPLIT_MESH_INSTANCE_GROUPS();
    // Set static field: static public System.Int32 NUM_SPLIT_MESH_INSTANCE_GROUPS
    static void _set_NUM_SPLIT_MESH_INSTANCE_GROUPS(int value);
    // Get instance field reference: public System.Int32 texWidth
    [[deprecated("Use field access instead!")]] int& dyn_texWidth();
    // Get instance field reference: public System.Int32 texHeight
    [[deprecated("Use field access instead!")]] int& dyn_texHeight();
    // Get instance field reference: public UnityEngine.TextureFormat textureFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextureFormat& dyn_textureFormat();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<UnityEngine.Material,System.Int32> materialToIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>*& dyn_materialToIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Material> materials
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Material*>*& dyn_materials();
    // Get instance field reference: public UnityEngine.Material sharedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_sharedMaterial();
    // Get instance field reference: public UnityEngine.Material sharedMaterialIndirect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_sharedMaterialIndirect();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<UnityEngine.Texture2D,System.Int32> textureToIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture2D*, int>*& dyn_textureToIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> textures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_textures();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Material> perTextureMaterial
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Material*>*& dyn_perTextureMaterial();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.MaterialPropertyBlock> perTexturePropertyBlock
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MaterialPropertyBlock*>*& dyn_perTexturePropertyBlock();
    // Get instance field reference: public UnityEngine.Texture2DArray sharedTexArray
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2DArray*& dyn_sharedTexArray();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,System.Int32> meshToIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, int>*& dyn_meshToIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Mesh> meshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*& dyn_meshes();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> meshInstanceCount
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_meshInstanceCount();
    // Get instance field reference: public Unity.Collections.NativeList`1<BuilderTableSubMesh> subMeshes
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeList_1<::GlobalNamespace::BuilderTableSubMesh>& dyn_subMeshes();
    // Get instance field reference: public UnityEngine.Mesh sharedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_sharedMesh();
    // Get instance field reference: public BuilderTableDataRenderIndirectBatch dynamicBatch
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderTableDataRenderIndirectBatch*& dyn_dynamicBatch();
    // Get instance field reference: public BuilderTableDataRenderIndirectBatch staticBatch
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderTableDataRenderIndirectBatch*& dyn_staticBatch();
    // public System.Void .ctor()
    // Offset: 0x26E9DDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTableDataRenderData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuilderTableDataRenderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTableDataRenderData*, creationType>()));
    }
  }; // BuilderTableDataRenderData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderTableDataRenderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
