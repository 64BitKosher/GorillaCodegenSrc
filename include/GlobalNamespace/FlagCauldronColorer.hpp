// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlagCauldronColorer
  class FlagCauldronColorer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlagCauldronColorer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlagCauldronColorer*, "", "FlagCauldronColorer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: FlagCauldronColorer
  // [TokenAttribute] Offset: FFFFFFFF
  class FlagCauldronColorer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FlagCauldronColorer::ColorMode
    struct ColorMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FlagCauldronColorer/ColorMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ColorMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ColorMode
      constexpr ColorMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FlagCauldronColorer/ColorMode None
      static constexpr const int None = 0;
      // Get static field: static public FlagCauldronColorer/ColorMode None
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_None();
      // Set static field: static public FlagCauldronColorer/ColorMode None
      static void _set_None(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // static field const value: static public FlagCauldronColorer/ColorMode Red
      static constexpr const int Red = 1;
      // Get static field: static public FlagCauldronColorer/ColorMode Red
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_Red();
      // Set static field: static public FlagCauldronColorer/ColorMode Red
      static void _set_Red(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // static field const value: static public FlagCauldronColorer/ColorMode Green
      static constexpr const int Green = 2;
      // Get static field: static public FlagCauldronColorer/ColorMode Green
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_Green();
      // Set static field: static public FlagCauldronColorer/ColorMode Green
      static void _set_Green(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // static field const value: static public FlagCauldronColorer/ColorMode Blue
      static constexpr const int Blue = 3;
      // Get static field: static public FlagCauldronColorer/ColorMode Blue
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_Blue();
      // Set static field: static public FlagCauldronColorer/ColorMode Blue
      static void _set_Blue(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // static field const value: static public FlagCauldronColorer/ColorMode Black
      static constexpr const int Black = 4;
      // Get static field: static public FlagCauldronColorer/ColorMode Black
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_Black();
      // Set static field: static public FlagCauldronColorer/ColorMode Black
      static void _set_Black(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // static field const value: static public FlagCauldronColorer/ColorMode Clear
      static constexpr const int Clear = 5;
      // Get static field: static public FlagCauldronColorer/ColorMode Clear
      static ::GlobalNamespace::FlagCauldronColorer::ColorMode _get_Clear();
      // Set static field: static public FlagCauldronColorer/ColorMode Clear
      static void _set_Clear(::GlobalNamespace::FlagCauldronColorer::ColorMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FlagCauldronColorer/ColorMode
    #pragma pack(pop)
    static check_size<sizeof(FlagCauldronColorer::ColorMode), 0 + sizeof(int)> __GlobalNamespace_FlagCauldronColorer_ColorModeSizeCheck;
    static_assert(sizeof(FlagCauldronColorer::ColorMode) == 0x4);
    public:
    // public FlagCauldronColorer/ColorMode mode
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::FlagCauldronColorer::ColorMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FlagCauldronColorer::ColorMode) == 0x4);
    // Padding between fields: mode and: colorPoint
    char __padding0[0x4] = {};
    // public UnityEngine.Transform colorPoint
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* colorPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public FlagCauldronColorer/ColorMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FlagCauldronColorer::ColorMode& dyn_mode();
    // Get instance field reference: public UnityEngine.Transform colorPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_colorPoint();
    // public System.Void .ctor()
    // Offset: 0x279AEA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlagCauldronColorer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlagCauldronColorer*, creationType>()));
    }
  }; // FlagCauldronColorer
  #pragma pack(pop)
  static check_size<sizeof(FlagCauldronColorer), 40 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_FlagCauldronColorerSizeCheck;
  static_assert(sizeof(FlagCauldronColorer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlagCauldronColorer::ColorMode, "", "FlagCauldronColorer/ColorMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlagCauldronColorer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
