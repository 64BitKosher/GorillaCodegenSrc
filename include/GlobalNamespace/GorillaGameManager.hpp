// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Realtime.IInRoomCallbacks
#include "Photon/Realtime/IInRoomCallbacks.hpp"
// Including type: IGorillaSerializeable
#include "GlobalNamespace/IGorillaSerializeable.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: GameModeSerializer
  class GameModeSerializer;
  // Forward declaring type: NetPlayer
  class NetPlayer;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: GorillaGameModes
namespace GorillaGameModes {
  // Forward declaring type: GameModeType
  struct GameModeType;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaGameManager
  class GorillaGameManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaGameManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaGameManager*, "", "GorillaGameManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaGameManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaGameManager : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Realtime::IInRoomCallbacks, public ::GlobalNamespace::IGorillaSerializeable, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    // Nested type: ::GlobalNamespace::GorillaGameManager::OnTouchDelegate
    class OnTouchDelegate;
    // Nested type: ::GlobalNamespace::GorillaGameManager::$$c__DisplayClass57_0
    class $$c__DisplayClass57_0;
    public:
    // public Photon.Realtime.Room currentRoom
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Realtime::Room* currentRoom;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Room*) == 0x8);
    // public System.Object obj
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* obj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Single fastJumpLimit
    // Size: 0x4
    // Offset: 0x30
    float fastJumpLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fastJumpMultiplier
    // Size: 0x4
    // Offset: 0x34
    float fastJumpMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowJumpLimit
    // Size: 0x4
    // Offset: 0x38
    float slowJumpLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowJumpMultiplier
    // Size: 0x4
    // Offset: 0x3C
    float slowJumpMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastCheck
    // Size: 0x4
    // Offset: 0x40
    float lastCheck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single checkCooldown
    // Size: 0x4
    // Offset: 0x44
    float checkCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single userDecayTime
    // Size: 0x4
    // Offset: 0x48
    float userDecayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: userDecayTime and: expectedUsersDecay
    char __padding8[0x4] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,System.Single> expectedUsersDecay
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::StringW, float>* expectedUsersDecay;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, float>*) == 0x8);
    // public System.Single startingToLookForFriend
    // Size: 0x4
    // Offset: 0x58
    float startingToLookForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeToSpendLookingForFriend
    // Size: 0x4
    // Offset: 0x5C
    float timeToSpendLookingForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean successfullyFoundFriend
    // Size: 0x1
    // Offset: 0x60
    bool successfullyFoundFriend;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: successfullyFoundFriend and: maxHitDeltaSlop
    char __padding12[0x3] = {};
    // private System.Single maxHitDeltaSlop
    // Size: 0x4
    // Offset: 0x64
    float maxHitDeltaSlop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagDistanceThreshold
    // Size: 0x4
    // Offset: 0x68
    float tagDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean testAssault
    // Size: 0x1
    // Offset: 0x6C
    bool testAssault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean endGameManually
    // Size: 0x1
    // Offset: 0x6D
    bool endGameManually;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: endGameManually and: currentMasterClient
    char __padding16[0x2] = {};
    // public Photon.Realtime.Player currentMasterClient
    // Size: 0x8
    // Offset: 0x70
    ::Photon::Realtime::Player* currentMasterClient;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Pun.PhotonView returnPhotonView
    // Size: 0x8
    // Offset: 0x78
    ::Photon::Pun::PhotonView* returnPhotonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public VRRig returnRig
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::VRRig* returnRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private Photon.Realtime.Player outPlayer
    // Size: 0x8
    // Offset: 0x88
    ::Photon::Realtime::Player* outPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Int32 outInt
    // Size: 0x4
    // Offset: 0x90
    int outInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: outInt and: tempRig
    char __padding21[0x4] = {};
    // private VRRig tempRig
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::VRRig* tempRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public Photon.Realtime.Player[] currentPlayerArray
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::Photon::Realtime::Player*> currentPlayerArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Realtime::Player*>) == 0x8);
    // public System.Single[] playerSpeed
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<float> playerSpeed;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private RigContainer outContainer
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::RigContainer* outContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private Photon.Realtime.Player playerTemp
    // Size: 0x8
    // Offset: 0xB8
    ::Photon::Realtime::Player* playerTemp;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private RigContainer tempRC
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::RigContainer* tempRC;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0xC8
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TickRunning and: serializer
    char __padding28[0x7] = {};
    // private GameModeSerializer serializer
    // Size: 0x8
    // Offset: 0xD0
    ::GlobalNamespace::GameModeSerializer* serializer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameModeSerializer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IInRoomCallbacks
    operator ::Photon::Realtime::IInRoomCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IInRoomCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IGorillaSerializeable
    operator ::GlobalNamespace::IGorillaSerializeable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IGorillaSerializeable*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get static field: static private GorillaGameManager/OnTouchDelegate OnTouch
    static ::GlobalNamespace::GorillaGameManager::OnTouchDelegate* _get_OnTouch();
    // Set static field: static private GorillaGameManager/OnTouchDelegate OnTouch
    static void _set_OnTouch(::GlobalNamespace::GorillaGameManager::OnTouchDelegate* value);
    // Get static field: static private System.Action onInstanceReady
    static ::System::Action* _get_onInstanceReady();
    // Set static field: static private System.Action onInstanceReady
    static void _set_onInstanceReady(::System::Action* value);
    // Get static field: static private System.Boolean replicatedClientReady
    static bool _get_replicatedClientReady();
    // Set static field: static private System.Boolean replicatedClientReady
    static void _set_replicatedClientReady(bool value);
    // Get static field: static private System.Action onReplicatedClientReady
    static ::System::Action* _get_onReplicatedClientReady();
    // Set static field: static private System.Action onReplicatedClientReady
    static void _set_onReplicatedClientReady(::System::Action* value);
    // Get instance field reference: public Photon.Realtime.Room currentRoom
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Room*& dyn_currentRoom();
    // Get instance field reference: public System.Object obj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_obj();
    // Get instance field reference: public System.Single fastJumpLimit
    [[deprecated("Use field access instead!")]] float& dyn_fastJumpLimit();
    // Get instance field reference: public System.Single fastJumpMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_fastJumpMultiplier();
    // Get instance field reference: public System.Single slowJumpLimit
    [[deprecated("Use field access instead!")]] float& dyn_slowJumpLimit();
    // Get instance field reference: public System.Single slowJumpMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_slowJumpMultiplier();
    // Get instance field reference: public System.Single lastCheck
    [[deprecated("Use field access instead!")]] float& dyn_lastCheck();
    // Get instance field reference: public System.Single checkCooldown
    [[deprecated("Use field access instead!")]] float& dyn_checkCooldown();
    // Get instance field reference: public System.Single userDecayTime
    [[deprecated("Use field access instead!")]] float& dyn_userDecayTime();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Single> expectedUsersDecay
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, float>*& dyn_expectedUsersDecay();
    // Get instance field reference: public System.Single startingToLookForFriend
    [[deprecated("Use field access instead!")]] float& dyn_startingToLookForFriend();
    // Get instance field reference: public System.Single timeToSpendLookingForFriend
    [[deprecated("Use field access instead!")]] float& dyn_timeToSpendLookingForFriend();
    // Get instance field reference: public System.Boolean successfullyFoundFriend
    [[deprecated("Use field access instead!")]] bool& dyn_successfullyFoundFriend();
    // Get instance field reference: private System.Single maxHitDeltaSlop
    [[deprecated("Use field access instead!")]] float& dyn_maxHitDeltaSlop();
    // Get instance field reference: public System.Single tagDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_tagDistanceThreshold();
    // Get instance field reference: public System.Boolean testAssault
    [[deprecated("Use field access instead!")]] bool& dyn_testAssault();
    // Get instance field reference: public System.Boolean endGameManually
    [[deprecated("Use field access instead!")]] bool& dyn_endGameManually();
    // Get instance field reference: public Photon.Realtime.Player currentMasterClient
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentMasterClient();
    // Get instance field reference: public Photon.Pun.PhotonView returnPhotonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_returnPhotonView();
    // Get instance field reference: public VRRig returnRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_returnRig();
    // Get instance field reference: private Photon.Realtime.Player outPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_outPlayer();
    // Get instance field reference: private System.Int32 outInt
    [[deprecated("Use field access instead!")]] int& dyn_outInt();
    // Get instance field reference: private VRRig tempRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_tempRig();
    // Get instance field reference: public Photon.Realtime.Player[] currentPlayerArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Realtime::Player*>& dyn_currentPlayerArray();
    // Get instance field reference: public System.Single[] playerSpeed
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_playerSpeed();
    // Get instance field reference: private RigContainer outContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_outContainer();
    // Get instance field reference: private Photon.Realtime.Player playerTemp
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_playerTemp();
    // Get instance field reference: private RigContainer tempRC
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_tempRC();
    // Get instance field reference: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemTick_TickRunning$k__BackingField();
    // Get instance field reference: private GameModeSerializer serializer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameModeSerializer*& dyn_serializer();
    // static public System.Void add_OnTouch(GorillaGameManager/OnTouchDelegate value)
    // Offset: 0x27073E4
    static void add_OnTouch(::GlobalNamespace::GorillaGameManager::OnTouchDelegate* value);
    // static public System.Void remove_OnTouch(GorillaGameManager/OnTouchDelegate value)
    // Offset: 0x270749C
    static void remove_OnTouch(::GlobalNamespace::GorillaGameManager::OnTouchDelegate* value);
    // static public GorillaGameManager get_instance()
    // Offset: 0x2707554
    static ::GlobalNamespace::GorillaGameManager* get_instance();
    // private System.Boolean ITickSystemTick.get_TickRunning()
    // Offset: 0x27075DC
    bool ITickSystemTick_get_TickRunning();
    // private System.Void ITickSystemTick.set_TickRunning(System.Boolean value)
    // Offset: 0x27075E4
    void ITickSystemTick_set_TickRunning(bool value);
    // public System.Void Awake()
    // Offset: 0x2700C88
    void Awake();
    // public System.Void Tick()
    // Offset: 0x2703C6C
    void Tick();
    // public System.Void InfrequentUpdate()
    // Offset: 0x27042BC
    void InfrequentUpdate();
    // public System.String GameModeName()
    // Offset: 0x27075F0
    ::StringW GameModeName();
    // public System.Void ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    // Offset: 0x2707630
    void ReportTag(::Photon::Realtime::Player* taggedPlayer, ::Photon::Realtime::Player* taggingPlayer);
    // public System.Void HitPlayer(Photon.Realtime.Player player)
    // Offset: 0x2707634
    void HitPlayer(::Photon::Realtime::Player* player);
    // public System.Boolean CanAffectPlayer(Photon.Realtime.Player player, System.Boolean thisFrame)
    // Offset: 0x2707638
    bool CanAffectPlayer(::Photon::Realtime::Player* player, bool thisFrame);
    // public System.Void NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didTutorial)
    // Offset: 0x2707640
    void NewVRRig(::Photon::Realtime::Player* player, int vrrigPhotonViewID, bool didTutorial);
    // public System.Boolean LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0x2707644
    bool LocalCanTag(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public Photon.Pun.PhotonView FindVRRigForPlayer(Photon.Realtime.Player player)
    // Offset: 0x270764C
    ::Photon::Pun::PhotonView* FindVRRigForPlayer(::Photon::Realtime::Player* player);
    // public VRRig FindPlayerVRRig(Photon.Realtime.Player player)
    // Offset: 0x2707670
    ::GlobalNamespace::VRRig* FindPlayerVRRig(::Photon::Realtime::Player* player);
    // static public VRRig StaticFindRigForPlayer(Photon.Realtime.Player player)
    // Offset: 0x2707770
    static ::GlobalNamespace::VRRig* StaticFindRigForPlayer(::Photon::Realtime::Player* player);
    // static public System.Boolean IsPlayerBanned(Photon.Realtime.Player player)
    // Offset: 0x27028BC
    static bool IsPlayerBanned(::Photon::Realtime::Player* player);
    // static public System.Boolean IsPlayerBanned(NetPlayer netPlayer)
    // Offset: 0x270789C
    static bool IsPlayerBanned(::GlobalNamespace::NetPlayer* netPlayer);
    // static public System.Boolean IsPlayerInitialized(Photon.Realtime.Player player)
    // Offset: 0x2702914
    static bool IsPlayerInitialized(::Photon::Realtime::Player* player);
    // public System.Single[] LocalPlayerSpeed()
    // Offset: 0x270791C
    ::ArrayW<float> LocalPlayerSpeed();
    // public System.Int32 MyMatIndex(Photon.Realtime.Player forPlayer)
    // Offset: 0x270795C
    int MyMatIndex(::Photon::Realtime::Player* forPlayer);
    // public System.Boolean ValidGameMode()
    // Offset: 0x2707964
    bool ValidGameMode();
    // static public System.Void OnInstanceReady(System.Action action)
    // Offset: 0x2707A70
    static void OnInstanceReady(::System::Action* action);
    // static public System.Void ReplicatedClientReady()
    // Offset: 0x2707B38
    static void ReplicatedClientReady();
    // static public System.Void OnReplicatedClientReady(System.Action action)
    // Offset: 0x2707B84
    static void OnReplicatedClientReady(::System::Action* action);
    // GameModeSerializer get_Serializer()
    // Offset: 0x2707C60
    ::GlobalNamespace::GameModeSerializer* get_Serializer();
    // System.Void NetworkLinkSetup(GameModeSerializer netSerializer)
    // Offset: 0x2707C68
    void NetworkLinkSetup(::GlobalNamespace::GameModeSerializer* netSerializer);
    // System.Void NetworkLinkDestroyed(GameModeSerializer netSerializer)
    // Offset: 0x2707C70
    void NetworkLinkDestroyed(::GlobalNamespace::GameModeSerializer* netSerializer);
    // public GorillaGameModes.GameModeType GameType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GorillaGameModes::GameModeType GameType();
    // public System.Void OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void Reset()
    // Offset: 0x2701580
    void Reset();
    // public System.Void StartPlaying()
    // Offset: 0x2700D58
    void StartPlaying();
    // public System.Void StopPlaying()
    // Offset: 0x27013B4
    void StopPlaying();
    // public System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x270341C
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x2702F40
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public System.Void OnMasterClientSwitched(Photon.Realtime.Player newMaster)
    // Offset: 0x2707D00
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMaster);
    // public System.Void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    // Offset: 0x2707D04
    void OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged);
    // public System.Void OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
    // Offset: 0x2707D08
    void OnPlayerPropertiesUpdate(::Photon::Realtime::Player* targetPlayer, ::ExitGames::Client::Photon::Hashtable* changedProps);
    // static System.Void ForceStopGame_DisconnectAndDestroy()
    // Offset: 0x2707D94
    static void ForceStopGame_DisconnectAndDestroy();
    // protected System.Void .ctor()
    // Offset: 0x2704624
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaGameManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaGameManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaGameManager*, creationType>()));
    }
  }; // GorillaGameManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaGameManager), 208 + sizeof(::GlobalNamespace::GameModeSerializer*)> __GlobalNamespace_GorillaGameManagerSizeCheck;
  static_assert(sizeof(GorillaGameManager) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::add_OnTouch
// Il2CppName: add_OnTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaGameManager::OnTouchDelegate*)>(&GlobalNamespace::GorillaGameManager::add_OnTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GorillaGameManager/OnTouchDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "add_OnTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::remove_OnTouch
// Il2CppName: remove_OnTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::GorillaGameManager::OnTouchDelegate*)>(&GlobalNamespace::GorillaGameManager::remove_OnTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GorillaGameManager/OnTouchDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "remove_OnTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaGameManager* (*)()>(&GlobalNamespace::GorillaGameManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ITickSystemTick_get_TickRunning
// Il2CppName: ITickSystemTick.get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::ITickSystemTick_get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ITickSystemTick.get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ITickSystemTick_set_TickRunning
// Il2CppName: ITickSystemTick.set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(bool)>(&GlobalNamespace::GorillaGameManager::ITickSystemTick_set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ITickSystemTick.set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::GameModeName
// Il2CppName: GameModeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::GameModeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "GameModeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ReportTag
// Il2CppName: ReportTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::ReportTag)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ReportTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, taggingPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::HitPlayer
// Il2CppName: HitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::HitPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "HitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::CanAffectPlayer
// Il2CppName: CanAffectPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaGameManager::CanAffectPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* thisFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "CanAffectPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, thisFrame});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::NewVRRig
// Il2CppName: NewVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, int, bool)>(&GlobalNamespace::GorillaGameManager::NewVRRig)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* vrrigPhotonViewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* didTutorial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "NewVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrigPhotonViewID, didTutorial});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::LocalCanTag
// Il2CppName: LocalCanTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::LocalCanTag)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "LocalCanTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::FindVRRigForPlayer
// Il2CppName: FindVRRigForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::FindVRRigForPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "FindVRRigForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::FindPlayerVRRig
// Il2CppName: FindPlayerVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::FindPlayerVRRig)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "FindPlayerVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::StaticFindRigForPlayer
// Il2CppName: StaticFindRigForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::VRRig* (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::StaticFindRigForPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "StaticFindRigForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::IsPlayerBanned
// Il2CppName: IsPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::IsPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "IsPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::IsPlayerBanned
// Il2CppName: IsPlayerBanned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::GorillaGameManager::IsPlayerBanned)> {
  static const MethodInfo* get() {
    static auto* netPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "IsPlayerBanned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::IsPlayerInitialized
// Il2CppName: IsPlayerInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::IsPlayerInitialized)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "IsPlayerInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::LocalPlayerSpeed
// Il2CppName: LocalPlayerSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::LocalPlayerSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "LocalPlayerSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::MyMatIndex
// Il2CppName: MyMatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::MyMatIndex)> {
  static const MethodInfo* get() {
    static auto* forPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "MyMatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ValidGameMode
// Il2CppName: ValidGameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::ValidGameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ValidGameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnInstanceReady
// Il2CppName: OnInstanceReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::GorillaGameManager::OnInstanceReady)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnInstanceReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ReplicatedClientReady
// Il2CppName: ReplicatedClientReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaGameManager::ReplicatedClientReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ReplicatedClientReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnReplicatedClientReady
// Il2CppName: OnReplicatedClientReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::GorillaGameManager::OnReplicatedClientReady)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnReplicatedClientReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_Serializer
// Il2CppName: get_Serializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameModeSerializer* (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::get_Serializer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_Serializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::NetworkLinkSetup
// Il2CppName: NetworkLinkSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::GlobalNamespace::GameModeSerializer*)>(&GlobalNamespace::GorillaGameManager::NetworkLinkSetup)> {
  static const MethodInfo* get() {
    static auto* netSerializer = &::il2cpp_utils::GetClassFromName("", "GameModeSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "NetworkLinkSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netSerializer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::NetworkLinkDestroyed
// Il2CppName: NetworkLinkDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::GlobalNamespace::GameModeSerializer*)>(&GlobalNamespace::GorillaGameManager::NetworkLinkDestroyed)> {
  static const MethodInfo* get() {
    static auto* netSerializer = &::il2cpp_utils::GetClassFromName("", "GameModeSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "NetworkLinkDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netSerializer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::GameType
// Il2CppName: GameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaGameModes::GameModeType (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::GameType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "GameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnSerializeRead
// Il2CppName: OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnSerializeWrite
// Il2CppName: OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::StartPlaying
// Il2CppName: StartPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::StartPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "StartPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::StopPlaying
// Il2CppName: StopPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::StopPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "StopPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMaster = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMaster});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnRoomPropertiesUpdate
// Il2CppName: OnRoomPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::ExitGames::Client::Photon::Hashtable*)>(&GlobalNamespace::GorillaGameManager::OnRoomPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* propertiesThatChanged = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnRoomPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesThatChanged});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnPlayerPropertiesUpdate
// Il2CppName: OnPlayerPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::ExitGames::Client::Photon::Hashtable*)>(&GlobalNamespace::GorillaGameManager::OnPlayerPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* changedProps = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnPlayerPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, changedProps});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ForceStopGame_DisconnectAndDestroy
// Il2CppName: ForceStopGame_DisconnectAndDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GorillaGameManager::ForceStopGame_DisconnectAndDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ForceStopGame_DisconnectAndDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
