// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: ValueTuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  struct ValueTuple_4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Id128
  struct Id128;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Id128, "", "Id128");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Id128
  // [TokenAttribute] Offset: FFFFFFFF
  struct Id128/*, public ::System::ValueType, public ::System::IEquatable_1<::GlobalNamespace::Id128>, public ::System::IComparable_1<::GlobalNamespace::Id128>, public ::System::IEquatable_1<::System::Guid>, public ::System::IEquatable_1<::UnityEngine::Hash128>*/ {
    public:
    public:
    // public System.Int64 x
    // Size: 0x8
    // Offset: 0x0
    int64_t x;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 y
    // Size: 0x8
    // Offset: 0x8
    int64_t y;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int32 a
    // Size: 0x4
    // Offset: 0x0
    int a;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 b
    // Size: 0x4
    // Offset: 0x4
    int b;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 c
    // Size: 0x4
    // Offset: 0x8
    int c;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 d
    // Size: 0x4
    // Offset: 0xC
    int d;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Guid guid
    // Size: 0x10
    // Offset: 0x0
    ::System::Guid guid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // public UnityEngine.Hash128 h128
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Hash128 h128;
    // Field size check
    static_assert(sizeof(::UnityEngine::Hash128) == 0x10);
    public:
    // Creating value type constructor for type: Id128
    constexpr Id128(int64_t x_ = {}, int64_t y_ = {}, int a_ = {}, int b_ = {}, int c_ = {}, int d_ = {}, ::System::Guid guid_ = {}, ::UnityEngine::Hash128 h128_ = {}) noexcept : x{x_}, y{y_}, a{a_}, b{b_}, c{c_}, d{d_}, guid{guid_}, h128{h128_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::Id128>
    operator ::System::IEquatable_1<::GlobalNamespace::Id128>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::Id128>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::GlobalNamespace::Id128>
    operator ::System::IComparable_1<::GlobalNamespace::Id128>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::GlobalNamespace::Id128>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::Guid>
    operator ::System::IEquatable_1<::System::Guid>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::Guid>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Hash128>
    operator ::System::IEquatable_1<::UnityEngine::Hash128>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Hash128>*>(this);
    }
    // Get static field: static public readonly Id128 Empty
    static ::GlobalNamespace::Id128 _get_Empty();
    // Set static field: static public readonly Id128 Empty
    static void _set_Empty(::GlobalNamespace::Id128 value);
    // Get instance field reference: public System.Int64 x
    [[deprecated("Use field access instead!")]] int64_t& dyn_x();
    // Get instance field reference: public System.Int64 y
    [[deprecated("Use field access instead!")]] int64_t& dyn_y();
    // Get instance field reference: public System.Int32 a
    [[deprecated("Use field access instead!")]] int& dyn_a();
    // Get instance field reference: public System.Int32 b
    [[deprecated("Use field access instead!")]] int& dyn_b();
    // Get instance field reference: public System.Int32 c
    [[deprecated("Use field access instead!")]] int& dyn_c();
    // Get instance field reference: public System.Int32 d
    [[deprecated("Use field access instead!")]] int& dyn_d();
    // Get instance field reference: public System.Guid guid
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_guid();
    // Get instance field reference: public UnityEngine.Hash128 h128
    [[deprecated("Use field access instead!")]] ::UnityEngine::Hash128& dyn_h128();
    // public System.Void .ctor(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d)
    // Offset: 0x274DB60
    Id128(int a, int b, int c, int d);
    // public System.Void .ctor(System.Int64 x, System.Int64 y)
    // Offset: 0x274DBC0
    Id128(int64_t x, int64_t y);
    // public System.Void .ctor(UnityEngine.Hash128 hash)
    // Offset: 0x274DC0C
    Id128(::UnityEngine::Hash128 hash);
    // public System.Void .ctor(System.Guid guid)
    // Offset: 0x274DC58
    Id128(::System::Guid guid);
    // public System.Void .ctor(System.String guid)
    // Offset: 0x274DC60
    Id128(::StringW guid);
    // public System.Void .ctor(System.Byte[] bytes)
    // Offset: 0x274DCE8
    Id128(::ArrayW<uint8_t> bytes);
    // public System.ValueTuple`2<System.Int64,System.Int64> ToLongs()
    // Offset: 0x274DDC4
    ::System::ValueTuple_2<int64_t, int64_t> ToLongs();
    // public System.ValueTuple`4<System.Int32,System.Int32,System.Int32,System.Int32> ToInts()
    // Offset: 0x274DE24
    ::System::ValueTuple_4<int, int, int, int> ToInts();
    // public System.Byte[] ToByteArray()
    // Offset: 0x274DE88
    ::ArrayW<uint8_t> ToByteArray();
    // public System.Boolean Equals(Id128 id)
    // Offset: 0x274DE90
    bool Equals(::GlobalNamespace::Id128 id);
    // public System.Boolean Equals(System.Guid g)
    // Offset: 0x274DEB4
    bool Equals(::System::Guid g);
    // public System.Boolean Equals(UnityEngine.Hash128 h)
    // Offset: 0x274DED0
    bool Equals(::UnityEngine::Hash128 h);
    // public System.Int32 CompareTo(Id128 id)
    // Offset: 0x274E0B8
    int CompareTo(::GlobalNamespace::Id128 id);
    // public System.Int32 CompareTo(System.Object obj)
    // Offset: 0x274E0F8
    int CompareTo(::Il2CppObject* obj);
    // static public Id128 NewId()
    // Offset: 0x274E228
    static ::GlobalNamespace::Id128 NewId();
    // static public Id128 CalculateMD5(System.String s)
    // Offset: 0x274E230
    static ::GlobalNamespace::Id128 CalculateMD5(::StringW s);
    // static public Id128 CalculateSHV2(System.String s)
    // Offset: 0x274E44C
    static ::GlobalNamespace::Id128 CalculateSHV2(::StringW s);
    // static public Id128 op_Explicit(System.String s)
    // Offset: 0x274E7B0
    explicit Id128(::StringW& s);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x274DEEC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0x274DFF4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x274DFFC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Id128
  // WARNING Not writing size check since size may be invalid!
  // static public System.Boolean op_Equality(Id128 j, Id128 k)
  // Offset: 0x274E52C
  bool operator ==(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_Inequality(Id128 j, Id128 k)
  // Offset: 0x274E544
  bool operator !=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_Equality(Id128 j, System.Guid k)
  // Offset: 0x274E55C
  bool operator ==(const ::GlobalNamespace::Id128& j, const ::System::Guid& k);
  // static public System.Boolean op_Inequality(Id128 j, System.Guid k)
  // Offset: 0x274E564
  bool operator !=(const ::GlobalNamespace::Id128& j, const ::System::Guid& k);
  // static public System.Boolean op_Equality(System.Guid j, Id128 k)
  // Offset: 0x274E580
  bool operator ==(const ::System::Guid& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_Inequality(System.Guid j, Id128 k)
  // Offset: 0x274E5B0
  bool operator !=(const ::System::Guid& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_Equality(Id128 j, UnityEngine.Hash128 k)
  // Offset: 0x274E5E4
  bool operator ==(const ::GlobalNamespace::Id128& j, const ::UnityEngine::Hash128& k);
  // static public System.Boolean op_Inequality(Id128 j, UnityEngine.Hash128 k)
  // Offset: 0x274E5EC
  bool operator !=(const ::GlobalNamespace::Id128& j, const ::UnityEngine::Hash128& k);
  // static public System.Boolean op_Equality(UnityEngine.Hash128 j, Id128 k)
  // Offset: 0x274E608
  bool operator ==(const ::UnityEngine::Hash128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_Inequality(UnityEngine.Hash128 j, Id128 k)
  // Offset: 0x274E638
  bool operator !=(const ::UnityEngine::Hash128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_LessThan(Id128 j, Id128 k)
  // Offset: 0x274E66C
  bool operator <(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_GreaterThan(Id128 j, Id128 k)
  // Offset: 0x274E6B8
  bool operator >(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_LessThanOrEqual(Id128 j, Id128 k)
  // Offset: 0x274E708
  bool operator <=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
  // static public System.Boolean op_GreaterThanOrEqual(Id128 j, Id128 k)
  // Offset: 0x274E758
  bool operator >=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Id128::ToLongs
// Il2CppName: ToLongs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<int64_t, int64_t> (GlobalNamespace::Id128::*)()>(&GlobalNamespace::Id128::ToLongs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "ToLongs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::ToInts
// Il2CppName: ToInts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_4<int, int, int, int> (GlobalNamespace::Id128::*)()>(&GlobalNamespace::Id128::ToInts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "ToInts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (GlobalNamespace::Id128::*)()>(&GlobalNamespace::Id128::ToByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Id128::*)(::GlobalNamespace::Id128)>(&GlobalNamespace::Id128::Equals)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("", "Id128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Id128::*)(::System::Guid)>(&GlobalNamespace::Id128::Equals)> {
  static const MethodInfo* get() {
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Id128::*)(::UnityEngine::Hash128)>(&GlobalNamespace::Id128::Equals)> {
  static const MethodInfo* get() {
    static auto* h = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{h});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::Id128::*)(::GlobalNamespace::Id128)>(&GlobalNamespace::Id128::CompareTo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("", "Id128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::Id128::*)(::Il2CppObject*)>(&GlobalNamespace::Id128::CompareTo)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::NewId
// Il2CppName: NewId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Id128 (*)()>(&GlobalNamespace::Id128::NewId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "NewId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::CalculateMD5
// Il2CppName: CalculateMD5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Id128 (*)(::StringW)>(&GlobalNamespace::Id128::CalculateMD5)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "CalculateMD5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::CalculateSHV2
// Il2CppName: CalculateSHV2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Id128 (*)(::StringW)>(&GlobalNamespace::Id128::CalculateSHV2)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "CalculateSHV2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::Id128
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Id128::*)(::Il2CppObject*)>(&GlobalNamespace::Id128::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::Id128::*)()>(&GlobalNamespace::Id128::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::Id128::*)()>(&GlobalNamespace::Id128::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Id128), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::Id128::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
