// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaLocomotion.Gameplay.IGorillaGrabable
#include "GorillaLocomotion/Gameplay/IGorillaGrabable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent`1<T0>
  template<typename T0>
  class UnityEvent_1;
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaGrabber
  class GorillaGrabber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandHold
  class HandHold;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandHold);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandHold*, "", "HandHold");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: HandHold
  // [TokenAttribute] Offset: FFFFFFFF
  class HandHold : public ::UnityEngine::MonoBehaviour/*, public ::GorillaLocomotion::Gameplay::IGorillaGrabable*/ {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Transform> attached
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>* attached;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<UnityEngine.Vector3> OnGrab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent_1<::UnityEngine::Vector3>* OnGrab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Events.UnityEvent OnRelease
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* OnRelease;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Boolean rotatePlayerWhenHeld
    // Size: 0x1
    // Offset: 0x38
    bool rotatePlayerWhenHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaLocomotion::Gameplay::IGorillaGrabable
    operator ::GorillaLocomotion::Gameplay::IGorillaGrabable() noexcept {
      return *reinterpret_cast<::GorillaLocomotion::Gameplay::IGorillaGrabable*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Transform> attached
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>*& dyn_attached();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<UnityEngine.Vector3> OnGrab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::UnityEngine::Vector3>*& dyn_OnGrab();
    // Get instance field reference: private UnityEngine.Events.UnityEvent OnRelease
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_OnRelease();
    // Get instance field reference: private System.Boolean rotatePlayerWhenHeld
    [[deprecated("Use field access instead!")]] bool& dyn_rotatePlayerWhenHeld();
    // private UnityEngine.Transform GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabbed(GorillaGrabber g)
    // Offset: 0x27254D0
    ::UnityEngine::Transform* GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabbed(::GlobalNamespace::GorillaGrabber* g);
    // private UnityEngine.Transform GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabReleased(GorillaGrabber g)
    // Offset: 0x2725648
    ::UnityEngine::Transform* GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabReleased(::GlobalNamespace::GorillaGrabber* g);
    // public System.Void .ctor()
    // Offset: 0x2725798
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandHold* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandHold::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandHold*, creationType>()));
    }
  }; // HandHold
  #pragma pack(pop)
  static check_size<sizeof(HandHold), 56 + sizeof(bool)> __GlobalNamespace_HandHoldSizeCheck;
  static_assert(sizeof(HandHold) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandHold::GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabbed
// Il2CppName: GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::HandHold::*)(::GlobalNamespace::GorillaGrabber*)>(&GlobalNamespace::HandHold::GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabbed)> {
  static const MethodInfo* get() {
    static auto* g = &::il2cpp_utils::GetClassFromName("", "GorillaGrabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandHold*), "GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandHold::GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabReleased
// Il2CppName: GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::HandHold::*)(::GlobalNamespace::GorillaGrabber*)>(&GlobalNamespace::HandHold::GorillaLocomotion_Gameplay_IGorillaGrabable_OnGrabReleased)> {
  static const MethodInfo* get() {
    static auto* g = &::il2cpp_utils::GetClassFromName("", "GorillaGrabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandHold*), "GorillaLocomotion.Gameplay.IGorillaGrabable.OnGrabReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandHold::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
