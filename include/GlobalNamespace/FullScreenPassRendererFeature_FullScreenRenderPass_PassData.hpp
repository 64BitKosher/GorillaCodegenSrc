// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FullScreenPassRendererFeature/FullScreenRenderPass
#include "GlobalNamespace/FullScreenPassRendererFeature_FullScreenRenderPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData*, "", "FullScreenPassRendererFeature/FullScreenRenderPass/PassData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: FullScreenPassRendererFeature/FullScreenRenderPass/PassData
  // [TokenAttribute] Offset: FFFFFFFF
  class FullScreenPassRendererFeature::FullScreenRenderPass::PassData : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Material effectMaterial
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Material* effectMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // System.Int32 passIndex
    // Size: 0x4
    // Offset: 0x18
    int passIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean requiresColor
    // Size: 0x1
    // Offset: 0x1C
    bool requiresColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isBeforeTransparents
    // Size: 0x1
    // Offset: 0x1D
    bool isBeforeTransparents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBeforeTransparents and: profilingSampler
    char __padding3[0x2] = {};
    // public UnityEngine.Rendering.ProfilingSampler profilingSampler
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::ProfilingSampler* profilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // public UnityEngine.Rendering.RTHandle copiedColor
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::RTHandle* copiedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Material effectMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_effectMaterial();
    // Get instance field reference: System.Int32 passIndex
    [[deprecated("Use field access instead!")]] int& dyn_passIndex();
    // Get instance field reference: System.Boolean requiresColor
    [[deprecated("Use field access instead!")]] bool& dyn_requiresColor();
    // Get instance field reference: System.Boolean isBeforeTransparents
    [[deprecated("Use field access instead!")]] bool& dyn_isBeforeTransparents();
    // Get instance field reference: public UnityEngine.Rendering.ProfilingSampler profilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_profilingSampler();
    // Get instance field reference: public UnityEngine.Rendering.RTHandle copiedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_copiedColor();
    // public System.Void .ctor()
    // Offset: 0x5269BC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullScreenPassRendererFeature::FullScreenRenderPass::PassData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullScreenPassRendererFeature::FullScreenRenderPass::PassData*, creationType>()));
    }
  }; // FullScreenPassRendererFeature/FullScreenRenderPass/PassData
  #pragma pack(pop)
  static check_size<sizeof(FullScreenPassRendererFeature::FullScreenRenderPass::PassData), 40 + sizeof(::UnityEngine::Rendering::RTHandle*)> __GlobalNamespace_FullScreenPassRendererFeature_FullScreenRenderPass_PassDataSizeCheck;
  static_assert(sizeof(FullScreenPassRendererFeature::FullScreenRenderPass::PassData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FullScreenPassRendererFeature::FullScreenRenderPass::PassData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
