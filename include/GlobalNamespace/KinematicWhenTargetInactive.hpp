// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: KinematicWhenTargetInactive
  class KinematicWhenTargetInactive;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::KinematicWhenTargetInactive);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::KinematicWhenTargetInactive*, "", "KinematicWhenTargetInactive");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: KinematicWhenTargetInactive
  // [TokenAttribute] Offset: FFFFFFFF
  class KinematicWhenTargetInactive : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Rigidbody[] rigidBodies
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Rigidbody*> rigidBodies;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rigidbody*>) == 0x8);
    // public UnityEngine.GameObject target
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Rigidbody[] rigidBodies
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rigidbody*>& dyn_rigidBodies();
    // Get instance field reference: public UnityEngine.GameObject target
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_target();
    // private System.Void LateUpdate()
    // Offset: 0x26D9BA8
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x26D9C94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KinematicWhenTargetInactive* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KinematicWhenTargetInactive::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KinematicWhenTargetInactive*, creationType>()));
    }
  }; // KinematicWhenTargetInactive
  #pragma pack(pop)
  static check_size<sizeof(KinematicWhenTargetInactive), 40 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_KinematicWhenTargetInactiveSizeCheck;
  static_assert(sizeof(KinematicWhenTargetInactive) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::KinematicWhenTargetInactive::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KinematicWhenTargetInactive::*)()>(&GlobalNamespace::KinematicWhenTargetInactive::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KinematicWhenTargetInactive*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KinematicWhenTargetInactive::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
