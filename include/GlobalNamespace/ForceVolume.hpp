// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ForceVolume
  class ForceVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ForceVolume);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ForceVolume*, "", "ForceVolume");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: ForceVolume
  // [TokenAttribute] Offset: FFFFFFFF
  class ForceVolume : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ForceVolume::AudioState
    struct AudioState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ForceVolume/AudioState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AudioState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AudioState
      constexpr AudioState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ForceVolume/AudioState None
      static constexpr const int None = 0;
      // Get static field: static public ForceVolume/AudioState None
      static ::GlobalNamespace::ForceVolume::AudioState _get_None();
      // Set static field: static public ForceVolume/AudioState None
      static void _set_None(::GlobalNamespace::ForceVolume::AudioState value);
      // static field const value: static public ForceVolume/AudioState Enter
      static constexpr const int Enter = 1;
      // Get static field: static public ForceVolume/AudioState Enter
      static ::GlobalNamespace::ForceVolume::AudioState _get_Enter();
      // Set static field: static public ForceVolume/AudioState Enter
      static void _set_Enter(::GlobalNamespace::ForceVolume::AudioState value);
      // static field const value: static public ForceVolume/AudioState Crescendo
      static constexpr const int Crescendo = 2;
      // Get static field: static public ForceVolume/AudioState Crescendo
      static ::GlobalNamespace::ForceVolume::AudioState _get_Crescendo();
      // Set static field: static public ForceVolume/AudioState Crescendo
      static void _set_Crescendo(::GlobalNamespace::ForceVolume::AudioState value);
      // static field const value: static public ForceVolume/AudioState Loop
      static constexpr const int Loop = 3;
      // Get static field: static public ForceVolume/AudioState Loop
      static ::GlobalNamespace::ForceVolume::AudioState _get_Loop();
      // Set static field: static public ForceVolume/AudioState Loop
      static void _set_Loop(::GlobalNamespace::ForceVolume::AudioState value);
      // static field const value: static public ForceVolume/AudioState Exit
      static constexpr const int Exit = 4;
      // Get static field: static public ForceVolume/AudioState Exit
      static ::GlobalNamespace::ForceVolume::AudioState _get_Exit();
      // Set static field: static public ForceVolume/AudioState Exit
      static void _set_Exit(::GlobalNamespace::ForceVolume::AudioState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ForceVolume/AudioState
    #pragma pack(pop)
    static check_size<sizeof(ForceVolume::AudioState), 0 + sizeof(int)> __GlobalNamespace_ForceVolume_AudioStateSizeCheck;
    static_assert(sizeof(ForceVolume::AudioState) == 0x4);
    public:
    // public System.Boolean scaleWithSize
    // Size: 0x1
    // Offset: 0x20
    bool scaleWithSize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scaleWithSize and: accel
    char __padding0[0x3] = {};
    // private System.Single accel
    // Size: 0x4
    // Offset: 0x24
    float accel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxDepth
    // Size: 0x4
    // Offset: 0x28
    float maxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x2C
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean disableGrip
    // Size: 0x1
    // Offset: 0x30
    bool disableGrip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean dampenLateralVelocity
    // Size: 0x1
    // Offset: 0x31
    bool dampenLateralVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dampenLateralVelocity and: dampenXVelPerc
    char __padding5[0x2] = {};
    // private System.Single dampenXVelPerc
    // Size: 0x4
    // Offset: 0x34
    float dampenXVelPerc;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single dampenZVelPerc
    // Size: 0x4
    // Offset: 0x38
    float dampenZVelPerc;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean applyPullToCenterAcceleration
    // Size: 0x1
    // Offset: 0x3C
    bool applyPullToCenterAcceleration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyPullToCenterAcceleration and: pullToCenterAccel
    char __padding8[0x3] = {};
    // private System.Single pullToCenterAccel
    // Size: 0x4
    // Offset: 0x40
    float pullToCenterAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pullToCenterMaxSpeed
    // Size: 0x4
    // Offset: 0x44
    float pullToCenterMaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pullTOCenterMinDistance
    // Size: 0x4
    // Offset: 0x48
    float pullTOCenterMinDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: pullTOCenterMinDistance and: volume
    char __padding11[0x4] = {};
    // private UnityEngine.Collider volume
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Collider* volume;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public UnityEngine.AudioClip enterClip
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* enterClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip exitClip
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* exitClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip loopClip
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioClip* loopClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip loopCresendoClip
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AudioClip* loopCresendoClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Vector3 enterPos
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 enterPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private ForceVolume/AudioState audioState
    // Size: 0x4
    // Offset: 0x8C
    ::GlobalNamespace::ForceVolume::AudioState audioState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ForceVolume::AudioState) == 0x4);
    public:
    // Get instance field reference: public System.Boolean scaleWithSize
    [[deprecated("Use field access instead!")]] bool& dyn_scaleWithSize();
    // Get instance field reference: private System.Single accel
    [[deprecated("Use field access instead!")]] float& dyn_accel();
    // Get instance field reference: private System.Single maxDepth
    [[deprecated("Use field access instead!")]] float& dyn_maxDepth();
    // Get instance field reference: private System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: private System.Boolean disableGrip
    [[deprecated("Use field access instead!")]] bool& dyn_disableGrip();
    // Get instance field reference: private System.Boolean dampenLateralVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_dampenLateralVelocity();
    // Get instance field reference: private System.Single dampenXVelPerc
    [[deprecated("Use field access instead!")]] float& dyn_dampenXVelPerc();
    // Get instance field reference: private System.Single dampenZVelPerc
    [[deprecated("Use field access instead!")]] float& dyn_dampenZVelPerc();
    // Get instance field reference: private System.Boolean applyPullToCenterAcceleration
    [[deprecated("Use field access instead!")]] bool& dyn_applyPullToCenterAcceleration();
    // Get instance field reference: private System.Single pullToCenterAccel
    [[deprecated("Use field access instead!")]] float& dyn_pullToCenterAccel();
    // Get instance field reference: private System.Single pullToCenterMaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_pullToCenterMaxSpeed();
    // Get instance field reference: private System.Single pullTOCenterMinDistance
    [[deprecated("Use field access instead!")]] float& dyn_pullTOCenterMinDistance();
    // Get instance field reference: private UnityEngine.Collider volume
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_volume();
    // Get instance field reference: public UnityEngine.AudioClip enterClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_enterClip();
    // Get instance field reference: public UnityEngine.AudioClip exitClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_exitClip();
    // Get instance field reference: public UnityEngine.AudioClip loopClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_loopClip();
    // Get instance field reference: public UnityEngine.AudioClip loopCresendoClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_loopCresendoClip();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.Vector3 enterPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_enterPos();
    // Get instance field reference: private ForceVolume/AudioState audioState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ForceVolume::AudioState& dyn_audioState();
    // private System.Void Awake()
    // Offset: 0x2756C84
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x2756CE4
    void LateUpdate();
    // private System.Boolean TriggerFilter(UnityEngine.Collider other, out UnityEngine.Rigidbody rb, out UnityEngine.Transform xf)
    // Offset: 0x2756DB8
    bool TriggerFilter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Rigidbody*> rb, ByRef<::UnityEngine::Transform*> xf);
    // public System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x2756FD4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x27570D0
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void OnTriggerStay(UnityEngine.Collider other)
    // Offset: 0x2757188
    void OnTriggerStay(::UnityEngine::Collider* other);
    // public System.Void OnDrawGizmosSelected()
    // Offset: 0x2757A88
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x2757BDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForceVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForceVolume*, creationType>()));
    }
  }; // ForceVolume
  #pragma pack(pop)
  static check_size<sizeof(ForceVolume), 140 + sizeof(::GlobalNamespace::ForceVolume::AudioState)> __GlobalNamespace_ForceVolumeSizeCheck;
  static_assert(sizeof(ForceVolume) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ForceVolume::AudioState, "", "ForceVolume/AudioState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)()>(&GlobalNamespace::ForceVolume::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)()>(&GlobalNamespace::ForceVolume::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::TriggerFilter
// Il2CppName: TriggerFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ForceVolume::*)(::UnityEngine::Collider*, ByRef<::UnityEngine::Rigidbody*>, ByRef<::UnityEngine::Transform*>)>(&GlobalNamespace::ForceVolume::TriggerFilter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* rb = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->this_arg;
    static auto* xf = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "TriggerFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, rb, xf});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ForceVolume::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ForceVolume::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::OnTriggerStay
// Il2CppName: OnTriggerStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ForceVolume::OnTriggerStay)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "OnTriggerStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ForceVolume::*)()>(&GlobalNamespace::ForceVolume::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ForceVolume*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ForceVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
