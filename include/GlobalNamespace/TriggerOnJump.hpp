// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RubberDuckEvents
  class RubberDuckEvents;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TriggerOnJump
  class TriggerOnJump;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TriggerOnJump);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TriggerOnJump*, "", "TriggerOnJump");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: TriggerOnJump
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerOnJump : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    public:
    // private System.Single minJumpStrength
    // Size: 0x4
    // Offset: 0x20
    float minJumpStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minJumpVertical
    // Size: 0x4
    // Offset: 0x24
    float minJumpVertical;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single cooldownTime
    // Size: 0x4
    // Offset: 0x28
    float cooldownTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cooldownTime and: onJumping
    char __padding2[0x4] = {};
    // private UnityEngine.Events.UnityEvent onJumping
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onJumping;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private RubberDuckEvents _events
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::RubberDuckEvents* events;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RubberDuckEvents*) == 0x8);
    // private System.Boolean playerOnGround
    // Size: 0x1
    // Offset: 0x40
    bool playerOnGround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerOnGround and: minJumpTime
    char __padding5[0x3] = {};
    // private System.Single minJumpTime
    // Size: 0x4
    // Offset: 0x44
    float minJumpTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean waitingForGrounding
    // Size: 0x1
    // Offset: 0x48
    bool waitingForGrounding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForGrounding and: jumpStartTime
    char __padding7[0x3] = {};
    // private System.Single jumpStartTime
    // Size: 0x4
    // Offset: 0x4C
    float jumpStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastActivationTime
    // Size: 0x4
    // Offset: 0x50
    float lastActivationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastActivationTime and: myRig
    char __padding9[0x4] = {};
    // private VRRig myRig
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean <TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get instance field reference: private System.Single minJumpStrength
    [[deprecated("Use field access instead!")]] float& dyn_minJumpStrength();
    // Get instance field reference: private System.Single minJumpVertical
    [[deprecated("Use field access instead!")]] float& dyn_minJumpVertical();
    // Get instance field reference: private System.Single cooldownTime
    [[deprecated("Use field access instead!")]] float& dyn_cooldownTime();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onJumping
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onJumping();
    // Get instance field reference: private RubberDuckEvents _events
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RubberDuckEvents*& dyn__events();
    // Get instance field reference: private System.Boolean playerOnGround
    [[deprecated("Use field access instead!")]] bool& dyn_playerOnGround();
    // Get instance field reference: private System.Single minJumpTime
    [[deprecated("Use field access instead!")]] float& dyn_minJumpTime();
    // Get instance field reference: private System.Boolean waitingForGrounding
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForGrounding();
    // Get instance field reference: private System.Single jumpStartTime
    [[deprecated("Use field access instead!")]] float& dyn_jumpStartTime();
    // Get instance field reference: private System.Single lastActivationTime
    [[deprecated("Use field access instead!")]] float& dyn_lastActivationTime();
    // Get instance field reference: private VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: private System.Boolean <TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$TickRunning$k__BackingField();
    // private System.Void OnEnable()
    // Offset: 0x278BF34
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x278C3A8
    void OnDisable();
    // private System.Void OnActivate(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x278C54C
    void OnActivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // public System.Void Tick()
    // Offset: 0x278C62C
    void Tick();
    // public System.Boolean get_TickRunning()
    // Offset: 0x278C8B4
    bool get_TickRunning();
    // public System.Void set_TickRunning(System.Boolean value)
    // Offset: 0x278C8BC
    void set_TickRunning(bool value);
    // public System.Void .ctor()
    // Offset: 0x278C8C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerOnJump* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerOnJump*, creationType>()));
    }
  }; // TriggerOnJump
  #pragma pack(pop)
  static check_size<sizeof(TriggerOnJump), 96 + sizeof(bool)> __GlobalNamespace_TriggerOnJumpSizeCheck;
  static_assert(sizeof(TriggerOnJump) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnJump::*)()>(&GlobalNamespace::TriggerOnJump::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnJump::*)()>(&GlobalNamespace::TriggerOnJump::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnJump::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::TriggerOnJump::OnActivate)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnJump::*)()>(&GlobalNamespace::TriggerOnJump::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::get_TickRunning
// Il2CppName: get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TriggerOnJump::*)()>(&GlobalNamespace::TriggerOnJump::get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::set_TickRunning
// Il2CppName: set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TriggerOnJump::*)(bool)>(&GlobalNamespace::TriggerOnJump::set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TriggerOnJump*), "set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TriggerOnJump::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
