// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: GorillaTag.GTColor/HSVRanges
#include "GorillaTag/GTColor_HSVRanges.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: RandomBucketThrowable
  class RandomBucketThrowable;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SnowballThrowable
  class SnowballThrowable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SnowballThrowable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SnowballThrowable*, "", "SnowballThrowable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: SnowballThrowable
  // [TokenAttribute] Offset: FFFFFFFF
  class SnowballThrowable : public ::GlobalNamespace::HoldableObject {
    public:
    // Nested type: ::GlobalNamespace::SnowballThrowable::SnowballHitEvent
    class SnowballHitEvent;
    public:
    // public System.Collections.Generic.List`1<System.Int32> matDataIndexes
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* matDataIndexes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public UnityEngine.GameObject projectilePrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* projectilePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean randomizeColor
    // Size: 0x1
    // Offset: 0x38
    bool randomizeColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: randomizeColor and: randomColorHSVRanges
    char __padding2[0x3] = {};
    // public GorillaTag.GTColor/HSVRanges randomColorHSVRanges
    // Size: 0x18
    // Offset: 0x3C
    ::GorillaTag::GTColor::HSVRanges randomColorHSVRanges;
    // Field size check
    static_assert(sizeof(::GorillaTag::GTColor::HSVRanges) == 0x18);
    // Padding between fields: randomColorHSVRanges and: velocityEstimator
    char __padding3[0x4] = {};
    // public GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // public SoundBankPlayer launchSoundBankPlayer
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::SoundBankPlayer* launchSoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public System.Single linSpeedMultiplier
    // Size: 0x4
    // Offset: 0x68
    float linSpeedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxLinSpeed
    // Size: 0x4
    // Offset: 0x6C
    float maxLinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxWristSpeed
    // Size: 0x4
    // Offset: 0x70
    float maxWristSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isLeftHanded
    // Size: 0x1
    // Offset: 0x74
    bool isLeftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHanded and: OnSnowballHitPlayer
    char __padding9[0x3] = {};
    // private SnowballThrowable/SnowballHitEvent OnSnowballHitPlayer
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::SnowballThrowable::SnowballHitEvent* OnSnowballHitPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*) == 0x8);
    // public System.Boolean randomModelSelection
    // Size: 0x1
    // Offset: 0x80
    bool randomModelSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: randomModelSelection and: localModels
    char __padding11[0x7] = {};
    // public System.Collections.Generic.List`1<GorillaTagScripts.RandomBucketThrowable> localModels
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::GorillaTagScripts::RandomBucketThrowable*>* localModels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::RandomBucketThrowable*>*) == 0x8);
    // public System.Int32 throwableMakerIndex
    // Size: 0x4
    // Offset: 0x90
    int throwableMakerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: throwableMakerIndex and: targetRig
    char __padding13[0x4] = {};
    // private VRRig targetRig
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::VRRig* targetRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean isOfflineRig
    // Size: 0x1
    // Offset: 0xA0
    bool isOfflineRig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean awakeHasBeenCalled
    // Size: 0x1
    // Offset: 0xA1
    bool awakeHasBeenCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean OnEnableHasBeenCalled
    // Size: 0x1
    // Offset: 0xA2
    bool OnEnableHasBeenCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OnEnableHasBeenCalled and: matPropBlock
    char __padding17[0x5] = {};
    // private UnityEngine.MaterialPropertyBlock matPropBlock
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::MaterialPropertyBlock* matPropBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.Renderer[] renderers
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private System.Int32 randModelIndex
    // Size: 0x4
    // Offset: 0xB8
    int randModelIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Int32 colorShaderProp
    static int _get_colorShaderProp();
    // Set static field: static private readonly System.Int32 colorShaderProp
    static void _set_colorShaderProp(int value);
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> matDataIndexes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_matDataIndexes();
    // Get instance field reference: public UnityEngine.GameObject projectilePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_projectilePrefab();
    // Get instance field reference: public System.Boolean randomizeColor
    [[deprecated("Use field access instead!")]] bool& dyn_randomizeColor();
    // Get instance field reference: public GorillaTag.GTColor/HSVRanges randomColorHSVRanges
    [[deprecated("Use field access instead!")]] ::GorillaTag::GTColor::HSVRanges& dyn_randomColorHSVRanges();
    // Get instance field reference: public GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // Get instance field reference: public SoundBankPlayer launchSoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_launchSoundBankPlayer();
    // Get instance field reference: public System.Single linSpeedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_linSpeedMultiplier();
    // Get instance field reference: public System.Single maxLinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxLinSpeed();
    // Get instance field reference: public System.Single maxWristSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxWristSpeed();
    // Get instance field reference: public System.Boolean isLeftHanded
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHanded();
    // Get instance field reference: private SnowballThrowable/SnowballHitEvent OnSnowballHitPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnowballThrowable::SnowballHitEvent*& dyn_OnSnowballHitPlayer();
    // Get instance field reference: public System.Boolean randomModelSelection
    [[deprecated("Use field access instead!")]] bool& dyn_randomModelSelection();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.RandomBucketThrowable> localModels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::RandomBucketThrowable*>*& dyn_localModels();
    // Get instance field reference: public System.Int32 throwableMakerIndex
    [[deprecated("Use field access instead!")]] int& dyn_throwableMakerIndex();
    // Get instance field reference: private VRRig targetRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetRig();
    // Get instance field reference: private System.Boolean isOfflineRig
    [[deprecated("Use field access instead!")]] bool& dyn_isOfflineRig();
    // Get instance field reference: private System.Boolean awakeHasBeenCalled
    [[deprecated("Use field access instead!")]] bool& dyn_awakeHasBeenCalled();
    // Get instance field reference: private System.Boolean OnEnableHasBeenCalled
    [[deprecated("Use field access instead!")]] bool& dyn_OnEnableHasBeenCalled();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
    // Get instance field reference: private UnityEngine.Renderer[] renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn_renderers();
    // Get instance field reference: private System.Int32 randModelIndex
    [[deprecated("Use field access instead!")]] int& dyn_randModelIndex();
    // public System.Void add_OnSnowballHitPlayer(SnowballThrowable/SnowballHitEvent value)
    // Offset: 0x269E2BC
    void add_OnSnowballHitPlayer(::GlobalNamespace::SnowballThrowable::SnowballHitEvent* value);
    // public System.Void remove_OnSnowballHitPlayer(SnowballThrowable/SnowballHitEvent value)
    // Offset: 0x269E358
    void remove_OnSnowballHitPlayer(::GlobalNamespace::SnowballThrowable::SnowballHitEvent* value);
    // System.Int32 get_ProjectileHash()
    // Offset: 0x269E3F4
    int get_ProjectileHash();
    // protected System.Void Awake()
    // Offset: 0x269E46C
    void Awake();
    // public System.Boolean IsMine()
    // Offset: 0x269E5AC
    bool IsMine();
    // public System.Void EnableSnowballLocal(System.Boolean enable)
    // Offset: 0x269E0B4
    void EnableSnowballLocal(bool enable);
    // private System.Int32 GetRandomModelIndex()
    // Offset: 0x269EC84
    int GetRandomModelIndex();
    // private System.Void EnableRandomModel(System.Int32 index, System.Boolean enable)
    // Offset: 0x269EB04
    void EnableRandomModel(int index, bool enable);
    // protected System.Void LateUpdateLocal()
    // Offset: 0x269ED50
    void LateUpdateLocal();
    // protected System.Void LateUpdateReplicated()
    // Offset: 0x269ED54
    void LateUpdateReplicated();
    // protected System.Void LateUpdateShared()
    // Offset: 0x269ED58
    void LateUpdateShared();
    // private UnityEngine.Transform Anchor()
    // Offset: 0x269ED5C
    ::UnityEngine::Transform* Anchor();
    // private System.Void AnchorToHand()
    // Offset: 0x269EBA0
    void AnchorToHand();
    // protected System.Void LateUpdate()
    // Offset: 0x269ED7C
    void LateUpdate();
    // private System.Void LaunchSnowball()
    // Offset: 0x269EDB4
    void LaunchSnowball();
    // private System.Void OnProjectileHitPlayer(Photon.Realtime.Player hitPlayer)
    // Offset: 0x269F3FC
    void OnProjectileHitPlayer(::Photon::Realtime::Player* hitPlayer);
    // private System.Void ApplyColor(UnityEngine.Color newColor)
    // Offset: 0x269E924
    void ApplyColor(::UnityEngine::Color newColor);
    // static private System.Void .cctor()
    // Offset: 0x269F664
    static void _cctor();
    // public override System.Void OnEnable()
    // Offset: 0x269E634
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x269ED80
    // Implemented from: HoldableObject
    // Base method: System.Boolean HoldableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public System.Void .ctor()
    // Offset: 0x269F508
    // Implemented from: HoldableObject
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnowballThrowable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnowballThrowable*, creationType>()));
    }
  }; // SnowballThrowable
  #pragma pack(pop)
  static check_size<sizeof(SnowballThrowable), 184 + sizeof(int)> __GlobalNamespace_SnowballThrowableSizeCheck;
  static_assert(sizeof(SnowballThrowable) == 0xBC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::add_OnSnowballHitPlayer
// Il2CppName: add_OnSnowballHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*)>(&GlobalNamespace::SnowballThrowable::add_OnSnowballHitPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SnowballThrowable/SnowballHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "add_OnSnowballHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::remove_OnSnowballHitPlayer
// Il2CppName: remove_OnSnowballHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*)>(&GlobalNamespace::SnowballThrowable::remove_OnSnowballHitPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SnowballThrowable/SnowballHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "remove_OnSnowballHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::get_ProjectileHash
// Il2CppName: get_ProjectileHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::get_ProjectileHash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "get_ProjectileHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::IsMine
// Il2CppName: IsMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::IsMine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "IsMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::EnableSnowballLocal
// Il2CppName: EnableSnowballLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(bool)>(&GlobalNamespace::SnowballThrowable::EnableSnowballLocal)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "EnableSnowballLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::GetRandomModelIndex
// Il2CppName: GetRandomModelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::GetRandomModelIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "GetRandomModelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::EnableRandomModel
// Il2CppName: EnableRandomModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(int, bool)>(&GlobalNamespace::SnowballThrowable::EnableRandomModel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "EnableRandomModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, enable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::Anchor
// Il2CppName: Anchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::Anchor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "Anchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::AnchorToHand
// Il2CppName: AnchorToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::AnchorToHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "AnchorToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::LaunchSnowball
// Il2CppName: LaunchSnowball
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::LaunchSnowball)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "LaunchSnowball", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::OnProjectileHitPlayer
// Il2CppName: OnProjectileHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::SnowballThrowable::OnProjectileHitPlayer)> {
  static const MethodInfo* get() {
    static auto* hitPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "OnProjectileHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::ApplyColor
// Il2CppName: ApplyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)(::UnityEngine::Color)>(&GlobalNamespace::SnowballThrowable::ApplyColor)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "ApplyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SnowballThrowable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SnowballThrowable::*)()>(&GlobalNamespace::SnowballThrowable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SnowballThrowable::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::SnowballThrowable::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnowballThrowable*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnowballThrowable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
