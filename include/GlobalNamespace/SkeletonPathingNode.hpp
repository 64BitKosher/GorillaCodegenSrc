// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SkeletonPathingNode
  class SkeletonPathingNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SkeletonPathingNode);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SkeletonPathingNode*, "", "SkeletonPathingNode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: SkeletonPathingNode
  // [TokenAttribute] Offset: FFFFFFFF
  class SkeletonPathingNode : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean ejectionPoint
    // Size: 0x1
    // Offset: 0x20
    bool ejectionPoint;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ejectionPoint and: connectedNodes
    char __padding0[0x7] = {};
    // public SkeletonPathingNode[] connectedNodes
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::SkeletonPathingNode*> connectedNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SkeletonPathingNode*>) == 0x8);
    // public System.Single distanceToExitNode
    // Size: 0x4
    // Offset: 0x30
    float distanceToExitNode;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Boolean ejectionPoint
    [[deprecated("Use field access instead!")]] bool& dyn_ejectionPoint();
    // Get instance field reference: public SkeletonPathingNode[] connectedNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& dyn_connectedNodes();
    // Get instance field reference: public System.Single distanceToExitNode
    [[deprecated("Use field access instead!")]] float& dyn_distanceToExitNode();
    // private System.Void Awake()
    // Offset: 0x269B550
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x269B574
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SkeletonPathingNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkeletonPathingNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SkeletonPathingNode*, creationType>()));
    }
  }; // SkeletonPathingNode
  #pragma pack(pop)
  static check_size<sizeof(SkeletonPathingNode), 48 + sizeof(float)> __GlobalNamespace_SkeletonPathingNodeSizeCheck;
  static_assert(sizeof(SkeletonPathingNode) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SkeletonPathingNode::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SkeletonPathingNode::*)()>(&GlobalNamespace::SkeletonPathingNode::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SkeletonPathingNode*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SkeletonPathingNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
