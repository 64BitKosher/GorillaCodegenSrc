// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.Generic.HashSet`1/Enumerator
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.Queue`1/Enumerator
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Enumerator because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVREnumerable`1<T>
  template<typename T>
  struct OVREnumerable_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GlobalNamespace::OVREnumerable_1, "", "OVREnumerable`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVREnumerable`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct OVREnumerable_1/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
    public:
    // Nested type: ::GlobalNamespace::OVREnumerable_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVREnumerable`1/Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = OVREnumerable_1<T>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      // Nested type: ::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType<T>
      struct CollectionType;
      // WARNING Size may be invalid!
      // Autogenerated type: OVREnumerable`1/Enumerator/CollectionType
      // [TokenAttribute] Offset: FFFFFFFF
      struct CollectionType : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
        public:
        using declaring_type = typename OVREnumerable_1<T>::Enumerator;
        static constexpr std::string_view NESTED_NAME = "CollectionType";
        static constexpr bool IS_VALUE_TYPE = true;
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: CollectionType
        constexpr CollectionType(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // Autogenerated static field getter
        // Get static field: static public OVREnumerable`1/Enumerator/CollectionType<T> None
        static typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType _get_None() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_get_None");
          return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "None"));
        }
        // Autogenerated static field setter
        // Set static field: static public OVREnumerable`1/Enumerator/CollectionType<T> None
        static void _set_None(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_set_None");
          THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "None", value));
        }
        // Autogenerated static field getter
        // Get static field: static public OVREnumerable`1/Enumerator/CollectionType<T> List
        static typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType _get_List() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_get_List");
          return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "List"));
        }
        // Autogenerated static field setter
        // Set static field: static public OVREnumerable`1/Enumerator/CollectionType<T> List
        static void _set_List(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_set_List");
          THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "List", value));
        }
        // Autogenerated static field getter
        // Get static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Set
        static typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType _get_Set() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_get_Set");
          return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Set"));
        }
        // Autogenerated static field setter
        // Set static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Set
        static void _set_Set(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_set_Set");
          THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Set", value));
        }
        // Autogenerated static field getter
        // Get static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Queue
        static typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType _get_Queue() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_get_Queue");
          return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Queue"));
        }
        // Autogenerated static field setter
        // Set static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Queue
        static void _set_Queue(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_set_Queue");
          THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Queue", value));
        }
        // Autogenerated static field getter
        // Get static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Enumerable
        static typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType _get_Enumerable() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_get_Enumerable");
          return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Enumerable"));
        }
        // Autogenerated static field setter
        // Set static field: static public OVREnumerable`1/Enumerator/CollectionType<T> Enumerable
        static void _set_Enumerable(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::_set_Enumerable");
          THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename OVREnumerable_1<T>::Enumerator::CollectionType>::get(), "Enumerable", value));
        }
        // Autogenerated instance field getter
        // Get instance field: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__() {
          static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::CollectionType::dyn_value__");
          auto ___internal__instance = *this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
      }; // OVREnumerable`1/Enumerator/CollectionType
      // Could not write size check! Type: OVREnumerable`1/Enumerator/CollectionType is generic, or has no fields that are valid for size checks!
      public:
      // private System.Int32 _listIndex
      // Size: 0x4
      // Offset: 0x0
      int listIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly OVREnumerable`1/Enumerator/CollectionType<T> _type
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType type;
      // private readonly System.Int32 _listCount
      // Size: 0x4
      // Offset: 0x0
      int listCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly System.Collections.Generic.IEnumerator`1<T> _enumerator
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::IEnumerator_1<T>* enumerator;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<T>*) == 0x8);
      // private readonly System.Collections.Generic.IReadOnlyList`1<T> _list
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::IReadOnlyList_1<T>* list;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<T>*) == 0x8);
      // private System.Collections.Generic.HashSet`1/Enumerator<T> _setEnumerator
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Collections::Generic::HashSet_1<T>::Enumerator setEnumerator;
      // private System.Collections.Generic.Queue`1/Enumerator<T> _queueEnumerator
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Collections::Generic::Queue_1<T>::Enumerator queueEnumerator;
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(int listIndex_ = {}, typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType type_ = {}, int listCount_ = {}, ::System::Collections::Generic::IEnumerator_1<T>* enumerator_ = {}, ::System::Collections::Generic::IReadOnlyList_1<T>* list_ = {}, typename ::System::Collections::Generic::HashSet_1<T>::Enumerator setEnumerator_ = {}, typename ::System::Collections::Generic::Queue_1<T>::Enumerator queueEnumerator_ = {}) noexcept : listIndex{listIndex_}, type{type_}, listCount{listCount_}, enumerator{enumerator_}, list{list_}, setEnumerator{setEnumerator_}, queueEnumerator{queueEnumerator_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _listIndex
      [[deprecated("Use field access instead!")]] int& dyn__listIndex() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__listIndex");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listIndex"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly OVREnumerable`1/Enumerator/CollectionType<T> _type
      [[deprecated("Use field access instead!")]] typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType& dyn__type() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__type");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_type"))->offset;
        return *reinterpret_cast<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator::CollectionType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int32 _listCount
      [[deprecated("Use field access instead!")]] int& dyn__listCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__listCount");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Collections.Generic.IEnumerator`1<T> _enumerator
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<T>*& dyn__enumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__enumerator");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enumerator"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Collections.Generic.IReadOnlyList`1<T> _list
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<T>*& dyn__list() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__list");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_list"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.HashSet`1/Enumerator<T> _setEnumerator
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::HashSet_1<T>::Enumerator& dyn__setEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__setEnumerator");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_setEnumerator"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::HashSet_1<T>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.Queue`1/Enumerator<T> _queueEnumerator
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::Queue_1<T>::Enumerator& dyn__queueEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::dyn__queueEnumerator");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_queueEnumerator"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::Queue_1<T>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> enumerable)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::IEnumerable_1<T>* enumerable) {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumerable)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enumerable);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNextList()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNextList() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::MoveNextList");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNextList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void ValidateAndThrow()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void ValidateAndThrow() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::Enumerator::ValidateAndThrow");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ValidateAndThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // OVREnumerable`1/Enumerator
    // Could not write size check! Type: OVREnumerable`1/Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Collections.Generic.IEnumerable`1<T> _enumerable
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerable_1<T>* enumerable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<T>*) == 0x8);
    public:
    // Creating value type constructor for type: OVREnumerable_1
    constexpr OVREnumerable_1(::System::Collections::Generic::IEnumerable_1<T>* enumerable_ = {}) noexcept : enumerable{enumerable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>*
    constexpr operator ::System::Collections::Generic::IEnumerable_1<T>*() const noexcept {
      return enumerable;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.IEnumerable`1<T> _enumerable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<T>*& dyn__enumerable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::dyn__enumerable");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enumerable"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> enumerable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  OVREnumerable_1(::System::Collections::Generic::IEnumerable_1<T>* enumerable)
    // public OVREnumerable`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::GlobalNamespace::OVREnumerable_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::OVREnumerable_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVREnumerable_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::OVREnumerable_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // OVREnumerable`1
  // Could not write size check! Type: OVREnumerable`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
