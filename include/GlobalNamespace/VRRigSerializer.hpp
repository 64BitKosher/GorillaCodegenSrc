// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaWrappedSerializer`1
#include "GlobalNamespace/GorillaWrappedSerializer_1.hpp"
// Including type: InputStruct
#include "GlobalNamespace/InputStruct.hpp"
// Including type: IFXContextParems`1
#include "GlobalNamespace/IFXContextParems_1.hpp"
// Including type: Fusion.NetworkString`1
#include "Fusion/NetworkString_1.hpp"
// Including type: Fusion._16
#include "Fusion/_16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HandTapArgs
  class HandTapArgs;
  // Forward declaring type: GeoSoundArg
  class GeoSoundArg;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: FXSystemSettings
  class FXSystemSettings;
  // Skipping declaration: PhotonMessageInfoWrapped because it is already included!
}
// Forward declaring namespace: Photon::Voice::PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceView
  class PhotonVoiceView;
}
// Forward declaring namespace: Photon::Voice::Fusion
namespace Photon::Voice::Fusion {
  // Forward declaring type: VoiceNetworkObject
  class VoiceNetworkObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ChangedDelegate`1<T>
  template<typename T>
  class ChangedDelegate_1;
  // Forward declaring type: NetworkBehaviourCallbacks`1<T>
  template<typename T>
  class NetworkBehaviourCallbacks_1;
  // Forward declaring type: RpcInfo
  struct RpcInfo;
  // Skipping declaration: NetworkBehaviour because it is already included!
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Skipping declaration: PhotonMessageInfo because it is already included!
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRRigSerializer
  class VRRigSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRRigSerializer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigSerializer*, "", "VRRigSerializer");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: VRRigSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  class VRRigSerializer : public ::GlobalNamespace::GorillaWrappedSerializer_1<::GlobalNamespace::InputStruct>/*, public ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::HandTapArgs*>, public ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::GeoSoundArg*>*/ {
    public:
    public:
    // private Fusion.NetworkString`1<Fusion._16> _nickName
    // Size: 0xFFFFFFFF
    // Offset: 0x130
    ::Fusion::NetworkString_1<::Fusion::_16> nickName;
    // private Fusion.NetworkString`1<Fusion._16> _defaultName
    // Size: 0xFFFFFFFF
    // Offset: 0x174
    ::Fusion::NetworkString_1<::Fusion::_16> defaultName;
    // private System.Boolean _tutorialComplete
    // Size: 0x1
    // Offset: 0x1B8
    bool tutorialComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Photon.Voice.PUN.PhotonVoiceView voiceView
    // Size: 0x8
    // Offset: 0x1C0
    ::Photon::Voice::PUN::PhotonVoiceView* voiceView;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PUN::PhotonVoiceView*) == 0x8);
    // private Photon.Voice.Fusion.VoiceNetworkObject fusionVoiceView
    // Size: 0x8
    // Offset: 0x1C8
    ::Photon::Voice::Fusion::VoiceNetworkObject* fusionVoiceView;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Fusion::VoiceNetworkObject*) == 0x8);
    // public UnityEngine.Transform networkSpeaker
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::Transform* networkSpeaker;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private VRRig vrrig
    // Size: 0x8
    // Offset: 0x1D8
    ::GlobalNamespace::VRRig* vrrig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private RigContainer rigContainer
    // Size: 0x8
    // Offset: 0x1E0
    ::GlobalNamespace::RigContainer* rigContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // private HandTapArgs handTapArgs
    // Size: 0x8
    // Offset: 0x1E8
    ::GlobalNamespace::HandTapArgs* handTapArgs;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandTapArgs*) == 0x8);
    // private GeoSoundArg geoSoundArg
    // Size: 0x8
    // Offset: 0x1F0
    ::GlobalNamespace::GeoSoundArg* geoSoundArg;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GeoSoundArg*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::HandTapArgs*>
    operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::HandTapArgs*>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::HandTapArgs*>*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::GeoSoundArg*>
    operator ::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::GeoSoundArg*>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IFXContextParems_1<::GlobalNamespace::GeoSoundArg*>*>(this);
    }
    // Get static field: static Fusion.Changed`1<VRRigSerializer> $IL2CPP_CHANGED
    static ::Fusion::Changed_1<::GlobalNamespace::VRRigSerializer*> _get_$IL2CPP_CHANGED();
    // Set static field: static Fusion.Changed`1<VRRigSerializer> $IL2CPP_CHANGED
    static void _set_$IL2CPP_CHANGED(::Fusion::Changed_1<::GlobalNamespace::VRRigSerializer*> value);
    // Get static field: static Fusion.ChangedDelegate`1<VRRigSerializer> $IL2CPP_CHANGED_DELEGATE
    static ::Fusion::ChangedDelegate_1<::GlobalNamespace::VRRigSerializer*>* _get_$IL2CPP_CHANGED_DELEGATE();
    // Set static field: static Fusion.ChangedDelegate`1<VRRigSerializer> $IL2CPP_CHANGED_DELEGATE
    static void _set_$IL2CPP_CHANGED_DELEGATE(::Fusion::ChangedDelegate_1<::GlobalNamespace::VRRigSerializer*>* value);
    // Get static field: static Fusion.NetworkBehaviourCallbacks`1<VRRigSerializer> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static ::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::VRRigSerializer*>* _get_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS();
    // Set static field: static Fusion.NetworkBehaviourCallbacks`1<VRRigSerializer> $IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS
    static void _set_$IL2CPP_NETWORK_BEHAVIOUR_CALLBACKS(::Fusion::NetworkBehaviourCallbacks_1<::GlobalNamespace::VRRigSerializer*>* value);
    // Get instance field reference: private Fusion.NetworkString`1<Fusion._16> _nickName
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkString_1<::Fusion::_16>& dyn__nickName();
    // Get instance field reference: private Fusion.NetworkString`1<Fusion._16> _defaultName
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkString_1<::Fusion::_16>& dyn__defaultName();
    // Get instance field reference: private System.Boolean _tutorialComplete
    [[deprecated("Use field access instead!")]] bool& dyn__tutorialComplete();
    // Get instance field reference: private Photon.Voice.PUN.PhotonVoiceView voiceView
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PUN::PhotonVoiceView*& dyn_voiceView();
    // Get instance field reference: private Photon.Voice.Fusion.VoiceNetworkObject fusionVoiceView
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Fusion::VoiceNetworkObject*& dyn_fusionVoiceView();
    // Get instance field reference: public UnityEngine.Transform networkSpeaker
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_networkSpeaker();
    // Get instance field reference: private VRRig vrrig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_vrrig();
    // Get instance field reference: private RigContainer rigContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_rigContainer();
    // Get instance field reference: private HandTapArgs handTapArgs
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandTapArgs*& dyn_handTapArgs();
    // Get instance field reference: private GeoSoundArg geoSoundArg
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GeoSoundArg*& dyn_geoSoundArg();
    // public Fusion.NetworkString`1<Fusion._16> get_nickName()
    // Offset: 0x26FE460
    ::Fusion::NetworkString_1<::Fusion::_16> get_nickName();
    // public System.Void set_nickName(Fusion.NetworkString`1<Fusion._16> value)
    // Offset: 0x26FE4C4
    void set_nickName(::Fusion::NetworkString_1<::Fusion::_16> value);
    // public Fusion.NetworkString`1<Fusion._16> get_defaultName()
    // Offset: 0x26FE528
    ::Fusion::NetworkString_1<::Fusion::_16> get_defaultName();
    // public System.Void set_defaultName(Fusion.NetworkString`1<Fusion._16> value)
    // Offset: 0x26FE590
    void set_defaultName(::Fusion::NetworkString_1<::Fusion::_16> value);
    // public System.Boolean get_tutorialComplete()
    // Offset: 0x26FE5F8
    bool get_tutorialComplete();
    // public System.Void set_tutorialComplete(System.Boolean value)
    // Offset: 0x26FE660
    void set_tutorialComplete(bool value);
    // public FXSystemSettings get_settings()
    // Offset: 0x26FE6C4
    ::GlobalNamespace::FXSystemSettings* get_settings();
    // private System.Void CleanUp(System.Boolean netDestroy)
    // Offset: 0x26FED1C
    void CleanUp(bool netDestroy);
    // private System.Void OnDisable()
    // Offset: 0x26FEF4C
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x26FEF54
    void OnDestroy();
    // public System.Void RPC_InitializeNoobMaterial(System.Single red, System.Single green, System.Single blue, Fusion.RpcInfo info)
    // Offset: 0x26FF054
    void RPC_InitializeNoobMaterial(float red, float green, float blue, ::Fusion::RpcInfo info);
    // public System.Void InitializeNoobMaterial(System.Single red, System.Single green, System.Single blue, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF2DC
    void InitializeNoobMaterial(float red, float green, float blue, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RPC_RequestMaterialColor(System.Int32 askingPlayerID, Fusion.RpcInfo info)
    // Offset: 0x26FF354
    void RPC_RequestMaterialColor(int askingPlayerID, ::Fusion::RpcInfo info);
    // public System.Void RequestMaterialColor(Photon.Realtime.Player askingPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF540
    void RequestMaterialColor(::Photon::Realtime::Player* askingPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestCosmetics(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF5A8
    void RequestCosmetics(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlayDrum(System.Int32 drumIndex, System.Single drumVolume, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF5E0
    void PlayDrum(int drumIndex, float drumVolume, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlaySelfOnlyInstrument(System.Int32 selfOnlyIndex, System.Int32 noteIndex, System.Single instrumentVol, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF618
    void PlaySelfOnlyInstrument(int selfOnlyIndex, int noteIndex, float instrumentVol, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RPC_PlayHandTap(System.Int32 soundIndex, System.Boolean isLeftHand, System.Single tapVolume, Fusion.RpcInfo info)
    // Offset: 0x26FF650
    void RPC_PlayHandTap(int soundIndex, bool isLeftHand, float tapVolume, ::Fusion::RpcInfo info);
    // public System.Void PlayHandTap(System.Int32 soundIndex, System.Boolean isLeftHand, System.Single tapVolume, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FF9C8
    void PlayHandTap(int soundIndex, bool isLeftHand, float tapVolume, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void IFXContextParems<HandTapArgs>.OnPlayFX(HandTapArgs parems)
    // Offset: 0x26FFB94
    void IFXContextParems$HandTapArgs$_OnPlayFX(::GlobalNamespace::HandTapArgs* parems);
    // public System.Void UpdateCosmetics(System.String[] currentItems, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FFBC0
    void UpdateCosmetics(::ArrayW<::StringW> currentItems, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void UpdateCosmeticsWithTryon(System.String[] currentItems, System.String[] tryOnItems, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FFBF8
    void UpdateCosmeticsWithTryon(::ArrayW<::StringW> currentItems, ::ArrayW<::StringW> tryOnItems, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlaySplashEffect(UnityEngine.Vector3 splashPosition, UnityEngine.Quaternion splashRotation, System.Single splashScale, System.Single boundingRadius, System.Boolean bigSplash, System.Boolean enteringWater, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FFC30
    void PlaySplashEffect(::UnityEngine::Vector3 splashPosition, ::UnityEngine::Quaternion splashRotation, float splashScale, float boundingRadius, bool bigSplash, bool enteringWater, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlayGeodeEffect(UnityEngine.Vector3 hitPosition, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FFC78
    void PlayGeodeEffect(::UnityEngine::Vector3 hitPosition, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void IFXContextParems<GeoSoundArg>.OnPlayFX(GeoSoundArg parems)
    // Offset: 0x26FFE88
    void IFXContextParems$GeoSoundArg$_OnPlayFX(::GlobalNamespace::GeoSoundArg* parems);
    // public System.Void EnableNonCosmeticHandItemRPC(System.Boolean enable, System.Boolean isLeftHand, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26FFEB8
    void EnableNonCosmeticHandItemRPC(bool enable, bool isLeftHand, ::Photon::Pun::PhotonMessageInfo info);
    // static protected System.Void RPC_InitializeNoobMaterial@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)
    // Offset: 0x2700144
    static void RPC_InitializeNoobMaterial@Invoker(::Fusion::NetworkBehaviour* behaviour, ::Fusion::SimulationMessage* message);
    // static protected System.Void RPC_RequestMaterialColor@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)
    // Offset: 0x2700230
    static void RPC_RequestMaterialColor@Invoker(::Fusion::NetworkBehaviour* behaviour, ::Fusion::SimulationMessage* message);
    // static protected System.Void RPC_PlayHandTap@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)
    // Offset: 0x27002EC
    static void RPC_PlayHandTap@Invoker(::Fusion::NetworkBehaviour* behaviour, ::Fusion::SimulationMessage* message);
    // protected override System.Boolean OnSpawnSetupCheck(PhotonMessageInfoWrapped wrappedInfo, out UnityEngine.GameObject outTargetObject, out System.Type outTargetType)
    // Offset: 0x26FE6E0
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Boolean GorillaWrappedSerializer_1::OnSpawnSetupCheck(PhotonMessageInfoWrapped wrappedInfo, out UnityEngine.GameObject outTargetObject, out System.Type outTargetType)
    bool OnSpawnSetupCheck(::GlobalNamespace::PhotonMessageInfoWrapped wrappedInfo, ByRef<::UnityEngine::GameObject*> outTargetObject, ByRef<::System::Type*> outTargetType);
    // protected override System.Void OnSuccesfullySpawned(PhotonMessageInfoWrapped info)
    // Offset: 0x26FEBA8
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::OnSuccesfullySpawned(PhotonMessageInfoWrapped info)
    void OnSuccesfullySpawned(::GlobalNamespace::PhotonMessageInfoWrapped info);
    // protected override System.Void OnFailedSpawn()
    // Offset: 0x26FED10
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::OnFailedSpawn()
    void OnFailedSpawn();
    // protected override System.Void OnBeforeDespawn()
    // Offset: 0x26FED14
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::OnBeforeDespawn()
    void OnBeforeDespawn();
    // public System.Void .ctor()
    // Offset: 0x26FFEF8
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRRigSerializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRRigSerializer*, creationType>()));
    }
    // public override System.Void CopyBackingFieldsToState(System.Boolean )
    // Offset: 0x26FFFB8
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::CopyBackingFieldsToState(System.Boolean )
    void CopyBackingFieldsToState(bool param_0);
    // public override System.Void CopyStateToBackingFields()
    // Offset: 0x2700080
    // Implemented from: GorillaWrappedSerializer`1
    // Base method: System.Void GorillaWrappedSerializer_1::CopyStateToBackingFields()
    void CopyStateToBackingFields();
  }; // VRRigSerializer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::get_nickName
// Il2CppName: get_nickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkString_1<::Fusion::_16> (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::get_nickName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "get_nickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::set_nickName
// Il2CppName: set_nickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::Fusion::NetworkString_1<::Fusion::_16>)>(&GlobalNamespace::VRRigSerializer::set_nickName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Fusion", "NetworkString`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "_16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "set_nickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::get_defaultName
// Il2CppName: get_defaultName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkString_1<::Fusion::_16> (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::get_defaultName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "get_defaultName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::set_defaultName
// Il2CppName: set_defaultName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::Fusion::NetworkString_1<::Fusion::_16>)>(&GlobalNamespace::VRRigSerializer::set_defaultName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Fusion", "NetworkString`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "_16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "set_defaultName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::get_tutorialComplete
// Il2CppName: get_tutorialComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::get_tutorialComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "get_tutorialComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::set_tutorialComplete
// Il2CppName: set_tutorialComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(bool)>(&GlobalNamespace::VRRigSerializer::set_tutorialComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "set_tutorialComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::get_settings
// Il2CppName: get_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FXSystemSettings* (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::get_settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "get_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(bool)>(&GlobalNamespace::VRRigSerializer::CleanUp)> {
  static const MethodInfo* get() {
    static auto* netDestroy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netDestroy});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_InitializeNoobMaterial
// Il2CppName: RPC_InitializeNoobMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(float, float, float, ::Fusion::RpcInfo)>(&GlobalNamespace::VRRigSerializer::RPC_InitializeNoobMaterial)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "RpcInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_InitializeNoobMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::InitializeNoobMaterial
// Il2CppName: InitializeNoobMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(float, float, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::InitializeNoobMaterial)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "InitializeNoobMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_RequestMaterialColor
// Il2CppName: RPC_RequestMaterialColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(int, ::Fusion::RpcInfo)>(&GlobalNamespace::VRRigSerializer::RPC_RequestMaterialColor)> {
  static const MethodInfo* get() {
    static auto* askingPlayerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "RpcInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_RequestMaterialColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{askingPlayerID, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RequestMaterialColor
// Il2CppName: RequestMaterialColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::RequestMaterialColor)> {
  static const MethodInfo* get() {
    static auto* askingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RequestMaterialColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{askingPlayer, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RequestCosmetics
// Il2CppName: RequestCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::RequestCosmetics)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RequestCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::PlayDrum
// Il2CppName: PlayDrum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::PlayDrum)> {
  static const MethodInfo* get() {
    static auto* drumIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* drumVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "PlayDrum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drumIndex, drumVolume, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::PlaySelfOnlyInstrument
// Il2CppName: PlaySelfOnlyInstrument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(int, int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::PlaySelfOnlyInstrument)> {
  static const MethodInfo* get() {
    static auto* selfOnlyIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instrumentVol = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "PlaySelfOnlyInstrument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selfOnlyIndex, noteIndex, instrumentVol, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_PlayHandTap
// Il2CppName: RPC_PlayHandTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(int, bool, float, ::Fusion::RpcInfo)>(&GlobalNamespace::VRRigSerializer::RPC_PlayHandTap)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tapVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "RpcInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_PlayHandTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, isLeftHand, tapVolume, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::PlayHandTap
// Il2CppName: PlayHandTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(int, bool, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::PlayHandTap)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tapVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "PlayHandTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, isLeftHand, tapVolume, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::IFXContextParems$HandTapArgs$_OnPlayFX
// Il2CppName: IFXContextParems<HandTapArgs>.OnPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::GlobalNamespace::HandTapArgs*)>(&GlobalNamespace::VRRigSerializer::IFXContextParems$HandTapArgs$_OnPlayFX)> {
  static const MethodInfo* get() {
    static auto* parems = &::il2cpp_utils::GetClassFromName("", "HandTapArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "IFXContextParems<HandTapArgs>.OnPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parems});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::UpdateCosmetics
// Il2CppName: UpdateCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::ArrayW<::StringW>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::UpdateCosmetics)> {
  static const MethodInfo* get() {
    static auto* currentItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "UpdateCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentItems, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::UpdateCosmeticsWithTryon
// Il2CppName: UpdateCosmeticsWithTryon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::ArrayW<::StringW>, ::ArrayW<::StringW>, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::UpdateCosmeticsWithTryon)> {
  static const MethodInfo* get() {
    static auto* currentItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* tryOnItems = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "UpdateCosmeticsWithTryon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentItems, tryOnItems, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::PlaySplashEffect
// Il2CppName: PlaySplashEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, bool, bool, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::PlaySplashEffect)> {
  static const MethodInfo* get() {
    static auto* splashPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* splashRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* splashScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* boundingRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bigSplash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enteringWater = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "PlaySplashEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{splashPosition, splashRotation, splashScale, boundingRadius, bigSplash, enteringWater, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::PlayGeodeEffect
// Il2CppName: PlayGeodeEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::UnityEngine::Vector3, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::PlayGeodeEffect)> {
  static const MethodInfo* get() {
    static auto* hitPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "PlayGeodeEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPosition, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::IFXContextParems$GeoSoundArg$_OnPlayFX
// Il2CppName: IFXContextParems<GeoSoundArg>.OnPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::GlobalNamespace::GeoSoundArg*)>(&GlobalNamespace::VRRigSerializer::IFXContextParems$GeoSoundArg$_OnPlayFX)> {
  static const MethodInfo* get() {
    static auto* parems = &::il2cpp_utils::GetClassFromName("", "GeoSoundArg")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "IFXContextParems<GeoSoundArg>.OnPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parems});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::EnableNonCosmeticHandItemRPC
// Il2CppName: EnableNonCosmeticHandItemRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(bool, bool, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::VRRigSerializer::EnableNonCosmeticHandItemRPC)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "EnableNonCosmeticHandItemRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable, isLeftHand, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_InitializeNoobMaterial@Invoker
// Il2CppName: RPC_InitializeNoobMaterial@Invoker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkBehaviour*, ::Fusion::SimulationMessage*)>(&GlobalNamespace::VRRigSerializer::RPC_InitializeNoobMaterial@Invoker)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_InitializeNoobMaterial@Invoker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_RequestMaterialColor@Invoker
// Il2CppName: RPC_RequestMaterialColor@Invoker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkBehaviour*, ::Fusion::SimulationMessage*)>(&GlobalNamespace::VRRigSerializer::RPC_RequestMaterialColor@Invoker)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_RequestMaterialColor@Invoker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::RPC_PlayHandTap@Invoker
// Il2CppName: RPC_PlayHandTap@Invoker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkBehaviour*, ::Fusion::SimulationMessage*)>(&GlobalNamespace::VRRigSerializer::RPC_PlayHandTap@Invoker)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "RPC_PlayHandTap@Invoker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnSpawnSetupCheck
// Il2CppName: OnSpawnSetupCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VRRigSerializer::*)(::GlobalNamespace::PhotonMessageInfoWrapped, ByRef<::UnityEngine::GameObject*>, ByRef<::System::Type*>)>(&GlobalNamespace::VRRigSerializer::OnSpawnSetupCheck)> {
  static const MethodInfo* get() {
    static auto* wrappedInfo = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    static auto* outTargetObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->this_arg;
    static auto* outTargetType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnSpawnSetupCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wrappedInfo, outTargetObject, outTargetType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnSuccesfullySpawned
// Il2CppName: OnSuccesfullySpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(::GlobalNamespace::PhotonMessageInfoWrapped)>(&GlobalNamespace::VRRigSerializer::OnSuccesfullySpawned)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnSuccesfullySpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnFailedSpawn
// Il2CppName: OnFailedSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::OnFailedSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnFailedSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::OnBeforeDespawn
// Il2CppName: OnBeforeDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::OnBeforeDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "OnBeforeDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)(bool)>(&GlobalNamespace::VRRigSerializer::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRRigSerializer::CopyStateToBackingFields
// Il2CppName: CopyStateToBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigSerializer::*)()>(&GlobalNamespace::VRRigSerializer::CopyStateToBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigSerializer*), "CopyStateToBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
