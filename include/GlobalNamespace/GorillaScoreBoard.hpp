// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaGameManager
  class GorillaGameManager;
  // Forward declaring type: GorillaPlayerScoreboardLine
  class GorillaPlayerScoreboardLine;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaScoreBoard
  class GorillaScoreBoard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaScoreBoard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaScoreBoard*, "", "GorillaScoreBoard");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaScoreBoard
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaScoreBoard : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaScoreBoard::$$c
    class $$c;
    public:
    // public UnityEngine.GameObject scoreBoardLinePrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* scoreBoardLinePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 startingYValue
    // Size: 0x4
    // Offset: 0x28
    int startingYValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lineHeight
    // Size: 0x4
    // Offset: 0x2C
    int lineHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaGameManager gameManager
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GorillaGameManager* gameManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaGameManager*) == 0x8);
    // public System.String gameType
    // Size: 0x8
    // Offset: 0x38
    ::StringW gameType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean includeMMR
    // Size: 0x1
    // Offset: 0x40
    bool includeMMR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x41
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: linesParent
    char __padding6[0x6] = {};
    // public UnityEngine.GameObject linesParent
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* linesParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaPlayerScoreboardLine> lines
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPlayerScoreboardLine*>* lines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPlayerScoreboardLine*>*) == 0x8);
    // public UnityEngine.UI.Text boardText
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Text* boardText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text buttonText
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UI::Text* buttonText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.Boolean needsUpdate
    // Size: 0x1
    // Offset: 0x68
    bool needsUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needsUpdate and: notInRoomText
    char __padding11[0x7] = {};
    // public UnityEngine.UI.Text notInRoomText
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UI::Text* notInRoomText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.String initialGameMode
    // Size: 0x8
    // Offset: 0x78
    ::StringW initialGameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String tempGmName
    // Size: 0x8
    // Offset: 0x80
    ::StringW tempGmName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String gmName
    // Size: 0x8
    // Offset: 0x88
    ::StringW gmName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<System.String> gmNames
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::StringW>* gmNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Text.StringBuilder stringBuilder
    // Size: 0x8
    // Offset: 0x98
    ::System::Text::StringBuilder* stringBuilder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Text.StringBuilder buttonStringBuilder
    // Size: 0x8
    // Offset: 0xA0
    ::System::Text::StringBuilder* buttonStringBuilder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    public:
    // static field const value: static private System.String error
    static constexpr const char* error = "ERROR";
    // Get static field: static private System.String error
    static ::StringW _get_error();
    // Set static field: static private System.String error
    static void _set_error(::StringW value);
    // Get instance field reference: public UnityEngine.GameObject scoreBoardLinePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_scoreBoardLinePrefab();
    // Get instance field reference: public System.Int32 startingYValue
    [[deprecated("Use field access instead!")]] int& dyn_startingYValue();
    // Get instance field reference: public System.Int32 lineHeight
    [[deprecated("Use field access instead!")]] int& dyn_lineHeight();
    // Get instance field reference: public GorillaGameManager gameManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaGameManager*& dyn_gameManager();
    // Get instance field reference: public System.String gameType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameType();
    // Get instance field reference: public System.Boolean includeMMR
    [[deprecated("Use field access instead!")]] bool& dyn_includeMMR();
    // Get instance field reference: public System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: public UnityEngine.GameObject linesParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_linesParent();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaPlayerScoreboardLine> lines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPlayerScoreboardLine*>*& dyn_lines();
    // Get instance field reference: public UnityEngine.UI.Text boardText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_boardText();
    // Get instance field reference: public UnityEngine.UI.Text buttonText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_buttonText();
    // Get instance field reference: public System.Boolean needsUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_needsUpdate();
    // Get instance field reference: public UnityEngine.UI.Text notInRoomText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_notInRoomText();
    // Get instance field reference: public System.String initialGameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialGameMode();
    // Get instance field reference: private System.String tempGmName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempGmName();
    // Get instance field reference: private System.String gmName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gmName();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> gmNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_gmNames();
    // Get instance field reference: private System.Text.StringBuilder stringBuilder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_stringBuilder();
    // Get instance field reference: private System.Text.StringBuilder buttonStringBuilder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_buttonStringBuilder();
    // public System.Void SetSleepState(System.Boolean awake)
    // Offset: 0x271784C
    void SetSleepState(bool awake);
    // private System.Void OnDestroy()
    // Offset: 0x27178A8
    void OnDestroy();
    // public System.String GetBeginningString()
    // Offset: 0x27178AC
    ::StringW GetBeginningString();
    // public System.String RoomType()
    // Offset: 0x27179E4
    ::StringW RoomType();
    // public System.Void RedrawPlayerLines()
    // Offset: 0x2717B94
    void RedrawPlayerLines();
    // public System.String NormalizeName(System.Boolean doIt, System.String text)
    // Offset: 0x271818C
    ::StringW NormalizeName(bool doIt, ::StringW text);
    // private System.Void Start()
    // Offset: 0x27182FC
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x2718354
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x27183AC
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x2718404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaScoreBoard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaScoreBoard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaScoreBoard*, creationType>()));
    }
  }; // GorillaScoreBoard
  #pragma pack(pop)
  static check_size<sizeof(GorillaScoreBoard), 160 + sizeof(::System::Text::StringBuilder*)> __GlobalNamespace_GorillaScoreBoardSizeCheck;
  static_assert(sizeof(GorillaScoreBoard) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::SetSleepState
// Il2CppName: SetSleepState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)(bool)>(&GlobalNamespace::GorillaScoreBoard::SetSleepState)> {
  static const MethodInfo* get() {
    static auto* awake = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "SetSleepState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{awake});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::GetBeginningString
// Il2CppName: GetBeginningString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::GetBeginningString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "GetBeginningString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::RoomType
// Il2CppName: RoomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::RoomType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "RoomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::RedrawPlayerLines
// Il2CppName: RedrawPlayerLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::RedrawPlayerLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "RedrawPlayerLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::NormalizeName
// Il2CppName: NormalizeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaScoreBoard::*)(bool, ::StringW)>(&GlobalNamespace::GorillaScoreBoard::NormalizeName)> {
  static const MethodInfo* get() {
    static auto* doIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "NormalizeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doIt, text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaScoreBoard::*)()>(&GlobalNamespace::GorillaScoreBoard::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaScoreBoard*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaScoreBoard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
