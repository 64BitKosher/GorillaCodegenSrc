// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3Int
  struct Vector3Int;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpatialUtils
  class SpatialUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpatialUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpatialUtils*, "", "SpatialUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: SpatialUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SpatialUtils : public ::Il2CppObject {
    public:
    // static public System.Int32 Grid3DToFlatIndex(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 xMax, System.Int32 yMax)
    // Offset: 0x277A97C
    static int Grid3DToFlatIndex(int x, int y, int z, int xMax, int yMax);
    // static public System.Int32 Grid3DToFlatIndex(UnityEngine.Vector3Int g3d, System.Int32 xMax, System.Int32 yMax)
    // Offset: 0x277A988
    static int Grid3DToFlatIndex(::UnityEngine::Vector3Int g3d, int xMax, int yMax);
    // static public UnityEngine.Vector3Int FlatIndexToGrid3D(System.Int32 idx, System.Int32 xMax, System.Int32 yMax)
    // Offset: 0x277A998
    static ::UnityEngine::Vector3Int FlatIndexToGrid3D(int idx, int xMax, int yMax);
  }; // SpatialUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpatialUtils::Grid3DToFlatIndex
// Il2CppName: Grid3DToFlatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int)>(&GlobalNamespace::SpatialUtils::Grid3DToFlatIndex)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialUtils*), "Grid3DToFlatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, xMax, yMax});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialUtils::Grid3DToFlatIndex
// Il2CppName: Grid3DToFlatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector3Int, int, int)>(&GlobalNamespace::SpatialUtils::Grid3DToFlatIndex)> {
  static const MethodInfo* get() {
    static auto* g3d = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    static auto* xMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialUtils*), "Grid3DToFlatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g3d, xMax, yMax});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpatialUtils::FlatIndexToGrid3D
// Il2CppName: FlatIndexToGrid3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3Int (*)(int, int, int)>(&GlobalNamespace::SpatialUtils::FlatIndexToGrid3D)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yMax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpatialUtils*), "FlatIndexToGrid3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, xMax, yMax});
  }
};
