// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AtticHider
  class AtticHider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AtticHider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AtticHider*, "", "AtticHider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: AtticHider
  // [TokenAttribute] Offset: FFFFFFFF
  class AtticHider : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::AtticHider::$WaitForAtticLoad$d__5
    class $WaitForAtticLoad$d__5;
    public:
    // private UnityEngine.MeshRenderer AtticRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshRenderer* AtticRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Coroutine _coroutine
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Coroutine* coroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.MeshRenderer AtticRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_AtticRenderer();
    // Get instance field reference: private UnityEngine.Coroutine _coroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__coroutine();
    // private System.Void Start()
    // Offset: 0x26DFDA4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x26DFFD0
    void OnDestroy();
    // private System.Void OnZoneChanged()
    // Offset: 0x26DFE9C
    void OnZoneChanged();
    // private System.Collections.IEnumerator WaitForAtticLoad()
    // Offset: 0x26E00C0
    ::System::Collections::IEnumerator* WaitForAtticLoad();
    // public System.Void .ctor()
    // Offset: 0x26E0154
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AtticHider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AtticHider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AtticHider*, creationType>()));
    }
  }; // AtticHider
  #pragma pack(pop)
  static check_size<sizeof(AtticHider), 40 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_AtticHiderSizeCheck;
  static_assert(sizeof(AtticHider) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AtticHider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AtticHider::*)()>(&GlobalNamespace::AtticHider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AtticHider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AtticHider::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AtticHider::*)()>(&GlobalNamespace::AtticHider::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AtticHider*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AtticHider::OnZoneChanged
// Il2CppName: OnZoneChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AtticHider::*)()>(&GlobalNamespace::AtticHider::OnZoneChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AtticHider*), "OnZoneChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AtticHider::WaitForAtticLoad
// Il2CppName: WaitForAtticLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AtticHider::*)()>(&GlobalNamespace::AtticHider::WaitForAtticLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AtticHider*), "WaitForAtticLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AtticHider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
