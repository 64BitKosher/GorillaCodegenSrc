// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/VirtualKeyboardInputSource
#include "GlobalNamespace/OVRPlugin_VirtualKeyboardInputSource.hpp"
// Including type: OVRPlugin/VirtualKeyboardInputStateFlags
#include "GlobalNamespace/OVRPlugin_VirtualKeyboardInputStateFlags.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputInfo, "", "OVRPlugin/VirtualKeyboardInputInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/VirtualKeyboardInputInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::VirtualKeyboardInputInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public OVRPlugin/VirtualKeyboardInputSource inputSource
    // Size: 0x4
    // Offset: 0x0
    ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource inputSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource) == 0x4);
    // public OVRPlugin/Posef inputPose
    // Size: 0x1C
    // Offset: 0x4
    ::GlobalNamespace::OVRPlugin::Posef inputPose;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
    // public OVRPlugin/VirtualKeyboardInputStateFlags inputState
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags inputState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags) == 0x8);
    public:
    // Creating value type constructor for type: VirtualKeyboardInputInfo
    constexpr VirtualKeyboardInputInfo(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource inputSource_ = {}, ::GlobalNamespace::OVRPlugin::Posef inputPose_ = {}, ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags inputState_ = {}) noexcept : inputSource{inputSource_}, inputPose{inputPose_}, inputState{inputState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public OVRPlugin/VirtualKeyboardInputSource inputSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputSource& dyn_inputSource();
    // Get instance field reference: public OVRPlugin/Posef inputPose
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_inputPose();
    // Get instance field reference: public OVRPlugin/VirtualKeyboardInputStateFlags inputState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags& dyn_inputState();
  }; // OVRPlugin/VirtualKeyboardInputInfo
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::VirtualKeyboardInputInfo), 32 + sizeof(::GlobalNamespace::OVRPlugin::VirtualKeyboardInputStateFlags)> __GlobalNamespace_OVRPlugin_VirtualKeyboardInputInfoSizeCheck;
  static_assert(sizeof(OVRPlugin::VirtualKeyboardInputInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
