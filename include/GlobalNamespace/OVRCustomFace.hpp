// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRFace
#include "GlobalNamespace/OVRFace.hpp"
// Including type: OVRFaceExpressions/FaceExpression
#include "GlobalNamespace/OVRFaceExpressions_FaceExpression.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: RetargetingType because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRCustomFace
  class OVRCustomFace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRCustomFace);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCustomFace*, "", "OVRCustomFace");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: OVRCustomFace
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRCustomFace : public ::GlobalNamespace::OVRFace {
    public:
    // Nested type: ::GlobalNamespace::OVRCustomFace::RetargetingType
    struct RetargetingType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRCustomFace/RetargetingType
    // [TokenAttribute] Offset: FFFFFFFF
    struct RetargetingType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RetargetingType
      constexpr RetargetingType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRCustomFace/RetargetingType OculusFace
      static constexpr const int OculusFace = 0;
      // Get static field: static public OVRCustomFace/RetargetingType OculusFace
      static ::GlobalNamespace::OVRCustomFace::RetargetingType _get_OculusFace();
      // Set static field: static public OVRCustomFace/RetargetingType OculusFace
      static void _set_OculusFace(::GlobalNamespace::OVRCustomFace::RetargetingType value);
      // static field const value: static public OVRCustomFace/RetargetingType Custom
      static constexpr const int Custom = 1;
      // Get static field: static public OVRCustomFace/RetargetingType Custom
      static ::GlobalNamespace::OVRCustomFace::RetargetingType _get_Custom();
      // Set static field: static public OVRCustomFace/RetargetingType Custom
      static void _set_Custom(::GlobalNamespace::OVRCustomFace::RetargetingType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRCustomFace/RetargetingType
    #pragma pack(pop)
    static check_size<sizeof(OVRCustomFace::RetargetingType), 0 + sizeof(int)> __GlobalNamespace_OVRCustomFace_RetargetingTypeSizeCheck;
    static_assert(sizeof(OVRCustomFace::RetargetingType) == 0x4);
    public:
    // OVRFaceExpressions/FaceExpression[] _mappings
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> mappings;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>) == 0x8);
    // OVRCustomFace/RetargetingType retargetingType
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::OVRCustomFace::RetargetingType retargetingType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCustomFace::RetargetingType) == 0x4);
    // System.Boolean _allowDuplicateMapping
    // Size: 0x1
    // Offset: 0x44
    bool allowDuplicateMapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: OVRFaceExpressions/FaceExpression[] _mappings
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>& dyn__mappings();
    // Get instance field reference: OVRCustomFace/RetargetingType retargetingType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCustomFace::RetargetingType& dyn_retargetingType();
    // Get instance field reference: System.Boolean _allowDuplicateMapping
    [[deprecated("Use field access instead!")]] bool& dyn__allowDuplicateMapping();
    // public OVRFaceExpressions/FaceExpression[] get_Mappings()
    // Offset: 0x4945198
    ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> get_Mappings();
    // public System.Void set_Mappings(OVRFaceExpressions/FaceExpression[] value)
    // Offset: 0x49451A0
    void set_Mappings(::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> value);
    // protected OVRCustomFace/RetargetingType get_RetargetingValue()
    // Offset: 0x49451A8
    ::GlobalNamespace::OVRCustomFace::RetargetingType get_RetargetingValue();
    // protected System.Void set_RetargetingValue(OVRCustomFace/RetargetingType value)
    // Offset: 0x49451B0
    void set_RetargetingValue(::GlobalNamespace::OVRCustomFace::RetargetingType value);
    // protected System.Boolean get_AllowDuplicateMapping()
    // Offset: 0x49451B8
    bool get_AllowDuplicateMapping();
    // protected System.Void set_AllowDuplicateMapping(System.Boolean value)
    // Offset: 0x49451C0
    void set_AllowDuplicateMapping(bool value);
    // protected internal System.ValueTuple`2<System.String[],OVRFaceExpressions/FaceExpression[]> GetCustomBlendShapeNameAndExpressionPairs()
    // Offset: 0x4945258
    ::System::ValueTuple_2<::ArrayW<::StringW>, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>> GetCustomBlendShapeNameAndExpressionPairs();
    // protected override System.Void Start()
    // Offset: 0x49451CC
    // Implemented from: OVRFace
    // Base method: System.Void OVRFace::Start()
    void Start();
    // protected internal override OVRFaceExpressions/FaceExpression GetFaceExpression(System.Int32 blendShapeIndex)
    // Offset: 0x4945228
    // Implemented from: OVRFace
    // Base method: OVRFaceExpressions/FaceExpression OVRFace::GetFaceExpression(System.Int32 blendShapeIndex)
    ::GlobalNamespace::OVRFaceExpressions::FaceExpression GetFaceExpression(int blendShapeIndex);
    // public System.Void .ctor()
    // Offset: 0x4945390
    // Implemented from: OVRFace
    // Base method: System.Void OVRFace::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCustomFace* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCustomFace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCustomFace*, creationType>()));
    }
  }; // OVRCustomFace
  #pragma pack(pop)
  static check_size<sizeof(OVRCustomFace), 68 + sizeof(bool)> __GlobalNamespace_OVRCustomFaceSizeCheck;
  static_assert(sizeof(OVRCustomFace) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCustomFace::RetargetingType, "", "OVRCustomFace/RetargetingType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::get_Mappings
// Il2CppName: get_Mappings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression> (GlobalNamespace::OVRCustomFace::*)()>(&GlobalNamespace::OVRCustomFace::get_Mappings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "get_Mappings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::set_Mappings
// Il2CppName: set_Mappings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCustomFace::*)(::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>)>(&GlobalNamespace::OVRCustomFace::set_Mappings)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "OVRFaceExpressions/FaceExpression"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "set_Mappings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::get_RetargetingValue
// Il2CppName: get_RetargetingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRCustomFace::RetargetingType (GlobalNamespace::OVRCustomFace::*)()>(&GlobalNamespace::OVRCustomFace::get_RetargetingValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "get_RetargetingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::set_RetargetingValue
// Il2CppName: set_RetargetingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCustomFace::*)(::GlobalNamespace::OVRCustomFace::RetargetingType)>(&GlobalNamespace::OVRCustomFace::set_RetargetingValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRCustomFace/RetargetingType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "set_RetargetingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::get_AllowDuplicateMapping
// Il2CppName: get_AllowDuplicateMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRCustomFace::*)()>(&GlobalNamespace::OVRCustomFace::get_AllowDuplicateMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "get_AllowDuplicateMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::set_AllowDuplicateMapping
// Il2CppName: set_AllowDuplicateMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCustomFace::*)(bool)>(&GlobalNamespace::OVRCustomFace::set_AllowDuplicateMapping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "set_AllowDuplicateMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::GetCustomBlendShapeNameAndExpressionPairs
// Il2CppName: GetCustomBlendShapeNameAndExpressionPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::ArrayW<::StringW>, ::ArrayW<::GlobalNamespace::OVRFaceExpressions::FaceExpression>> (GlobalNamespace::OVRCustomFace::*)()>(&GlobalNamespace::OVRCustomFace::GetCustomBlendShapeNameAndExpressionPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "GetCustomBlendShapeNameAndExpressionPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCustomFace::*)()>(&GlobalNamespace::OVRCustomFace::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::GetFaceExpression
// Il2CppName: GetFaceExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRFaceExpressions::FaceExpression (GlobalNamespace::OVRCustomFace::*)(int)>(&GlobalNamespace::OVRCustomFace::GetFaceExpression)> {
  static const MethodInfo* get() {
    static auto* blendShapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCustomFace*), "GetFaceExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCustomFace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
