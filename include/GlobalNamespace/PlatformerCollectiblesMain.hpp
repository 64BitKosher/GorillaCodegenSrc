// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlatformerCollectiblesMain
  class PlatformerCollectiblesMain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlatformerCollectiblesMain);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlatformerCollectiblesMain*, "", "PlatformerCollectiblesMain");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlatformerCollectiblesMain
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformerCollectiblesMain : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject Coin
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* Coin;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single CoinGridCount
    // Size: 0x4
    // Offset: 0x28
    float CoinGridCount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CoinGridSize
    // Size: 0x4
    // Offset: 0x2C
    float CoinGridSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.GameObject Coin
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Coin();
    // Get instance field reference: public System.Single CoinGridCount
    [[deprecated("Use field access instead!")]] float& dyn_CoinGridCount();
    // Get instance field reference: public System.Single CoinGridSize
    [[deprecated("Use field access instead!")]] float& dyn_CoinGridSize();
    // public System.Void Start()
    // Offset: 0x26829A8
    void Start();
    // public System.Void .ctor()
    // Offset: 0x2682AFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformerCollectiblesMain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlatformerCollectiblesMain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformerCollectiblesMain*, creationType>()));
    }
  }; // PlatformerCollectiblesMain
  #pragma pack(pop)
  static check_size<sizeof(PlatformerCollectiblesMain), 44 + sizeof(float)> __GlobalNamespace_PlatformerCollectiblesMainSizeCheck;
  static_assert(sizeof(PlatformerCollectiblesMain) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlatformerCollectiblesMain::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlatformerCollectiblesMain::*)()>(&GlobalNamespace::PlatformerCollectiblesMain::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlatformerCollectiblesMain*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlatformerCollectiblesMain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
