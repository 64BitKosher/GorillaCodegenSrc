// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: GorillaGeoHideShowTrigger
  class GorillaGeoHideShowTrigger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DebugSpawnPointChanger
  class DebugSpawnPointChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DebugSpawnPointChanger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DebugSpawnPointChanger*, "", "DebugSpawnPointChanger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: DebugSpawnPointChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugSpawnPointChanger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup
    struct GeoTriggersGroup;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: DebugSpawnPointChanger/GeoTriggersGroup
    // [TokenAttribute] Offset: FFFFFFFF
    struct GeoTriggersGroup/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String levelName
      // Size: 0x8
      // Offset: 0x0
      ::StringW levelName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public GorillaGeoHideShowTrigger enterTrigger
      // Size: 0x8
      // Offset: 0x8
      ::GlobalNamespace::GorillaGeoHideShowTrigger* enterTrigger;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::GorillaGeoHideShowTrigger*) == 0x8);
      // public GorillaGeoHideShowTrigger[] leaveTrigger
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::GlobalNamespace::GorillaGeoHideShowTrigger*> leaveTrigger;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaGeoHideShowTrigger*>) == 0x8);
      // public System.Int32[] canJumpToIndex
      // Size: 0x8
      // Offset: 0x18
      ::ArrayW<int> canJumpToIndex;
      // Field size check
      static_assert(sizeof(::ArrayW<int>) == 0x8);
      public:
      // Creating value type constructor for type: GeoTriggersGroup
      constexpr GeoTriggersGroup(::StringW levelName_ = {}, ::GlobalNamespace::GorillaGeoHideShowTrigger* enterTrigger_ = {}, ::ArrayW<::GlobalNamespace::GorillaGeoHideShowTrigger*> leaveTrigger_ = ::ArrayW<::GlobalNamespace::GorillaGeoHideShowTrigger*>(static_cast<void*>(nullptr)), ::ArrayW<int> canJumpToIndex_ = ::ArrayW<int>(static_cast<void*>(nullptr))) noexcept : levelName{levelName_}, enterTrigger{enterTrigger_}, leaveTrigger{leaveTrigger_}, canJumpToIndex{canJumpToIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String levelName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_levelName();
      // Get instance field reference: public GorillaGeoHideShowTrigger enterTrigger
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaGeoHideShowTrigger*& dyn_enterTrigger();
      // Get instance field reference: public GorillaGeoHideShowTrigger[] leaveTrigger
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaGeoHideShowTrigger*>& dyn_leaveTrigger();
      // Get instance field reference: public System.Int32[] canJumpToIndex
      [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_canJumpToIndex();
    }; // DebugSpawnPointChanger/GeoTriggersGroup
    #pragma pack(pop)
    static check_size<sizeof(DebugSpawnPointChanger::GeoTriggersGroup), 24 + sizeof(::ArrayW<int>)> __GlobalNamespace_DebugSpawnPointChanger_GeoTriggersGroupSizeCheck;
    static_assert(sizeof(DebugSpawnPointChanger::GeoTriggersGroup) == 0x20);
    public:
    // private DebugSpawnPointChanger/GeoTriggersGroup[] levelTriggers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup> levelTriggers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup>) == 0x8);
    // private System.Int32 lastLocationIndex
    // Size: 0x4
    // Offset: 0x28
    int lastLocationIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private DebugSpawnPointChanger/GeoTriggersGroup[] levelTriggers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup>& dyn_levelTriggers();
    // Get instance field reference: private System.Int32 lastLocationIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastLocationIndex();
    // private System.Void AttachSpawnPoint(VRRig rig, UnityEngine.Transform[] spawnPts, System.Int32 locationIndex)
    // Offset: 0x26DC958
    void AttachSpawnPoint(::GlobalNamespace::VRRig* rig, ::ArrayW<::UnityEngine::Transform*> spawnPts, int locationIndex);
    // private System.Void ChangePoint(System.Int32 index)
    // Offset: 0x26DCC44
    void ChangePoint(int index);
    // public System.Collections.Generic.List`1<System.String> GetPlausibleJumpLocation()
    // Offset: 0x26DCDE4
    ::System::Collections::Generic::List_1<::StringW>* GetPlausibleJumpLocation();
    // public System.Void JumpTo(System.Int32 canJumpIndex)
    // Offset: 0x26DCEC0
    void JumpTo(int canJumpIndex);
    // public System.Void SetLastLocation(System.String levelName)
    // Offset: 0x26DCF0C
    void SetLastLocation(::StringW levelName);
    // public System.Void .ctor()
    // Offset: 0x26DCF84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugSpawnPointChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugSpawnPointChanger*, creationType>()));
    }
    // private System.String <GetPlausibleJumpLocation>b__5_0(System.Int32 index)
    // Offset: 0x26DCF8C
    ::StringW $GetPlausibleJumpLocation$b__5_0(int index);
  }; // DebugSpawnPointChanger
  #pragma pack(pop)
  static check_size<sizeof(DebugSpawnPointChanger), 40 + sizeof(int)> __GlobalNamespace_DebugSpawnPointChangerSizeCheck;
  static_assert(sizeof(DebugSpawnPointChanger) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup, "", "DebugSpawnPointChanger/GeoTriggersGroup");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::AttachSpawnPoint
// Il2CppName: AttachSpawnPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugSpawnPointChanger::*)(::GlobalNamespace::VRRig*, ::ArrayW<::UnityEngine::Transform*>, int)>(&GlobalNamespace::DebugSpawnPointChanger::AttachSpawnPoint)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* spawnPts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* locationIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "AttachSpawnPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig, spawnPts, locationIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::ChangePoint
// Il2CppName: ChangePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugSpawnPointChanger::*)(int)>(&GlobalNamespace::DebugSpawnPointChanger::ChangePoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "ChangePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::GetPlausibleJumpLocation
// Il2CppName: GetPlausibleJumpLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::DebugSpawnPointChanger::*)()>(&GlobalNamespace::DebugSpawnPointChanger::GetPlausibleJumpLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "GetPlausibleJumpLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::JumpTo
// Il2CppName: JumpTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugSpawnPointChanger::*)(int)>(&GlobalNamespace::DebugSpawnPointChanger::JumpTo)> {
  static const MethodInfo* get() {
    static auto* canJumpIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "JumpTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canJumpIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::SetLastLocation
// Il2CppName: SetLastLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugSpawnPointChanger::*)(::StringW)>(&GlobalNamespace::DebugSpawnPointChanger::SetLastLocation)> {
  static const MethodInfo* get() {
    static auto* levelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "SetLastLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DebugSpawnPointChanger::$GetPlausibleJumpLocation$b__5_0
// Il2CppName: <GetPlausibleJumpLocation>b__5_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::DebugSpawnPointChanger::*)(int)>(&GlobalNamespace::DebugSpawnPointChanger::$GetPlausibleJumpLocation$b__5_0)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugSpawnPointChanger*), "<GetPlausibleJumpLocation>b__5_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
