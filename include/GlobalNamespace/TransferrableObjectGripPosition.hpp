// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TransferrableItemSlotTransformOverride
  class TransferrableItemSlotTransformOverride;
  // Forward declaring type: SubGrabPoint
  class SubGrabPoint;
  // Forward declaring type: SlotTransformOverride
  class SlotTransformOverride;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransferrableObjectGripPosition
  class TransferrableObjectGripPosition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransferrableObjectGripPosition);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObjectGripPosition*, "", "TransferrableObjectGripPosition");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: TransferrableObjectGripPosition
  // [TokenAttribute] Offset: FFFFFFFF
  class TransferrableObjectGripPosition : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TransferrableItemSlotTransformOverride parentObject
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::TransferrableItemSlotTransformOverride* parentObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableItemSlotTransformOverride*) == 0x8);
    // private TransferrableObject/PositionState attachmentType
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::TransferrableObject::PositionState attachmentType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    public:
    // Get instance field reference: private TransferrableItemSlotTransformOverride parentObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableItemSlotTransformOverride*& dyn_parentObject();
    // Get instance field reference: private TransferrableObject/PositionState attachmentType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_attachmentType();
    // private System.Void Awake()
    // Offset: 0x26CB388
    void Awake();
    // public SubGrabPoint CreateSubGrabPoint(SlotTransformOverride overrideContainer)
    // Offset: 0x26C3F14
    ::GlobalNamespace::SubGrabPoint* CreateSubGrabPoint(::GlobalNamespace::SlotTransformOverride* overrideContainer);
    // public System.Void .ctor()
    // Offset: 0x26CB458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferrableObjectGripPosition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectGripPosition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferrableObjectGripPosition*, creationType>()));
    }
  }; // TransferrableObjectGripPosition
  #pragma pack(pop)
  static check_size<sizeof(TransferrableObjectGripPosition), 40 + sizeof(::GlobalNamespace::TransferrableObject::PositionState)> __GlobalNamespace_TransferrableObjectGripPositionSizeCheck;
  static_assert(sizeof(TransferrableObjectGripPosition) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectGripPosition::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObjectGripPosition::*)()>(&GlobalNamespace::TransferrableObjectGripPosition::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectGripPosition*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectGripPosition::CreateSubGrabPoint
// Il2CppName: CreateSubGrabPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SubGrabPoint* (GlobalNamespace::TransferrableObjectGripPosition::*)(::GlobalNamespace::SlotTransformOverride*)>(&GlobalNamespace::TransferrableObjectGripPosition::CreateSubGrabPoint)> {
  static const MethodInfo* get() {
    static auto* overrideContainer = &::il2cpp_utils::GetClassFromName("", "SlotTransformOverride")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObjectGripPosition*), "CreateSubGrabPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overrideContainer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObjectGripPosition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
