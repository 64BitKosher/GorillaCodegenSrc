// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin::OVRP_1_78_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::OVRP_1_78_0*, "", "OVRPlugin/OVRP_1_78_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/OVRP_1_78_0
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPlugin::OVRP_1_78_0 : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Version version
    static ::System::Version* _get_version();
    // Set static field: static public readonly System.Version version
    static void _set_version(::System::Version* value);
    // static public OVRPlugin/Result ovrp_GetPassthroughCapabilityFlags(ref OVRPlugin/PassthroughCapabilityFlags capabilityFlags)
    // Offset: 0x4915760
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetPassthroughCapabilityFlags(ByRef<::GlobalNamespace::OVRPlugin::PassthroughCapabilityFlags> capabilityFlags);
    // static public OVRPlugin/Result ovrp_GetFoveationEyeTrackedSupported(out OVRPlugin/Bool foveationSupported)
    // Offset: 0x49157DC
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetFoveationEyeTrackedSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> foveationSupported);
    // static public OVRPlugin/Result ovrp_GetFoveationEyeTracked(out OVRPlugin/Bool isEyeTrackedFoveation)
    // Offset: 0x4915858
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetFoveationEyeTracked(ByRef<::GlobalNamespace::OVRPlugin::Bool> isEyeTrackedFoveation);
    // static public OVRPlugin/Result ovrp_SetFoveationEyeTracked(OVRPlugin/Bool isEyeTrackedFoveation)
    // Offset: 0x49158D4
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetFoveationEyeTracked(::GlobalNamespace::OVRPlugin::Bool isEyeTrackedFoveation);
    // static public OVRPlugin/Result ovrp_StartFaceTracking()
    // Offset: 0x4915950
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StartFaceTracking();
    // static public OVRPlugin/Result ovrp_StopFaceTracking()
    // Offset: 0x49159B8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StopFaceTracking();
    // static public OVRPlugin/Result ovrp_StartBodyTracking()
    // Offset: 0x4915A20
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StartBodyTracking();
    // static public OVRPlugin/Result ovrp_StopBodyTracking()
    // Offset: 0x4915A88
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StopBodyTracking();
    // static public OVRPlugin/Result ovrp_StartEyeTracking()
    // Offset: 0x4915AF0
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StartEyeTracking();
    // static public OVRPlugin/Result ovrp_StopEyeTracking()
    // Offset: 0x4915B58
    static ::GlobalNamespace::OVRPlugin::Result ovrp_StopEyeTracking();
    // static public OVRPlugin/Result ovrp_GetEyeTrackingSupported(out OVRPlugin/Bool eyeTrackingSupported)
    // Offset: 0x4915BC0
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetEyeTrackingSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> eyeTrackingSupported);
    // static public OVRPlugin/Result ovrp_GetFaceTrackingSupported(out OVRPlugin/Bool faceTrackingSupported)
    // Offset: 0x4915C3C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetFaceTrackingSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> faceTrackingSupported);
    // static public OVRPlugin/Result ovrp_GetBodyTrackingEnabled(out OVRPlugin/Bool value)
    // Offset: 0x4915CB8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetBodyTrackingEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> value);
    // static public OVRPlugin/Result ovrp_GetBodyTrackingSupported(out OVRPlugin/Bool value)
    // Offset: 0x4915D34
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetBodyTrackingSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> value);
    // static public OVRPlugin/Result ovrp_GetBodyState(OVRPlugin/Step stepId, System.Int32 frameIndex, out OVRPlugin/BodyStateInternal bodyState)
    // Offset: 0x4915DB0
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetBodyState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::BodyStateInternal> bodyState);
    // static public OVRPlugin/Result ovrp_GetFaceTrackingEnabled(out OVRPlugin/Bool faceTrackingEnabled)
    // Offset: 0x4915E44
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetFaceTrackingEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> faceTrackingEnabled);
    // static public OVRPlugin/Result ovrp_GetFaceState(OVRPlugin/Step stepId, System.Int32 frameIndex, out OVRPlugin/FaceStateInternal faceState)
    // Offset: 0x4915EC0
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetFaceState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::FaceStateInternal> faceState);
    // static public OVRPlugin/Result ovrp_GetEyeTrackingEnabled(out OVRPlugin/Bool eyeTrackingEnabled)
    // Offset: 0x4915F54
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetEyeTrackingEnabled(ByRef<::GlobalNamespace::OVRPlugin::Bool> eyeTrackingEnabled);
    // static public OVRPlugin/Result ovrp_GetEyeGazesState(OVRPlugin/Step stepId, System.Int32 frameIndex, out OVRPlugin/EyeGazesStateInternal eyeGazesState)
    // Offset: 0x4915FD0
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetEyeGazesState(::GlobalNamespace::OVRPlugin::Step stepId, int frameIndex, ByRef<::GlobalNamespace::OVRPlugin::EyeGazesStateInternal> eyeGazesState);
    // static public OVRPlugin/Result ovrp_GetControllerState5(System.UInt32 controllerMask, ref OVRPlugin/ControllerState5 controllerState)
    // Offset: 0x4916064
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetControllerState5(uint controllerMask, ByRef<::GlobalNamespace::OVRPlugin::ControllerState5> controllerState);
    // static public OVRPlugin/Result ovrp_SetControllerLocalizedVibration(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsLocation hapticsLocationMask, System.Single frequency, System.Single amplitude)
    // Offset: 0x49160E8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetControllerLocalizedVibration(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsLocation hapticsLocationMask, float frequency, float amplitude);
    // static public OVRPlugin/Result ovrp_GetLocalDimmingSupported(out OVRPlugin/Bool localDimmingSupported)
    // Offset: 0x4916184
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetLocalDimmingSupported(ByRef<::GlobalNamespace::OVRPlugin::Bool> localDimmingSupported);
    // static public OVRPlugin/Result ovrp_SetLocalDimming(OVRPlugin/Bool localDimmingMode)
    // Offset: 0x4916200
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetLocalDimming(::GlobalNamespace::OVRPlugin::Bool localDimmingMode);
    // static public OVRPlugin/Result ovrp_GetLocalDimming(out OVRPlugin/Bool localDimmingMode)
    // Offset: 0x491627C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetLocalDimming(ByRef<::GlobalNamespace::OVRPlugin::Bool> localDimmingMode);
    // static public OVRPlugin/Result ovrp_GetCurrentInteractionProfile(OVRPlugin/Hand hand, out OVRPlugin/InteractionProfile interactionProfile)
    // Offset: 0x49162F8
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetCurrentInteractionProfile(::GlobalNamespace::OVRPlugin::Hand hand, ByRef<::GlobalNamespace::OVRPlugin::InteractionProfile> interactionProfile);
    // static public OVRPlugin/Result ovrp_SetControllerHapticsAmplitudeEnvelope(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsAmplitudeEnvelopeVibration hapticsVibration)
    // Offset: 0x491637C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetControllerHapticsAmplitudeEnvelope(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsAmplitudeEnvelopeVibration hapticsVibration);
    // static public OVRPlugin/Result ovrp_SetControllerHapticsPcm(OVRPlugin/Controller controllerMask, OVRPlugin/HapticsPcmVibration hapticsVibration)
    // Offset: 0x4916410
    static ::GlobalNamespace::OVRPlugin::Result ovrp_SetControllerHapticsPcm(::GlobalNamespace::OVRPlugin::Controller controllerMask, ::GlobalNamespace::OVRPlugin::HapticsPcmVibration hapticsVibration);
    // static public OVRPlugin/Result ovrp_GetControllerSampleRateHz(OVRPlugin/Controller controller, out System.Single sampleRateHz)
    // Offset: 0x491649C
    static ::GlobalNamespace::OVRPlugin::Result ovrp_GetControllerSampleRateHz(::GlobalNamespace::OVRPlugin::Controller controller, ByRef<float> sampleRateHz);
    // static private System.Void .cctor()
    // Offset: 0x4916520
    static void _cctor();
  }; // OVRPlugin/OVRP_1_78_0
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetPassthroughCapabilityFlags
// Il2CppName: ovrp_GetPassthroughCapabilityFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::PassthroughCapabilityFlags>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetPassthroughCapabilityFlags)> {
  static const MethodInfo* get() {
    static auto* capabilityFlags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughCapabilityFlags")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetPassthroughCapabilityFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capabilityFlags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFoveationEyeTrackedSupported
// Il2CppName: ovrp_GetFoveationEyeTrackedSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFoveationEyeTrackedSupported)> {
  static const MethodInfo* get() {
    static auto* foveationSupported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetFoveationEyeTrackedSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{foveationSupported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFoveationEyeTracked
// Il2CppName: ovrp_GetFoveationEyeTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFoveationEyeTracked)> {
  static const MethodInfo* get() {
    static auto* isEyeTrackedFoveation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetFoveationEyeTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isEyeTrackedFoveation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetFoveationEyeTracked
// Il2CppName: ovrp_SetFoveationEyeTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetFoveationEyeTracked)> {
  static const MethodInfo* get() {
    static auto* isEyeTrackedFoveation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_SetFoveationEyeTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isEyeTrackedFoveation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartFaceTracking
// Il2CppName: ovrp_StartFaceTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartFaceTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StartFaceTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopFaceTracking
// Il2CppName: ovrp_StopFaceTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopFaceTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StopFaceTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartBodyTracking
// Il2CppName: ovrp_StartBodyTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartBodyTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StartBodyTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopBodyTracking
// Il2CppName: ovrp_StopBodyTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopBodyTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StopBodyTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartEyeTracking
// Il2CppName: ovrp_StartEyeTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StartEyeTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StartEyeTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopEyeTracking
// Il2CppName: ovrp_StopEyeTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_StopEyeTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_StopEyeTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeTrackingSupported
// Il2CppName: ovrp_GetEyeTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeTrackingSupported)> {
  static const MethodInfo* get() {
    static auto* eyeTrackingSupported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetEyeTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeTrackingSupported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceTrackingSupported
// Il2CppName: ovrp_GetFaceTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceTrackingSupported)> {
  static const MethodInfo* get() {
    static auto* faceTrackingSupported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetFaceTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{faceTrackingSupported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyTrackingEnabled
// Il2CppName: ovrp_GetBodyTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyTrackingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetBodyTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyTrackingSupported
// Il2CppName: ovrp_GetBodyTrackingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyTrackingSupported)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetBodyTrackingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyState
// Il2CppName: ovrp_GetBodyState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::BodyStateInternal>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetBodyState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bodyState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BodyStateInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetBodyState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, bodyState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceTrackingEnabled
// Il2CppName: ovrp_GetFaceTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceTrackingEnabled)> {
  static const MethodInfo* get() {
    static auto* faceTrackingEnabled = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetFaceTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{faceTrackingEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceState
// Il2CppName: ovrp_GetFaceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::FaceStateInternal>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetFaceState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FaceStateInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetFaceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, faceState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeTrackingEnabled
// Il2CppName: ovrp_GetEyeTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeTrackingEnabled)> {
  static const MethodInfo* get() {
    static auto* eyeTrackingEnabled = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetEyeTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeTrackingEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeGazesState
// Il2CppName: ovrp_GetEyeGazesState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Step, int, ByRef<::GlobalNamespace::OVRPlugin::EyeGazesStateInternal>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetEyeGazesState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eyeGazesState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeGazesStateInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetEyeGazesState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, frameIndex, eyeGazesState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetControllerState5
// Il2CppName: ovrp_GetControllerState5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(uint, ByRef<::GlobalNamespace::OVRPlugin::ControllerState5>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetControllerState5)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/ControllerState5")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetControllerState5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, controllerState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerLocalizedVibration
// Il2CppName: ovrp_SetControllerLocalizedVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsLocation, float, float)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerLocalizedVibration)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsLocationMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsLocation")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_SetControllerLocalizedVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsLocationMask, frequency, amplitude});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetLocalDimmingSupported
// Il2CppName: ovrp_GetLocalDimmingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetLocalDimmingSupported)> {
  static const MethodInfo* get() {
    static auto* localDimmingSupported = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetLocalDimmingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localDimmingSupported});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetLocalDimming
// Il2CppName: ovrp_SetLocalDimming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetLocalDimming)> {
  static const MethodInfo* get() {
    static auto* localDimmingMode = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_SetLocalDimming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localDimmingMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetLocalDimming
// Il2CppName: ovrp_GetLocalDimming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(ByRef<::GlobalNamespace::OVRPlugin::Bool>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetLocalDimming)> {
  static const MethodInfo* get() {
    static auto* localDimmingMode = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetLocalDimming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localDimmingMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetCurrentInteractionProfile
// Il2CppName: ovrp_GetCurrentInteractionProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Hand, ByRef<::GlobalNamespace::OVRPlugin::InteractionProfile>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetCurrentInteractionProfile)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    static auto* interactionProfile = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InteractionProfile")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetCurrentInteractionProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, interactionProfile});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerHapticsAmplitudeEnvelope
// Il2CppName: ovrp_SetControllerHapticsAmplitudeEnvelope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsAmplitudeEnvelopeVibration)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerHapticsAmplitudeEnvelope)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsVibration = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsAmplitudeEnvelopeVibration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_SetControllerHapticsAmplitudeEnvelope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsVibration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerHapticsPcm
// Il2CppName: ovrp_SetControllerHapticsPcm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Controller, ::GlobalNamespace::OVRPlugin::HapticsPcmVibration)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_SetControllerHapticsPcm)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* hapticsVibration = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsPcmVibration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_SetControllerHapticsPcm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsVibration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetControllerSampleRateHz
// Il2CppName: ovrp_GetControllerSampleRateHz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Result (*)(::GlobalNamespace::OVRPlugin::Controller, ByRef<float>)>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::ovrp_GetControllerSampleRateHz)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Controller")->byval_arg;
    static auto* sampleRateHz = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), "ovrp_GetControllerSampleRateHz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, sampleRateHz});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OVRP_1_78_0::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::OVRP_1_78_0::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::OVRP_1_78_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
