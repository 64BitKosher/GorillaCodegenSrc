// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RequestableOwnershipGuard
#include "GlobalNamespace/RequestableOwnershipGuard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IRequestableOwnershipGuardCallbacks
  class IRequestableOwnershipGuardCallbacks;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0*, "", "RequestableOwnershipGuard/<>c__DisplayClass33_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: RequestableOwnershipGuard/<>c__DisplayClass33_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class RequestableOwnershipGuard::$$c__DisplayClass33_0 : public ::Il2CppObject {
    public:
    public:
    // public Photon.Realtime.Player player
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* player;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public RequestableOwnershipGuard <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::RequestableOwnershipGuard* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RequestableOwnershipGuard*) == 0x8);
    public:
    // Get instance field reference: public Photon.Realtime.Player player
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_player();
    // Get instance field reference: public RequestableOwnershipGuard <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& dyn_$$4__this();
    // public System.Void .ctor()
    // Offset: 0x2894860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RequestableOwnershipGuard::$$c__DisplayClass33_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RequestableOwnershipGuard::$$c__DisplayClass33_0*, creationType>()));
    }
    // System.Void <SetOwnership>b__0(IRequestableOwnershipGuardCallbacks actualOwner)
    // Offset: 0x289591C
    void $SetOwnership$b__0(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* actualOwner);
  }; // RequestableOwnershipGuard/<>c__DisplayClass33_0
  #pragma pack(pop)
  static check_size<sizeof(RequestableOwnershipGuard::$$c__DisplayClass33_0), 24 + sizeof(::GlobalNamespace::RequestableOwnershipGuard*)> __GlobalNamespace_RequestableOwnershipGuard_$$c__DisplayClass33_0SizeCheck;
  static_assert(sizeof(RequestableOwnershipGuard::$$c__DisplayClass33_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::$SetOwnership$b__0
// Il2CppName: <SetOwnership>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::*)(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*)>(&GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::$SetOwnership$b__0)> {
  static const MethodInfo* get() {
    static auto* actualOwner = &::il2cpp_utils::GetClassFromName("", "IRequestableOwnershipGuardCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0*), "<SetOwnership>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actualOwner});
  }
};
