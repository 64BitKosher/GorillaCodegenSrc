// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GorillaLocomotion::Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: IGorillaGrabable
  class IGorillaGrabable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaGrabber
  class GorillaGrabber;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaGrabber);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaGrabber*, "", "GorillaGrabber");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GorillaGrabber
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaGrabber : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GorillaLocomotion.Player player
    // Size: 0x8
    // Offset: 0x20
    ::GorillaLocomotion::Player* player;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Player*) == 0x8);
    // private UnityEngine.XR.XRNode xrNode
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::XR::XRNode xrNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // Padding between fields: xrNode and: audioSource
    char __padding1[0x4] = {};
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Transform currentGrabbedTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* currentGrabbedTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaLocomotion.Gameplay.IGorillaGrabable currentGrabbable
    // Size: 0x8
    // Offset: 0x40
    ::GorillaLocomotion::Gameplay::IGorillaGrabable* currentGrabbable;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Gameplay::IGorillaGrabable*) == 0x8);
    // private System.Single grabRadius
    // Size: 0x4
    // Offset: 0x48
    float grabRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single breakDistance
    // Size: 0x4
    // Offset: 0x4C
    float breakDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.ParticleSystem gripEffects
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem* gripEffects;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Collider[] grabCastResults
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Collider*> grabCastResults;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    public:
    // Get instance field reference: private GorillaLocomotion.Player player
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Player*& dyn_player();
    // Get instance field reference: private UnityEngine.XR.XRNode xrNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_xrNode();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.Transform currentGrabbedTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentGrabbedTransform();
    // Get instance field reference: private GorillaLocomotion.Gameplay.IGorillaGrabable currentGrabbable
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::IGorillaGrabable*& dyn_currentGrabbable();
    // Get instance field reference: private System.Single grabRadius
    [[deprecated("Use field access instead!")]] float& dyn_grabRadius();
    // Get instance field reference: private System.Single breakDistance
    [[deprecated("Use field access instead!")]] float& dyn_breakDistance();
    // Get instance field reference: private UnityEngine.ParticleSystem gripEffects
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_gripEffects();
    // Get instance field reference: private UnityEngine.Collider[] grabCastResults
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_grabCastResults();
    // public UnityEngine.XR.XRNode get_XrNode()
    // Offset: 0x2728FF4
    ::UnityEngine::XR::XRNode get_XrNode();
    // public GorillaLocomotion.Player get_Player()
    // Offset: 0x2728FFC
    ::GorillaLocomotion::Player* get_Player();
    // private System.Void Awake()
    // Offset: 0x2729004
    void Awake();
    // private System.Void Update()
    // Offset: 0x27290A4
    void Update();
    // private System.Boolean GrabDistanceOverCheck()
    // Offset: 0x27291A4
    bool GrabDistanceOverCheck();
    // private System.Void Ungrab()
    // Offset: 0x27292D8
    void Ungrab();
    // private GorillaLocomotion.Gameplay.IGorillaGrabable GetGrabable()
    // Offset: 0x27293A4
    ::GorillaLocomotion::Gameplay::IGorillaGrabable* GetGrabable();
    // public System.Void .ctor()
    // Offset: 0x2729704
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaGrabber* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaGrabber::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaGrabber*, creationType>()));
    }
  }; // GorillaGrabber
  #pragma pack(pop)
  static check_size<sizeof(GorillaGrabber), 88 + sizeof(::ArrayW<::UnityEngine::Collider*>)> __GlobalNamespace_GorillaGrabberSizeCheck;
  static_assert(sizeof(GorillaGrabber) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::get_XrNode
// Il2CppName: get_XrNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRNode (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::get_XrNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "get_XrNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::get_Player
// Il2CppName: get_Player
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Player* (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::get_Player)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "get_Player", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::GrabDistanceOverCheck
// Il2CppName: GrabDistanceOverCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::GrabDistanceOverCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "GrabDistanceOverCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::Ungrab
// Il2CppName: Ungrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::Ungrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "Ungrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::GetGrabable
// Il2CppName: GetGrabable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Gameplay::IGorillaGrabable* (GlobalNamespace::GorillaGrabber::*)()>(&GlobalNamespace::GorillaGrabber::GetGrabable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGrabber*), "GetGrabable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGrabber::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
