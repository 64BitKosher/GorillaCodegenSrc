// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBugBeacon
  class ThrowableBugBeacon;
  // Forward declaring type: ThrowableBugReliableState
  class ThrowableBugReliableState;
  // Forward declaring type: VRRig
  class VRRig;
  // Forward declaring type: DropZone
  class DropZone;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBug
  class ThrowableBug;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThrowableBug);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBug*, "", "ThrowableBug");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: ThrowableBug
  // [TokenAttribute] Offset: FFFFFFFF
  class ThrowableBug : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GlobalNamespace::ThrowableBug::BugName
    struct BugName;
    // Nested type: ::GlobalNamespace::ThrowableBug::AudioState
    struct AudioState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ThrowableBug/BugName
    // [TokenAttribute] Offset: FFFFFFFF
    struct BugName/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BugName
      constexpr BugName(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ThrowableBug/BugName NONE
      static constexpr const int NONE = 0;
      // Get static field: static public ThrowableBug/BugName NONE
      static ::GlobalNamespace::ThrowableBug::BugName _get_NONE();
      // Set static field: static public ThrowableBug/BugName NONE
      static void _set_NONE(::GlobalNamespace::ThrowableBug::BugName value);
      // static field const value: static public ThrowableBug/BugName DougTheBug
      static constexpr const int DougTheBug = 1;
      // Get static field: static public ThrowableBug/BugName DougTheBug
      static ::GlobalNamespace::ThrowableBug::BugName _get_DougTheBug();
      // Set static field: static public ThrowableBug/BugName DougTheBug
      static void _set_DougTheBug(::GlobalNamespace::ThrowableBug::BugName value);
      // static field const value: static public ThrowableBug/BugName MattTheBat
      static constexpr const int MattTheBat = 2;
      // Get static field: static public ThrowableBug/BugName MattTheBat
      static ::GlobalNamespace::ThrowableBug::BugName _get_MattTheBat();
      // Set static field: static public ThrowableBug/BugName MattTheBat
      static void _set_MattTheBat(::GlobalNamespace::ThrowableBug::BugName value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ThrowableBug/BugName
    #pragma pack(pop)
    static check_size<sizeof(ThrowableBug::BugName), 0 + sizeof(int)> __GlobalNamespace_ThrowableBug_BugNameSizeCheck;
    static_assert(sizeof(ThrowableBug::BugName) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ThrowableBug/AudioState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AudioState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AudioState
      constexpr AudioState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ThrowableBug/AudioState JustGrabbed
      static constexpr const int JustGrabbed = 0;
      // Get static field: static public ThrowableBug/AudioState JustGrabbed
      static ::GlobalNamespace::ThrowableBug::AudioState _get_JustGrabbed();
      // Set static field: static public ThrowableBug/AudioState JustGrabbed
      static void _set_JustGrabbed(::GlobalNamespace::ThrowableBug::AudioState value);
      // static field const value: static public ThrowableBug/AudioState ContinuallyGrabbed
      static constexpr const int ContinuallyGrabbed = 1;
      // Get static field: static public ThrowableBug/AudioState ContinuallyGrabbed
      static ::GlobalNamespace::ThrowableBug::AudioState _get_ContinuallyGrabbed();
      // Set static field: static public ThrowableBug/AudioState ContinuallyGrabbed
      static void _set_ContinuallyGrabbed(::GlobalNamespace::ThrowableBug::AudioState value);
      // static field const value: static public ThrowableBug/AudioState JustReleased
      static constexpr const int JustReleased = 2;
      // Get static field: static public ThrowableBug/AudioState JustReleased
      static ::GlobalNamespace::ThrowableBug::AudioState _get_JustReleased();
      // Set static field: static public ThrowableBug/AudioState JustReleased
      static void _set_JustReleased(::GlobalNamespace::ThrowableBug::AudioState value);
      // static field const value: static public ThrowableBug/AudioState NotHeld
      static constexpr const int NotHeld = 3;
      // Get static field: static public ThrowableBug/AudioState NotHeld
      static ::GlobalNamespace::ThrowableBug::AudioState _get_NotHeld();
      // Set static field: static public ThrowableBug/AudioState NotHeld
      static void _set_NotHeld(::GlobalNamespace::ThrowableBug::AudioState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ThrowableBug/AudioState
    #pragma pack(pop)
    static check_size<sizeof(ThrowableBug::AudioState), 0 + sizeof(int)> __GlobalNamespace_ThrowableBug_AudioStateSizeCheck;
    static_assert(sizeof(ThrowableBug::AudioState) == 0x4);
    public:
    // public ThrowableBugReliableState reliableState
    // Size: 0x8
    // Offset: 0x2D0
    ::GlobalNamespace::ThrowableBugReliableState* reliableState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBugReliableState*) == 0x8);
    // public System.Single slowingDownProgress
    // Size: 0x4
    // Offset: 0x2D8
    float slowingDownProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single startingSpeed
    // Size: 0x4
    // Offset: 0x2DC
    float startingSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bobingSpeed
    // Size: 0x4
    // Offset: 0x2E0
    float bobingSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bobMagnintude
    // Size: 0x4
    // Offset: 0x2E4
    float bobMagnintude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean shouldRandomizeFrequency
    // Size: 0x1
    // Offset: 0x2E8
    bool shouldRandomizeFrequency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single minRandFrequency
    // Size: 0x4
    // Offset: 0x2EC
    float minRandFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxRandFrequency
    // Size: 0x4
    // Offset: 0x2F0
    float maxRandFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bobingFrequency
    // Size: 0x4
    // Offset: 0x2F4
    float bobingFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bobingState
    // Size: 0x4
    // Offset: 0x2F8
    float bobingState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single thrownYVelocity
    // Size: 0x4
    // Offset: 0x2FC
    float thrownYVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single collisionHitRadius
    // Size: 0x4
    // Offset: 0x300
    float collisionHitRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask collisionCheckMask
    // Size: 0x4
    // Offset: 0x304
    ::UnityEngine::LayerMask collisionCheckMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.Vector3 thrownVeloicity
    // Size: 0xC
    // Offset: 0x308
    ::UnityEngine::Vector3 thrownVeloicity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 targetVelocity
    // Size: 0xC
    // Offset: 0x314
    ::UnityEngine::Vector3 targetVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion bugRotationalVelocity
    // Size: 0x10
    // Offset: 0x320
    ::UnityEngine::Quaternion bugRotationalVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.RaycastHit[] rayCastNonAllocColliders
    // Size: 0x8
    // Offset: 0x330
    ::ArrayW<::UnityEngine::RaycastHit> rayCastNonAllocColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.RaycastHit[] rayCastNonAllocColliders2
    // Size: 0x8
    // Offset: 0x338
    ::ArrayW<::UnityEngine::RaycastHit> rayCastNonAllocColliders2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // public VRRig followingRig
    // Size: 0x8
    // Offset: 0x340
    ::GlobalNamespace::VRRig* followingRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public System.Boolean isTooHighTravelingDown
    // Size: 0x1
    // Offset: 0x348
    bool isTooHighTravelingDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single descentSlerp
    // Size: 0x4
    // Offset: 0x34C
    float descentSlerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ascentSlerp
    // Size: 0x4
    // Offset: 0x350
    float ascentSlerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxNaturalSpeed
    // Size: 0x4
    // Offset: 0x354
    float maxNaturalSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowdownAcceleration
    // Size: 0x4
    // Offset: 0x358
    float slowdownAcceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maximumHeightOffOfTheGroundBeforeStartingDescent
    // Size: 0x4
    // Offset: 0x35C
    float maximumHeightOffOfTheGroundBeforeStartingDescent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minimumHeightOffOfTheGroundBeforeStoppingDescent
    // Size: 0x4
    // Offset: 0x360
    float minimumHeightOffOfTheGroundBeforeStoppingDescent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single descentRate
    // Size: 0x4
    // Offset: 0x364
    float descentRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single descentSlerpRate
    // Size: 0x4
    // Offset: 0x368
    float descentSlerpRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minimumHeightOffOfTheGroundBeforeStartingAscent
    // Size: 0x4
    // Offset: 0x36C
    float minimumHeightOffOfTheGroundBeforeStartingAscent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maximumHeightOffOfTheGroundBeforeStoppingAscent
    // Size: 0x4
    // Offset: 0x370
    float maximumHeightOffOfTheGroundBeforeStoppingAscent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ascentRate
    // Size: 0x4
    // Offset: 0x374
    float ascentRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ascentSlerpRate
    // Size: 0x4
    // Offset: 0x378
    float ascentSlerpRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isTooLowTravelingUp
    // Size: 0x1
    // Offset: 0x37C
    bool isTooLowTravelingUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x380
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.AudioClip grabBugAudioClip
    // Size: 0x8
    // Offset: 0x388
    ::UnityEngine::AudioClip* grabBugAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip releaseBugAudioClip
    // Size: 0x8
    // Offset: 0x390
    ::UnityEngine::AudioClip* releaseBugAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip flyingBugAudioClip
    // Size: 0x8
    // Offset: 0x398
    ::UnityEngine::AudioClip* flyingBugAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x3A0
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single bobbingDefaultFrequency
    // Size: 0x4
    // Offset: 0x3A8
    float bobbingDefaultFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 updateMultiplier
    // Size: 0x4
    // Offset: 0x3AC
    int updateMultiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private ThrowableBug/AudioState currentAudioState
    // Size: 0x4
    // Offset: 0x3B0
    ::GlobalNamespace::ThrowableBug::AudioState currentAudioState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBug::AudioState) == 0x4);
    // private System.Single speedMultiplier
    // Size: 0x4
    // Offset: 0x3B4
    float speedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private ThrowableBug/BugName bugName
    // Size: 0x4
    // Offset: 0x3B8
    ::GlobalNamespace::ThrowableBug::BugName bugName;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBug::BugName) == 0x4);
    // private UnityEngine.Transform lockedTarget
    // Size: 0x8
    // Offset: 0x3C0
    ::UnityEngine::Transform* lockedTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean locked
    // Size: 0x1
    // Offset: 0x3C8
    bool locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public ThrowableBugReliableState reliableState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugReliableState*& dyn_reliableState();
    // Get instance field reference: public System.Single slowingDownProgress
    [[deprecated("Use field access instead!")]] float& dyn_slowingDownProgress();
    // Get instance field reference: public System.Single startingSpeed
    [[deprecated("Use field access instead!")]] float& dyn_startingSpeed();
    // Get instance field reference: public System.Single bobingSpeed
    [[deprecated("Use field access instead!")]] float& dyn_bobingSpeed();
    // Get instance field reference: public System.Single bobMagnintude
    [[deprecated("Use field access instead!")]] float& dyn_bobMagnintude();
    // Get instance field reference: public System.Boolean shouldRandomizeFrequency
    [[deprecated("Use field access instead!")]] bool& dyn_shouldRandomizeFrequency();
    // Get instance field reference: public System.Single minRandFrequency
    [[deprecated("Use field access instead!")]] float& dyn_minRandFrequency();
    // Get instance field reference: public System.Single maxRandFrequency
    [[deprecated("Use field access instead!")]] float& dyn_maxRandFrequency();
    // Get instance field reference: public System.Single bobingFrequency
    [[deprecated("Use field access instead!")]] float& dyn_bobingFrequency();
    // Get instance field reference: public System.Single bobingState
    [[deprecated("Use field access instead!")]] float& dyn_bobingState();
    // Get instance field reference: public System.Single thrownYVelocity
    [[deprecated("Use field access instead!")]] float& dyn_thrownYVelocity();
    // Get instance field reference: public System.Single collisionHitRadius
    [[deprecated("Use field access instead!")]] float& dyn_collisionHitRadius();
    // Get instance field reference: public UnityEngine.LayerMask collisionCheckMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_collisionCheckMask();
    // Get instance field reference: public UnityEngine.Vector3 thrownVeloicity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_thrownVeloicity();
    // Get instance field reference: public UnityEngine.Vector3 targetVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetVelocity();
    // Get instance field reference: public UnityEngine.Quaternion bugRotationalVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_bugRotationalVelocity();
    // Get instance field reference: private UnityEngine.RaycastHit[] rayCastNonAllocColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_rayCastNonAllocColliders();
    // Get instance field reference: private UnityEngine.RaycastHit[] rayCastNonAllocColliders2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_rayCastNonAllocColliders2();
    // Get instance field reference: public VRRig followingRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_followingRig();
    // Get instance field reference: public System.Boolean isTooHighTravelingDown
    [[deprecated("Use field access instead!")]] bool& dyn_isTooHighTravelingDown();
    // Get instance field reference: public System.Single descentSlerp
    [[deprecated("Use field access instead!")]] float& dyn_descentSlerp();
    // Get instance field reference: public System.Single ascentSlerp
    [[deprecated("Use field access instead!")]] float& dyn_ascentSlerp();
    // Get instance field reference: public System.Single maxNaturalSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxNaturalSpeed();
    // Get instance field reference: public System.Single slowdownAcceleration
    [[deprecated("Use field access instead!")]] float& dyn_slowdownAcceleration();
    // Get instance field reference: public System.Single maximumHeightOffOfTheGroundBeforeStartingDescent
    [[deprecated("Use field access instead!")]] float& dyn_maximumHeightOffOfTheGroundBeforeStartingDescent();
    // Get instance field reference: public System.Single minimumHeightOffOfTheGroundBeforeStoppingDescent
    [[deprecated("Use field access instead!")]] float& dyn_minimumHeightOffOfTheGroundBeforeStoppingDescent();
    // Get instance field reference: public System.Single descentRate
    [[deprecated("Use field access instead!")]] float& dyn_descentRate();
    // Get instance field reference: public System.Single descentSlerpRate
    [[deprecated("Use field access instead!")]] float& dyn_descentSlerpRate();
    // Get instance field reference: public System.Single minimumHeightOffOfTheGroundBeforeStartingAscent
    [[deprecated("Use field access instead!")]] float& dyn_minimumHeightOffOfTheGroundBeforeStartingAscent();
    // Get instance field reference: public System.Single maximumHeightOffOfTheGroundBeforeStoppingAscent
    [[deprecated("Use field access instead!")]] float& dyn_maximumHeightOffOfTheGroundBeforeStoppingAscent();
    // Get instance field reference: public System.Single ascentRate
    [[deprecated("Use field access instead!")]] float& dyn_ascentRate();
    // Get instance field reference: public System.Single ascentSlerpRate
    [[deprecated("Use field access instead!")]] float& dyn_ascentSlerpRate();
    // Get instance field reference: private System.Boolean isTooLowTravelingUp
    [[deprecated("Use field access instead!")]] bool& dyn_isTooLowTravelingUp();
    // Get instance field reference: public UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: public UnityEngine.AudioClip grabBugAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_grabBugAudioClip();
    // Get instance field reference: public UnityEngine.AudioClip releaseBugAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_releaseBugAudioClip();
    // Get instance field reference: public UnityEngine.AudioClip flyingBugAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_flyingBugAudioClip();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single bobbingDefaultFrequency
    [[deprecated("Use field access instead!")]] float& dyn_bobbingDefaultFrequency();
    // Get instance field reference: public System.Int32 updateMultiplier
    [[deprecated("Use field access instead!")]] int& dyn_updateMultiplier();
    // Get instance field reference: private ThrowableBug/AudioState currentAudioState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::AudioState& dyn_currentAudioState();
    // Get instance field reference: private System.Single speedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_speedMultiplier();
    // Get instance field reference: private ThrowableBug/BugName bugName
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::BugName& dyn_bugName();
    // Get instance field reference: private UnityEngine.Transform lockedTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lockedTarget();
    // Get instance field reference: private System.Boolean locked
    [[deprecated("Use field access instead!")]] bool& dyn_locked();
    // private System.Boolean isValid(ThrowableBugBeacon tbb)
    // Offset: 0x27A3238
    bool isValid(::GlobalNamespace::ThrowableBugBeacon* tbb);
    // private System.Void ThrowableBugBeacon_OnCall(ThrowableBugBeacon tbb)
    // Offset: 0x27A3350
    void ThrowableBugBeacon_OnCall(::GlobalNamespace::ThrowableBugBeacon* tbb);
    // private System.Void ThrowableBugBeacon_OnLock(ThrowableBugBeacon tbb)
    // Offset: 0x27A33E4
    void ThrowableBugBeacon_OnLock(::GlobalNamespace::ThrowableBugBeacon* tbb);
    // private System.Void ThrowableBugBeacon_OnDismiss(ThrowableBugBeacon tbb)
    // Offset: 0x27A349C
    void ThrowableBugBeacon_OnDismiss(::GlobalNamespace::ThrowableBugBeacon* tbb);
    // private System.Void ThrowableBugBeacon_OnUnlock(ThrowableBugBeacon tbb)
    // Offset: 0x27A3534
    void ThrowableBugBeacon_OnUnlock(::GlobalNamespace::ThrowableBugBeacon* tbb);
    // private System.Void ThrowableBugBeacon_OnChangeSpeedMultiplier(ThrowableBugBeacon tbb, System.Single f)
    // Offset: 0x27A3550
    void ThrowableBugBeacon_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon* tbb, float f);
    // private System.Single RandomizeBobingFrequency()
    // Offset: 0x27A4ADC
    float RandomizeBobingFrequency();
    // public System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x27A4D20
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void Update()
    // Offset: 0x27A4D50
    void Update();
    // protected override System.Void Start()
    // Offset: 0x27A2524
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // public override System.Void OnEnable()
    // Offset: 0x27A25E4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x27A2D18
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // public override System.Boolean ShouldBeKinematic()
    // Offset: 0x27A3578
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::ShouldBeKinematic()
    bool ShouldBeKinematic();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x27A3580
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x27A3854
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x27A4AEC
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public System.Void .ctor()
    // Offset: 0x27A4D9C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThrowableBug* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThrowableBug*, creationType>()));
    }
  }; // ThrowableBug
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBug::AudioState, "", "ThrowableBug/AudioState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBug::BugName, "", "ThrowableBug/BugName");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::isValid
// Il2CppName: isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*)>(&GlobalNamespace::ThrowableBug::isValid)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnCall
// Il2CppName: ThrowableBugBeacon_OnCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*)>(&GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnCall)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ThrowableBugBeacon_OnCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnLock
// Il2CppName: ThrowableBugBeacon_OnLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*)>(&GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnLock)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ThrowableBugBeacon_OnLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnDismiss
// Il2CppName: ThrowableBugBeacon_OnDismiss
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*)>(&GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnDismiss)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ThrowableBugBeacon_OnDismiss", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnUnlock
// Il2CppName: ThrowableBugBeacon_OnUnlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*)>(&GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnUnlock)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ThrowableBugBeacon_OnUnlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnChangeSpeedMultiplier
// Il2CppName: ThrowableBugBeacon_OnChangeSpeedMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::ThrowableBugBeacon*, float)>(&GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnChangeSpeedMultiplier)> {
  static const MethodInfo* get() {
    static auto* tbb = &::il2cpp_utils::GetClassFromName("", "ThrowableBugBeacon")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ThrowableBugBeacon_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbb, f});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::RandomizeBobingFrequency
// Il2CppName: RandomizeBobingFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::RandomizeBobingFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "RandomizeBobingFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)(::UnityEngine::Collision*)>(&GlobalNamespace::ThrowableBug::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::ShouldBeKinematic
// Il2CppName: ShouldBeKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::ShouldBeKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "ShouldBeKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBug::*)()>(&GlobalNamespace::ThrowableBug::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ThrowableBug::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GlobalNamespace::ThrowableBug::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBug*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBug::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
