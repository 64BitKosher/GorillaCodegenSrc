// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Size3f, "", "OVRPlugin/Size3f");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/Size3f
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::Size3f/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single w
    // Size: 0x4
    // Offset: 0x0
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single h
    // Size: 0x4
    // Offset: 0x4
    float h;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single d
    // Size: 0x4
    // Offset: 0x8
    float d;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Size3f
    constexpr Size3f(float w_ = {}, float h_ = {}, float d_ = {}) noexcept : w{w_}, h{h_}, d{d_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly OVRPlugin/Size3f zero
    static ::GlobalNamespace::OVRPlugin::Size3f _get_zero();
    // Set static field: static public readonly OVRPlugin/Size3f zero
    static void _set_zero(::GlobalNamespace::OVRPlugin::Size3f value);
    // Get instance field reference: public System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // Get instance field reference: public System.Single h
    [[deprecated("Use field access instead!")]] float& dyn_h();
    // Get instance field reference: public System.Single d
    [[deprecated("Use field access instead!")]] float& dyn_d();
    // static private System.Void .cctor()
    // Offset: 0x4905864
    static void _cctor();
  }; // OVRPlugin/Size3f
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::Size3f), 8 + sizeof(float)> __GlobalNamespace_OVRPlugin_Size3fSizeCheck;
  static_assert(sizeof(OVRPlugin::Size3f) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::Size3f::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::Size3f::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin::Size3f), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
