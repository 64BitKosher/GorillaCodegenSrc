// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BezierControlPointMode
#include "GlobalNamespace/BezierControlPointMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BezierSpline);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BezierSpline*, "", "BezierSpline");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: BezierSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class BezierSpline : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3[] points
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private BezierControlPointMode[] modes
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::BezierControlPointMode> modes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BezierControlPointMode>) == 0x8);
    // private System.Boolean loop
    // Size: 0x1
    // Offset: 0x30
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop and: totalArcLength
    char __padding2[0x3] = {};
    // private System.Single _totalArcLength
    // Size: 0x4
    // Offset: 0x34
    float totalArcLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] _timesTable
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> timesTable;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _lengthsTable
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> lengthsTable;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3[] points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_points();
    // Get instance field reference: private BezierControlPointMode[] modes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BezierControlPointMode>& dyn_modes();
    // Get instance field reference: private System.Boolean loop
    [[deprecated("Use field access instead!")]] bool& dyn_loop();
    // Get instance field reference: private System.Single _totalArcLength
    [[deprecated("Use field access instead!")]] float& dyn__totalArcLength();
    // Get instance field reference: private System.Single[] _timesTable
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__timesTable();
    // Get instance field reference: private System.Single[] _lengthsTable
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__lengthsTable();
    // private System.Void Awake()
    // Offset: 0x277AF08
    void Awake();
    // private System.Void buildTimesLenghtsTables(System.Int32 subdivisions)
    // Offset: 0x277B0CC
    void buildTimesLenghtsTables(int subdivisions);
    // private System.Single getPathFromTime(System.Single t)
    // Offset: 0x277B410
    float getPathFromTime(float t);
    // public System.Boolean get_Loop()
    // Offset: 0x277B530
    bool get_Loop();
    // public System.Void set_Loop(System.Boolean value)
    // Offset: 0x277B538
    void set_Loop(bool value);
    // public System.Int32 get_ControlPointCount()
    // Offset: 0x277B7D4
    int get_ControlPointCount();
    // public UnityEngine.Vector3 GetControlPoint(System.Int32 index)
    // Offset: 0x277B7F0
    ::UnityEngine::Vector3 GetControlPoint(int index);
    // public System.Void SetControlPoint(System.Int32 index, UnityEngine.Vector3 point)
    // Offset: 0x277B5A0
    void SetControlPoint(int index, ::UnityEngine::Vector3 point);
    // public BezierControlPointMode GetControlPointMode(System.Int32 index)
    // Offset: 0x277BAD4
    ::GlobalNamespace::BezierControlPointMode GetControlPointMode(int index);
    // public System.Void SetControlPointMode(System.Int32 index, BezierControlPointMode mode)
    // Offset: 0x277BB20
    void SetControlPointMode(int index, ::GlobalNamespace::BezierControlPointMode mode);
    // private System.Void EnforceMode(System.Int32 index)
    // Offset: 0x277B82C
    void EnforceMode(int index);
    // public System.Int32 get_CurveCount()
    // Offset: 0x277BB98
    int get_CurveCount();
    // public UnityEngine.Vector3 GetPoint(System.Single t, System.Boolean ConstantVelocity)
    // Offset: 0x277BBD0
    ::UnityEngine::Vector3 GetPoint(float t, bool ConstantVelocity);
    // public UnityEngine.Vector3 GetPoint(System.Single t)
    // Offset: 0x277B29C
    ::UnityEngine::Vector3 GetPoint(float t);
    // public UnityEngine.Vector3 GetPointLocal(System.Single t)
    // Offset: 0x277BBF0
    ::UnityEngine::Vector3 GetPointLocal(float t);
    // public UnityEngine.Vector3 GetVelocity(System.Single t)
    // Offset: 0x277BD28
    ::UnityEngine::Vector3 GetVelocity(float t);
    // public UnityEngine.Vector3 GetDirection(System.Single t, System.Boolean ConstantVelocity)
    // Offset: 0x277BED8
    ::UnityEngine::Vector3 GetDirection(float t, bool ConstantVelocity);
    // public UnityEngine.Vector3 GetDirection(System.Single t)
    // Offset: 0x277BEF8
    ::UnityEngine::Vector3 GetDirection(float t);
    // public System.Void AddCurve()
    // Offset: 0x277BFCC
    void AddCurve();
    // public System.Void RemoveLastCurve()
    // Offset: 0x277C1F4
    void RemoveLastCurve();
    // public System.Void RemoveCurve(System.Int32 index)
    // Offset: 0x277C294
    void RemoveCurve(int index);
    // public System.Void Reset()
    // Offset: 0x277C440
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x277C528
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSpline*, creationType>()));
    }
  }; // BezierSpline
  #pragma pack(pop)
  static check_size<sizeof(BezierSpline), 64 + sizeof(::ArrayW<float>)> __GlobalNamespace_BezierSplineSizeCheck;
  static_assert(sizeof(BezierSpline) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::buildTimesLenghtsTables
// Il2CppName: buildTimesLenghtsTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(int)>(&GlobalNamespace::BezierSpline::buildTimesLenghtsTables)> {
  static const MethodInfo* get() {
    static auto* subdivisions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "buildTimesLenghtsTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subdivisions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::getPathFromTime
// Il2CppName: getPathFromTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BezierSpline::*)(float)>(&GlobalNamespace::BezierSpline::getPathFromTime)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "getPathFromTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::get_Loop
// Il2CppName: get_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::get_Loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "get_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::set_Loop
// Il2CppName: set_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(bool)>(&GlobalNamespace::BezierSpline::set_Loop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "set_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::get_ControlPointCount
// Il2CppName: get_ControlPointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::get_ControlPointCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "get_ControlPointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetControlPoint
// Il2CppName: GetControlPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(int)>(&GlobalNamespace::BezierSpline::GetControlPoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetControlPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::SetControlPoint
// Il2CppName: SetControlPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(int, ::UnityEngine::Vector3)>(&GlobalNamespace::BezierSpline::SetControlPoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "SetControlPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, point});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetControlPointMode
// Il2CppName: GetControlPointMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BezierControlPointMode (GlobalNamespace::BezierSpline::*)(int)>(&GlobalNamespace::BezierSpline::GetControlPointMode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetControlPointMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::SetControlPointMode
// Il2CppName: SetControlPointMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(int, ::GlobalNamespace::BezierControlPointMode)>(&GlobalNamespace::BezierSpline::SetControlPointMode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("", "BezierControlPointMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "SetControlPointMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, mode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::EnforceMode
// Il2CppName: EnforceMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(int)>(&GlobalNamespace::BezierSpline::EnforceMode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "EnforceMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::get_CurveCount
// Il2CppName: get_CurveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::get_CurveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "get_CurveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float, bool)>(&GlobalNamespace::BezierSpline::GetPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ConstantVelocity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, ConstantVelocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float)>(&GlobalNamespace::BezierSpline::GetPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetPointLocal
// Il2CppName: GetPointLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float)>(&GlobalNamespace::BezierSpline::GetPointLocal)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetPointLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetVelocity
// Il2CppName: GetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float)>(&GlobalNamespace::BezierSpline::GetVelocity)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float, bool)>(&GlobalNamespace::BezierSpline::GetDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ConstantVelocity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, ConstantVelocity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BezierSpline::*)(float)>(&GlobalNamespace::BezierSpline::GetDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::AddCurve
// Il2CppName: AddCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::AddCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "AddCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::RemoveLastCurve
// Il2CppName: RemoveLastCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::RemoveLastCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "RemoveLastCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::RemoveCurve
// Il2CppName: RemoveCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)(int)>(&GlobalNamespace::BezierSpline::RemoveCurve)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "RemoveCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BezierSpline::*)()>(&GlobalNamespace::BezierSpline::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BezierSpline*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
