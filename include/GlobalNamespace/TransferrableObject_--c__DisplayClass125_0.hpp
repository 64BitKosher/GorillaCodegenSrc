// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0*, "", "TransferrableObject/<>c__DisplayClass125_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: TransferrableObject/<>c__DisplayClass125_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TransferrableObject::$$c__DisplayClass125_0 : public ::Il2CppObject {
    public:
    public:
    // public TransferrableObject <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::TransferrableObject* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject*) == 0x8);
    // public Photon.Realtime.Player owner
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Realtime::Player* owner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    public:
    // Get instance field reference: public TransferrableObject <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& dyn_$$4__this();
    // Get instance field reference: public Photon.Realtime.Player owner
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_owner();
    // public System.Void .ctor()
    // Offset: 0x26C70A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferrableObject::$$c__DisplayClass125_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferrableObject::$$c__DisplayClass125_0*, creationType>()));
    }
    // System.Void <SpawnTransferableObjectViews>b__0()
    // Offset: 0x26CB338
    void $SpawnTransferableObjectViews$b__0();
  }; // TransferrableObject/<>c__DisplayClass125_0
  #pragma pack(pop)
  static check_size<sizeof(TransferrableObject::$$c__DisplayClass125_0), 24 + sizeof(::Photon::Realtime::Player*)> __GlobalNamespace_TransferrableObject_$$c__DisplayClass125_0SizeCheck;
  static_assert(sizeof(TransferrableObject::$$c__DisplayClass125_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::$SpawnTransferableObjectViews$b__0
// Il2CppName: <SpawnTransferableObjectViews>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::*)()>(&GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::$SpawnTransferableObjectViews$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0*), "<SpawnTransferableObjectViews>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
