// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SimpleResizable
#include "GlobalNamespace/SimpleResizable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SimpleResizer
  class SimpleResizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SimpleResizer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SimpleResizer*, "", "SimpleResizer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: SimpleResizer
  // [TokenAttribute] Offset: FFFFFFFF
  class SimpleResizer : public ::Il2CppObject {
    public:
    // public System.Void CreateResizedObject(UnityEngine.Vector3 newSize, UnityEngine.GameObject parent, SimpleResizable sourcePrefab)
    // Offset: 0x29476B0
    void CreateResizedObject(::UnityEngine::Vector3 newSize, ::UnityEngine::GameObject* parent, ::GlobalNamespace::SimpleResizable* sourcePrefab);
    // static UnityEngine.Mesh ProcessVertices(SimpleResizable resizable, UnityEngine.Vector3 newSize, System.Boolean pivot)
    // Offset: 0x29486A8
    static ::UnityEngine::Mesh* ProcessVertices(::GlobalNamespace::SimpleResizable* resizable, ::UnityEngine::Vector3 newSize, bool pivot);
    // static private System.Single CalculateNewVertexPosition(SimpleResizable/Method resizeMethod, System.Single currentPosition, System.Single currentSize, System.Single newSize, System.Single padding, System.Single paddingMax, System.Single pivot)
    // Offset: 0x2949070
    static float CalculateNewVertexPosition(::GlobalNamespace::SimpleResizable::Method resizeMethod, float currentPosition, float currentSize, float newSize, float padding, float paddingMax, float pivot);
    // public System.Void .ctor()
    // Offset: 0x29476A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleResizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleResizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleResizer*, creationType>()));
    }
  }; // SimpleResizer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizer::CreateResizedObject
// Il2CppName: CreateResizedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleResizer::*)(::UnityEngine::Vector3, ::UnityEngine::GameObject*, ::GlobalNamespace::SimpleResizable*)>(&GlobalNamespace::SimpleResizer::CreateResizedObject)> {
  static const MethodInfo* get() {
    static auto* newSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* sourcePrefab = &::il2cpp_utils::GetClassFromName("", "SimpleResizable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizer*), "CreateResizedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSize, parent, sourcePrefab});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizer::ProcessVertices
// Il2CppName: ProcessVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)(::GlobalNamespace::SimpleResizable*, ::UnityEngine::Vector3, bool)>(&GlobalNamespace::SimpleResizer::ProcessVertices)> {
  static const MethodInfo* get() {
    static auto* resizable = &::il2cpp_utils::GetClassFromName("", "SimpleResizable")->byval_arg;
    static auto* newSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizer*), "ProcessVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resizable, newSize, pivot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizer::CalculateNewVertexPosition
// Il2CppName: CalculateNewVertexPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::GlobalNamespace::SimpleResizable::Method, float, float, float, float, float, float)>(&GlobalNamespace::SimpleResizer::CalculateNewVertexPosition)> {
  static const MethodInfo* get() {
    static auto* resizeMethod = &::il2cpp_utils::GetClassFromName("", "SimpleResizable/Method")->byval_arg;
    static auto* currentPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* newSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paddingMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleResizer*), "CalculateNewVertexPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resizeMethod, currentPosition, currentSize, newSize, padding, paddingMax, pivot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleResizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
