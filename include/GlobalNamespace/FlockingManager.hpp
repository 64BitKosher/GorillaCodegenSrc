// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Flocking
  class Flocking;
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`2<T0, T1>
  template<typename T0, typename T1>
  class UnityAction_2;
  // Forward declaring type: UnityAction
  class UnityAction;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FlockingManager
  class FlockingManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FlockingManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FlockingManager*, "", "FlockingManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: FlockingManager
  // [TokenAttribute] Offset: FFFFFFFF
  class FlockingManager : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    // Nested type: ::GlobalNamespace::FlockingManager::FishArea
    class FishArea;
    public:
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> fishAreaContainer
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* fishAreaContainer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.String foodProjectileTag
    // Size: 0x8
    // Offset: 0x30
    ::StringW foodProjectileTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Vector3> areaToWaypointDict
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Vector3>* areaToWaypointDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<FlockingManager/FishArea> fishAreaList
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::FlockingManager::FishArea*>* fishAreaList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::FlockingManager::FishArea*>*) == 0x8);
    // private System.Collections.Generic.List`1<Flocking> allFish
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>* allFish;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>*) == 0x8);
    // public UnityEngine.Events.UnityAction`2<SlingshotProjectile,System.Boolean> onFoodDetected
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityAction_2<::GlobalNamespace::SlingshotProjectile*, bool>* onFoodDetected;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_2<::GlobalNamespace::SlingshotProjectile*, bool>*) == 0x8);
    // public UnityEngine.Events.UnityAction onFoodDestroyed
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Events::UnityAction* onFoodDestroyed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction*) == 0x8);
    // private System.Boolean hasBeenSerialized
    // Size: 0x1
    // Offset: 0x60
    bool hasBeenSerialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get static field: static public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> avoidPoints
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* _get_avoidPoints();
    // Set static field: static public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> avoidPoints
    static void _set_avoidPoints(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* value);
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> fishAreaContainer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_fishAreaContainer();
    // Get instance field reference: public System.String foodProjectileTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_foodProjectileTag();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Vector3> areaToWaypointDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Vector3>*& dyn_areaToWaypointDict();
    // Get instance field reference: private System.Collections.Generic.List`1<FlockingManager/FishArea> fishAreaList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::FlockingManager::FishArea*>*& dyn_fishAreaList();
    // Get instance field reference: private System.Collections.Generic.List`1<Flocking> allFish
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::Flocking*>*& dyn_allFish();
    // Get instance field reference: public UnityEngine.Events.UnityAction`2<SlingshotProjectile,System.Boolean> onFoodDetected
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_2<::GlobalNamespace::SlingshotProjectile*, bool>*& dyn_onFoodDetected();
    // Get instance field reference: public UnityEngine.Events.UnityAction onFoodDestroyed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction*& dyn_onFoodDestroyed();
    // Get instance field reference: private System.Boolean hasBeenSerialized
    [[deprecated("Use field access instead!")]] bool& dyn_hasBeenSerialized();
    // private System.Void Awake()
    // Offset: 0x26F55C4
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x26F5C44
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x26F5F44
    void Update();
    // public UnityEngine.Vector3 GetRandomPointInsideCollider(FlockingManager/FishArea fishArea)
    // Offset: 0x26F4928
    ::UnityEngine::Vector3 GetRandomPointInsideCollider(::GlobalNamespace::FlockingManager::FishArea* fishArea);
    // public System.Boolean IsInside(UnityEngine.Vector3 point, FlockingManager/FishArea fish)
    // Offset: 0x26F45E0
    bool IsInside(::UnityEngine::Vector3 point, ::GlobalNamespace::FlockingManager::FishArea* fish);
    // public UnityEngine.Vector3 RestrictPointToArea(UnityEngine.Vector3 point, FlockingManager/FishArea fish)
    // Offset: 0x26F4B38
    ::UnityEngine::Vector3 RestrictPointToArea(::UnityEngine::Vector3 point, ::GlobalNamespace::FlockingManager::FishArea* fish);
    // private System.Void ProjectileHitReceiver(SlingshotProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x26F6268
    void ProjectileHitReceiver(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider);
    // private System.Void ProjectileHitExit(SlingshotProjectile projectile, UnityEngine.Collider collider1)
    // Offset: 0x26F62C8
    void ProjectileHitExit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider1);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x26F62E4
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // static public System.Void RegisterAvoidPoint(UnityEngine.GameObject obj)
    // Offset: 0x26F62E8
    static void RegisterAvoidPoint(::UnityEngine::GameObject* obj);
    // static public System.Void UnregisterAvoidPoint(UnityEngine.GameObject obj)
    // Offset: 0x26F63BC
    static void UnregisterAvoidPoint(::UnityEngine::GameObject* obj);
    // public System.Void .ctor()
    // Offset: 0x26F643C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlockingManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlockingManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlockingManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26F6590
    static void _cctor();
  }; // FlockingManager
  #pragma pack(pop)
  static check_size<sizeof(FlockingManager), 96 + sizeof(bool)> __GlobalNamespace_FlockingManagerSizeCheck;
  static_assert(sizeof(FlockingManager) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)()>(&GlobalNamespace::FlockingManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)()>(&GlobalNamespace::FlockingManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)()>(&GlobalNamespace::FlockingManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::GetRandomPointInsideCollider
// Il2CppName: GetRandomPointInsideCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::FlockingManager::*)(::GlobalNamespace::FlockingManager::FishArea*)>(&GlobalNamespace::FlockingManager::GetRandomPointInsideCollider)> {
  static const MethodInfo* get() {
    static auto* fishArea = &::il2cpp_utils::GetClassFromName("", "FlockingManager/FishArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "GetRandomPointInsideCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fishArea});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::IsInside
// Il2CppName: IsInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FlockingManager::*)(::UnityEngine::Vector3, ::GlobalNamespace::FlockingManager::FishArea*)>(&GlobalNamespace::FlockingManager::IsInside)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fish = &::il2cpp_utils::GetClassFromName("", "FlockingManager/FishArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "IsInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, fish});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::RestrictPointToArea
// Il2CppName: RestrictPointToArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::FlockingManager::*)(::UnityEngine::Vector3, ::GlobalNamespace::FlockingManager::FishArea*)>(&GlobalNamespace::FlockingManager::RestrictPointToArea)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fish = &::il2cpp_utils::GetClassFromName("", "FlockingManager/FishArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "RestrictPointToArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, fish});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::ProjectileHitReceiver
// Il2CppName: ProjectileHitReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GlobalNamespace::FlockingManager::ProjectileHitReceiver)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "ProjectileHitReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::ProjectileHitExit
// Il2CppName: ProjectileHitExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GlobalNamespace::FlockingManager::ProjectileHitExit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "ProjectileHitExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider1});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FlockingManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::FlockingManager::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::RegisterAvoidPoint
// Il2CppName: RegisterAvoidPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::FlockingManager::RegisterAvoidPoint)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "RegisterAvoidPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::UnregisterAvoidPoint
// Il2CppName: UnregisterAvoidPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::FlockingManager::UnregisterAvoidPoint)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), "UnregisterAvoidPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FlockingManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FlockingManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FlockingManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
