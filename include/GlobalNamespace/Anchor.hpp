// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AnchorUIManager
  class AnchorUIManager;
  // Forward declaring type: OVRSpatialAnchor
  class OVRSpatialAnchor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Guid
  struct Guid;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Anchor
  class Anchor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Anchor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Anchor*, "", "Anchor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: Anchor
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class Anchor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Anchor::$Start$d__21
    class $Start$d__21;
    public:
    // private UnityEngine.Canvas _canvas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Canvas* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.Transform _pivot
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* pivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject _anchorMenu
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* anchorMenu;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean _isSelected
    // Size: 0x1
    // Offset: 0x38
    bool isSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isHovered
    // Size: 0x1
    // Offset: 0x39
    bool isHovered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHovered and: anchorName
    char __padding4[0x6] = {};
    // private TMPro.TextMeshProUGUI _anchorName
    // Size: 0x8
    // Offset: 0x40
    ::TMPro::TextMeshProUGUI* anchorName;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private UnityEngine.GameObject _saveIcon
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* saveIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.UI.Image _labelImage
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Image* labelImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.Color _labelBaseColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color labelBaseColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _labelHighlightColor
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color labelHighlightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _labelSelectedColor
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color labelSelectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private AnchorUIManager _uiManager
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::AnchorUIManager* uiManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AnchorUIManager*) == 0x8);
    // private UnityEngine.MeshRenderer[] _renderers
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::MeshRenderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // private System.Int32 _menuIndex
    // Size: 0x4
    // Offset: 0x98
    int menuIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: menuIndex and: buttonList
    char __padding13[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.UI.Button> _buttonList
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>* buttonList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>*) == 0x8);
    // private UnityEngine.UI.Button _selectedButton
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::UI::Button* selectedButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private OVRSpatialAnchor _spatialAnchor
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::OVRSpatialAnchor* spatialAnchor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpatialAnchor*) == 0x8);
    // private UnityEngine.GameObject _icon
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* icon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // static field const value: static public System.String NumUuidsPlayerPref
    static constexpr const char* NumUuidsPlayerPref = "numUuids";
    // Get static field: static public System.String NumUuidsPlayerPref
    static ::StringW _get_NumUuidsPlayerPref();
    // Set static field: static public System.String NumUuidsPlayerPref
    static void _set_NumUuidsPlayerPref(::StringW value);
    // Get instance field reference: private UnityEngine.Canvas _canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__canvas();
    // Get instance field reference: private UnityEngine.Transform _pivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pivot();
    // Get instance field reference: private UnityEngine.GameObject _anchorMenu
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__anchorMenu();
    // Get instance field reference: private System.Boolean _isSelected
    [[deprecated("Use field access instead!")]] bool& dyn__isSelected();
    // Get instance field reference: private System.Boolean _isHovered
    [[deprecated("Use field access instead!")]] bool& dyn__isHovered();
    // Get instance field reference: private TMPro.TextMeshProUGUI _anchorName
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__anchorName();
    // Get instance field reference: private UnityEngine.GameObject _saveIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__saveIcon();
    // Get instance field reference: private UnityEngine.UI.Image _labelImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__labelImage();
    // Get instance field reference: private UnityEngine.Color _labelBaseColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__labelBaseColor();
    // Get instance field reference: private UnityEngine.Color _labelHighlightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__labelHighlightColor();
    // Get instance field reference: private UnityEngine.Color _labelSelectedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__labelSelectedColor();
    // Get instance field reference: private AnchorUIManager _uiManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AnchorUIManager*& dyn__uiManager();
    // Get instance field reference: private UnityEngine.MeshRenderer[] _renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn__renderers();
    // Get instance field reference: private System.Int32 _menuIndex
    [[deprecated("Use field access instead!")]] int& dyn__menuIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UI.Button> _buttonList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Button*>*& dyn__buttonList();
    // Get instance field reference: private UnityEngine.UI.Button _selectedButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__selectedButton();
    // Get instance field reference: private OVRSpatialAnchor _spatialAnchor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpatialAnchor*& dyn__spatialAnchor();
    // Get instance field reference: private UnityEngine.GameObject _icon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__icon();
    // private System.Void Awake()
    // Offset: 0x294A398
    void Awake();
    // static private System.String ConvertUuidToString(System.Guid guid)
    // Offset: 0x294A518
    static ::StringW ConvertUuidToString(::System::Guid guid);
    // private System.Collections.IEnumerator Start()
    // Offset: 0x294A684
    ::System::Collections::IEnumerator* Start();
    // private System.Void Update()
    // Offset: 0x294A718
    void Update();
    // public System.Void OnSaveLocalButtonPressed()
    // Offset: 0x294A988
    void OnSaveLocalButtonPressed();
    // private System.Void SaveUuidToPlayerPrefs(System.Guid uuid)
    // Offset: 0x294AA54
    void SaveUuidToPlayerPrefs(::System::Guid uuid);
    // public System.Void OnHideButtonPressed()
    // Offset: 0x294AB38
    void OnHideButtonPressed();
    // public System.Void OnEraseButtonPressed()
    // Offset: 0x294ABA4
    void OnEraseButtonPressed();
    // public System.Void set_ShowSaveIcon(System.Boolean value)
    // Offset: 0x294AC70
    void set_ShowSaveIcon(bool value);
    // public System.Void OnHoverStart()
    // Offset: 0x294AC90
    void OnHoverStart();
    // public System.Void OnHoverEnd()
    // Offset: 0x294AD9C
    void OnHoverEnd();
    // public System.Void OnSelect()
    // Offset: 0x294AEA4
    void OnSelect();
    // private System.Void BillboardPanel(UnityEngine.Transform panel)
    // Offset: 0x294A768
    void BillboardPanel(::UnityEngine::Transform* panel);
    // private System.Void HandleMenuNavigation()
    // Offset: 0x294A894
    void HandleMenuNavigation();
    // private System.Void NavigateToIndexInMenu(System.Boolean moveNext)
    // Offset: 0x294AF74
    void NavigateToIndexInMenu(bool moveNext);
    // public System.Void .ctor()
    // Offset: 0x294B0AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Anchor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Anchor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Anchor*, creationType>()));
    }
    // private System.Void <OnSaveLocalButtonPressed>b__23_0(OVRSpatialAnchor anchor, System.Boolean success)
    // Offset: 0x294B0B4
    void $OnSaveLocalButtonPressed$b__23_0(::GlobalNamespace::OVRSpatialAnchor* anchor, bool success);
    // private System.Void <OnEraseButtonPressed>b__26_0(OVRSpatialAnchor anchor, System.Boolean success)
    // Offset: 0x294B0F0
    void $OnEraseButtonPressed$b__26_0(::GlobalNamespace::OVRSpatialAnchor* anchor, bool success);
  }; // Anchor
  #pragma pack(pop)
  static check_size<sizeof(Anchor), 184 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_AnchorSizeCheck;
  static_assert(sizeof(Anchor) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Anchor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::ConvertUuidToString
// Il2CppName: ConvertUuidToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Guid)>(&GlobalNamespace::Anchor::ConvertUuidToString)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "ConvertUuidToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnSaveLocalButtonPressed
// Il2CppName: OnSaveLocalButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnSaveLocalButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnSaveLocalButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::SaveUuidToPlayerPrefs
// Il2CppName: SaveUuidToPlayerPrefs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(::System::Guid)>(&GlobalNamespace::Anchor::SaveUuidToPlayerPrefs)> {
  static const MethodInfo* get() {
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "SaveUuidToPlayerPrefs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnHideButtonPressed
// Il2CppName: OnHideButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnHideButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnHideButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnEraseButtonPressed
// Il2CppName: OnEraseButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnEraseButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnEraseButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::set_ShowSaveIcon
// Il2CppName: set_ShowSaveIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(bool)>(&GlobalNamespace::Anchor::set_ShowSaveIcon)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "set_ShowSaveIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnHoverStart
// Il2CppName: OnHoverStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnHoverStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnHoverStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnHoverEnd
// Il2CppName: OnHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnHoverEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::OnSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::BillboardPanel
// Il2CppName: BillboardPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(::UnityEngine::Transform*)>(&GlobalNamespace::Anchor::BillboardPanel)> {
  static const MethodInfo* get() {
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "BillboardPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::HandleMenuNavigation
// Il2CppName: HandleMenuNavigation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)()>(&GlobalNamespace::Anchor::HandleMenuNavigation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "HandleMenuNavigation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::NavigateToIndexInMenu
// Il2CppName: NavigateToIndexInMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(bool)>(&GlobalNamespace::Anchor::NavigateToIndexInMenu)> {
  static const MethodInfo* get() {
    static auto* moveNext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "NavigateToIndexInMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveNext});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Anchor::$OnSaveLocalButtonPressed$b__23_0
// Il2CppName: <OnSaveLocalButtonPressed>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(::GlobalNamespace::OVRSpatialAnchor*, bool)>(&GlobalNamespace::Anchor::$OnSaveLocalButtonPressed$b__23_0)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "<OnSaveLocalButtonPressed>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Anchor::$OnEraseButtonPressed$b__26_0
// Il2CppName: <OnEraseButtonPressed>b__26_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Anchor::*)(::GlobalNamespace::OVRSpatialAnchor*, bool)>(&GlobalNamespace::Anchor::$OnEraseButtonPressed$b__26_0)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRSpatialAnchor")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Anchor*), "<OnEraseButtonPressed>b__26_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, success});
  }
};
