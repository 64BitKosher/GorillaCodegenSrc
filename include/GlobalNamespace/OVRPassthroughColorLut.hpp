// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: OVRPlugin/PassthroughColorLutData
#include "GlobalNamespace/OVRPlugin_PassthroughColorLutData.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: TextureFormat
  struct TextureFormat;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: ColorChannels because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRPassthroughColorLut
  class OVRPassthroughColorLut;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughColorLut);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughColorLut*, "", "OVRPassthroughColorLut");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughColorLut
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRPassthroughColorLut : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels
    struct ColorChannels;
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::WriteColorsAsBytesJob
    struct WriteColorsAsBytesJob;
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter
    class ColorLutTextureConverter;
    // Nested type: ::GlobalNamespace::OVRPassthroughColorLut::CreateState
    struct CreateState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPassthroughColorLut/ColorChannels
    // [TokenAttribute] Offset: FFFFFFFF
    struct ColorChannels/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ColorChannels
      constexpr ColorChannels(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPassthroughColorLut/ColorChannels Rgb
      static constexpr const int Rgb = 1;
      // Get static field: static public OVRPassthroughColorLut/ColorChannels Rgb
      static ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels _get_Rgb();
      // Set static field: static public OVRPassthroughColorLut/ColorChannels Rgb
      static void _set_Rgb(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels value);
      // static field const value: static public OVRPassthroughColorLut/ColorChannels Rgba
      static constexpr const int Rgba = 2;
      // Get static field: static public OVRPassthroughColorLut/ColorChannels Rgba
      static ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels _get_Rgba();
      // Set static field: static public OVRPassthroughColorLut/ColorChannels Rgba
      static void _set_Rgba(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPassthroughColorLut/ColorChannels
    #pragma pack(pop)
    static check_size<sizeof(OVRPassthroughColorLut::ColorChannels), 0 + sizeof(int)> __GlobalNamespace_OVRPassthroughColorLut_ColorChannelsSizeCheck;
    static_assert(sizeof(OVRPassthroughColorLut::ColorChannels) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPassthroughColorLut/CreateState
    // [TokenAttribute] Offset: FFFFFFFF
    struct CreateState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CreateState
      constexpr CreateState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPassthroughColorLut/CreateState Invalid
      static constexpr const int Invalid = 0;
      // Get static field: static public OVRPassthroughColorLut/CreateState Invalid
      static ::GlobalNamespace::OVRPassthroughColorLut::CreateState _get_Invalid();
      // Set static field: static public OVRPassthroughColorLut/CreateState Invalid
      static void _set_Invalid(::GlobalNamespace::OVRPassthroughColorLut::CreateState value);
      // static field const value: static public OVRPassthroughColorLut/CreateState Pending
      static constexpr const int Pending = 1;
      // Get static field: static public OVRPassthroughColorLut/CreateState Pending
      static ::GlobalNamespace::OVRPassthroughColorLut::CreateState _get_Pending();
      // Set static field: static public OVRPassthroughColorLut/CreateState Pending
      static void _set_Pending(::GlobalNamespace::OVRPassthroughColorLut::CreateState value);
      // static field const value: static public OVRPassthroughColorLut/CreateState Created
      static constexpr const int Created = 2;
      // Get static field: static public OVRPassthroughColorLut/CreateState Created
      static ::GlobalNamespace::OVRPassthroughColorLut::CreateState _get_Created();
      // Set static field: static public OVRPassthroughColorLut/CreateState Created
      static void _set_Created(::GlobalNamespace::OVRPassthroughColorLut::CreateState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPassthroughColorLut/CreateState
    #pragma pack(pop)
    static check_size<sizeof(OVRPassthroughColorLut::CreateState), 0 + sizeof(int)> __GlobalNamespace_OVRPassthroughColorLut_CreateStateSizeCheck;
    static_assert(sizeof(OVRPassthroughColorLut::CreateState) == 0x4);
    public:
    // private System.UInt32 <Resolution>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    uint Resolution;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private OVRPassthroughColorLut/ColorChannels <Channels>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels Channels;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels) == 0x4);
    // System.UInt64 _colorLutHandle
    // Size: 0x8
    // Offset: 0x18
    uint64_t colorLutHandle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Runtime.InteropServices.GCHandle _allocHandle
    // Size: 0x8
    // Offset: 0x20
    ::System::Runtime::InteropServices::GCHandle allocHandle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x8);
    // private OVRPlugin/PassthroughColorLutData _lutData
    // Size: 0x10
    // Offset: 0x28
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData lutData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::PassthroughColorLutData) == 0x10);
    // private System.Int32 _channelCount
    // Size: 0x4
    // Offset: 0x38
    int channelCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: channelCount and: colorBytes
    char __padding5[0x4] = {};
    // private System.Byte[] _colorBytes
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> colorBytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Object _locker
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private OVRPassthroughColorLut/CreateState _createState
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::OVRPassthroughColorLut::CreateState createState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughColorLut::CreateState) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 RecomendedBatchSize
    static constexpr const int RecomendedBatchSize = 128;
    // Get static field: static private System.Int32 RecomendedBatchSize
    static int _get_RecomendedBatchSize();
    // Set static field: static private System.Int32 RecomendedBatchSize
    static void _set_RecomendedBatchSize(int value);
    // Get instance field reference: private System.UInt32 <Resolution>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$Resolution$k__BackingField();
    // Get instance field reference: private OVRPassthroughColorLut/ColorChannels <Channels>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels& dyn_$Channels$k__BackingField();
    // Get instance field reference: System.UInt64 _colorLutHandle
    [[deprecated("Use field access instead!")]] uint64_t& dyn__colorLutHandle();
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle _allocHandle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn__allocHandle();
    // Get instance field reference: private OVRPlugin/PassthroughColorLutData _lutData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::PassthroughColorLutData& dyn__lutData();
    // Get instance field reference: private System.Int32 _channelCount
    [[deprecated("Use field access instead!")]] int& dyn__channelCount();
    // Get instance field reference: private System.Byte[] _colorBytes
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__colorBytes();
    // Get instance field reference: private System.Object _locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__locker();
    // Get instance field reference: private OVRPassthroughColorLut/CreateState _createState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughColorLut::CreateState& dyn__createState();
    // public System.UInt32 get_Resolution()
    // Offset: 0x4960CA0
    uint get_Resolution();
    // private System.Void set_Resolution(System.UInt32 value)
    // Offset: 0x4960CA8
    void set_Resolution(uint value);
    // public OVRPassthroughColorLut/ColorChannels get_Channels()
    // Offset: 0x4960CB0
    ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels get_Channels();
    // private System.Void set_Channels(OVRPassthroughColorLut/ColorChannels value)
    // Offset: 0x4960CB8
    void set_Channels(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels value);
    // public System.Boolean get_IsInitialized()
    // Offset: 0x4960CC0
    bool get_IsInitialized();
    // public System.Boolean get_IsValid()
    // Offset: 0x4960CD0
    bool get_IsValid();
    // public System.Void .ctor(UnityEngine.Texture2D initialLutTexture, System.Boolean flipY)
    // Offset: 0x4960CE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughColorLut* New_ctor(::UnityEngine::Texture2D* initialLutTexture, bool flipY) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughColorLut*, creationType>(initialLutTexture, flipY)));
    }
    // public System.Void .ctor(UnityEngine.Color[] initialColorLut, OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x4961300
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughColorLut* New_ctor(::ArrayW<::UnityEngine::Color> initialColorLut, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughColorLut*, creationType>(initialColorLut, channels)));
    }
    // public System.Void .ctor(UnityEngine.Color32[] initialColorLut, OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x49613E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughColorLut* New_ctor(::ArrayW<::UnityEngine::Color32> initialColorLut, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughColorLut*, creationType>(initialColorLut, channels)));
    }
    // public System.Void .ctor(System.Byte[] initialColorLut, OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x49614D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughColorLut* New_ctor(::ArrayW<uint8_t> initialColorLut, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughColorLut*, creationType>(initialColorLut, channels)));
    }
    // public System.Void UpdateFrom(UnityEngine.Color[] colors)
    // Offset: 0x4961694
    void UpdateFrom(::ArrayW<::UnityEngine::Color> colors);
    // public System.Void UpdateFrom(UnityEngine.Color32[] colors)
    // Offset: 0x496198C
    void UpdateFrom(::ArrayW<::UnityEngine::Color32> colors);
    // public System.Void UpdateFrom(System.Byte[] colors)
    // Offset: 0x4961B18
    void UpdateFrom(::ArrayW<uint8_t> colors);
    // public System.Void UpdateFrom(UnityEngine.Texture2D lutTexture, System.Boolean flipY)
    // Offset: 0x4961BE4
    void UpdateFrom(::UnityEngine::Texture2D* lutTexture, bool flipY);
    // public System.Void Dispose()
    // Offset: 0x4961E74
    void Dispose();
    // private System.Void FreeAllocHandle()
    // Offset: 0x49620E4
    void FreeAllocHandle();
    // static public System.Boolean IsTextureSupported(UnityEngine.Texture2D texture, out System.String errorMessage)
    // Offset: 0x4962114
    static bool IsTextureSupported(::UnityEngine::Texture2D* texture, ByRef<::StringW> errorMessage);
    // private System.Void .ctor(System.Int32 size, OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x4960EE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughColorLut* New_ctor(int size, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughColorLut*, creationType>(size, channels)));
    }
    // private System.Boolean IsValidUpdateResolution(System.Int32 lutSize, System.Int32 elementByteSize)
    // Offset: 0x4961C9C
    bool IsValidUpdateResolution(int lutSize, int elementByteSize);
    // private System.Boolean IsValidLutUpdate(T[] colorArray, System.Int32 elementByteSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool IsValidLutUpdate(::ArrayW<T> colorArray, int elementByteSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::IsValidLutUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidLutUpdate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorArray), ::il2cpp_utils::ExtractType(elementByteSize)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, colorArray, elementByteSize);
    }
    // static private OVRPassthroughColorLut/ColorChannels GetChannelsForTextureFormat(UnityEngine.TextureFormat format)
    // Offset: 0x4960E50
    static ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels GetChannelsForTextureFormat(::UnityEngine::TextureFormat format);
    // static private System.Int32 GetTextureSizeFromByteArray(System.Byte[] initialColorLut, OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x496152C
    static int GetTextureSizeFromByteArray(::ArrayW<uint8_t> initialColorLut, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels);
    // static private System.Int32 GetTextureSize(UnityEngine.Texture2D texture)
    // Offset: 0x4960D74
    static int GetTextureSize(::UnityEngine::Texture2D* texture);
    // static private System.Int32 GetArraySize(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int GetArraySize(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughColorLut::GetArraySize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OVRPassthroughColorLut", "GetArraySize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static private System.Int32 ChannelsToCount(OVRPassthroughColorLut/ColorChannels channels)
    // Offset: 0x49626AC
    static int ChannelsToCount(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels channels);
    // static private System.Boolean IsResolutionAccepted(System.UInt32 resolution, System.Int32 size, out System.String errorMessage)
    // Offset: 0x49625CC
    static bool IsResolutionAccepted(uint resolution, int size, ByRef<::StringW> errorMessage);
    // static private System.Boolean IsPowerOfTwo(System.UInt32 x)
    // Offset: 0x49626BC
    static bool IsPowerOfTwo(uint x);
    // private System.Void Create(OVRPlugin/PassthroughColorLutData lutData)
    // Offset: 0x4961194
    void Create(::GlobalNamespace::OVRPlugin::PassthroughColorLutData lutData);
    // private System.Void RefreshIfInitialized(System.Boolean isInitialized)
    // Offset: 0x49627CC
    void RefreshIfInitialized(bool isInitialized);
    // private System.Void Recreate()
    // Offset: 0x49627EC
    void Recreate();
    // private System.Void InternalCreate()
    // Offset: 0x49626DC
    void InternalCreate();
    // static private System.UInt32 GetResolutionFromSize(System.Int32 size)
    // Offset: 0x4962518
    static uint GetResolutionFromSize(int size);
    // private OVRPlugin/PassthroughColorLutData CreateLutData(out System.Byte[] colorBytes)
    // Offset: 0x4962804
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData CreateLutData(ByRef<::ArrayW<uint8_t>> colorBytes);
    // private OVRPlugin/PassthroughColorLutData CreateLutDataFromTexture(UnityEngine.Texture2D lut, System.Boolean flipY)
    // Offset: 0x496113C
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData CreateLutDataFromTexture(::UnityEngine::Texture2D* lut, bool flipY);
    // private OVRPlugin/PassthroughColorLutData CreateLutDataFromArray(UnityEngine.Color[] colors)
    // Offset: 0x496139C
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData CreateLutDataFromArray(::ArrayW<::UnityEngine::Color> colors);
    // private OVRPlugin/PassthroughColorLutData CreateLutDataFromArray(UnityEngine.Color32[] colors)
    // Offset: 0x4961484
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData CreateLutDataFromArray(::ArrayW<::UnityEngine::Color32> colors);
    // private OVRPlugin/PassthroughColorLutData CreateLutDataFromArray(System.Byte[] colors)
    // Offset: 0x496163C
    ::GlobalNamespace::OVRPlugin::PassthroughColorLutData CreateLutDataFromArray(::ArrayW<uint8_t> colors);
    // private System.Void WriteColorsAsBytes(UnityEngine.Color[] colors, System.Byte[] target)
    // Offset: 0x4961754
    void WriteColorsAsBytes(::ArrayW<::UnityEngine::Color> colors, ::ArrayW<uint8_t> target);
    // private System.Void WriteColorsAsBytes(UnityEngine.Color32[] colors, System.Byte[] target)
    // Offset: 0x4961A4C
    void WriteColorsAsBytes(::ArrayW<::UnityEngine::Color32> colors, ::ArrayW<uint8_t> target);
    // private System.Void Destroy()
    // Offset: 0x4961FD0
    void Destroy();
    // protected override System.Void Finalize()
    // Offset: 0x49628A8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // OVRPassthroughColorLut
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughColorLut), 80 + sizeof(::GlobalNamespace::OVRPassthroughColorLut::CreateState)> __GlobalNamespace_OVRPassthroughColorLutSizeCheck;
  static_assert(sizeof(OVRPassthroughColorLut) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughColorLut::CreateState, "", "OVRPassthroughColorLut/CreateState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels, "", "OVRPassthroughColorLut/ColorChannels");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::get_Resolution
// Il2CppName: get_Resolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::get_Resolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "get_Resolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::set_Resolution
// Il2CppName: set_Resolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(uint)>(&GlobalNamespace::OVRPassthroughColorLut::set_Resolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "set_Resolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPassthroughColorLut::ColorChannels (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels)>(&GlobalNamespace::OVRPassthroughColorLut::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut/ColorChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::UpdateFrom
// Il2CppName: UpdateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color>)>(&GlobalNamespace::OVRPassthroughColorLut::UpdateFrom)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "UpdateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::UpdateFrom
// Il2CppName: UpdateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color32>)>(&GlobalNamespace::OVRPassthroughColorLut::UpdateFrom)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "UpdateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::UpdateFrom
// Il2CppName: UpdateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughColorLut::UpdateFrom)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "UpdateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::UpdateFrom
// Il2CppName: UpdateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::UnityEngine::Texture2D*, bool)>(&GlobalNamespace::OVRPassthroughColorLut::UpdateFrom)> {
  static const MethodInfo* get() {
    static auto* lutTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* flipY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "UpdateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lutTexture, flipY});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::FreeAllocHandle
// Il2CppName: FreeAllocHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::FreeAllocHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "FreeAllocHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::IsTextureSupported
// Il2CppName: IsTextureSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Texture2D*, ByRef<::StringW>)>(&GlobalNamespace::OVRPassthroughColorLut::IsTextureSupported)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "IsTextureSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, errorMessage});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::IsValidUpdateResolution
// Il2CppName: IsValidUpdateResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPassthroughColorLut::*)(int, int)>(&GlobalNamespace::OVRPassthroughColorLut::IsValidUpdateResolution)> {
  static const MethodInfo* get() {
    static auto* lutSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementByteSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "IsValidUpdateResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lutSize, elementByteSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::IsValidLutUpdate
// Il2CppName: IsValidLutUpdate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::GetChannelsForTextureFormat
// Il2CppName: GetChannelsForTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPassthroughColorLut::ColorChannels (*)(::UnityEngine::TextureFormat)>(&GlobalNamespace::OVRPassthroughColorLut::GetChannelsForTextureFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "GetChannelsForTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::GetTextureSizeFromByteArray
// Il2CppName: GetTextureSizeFromByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, ::GlobalNamespace::OVRPassthroughColorLut::ColorChannels)>(&GlobalNamespace::OVRPassthroughColorLut::GetTextureSizeFromByteArray)> {
  static const MethodInfo* get() {
    static auto* initialColorLut = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut/ColorChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "GetTextureSizeFromByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialColorLut, channels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::GetTextureSize
// Il2CppName: GetTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Texture2D*)>(&GlobalNamespace::OVRPassthroughColorLut::GetTextureSize)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "GetTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::GetArraySize
// Il2CppName: GetArraySize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ChannelsToCount
// Il2CppName: ChannelsToCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::OVRPassthroughColorLut::ColorChannels)>(&GlobalNamespace::OVRPassthroughColorLut::ChannelsToCount)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut/ColorChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "ChannelsToCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::IsResolutionAccepted
// Il2CppName: IsResolutionAccepted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, int, ByRef<::StringW>)>(&GlobalNamespace::OVRPassthroughColorLut::IsResolutionAccepted)> {
  static const MethodInfo* get() {
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "IsResolutionAccepted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolution, size, errorMessage});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::IsPowerOfTwo
// Il2CppName: IsPowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&GlobalNamespace::OVRPassthroughColorLut::IsPowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "IsPowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::GlobalNamespace::OVRPlugin::PassthroughColorLutData)>(&GlobalNamespace::OVRPassthroughColorLut::Create)> {
  static const MethodInfo* get() {
    static auto* lutData = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PassthroughColorLutData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lutData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::RefreshIfInitialized
// Il2CppName: RefreshIfInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(bool)>(&GlobalNamespace::OVRPassthroughColorLut::RefreshIfInitialized)> {
  static const MethodInfo* get() {
    static auto* isInitialized = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "RefreshIfInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isInitialized});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::Recreate
// Il2CppName: Recreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::Recreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "Recreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::InternalCreate
// Il2CppName: InternalCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::InternalCreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "InternalCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::GetResolutionFromSize
// Il2CppName: GetResolutionFromSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int)>(&GlobalNamespace::OVRPassthroughColorLut::GetResolutionFromSize)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "GetResolutionFromSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::CreateLutData
// Il2CppName: CreateLutData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughColorLutData (GlobalNamespace::OVRPassthroughColorLut::*)(ByRef<::ArrayW<uint8_t>>)>(&GlobalNamespace::OVRPassthroughColorLut::CreateLutData)> {
  static const MethodInfo* get() {
    static auto* colorBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "CreateLutData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBytes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromTexture
// Il2CppName: CreateLutDataFromTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughColorLutData (GlobalNamespace::OVRPassthroughColorLut::*)(::UnityEngine::Texture2D*, bool)>(&GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromTexture)> {
  static const MethodInfo* get() {
    static auto* lut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* flipY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "CreateLutDataFromTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lut, flipY});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray
// Il2CppName: CreateLutDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughColorLutData (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color>)>(&GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "CreateLutDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray
// Il2CppName: CreateLutDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughColorLutData (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color32>)>(&GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "CreateLutDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray
// Il2CppName: CreateLutDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PassthroughColorLutData (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughColorLut::CreateLutDataFromArray)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "CreateLutDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::WriteColorsAsBytes
// Il2CppName: WriteColorsAsBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color>, ::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughColorLut::WriteColorsAsBytes)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "WriteColorsAsBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::WriteColorsAsBytes
// Il2CppName: WriteColorsAsBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)(::ArrayW<::UnityEngine::Color32>, ::ArrayW<uint8_t>)>(&GlobalNamespace::OVRPassthroughColorLut::WriteColorsAsBytes)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "WriteColorsAsBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughColorLut::*)()>(&GlobalNamespace::OVRPassthroughColorLut::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
