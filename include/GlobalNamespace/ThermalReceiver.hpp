// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.IDynamicFloat
#include "GorillaTag/IDynamicFloat.hpp"
// Including type: GorillaTag.IResettableItem
#include "GorillaTag/IResettableItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThermalReceiver
  class ThermalReceiver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThermalReceiver);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThermalReceiver*, "", "ThermalReceiver");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ThermalReceiver
  // [TokenAttribute] Offset: FFFFFFFF
  class ThermalReceiver : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::IDynamicFloat, public ::GorillaTag::IResettableItem*/ {
    public:
    public:
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x20
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single conductivity
    // Size: 0x4
    // Offset: 0x24
    float conductivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single celsius
    // Size: 0x4
    // Offset: 0x28
    float celsius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single defaultCelsius
    // Size: 0x4
    // Offset: 0x2C
    float defaultCelsius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::IDynamicFloat
    operator ::GorillaTag::IDynamicFloat() noexcept {
      return *reinterpret_cast<::GorillaTag::IDynamicFloat*>(this);
    }
    // Creating interface conversion operator: operator ::GorillaTag::IResettableItem
    operator ::GorillaTag::IResettableItem() noexcept {
      return *reinterpret_cast<::GorillaTag::IResettableItem*>(this);
    }
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Single conductivity
    [[deprecated("Use field access instead!")]] float& dyn_conductivity();
    // Get instance field reference: public System.Single celsius
    [[deprecated("Use field access instead!")]] float& dyn_celsius();
    // Get instance field reference: private System.Single defaultCelsius
    [[deprecated("Use field access instead!")]] float& dyn_defaultCelsius();
    // public System.Single get_Farenheit()
    // Offset: 0x2897240
    float get_Farenheit();
    // public System.Single get_floatValue()
    // Offset: 0x2897260
    float get_floatValue();
    // protected System.Void Awake()
    // Offset: 0x2897268
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x2897274
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28972C8
    void OnDisable();
    // public System.Void ResetToDefaultState()
    // Offset: 0x289731C
    void ResetToDefaultState();
    // public System.Void .ctor()
    // Offset: 0x2897328
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThermalReceiver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThermalReceiver*, creationType>()));
    }
  }; // ThermalReceiver
  #pragma pack(pop)
  static check_size<sizeof(ThermalReceiver), 44 + sizeof(float)> __GlobalNamespace_ThermalReceiverSizeCheck;
  static_assert(sizeof(ThermalReceiver) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::get_Farenheit
// Il2CppName: get_Farenheit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::get_Farenheit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "get_Farenheit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::get_floatValue
// Il2CppName: get_floatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::get_floatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "get_floatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalReceiver::*)()>(&GlobalNamespace::ThermalReceiver::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalReceiver*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalReceiver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
