// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FeatherDusterHoldable
  class FeatherDusterHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FeatherDusterHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FeatherDusterHoldable*, "", "FeatherDusterHoldable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: FeatherDusterHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class FeatherDusterHoldable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.LayerMask collisionLayer
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LayerMask collisionLayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single overlapSphereRadius
    // Size: 0x4
    // Offset: 0x24
    float overlapSphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single collideMinSpeed
    // Size: 0x4
    // Offset: 0x28
    float collideMinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: collideMinSpeed and: particleFx
    char __padding2[0x4] = {};
    // public UnityEngine.ParticleSystem particleFx
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ParticleSystem* particleFx;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public SoundBankPlayer soundBankPlayer
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SoundBankPlayer* soundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // private System.Single soundCooldown
    // Size: 0x4
    // Offset: 0x40
    float soundCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: soundCooldown and: emissionModule
    char __padding5[0x4] = {};
    // private UnityEngine.ParticleSystem/EmissionModule emissionModule
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::ParticleSystem::EmissionModule emissionModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // private System.Single initialRateOverTime
    // Size: 0x4
    // Offset: 0x50
    float initialRateOverTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceLastSound
    // Size: 0x4
    // Offset: 0x54
    float timeSinceLastSound;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 lastWorldPos
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 lastWorldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastWorldPos and: colliderResult
    char __padding9[0x4] = {};
    // private UnityEngine.Collider[] colliderResult
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Collider*> colliderResult;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.LayerMask collisionLayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_collisionLayer();
    // Get instance field reference: public System.Single overlapSphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_overlapSphereRadius();
    // Get instance field reference: private System.Single collideMinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_collideMinSpeed();
    // Get instance field reference: public UnityEngine.ParticleSystem particleFx
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleFx();
    // Get instance field reference: public SoundBankPlayer soundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_soundBankPlayer();
    // Get instance field reference: private System.Single soundCooldown
    [[deprecated("Use field access instead!")]] float& dyn_soundCooldown();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule emissionModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn_emissionModule();
    // Get instance field reference: private System.Single initialRateOverTime
    [[deprecated("Use field access instead!")]] float& dyn_initialRateOverTime();
    // Get instance field reference: private System.Single timeSinceLastSound
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceLastSound();
    // Get instance field reference: private UnityEngine.Vector3 lastWorldPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastWorldPos();
    // Get instance field reference: private UnityEngine.Collider[] colliderResult
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_colliderResult();
    // protected System.Void Awake()
    // Offset: 0x26A14CC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x26A1518
    void OnEnable();
    // protected System.Void Update()
    // Offset: 0x26A1554
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26A1738
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FeatherDusterHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FeatherDusterHoldable*, creationType>()));
    }
  }; // FeatherDusterHoldable
  #pragma pack(pop)
  static check_size<sizeof(FeatherDusterHoldable), 104 + sizeof(::ArrayW<::UnityEngine::Collider*>)> __GlobalNamespace_FeatherDusterHoldableSizeCheck;
  static_assert(sizeof(FeatherDusterHoldable) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FeatherDusterHoldable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FeatherDusterHoldable::*)()>(&GlobalNamespace::FeatherDusterHoldable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FeatherDusterHoldable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FeatherDusterHoldable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FeatherDusterHoldable::*)()>(&GlobalNamespace::FeatherDusterHoldable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FeatherDusterHoldable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FeatherDusterHoldable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FeatherDusterHoldable::*)()>(&GlobalNamespace::FeatherDusterHoldable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FeatherDusterHoldable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FeatherDusterHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
