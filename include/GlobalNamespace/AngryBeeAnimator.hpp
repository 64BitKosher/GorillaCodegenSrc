// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AngryBeeAnimator
  class AngryBeeAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AngryBeeAnimator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AngryBeeAnimator*, "", "AngryBeeAnimator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: AngryBeeAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class AngryBeeAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.GameObject beePrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* beePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 numBees
    // Size: 0x4
    // Offset: 0x28
    int numBees;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single orbitMinRadius
    // Size: 0x4
    // Offset: 0x2C
    float orbitMinRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single orbitMaxRadius
    // Size: 0x4
    // Offset: 0x30
    float orbitMaxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single orbitMaxHeightDisplacement
    // Size: 0x4
    // Offset: 0x34
    float orbitMaxHeightDisplacement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single orbitMaxCenterDisplacement
    // Size: 0x4
    // Offset: 0x38
    float orbitMaxCenterDisplacement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single orbitMaxTilt
    // Size: 0x4
    // Offset: 0x3C
    float orbitMaxTilt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single orbitSpeed
    // Size: 0x4
    // Offset: 0x40
    float orbitSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single beeScale
    // Size: 0x4
    // Offset: 0x44
    float beeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.GameObject[] beeOrbits
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::GameObject*> beeOrbits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] bees
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::GameObject*> bees;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.Vector3[] beeOrbitalAxes
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> beeOrbitalAxes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Single[] beeOrbitalRadii
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<float> beeOrbitalRadii;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.GameObject beePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_beePrefab();
    // Get instance field reference: private System.Int32 numBees
    [[deprecated("Use field access instead!")]] int& dyn_numBees();
    // Get instance field reference: private System.Single orbitMinRadius
    [[deprecated("Use field access instead!")]] float& dyn_orbitMinRadius();
    // Get instance field reference: private System.Single orbitMaxRadius
    [[deprecated("Use field access instead!")]] float& dyn_orbitMaxRadius();
    // Get instance field reference: private System.Single orbitMaxHeightDisplacement
    [[deprecated("Use field access instead!")]] float& dyn_orbitMaxHeightDisplacement();
    // Get instance field reference: private System.Single orbitMaxCenterDisplacement
    [[deprecated("Use field access instead!")]] float& dyn_orbitMaxCenterDisplacement();
    // Get instance field reference: private System.Single orbitMaxTilt
    [[deprecated("Use field access instead!")]] float& dyn_orbitMaxTilt();
    // Get instance field reference: private System.Single orbitSpeed
    [[deprecated("Use field access instead!")]] float& dyn_orbitSpeed();
    // Get instance field reference: private System.Single beeScale
    [[deprecated("Use field access instead!")]] float& dyn_beeScale();
    // Get instance field reference: private UnityEngine.GameObject[] beeOrbits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_beeOrbits();
    // Get instance field reference: private UnityEngine.GameObject[] bees
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_bees();
    // Get instance field reference: private UnityEngine.Vector3[] beeOrbitalAxes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_beeOrbitalAxes();
    // Get instance field reference: private System.Single[] beeOrbitalRadii
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_beeOrbitalRadii();
    // private System.Void Awake()
    // Offset: 0x26A2E5C
    void Awake();
    // private System.Void Update()
    // Offset: 0x26A32DC
    void Update();
    // public System.Void SetEmergeFraction(System.Single fraction)
    // Offset: 0x26A3394
    void SetEmergeFraction(float fraction);
    // public System.Void .ctor()
    // Offset: 0x26A3494
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AngryBeeAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AngryBeeAnimator*, creationType>()));
    }
  }; // AngryBeeAnimator
  #pragma pack(pop)
  static check_size<sizeof(AngryBeeAnimator), 96 + sizeof(::ArrayW<float>)> __GlobalNamespace_AngryBeeAnimatorSizeCheck;
  static_assert(sizeof(AngryBeeAnimator) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeAnimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeAnimator::*)()>(&GlobalNamespace::AngryBeeAnimator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeAnimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeAnimator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeAnimator::*)()>(&GlobalNamespace::AngryBeeAnimator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeAnimator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeAnimator::SetEmergeFraction
// Il2CppName: SetEmergeFraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AngryBeeAnimator::*)(float)>(&GlobalNamespace::AngryBeeAnimator::SetEmergeFraction)> {
  static const MethodInfo* get() {
    static auto* fraction = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AngryBeeAnimator*), "SetEmergeFraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fraction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AngryBeeAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
