// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ZoneConditionalGameObjectEnabling
  class ZoneConditionalGameObjectEnabling;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ZoneConditionalGameObjectEnabling);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ZoneConditionalGameObjectEnabling*, "", "ZoneConditionalGameObjectEnabling");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ZoneConditionalGameObjectEnabling
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneConditionalGameObjectEnabling : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GTZone zone
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GTZone zone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // private System.Boolean invisibleWhileLoaded
    // Size: 0x1
    // Offset: 0x24
    bool invisibleWhileLoaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: invisibleWhileLoaded and: gameObjects
    char __padding1[0x3] = {};
    // private UnityEngine.GameObject[] gameObjects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> gameObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Get instance field reference: private GTZone zone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zone();
    // Get instance field reference: private System.Boolean invisibleWhileLoaded
    [[deprecated("Use field access instead!")]] bool& dyn_invisibleWhileLoaded();
    // Get instance field reference: private UnityEngine.GameObject[] gameObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_gameObjects();
    // private System.Void Start()
    // Offset: 0x289D0E4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x289D2A8
    void OnDestroy();
    // private System.Void OnZoneChanged()
    // Offset: 0x289D1DC
    void OnZoneChanged();
    // public System.Void .ctor()
    // Offset: 0x289D398
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneConditionalGameObjectEnabling* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneConditionalGameObjectEnabling*, creationType>()));
    }
  }; // ZoneConditionalGameObjectEnabling
  #pragma pack(pop)
  static check_size<sizeof(ZoneConditionalGameObjectEnabling), 40 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __GlobalNamespace_ZoneConditionalGameObjectEnablingSizeCheck;
  static_assert(sizeof(ZoneConditionalGameObjectEnabling) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalGameObjectEnabling::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalGameObjectEnabling::*)()>(&GlobalNamespace::ZoneConditionalGameObjectEnabling::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalGameObjectEnabling*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalGameObjectEnabling::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalGameObjectEnabling::*)()>(&GlobalNamespace::ZoneConditionalGameObjectEnabling::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalGameObjectEnabling*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalGameObjectEnabling::OnZoneChanged
// Il2CppName: OnZoneChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ZoneConditionalGameObjectEnabling::*)()>(&GlobalNamespace::ZoneConditionalGameObjectEnabling::OnZoneChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ZoneConditionalGameObjectEnabling*), "OnZoneChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ZoneConditionalGameObjectEnabling::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
