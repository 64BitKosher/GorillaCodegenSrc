// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SinglePool
  class SinglePool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SinglePool);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SinglePool*, "", "SinglePool");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: SinglePool
  // [TokenAttribute] Offset: FFFFFFFF
  class SinglePool : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject objectToPool
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* objectToPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 initAmountToPool
    // Size: 0x4
    // Offset: 0x18
    int initAmountToPool;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: initAmountToPool and: pooledObjects
    char __padding1[0x4] = {};
    // private System.Collections.Generic.HashSet`1<System.Int32> pooledObjects
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<int>* pooledObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Collections.Generic.Stack`1<UnityEngine.GameObject> inactivePool
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Stack_1<::UnityEngine::GameObject*>* inactivePool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> activePool
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>* activePool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.GameObject gameObject
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* gameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject objectToPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_objectToPool();
    // Get instance field reference: public System.Int32 initAmountToPool
    [[deprecated("Use field access instead!")]] int& dyn_initAmountToPool();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> pooledObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_pooledObjects();
    // Get instance field reference: private System.Collections.Generic.Stack`1<UnityEngine.GameObject> inactivePool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::UnityEngine::GameObject*>*& dyn_inactivePool();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> activePool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>*& dyn_activePool();
    // Get instance field reference: private UnityEngine.GameObject gameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_gameObject();
    // private System.Void PrivAllocPooledObjects()
    // Offset: 0x27783E4
    void PrivAllocPooledObjects();
    // public System.Void Initialize(UnityEngine.GameObject gameObject_)
    // Offset: 0x27785D0
    void Initialize(::UnityEngine::GameObject* gameObject_);
    // public UnityEngine.GameObject Instantiate(System.Boolean setActive)
    // Offset: 0x2778720
    ::UnityEngine::GameObject* Instantiate(bool setActive);
    // public System.Void Destroy(UnityEngine.GameObject obj)
    // Offset: 0x2778880
    void Destroy(::UnityEngine::GameObject* obj);
    // public System.Int32 PoolGUID()
    // Offset: 0x27789FC
    int PoolGUID();
    // public System.Int32 GetTotalCount()
    // Offset: 0x2778A04
    int GetTotalCount();
    // public System.Int32 GetActiveCount()
    // Offset: 0x2778A4C
    int GetActiveCount();
    // public System.Int32 GetInactiveCount()
    // Offset: 0x2778A9C
    int GetInactiveCount();
    // public System.Void .ctor()
    // Offset: 0x2778AE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SinglePool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SinglePool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SinglePool*, creationType>()));
    }
  }; // SinglePool
  #pragma pack(pop)
  static check_size<sizeof(SinglePool), 56 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_SinglePoolSizeCheck;
  static_assert(sizeof(SinglePool) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::PrivAllocPooledObjects
// Il2CppName: PrivAllocPooledObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SinglePool::*)()>(&GlobalNamespace::SinglePool::PrivAllocPooledObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "PrivAllocPooledObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SinglePool::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::SinglePool::Initialize)> {
  static const MethodInfo* get() {
    static auto* gameObject_ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::SinglePool::*)(bool)>(&GlobalNamespace::SinglePool::Instantiate)> {
  static const MethodInfo* get() {
    static auto* setActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setActive});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SinglePool::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::SinglePool::Destroy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::PoolGUID
// Il2CppName: PoolGUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SinglePool::*)()>(&GlobalNamespace::SinglePool::PoolGUID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "PoolGUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::GetTotalCount
// Il2CppName: GetTotalCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SinglePool::*)()>(&GlobalNamespace::SinglePool::GetTotalCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "GetTotalCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::GetActiveCount
// Il2CppName: GetActiveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SinglePool::*)()>(&GlobalNamespace::SinglePool::GetActiveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "GetActiveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::GetInactiveCount
// Il2CppName: GetInactiveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SinglePool::*)()>(&GlobalNamespace::SinglePool::GetInactiveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SinglePool*), "GetInactiveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SinglePool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
