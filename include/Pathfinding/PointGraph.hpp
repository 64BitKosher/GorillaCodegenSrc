// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: Pathfinding.IUpdatableGraph
#include "Pathfinding/IUpdatableGraph.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NNInfoInternal
  struct NNInfoInternal;
  // Forward declaring type: PointKDTree
  class PointKDTree;
  // Forward declaring type: PointNode
  class PointNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphUpdateThreading
  struct GraphUpdateThreading;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PointGraph
  class PointGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PointGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PointGraph*, "Pathfinding", "PointGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x128
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PointGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [JsonOptInAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class PointGraph : public ::Pathfinding::NavGraph/*, public ::Pathfinding::IUpdatableGraph*/ {
    public:
    // Nested type: ::Pathfinding::PointGraph::NodeDistanceMode
    struct NodeDistanceMode;
    // Nested type: ::Pathfinding::PointGraph::$ConnectNodesAsync$d__37
    class $ConnectNodesAsync$d__37;
    // Nested type: ::Pathfinding::PointGraph::$ScanInternal$d__35
    class $ScanInternal$d__35;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.PointGraph/NodeDistanceMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct NodeDistanceMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NodeDistanceMode
      constexpr NodeDistanceMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.PointGraph/NodeDistanceMode Node
      static constexpr const int Node = 0;
      // Get static field: static public Pathfinding.PointGraph/NodeDistanceMode Node
      static ::Pathfinding::PointGraph::NodeDistanceMode _get_Node();
      // Set static field: static public Pathfinding.PointGraph/NodeDistanceMode Node
      static void _set_Node(::Pathfinding::PointGraph::NodeDistanceMode value);
      // static field const value: static public Pathfinding.PointGraph/NodeDistanceMode Connection
      static constexpr const int Connection = 1;
      // Get static field: static public Pathfinding.PointGraph/NodeDistanceMode Connection
      static ::Pathfinding::PointGraph::NodeDistanceMode _get_Connection();
      // Set static field: static public Pathfinding.PointGraph/NodeDistanceMode Connection
      static void _set_Connection(::Pathfinding::PointGraph::NodeDistanceMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.PointGraph/NodeDistanceMode
    #pragma pack(pop)
    static check_size<sizeof(PointGraph::NodeDistanceMode), 0 + sizeof(int)> __Pathfinding_PointGraph_NodeDistanceModeSizeCheck;
    static_assert(sizeof(PointGraph::NodeDistanceMode) == 0x4);
    public:
    // public UnityEngine.Transform root
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.String searchTag
    // Size: 0x8
    // Offset: 0xD8
    ::StringW searchTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single maxDistance
    // Size: 0x4
    // Offset: 0xE0
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 limits
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 limits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean raycast
    // Size: 0x1
    // Offset: 0xF0
    bool raycast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean use2DPhysics
    // Size: 0x1
    // Offset: 0xF1
    bool use2DPhysics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean thickRaycast
    // Size: 0x1
    // Offset: 0xF2
    bool thickRaycast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: thickRaycast and: thickRaycastRadius
    char __padding6[0x1] = {};
    // public System.Single thickRaycastRadius
    // Size: 0x4
    // Offset: 0xF4
    float thickRaycastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean recursive
    // Size: 0x1
    // Offset: 0xF8
    bool recursive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recursive and: mask
    char __padding8[0x3] = {};
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0xFC
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean optimizeForSparseGraph
    // Size: 0x1
    // Offset: 0x100
    bool optimizeForSparseGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: optimizeForSparseGraph and: lookupTree
    char __padding10[0x7] = {};
    // private Pathfinding.PointKDTree lookupTree
    // Size: 0x8
    // Offset: 0x108
    ::Pathfinding::PointKDTree* lookupTree;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointKDTree*) == 0x8);
    // private System.Int64 maximumConnectionLength
    // Size: 0x8
    // Offset: 0x110
    int64_t maximumConnectionLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public Pathfinding.PointNode[] nodes
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::Pathfinding::PointNode*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::PointNode*>) == 0x8);
    // public Pathfinding.PointGraph/NodeDistanceMode nearestNodeDistanceMode
    // Size: 0x4
    // Offset: 0x120
    ::Pathfinding::PointGraph::NodeDistanceMode nearestNodeDistanceMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointGraph::NodeDistanceMode) == 0x4);
    // private System.Int32 <nodeCount>k__BackingField
    // Size: 0x4
    // Offset: 0x124
    int nodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IUpdatableGraph
    operator ::Pathfinding::IUpdatableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IUpdatableGraph*>(this);
    }
    // Get instance field reference: public UnityEngine.Transform root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_root();
    // Get instance field reference: public System.String searchTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_searchTag();
    // Get instance field reference: public System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // Get instance field reference: public UnityEngine.Vector3 limits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_limits();
    // Get instance field reference: public System.Boolean raycast
    [[deprecated("Use field access instead!")]] bool& dyn_raycast();
    // Get instance field reference: public System.Boolean use2DPhysics
    [[deprecated("Use field access instead!")]] bool& dyn_use2DPhysics();
    // Get instance field reference: public System.Boolean thickRaycast
    [[deprecated("Use field access instead!")]] bool& dyn_thickRaycast();
    // Get instance field reference: public System.Single thickRaycastRadius
    [[deprecated("Use field access instead!")]] float& dyn_thickRaycastRadius();
    // Get instance field reference: public System.Boolean recursive
    [[deprecated("Use field access instead!")]] bool& dyn_recursive();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public System.Boolean optimizeForSparseGraph
    [[deprecated("Use field access instead!")]] bool& dyn_optimizeForSparseGraph();
    // Get instance field reference: private Pathfinding.PointKDTree lookupTree
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointKDTree*& dyn_lookupTree();
    // Get instance field reference: private System.Int64 maximumConnectionLength
    [[deprecated("Use field access instead!")]] int64_t& dyn_maximumConnectionLength();
    // Get instance field reference: public Pathfinding.PointNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::PointNode*>& dyn_nodes();
    // Get instance field reference: public Pathfinding.PointGraph/NodeDistanceMode nearestNodeDistanceMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointGraph::NodeDistanceMode& dyn_nearestNodeDistanceMode();
    // Get instance field reference: private System.Int32 <nodeCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$nodeCount$k__BackingField();
    // public System.Int32 get_nodeCount()
    // Offset: 0x29DD7F4
    int get_nodeCount();
    // protected System.Void set_nodeCount(System.Int32 value)
    // Offset: 0x29DD7FC
    void set_nodeCount(int value);
    // private Pathfinding.NNInfoInternal GetNearestInternal(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, System.Boolean fastCheck)
    // Offset: 0x29DD8C8
    ::Pathfinding::NNInfoInternal GetNearestInternal(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, bool fastCheck);
    // private Pathfinding.NNInfoInternal FindClosestConnectionPoint(Pathfinding.PointNode node, UnityEngine.Vector3 position)
    // Offset: 0x29DDC60
    ::Pathfinding::NNInfoInternal FindClosestConnectionPoint(::Pathfinding::PointNode* node, ::UnityEngine::Vector3 position);
    // public Pathfinding.PointNode AddNode(Pathfinding.Int3 position)
    // Offset: 0x29DDE24
    ::Pathfinding::PointNode* AddNode(::Pathfinding::Int3 position);
    // public T AddNode(T node, Pathfinding.Int3 position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T AddNode(T node, ::Pathfinding::Int3 position) {
      static_assert(std::is_convertible_v<T, ::Pathfinding::PointNode*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PointGraph::AddNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNode", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(position)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, node, position);
    }
    // static protected System.Int32 CountChildren(UnityEngine.Transform tr)
    // Offset: 0x29DDEC0
    static int CountChildren(::UnityEngine::Transform* tr);
    // protected System.Void AddChildren(ref System.Int32 c, UnityEngine.Transform tr)
    // Offset: 0x29DE190
    void AddChildren(ByRef<int> c, ::UnityEngine::Transform* tr);
    // public System.Void RebuildNodeLookup()
    // Offset: 0x29DE598
    void RebuildNodeLookup();
    // public System.Void RebuildConnectionDistanceLookup()
    // Offset: 0x29DE630
    void RebuildConnectionDistanceLookup();
    // private System.Void AddToLookup(Pathfinding.PointNode node)
    // Offset: 0x29DE758
    void AddToLookup(::Pathfinding::PointNode* node);
    // public System.Void RegisterConnectionLength(System.Int64 sqrLength)
    // Offset: 0x29DAE70
    void RegisterConnectionLength(int64_t sqrLength);
    // protected Pathfinding.PointNode[] CreateNodes(System.Int32 count)
    // Offset: 0x29DE774
    ::ArrayW<::Pathfinding::PointNode*> CreateNodes(int count);
    // public System.Void ConnectNodes()
    // Offset: 0x29DE934
    void ConnectNodes();
    // private System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ConnectNodesAsync()
    // Offset: 0x29DEA5C
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ConnectNodesAsync();
    // public System.Boolean IsValidConnection(Pathfinding.GraphNode a, Pathfinding.GraphNode b, out System.Single dist)
    // Offset: 0x29DEB0C
    bool IsValidConnection(::Pathfinding::GraphNode* a, ::Pathfinding::GraphNode* b, ByRef<float> dist);
    // private Pathfinding.GraphUpdateThreading Pathfinding.IUpdatableGraph.CanUpdateAsync(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29DF2E8
    ::Pathfinding::GraphUpdateThreading Pathfinding_IUpdatableGraph_CanUpdateAsync(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaInit(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29DF2F0
    void Pathfinding_IUpdatableGraph_UpdateAreaInit(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaPost(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29DF2F4
    void Pathfinding_IUpdatableGraph_UpdateAreaPost(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateArea(Pathfinding.GraphUpdateObject guo)
    // Offset: 0x29DF2F8
    void Pathfinding_IUpdatableGraph_UpdateArea(::Pathfinding::GraphUpdateObject* guo);
    // public override System.Int32 CountNodes()
    // Offset: 0x29DD804
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Int32 NavGraph::CountNodes()
    int CountNodes();
    // public override System.Void GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0x29DD80C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    void GetNodes(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // public override Pathfinding.NNInfoInternal GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x29DD890
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfoInternal GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public override Pathfinding.NNInfoInternal GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x29DDC28
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    ::Pathfinding::NNInfoInternal GetNearestForce(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // protected override System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanInternal()
    // Offset: 0x29DE884
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> NavGraph::ScanInternal()
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanInternal();
    // protected override System.Void PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29DF95C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    void PostDeserialization(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    // Offset: 0x29DF960
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    void RelocateNodes(::UnityEngine::Matrix4x4 deltaMatrix);
    // protected override System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29DF99C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29DFBD0
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29DFCE4
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void .ctor()
    // Offset: 0x29DFEA8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PointGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointGraph*, creationType>()));
    }
  }; // Pathfinding.PointGraph
  #pragma pack(pop)
  static check_size<sizeof(PointGraph), 292 + sizeof(int)> __Pathfinding_PointGraphSizeCheck;
  static_assert(sizeof(PointGraph) == 0x128);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PointGraph::NodeDistanceMode, "Pathfinding", "PointGraph/NodeDistanceMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PointGraph::get_nodeCount
// Il2CppName: get_nodeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::get_nodeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "get_nodeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::set_nodeCount
// Il2CppName: set_nodeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(int)>(&Pathfinding::PointGraph::set_nodeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "set_nodeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNearestInternal
// Il2CppName: GetNearestInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::PointGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, bool)>(&Pathfinding::PointGraph::GetNearestInternal)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* fastCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "GetNearestInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, fastCheck});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::FindClosestConnectionPoint
// Il2CppName: FindClosestConnectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::PointGraph::*)(::Pathfinding::PointNode*, ::UnityEngine::Vector3)>(&Pathfinding::PointGraph::FindClosestConnectionPoint)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PointNode")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "FindClosestConnectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, position});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::AddNode
// Il2CppName: AddNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PointNode* (Pathfinding::PointGraph::*)(::Pathfinding::Int3)>(&Pathfinding::PointGraph::AddNode)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "AddNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::AddNode
// Il2CppName: AddNode
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Pathfinding::PointGraph::CountChildren
// Il2CppName: CountChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Transform*)>(&Pathfinding::PointGraph::CountChildren)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "CountChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::AddChildren
// Il2CppName: AddChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(ByRef<int>, ::UnityEngine::Transform*)>(&Pathfinding::PointGraph::AddChildren)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "AddChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, tr});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::RebuildNodeLookup
// Il2CppName: RebuildNodeLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::RebuildNodeLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "RebuildNodeLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::RebuildConnectionDistanceLookup
// Il2CppName: RebuildConnectionDistanceLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::RebuildConnectionDistanceLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "RebuildConnectionDistanceLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::AddToLookup
// Il2CppName: AddToLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::PointNode*)>(&Pathfinding::PointGraph::AddToLookup)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PointNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "AddToLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::RegisterConnectionLength
// Il2CppName: RegisterConnectionLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(int64_t)>(&Pathfinding::PointGraph::RegisterConnectionLength)> {
  static const MethodInfo* get() {
    static auto* sqrLength = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "RegisterConnectionLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sqrLength});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::CreateNodes
// Il2CppName: CreateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::PointNode*> (Pathfinding::PointGraph::*)(int)>(&Pathfinding::PointGraph::CreateNodes)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "CreateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::ConnectNodes
// Il2CppName: ConnectNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::ConnectNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "ConnectNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::ConnectNodesAsync
// Il2CppName: ConnectNodesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::ConnectNodesAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "ConnectNodesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::IsValidConnection
// Il2CppName: IsValidConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::PointGraph::*)(::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*, ByRef<float>)>(&Pathfinding::PointGraph::IsValidConnection)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* dist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "IsValidConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, dist});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync
// Il2CppName: Pathfinding.IUpdatableGraph.CanUpdateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateThreading (Pathfinding::PointGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "Pathfinding.IUpdatableGraph.CanUpdateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateArea
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::PointGraph::Pathfinding_IUpdatableGraph_UpdateArea)> {
  static const MethodInfo* get() {
    static auto* guo = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "Pathfinding.IUpdatableGraph.UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guo});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::CountNodes
// Il2CppName: CountNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::CountNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "CountNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::PointGraph::GetNodes)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::PointGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::PointGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::PointGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::PointGraph::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::PointGraph::*)()>(&Pathfinding::PointGraph::ScanInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::PointGraph::PostDeserialization)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::UnityEngine::Matrix4x4)>(&Pathfinding::PointGraph::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* deltaMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::PointGraph::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::PointGraph::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::PointGraph::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::PointGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
