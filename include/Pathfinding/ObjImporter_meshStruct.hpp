// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ObjImporter
#include "Pathfinding/ObjImporter.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ObjImporter::meshStruct, "Pathfinding", "ObjImporter/meshStruct");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.ObjImporter/meshStruct
  // [TokenAttribute] Offset: FFFFFFFF
  struct ObjImporter::meshStruct/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector2[] uv
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector2> uv;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public System.Int32[] triangles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Vector3[] faceData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> faceData;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.String fileName
    // Size: 0x8
    // Offset: 0x28
    ::StringW fileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: meshStruct
    constexpr meshStruct(::ArrayW<::UnityEngine::Vector3> vertices_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector3> normals_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector2> uv_ = ::ArrayW<::UnityEngine::Vector2>(static_cast<void*>(nullptr)), ::ArrayW<int> triangles_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector3> faceData_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::StringW fileName_ = {}) noexcept : vertices{vertices_}, normals{normals_}, uv{uv_}, triangles{triangles_}, faceData{faceData_}, fileName{fileName_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: public UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: public UnityEngine.Vector2[] uv
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv();
    // Get instance field reference: public System.Int32[] triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triangles();
    // Get instance field reference: public UnityEngine.Vector3[] faceData
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_faceData();
    // Get instance field reference: public System.String fileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fileName();
  }; // Pathfinding.ObjImporter/meshStruct
  #pragma pack(pop)
  static check_size<sizeof(ObjImporter::meshStruct), 40 + sizeof(::StringW)> __Pathfinding_ObjImporter_meshStructSizeCheck;
  static_assert(sizeof(ObjImporter::meshStruct) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
