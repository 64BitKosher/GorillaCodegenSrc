// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.WorkItemProcessor
#include "Pathfinding/WorkItemProcessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Pathfinding::WorkItemProcessor::IndexedQueue_1, "Pathfinding", "WorkItemProcessor/IndexedQueue`1");
// Type namespace: Pathfinding
namespace Pathfinding {
  // WARNING Size may be invalid!
  // Autogenerated type: Pathfinding.WorkItemProcessor/IndexedQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class WorkItemProcessor::IndexedQueue_1 : public ::Il2CppObject {
    public:
    public:
    // private T[] buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 start
    // Size: 0x4
    // Offset: 0x0
    int start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Count>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::dyn_buffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buffer"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 start
    [[deprecated("Use field access instead!")]] int& dyn_start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::dyn_start");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "start"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <Count>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Count$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::dyn_$Count$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Count>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Count(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Count(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::set_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void Enqueue(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Enqueue(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::Dequeue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WorkItemProcessor::IndexedQueue_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::WorkItemProcessor::IndexedQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WorkItemProcessor::IndexedQueue_1<T>*, creationType>()));
    }
  }; // Pathfinding.WorkItemProcessor/IndexedQueue`1
  // Could not write size check! Type: Pathfinding.WorkItemProcessor/IndexedQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
