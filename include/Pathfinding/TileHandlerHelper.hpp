// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: TileHandler
  class TileHandler;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TileHandlerHelper
  class TileHandlerHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::TileHandlerHelper);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::TileHandlerHelper*, "Pathfinding", "TileHandlerHelper");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.TileHandlerHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  class TileHandlerHelper : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // public System.Single get_updateInterval()
    // Offset: 0x29FCC80
    float get_updateInterval();
    // public System.Void set_updateInterval(System.Single value)
    // Offset: 0x29FCCEC
    void set_updateInterval(float value);
    // public System.Void UseSpecifiedHandler(Pathfinding.Util.TileHandler newHandler)
    // Offset: 0x29FCD64
    void UseSpecifiedHandler(::Pathfinding::Util::TileHandler* newHandler);
    // public System.Void DiscardPending()
    // Offset: 0x29FCDB0
    void DiscardPending();
    // public System.Void ForceUpdate()
    // Offset: 0x29FCE18
    void ForceUpdate();
    // public System.Void .ctor()
    // Offset: 0x29FCE80
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TileHandlerHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::TileHandlerHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TileHandlerHelper*, creationType>()));
    }
  }; // Pathfinding.TileHandlerHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::get_updateInterval
// Il2CppName: get_updateInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::TileHandlerHelper::*)()>(&Pathfinding::TileHandlerHelper::get_updateInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TileHandlerHelper*), "get_updateInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::set_updateInterval
// Il2CppName: set_updateInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TileHandlerHelper::*)(float)>(&Pathfinding::TileHandlerHelper::set_updateInterval)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TileHandlerHelper*), "set_updateInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::UseSpecifiedHandler
// Il2CppName: UseSpecifiedHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TileHandlerHelper::*)(::Pathfinding::Util::TileHandler*)>(&Pathfinding::TileHandlerHelper::UseSpecifiedHandler)> {
  static const MethodInfo* get() {
    static auto* newHandler = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "TileHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TileHandlerHelper*), "UseSpecifiedHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newHandler});
  }
};
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::DiscardPending
// Il2CppName: DiscardPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TileHandlerHelper::*)()>(&Pathfinding::TileHandlerHelper::DiscardPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TileHandlerHelper*), "DiscardPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TileHandlerHelper::*)()>(&Pathfinding::TileHandlerHelper::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TileHandlerHelper*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TileHandlerHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
