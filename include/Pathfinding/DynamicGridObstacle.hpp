// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphModifier
#include "Pathfinding/GraphModifier.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collider2D
  class Collider2D;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: DynamicGridObstacle
  class DynamicGridObstacle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::DynamicGridObstacle);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::DynamicGridObstacle*, "Pathfinding", "DynamicGridObstacle");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.DynamicGridObstacle
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class DynamicGridObstacle : public ::Pathfinding::GraphModifier {
    public:
    public:
    // private UnityEngine.Collider coll
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Collider* coll;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.Collider2D coll2D
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Collider2D* coll2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider2D*) == 0x8);
    // private UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single updateError
    // Size: 0x4
    // Offset: 0x58
    float updateError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single checkTime
    // Size: 0x4
    // Offset: 0x5C
    float checkTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Bounds prevBounds
    // Size: 0x18
    // Offset: 0x60
    ::UnityEngine::Bounds prevBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private UnityEngine.Quaternion prevRotation
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Quaternion prevRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean prevEnabled
    // Size: 0x1
    // Offset: 0x88
    bool prevEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: prevEnabled and: lastCheckTime
    char __padding7[0x3] = {};
    // private System.Single lastCheckTime
    // Size: 0x4
    // Offset: 0x8C
    float lastCheckTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> pendingGraphUpdates
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>* pendingGraphUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Collider coll
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_coll();
    // Get instance field reference: private UnityEngine.Collider2D coll2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& dyn_coll2D();
    // Get instance field reference: private UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: public System.Single updateError
    [[deprecated("Use field access instead!")]] float& dyn_updateError();
    // Get instance field reference: public System.Single checkTime
    [[deprecated("Use field access instead!")]] float& dyn_checkTime();
    // Get instance field reference: private UnityEngine.Bounds prevBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_prevBounds();
    // Get instance field reference: private UnityEngine.Quaternion prevRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_prevRotation();
    // Get instance field reference: private System.Boolean prevEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_prevEnabled();
    // Get instance field reference: private System.Single lastCheckTime
    [[deprecated("Use field access instead!")]] float& dyn_lastCheckTime();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> pendingGraphUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*& dyn_pendingGraphUpdates();
    // private UnityEngine.Bounds get_bounds()
    // Offset: 0x2A06148
    ::UnityEngine::Bounds get_bounds();
    // private System.Boolean get_colliderEnabled()
    // Offset: 0x2A06240
    bool get_colliderEnabled();
    // private System.Void Update()
    // Offset: 0x2A065AC
    void Update();
    // public System.Void DoUpdateGraphs()
    // Offset: 0x2A06AC4
    void DoUpdateGraphs();
    // static private System.Single BoundsVolume(UnityEngine.Bounds b)
    // Offset: 0x2A07124
    static float BoundsVolume(::UnityEngine::Bounds b);
    // protected override System.Void Awake()
    // Offset: 0x2A062D0
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::Awake()
    void Awake();
    // public override System.Void OnPostScan()
    // Offset: 0x2A064FC
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnPostScan()
    void OnPostScan();
    // protected override System.Void OnDisable()
    // Offset: 0x2A06F8C
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x2A071A4
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicGridObstacle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::DynamicGridObstacle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicGridObstacle*, creationType>()));
    }
  }; // Pathfinding.DynamicGridObstacle
  #pragma pack(pop)
  static check_size<sizeof(DynamicGridObstacle), 144 + sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*)> __Pathfinding_DynamicGridObstacleSizeCheck;
  static_assert(sizeof(DynamicGridObstacle) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::get_colliderEnabled
// Il2CppName: get_colliderEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::get_colliderEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "get_colliderEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::DoUpdateGraphs
// Il2CppName: DoUpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::DoUpdateGraphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "DoUpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::BoundsVolume
// Il2CppName: BoundsVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Bounds)>(&Pathfinding::DynamicGridObstacle::BoundsVolume)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "BoundsVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::OnPostScan
// Il2CppName: OnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::OnPostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "OnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::DynamicGridObstacle::*)()>(&Pathfinding::DynamicGridObstacle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::DynamicGridObstacle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::DynamicGridObstacle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
