// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RichPathPart
#include "Pathfinding/RichPathPart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NodeLink2
  class NodeLink2;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichSpecial
  class RichSpecial;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RichSpecial);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RichSpecial*, "Pathfinding", "RichSpecial");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RichSpecial
  // [TokenAttribute] Offset: FFFFFFFF
  class RichSpecial : public ::Pathfinding::RichPathPart {
    public:
    public:
    // public Pathfinding.NodeLink2 nodeLink
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::NodeLink2* nodeLink;
    // Field size check
    static_assert(sizeof(::Pathfinding::NodeLink2*) == 0x8);
    // public UnityEngine.Transform first
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* first;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform second
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* second;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean reverse
    // Size: 0x1
    // Offset: 0x28
    bool reverse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Pathfinding.NodeLink2 nodeLink
    [[deprecated("Use field access instead!")]] ::Pathfinding::NodeLink2*& dyn_nodeLink();
    // Get instance field reference: public UnityEngine.Transform first
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_first();
    // Get instance field reference: public UnityEngine.Transform second
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_second();
    // Get instance field reference: public System.Boolean reverse
    [[deprecated("Use field access instead!")]] bool& dyn_reverse();
    // public Pathfinding.RichSpecial Initialize(Pathfinding.NodeLink2 nodeLink, Pathfinding.GraphNode first)
    // Offset: 0x29943B0
    ::Pathfinding::RichSpecial* Initialize(::Pathfinding::NodeLink2* nodeLink, ::Pathfinding::GraphNode* first);
    // public override System.Void OnEnterPool()
    // Offset: 0x29970F0
    // Implemented from: Pathfinding.RichPathPart
    // Base method: System.Void RichPathPart::OnEnterPool()
    void OnEnterPool();
    // public System.Void .ctor()
    // Offset: 0x29970FC
    // Implemented from: Pathfinding.RichPathPart
    // Base method: System.Void RichPathPart::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RichSpecial* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RichSpecial::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RichSpecial*, creationType>()));
    }
  }; // Pathfinding.RichSpecial
  #pragma pack(pop)
  static check_size<sizeof(RichSpecial), 40 + sizeof(bool)> __Pathfinding_RichSpecialSizeCheck;
  static_assert(sizeof(RichSpecial) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RichSpecial::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RichSpecial* (Pathfinding::RichSpecial::*)(::Pathfinding::NodeLink2*, ::Pathfinding::GraphNode*)>(&Pathfinding::RichSpecial::Initialize)> {
  static const MethodInfo* get() {
    static auto* nodeLink = &::il2cpp_utils::GetClassFromName("Pathfinding", "NodeLink2")->byval_arg;
    static auto* first = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichSpecial*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeLink, first});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichSpecial::OnEnterPool
// Il2CppName: OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichSpecial::*)()>(&Pathfinding::RichSpecial::OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichSpecial*), "OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichSpecial::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
