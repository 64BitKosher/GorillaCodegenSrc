// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RaycastModifier
#include "Pathfinding/RaycastModifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RaycastModifier::Filter);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RaycastModifier::Filter*, "Pathfinding", "RaycastModifier/Filter");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RaycastModifier/Filter
  // [TokenAttribute] Offset: FFFFFFFF
  class RaycastModifier::Filter : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // public readonly System.Func`2<Pathfinding.GraphNode,System.Boolean> cachedDelegate
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_2<::Pathfinding::GraphNode*, bool>* cachedDelegate;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Pathfinding::GraphNode*, bool>*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: public readonly System.Func`2<Pathfinding.GraphNode,System.Boolean> cachedDelegate
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Pathfinding::GraphNode*, bool>*& dyn_cachedDelegate();
    // public System.Void .ctor()
    // Offset: 0x29F58AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RaycastModifier::Filter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RaycastModifier::Filter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RaycastModifier::Filter*, creationType>()));
    }
    // private System.Boolean CanTraverse(Pathfinding.GraphNode node)
    // Offset: 0x29F5A90
    bool CanTraverse(::Pathfinding::GraphNode* node);
  }; // Pathfinding.RaycastModifier/Filter
  #pragma pack(pop)
  static check_size<sizeof(RaycastModifier::Filter), 24 + sizeof(::System::Func_2<::Pathfinding::GraphNode*, bool>*)> __Pathfinding_RaycastModifier_FilterSizeCheck;
  static_assert(sizeof(RaycastModifier::Filter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::Filter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::Filter::CanTraverse
// Il2CppName: CanTraverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RaycastModifier::Filter::*)(::Pathfinding::GraphNode*)>(&Pathfinding::RaycastModifier::Filter::CanTraverse)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier::Filter*), "CanTraverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
