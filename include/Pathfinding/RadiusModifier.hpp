// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.MonoModifier
#include "Pathfinding/MonoModifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RadiusModifier
  class RadiusModifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RadiusModifier);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RadiusModifier*, "Pathfinding", "RadiusModifier");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RadiusModifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class RadiusModifier : public ::Pathfinding::MonoModifier {
    public:
    // Nested type: ::Pathfinding::RadiusModifier::TangentType
    struct TangentType;
    public:
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x30
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single detail
    // Size: 0x4
    // Offset: 0x34
    float detail;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] radi
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> radi;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] a1
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> a1;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] a2
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> a2;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean[] dir
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<bool> dir;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Single detail
    [[deprecated("Use field access instead!")]] float& dyn_detail();
    // Get instance field reference: private System.Single[] radi
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_radi();
    // Get instance field reference: private System.Single[] a1
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_a1();
    // Get instance field reference: private System.Single[] a2
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_a2();
    // Get instance field reference: private System.Boolean[] dir
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_dir();
    // private System.Boolean CalculateCircleInner(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, System.Single r1, System.Single r2, out System.Single a, out System.Single sigma)
    // Offset: 0x29F2CB4
    bool CalculateCircleInner(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float r1, float r2, ByRef<float> a, ByRef<float> sigma);
    // private System.Boolean CalculateCircleOuter(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, System.Single r1, System.Single r2, out System.Single a, out System.Single sigma)
    // Offset: 0x29F2DFC
    bool CalculateCircleOuter(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float r1, float r2, ByRef<float> a, ByRef<float> sigma);
    // private Pathfinding.RadiusModifier/TangentType CalculateTangentType(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, UnityEngine.Vector3 p4)
    // Offset: 0x29F2F58
    ::Pathfinding::RadiusModifier::TangentType CalculateTangentType(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, ::UnityEngine::Vector3 p4);
    // private Pathfinding.RadiusModifier/TangentType CalculateTangentTypeSimple(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3)
    // Offset: 0x29F3004
    ::Pathfinding::RadiusModifier::TangentType CalculateTangentTypeSimple(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> Apply(System.Collections.Generic.List`1<UnityEngine.Vector3> vs)
    // Offset: 0x29F30F8
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* Apply(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vs);
    // public override System.Int32 get_Order()
    // Offset: 0x29F2CAC
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Int32 MonoModifier::get_Order()
    int get_Order();
    // public override System.Void Apply(Pathfinding.Path p)
    // Offset: 0x29F3048
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::Apply(Pathfinding.Path p)
    void Apply(::Pathfinding::Path* p);
    // public System.Void .ctor()
    // Offset: 0x29F3D84
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RadiusModifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RadiusModifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RadiusModifier*, creationType>()));
    }
  }; // Pathfinding.RadiusModifier
  #pragma pack(pop)
  static check_size<sizeof(RadiusModifier), 80 + sizeof(::ArrayW<bool>)> __Pathfinding_RadiusModifierSizeCheck;
  static_assert(sizeof(RadiusModifier) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::CalculateCircleInner
// Il2CppName: CalculateCircleInner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RadiusModifier::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ByRef<float>, ByRef<float>)>(&Pathfinding::RadiusModifier::CalculateCircleInner)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* r1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* r2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* sigma = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "CalculateCircleInner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, r1, r2, a, sigma});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::CalculateCircleOuter
// Il2CppName: CalculateCircleOuter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RadiusModifier::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ByRef<float>, ByRef<float>)>(&Pathfinding::RadiusModifier::CalculateCircleOuter)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* r1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* r2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* sigma = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "CalculateCircleOuter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, r1, r2, a, sigma});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::CalculateTangentType
// Il2CppName: CalculateTangentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RadiusModifier::TangentType (Pathfinding::RadiusModifier::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::RadiusModifier::CalculateTangentType)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p4 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "CalculateTangentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p4});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::CalculateTangentTypeSimple
// Il2CppName: CalculateTangentTypeSimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RadiusModifier::TangentType (Pathfinding::RadiusModifier::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::RadiusModifier::CalculateTangentTypeSimple)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "CalculateTangentTypeSimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::RadiusModifier::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::RadiusModifier::Apply)> {
  static const MethodInfo* get() {
    static auto* vs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vs});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RadiusModifier::*)()>(&Pathfinding::RadiusModifier::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RadiusModifier::*)(::Pathfinding::Path*)>(&Pathfinding::RadiusModifier::Apply)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RadiusModifier*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RadiusModifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
