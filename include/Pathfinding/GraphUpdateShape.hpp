// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphUpdateShape
  class GraphUpdateShape;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphUpdateShape);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUpdateShape*, "Pathfinding", "GraphUpdateShape");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphUpdateShape
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphUpdateShape : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3[] _points
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] _convexPoints
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector3> convexPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Boolean _convex
    // Size: 0x1
    // Offset: 0x20
    bool convex;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: convex and: right
    char __padding2[0x3] = {};
    // private UnityEngine.Vector3 right
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 right;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 forward
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 forward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 up
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 up;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 origin
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single minimumHeight
    // Size: 0x4
    // Offset: 0x54
    float minimumHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Vector3[] _points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__points();
    // Get instance field reference: private UnityEngine.Vector3[] _convexPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__convexPoints();
    // Get instance field reference: private System.Boolean _convex
    [[deprecated("Use field access instead!")]] bool& dyn__convex();
    // Get instance field reference: private UnityEngine.Vector3 right
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_right();
    // Get instance field reference: private UnityEngine.Vector3 forward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_forward();
    // Get instance field reference: private UnityEngine.Vector3 up
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_up();
    // Get instance field reference: private UnityEngine.Vector3 origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_origin();
    // Get instance field reference: public System.Single minimumHeight
    [[deprecated("Use field access instead!")]] float& dyn_minimumHeight();
    // public UnityEngine.Vector3[] get_points()
    // Offset: 0x29A3238
    ::ArrayW<::UnityEngine::Vector3> get_points();
    // public System.Void set_points(UnityEngine.Vector3[] value)
    // Offset: 0x29A3240
    void set_points(::ArrayW<::UnityEngine::Vector3> value);
    // public System.Boolean get_convex()
    // Offset: 0x29A32F4
    bool get_convex();
    // public System.Void set_convex(System.Boolean value)
    // Offset: 0x29A32FC
    void set_convex(bool value);
    // public System.Void .ctor()
    // Offset: 0x29A3334
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUpdateShape* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUpdateShape::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUpdateShape*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] points, System.Boolean convex, UnityEngine.Matrix4x4 matrix, System.Single minimumHeight)
    // Offset: 0x29A269C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUpdateShape* New_ctor(::ArrayW<::UnityEngine::Vector3> points, bool convex, ::UnityEngine::Matrix4x4 matrix, float minimumHeight) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUpdateShape::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUpdateShape*, creationType>(points, convex, matrix, minimumHeight)));
    }
    // private System.Void CalculateConvexHull()
    // Offset: 0x29A3280
    void CalculateConvexHull();
    // public UnityEngine.Bounds GetBounds()
    // Offset: 0x29A2908
    ::UnityEngine::Bounds GetBounds();
    // static public UnityEngine.Bounds GetBounds(UnityEngine.Vector3[] points, UnityEngine.Matrix4x4 matrix, System.Single minimumHeight)
    // Offset: 0x29A24B4
    static ::UnityEngine::Bounds GetBounds(::ArrayW<::UnityEngine::Vector3> points, ::UnityEngine::Matrix4x4 matrix, float minimumHeight);
    // static private UnityEngine.Bounds GetBounds(UnityEngine.Vector3[] points, UnityEngine.Vector3 right, UnityEngine.Vector3 up, UnityEngine.Vector3 forward, UnityEngine.Vector3 origin, System.Single minimumHeight)
    // Offset: 0x29A33FC
    static ::UnityEngine::Bounds GetBounds(::ArrayW<::UnityEngine::Vector3> points, ::UnityEngine::Vector3 right, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 forward, ::UnityEngine::Vector3 origin, float minimumHeight);
    // public System.Boolean Contains(Pathfinding.GraphNode node)
    // Offset: 0x2999A50
    bool Contains(::Pathfinding::GraphNode* node);
    // public System.Boolean Contains(UnityEngine.Vector3 point)
    // Offset: 0x29A3628
    bool Contains(::UnityEngine::Vector3 point);
  }; // Pathfinding.GraphUpdateShape
  #pragma pack(pop)
  static check_size<sizeof(GraphUpdateShape), 84 + sizeof(float)> __Pathfinding_GraphUpdateShapeSizeCheck;
  static_assert(sizeof(GraphUpdateShape) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::get_points
// Il2CppName: get_points
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Pathfinding::GraphUpdateShape::*)()>(&Pathfinding::GraphUpdateShape::get_points)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "get_points", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::set_points
// Il2CppName: set_points
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateShape::*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::GraphUpdateShape::set_points)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "set_points", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::get_convex
// Il2CppName: get_convex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateShape::*)()>(&Pathfinding::GraphUpdateShape::get_convex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "get_convex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::set_convex
// Il2CppName: set_convex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateShape::*)(bool)>(&Pathfinding::GraphUpdateShape::set_convex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "set_convex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::CalculateConvexHull
// Il2CppName: CalculateConvexHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateShape::*)()>(&Pathfinding::GraphUpdateShape::CalculateConvexHull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "CalculateConvexHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::GraphUpdateShape::*)()>(&Pathfinding::GraphUpdateShape::GetBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Matrix4x4, float)>(&Pathfinding::GraphUpdateShape::GetBounds)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* minimumHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, matrix, minimumHeight});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::GraphUpdateShape::GetBounds)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* minimumHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, right, up, forward, origin, minimumHeight});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateShape::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GraphUpdateShape::Contains)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateShape::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateShape::*)(::UnityEngine::Vector3)>(&Pathfinding::GraphUpdateShape::Contains)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateShape*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
