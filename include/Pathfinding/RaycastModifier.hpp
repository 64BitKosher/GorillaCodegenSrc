// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.MonoModifier
#include "Pathfinding/MonoModifier.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RaycastModifier
  class RaycastModifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RaycastModifier);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RaycastModifier*, "Pathfinding", "RaycastModifier");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RaycastModifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class RaycastModifier : public ::Pathfinding::MonoModifier {
    public:
    // Nested type: ::Pathfinding::RaycastModifier::Quality
    struct Quality;
    // Nested type: ::Pathfinding::RaycastModifier::Filter
    class Filter;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.RaycastModifier/Quality
    // [TokenAttribute] Offset: FFFFFFFF
    struct Quality/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Quality
      constexpr Quality(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.RaycastModifier/Quality Low
      static constexpr const int Low = 0;
      // Get static field: static public Pathfinding.RaycastModifier/Quality Low
      static ::Pathfinding::RaycastModifier::Quality _get_Low();
      // Set static field: static public Pathfinding.RaycastModifier/Quality Low
      static void _set_Low(::Pathfinding::RaycastModifier::Quality value);
      // static field const value: static public Pathfinding.RaycastModifier/Quality Medium
      static constexpr const int Medium = 1;
      // Get static field: static public Pathfinding.RaycastModifier/Quality Medium
      static ::Pathfinding::RaycastModifier::Quality _get_Medium();
      // Set static field: static public Pathfinding.RaycastModifier/Quality Medium
      static void _set_Medium(::Pathfinding::RaycastModifier::Quality value);
      // static field const value: static public Pathfinding.RaycastModifier/Quality High
      static constexpr const int High = 2;
      // Get static field: static public Pathfinding.RaycastModifier/Quality High
      static ::Pathfinding::RaycastModifier::Quality _get_High();
      // Set static field: static public Pathfinding.RaycastModifier/Quality High
      static void _set_High(::Pathfinding::RaycastModifier::Quality value);
      // static field const value: static public Pathfinding.RaycastModifier/Quality Highest
      static constexpr const int Highest = 3;
      // Get static field: static public Pathfinding.RaycastModifier/Quality Highest
      static ::Pathfinding::RaycastModifier::Quality _get_Highest();
      // Set static field: static public Pathfinding.RaycastModifier/Quality Highest
      static void _set_Highest(::Pathfinding::RaycastModifier::Quality value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.RaycastModifier/Quality
    #pragma pack(pop)
    static check_size<sizeof(RaycastModifier::Quality), 0 + sizeof(int)> __Pathfinding_RaycastModifier_QualitySizeCheck;
    static_assert(sizeof(RaycastModifier::Quality) == 0x4);
    public:
    // public System.Boolean useRaycasting
    // Size: 0x1
    // Offset: 0x30
    bool useRaycasting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRaycasting and: mask
    char __padding0[0x3] = {};
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean thickRaycast
    // Size: 0x1
    // Offset: 0x38
    bool thickRaycast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: thickRaycast and: thickRaycastRadius
    char __padding2[0x3] = {};
    // public System.Single thickRaycastRadius
    // Size: 0x4
    // Offset: 0x3C
    float thickRaycastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean use2DPhysics
    // Size: 0x1
    // Offset: 0x40
    bool use2DPhysics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: use2DPhysics and: raycastOffset
    char __padding4[0x3] = {};
    // public UnityEngine.Vector3 raycastOffset
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 raycastOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean useGraphRaycasting
    // Size: 0x1
    // Offset: 0x50
    bool useGraphRaycasting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useGraphRaycasting and: quality
    char __padding6[0x3] = {};
    // public Pathfinding.RaycastModifier/Quality quality
    // Size: 0x4
    // Offset: 0x54
    ::Pathfinding::RaycastModifier::Quality quality;
    // Field size check
    static_assert(sizeof(::Pathfinding::RaycastModifier::Quality) == 0x4);
    // private Pathfinding.RaycastModifier/Filter cachedFilter
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::RaycastModifier::Filter* cachedFilter;
    // Field size check
    static_assert(sizeof(::Pathfinding::RaycastModifier::Filter*) == 0x8);
    // private Pathfinding.NNConstraint cachedNNConstraint
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::NNConstraint* cachedNNConstraint;
    // Field size check
    static_assert(sizeof(::Pathfinding::NNConstraint*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32[] iterationsByQuality
    static ::ArrayW<int> _get_iterationsByQuality();
    // Set static field: static private readonly System.Int32[] iterationsByQuality
    static void _set_iterationsByQuality(::ArrayW<int> value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> buffer
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* _get_buffer();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector3> buffer
    static void _set_buffer(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // Get static field: static private System.Single[] DPCosts
    static ::ArrayW<float> _get_DPCosts();
    // Set static field: static private System.Single[] DPCosts
    static void _set_DPCosts(::ArrayW<float> value);
    // Get static field: static private System.Int32[] DPParents
    static ::ArrayW<int> _get_DPParents();
    // Set static field: static private System.Int32[] DPParents
    static void _set_DPParents(::ArrayW<int> value);
    // Get instance field reference: public System.Boolean useRaycasting
    [[deprecated("Use field access instead!")]] bool& dyn_useRaycasting();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public System.Boolean thickRaycast
    [[deprecated("Use field access instead!")]] bool& dyn_thickRaycast();
    // Get instance field reference: public System.Single thickRaycastRadius
    [[deprecated("Use field access instead!")]] float& dyn_thickRaycastRadius();
    // Get instance field reference: public System.Boolean use2DPhysics
    [[deprecated("Use field access instead!")]] bool& dyn_use2DPhysics();
    // Get instance field reference: public UnityEngine.Vector3 raycastOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_raycastOffset();
    // Get instance field reference: public System.Boolean useGraphRaycasting
    [[deprecated("Use field access instead!")]] bool& dyn_useGraphRaycasting();
    // Get instance field reference: public Pathfinding.RaycastModifier/Quality quality
    [[deprecated("Use field access instead!")]] ::Pathfinding::RaycastModifier::Quality& dyn_quality();
    // Get instance field reference: private Pathfinding.RaycastModifier/Filter cachedFilter
    [[deprecated("Use field access instead!")]] ::Pathfinding::RaycastModifier::Filter*& dyn_cachedFilter();
    // Get instance field reference: private Pathfinding.NNConstraint cachedNNConstraint
    [[deprecated("Use field access instead!")]] ::Pathfinding::NNConstraint*& dyn_cachedNNConstraint();
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> ApplyGreedy(Pathfinding.Path p, System.Collections.Generic.List`1<UnityEngine.Vector3> points, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter, Pathfinding.NNConstraint nnConstraint)
    // Offset: 0x29F4B00
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* ApplyGreedy(::Pathfinding::Path* p, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter, ::Pathfinding::NNConstraint* nnConstraint);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> ApplyDP(Pathfinding.Path p, System.Collections.Generic.List`1<UnityEngine.Vector3> points, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter, Pathfinding.NNConstraint nnConstraint)
    // Offset: 0x29F502C
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* ApplyDP(::Pathfinding::Path* p, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter, ::Pathfinding::NNConstraint* nnConstraint);
    // protected System.Boolean ValidateLine(Pathfinding.GraphNode n1, Pathfinding.GraphNode n2, UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter, Pathfinding.NNConstraint nnConstraint)
    // Offset: 0x29F42B4
    bool ValidateLine(::Pathfinding::GraphNode* n1, ::Pathfinding::GraphNode* n2, ::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter, ::Pathfinding::NNConstraint* nnConstraint);
    // static private System.Void .cctor()
    // Offset: 0x29F593C
    static void _cctor();
    // public override System.Int32 get_Order()
    // Offset: 0x29F3E64
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Int32 MonoModifier::get_Order()
    int get_Order();
    // public override System.Void Apply(Pathfinding.Path p)
    // Offset: 0x29F3E6C
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::Apply(Pathfinding.Path p)
    void Apply(::Pathfinding::Path* p);
    // public System.Void .ctor()
    // Offset: 0x29F57CC
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RaycastModifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RaycastModifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RaycastModifier*, creationType>()));
    }
  }; // Pathfinding.RaycastModifier
  #pragma pack(pop)
  static check_size<sizeof(RaycastModifier), 96 + sizeof(::Pathfinding::NNConstraint*)> __Pathfinding_RaycastModifierSizeCheck;
  static_assert(sizeof(RaycastModifier) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RaycastModifier::Quality, "Pathfinding", "RaycastModifier/Quality");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::ApplyGreedy
// Il2CppName: ApplyGreedy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::RaycastModifier::*)(::Pathfinding::Path*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*, ::Pathfinding::NNConstraint*)>(&Pathfinding::RaycastModifier::ApplyGreedy)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* nnConstraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), "ApplyGreedy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, points, filter, nnConstraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::ApplyDP
// Il2CppName: ApplyDP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::RaycastModifier::*)(::Pathfinding::Path*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*, ::Pathfinding::NNConstraint*)>(&Pathfinding::RaycastModifier::ApplyDP)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* nnConstraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), "ApplyDP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, points, filter, nnConstraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::ValidateLine
// Il2CppName: ValidateLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RaycastModifier::*)(::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::System::Func_2<::Pathfinding::GraphNode*, bool>*, ::Pathfinding::NNConstraint*)>(&Pathfinding::RaycastModifier::ValidateLine)> {
  static const MethodInfo* get() {
    static auto* n1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* n2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* nnConstraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), "ValidateLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n1, n2, v1, v2, filter, nnConstraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::RaycastModifier::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RaycastModifier::*)()>(&Pathfinding::RaycastModifier::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RaycastModifier::*)(::Pathfinding::Path*)>(&Pathfinding::RaycastModifier::Apply)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RaycastModifier*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RaycastModifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
