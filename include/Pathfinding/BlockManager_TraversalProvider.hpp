// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.BlockManager
#include "Pathfinding/BlockManager.hpp"
// Including type: Pathfinding.ITraversalProvider
#include "Pathfinding/ITraversalProvider.hpp"
// Including type: Pathfinding.BlockManager/BlockMode
#include "Pathfinding/BlockManager_BlockMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: SingleNodeBlocker
  class SingleNodeBlocker;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BlockManager::TraversalProvider);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BlockManager::TraversalProvider*, "Pathfinding", "BlockManager/TraversalProvider");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BlockManager/TraversalProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class BlockManager::TraversalProvider : public ::Il2CppObject/*, public ::Pathfinding::ITraversalProvider*/ {
    public:
    public:
    // private readonly Pathfinding.BlockManager blockManager
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::BlockManager* blockManager;
    // Field size check
    static_assert(sizeof(::Pathfinding::BlockManager*) == 0x8);
    // private Pathfinding.BlockManager/BlockMode <mode>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::Pathfinding::BlockManager::BlockMode mode;
    // Field size check
    static_assert(sizeof(::Pathfinding::BlockManager::BlockMode) == 0x4);
    // Padding between fields: mode and: selector
    char __padding1[0x4] = {};
    // private readonly System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker> selector
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>* selector;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::ITraversalProvider
    operator ::Pathfinding::ITraversalProvider() noexcept {
      return *reinterpret_cast<::Pathfinding::ITraversalProvider*>(this);
    }
    // Get instance field reference: private readonly Pathfinding.BlockManager blockManager
    [[deprecated("Use field access instead!")]] ::Pathfinding::BlockManager*& dyn_blockManager();
    // Get instance field reference: private Pathfinding.BlockManager/BlockMode <mode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::BlockManager::BlockMode& dyn_$mode$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker> selector
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*& dyn_selector();
    // public Pathfinding.BlockManager/BlockMode get_mode()
    // Offset: 0x2A0440C
    ::Pathfinding::BlockManager::BlockMode get_mode();
    // private System.Void set_mode(Pathfinding.BlockManager/BlockMode value)
    // Offset: 0x2A04414
    void set_mode(::Pathfinding::BlockManager::BlockMode value);
    // public System.Void .ctor(Pathfinding.BlockManager blockManager, Pathfinding.BlockManager/BlockMode mode, System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker> selector)
    // Offset: 0x2A0441C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlockManager::TraversalProvider* New_ctor(::Pathfinding::BlockManager* blockManager, ::Pathfinding::BlockManager::BlockMode mode, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>* selector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BlockManager::TraversalProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlockManager::TraversalProvider*, creationType>(blockManager, mode, selector)));
    }
    // public System.Boolean CanTraverse(Pathfinding.Path path, Pathfinding.GraphNode node)
    // Offset: 0x2A04534
    bool CanTraverse(::Pathfinding::Path* path, ::Pathfinding::GraphNode* node);
    // public System.UInt32 GetTraversalCost(Pathfinding.Path path, Pathfinding.GraphNode node)
    // Offset: 0x2A045C0
    uint GetTraversalCost(::Pathfinding::Path* path, ::Pathfinding::GraphNode* node);
  }; // Pathfinding.BlockManager/TraversalProvider
  #pragma pack(pop)
  static check_size<sizeof(BlockManager::TraversalProvider), 32 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*)> __Pathfinding_BlockManager_TraversalProviderSizeCheck;
  static_assert(sizeof(BlockManager::TraversalProvider) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BlockManager::TraversalProvider::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::BlockManager::BlockMode (Pathfinding::BlockManager::TraversalProvider::*)()>(&Pathfinding::BlockManager::TraversalProvider::get_mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager::TraversalProvider*), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::TraversalProvider::set_mode
// Il2CppName: set_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BlockManager::TraversalProvider::*)(::Pathfinding::BlockManager::BlockMode)>(&Pathfinding::BlockManager::TraversalProvider::set_mode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "BlockManager/BlockMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager::TraversalProvider*), "set_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::TraversalProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::BlockManager::TraversalProvider::CanTraverse
// Il2CppName: CanTraverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::BlockManager::TraversalProvider::*)(::Pathfinding::Path*, ::Pathfinding::GraphNode*)>(&Pathfinding::BlockManager::TraversalProvider::CanTraverse)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager::TraversalProvider*), "CanTraverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::TraversalProvider::GetTraversalCost
// Il2CppName: GetTraversalCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::BlockManager::TraversalProvider::*)(::Pathfinding::Path*, ::Pathfinding::GraphNode*)>(&Pathfinding::BlockManager::TraversalProvider::GetTraversalCost)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager::TraversalProvider*), "GetTraversalCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, node});
  }
};
