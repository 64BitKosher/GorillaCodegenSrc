// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ABPath
#include "Pathfinding/ABPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathEndingCondition
  class PathEndingCondition;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: XPath
  class XPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::XPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::XPath*, "Pathfinding", "XPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x140
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.XPath
  // [TokenAttribute] Offset: FFFFFFFF
  class XPath : public ::Pathfinding::ABPath {
    public:
    public:
    // public Pathfinding.PathEndingCondition endingCondition
    // Size: 0x8
    // Offset: 0x138
    ::Pathfinding::PathEndingCondition* endingCondition;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathEndingCondition*) == 0x8);
    public:
    // Creating conversion operator: operator ::Pathfinding::PathEndingCondition*
    constexpr operator ::Pathfinding::PathEndingCondition*() const noexcept {
      return endingCondition;
    }
    // Get instance field reference: public Pathfinding.PathEndingCondition endingCondition
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathEndingCondition*& dyn_endingCondition();
    // static public Pathfinding.XPath Construct(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A037D0
    static ::Pathfinding::XPath* Construct(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback);
    // private System.Void ChangeEndNode(Pathfinding.GraphNode target)
    // Offset: 0x2A03A20
    void ChangeEndNode(::Pathfinding::GraphNode* target);
    // public System.Void .ctor()
    // Offset: 0x2A03778
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::.ctor()
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::XPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPath*, creationType>()));
    }
    // protected override System.Void Reset()
    // Offset: 0x2A03964
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Reset()
    void Reset();
    // protected override System.Boolean EndPointGridGraphSpecialCase(Pathfinding.GraphNode endNode)
    // Offset: 0x2A03988
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Boolean ABPath::EndPointGridGraphSpecialCase(Pathfinding.GraphNode endNode)
    bool EndPointGridGraphSpecialCase(::Pathfinding::GraphNode* endNode);
    // protected override System.Void CompletePathIfStartIsValidTarget()
    // Offset: 0x2A03990
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::CompletePathIfStartIsValidTarget()
    void CompletePathIfStartIsValidTarget();
    // protected override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x2A03AC8
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
  }; // Pathfinding.XPath
  #pragma pack(pop)
  static check_size<sizeof(XPath), 312 + sizeof(::Pathfinding::PathEndingCondition*)> __Pathfinding_XPathSizeCheck;
  static_assert(sizeof(XPath) == 0x140);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::XPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::XPath* (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::XPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::XPath::ChangeEndNode
// Il2CppName: ChangeEndNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::XPath::*)(::Pathfinding::GraphNode*)>(&Pathfinding::XPath::ChangeEndNode)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "ChangeEndNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Pathfinding::XPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::XPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::XPath::*)()>(&Pathfinding::XPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::XPath::EndPointGridGraphSpecialCase
// Il2CppName: EndPointGridGraphSpecialCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::XPath::*)(::Pathfinding::GraphNode*)>(&Pathfinding::XPath::EndPointGridGraphSpecialCase)> {
  static const MethodInfo* get() {
    static auto* endNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "EndPointGridGraphSpecialCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::XPath::CompletePathIfStartIsValidTarget
// Il2CppName: CompletePathIfStartIsValidTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::XPath::*)()>(&Pathfinding::XPath::CompletePathIfStartIsValidTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "CompletePathIfStartIsValidTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::XPath::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::XPath::*)(int64_t)>(&Pathfinding::XPath::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::XPath*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
