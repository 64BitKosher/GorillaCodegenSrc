// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Int2
  struct Int2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Polygon
  class Polygon;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Polygon);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Polygon*, "Pathfinding", "Polygon");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Polygon
  // [TokenAttribute] Offset: FFFFFFFF
  class Polygon : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int3,System.Int32> cached_Int3_int_dict
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, int>* _get_cached_Int3_int_dict();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int3,System.Int32> cached_Int3_int_dict
    static void _set_cached_Int3_int_dict(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, int>* value);
    // static public System.Boolean ContainsPointXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x299FE84
    static bool ContainsPointXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public System.Boolean ContainsPointXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c, Pathfinding.Int3 p)
    // Offset: 0x299FF24
    static bool ContainsPointXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c, ::Pathfinding::Int3 p);
    // static public System.Boolean ContainsPoint(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 c, Pathfinding.Int2 p)
    // Offset: 0x299FF90
    static bool ContainsPoint(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 c, ::Pathfinding::Int2 p);
    // static public System.Boolean ContainsPoint(UnityEngine.Vector2[] polyPoints, UnityEngine.Vector2 p)
    // Offset: 0x29A0038
    static bool ContainsPoint(::ArrayW<::UnityEngine::Vector2> polyPoints, ::UnityEngine::Vector2 p);
    // static public System.Boolean ContainsPointXZ(UnityEngine.Vector3[] polyPoints, UnityEngine.Vector3 p)
    // Offset: 0x29A0100
    static bool ContainsPointXZ(::ArrayW<::UnityEngine::Vector3> polyPoints, ::UnityEngine::Vector3 p);
    // static public System.Int32 SampleYCoordinateInTriangle(Pathfinding.Int3 p1, Pathfinding.Int3 p2, Pathfinding.Int3 p3, Pathfinding.Int3 p)
    // Offset: 0x29A01D0
    static int SampleYCoordinateInTriangle(::Pathfinding::Int3 p1, ::Pathfinding::Int3 p2, ::Pathfinding::Int3 p3, ::Pathfinding::Int3 p);
    // static public UnityEngine.Vector3[] ConvexHullXZ(UnityEngine.Vector3[] points)
    // Offset: 0x29A0390
    static ::ArrayW<::UnityEngine::Vector3> ConvexHullXZ(::ArrayW<::UnityEngine::Vector3> points);
    // static public UnityEngine.Vector2 ClosestPointOnTriangle(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p)
    // Offset: 0x29A06C0
    static ::UnityEngine::Vector2 ClosestPointOnTriangle(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b, ::UnityEngine::Vector2 c, ::UnityEngine::Vector2 p);
    // static public UnityEngine.Vector3 ClosestPointOnTriangleXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x29A0854
    static ::UnityEngine::Vector3 ClosestPointOnTriangleXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public UnityEngine.Vector3 ClosestPointOnTriangle(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x29A0A74
    static ::UnityEngine::Vector3 ClosestPointOnTriangle(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public System.Void CompressMesh(System.Collections.Generic.List`1<Pathfinding.Int3> vertices, System.Collections.Generic.List`1<System.Int32> triangles, out Pathfinding.Int3[] outVertices, out System.Int32[] outTriangles)
    // Offset: 0x29A0CA4
    static void CompressMesh(::System::Collections::Generic::List_1<::Pathfinding::Int3>* vertices, ::System::Collections::Generic::List_1<int>* triangles, ByRef<::ArrayW<::Pathfinding::Int3>> outVertices, ByRef<::ArrayW<int>> outTriangles);
    // static public System.Void TraceContours(System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> outline, System.Collections.Generic.HashSet`1<System.Int32> hasInEdge, System.Action`2<System.Collections.Generic.List`1<System.Int32>,System.Boolean> results)
    // Offset: 0x29A11D4
    static void TraceContours(::System::Collections::Generic::Dictionary_2<int, int>* outline, ::System::Collections::Generic::HashSet_1<int>* hasInEdge, ::System::Action_2<::System::Collections::Generic::List_1<int>*, bool>* results);
    // static public System.Void Subdivide(System.Collections.Generic.List`1<UnityEngine.Vector3> points, System.Collections.Generic.List`1<UnityEngine.Vector3> result, System.Int32 subSegments)
    // Offset: 0x29A1560
    static void Subdivide(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* result, int subSegments);
    // static private System.Void .cctor()
    // Offset: 0x29A1794
    static void _cctor();
  }; // Pathfinding.Polygon
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector2>, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* polyPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyPoints, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* polyPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyPoints, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::SampleYCoordinateInTriangle
// Il2CppName: SampleYCoordinateInTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::SampleYCoordinateInTriangle)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "SampleYCoordinateInTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ConvexHullXZ
// Il2CppName: ConvexHullXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::Polygon::ConvexHullXZ)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ConvexHullXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangle
// Il2CppName: ClosestPointOnTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::ClosestPointOnTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangleXZ
// Il2CppName: ClosestPointOnTriangleXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ClosestPointOnTriangleXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangleXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangle
// Il2CppName: ClosestPointOnTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ClosestPointOnTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::CompressMesh
// Il2CppName: CompressMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Pathfinding::Int3>*, ::System::Collections::Generic::List_1<int>*, ByRef<::ArrayW<::Pathfinding::Int3>>, ByRef<::ArrayW<int>>)>(&Pathfinding::Polygon::CompressMesh)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")})->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* outVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->this_arg;
    static auto* outTriangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "CompressMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, triangles, outVertices, outTriangles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::TraceContours
// Il2CppName: TraceContours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::Dictionary_2<int, int>*, ::System::Collections::Generic::HashSet_1<int>*, ::System::Action_2<::System::Collections::Generic::List_1<int>*, bool>*)>(&Pathfinding::Polygon::TraceContours)> {
  static const MethodInfo* get() {
    static auto* outline = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* hasInEdge = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")}), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "TraceContours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outline, hasInEdge, results});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Subdivide
// Il2CppName: Subdivide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int)>(&Pathfinding::Polygon::Subdivide)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* subSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Subdivide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, result, subSegments});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Polygon::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
