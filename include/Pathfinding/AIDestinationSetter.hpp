// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: IAstarAI
  class IAstarAI;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AIDestinationSetter
  class AIDestinationSetter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AIDestinationSetter);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AIDestinationSetter*, "Pathfinding", "AIDestinationSetter");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AIDestinationSetter
  // [TokenAttribute] Offset: FFFFFFFF
  // [UniqueComponentAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class AIDestinationSetter : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Pathfinding.IAstarAI ai
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::IAstarAI* ai;
    // Field size check
    static_assert(sizeof(::Pathfinding::IAstarAI*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: private Pathfinding.IAstarAI ai
    [[deprecated("Use field access instead!")]] ::Pathfinding::IAstarAI*& dyn_ai();
    // private System.Void OnEnable()
    // Offset: 0x29887AC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2988984
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x2988B28
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2988C54
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AIDestinationSetter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AIDestinationSetter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AIDestinationSetter*, creationType>()));
    }
  }; // Pathfinding.AIDestinationSetter
  #pragma pack(pop)
  static check_size<sizeof(AIDestinationSetter), 48 + sizeof(::Pathfinding::IAstarAI*)> __Pathfinding_AIDestinationSetterSizeCheck;
  static_assert(sizeof(AIDestinationSetter) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AIDestinationSetter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIDestinationSetter::*)()>(&Pathfinding::AIDestinationSetter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIDestinationSetter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIDestinationSetter::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIDestinationSetter::*)()>(&Pathfinding::AIDestinationSetter::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIDestinationSetter*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIDestinationSetter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIDestinationSetter::*)()>(&Pathfinding::AIDestinationSetter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIDestinationSetter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIDestinationSetter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
