// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.INavmeshHolder
#include "Pathfinding/INavmeshHolder.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: BBTree
  class BBTree;
  // Forward declaring type: NavmeshBase
  class NavmeshBase;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshTile
  class NavmeshTile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavmeshTile);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshTile*, "Pathfinding", "NavmeshTile");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavmeshTile
  // [TokenAttribute] Offset: FFFFFFFF
  class NavmeshTile : public ::Il2CppObject/*, public ::Pathfinding::INavmeshHolder*/ {
    public:
    public:
    // public System.Int32[] tris
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> tris;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Pathfinding.Int3[] verts
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Pathfinding::Int3> verts;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::Int3>) == 0x8);
    // public Pathfinding.Int3[] vertsInGraphSpace
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Pathfinding::Int3> vertsInGraphSpace;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::Int3>) == 0x8);
    // public System.Int32 x
    // Size: 0x4
    // Offset: 0x28
    int x;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 z
    // Size: 0x4
    // Offset: 0x2C
    int z;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 w
    // Size: 0x4
    // Offset: 0x30
    int w;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 d
    // Size: 0x4
    // Offset: 0x34
    int d;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.TriangleMeshNode[] nodes
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Pathfinding::TriangleMeshNode*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::TriangleMeshNode*>) == 0x8);
    // public Pathfinding.BBTree bbTree
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::BBTree* bbTree;
    // Field size check
    static_assert(sizeof(::Pathfinding::BBTree*) == 0x8);
    // public System.Boolean flag
    // Size: 0x1
    // Offset: 0x48
    bool flag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flag and: graph
    char __padding9[0x7] = {};
    // public Pathfinding.NavmeshBase graph
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::NavmeshBase* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshBase*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::INavmeshHolder
    operator ::Pathfinding::INavmeshHolder() noexcept {
      return *reinterpret_cast<::Pathfinding::INavmeshHolder*>(this);
    }
    // Get instance field reference: public System.Int32[] tris
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_tris();
    // Get instance field reference: public Pathfinding.Int3[] verts
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::Int3>& dyn_verts();
    // Get instance field reference: public Pathfinding.Int3[] vertsInGraphSpace
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::Int3>& dyn_vertsInGraphSpace();
    // Get instance field reference: public System.Int32 x
    [[deprecated("Use field access instead!")]] int& dyn_x();
    // Get instance field reference: public System.Int32 z
    [[deprecated("Use field access instead!")]] int& dyn_z();
    // Get instance field reference: public System.Int32 w
    [[deprecated("Use field access instead!")]] int& dyn_w();
    // Get instance field reference: public System.Int32 d
    [[deprecated("Use field access instead!")]] int& dyn_d();
    // Get instance field reference: public Pathfinding.TriangleMeshNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::TriangleMeshNode*>& dyn_nodes();
    // Get instance field reference: public Pathfinding.BBTree bbTree
    [[deprecated("Use field access instead!")]] ::Pathfinding::BBTree*& dyn_bbTree();
    // Get instance field reference: public System.Boolean flag
    [[deprecated("Use field access instead!")]] bool& dyn_flag();
    // Get instance field reference: public Pathfinding.NavmeshBase graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshBase*& dyn_graph();
    // public System.Void GetTileCoordinates(System.Int32 tileIndex, out System.Int32 x, out System.Int32 z)
    // Offset: 0x29E9E24
    void GetTileCoordinates(int tileIndex, ByRef<int> x, ByRef<int> z);
    // public System.Int32 GetVertexArrayIndex(System.Int32 index)
    // Offset: 0x29E9E38
    int GetVertexArrayIndex(int index);
    // public Pathfinding.Int3 GetVertex(System.Int32 index)
    // Offset: 0x29E9E40
    ::Pathfinding::Int3 GetVertex(int index);
    // public Pathfinding.Int3 GetVertexInGraphSpace(System.Int32 index)
    // Offset: 0x29E9E80
    ::Pathfinding::Int3 GetVertexInGraphSpace(int index);
    // public Pathfinding.Util.GraphTransform get_transform()
    // Offset: 0x29E9EBC
    ::Pathfinding::Util::GraphTransform* get_transform();
    // public System.Void GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0x29E9ED8
    void GetNodes(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // public System.Void .ctor()
    // Offset: 0x29E9F44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshTile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavmeshTile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshTile*, creationType>()));
    }
  }; // Pathfinding.NavmeshTile
  #pragma pack(pop)
  static check_size<sizeof(NavmeshTile), 80 + sizeof(::Pathfinding::NavmeshBase*)> __Pathfinding_NavmeshTileSizeCheck;
  static_assert(sizeof(NavmeshTile) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::GetTileCoordinates
// Il2CppName: GetTileCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshTile::*)(int, ByRef<int>, ByRef<int>)>(&Pathfinding::NavmeshTile::GetTileCoordinates)> {
  static const MethodInfo* get() {
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "GetTileCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIndex, x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::GetVertexArrayIndex
// Il2CppName: GetVertexArrayIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::NavmeshTile::*)(int)>(&Pathfinding::NavmeshTile::GetVertexArrayIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "GetVertexArrayIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::GetVertex
// Il2CppName: GetVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::NavmeshTile::*)(int)>(&Pathfinding::NavmeshTile::GetVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "GetVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::GetVertexInGraphSpace
// Il2CppName: GetVertexInGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::NavmeshTile::*)(int)>(&Pathfinding::NavmeshTile::GetVertexInGraphSpace)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "GetVertexInGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::NavmeshTile::*)()>(&Pathfinding::NavmeshTile::get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshTile::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::NavmeshTile::GetNodes)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshTile*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshTile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
