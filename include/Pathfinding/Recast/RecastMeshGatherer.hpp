// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Recast
namespace Pathfinding::Recast {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Terrain
  class Terrain;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Forward declaring namespace: Pathfinding::Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: RasterizationMesh
  class RasterizationMesh;
}
// Completed forward declares
// Type namespace: Pathfinding.Recast
namespace Pathfinding::Recast {
  // Forward declaring type: RecastMeshGatherer
  class RecastMeshGatherer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Recast::RecastMeshGatherer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Recast::RecastMeshGatherer*, "Pathfinding.Recast", "RecastMeshGatherer");
// Type namespace: Pathfinding.Recast
namespace Pathfinding::Recast {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Recast.RecastMeshGatherer
  // [TokenAttribute] Offset: FFFFFFFF
  class RecastMeshGatherer : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Recast::RecastMeshGatherer::CapsuleCache
    class CapsuleCache;
    public:
    // private readonly System.Int32 terrainSampleSize
    // Size: 0x4
    // Offset: 0x10
    int terrainSampleSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private readonly System.Collections.Generic.List`1<System.String> tagMask
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* tagMask;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.Single colliderRasterizeDetail
    // Size: 0x4
    // Offset: 0x20
    float colliderRasterizeDetail;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly UnityEngine.Bounds bounds
    // Size: 0x18
    // Offset: 0x24
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // Padding between fields: bounds and: capsuleCache
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<Pathfinding.Recast.RecastMeshGatherer/CapsuleCache> capsuleCache
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Pathfinding::Recast::RecastMeshGatherer::CapsuleCache*>* capsuleCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::Recast::RecastMeshGatherer::CapsuleCache*>*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32[] BoxColliderTris
    static ::ArrayW<int> _get_BoxColliderTris();
    // Set static field: static private readonly System.Int32[] BoxColliderTris
    static void _set_BoxColliderTris(::ArrayW<int> value);
    // Get static field: static private readonly UnityEngine.Vector3[] BoxColliderVerts
    static ::ArrayW<::UnityEngine::Vector3> _get_BoxColliderVerts();
    // Set static field: static private readonly UnityEngine.Vector3[] BoxColliderVerts
    static void _set_BoxColliderVerts(::ArrayW<::UnityEngine::Vector3> value);
    // Get instance field reference: private readonly System.Int32 terrainSampleSize
    [[deprecated("Use field access instead!")]] int& dyn_terrainSampleSize();
    // Get instance field reference: private readonly UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> tagMask
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_tagMask();
    // Get instance field reference: private readonly System.Single colliderRasterizeDetail
    [[deprecated("Use field access instead!")]] float& dyn_colliderRasterizeDetail();
    // Get instance field reference: private readonly UnityEngine.Bounds bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bounds();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.Recast.RecastMeshGatherer/CapsuleCache> capsuleCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Recast::RecastMeshGatherer::CapsuleCache*>*& dyn_capsuleCache();
    // public System.Void .ctor(UnityEngine.Bounds bounds, System.Int32 terrainSampleSize, UnityEngine.LayerMask mask, System.Collections.Generic.List`1<System.String> tagMask, System.Single colliderRasterizeDetail)
    // Offset: 0x2A1B110
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecastMeshGatherer* New_ctor(::UnityEngine::Bounds bounds, int terrainSampleSize, ::UnityEngine::LayerMask mask, ::System::Collections::Generic::List_1<::StringW>* tagMask, float colliderRasterizeDetail) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Recast::RecastMeshGatherer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecastMeshGatherer*, creationType>(bounds, terrainSampleSize, mask, tagMask, colliderRasterizeDetail)));
    }
    // static private System.Collections.Generic.List`1<UnityEngine.MeshFilter> FilterMeshes(UnityEngine.MeshFilter[] meshFilters, System.Collections.Generic.List`1<System.String> tagMask, UnityEngine.LayerMask layerMask)
    // Offset: 0x2A1B264
    static ::System::Collections::Generic::List_1<::UnityEngine::MeshFilter*>* FilterMeshes(::ArrayW<::UnityEngine::MeshFilter*> meshFilters, ::System::Collections::Generic::List_1<::StringW>* tagMask, ::UnityEngine::LayerMask layerMask);
    // public System.Void CollectSceneMeshes(System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> meshes)
    // Offset: 0x2A1B52C
    void CollectSceneMeshes(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* meshes);
    // public System.Void CollectRecastMeshObjs(System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> buffer)
    // Offset: 0x2A1BAE0
    void CollectRecastMeshObjs(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* buffer);
    // public System.Void CollectTerrainMeshes(System.Boolean rasterizeTrees, System.Single desiredChunkSize, System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> result)
    // Offset: 0x2A1C2FC
    void CollectTerrainMeshes(bool rasterizeTrees, float desiredChunkSize, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* result);
    // private System.Void GenerateTerrainChunks(UnityEngine.Terrain terrain, UnityEngine.Bounds bounds, System.Single desiredChunkSize, System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> result)
    // Offset: 0x2A1C44C
    void GenerateTerrainChunks(::UnityEngine::Terrain* terrain, ::UnityEngine::Bounds bounds, float desiredChunkSize, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* result);
    // static private System.Int32 CeilDivision(System.Int32 lhs, System.Int32 rhs)
    // Offset: 0x2A1D2E8
    static int CeilDivision(int lhs, int rhs);
    // private Pathfinding.Voxels.RasterizationMesh GenerateHeightmapChunk(System.Single[,] heights, UnityEngine.Vector3 sampleSize, UnityEngine.Vector3 offset, System.Int32 x0, System.Int32 z0, System.Int32 width, System.Int32 depth, System.Int32 stride)
    // Offset: 0x2A1CE90
    ::Pathfinding::Voxels::RasterizationMesh* GenerateHeightmapChunk(::ArrayW<float> heights, ::UnityEngine::Vector3 sampleSize, ::UnityEngine::Vector3 offset, int x0, int z0, int width, int depth, int stride);
    // private System.Void CollectTreeMeshes(UnityEngine.Terrain terrain, System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> result)
    // Offset: 0x2A1C988
    void CollectTreeMeshes(::UnityEngine::Terrain* terrain, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* result);
    // public System.Void CollectColliderMeshes(System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> result)
    // Offset: 0x2A1D8B4
    void CollectColliderMeshes(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* result);
    // private Pathfinding.Voxels.RasterizationMesh RasterizeCollider(UnityEngine.Collider col)
    // Offset: 0x2A1C294
    ::Pathfinding::Voxels::RasterizationMesh* RasterizeCollider(::UnityEngine::Collider* col);
    // private Pathfinding.Voxels.RasterizationMesh RasterizeCollider(UnityEngine.Collider col, UnityEngine.Matrix4x4 localToWorldMatrix)
    // Offset: 0x2A1D2F8
    ::Pathfinding::Voxels::RasterizationMesh* RasterizeCollider(::UnityEngine::Collider* col, ::UnityEngine::Matrix4x4 localToWorldMatrix);
    // private Pathfinding.Voxels.RasterizationMesh RasterizeBoxCollider(UnityEngine.BoxCollider collider, UnityEngine.Matrix4x4 localToWorldMatrix)
    // Offset: 0x2A1DC98
    ::Pathfinding::Voxels::RasterizationMesh* RasterizeBoxCollider(::UnityEngine::BoxCollider* collider, ::UnityEngine::Matrix4x4 localToWorldMatrix);
    // private Pathfinding.Voxels.RasterizationMesh RasterizeCapsuleCollider(System.Single radius, System.Single height, UnityEngine.Bounds bounds, UnityEngine.Matrix4x4 localToWorldMatrix)
    // Offset: 0x2A1DE94
    ::Pathfinding::Voxels::RasterizationMesh* RasterizeCapsuleCollider(float radius, float height, ::UnityEngine::Bounds bounds, ::UnityEngine::Matrix4x4 localToWorldMatrix);
    // static private System.Void .cctor()
    // Offset: 0x2A1EA2C
    static void _cctor();
  }; // Pathfinding.Recast.RecastMeshGatherer
  #pragma pack(pop)
  static check_size<sizeof(RecastMeshGatherer), 64 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::Recast::RecastMeshGatherer::CapsuleCache*>*)> __Pathfinding_Recast_RecastMeshGathererSizeCheck;
  static_assert(sizeof(RecastMeshGatherer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::FilterMeshes
// Il2CppName: FilterMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::MeshFilter*>* (*)(::ArrayW<::UnityEngine::MeshFilter*>, ::System::Collections::Generic::List_1<::StringW>*, ::UnityEngine::LayerMask)>(&Pathfinding::Recast::RecastMeshGatherer::FilterMeshes)> {
  static const MethodInfo* get() {
    static auto* meshFilters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter"), 1)->byval_arg;
    static auto* tagMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "FilterMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshFilters, tagMask, layerMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CollectSceneMeshes
// Il2CppName: CollectSceneMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::CollectSceneMeshes)> {
  static const MethodInfo* get() {
    static auto* meshes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CollectSceneMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CollectRecastMeshObjs
// Il2CppName: CollectRecastMeshObjs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::CollectRecastMeshObjs)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CollectRecastMeshObjs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CollectTerrainMeshes
// Il2CppName: CollectTerrainMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(bool, float, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::CollectTerrainMeshes)> {
  static const MethodInfo* get() {
    static auto* rasterizeTrees = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* desiredChunkSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CollectTerrainMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rasterizeTrees, desiredChunkSize, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::GenerateTerrainChunks
// Il2CppName: GenerateTerrainChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(::UnityEngine::Terrain*, ::UnityEngine::Bounds, float, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::GenerateTerrainChunks)> {
  static const MethodInfo* get() {
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* desiredChunkSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "GenerateTerrainChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terrain, bounds, desiredChunkSize, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CeilDivision
// Il2CppName: CeilDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Pathfinding::Recast::RecastMeshGatherer::CeilDivision)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CeilDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::GenerateHeightmapChunk
// Il2CppName: GenerateHeightmapChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Voxels::RasterizationMesh* (Pathfinding::Recast::RecastMeshGatherer::*)(::ArrayW<float>, ::UnityEngine::Vector3, ::UnityEngine::Vector3, int, int, int, int, int)>(&Pathfinding::Recast::RecastMeshGatherer::GenerateHeightmapChunk)> {
  static const MethodInfo* get() {
    static auto* heights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* sampleSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "GenerateHeightmapChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{heights, sampleSize, offset, x0, z0, width, depth, stride});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CollectTreeMeshes
// Il2CppName: CollectTreeMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(::UnityEngine::Terrain*, ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::CollectTreeMeshes)> {
  static const MethodInfo* get() {
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CollectTreeMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terrain, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::CollectColliderMeshes
// Il2CppName: CollectColliderMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Recast::RecastMeshGatherer::*)(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::Recast::RecastMeshGatherer::CollectColliderMeshes)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "CollectColliderMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::RasterizeCollider
// Il2CppName: RasterizeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Voxels::RasterizationMesh* (Pathfinding::Recast::RecastMeshGatherer::*)(::UnityEngine::Collider*)>(&Pathfinding::Recast::RecastMeshGatherer::RasterizeCollider)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "RasterizeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::RasterizeCollider
// Il2CppName: RasterizeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Voxels::RasterizationMesh* (Pathfinding::Recast::RecastMeshGatherer::*)(::UnityEngine::Collider*, ::UnityEngine::Matrix4x4)>(&Pathfinding::Recast::RecastMeshGatherer::RasterizeCollider)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* localToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "RasterizeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, localToWorldMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::RasterizeBoxCollider
// Il2CppName: RasterizeBoxCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Voxels::RasterizationMesh* (Pathfinding::Recast::RecastMeshGatherer::*)(::UnityEngine::BoxCollider*, ::UnityEngine::Matrix4x4)>(&Pathfinding::Recast::RecastMeshGatherer::RasterizeBoxCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoxCollider")->byval_arg;
    static auto* localToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "RasterizeBoxCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider, localToWorldMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::RasterizeCapsuleCollider
// Il2CppName: RasterizeCapsuleCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Voxels::RasterizationMesh* (Pathfinding::Recast::RecastMeshGatherer::*)(float, float, ::UnityEngine::Bounds, ::UnityEngine::Matrix4x4)>(&Pathfinding::Recast::RecastMeshGatherer::RasterizeCapsuleCollider)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* localToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), "RasterizeCapsuleCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius, height, bounds, localToWorldMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::Recast::RecastMeshGatherer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Recast::RecastMeshGatherer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Recast::RecastMeshGatherer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
