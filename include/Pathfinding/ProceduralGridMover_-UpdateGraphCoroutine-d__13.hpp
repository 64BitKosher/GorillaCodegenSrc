// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ProceduralGridMover
#include "Pathfinding/ProceduralGridMover.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: Pathfinding.Int2
#include "Pathfinding/Int2.hpp"
// Including type: Pathfinding.IntRect
#include "Pathfinding/IntRect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridNodeBase
  class GridNodeBase;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*, "Pathfinding", "ProceduralGridMover/<UpdateGraphCoroutine>d__13");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ProceduralGridMover/<UpdateGraphCoroutine>d__13
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class ProceduralGridMover::$UpdateGraphCoroutine$d__13 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public Pathfinding.ProceduralGridMover <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::ProceduralGridMover* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::ProceduralGridMover*) == 0x8);
    // private Pathfinding.Int2 <offset>5__2
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Int2 $offset$5__2;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int2) == 0x8);
    // private System.Int32 <width>5__3
    // Size: 0x4
    // Offset: 0x30
    int $width$5__3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <depth>5__4
    // Size: 0x4
    // Offset: 0x34
    int $depth$5__4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.GridNodeBase[] <nodes>5__5
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Pathfinding::GridNodeBase*> $nodes$5__5;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GridNodeBase*>) == 0x8);
    // private System.Int32 <layers>5__6
    // Size: 0x4
    // Offset: 0x40
    int $layers$5__6;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.IntRect <recalculateRect>5__7
    // Size: 0x10
    // Offset: 0x44
    ::Pathfinding::IntRect $recalculateRect$5__7;
    // Field size check
    static_assert(sizeof(::Pathfinding::IntRect) == 0x10);
    // private Pathfinding.IntRect <connectionRect>5__8
    // Size: 0x10
    // Offset: 0x54
    ::Pathfinding::IntRect $connectionRect$5__8;
    // Field size check
    static_assert(sizeof(::Pathfinding::IntRect) == 0x10);
    // private System.Int32 <yieldEvery>5__9
    // Size: 0x4
    // Offset: 0x64
    int $yieldEvery$5__9;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <counter>5__10
    // Size: 0x4
    // Offset: 0x68
    int $counter$5__10;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <l>5__11
    // Size: 0x4
    // Offset: 0x6C
    int $l$5__11;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <layerOffset>5__12
    // Size: 0x4
    // Offset: 0x70
    int $layerOffset$5__12;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public Pathfinding.ProceduralGridMover <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::ProceduralGridMover*& dyn_$$4__this();
    // Get instance field reference: private Pathfinding.Int2 <offset>5__2
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int2& dyn_$offset$5__2();
    // Get instance field reference: private System.Int32 <width>5__3
    [[deprecated("Use field access instead!")]] int& dyn_$width$5__3();
    // Get instance field reference: private System.Int32 <depth>5__4
    [[deprecated("Use field access instead!")]] int& dyn_$depth$5__4();
    // Get instance field reference: private Pathfinding.GridNodeBase[] <nodes>5__5
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GridNodeBase*>& dyn_$nodes$5__5();
    // Get instance field reference: private System.Int32 <layers>5__6
    [[deprecated("Use field access instead!")]] int& dyn_$layers$5__6();
    // Get instance field reference: private Pathfinding.IntRect <recalculateRect>5__7
    [[deprecated("Use field access instead!")]] ::Pathfinding::IntRect& dyn_$recalculateRect$5__7();
    // Get instance field reference: private Pathfinding.IntRect <connectionRect>5__8
    [[deprecated("Use field access instead!")]] ::Pathfinding::IntRect& dyn_$connectionRect$5__8();
    // Get instance field reference: private System.Int32 <yieldEvery>5__9
    [[deprecated("Use field access instead!")]] int& dyn_$yieldEvery$5__9();
    // Get instance field reference: private System.Int32 <counter>5__10
    [[deprecated("Use field access instead!")]] int& dyn_$counter$5__10();
    // Get instance field reference: private System.Int32 <l>5__11
    [[deprecated("Use field access instead!")]] int& dyn_$l$5__11();
    // Get instance field reference: private System.Int32 <layerOffset>5__12
    [[deprecated("Use field access instead!")]] int& dyn_$layerOffset$5__12();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2A0C094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralGridMover::$UpdateGraphCoroutine$d__13* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralGridMover::$UpdateGraphCoroutine$d__13*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A0C29C
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2A0C2A0
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x2A0D030
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x2A0D038
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2A0D070
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // Pathfinding.ProceduralGridMover/<UpdateGraphCoroutine>d__13
  #pragma pack(pop)
  static check_size<sizeof(ProceduralGridMover::$UpdateGraphCoroutine$d__13), 112 + sizeof(int)> __Pathfinding_ProceduralGridMover_$UpdateGraphCoroutine$d__13SizeCheck;
  static_assert(sizeof(ProceduralGridMover::$UpdateGraphCoroutine$d__13) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::*)()>(&Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::*)()>(&Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::*)()>(&Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::*)()>(&Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::*)()>(&Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
