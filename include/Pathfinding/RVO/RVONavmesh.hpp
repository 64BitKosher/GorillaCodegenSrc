// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphModifier
#include "Pathfinding/GraphModifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: ObstacleVertex
  class ObstacleVertex;
  // Forward declaring type: Simulator
  class Simulator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridGraph
  class GridGraph;
  // Forward declaring type: INavmesh
  class INavmesh;
}
// Completed forward declares
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Forward declaring type: RVONavmesh
  class RVONavmesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::RVONavmesh);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::RVONavmesh*, "Pathfinding.RVO", "RVONavmesh");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.RVONavmesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class RVONavmesh : public ::Pathfinding::GraphModifier {
    public:
    // Nested type: ::Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0
    class $$c__DisplayClass8_0;
    // Nested type: ::Pathfinding::RVO::RVONavmesh::$$c__DisplayClass9_0
    class $$c__DisplayClass9_0;
    public:
    // public System.Single wallHeight
    // Size: 0x4
    // Offset: 0x40
    float wallHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: wallHeight and: obstacles
    char __padding0[0x4] = {};
    // private readonly System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstacles
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>* obstacles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*) == 0x8);
    // private Pathfinding.RVO.Simulator lastSim
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::RVO::Simulator* lastSim;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator*) == 0x8);
    public:
    // Get instance field reference: public System.Single wallHeight
    [[deprecated("Use field access instead!")]] float& dyn_wallHeight();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstacles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*& dyn_obstacles();
    // Get instance field reference: private Pathfinding.RVO.Simulator lastSim
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator*& dyn_lastSim();
    // public System.Void RemoveObstacles()
    // Offset: 0x2A3B0F0
    void RemoveObstacles();
    // private System.Void AddGraphObstacles(Pathfinding.RVO.Simulator sim, Pathfinding.GridGraph grid)
    // Offset: 0x2A3B2D4
    void AddGraphObstacles(::Pathfinding::RVO::Simulator* sim, ::Pathfinding::GridGraph* grid);
    // private System.Void AddGraphObstacles(Pathfinding.RVO.Simulator simulator, Pathfinding.INavmesh navmesh)
    // Offset: 0x2A3B1F0
    void AddGraphObstacles(::Pathfinding::RVO::Simulator* simulator, ::Pathfinding::INavmesh* navmesh);
    // public override System.Void OnPostCacheLoad()
    // Offset: 0x2A3ADB4
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnPostCacheLoad()
    void OnPostCacheLoad();
    // public override System.Void OnGraphsPostUpdate()
    // Offset: 0x2A3ADC4
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnGraphsPostUpdate()
    void OnGraphsPostUpdate();
    // public override System.Void OnLatePostScan()
    // Offset: 0x2A3ADD4
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnLatePostScan()
    void OnLatePostScan();
    // protected override System.Void OnDisable()
    // Offset: 0x2A3B4E4
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x2A3B510
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVONavmesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::RVONavmesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVONavmesh*, creationType>()));
    }
  }; // Pathfinding.RVO.RVONavmesh
  #pragma pack(pop)
  static check_size<sizeof(RVONavmesh), 80 + sizeof(::Pathfinding::RVO::Simulator*)> __Pathfinding_RVO_RVONavmeshSizeCheck;
  static_assert(sizeof(RVONavmesh) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::RemoveObstacles
// Il2CppName: RemoveObstacles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)()>(&Pathfinding::RVO::RVONavmesh::RemoveObstacles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "RemoveObstacles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::AddGraphObstacles
// Il2CppName: AddGraphObstacles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)(::Pathfinding::RVO::Simulator*, ::Pathfinding::GridGraph*)>(&Pathfinding::RVO::RVONavmesh::AddGraphObstacles)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO", "Simulator")->byval_arg;
    static auto* grid = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "AddGraphObstacles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, grid});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::AddGraphObstacles
// Il2CppName: AddGraphObstacles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)(::Pathfinding::RVO::Simulator*, ::Pathfinding::INavmesh*)>(&Pathfinding::RVO::RVONavmesh::AddGraphObstacles)> {
  static const MethodInfo* get() {
    static auto* simulator = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO", "Simulator")->byval_arg;
    static auto* navmesh = &::il2cpp_utils::GetClassFromName("Pathfinding", "INavmesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "AddGraphObstacles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simulator, navmesh});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::OnPostCacheLoad
// Il2CppName: OnPostCacheLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)()>(&Pathfinding::RVO::RVONavmesh::OnPostCacheLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "OnPostCacheLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::OnGraphsPostUpdate
// Il2CppName: OnGraphsPostUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)()>(&Pathfinding::RVO::RVONavmesh::OnGraphsPostUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "OnGraphsPostUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::OnLatePostScan
// Il2CppName: OnLatePostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)()>(&Pathfinding::RVO::RVONavmesh::OnLatePostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "OnLatePostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::*)()>(&Pathfinding::RVO::RVONavmesh::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
