// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.Simulator
#include "Pathfinding/RVO/Simulator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEventSlim
  class ManualResetEventSlim;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::Simulator::Worker);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::Simulator::Worker*, "Pathfinding.RVO", "Simulator/Worker");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.Simulator/Worker
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulator::Worker : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 start
    // Size: 0x4
    // Offset: 0x10
    int start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 end
    // Size: 0x4
    // Offset: 0x14
    int end;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Threading.ManualResetEventSlim runFlag
    // Size: 0x8
    // Offset: 0x18
    ::System::Threading::ManualResetEventSlim* runFlag;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEventSlim*) == 0x8);
    // private readonly System.Threading.ManualResetEventSlim waitFlag
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::ManualResetEventSlim* waitFlag;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEventSlim*) == 0x8);
    // private readonly Pathfinding.RVO.Simulator simulator
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::RVO::Simulator* simulator;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator*) == 0x8);
    // private System.Int32 task
    // Size: 0x4
    // Offset: 0x30
    int task;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean terminate
    // Size: 0x1
    // Offset: 0x34
    bool terminate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: terminate and: context
    char __padding6[0x3] = {};
    // private Pathfinding.RVO.Simulator/WorkerContext context
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::RVO::Simulator::WorkerContext* context;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator::WorkerContext*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 start
    [[deprecated("Use field access instead!")]] int& dyn_start();
    // Get instance field reference: public System.Int32 end
    [[deprecated("Use field access instead!")]] int& dyn_end();
    // Get instance field reference: private readonly System.Threading.ManualResetEventSlim runFlag
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEventSlim*& dyn_runFlag();
    // Get instance field reference: private readonly System.Threading.ManualResetEventSlim waitFlag
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEventSlim*& dyn_waitFlag();
    // Get instance field reference: private readonly Pathfinding.RVO.Simulator simulator
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator*& dyn_simulator();
    // Get instance field reference: private System.Int32 task
    [[deprecated("Use field access instead!")]] int& dyn_task();
    // Get instance field reference: private System.Boolean terminate
    [[deprecated("Use field access instead!")]] bool& dyn_terminate();
    // Get instance field reference: private Pathfinding.RVO.Simulator/WorkerContext context
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator::WorkerContext*& dyn_context();
    // public System.Void .ctor(Pathfinding.RVO.Simulator sim)
    // Offset: 0x2A3535C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulator::Worker* New_ctor(::Pathfinding::RVO::Simulator* sim) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::Simulator::Worker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulator::Worker*, creationType>(sim)));
    }
    // public System.Void Execute(System.Int32 task)
    // Offset: 0x2A37264
    void Execute(int task);
    // public System.Void WaitOne()
    // Offset: 0x2A36CB8
    void WaitOne();
    // public System.Void Terminate()
    // Offset: 0x2A356CC
    void Terminate();
    // public System.Void Run()
    // Offset: 0x2A37970
    void Run();
  }; // Pathfinding.RVO.Simulator/Worker
  #pragma pack(pop)
  static check_size<sizeof(Simulator::Worker), 56 + sizeof(::Pathfinding::RVO::Simulator::WorkerContext*)> __Pathfinding_RVO_Simulator_WorkerSizeCheck;
  static_assert(sizeof(Simulator::Worker) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::Simulator::Worker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RVO::Simulator::Worker::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Simulator::Worker::*)(int)>(&Pathfinding::RVO::Simulator::Worker::Execute)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Simulator::Worker*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Simulator::Worker::WaitOne
// Il2CppName: WaitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Simulator::Worker::*)()>(&Pathfinding::RVO::Simulator::Worker::WaitOne)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Simulator::Worker*), "WaitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Simulator::Worker::Terminate
// Il2CppName: Terminate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Simulator::Worker::*)()>(&Pathfinding::RVO::Simulator::Worker::Terminate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Simulator::Worker*), "Terminate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Simulator::Worker::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Simulator::Worker::*)()>(&Pathfinding::RVO::Simulator::Worker::Run)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Simulator::Worker*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
