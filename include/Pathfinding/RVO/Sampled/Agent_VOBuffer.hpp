// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.Sampled.Agent
#include "Pathfinding/RVO/Sampled/Agent.hpp"
// Including type: Pathfinding.RVO.Sampled.Agent/VO
#include "Pathfinding/RVO/Sampled/Agent_VO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::Sampled::Agent::VOBuffer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::Sampled::Agent::VOBuffer*, "Pathfinding.RVO.Sampled", "Agent/VOBuffer");
// Type namespace: Pathfinding.RVO.Sampled
namespace Pathfinding::RVO::Sampled {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.Sampled.Agent/VOBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class Agent::VOBuffer : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.RVO.Sampled.Agent/VO[] buffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Pathfinding::RVO::Sampled::Agent::VO> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::RVO::Sampled::Agent::VO>) == 0x8);
    // public System.Int32 length
    // Size: 0x4
    // Offset: 0x18
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public Pathfinding.RVO.Sampled.Agent/VO[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::RVO::Sampled::Agent::VO>& dyn_buffer();
    // Get instance field reference: public System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
    // public System.Void Clear()
    // Offset: 0x2A3D954
    void Clear();
    // public System.Void .ctor(System.Int32 n)
    // Offset: 0x2A378F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Agent::VOBuffer* New_ctor(int n) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::Sampled::Agent::VOBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Agent::VOBuffer*, creationType>(n)));
    }
    // public System.Void Add(Pathfinding.RVO.Sampled.Agent/VO vo)
    // Offset: 0x2A3E7E0
    void Add(::Pathfinding::RVO::Sampled::Agent::VO vo);
  }; // Pathfinding.RVO.Sampled.Agent/VOBuffer
  #pragma pack(pop)
  static check_size<sizeof(Agent::VOBuffer), 24 + sizeof(int)> __Pathfinding_RVO_Sampled_Agent_VOBufferSizeCheck;
  static_assert(sizeof(Agent::VOBuffer) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VOBuffer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::VOBuffer::*)()>(&Pathfinding::RVO::Sampled::Agent::VOBuffer::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VOBuffer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VOBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VOBuffer::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::VOBuffer::*)(::Pathfinding::RVO::Sampled::Agent::VO)>(&Pathfinding::RVO::Sampled::Agent::VOBuffer::Add)> {
  static const MethodInfo* get() {
    static auto* vo = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VOBuffer*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vo});
  }
};
