// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.Sampled.Agent
#include "Pathfinding/RVO/Sampled/Agent.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::Sampled::Agent::VO, "Pathfinding.RVO.Sampled", "Agent/VO");
// Type namespace: Pathfinding.RVO.Sampled
namespace Pathfinding::RVO::Sampled {
  // Size: 0x59
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.RVO.Sampled.Agent/VO
  // [TokenAttribute] Offset: FFFFFFFF
  struct Agent::VO/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector2 line1
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 line1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 line2
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2 line2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 dir1
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Vector2 dir1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 dir2
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Vector2 dir2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 cutoffLine
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Vector2 cutoffLine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 cutoffDir
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Vector2 cutoffDir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 circleCenter
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 circleCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean colliding
    // Size: 0x1
    // Offset: 0x38
    bool colliding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: colliding and: radius
    char __padding7[0x3] = {};
    // private System.Single radius
    // Size: 0x4
    // Offset: 0x3C
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single weightFactor
    // Size: 0x4
    // Offset: 0x40
    float weightFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single weightBonus
    // Size: 0x4
    // Offset: 0x44
    float weightBonus;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 segmentStart
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Vector2 segmentStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 segmentEnd
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2 segmentEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean segment
    // Size: 0x1
    // Offset: 0x58
    bool segment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: VO
    constexpr VO(::UnityEngine::Vector2 line1_ = {}, ::UnityEngine::Vector2 line2_ = {}, ::UnityEngine::Vector2 dir1_ = {}, ::UnityEngine::Vector2 dir2_ = {}, ::UnityEngine::Vector2 cutoffLine_ = {}, ::UnityEngine::Vector2 cutoffDir_ = {}, ::UnityEngine::Vector2 circleCenter_ = {}, bool colliding_ = {}, float radius_ = {}, float weightFactor_ = {}, float weightBonus_ = {}, ::UnityEngine::Vector2 segmentStart_ = {}, ::UnityEngine::Vector2 segmentEnd_ = {}, bool segment_ = {}) noexcept : line1{line1_}, line2{line2_}, dir1{dir1_}, dir2{dir2_}, cutoffLine{cutoffLine_}, cutoffDir{cutoffDir_}, circleCenter{circleCenter_}, colliding{colliding_}, radius{radius_}, weightFactor{weightFactor_}, weightBonus{weightBonus_}, segmentStart{segmentStart_}, segmentEnd{segmentEnd_}, segment{segment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector2 line1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_line1();
    // Get instance field reference: private UnityEngine.Vector2 line2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_line2();
    // Get instance field reference: private UnityEngine.Vector2 dir1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_dir1();
    // Get instance field reference: private UnityEngine.Vector2 dir2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_dir2();
    // Get instance field reference: private UnityEngine.Vector2 cutoffLine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_cutoffLine();
    // Get instance field reference: private UnityEngine.Vector2 cutoffDir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_cutoffDir();
    // Get instance field reference: private UnityEngine.Vector2 circleCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_circleCenter();
    // Get instance field reference: private System.Boolean colliding
    [[deprecated("Use field access instead!")]] bool& dyn_colliding();
    // Get instance field reference: private System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: private System.Single weightFactor
    [[deprecated("Use field access instead!")]] float& dyn_weightFactor();
    // Get instance field reference: private System.Single weightBonus
    [[deprecated("Use field access instead!")]] float& dyn_weightBonus();
    // Get instance field reference: private UnityEngine.Vector2 segmentStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_segmentStart();
    // Get instance field reference: private UnityEngine.Vector2 segmentEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_segmentEnd();
    // Get instance field reference: private System.Boolean segment
    [[deprecated("Use field access instead!")]] bool& dyn_segment();
    // public System.Void .ctor(UnityEngine.Vector2 center, UnityEngine.Vector2 offset, System.Single radius, System.Single inverseDt, System.Single inverseDeltaTime)
    // Offset: 0x2A3E8EC
    VO(::UnityEngine::Vector2 center, ::UnityEngine::Vector2 offset, float radius, float inverseDt, float inverseDeltaTime);
    // static public Pathfinding.RVO.Sampled.Agent/VO SegmentObstacle(UnityEngine.Vector2 segmentStart, UnityEngine.Vector2 segmentEnd, UnityEngine.Vector2 offset, System.Single radius, System.Single inverseDt, System.Single inverseDeltaTime)
    // Offset: 0x2A3E29C
    static ::Pathfinding::RVO::Sampled::Agent::VO SegmentObstacle(::UnityEngine::Vector2 segmentStart, ::UnityEngine::Vector2 segmentEnd, ::UnityEngine::Vector2 offset, float radius, float inverseDt, float inverseDeltaTime);
    // static public System.Single SignedDistanceFromLine(UnityEngine.Vector2 a, UnityEngine.Vector2 dir, UnityEngine.Vector2 p)
    // Offset: 0x2A3E284
    static float SignedDistanceFromLine(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 dir, ::UnityEngine::Vector2 p);
    // public UnityEngine.Vector2 ScaledGradient(UnityEngine.Vector2 p, out System.Single weight)
    // Offset: 0x2A3F568
    ::UnityEngine::Vector2 ScaledGradient(::UnityEngine::Vector2 p, ByRef<float> weight);
    // public UnityEngine.Vector2 Gradient(UnityEngine.Vector2 p, out System.Single weight)
    // Offset: 0x2A3F118
    ::UnityEngine::Vector2 Gradient(::UnityEngine::Vector2 p, ByRef<float> weight);
  }; // Pathfinding.RVO.Sampled.Agent/VO
  #pragma pack(pop)
  static check_size<sizeof(Agent::VO), 88 + sizeof(bool)> __Pathfinding_RVO_Sampled_Agent_VOSizeCheck;
  static_assert(sizeof(Agent::VO) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VO::VO
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VO::SegmentObstacle
// Il2CppName: SegmentObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RVO::Sampled::Agent::VO (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float, float)>(&Pathfinding::RVO::Sampled::Agent::VO::SegmentObstacle)> {
  static const MethodInfo* get() {
    static auto* segmentStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* segmentEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* inverseDt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* inverseDeltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VO), "SegmentObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{segmentStart, segmentEnd, offset, radius, inverseDt, inverseDeltaTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VO::SignedDistanceFromLine
// Il2CppName: SignedDistanceFromLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::VO::SignedDistanceFromLine)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VO), "SignedDistanceFromLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, dir, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VO::ScaledGradient
// Il2CppName: ScaledGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::VO::*)(::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::RVO::Sampled::Agent::VO::ScaledGradient)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VO), "ScaledGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, weight});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::VO::Gradient
// Il2CppName: Gradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::VO::*)(::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::RVO::Sampled::Agent::VO::Gradient)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent::VO), "Gradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, weight});
  }
};
