// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.IAgent
#include "Pathfinding/RVO/IAgent.hpp"
// Including type: Pathfinding.RVO.RVOLayer
#include "Pathfinding/RVO/RVOLayer.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.RVO.Simulator
#include "Pathfinding/RVO/Simulator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::RVO::Sampled
namespace Pathfinding::RVO::Sampled {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: ObstacleVertex
  class ObstacleVertex;
}
// Completed forward declares
// Type namespace: Pathfinding.RVO.Sampled
namespace Pathfinding::RVO::Sampled {
  // Forward declaring type: Agent
  class Agent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::Sampled::Agent);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::Sampled::Agent*, "Pathfinding.RVO.Sampled", "Agent");
// Type namespace: Pathfinding.RVO.Sampled
namespace Pathfinding::RVO::Sampled {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.Sampled.Agent
  // [TokenAttribute] Offset: FFFFFFFF
  class Agent : public ::Il2CppObject/*, public ::Pathfinding::RVO::IAgent*/ {
    public:
    // Nested type: ::Pathfinding::RVO::Sampled::Agent::VO
    struct VO;
    // Nested type: ::Pathfinding::RVO::Sampled::Agent::VOBuffer
    class VOBuffer;
    public:
    // System.Single radius
    // Size: 0x4
    // Offset: 0x10
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single height
    // Size: 0x4
    // Offset: 0x14
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single desiredSpeed
    // Size: 0x4
    // Offset: 0x18
    float desiredSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x1C
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single agentTimeHorizon
    // Size: 0x4
    // Offset: 0x20
    float agentTimeHorizon;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single obstacleTimeHorizon
    // Size: 0x4
    // Offset: 0x24
    float obstacleTimeHorizon;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean locked
    // Size: 0x1
    // Offset: 0x28
    bool locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: locked and: layer
    char __padding6[0x3] = {};
    // private Pathfinding.RVO.RVOLayer layer
    // Size: 0x4
    // Offset: 0x2C
    ::Pathfinding::RVO::RVOLayer layer;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOLayer) == 0x4);
    // private Pathfinding.RVO.RVOLayer collidesWith
    // Size: 0x4
    // Offset: 0x30
    ::Pathfinding::RVO::RVOLayer collidesWith;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOLayer) == 0x4);
    // private System.Int32 maxNeighbours
    // Size: 0x4
    // Offset: 0x34
    int maxNeighbours;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Vector2 position
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single elevationCoordinate
    // Size: 0x4
    // Offset: 0x40
    float elevationCoordinate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 currentVelocity
    // Size: 0x8
    // Offset: 0x44
    ::UnityEngine::Vector2 currentVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 desiredTargetPointInVelocitySpace
    // Size: 0x8
    // Offset: 0x4C
    ::UnityEngine::Vector2 desiredTargetPointInVelocitySpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 desiredVelocity
    // Size: 0x8
    // Offset: 0x54
    ::UnityEngine::Vector2 desiredVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 nextTargetPoint
    // Size: 0x8
    // Offset: 0x5C
    ::UnityEngine::Vector2 nextTargetPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single nextDesiredSpeed
    // Size: 0x4
    // Offset: 0x64
    float nextDesiredSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single nextMaxSpeed
    // Size: 0x4
    // Offset: 0x68
    float nextMaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 collisionNormal
    // Size: 0x8
    // Offset: 0x6C
    ::UnityEngine::Vector2 collisionNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean manuallyControlled
    // Size: 0x1
    // Offset: 0x74
    bool manuallyControlled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean debugDraw
    // Size: 0x1
    // Offset: 0x75
    bool debugDraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugDraw and: Position
    char __padding20[0x2] = {};
    // private UnityEngine.Vector2 <Position>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Vector2 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single <ElevationCoordinate>k__BackingField
    // Size: 0x4
    // Offset: 0x80
    float ElevationCoordinate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 <CalculatedTargetPoint>k__BackingField
    // Size: 0x8
    // Offset: 0x84
    ::UnityEngine::Vector2 CalculatedTargetPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single <CalculatedSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    float CalculatedSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <Locked>k__BackingField
    // Size: 0x1
    // Offset: 0x90
    bool Locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Locked and: Radius
    char __padding25[0x3] = {};
    // private System.Single <Radius>k__BackingField
    // Size: 0x4
    // Offset: 0x94
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <Height>k__BackingField
    // Size: 0x4
    // Offset: 0x98
    float Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <AgentTimeHorizon>k__BackingField
    // Size: 0x4
    // Offset: 0x9C
    float AgentTimeHorizon;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <ObstacleTimeHorizon>k__BackingField
    // Size: 0x4
    // Offset: 0xA0
    float ObstacleTimeHorizon;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <MaxNeighbours>k__BackingField
    // Size: 0x4
    // Offset: 0xA4
    int MaxNeighbours;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NeighbourCount>k__BackingField
    // Size: 0x4
    // Offset: 0xA8
    int NeighbourCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.RVO.RVOLayer <Layer>k__BackingField
    // Size: 0x4
    // Offset: 0xAC
    ::Pathfinding::RVO::RVOLayer Layer;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOLayer) == 0x4);
    // private Pathfinding.RVO.RVOLayer <CollidesWith>k__BackingField
    // Size: 0x4
    // Offset: 0xB0
    ::Pathfinding::RVO::RVOLayer CollidesWith;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOLayer) == 0x4);
    // private System.Single <Priority>k__BackingField
    // Size: 0x4
    // Offset: 0xB4
    float Priority;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Action <PreCalculationCallback>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action* PreCalculationCallback;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // Pathfinding.RVO.Sampled.Agent next
    // Size: 0x8
    // Offset: 0xC0
    ::Pathfinding::RVO::Sampled::Agent* next;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Sampled::Agent*) == 0x8);
    // private System.Single calculatedSpeed
    // Size: 0x4
    // Offset: 0xC8
    float calculatedSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 calculatedTargetPoint
    // Size: 0x8
    // Offset: 0xCC
    ::UnityEngine::Vector2 calculatedTargetPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: calculatedTargetPoint and: simulator
    char __padding38[0x4] = {};
    // Pathfinding.RVO.Simulator simulator
    // Size: 0x8
    // Offset: 0xD8
    ::Pathfinding::RVO::Simulator* simulator;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.RVO.Sampled.Agent> neighbours
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::Pathfinding::RVO::Sampled::Agent*>* neighbours;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::RVO::Sampled::Agent*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Single> neighbourDists
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<float>* neighbourDists;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstaclesBuffered
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>* obstaclesBuffered;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstacles
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>* obstacles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::RVO::IAgent
    operator ::Pathfinding::RVO::IAgent() noexcept {
      return *reinterpret_cast<::Pathfinding::RVO::IAgent*>(this);
    }
    // static field const value: static private System.Single DesiredVelocityWeight
    static constexpr const float DesiredVelocityWeight = 0.1;
    // Get static field: static private System.Single DesiredVelocityWeight
    static float _get_DesiredVelocityWeight();
    // Set static field: static private System.Single DesiredVelocityWeight
    static void _set_DesiredVelocityWeight(float value);
    // static field const value: static private System.Single WallWeight
    static constexpr const float WallWeight = 5;
    // Get static field: static private System.Single WallWeight
    static float _get_WallWeight();
    // Set static field: static private System.Single WallWeight
    static void _set_WallWeight(float value);
    // Get instance field reference: System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: System.Single desiredSpeed
    [[deprecated("Use field access instead!")]] float& dyn_desiredSpeed();
    // Get instance field reference: System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: System.Single agentTimeHorizon
    [[deprecated("Use field access instead!")]] float& dyn_agentTimeHorizon();
    // Get instance field reference: System.Single obstacleTimeHorizon
    [[deprecated("Use field access instead!")]] float& dyn_obstacleTimeHorizon();
    // Get instance field reference: System.Boolean locked
    [[deprecated("Use field access instead!")]] bool& dyn_locked();
    // Get instance field reference: private Pathfinding.RVO.RVOLayer layer
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOLayer& dyn_layer();
    // Get instance field reference: private Pathfinding.RVO.RVOLayer collidesWith
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOLayer& dyn_collidesWith();
    // Get instance field reference: private System.Int32 maxNeighbours
    [[deprecated("Use field access instead!")]] int& dyn_maxNeighbours();
    // Get instance field reference: UnityEngine.Vector2 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_position();
    // Get instance field reference: private System.Single elevationCoordinate
    [[deprecated("Use field access instead!")]] float& dyn_elevationCoordinate();
    // Get instance field reference: private UnityEngine.Vector2 currentVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_currentVelocity();
    // Get instance field reference: private UnityEngine.Vector2 desiredTargetPointInVelocitySpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_desiredTargetPointInVelocitySpace();
    // Get instance field reference: private UnityEngine.Vector2 desiredVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_desiredVelocity();
    // Get instance field reference: private UnityEngine.Vector2 nextTargetPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_nextTargetPoint();
    // Get instance field reference: private System.Single nextDesiredSpeed
    [[deprecated("Use field access instead!")]] float& dyn_nextDesiredSpeed();
    // Get instance field reference: private System.Single nextMaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_nextMaxSpeed();
    // Get instance field reference: private UnityEngine.Vector2 collisionNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_collisionNormal();
    // Get instance field reference: private System.Boolean manuallyControlled
    [[deprecated("Use field access instead!")]] bool& dyn_manuallyControlled();
    // Get instance field reference: private System.Boolean debugDraw
    [[deprecated("Use field access instead!")]] bool& dyn_debugDraw();
    // Get instance field reference: private UnityEngine.Vector2 <Position>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$Position$k__BackingField();
    // Get instance field reference: private System.Single <ElevationCoordinate>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$ElevationCoordinate$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <CalculatedTargetPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$CalculatedTargetPoint$k__BackingField();
    // Get instance field reference: private System.Single <CalculatedSpeed>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$CalculatedSpeed$k__BackingField();
    // Get instance field reference: private System.Boolean <Locked>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Locked$k__BackingField();
    // Get instance field reference: private System.Single <Radius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Radius$k__BackingField();
    // Get instance field reference: private System.Single <Height>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Height$k__BackingField();
    // Get instance field reference: private System.Single <AgentTimeHorizon>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$AgentTimeHorizon$k__BackingField();
    // Get instance field reference: private System.Single <ObstacleTimeHorizon>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$ObstacleTimeHorizon$k__BackingField();
    // Get instance field reference: private System.Int32 <MaxNeighbours>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxNeighbours$k__BackingField();
    // Get instance field reference: private System.Int32 <NeighbourCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NeighbourCount$k__BackingField();
    // Get instance field reference: private Pathfinding.RVO.RVOLayer <Layer>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOLayer& dyn_$Layer$k__BackingField();
    // Get instance field reference: private Pathfinding.RVO.RVOLayer <CollidesWith>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOLayer& dyn_$CollidesWith$k__BackingField();
    // Get instance field reference: private System.Single <Priority>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Priority$k__BackingField();
    // Get instance field reference: private System.Action <PreCalculationCallback>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$PreCalculationCallback$k__BackingField();
    // Get instance field reference: Pathfinding.RVO.Sampled.Agent next
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Sampled::Agent*& dyn_next();
    // Get instance field reference: private System.Single calculatedSpeed
    [[deprecated("Use field access instead!")]] float& dyn_calculatedSpeed();
    // Get instance field reference: private UnityEngine.Vector2 calculatedTargetPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_calculatedTargetPoint();
    // Get instance field reference: Pathfinding.RVO.Simulator simulator
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator*& dyn_simulator();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.RVO.Sampled.Agent> neighbours
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::RVO::Sampled::Agent*>*& dyn_neighbours();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> neighbourDists
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_neighbourDists();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstaclesBuffered
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*& dyn_obstaclesBuffered();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> obstacles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*& dyn_obstacles();
    // public UnityEngine.Vector2 get_Position()
    // Offset: 0x2A3D2E4
    ::UnityEngine::Vector2 get_Position();
    // public System.Void set_Position(UnityEngine.Vector2 value)
    // Offset: 0x2A3D2EC
    void set_Position(::UnityEngine::Vector2 value);
    // public System.Single get_ElevationCoordinate()
    // Offset: 0x2A3D2F4
    float get_ElevationCoordinate();
    // public System.Void set_ElevationCoordinate(System.Single value)
    // Offset: 0x2A3D2FC
    void set_ElevationCoordinate(float value);
    // public UnityEngine.Vector2 get_CalculatedTargetPoint()
    // Offset: 0x2A3D304
    ::UnityEngine::Vector2 get_CalculatedTargetPoint();
    // private System.Void set_CalculatedTargetPoint(UnityEngine.Vector2 value)
    // Offset: 0x2A3D30C
    void set_CalculatedTargetPoint(::UnityEngine::Vector2 value);
    // public System.Single get_CalculatedSpeed()
    // Offset: 0x2A3D314
    float get_CalculatedSpeed();
    // private System.Void set_CalculatedSpeed(System.Single value)
    // Offset: 0x2A3D31C
    void set_CalculatedSpeed(float value);
    // public System.Boolean get_Locked()
    // Offset: 0x2A3D324
    bool get_Locked();
    // public System.Void set_Locked(System.Boolean value)
    // Offset: 0x2A3D32C
    void set_Locked(bool value);
    // public System.Single get_Radius()
    // Offset: 0x2A3D338
    float get_Radius();
    // public System.Void set_Radius(System.Single value)
    // Offset: 0x2A3D340
    void set_Radius(float value);
    // public System.Single get_Height()
    // Offset: 0x2A3D348
    float get_Height();
    // public System.Void set_Height(System.Single value)
    // Offset: 0x2A3D350
    void set_Height(float value);
    // public System.Single get_AgentTimeHorizon()
    // Offset: 0x2A3D358
    float get_AgentTimeHorizon();
    // public System.Void set_AgentTimeHorizon(System.Single value)
    // Offset: 0x2A3D360
    void set_AgentTimeHorizon(float value);
    // public System.Single get_ObstacleTimeHorizon()
    // Offset: 0x2A3D368
    float get_ObstacleTimeHorizon();
    // public System.Void set_ObstacleTimeHorizon(System.Single value)
    // Offset: 0x2A3D370
    void set_ObstacleTimeHorizon(float value);
    // public System.Int32 get_MaxNeighbours()
    // Offset: 0x2A3D378
    int get_MaxNeighbours();
    // public System.Void set_MaxNeighbours(System.Int32 value)
    // Offset: 0x2A3D380
    void set_MaxNeighbours(int value);
    // public System.Int32 get_NeighbourCount()
    // Offset: 0x2A3D388
    int get_NeighbourCount();
    // private System.Void set_NeighbourCount(System.Int32 value)
    // Offset: 0x2A3D390
    void set_NeighbourCount(int value);
    // public Pathfinding.RVO.RVOLayer get_Layer()
    // Offset: 0x2A3D398
    ::Pathfinding::RVO::RVOLayer get_Layer();
    // public System.Void set_Layer(Pathfinding.RVO.RVOLayer value)
    // Offset: 0x2A3D3A0
    void set_Layer(::Pathfinding::RVO::RVOLayer value);
    // public Pathfinding.RVO.RVOLayer get_CollidesWith()
    // Offset: 0x2A3D3A8
    ::Pathfinding::RVO::RVOLayer get_CollidesWith();
    // public System.Void set_CollidesWith(Pathfinding.RVO.RVOLayer value)
    // Offset: 0x2A3D3B0
    void set_CollidesWith(::Pathfinding::RVO::RVOLayer value);
    // public System.Boolean get_DebugDraw()
    // Offset: 0x2A3D3B8
    bool get_DebugDraw();
    // public System.Void set_DebugDraw(System.Boolean value)
    // Offset: 0x2A3D3C0
    void set_DebugDraw(bool value);
    // public System.Single get_Priority()
    // Offset: 0x2A3D40C
    float get_Priority();
    // public System.Void set_Priority(System.Single value)
    // Offset: 0x2A3D414
    void set_Priority(float value);
    // private System.Action get_PreCalculationCallback()
    // Offset: 0x2A3D41C
    ::System::Action* get_PreCalculationCallback();
    // public System.Void set_PreCalculationCallback(System.Action value)
    // Offset: 0x2A3D424
    void set_PreCalculationCallback(::System::Action* value);
    // public System.Void SetTarget(UnityEngine.Vector2 targetPoint, System.Single desiredSpeed, System.Single maxSpeed)
    // Offset: 0x2A3D42C
    void SetTarget(::UnityEngine::Vector2 targetPoint, float desiredSpeed, float maxSpeed);
    // public System.Void SetCollisionNormal(UnityEngine.Vector2 normal)
    // Offset: 0x2A3D4D4
    void SetCollisionNormal(::UnityEngine::Vector2 normal);
    // public System.Void ForceSetVelocity(UnityEngine.Vector2 velocity)
    // Offset: 0x2A3D4DC
    void ForceSetVelocity(::UnityEngine::Vector2 velocity);
    // public System.Collections.Generic.List`1<Pathfinding.RVO.ObstacleVertex> get_NeighbourObstacles()
    // Offset: 0x2A3D580
    ::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>* get_NeighbourObstacles();
    // public System.Void .ctor(UnityEngine.Vector2 pos, System.Single elevationCoordinate)
    // Offset: 0x2A359A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Agent* New_ctor(::UnityEngine::Vector2 pos, float elevationCoordinate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::Sampled::Agent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Agent*, creationType>(pos, elevationCoordinate)));
    }
    // public System.Void BufferSwitch()
    // Offset: 0x2A37298
    void BufferSwitch();
    // public System.Void PreCalculation()
    // Offset: 0x2A36D80
    void PreCalculation();
    // public System.Void PostCalculation()
    // Offset: 0x2A37208
    void PostCalculation();
    // public System.Void CalculateNeighbours()
    // Offset: 0x2A375D8
    void CalculateNeighbours();
    // static private System.Single Sqr(System.Single x)
    // Offset: 0x2A3D588
    static float Sqr(float x);
    // System.Single InsertAgentNeighbour(Pathfinding.RVO.Sampled.Agent agent, System.Single rangeSq)
    // Offset: 0x2A38884
    float InsertAgentNeighbour(::Pathfinding::RVO::Sampled::Agent* agent, float rangeSq);
    // static private UnityEngine.Vector3 FromXZ(UnityEngine.Vector2 p)
    // Offset: 0x2A3D590
    static ::UnityEngine::Vector3 FromXZ(::UnityEngine::Vector2 p);
    // static private UnityEngine.Vector2 ToXZ(UnityEngine.Vector3 p)
    // Offset: 0x2A3D59C
    static ::UnityEngine::Vector2 ToXZ(::UnityEngine::Vector3 p);
    // private UnityEngine.Vector2 To2D(UnityEngine.Vector3 p, out System.Single elevation)
    // Offset: 0x2A3D5A4
    ::UnityEngine::Vector2 To2D(::UnityEngine::Vector3 p, ByRef<float> elevation);
    // static private System.Void DrawVO(UnityEngine.Vector2 circleCenter, System.Single radius, UnityEngine.Vector2 origin)
    // Offset: 0x2A3D5D4
    static void DrawVO(::UnityEngine::Vector2 circleCenter, float radius, ::UnityEngine::Vector2 origin);
    // System.Void CalculateVelocity(Pathfinding.RVO.Simulator/WorkerContext context)
    // Offset: 0x2A376B4
    void CalculateVelocity(::Pathfinding::RVO::Simulator::WorkerContext* context);
    // static private UnityEngine.Color Rainbow(System.Single v)
    // Offset: 0x2A3E240
    static ::UnityEngine::Color Rainbow(float v);
    // private System.Void GenerateObstacleVOs(Pathfinding.RVO.Sampled.Agent/VOBuffer vos)
    // Offset: 0x2A3D95C
    void GenerateObstacleVOs(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos);
    // private System.Void GenerateNeighbourAgentVOs(Pathfinding.RVO.Sampled.Agent/VOBuffer vos)
    // Offset: 0x2A3DCE8
    void GenerateNeighbourAgentVOs(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos);
    // private UnityEngine.Vector2 GradientDescent(Pathfinding.RVO.Sampled.Agent/VOBuffer vos, UnityEngine.Vector2 sampleAround1, UnityEngine.Vector2 sampleAround2)
    // Offset: 0x2A3E0CC
    ::UnityEngine::Vector2 GradientDescent(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos, ::UnityEngine::Vector2 sampleAround1, ::UnityEngine::Vector2 sampleAround2);
    // static private System.Boolean BiasDesiredVelocity(Pathfinding.RVO.Sampled.Agent/VOBuffer vos, ref UnityEngine.Vector2 desiredVelocity, ref UnityEngine.Vector2 targetPointInVelocitySpace, System.Single maxBiasRadians)
    // Offset: 0x2A3DF74
    static bool BiasDesiredVelocity(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos, ByRef<::UnityEngine::Vector2> desiredVelocity, ByRef<::UnityEngine::Vector2> targetPointInVelocitySpace, float maxBiasRadians);
    // private UnityEngine.Vector2 EvaluateGradient(Pathfinding.RVO.Sampled.Agent/VOBuffer vos, UnityEngine.Vector2 p, out System.Single value)
    // Offset: 0x2A3F324
    ::UnityEngine::Vector2 EvaluateGradient(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos, ::UnityEngine::Vector2 p, ByRef<float> value);
    // private UnityEngine.Vector2 Trace(Pathfinding.RVO.Sampled.Agent/VOBuffer vos, UnityEngine.Vector2 p, out System.Single score)
    // Offset: 0x2A3EE7C
    ::UnityEngine::Vector2 Trace(::Pathfinding::RVO::Sampled::Agent::VOBuffer* vos, ::UnityEngine::Vector2 p, ByRef<float> score);
  }; // Pathfinding.RVO.Sampled.Agent
  #pragma pack(pop)
  static check_size<sizeof(Agent), 248 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>*)> __Pathfinding_RVO_Sampled_AgentSizeCheck;
  static_assert(sizeof(Agent) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_ElevationCoordinate
// Il2CppName: get_ElevationCoordinate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_ElevationCoordinate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_ElevationCoordinate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_ElevationCoordinate
// Il2CppName: set_ElevationCoordinate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_ElevationCoordinate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_ElevationCoordinate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_CalculatedTargetPoint
// Il2CppName: get_CalculatedTargetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_CalculatedTargetPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_CalculatedTargetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_CalculatedTargetPoint
// Il2CppName: set_CalculatedTargetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::set_CalculatedTargetPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_CalculatedTargetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_CalculatedSpeed
// Il2CppName: get_CalculatedSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_CalculatedSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_CalculatedSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_CalculatedSpeed
// Il2CppName: set_CalculatedSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_CalculatedSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_CalculatedSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Locked
// Il2CppName: get_Locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Locked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Locked
// Il2CppName: set_Locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(bool)>(&Pathfinding::RVO::Sampled::Agent::set_Locked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Height
// Il2CppName: set_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_Height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_AgentTimeHorizon
// Il2CppName: get_AgentTimeHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_AgentTimeHorizon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_AgentTimeHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_AgentTimeHorizon
// Il2CppName: set_AgentTimeHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_AgentTimeHorizon)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_AgentTimeHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_ObstacleTimeHorizon
// Il2CppName: get_ObstacleTimeHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_ObstacleTimeHorizon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_ObstacleTimeHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_ObstacleTimeHorizon
// Il2CppName: set_ObstacleTimeHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_ObstacleTimeHorizon)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_ObstacleTimeHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_MaxNeighbours
// Il2CppName: get_MaxNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_MaxNeighbours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_MaxNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_MaxNeighbours
// Il2CppName: set_MaxNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(int)>(&Pathfinding::RVO::Sampled::Agent::set_MaxNeighbours)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_MaxNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_NeighbourCount
// Il2CppName: get_NeighbourCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_NeighbourCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_NeighbourCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_NeighbourCount
// Il2CppName: set_NeighbourCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(int)>(&Pathfinding::RVO::Sampled::Agent::set_NeighbourCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_NeighbourCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Layer
// Il2CppName: get_Layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RVO::RVOLayer (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Layer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Layer
// Il2CppName: set_Layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::RVOLayer)>(&Pathfinding::RVO::Sampled::Agent::set_Layer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO", "RVOLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_CollidesWith
// Il2CppName: get_CollidesWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RVO::RVOLayer (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_CollidesWith)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_CollidesWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_CollidesWith
// Il2CppName: set_CollidesWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::RVOLayer)>(&Pathfinding::RVO::Sampled::Agent::set_CollidesWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO", "RVOLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_CollidesWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_DebugDraw
// Il2CppName: get_DebugDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_DebugDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_DebugDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_DebugDraw
// Il2CppName: set_DebugDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(bool)>(&Pathfinding::RVO::Sampled::Agent::set_DebugDraw)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_DebugDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_Priority
// Il2CppName: get_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_Priority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(float)>(&Pathfinding::RVO::Sampled::Agent::set_Priority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_PreCalculationCallback
// Il2CppName: get_PreCalculationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_PreCalculationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_PreCalculationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::set_PreCalculationCallback
// Il2CppName: set_PreCalculationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::System::Action*)>(&Pathfinding::RVO::Sampled::Agent::set_PreCalculationCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "set_PreCalculationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector2, float, float)>(&Pathfinding::RVO::Sampled::Agent::SetTarget)> {
  static const MethodInfo* get() {
    static auto* targetPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* desiredSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPoint, desiredSpeed, maxSpeed});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::SetCollisionNormal
// Il2CppName: SetCollisionNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::SetCollisionNormal)> {
  static const MethodInfo* get() {
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "SetCollisionNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normal});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::ForceSetVelocity
// Il2CppName: ForceSetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::ForceSetVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "ForceSetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::get_NeighbourObstacles
// Il2CppName: get_NeighbourObstacles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::RVO::ObstacleVertex*>* (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::get_NeighbourObstacles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "get_NeighbourObstacles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::BufferSwitch
// Il2CppName: BufferSwitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::BufferSwitch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "BufferSwitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::PreCalculation
// Il2CppName: PreCalculation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::PreCalculation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "PreCalculation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::PostCalculation
// Il2CppName: PostCalculation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::PostCalculation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "PostCalculation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::CalculateNeighbours
// Il2CppName: CalculateNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)()>(&Pathfinding::RVO::Sampled::Agent::CalculateNeighbours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "CalculateNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::Sqr
// Il2CppName: Sqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Pathfinding::RVO::Sampled::Agent::Sqr)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "Sqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::InsertAgentNeighbour
// Il2CppName: InsertAgentNeighbour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent*, float)>(&Pathfinding::RVO::Sampled::Agent::InsertAgentNeighbour)> {
  static const MethodInfo* get() {
    static auto* agent = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent")->byval_arg;
    static auto* rangeSq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "InsertAgentNeighbour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{agent, rangeSq});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::FromXZ
// Il2CppName: FromXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::FromXZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "FromXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::ToXZ
// Il2CppName: ToXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&Pathfinding::RVO::Sampled::Agent::ToXZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "ToXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::To2D
// Il2CppName: To2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)(::UnityEngine::Vector3, ByRef<float>)>(&Pathfinding::RVO::Sampled::Agent::To2D)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* elevation = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "To2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, elevation});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::DrawVO
// Il2CppName: DrawVO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector2, float, ::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::DrawVO)> {
  static const MethodInfo* get() {
    static auto* circleCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "DrawVO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{circleCenter, radius, origin});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::CalculateVelocity
// Il2CppName: CalculateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Simulator::WorkerContext*)>(&Pathfinding::RVO::Sampled::Agent::CalculateVelocity)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO", "Simulator/WorkerContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "CalculateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::Rainbow
// Il2CppName: Rainbow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(float)>(&Pathfinding::RVO::Sampled::Agent::Rainbow)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "Rainbow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::GenerateObstacleVOs
// Il2CppName: GenerateObstacleVOs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*)>(&Pathfinding::RVO::Sampled::Agent::GenerateObstacleVOs)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "GenerateObstacleVOs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::GenerateNeighbourAgentVOs
// Il2CppName: GenerateNeighbourAgentVOs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*)>(&Pathfinding::RVO::Sampled::Agent::GenerateNeighbourAgentVOs)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "GenerateNeighbourAgentVOs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::GradientDescent
// Il2CppName: GradientDescent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::RVO::Sampled::Agent::GradientDescent)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    static auto* sampleAround1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* sampleAround2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "GradientDescent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos, sampleAround1, sampleAround2});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::BiasDesiredVelocity
// Il2CppName: BiasDesiredVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, float)>(&Pathfinding::RVO::Sampled::Agent::BiasDesiredVelocity)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    static auto* desiredVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* targetPointInVelocitySpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* maxBiasRadians = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "BiasDesiredVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos, desiredVelocity, targetPointInVelocitySpace, maxBiasRadians});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::EvaluateGradient
// Il2CppName: EvaluateGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*, ::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::RVO::Sampled::Agent::EvaluateGradient)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "EvaluateGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos, p, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::Sampled::Agent::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RVO::Sampled::Agent::*)(::Pathfinding::RVO::Sampled::Agent::VOBuffer*, ::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::RVO::Sampled::Agent::Trace)> {
  static const MethodInfo* get() {
    static auto* vos = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent/VOBuffer")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::Sampled::Agent*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vos, p, score});
  }
};
