// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::RVO::Sampled
namespace Pathfinding::RVO::Sampled {
  // Forward declaring type: Agent
  class Agent;
}
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Forward declaring type: RVOQuadtree
  class RVOQuadtree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::RVOQuadtree);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::RVOQuadtree*, "Pathfinding.RVO", "RVOQuadtree");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.RVOQuadtree
  // [TokenAttribute] Offset: FFFFFFFF
  class RVOQuadtree : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::RVO::RVOQuadtree::Node
    struct Node;
    // Nested type: ::Pathfinding::RVO::RVOQuadtree::QuadtreeQuery
    struct QuadtreeQuery;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.RVO.RVOQuadtree/Node
    // [TokenAttribute] Offset: FFFFFFFF
    struct Node/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 child00
      // Size: 0x4
      // Offset: 0x0
      int child00;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: child00 and: linkedList
      char __padding0[0x4] = {};
      // public Pathfinding.RVO.Sampled.Agent linkedList
      // Size: 0x8
      // Offset: 0x8
      ::Pathfinding::RVO::Sampled::Agent* linkedList;
      // Field size check
      static_assert(sizeof(::Pathfinding::RVO::Sampled::Agent*) == 0x8);
      // public System.Byte count
      // Size: 0x1
      // Offset: 0x10
      uint8_t count;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Padding between fields: count and: maxSpeed
      char __padding2[0x3] = {};
      // public System.Single maxSpeed
      // Size: 0x4
      // Offset: 0x14
      float maxSpeed;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Node
      constexpr Node(int child00_ = {}, ::Pathfinding::RVO::Sampled::Agent* linkedList_ = {}, uint8_t count_ = {}, float maxSpeed_ = {}) noexcept : child00{child00_}, linkedList{linkedList_}, count{count_}, maxSpeed{maxSpeed_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 child00
      [[deprecated("Use field access instead!")]] int& dyn_child00();
      // Get instance field reference: public Pathfinding.RVO.Sampled.Agent linkedList
      [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Sampled::Agent*& dyn_linkedList();
      // Get instance field reference: public System.Byte count
      [[deprecated("Use field access instead!")]] uint8_t& dyn_count();
      // Get instance field reference: public System.Single maxSpeed
      [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
      // public System.Void Add(Pathfinding.RVO.Sampled.Agent agent)
      // Offset: 0x2A37F14
      void Add(::Pathfinding::RVO::Sampled::Agent* agent);
      // public System.Void Distribute(Pathfinding.RVO.RVOQuadtree/Node[] nodes, UnityEngine.Rect r)
      // Offset: 0x2A37F58
      void Distribute(::ArrayW<::Pathfinding::RVO::RVOQuadtree::Node> nodes, ::UnityEngine::Rect r);
      // public System.Single CalculateMaxSpeed(Pathfinding.RVO.RVOQuadtree/Node[] nodes, System.Int32 index)
      // Offset: 0x2A38014
      float CalculateMaxSpeed(::ArrayW<::Pathfinding::RVO::RVOQuadtree::Node> nodes, int index);
    }; // Pathfinding.RVO.RVOQuadtree/Node
    #pragma pack(pop)
    static check_size<sizeof(RVOQuadtree::Node), 20 + sizeof(float)> __Pathfinding_RVO_RVOQuadtree_NodeSizeCheck;
    static_assert(sizeof(RVOQuadtree::Node) == 0x18);
    public:
    // private System.Single maxRadius
    // Size: 0x4
    // Offset: 0x10
    float maxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxRadius and: nodes
    char __padding0[0x4] = {};
    // private Pathfinding.RVO.RVOQuadtree/Node[] nodes
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Pathfinding::RVO::RVOQuadtree::Node> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::RVO::RVOQuadtree::Node>) == 0x8);
    // private System.Int32 filledNodes
    // Size: 0x4
    // Offset: 0x20
    int filledNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rect bounds
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Rect bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    public:
    // static field const value: static private System.Int32 LeafSize
    static constexpr const int LeafSize = 15;
    // Get static field: static private System.Int32 LeafSize
    static int _get_LeafSize();
    // Set static field: static private System.Int32 LeafSize
    static void _set_LeafSize(int value);
    // Get instance field reference: private System.Single maxRadius
    [[deprecated("Use field access instead!")]] float& dyn_maxRadius();
    // Get instance field reference: private Pathfinding.RVO.RVOQuadtree/Node[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::RVO::RVOQuadtree::Node>& dyn_nodes();
    // Get instance field reference: private System.Int32 filledNodes
    [[deprecated("Use field access instead!")]] int& dyn_filledNodes();
    // Get instance field reference: private UnityEngine.Rect bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_bounds();
    // public System.Void Clear()
    // Offset: 0x2A36A1C
    void Clear();
    // public System.Void SetBounds(UnityEngine.Rect r)
    // Offset: 0x2A37CB8
    void SetBounds(::UnityEngine::Rect r);
    // private System.Int32 GetNodeIndex()
    // Offset: 0x2A37CC4
    int GetNodeIndex();
    // public System.Void Insert(Pathfinding.RVO.Sampled.Agent agent)
    // Offset: 0x2A36A54
    void Insert(::Pathfinding::RVO::Sampled::Agent* agent);
    // public System.Void CalculateSpeeds()
    // Offset: 0x2A36C8C
    void CalculateSpeeds();
    // public System.Void Query(UnityEngine.Vector2 p, System.Single speed, System.Single timeHorizon, System.Single agentRadius, Pathfinding.RVO.Sampled.Agent agent)
    // Offset: 0x2A381C4
    void Query(::UnityEngine::Vector2 p, float speed, float timeHorizon, float agentRadius, ::Pathfinding::RVO::Sampled::Agent* agent);
    // public System.Void DebugDraw()
    // Offset: 0x2A38538
    void DebugDraw();
    // private System.Void DebugDrawRec(System.Int32 i, UnityEngine.Rect r)
    // Offset: 0x2A38548
    void DebugDrawRec(int i, ::UnityEngine::Rect r);
    // public System.Void .ctor()
    // Offset: 0x2A352F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVOQuadtree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::RVOQuadtree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVOQuadtree*, creationType>()));
    }
  }; // Pathfinding.RVO.RVOQuadtree
  #pragma pack(pop)
  static check_size<sizeof(RVOQuadtree), 36 + sizeof(::UnityEngine::Rect)> __Pathfinding_RVO_RVOQuadtreeSizeCheck;
  static_assert(sizeof(RVOQuadtree) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::RVOQuadtree::Node, "Pathfinding.RVO", "RVOQuadtree/Node");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)()>(&Pathfinding::RVO::RVOQuadtree::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::SetBounds
// Il2CppName: SetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)(::UnityEngine::Rect)>(&Pathfinding::RVO::RVOQuadtree::SetBounds)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "SetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::GetNodeIndex
// Il2CppName: GetNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RVO::RVOQuadtree::*)()>(&Pathfinding::RVO::RVOQuadtree::GetNodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "GetNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)(::Pathfinding::RVO::Sampled::Agent*)>(&Pathfinding::RVO::RVOQuadtree::Insert)> {
  static const MethodInfo* get() {
    static auto* agent = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{agent});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::CalculateSpeeds
// Il2CppName: CalculateSpeeds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)()>(&Pathfinding::RVO::RVOQuadtree::CalculateSpeeds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "CalculateSpeeds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::Query
// Il2CppName: Query
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)(::UnityEngine::Vector2, float, float, float, ::Pathfinding::RVO::Sampled::Agent*)>(&Pathfinding::RVO::RVOQuadtree::Query)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeHorizon = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* agentRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* agent = &::il2cpp_utils::GetClassFromName("Pathfinding.RVO.Sampled", "Agent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "Query", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, speed, timeHorizon, agentRadius, agent});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::DebugDraw
// Il2CppName: DebugDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)()>(&Pathfinding::RVO::RVOQuadtree::DebugDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "DebugDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::DebugDrawRec
// Il2CppName: DebugDrawRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOQuadtree::*)(int, ::UnityEngine::Rect)>(&Pathfinding::RVO::RVOQuadtree::DebugDrawRec)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOQuadtree*), "DebugDrawRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, r});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOQuadtree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
