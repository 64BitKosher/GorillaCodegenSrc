// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.RVO.RVOLayer
#include "Pathfinding/RVO/RVOLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Forward declaring type: ObstacleVertex
  class ObstacleVertex;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::ObstacleVertex);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::ObstacleVertex*, "Pathfinding.RVO", "ObstacleVertex");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.ObstacleVertex
  // [TokenAttribute] Offset: FFFFFFFF
  class ObstacleVertex : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean ignore
    // Size: 0x1
    // Offset: 0x10
    bool ignore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignore and: position
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector2 dir
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Vector2 dir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x28
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.RVO.RVOLayer layer
    // Size: 0x4
    // Offset: 0x2C
    ::Pathfinding::RVO::RVOLayer layer;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOLayer) == 0x4);
    // public Pathfinding.RVO.ObstacleVertex next
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::RVO::ObstacleVertex* next;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::ObstacleVertex*) == 0x8);
    // public Pathfinding.RVO.ObstacleVertex prev
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::RVO::ObstacleVertex* prev;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::ObstacleVertex*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean ignore
    [[deprecated("Use field access instead!")]] bool& dyn_ignore();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Vector2 dir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_dir();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public Pathfinding.RVO.RVOLayer layer
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOLayer& dyn_layer();
    // Get instance field reference: public Pathfinding.RVO.ObstacleVertex next
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::ObstacleVertex*& dyn_next();
    // Get instance field reference: public Pathfinding.RVO.ObstacleVertex prev
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::ObstacleVertex*& dyn_prev();
    // public System.Void .ctor()
    // Offset: 0x2A34E94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObstacleVertex* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::ObstacleVertex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObstacleVertex*, creationType>()));
    }
  }; // Pathfinding.RVO.ObstacleVertex
  #pragma pack(pop)
  static check_size<sizeof(ObstacleVertex), 56 + sizeof(::Pathfinding::RVO::ObstacleVertex*)> __Pathfinding_RVO_ObstacleVertexSizeCheck;
  static_assert(sizeof(ObstacleVertex) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::ObstacleVertex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
