// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.RVOObstacle
#include "Pathfinding/RVO/RVOObstacle.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Forward declaring type: RVOSquareObstacle
  class RVOSquareObstacle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::RVOSquareObstacle);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::RVOSquareObstacle*, "Pathfinding.RVO", "RVOSquareObstacle");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.RVOSquareObstacle
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class RVOSquareObstacle : public ::Pathfinding::RVO::RVOObstacle {
    public:
    public:
    // public System.Single height
    // Size: 0x4
    // Offset: 0x9C
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 size
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 center
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Vector2 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public UnityEngine.Vector2 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_size();
    // Get instance field reference: public UnityEngine.Vector2 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_center();
    // protected override System.Boolean get_StaticObstacle()
    // Offset: 0x2A3D0E4
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Boolean RVOObstacle::get_StaticObstacle()
    bool get_StaticObstacle();
    // protected override System.Boolean get_ExecuteInEditor()
    // Offset: 0x2A3D0EC
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Boolean RVOObstacle::get_ExecuteInEditor()
    bool get_ExecuteInEditor();
    // protected override System.Boolean get_LocalCoordinates()
    // Offset: 0x2A3D0F4
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Boolean RVOObstacle::get_LocalCoordinates()
    bool get_LocalCoordinates();
    // protected override System.Single get_Height()
    // Offset: 0x2A3D0FC
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Single RVOObstacle::get_Height()
    float get_Height();
    // protected override System.Boolean AreGizmosDirty()
    // Offset: 0x2A3D104
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Boolean RVOObstacle::AreGizmosDirty()
    bool AreGizmosDirty();
    // protected override System.Void CreateObstacles()
    // Offset: 0x2A3D10C
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Void RVOObstacle::CreateObstacles()
    void CreateObstacles();
    // public System.Void .ctor()
    // Offset: 0x2A3D250
    // Implemented from: Pathfinding.RVO.RVOObstacle
    // Base method: System.Void RVOObstacle::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVOSquareObstacle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::RVOSquareObstacle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVOSquareObstacle*, creationType>()));
    }
  }; // Pathfinding.RVO.RVOSquareObstacle
  #pragma pack(pop)
  static check_size<sizeof(RVOSquareObstacle), 168 + sizeof(::UnityEngine::Vector2)> __Pathfinding_RVO_RVOSquareObstacleSizeCheck;
  static_assert(sizeof(RVOSquareObstacle) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::get_StaticObstacle
// Il2CppName: get_StaticObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::get_StaticObstacle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "get_StaticObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::get_ExecuteInEditor
// Il2CppName: get_ExecuteInEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::get_ExecuteInEditor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "get_ExecuteInEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::get_LocalCoordinates
// Il2CppName: get_LocalCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::get_LocalCoordinates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "get_LocalCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::AreGizmosDirty
// Il2CppName: AreGizmosDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::AreGizmosDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "AreGizmosDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::CreateObstacles
// Il2CppName: CreateObstacles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVOSquareObstacle::*)()>(&Pathfinding::RVO::RVOSquareObstacle::CreateObstacles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVOSquareObstacle*), "CreateObstacles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RVO::RVOSquareObstacle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
