// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Forward declaring type: Line
  struct Line;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::Line, "Pathfinding.RVO", "Line");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.RVO.Line
  // [TokenAttribute] Offset: FFFFFFFF
  struct Line/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector2 point
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 dir
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2 dir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating value type constructor for type: Line
    constexpr Line(::UnityEngine::Vector2 point_ = {}, ::UnityEngine::Vector2 dir_ = {}) noexcept : point{point_}, dir{dir_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 point
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_point();
    // Get instance field reference: public UnityEngine.Vector2 dir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_dir();
  }; // Pathfinding.RVO.Line
  #pragma pack(pop)
  static check_size<sizeof(Line), 8 + sizeof(::UnityEngine::Vector2)> __Pathfinding_RVO_LineSizeCheck;
  static_assert(sizeof(Line) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
