// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RVO.RVONavmesh
#include "Pathfinding/RVO/RVONavmesh.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: Simulator
  class Simulator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0*, "Pathfinding.RVO", "RVONavmesh/<>c__DisplayClass8_0");
// Type namespace: Pathfinding.RVO
namespace Pathfinding::RVO {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RVO.RVONavmesh/<>c__DisplayClass8_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class RVONavmesh::$$c__DisplayClass8_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean reverse
    // Size: 0x1
    // Offset: 0x10
    bool reverse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reverse and: $$4__this
    char __padding0[0x7] = {};
    // public Pathfinding.RVO.RVONavmesh <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::RVO::RVONavmesh* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVONavmesh*) == 0x8);
    // public Pathfinding.RVO.Simulator sim
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::RVO::Simulator* sim;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean reverse
    [[deprecated("Use field access instead!")]] bool& dyn_reverse();
    // Get instance field reference: public Pathfinding.RVO.RVONavmesh <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVONavmesh*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.RVO.Simulator sim
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator*& dyn_sim();
    // public System.Void .ctor()
    // Offset: 0x2A3B500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVONavmesh::$$c__DisplayClass8_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVONavmesh::$$c__DisplayClass8_0*, creationType>()));
    }
    // System.Void <AddGraphObstacles>b__0(UnityEngine.Vector3[] vertices)
    // Offset: 0x2A3B5C4
    void $AddGraphObstacles$b__0(::ArrayW<::UnityEngine::Vector3> vertices);
  }; // Pathfinding.RVO.RVONavmesh/<>c__DisplayClass8_0
  #pragma pack(pop)
  static check_size<sizeof(RVONavmesh::$$c__DisplayClass8_0), 32 + sizeof(::Pathfinding::RVO::Simulator*)> __Pathfinding_RVO_RVONavmesh_$$c__DisplayClass8_0SizeCheck;
  static_assert(sizeof(RVONavmesh::$$c__DisplayClass8_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0::$AddGraphObstacles$b__0
// Il2CppName: <AddGraphObstacles>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0::*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0::$AddGraphObstacles$b__0)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RVO::RVONavmesh::$$c__DisplayClass8_0*), "<AddGraphObstacles>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
