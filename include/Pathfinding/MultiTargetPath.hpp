// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ABPath
#include "Pathfinding/ABPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: PathLog
  struct PathLog;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: MultiTargetPath
  class MultiTargetPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::MultiTargetPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::MultiTargetPath*, "Pathfinding", "MultiTargetPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x189
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.MultiTargetPath
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiTargetPath : public ::Pathfinding::ABPath {
    public:
    // Nested type: ::Pathfinding::MultiTargetPath::HeuristicMode
    struct HeuristicMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.MultiTargetPath/HeuristicMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct HeuristicMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HeuristicMode
      constexpr HeuristicMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode None
      static constexpr const int None = 0;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode None
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_None();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode None
      static void _set_None(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode Average
      static constexpr const int Average = 1;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode Average
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_Average();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode Average
      static void _set_Average(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode MovingAverage
      static constexpr const int MovingAverage = 2;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode MovingAverage
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_MovingAverage();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode MovingAverage
      static void _set_MovingAverage(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode Midpoint
      static constexpr const int Midpoint = 3;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode Midpoint
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_Midpoint();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode Midpoint
      static void _set_Midpoint(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode MovingMidpoint
      static constexpr const int MovingMidpoint = 4;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode MovingMidpoint
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_MovingMidpoint();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode MovingMidpoint
      static void _set_MovingMidpoint(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // static field const value: static public Pathfinding.MultiTargetPath/HeuristicMode Sequential
      static constexpr const int Sequential = 5;
      // Get static field: static public Pathfinding.MultiTargetPath/HeuristicMode Sequential
      static ::Pathfinding::MultiTargetPath::HeuristicMode _get_Sequential();
      // Set static field: static public Pathfinding.MultiTargetPath/HeuristicMode Sequential
      static void _set_Sequential(::Pathfinding::MultiTargetPath::HeuristicMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.MultiTargetPath/HeuristicMode
    #pragma pack(pop)
    static check_size<sizeof(MultiTargetPath::HeuristicMode), 0 + sizeof(int)> __Pathfinding_MultiTargetPath_HeuristicModeSizeCheck;
    static_assert(sizeof(MultiTargetPath::HeuristicMode) == 0x4);
    public:
    // public Pathfinding.OnPathDelegate[] callbacks
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::Pathfinding::OnPathDelegate*> callbacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::OnPathDelegate*>) == 0x8);
    // public Pathfinding.GraphNode[] targetNodes
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::Pathfinding::GraphNode*> targetNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GraphNode*>) == 0x8);
    // protected System.Int32 targetNodeCount
    // Size: 0x4
    // Offset: 0x148
    int targetNodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: targetNodeCount and: targetsFound
    char __padding2[0x4] = {};
    // public System.Boolean[] targetsFound
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<bool> targetsFound;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // public UnityEngine.Vector3[] targetPoints
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::UnityEngine::Vector3> targetPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] originalTargetPoints
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::Vector3> originalTargetPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3>[] vectorPaths
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*> vectorPaths;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>) == 0x8);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode>[] nodePaths
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*> nodePaths;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*>) == 0x8);
    // public System.Boolean pathsForAll
    // Size: 0x1
    // Offset: 0x178
    bool pathsForAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pathsForAll and: chosenTarget
    char __padding8[0x3] = {};
    // public System.Int32 chosenTarget
    // Size: 0x4
    // Offset: 0x17C
    int chosenTarget;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 sequentialTarget
    // Size: 0x4
    // Offset: 0x180
    int sequentialTarget;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.MultiTargetPath/HeuristicMode heuristicMode
    // Size: 0x4
    // Offset: 0x184
    ::Pathfinding::MultiTargetPath::HeuristicMode heuristicMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::MultiTargetPath::HeuristicMode) == 0x4);
    // private System.Boolean <inverted>k__BackingField
    // Size: 0x1
    // Offset: 0x188
    bool inverted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Pathfinding.OnPathDelegate[] callbacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::OnPathDelegate*>& dyn_callbacks();
    // Get instance field reference: public Pathfinding.GraphNode[] targetNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GraphNode*>& dyn_targetNodes();
    // Get instance field reference: protected System.Int32 targetNodeCount
    [[deprecated("Use field access instead!")]] int& dyn_targetNodeCount();
    // Get instance field reference: public System.Boolean[] targetsFound
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_targetsFound();
    // Get instance field reference: public UnityEngine.Vector3[] targetPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_targetPoints();
    // Get instance field reference: public UnityEngine.Vector3[] originalTargetPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_originalTargetPoints();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3>[] vectorPaths
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>& dyn_vectorPaths();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode>[] nodePaths
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*>& dyn_nodePaths();
    // Get instance field reference: public System.Boolean pathsForAll
    [[deprecated("Use field access instead!")]] bool& dyn_pathsForAll();
    // Get instance field reference: public System.Int32 chosenTarget
    [[deprecated("Use field access instead!")]] int& dyn_chosenTarget();
    // Get instance field reference: private System.Int32 sequentialTarget
    [[deprecated("Use field access instead!")]] int& dyn_sequentialTarget();
    // Get instance field reference: public Pathfinding.MultiTargetPath/HeuristicMode heuristicMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::MultiTargetPath::HeuristicMode& dyn_heuristicMode();
    // Get instance field reference: private System.Boolean <inverted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$inverted$k__BackingField();
    // public System.Boolean get_inverted()
    // Offset: 0x2A00AF0
    bool get_inverted();
    // protected System.Void set_inverted(System.Boolean value)
    // Offset: 0x2A00AF8
    void set_inverted(bool value);
    // static public Pathfinding.MultiTargetPath Construct(UnityEngine.Vector3[] startPoints, UnityEngine.Vector3 target, Pathfinding.OnPathDelegate[] callbackDelegates, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A00B74
    static ::Pathfinding::MultiTargetPath* Construct(::ArrayW<::UnityEngine::Vector3> startPoints, ::UnityEngine::Vector3 target, ::ArrayW<::Pathfinding::OnPathDelegate*> callbackDelegates, ::Pathfinding::OnPathDelegate* callback);
    // static public Pathfinding.MultiTargetPath Construct(UnityEngine.Vector3 start, UnityEngine.Vector3[] targets, Pathfinding.OnPathDelegate[] callbackDelegates, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A00B94
    static ::Pathfinding::MultiTargetPath* Construct(::UnityEngine::Vector3 start, ::ArrayW<::UnityEngine::Vector3> targets, ::ArrayW<::Pathfinding::OnPathDelegate*> callbackDelegates, ::Pathfinding::OnPathDelegate* callback);
    // protected System.Void Setup(UnityEngine.Vector3 start, UnityEngine.Vector3[] targets, Pathfinding.OnPathDelegate[] callbackDelegates, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A00C58
    void Setup(::UnityEngine::Vector3 start, ::ArrayW<::UnityEngine::Vector3> targets, ::ArrayW<::Pathfinding::OnPathDelegate*> callbackDelegates, ::Pathfinding::OnPathDelegate* callback);
    // private System.Void ChooseShortestPath()
    // Offset: 0x2A0109C
    void ChooseShortestPath();
    // private System.Void SetPathParametersForReturn(System.Int32 target)
    // Offset: 0x2A01198
    void SetPathParametersForReturn(int target);
    // protected System.Void FoundTarget(Pathfinding.PathNode nodeR, System.Int32 i)
    // Offset: 0x2A01538
    void FoundTarget(::Pathfinding::PathNode* nodeR, int i);
    // protected System.Void RebuildOpenList()
    // Offset: 0x2A01C78
    void RebuildOpenList();
    // private System.Void RecalculateHTarget(System.Boolean firstTime)
    // Offset: 0x2A01794
    void RecalculateHTarget(bool firstTime);
    // private System.Void ResetFlags()
    // Offset: 0x2A0245C
    void ResetFlags();
    // public System.Void .ctor()
    // Offset: 0x2A00B04
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::.ctor()
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiTargetPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::MultiTargetPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiTargetPath*, creationType>()));
    }
    // protected override System.Void Reset()
    // Offset: 0x2A00E80
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Reset()
    void Reset();
    // protected override System.Void OnEnterPool()
    // Offset: 0x2A00EB8
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::OnEnterPool()
    void OnEnterPool();
    // protected override System.Void ReturnPath()
    // Offset: 0x2A01318
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::ReturnPath()
    void ReturnPath();
    // protected override System.Void Prepare()
    // Offset: 0x2A01D2C
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Prepare()
    void Prepare();
    // protected override System.Void Initialize()
    // Offset: 0x2A02264
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Initialize()
    void Initialize();
    // protected override System.Void Cleanup()
    // Offset: 0x2A02444
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Cleanup()
    void Cleanup();
    // protected override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x2A024D4
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
    // protected override System.Void Trace(Pathfinding.PathNode node)
    // Offset: 0x2A026B4
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Trace(Pathfinding.PathNode node)
    void Trace(::Pathfinding::PathNode* node);
    // protected override System.String DebugString(Pathfinding.PathLog logMode)
    // Offset: 0x2A028BC
    // Implemented from: Pathfinding.ABPath
    // Base method: System.String ABPath::DebugString(Pathfinding.PathLog logMode)
    ::StringW DebugString(::Pathfinding::PathLog logMode);
  }; // Pathfinding.MultiTargetPath
  #pragma pack(pop)
  static check_size<sizeof(MultiTargetPath), 392 + sizeof(bool)> __Pathfinding_MultiTargetPathSizeCheck;
  static_assert(sizeof(MultiTargetPath) == 0x189);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::MultiTargetPath::HeuristicMode, "Pathfinding", "MultiTargetPath/HeuristicMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::get_inverted
// Il2CppName: get_inverted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::get_inverted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "get_inverted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::set_inverted
// Il2CppName: set_inverted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(bool)>(&Pathfinding::MultiTargetPath::set_inverted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "set_inverted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::MultiTargetPath* (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3, ::ArrayW<::Pathfinding::OnPathDelegate*>, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::MultiTargetPath::Construct)> {
  static const MethodInfo* get() {
    static auto* startPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callbackDelegates = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPoints, target, callbackDelegates, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::MultiTargetPath* (*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::Pathfinding::OnPathDelegate*>, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::MultiTargetPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* targets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* callbackDelegates = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, targets, callbackDelegates, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::Pathfinding::OnPathDelegate*>, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::MultiTargetPath::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* targets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* callbackDelegates = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, targets, callbackDelegates, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::ChooseShortestPath
// Il2CppName: ChooseShortestPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::ChooseShortestPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "ChooseShortestPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::SetPathParametersForReturn
// Il2CppName: SetPathParametersForReturn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(int)>(&Pathfinding::MultiTargetPath::SetPathParametersForReturn)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "SetPathParametersForReturn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::FoundTarget
// Il2CppName: FoundTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(::Pathfinding::PathNode*, int)>(&Pathfinding::MultiTargetPath::FoundTarget)> {
  static const MethodInfo* get() {
    static auto* nodeR = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "FoundTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeR, i});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::RebuildOpenList
// Il2CppName: RebuildOpenList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::RebuildOpenList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "RebuildOpenList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::RecalculateHTarget
// Il2CppName: RecalculateHTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(bool)>(&Pathfinding::MultiTargetPath::RecalculateHTarget)> {
  static const MethodInfo* get() {
    static auto* firstTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "RecalculateHTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::ResetFlags
// Il2CppName: ResetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::ResetFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "ResetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::OnEnterPool
// Il2CppName: OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::ReturnPath
// Il2CppName: ReturnPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::ReturnPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "ReturnPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)()>(&Pathfinding::MultiTargetPath::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(int64_t)>(&Pathfinding::MultiTargetPath::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MultiTargetPath::*)(::Pathfinding::PathNode*)>(&Pathfinding::MultiTargetPath::Trace)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::MultiTargetPath::DebugString
// Il2CppName: DebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::MultiTargetPath::*)(::Pathfinding::PathLog)>(&Pathfinding::MultiTargetPath::DebugString)> {
  static const MethodInfo* get() {
    static auto* logMode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathLog")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MultiTargetPath*), "DebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logMode});
  }
};
