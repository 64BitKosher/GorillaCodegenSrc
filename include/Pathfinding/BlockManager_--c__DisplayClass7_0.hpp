// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.BlockManager
#include "Pathfinding/BlockManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: SingleNodeBlocker
  class SingleNodeBlocker;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BlockManager::$$c__DisplayClass7_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BlockManager::$$c__DisplayClass7_0*, "Pathfinding", "BlockManager/<>c__DisplayClass7_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BlockManager/<>c__DisplayClass7_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BlockManager::$$c__DisplayClass7_0 : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.BlockManager <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::BlockManager* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::BlockManager*) == 0x8);
    // public Pathfinding.GraphNode node
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::GraphNode* node;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.SingleNodeBlocker blocker
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::SingleNodeBlocker* blocker;
    // Field size check
    static_assert(sizeof(::Pathfinding::SingleNodeBlocker*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.BlockManager <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::BlockManager*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.GraphNode node
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_node();
    // Get instance field reference: public Pathfinding.SingleNodeBlocker blocker
    [[deprecated("Use field access instead!")]] ::Pathfinding::SingleNodeBlocker*& dyn_blocker();
    // public System.Void .ctor()
    // Offset: 0x2A0437C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlockManager::$$c__DisplayClass7_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BlockManager::$$c__DisplayClass7_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlockManager::$$c__DisplayClass7_0*, creationType>()));
    }
    // System.Void <InternalUnblock>b__0()
    // Offset: 0x2A0477C
    void $InternalUnblock$b__0();
  }; // Pathfinding.BlockManager/<>c__DisplayClass7_0
  #pragma pack(pop)
  static check_size<sizeof(BlockManager::$$c__DisplayClass7_0), 32 + sizeof(::Pathfinding::SingleNodeBlocker*)> __Pathfinding_BlockManager_$$c__DisplayClass7_0SizeCheck;
  static_assert(sizeof(BlockManager::$$c__DisplayClass7_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BlockManager::$$c__DisplayClass7_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::BlockManager::$$c__DisplayClass7_0::$InternalUnblock$b__0
// Il2CppName: <InternalUnblock>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BlockManager::$$c__DisplayClass7_0::*)()>(&Pathfinding::BlockManager::$$c__DisplayClass7_0::$InternalUnblock$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager::$$c__DisplayClass7_0*), "<InternalUnblock>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
