// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavGraph
  class NavGraph;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphMask
  struct GraphMask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphMask, "Pathfinding", "GraphMask");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.GraphMask
  // [TokenAttribute] Offset: FFFFFFFF
  struct GraphMask/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Pathfinding::GraphMask::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    public:
    // public System.Int32 value
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GraphMask
    constexpr GraphMask(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // Get instance field reference: public System.Int32 value
    [[deprecated("Use field access instead!")]] int& dyn_value();
    // static public Pathfinding.GraphMask get_everything()
    // Offset: 0x299A468
    static ::Pathfinding::GraphMask get_everything();
    // public System.Void .ctor(System.Int32 value)
    // Offset: 0x299A470
    // ABORTED: conflicts with another method.  GraphMask(int value);
    // public System.Boolean Contains(System.Int32 graphIndex)
    // Offset: 0x2998CE4
    bool Contains(int graphIndex);
    // static public Pathfinding.GraphMask FromGraph(Pathfinding.NavGraph graph)
    // Offset: 0x299A494
    static ::Pathfinding::GraphMask FromGraph(::Pathfinding::NavGraph* graph);
    // static public Pathfinding.GraphMask FromGraphName(System.String graphName)
    // Offset: 0x299A4C0
    static ::Pathfinding::GraphMask FromGraphName(::StringW graphName);
    // public override System.String ToString()
    // Offset: 0x299A4B8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Pathfinding.GraphMask
  #pragma pack(pop)
  static check_size<sizeof(GraphMask), 0 + sizeof(int)> __Pathfinding_GraphMaskSizeCheck;
  static_assert(sizeof(GraphMask) == 0x4);
  // static public Pathfinding.GraphMask op_BitwiseAnd(Pathfinding.GraphMask lhs, Pathfinding.GraphMask rhs)
  // Offset: 0x299A47C
  ::Pathfinding::GraphMask operator&(const ::Pathfinding::GraphMask& lhs, const ::Pathfinding::GraphMask& rhs);
  // static public Pathfinding.GraphMask op_BitwiseOr(Pathfinding.GraphMask lhs, Pathfinding.GraphMask rhs)
  // Offset: 0x299A484
  ::Pathfinding::GraphMask operator|(const ::Pathfinding::GraphMask& lhs, const ::Pathfinding::GraphMask& rhs);
  // static public Pathfinding.GraphMask op_OnesComplement(Pathfinding.GraphMask lhs)
  // Offset: 0x299A48C
  ::Pathfinding::GraphMask operator~(const ::Pathfinding::GraphMask& lhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphMask::get_everything
// Il2CppName: get_everything
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphMask (*)()>(&Pathfinding::GraphMask::get_everything)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphMask), "get_everything", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphMask::GraphMask
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphMask::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphMask::*)(int)>(&Pathfinding::GraphMask::Contains)> {
  static const MethodInfo* get() {
    static auto* graphIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphMask), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphIndex});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphMask::FromGraph
// Il2CppName: FromGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphMask (*)(::Pathfinding::NavGraph*)>(&Pathfinding::GraphMask::FromGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphMask), "FromGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphMask::FromGraphName
// Il2CppName: FromGraphName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphMask (*)(::StringW)>(&Pathfinding::GraphMask::FromGraphName)> {
  static const MethodInfo* get() {
    static auto* graphName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphMask), "FromGraphName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphName});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphMask::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::GraphMask::*)()>(&Pathfinding::GraphMask::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphMask), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphMask::operator&
// Il2CppName: op_BitwiseAnd
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Pathfinding::GraphMask::operator|
// Il2CppName: op_BitwiseOr
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Pathfinding::GraphMask::operator~
// Il2CppName: op_OnesComplement
// Cannot perform method pointer template specialization from operators!
