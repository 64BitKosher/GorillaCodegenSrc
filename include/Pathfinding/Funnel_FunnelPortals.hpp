// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Funnel
#include "Pathfinding/Funnel.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Funnel::FunnelPortals, "Pathfinding", "Funnel/FunnelPortals");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Funnel/FunnelPortals
  // [TokenAttribute] Offset: FFFFFFFF
  struct Funnel::FunnelPortals/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> left
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* left;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> right
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* right;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating value type constructor for type: FunnelPortals
    constexpr FunnelPortals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* left_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* right_ = {}) noexcept : left{left_}, right{right_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> left
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_left();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> right
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_right();
  }; // Pathfinding.Funnel/FunnelPortals
  #pragma pack(pop)
  static check_size<sizeof(Funnel::FunnelPortals), 8 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __Pathfinding_Funnel_FunnelPortalsSizeCheck;
  static_assert(sizeof(Funnel::FunnelPortals) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
