// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: System.UInt16
#include "System/UInt16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathNode
  class PathNode;
  // Skipping declaration: Tuple because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: BinaryHeap
  class BinaryHeap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BinaryHeap);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BinaryHeap*, "Pathfinding", "BinaryHeap");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BinaryHeap
  // [TokenAttribute] Offset: FFFFFFFF
  class BinaryHeap : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::BinaryHeap::Tuple
    struct Tuple;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.BinaryHeap/Tuple
    // [TokenAttribute] Offset: FFFFFFFF
    struct Tuple/*, public ::System::ValueType*/ {
      public:
      public:
      // public Pathfinding.PathNode node
      // Size: 0x8
      // Offset: 0x0
      ::Pathfinding::PathNode* node;
      // Field size check
      static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
      // public System.UInt32 F
      // Size: 0x4
      // Offset: 0x8
      uint F;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: Tuple
      constexpr Tuple(::Pathfinding::PathNode* node_ = {}, uint F_ = {}) noexcept : node{node_}, F{F_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Pathfinding.PathNode node
      [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_node();
      // Get instance field reference: public System.UInt32 F
      [[deprecated("Use field access instead!")]] uint& dyn_F();
      // public System.Void .ctor(System.UInt32 f, Pathfinding.PathNode node)
      // Offset: 0x29A8498
      Tuple(uint f, ::Pathfinding::PathNode* node);
    }; // Pathfinding.BinaryHeap/Tuple
    #pragma pack(pop)
    static check_size<sizeof(BinaryHeap::Tuple), 8 + sizeof(uint)> __Pathfinding_BinaryHeap_TupleSizeCheck;
    static_assert(sizeof(BinaryHeap::Tuple) == 0xC);
    public:
    // public System.Int32 numberOfItems
    // Size: 0x4
    // Offset: 0x10
    int numberOfItems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single growthFactor
    // Size: 0x4
    // Offset: 0x14
    float growthFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Pathfinding.BinaryHeap/Tuple[] heap
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Pathfinding::BinaryHeap::Tuple> heap;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::BinaryHeap::Tuple>) == 0x8);
    public:
    // static field const value: static private System.Int32 D
    static constexpr const int D = 4;
    // Get static field: static private System.Int32 D
    static int _get_D();
    // Set static field: static private System.Int32 D
    static void _set_D(int value);
    // static field const value: static private System.Boolean SortGScores
    static constexpr const bool SortGScores = true;
    // Get static field: static private System.Boolean SortGScores
    static bool _get_SortGScores();
    // Set static field: static private System.Boolean SortGScores
    static void _set_SortGScores(bool value);
    // static field const value: static public System.UInt16 NotInHeap
    static constexpr const uint16_t NotInHeap = 65535u;
    // Get static field: static public System.UInt16 NotInHeap
    static uint16_t _get_NotInHeap();
    // Set static field: static public System.UInt16 NotInHeap
    static void _set_NotInHeap(uint16_t value);
    // Get instance field reference: public System.Int32 numberOfItems
    [[deprecated("Use field access instead!")]] int& dyn_numberOfItems();
    // Get instance field reference: public System.Single growthFactor
    [[deprecated("Use field access instead!")]] float& dyn_growthFactor();
    // Get instance field reference: private Pathfinding.BinaryHeap/Tuple[] heap
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::BinaryHeap::Tuple>& dyn_heap();
    // public System.Boolean get_isEmpty()
    // Offset: 0x29A777C
    bool get_isEmpty();
    // static private System.Int32 RoundUpToNextMultipleMod1(System.Int32 v)
    // Offset: 0x29A778C
    static int RoundUpToNextMultipleMod1(int v);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x29A77C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BinaryHeap* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BinaryHeap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BinaryHeap*, creationType>(capacity)));
    }
    // public System.Void Clear()
    // Offset: 0x29A7874
    void Clear();
    // Pathfinding.PathNode GetNode(System.Int32 i)
    // Offset: 0x29A78D4
    ::Pathfinding::PathNode* GetNode(int i);
    // System.Void SetF(System.Int32 i, System.UInt32 f)
    // Offset: 0x29A7904
    void SetF(int i, uint f);
    // private System.Void Expand()
    // Offset: 0x29A7934
    void Expand();
    // public System.Void Add(Pathfinding.PathNode node)
    // Offset: 0x29A7B28
    void Add(::Pathfinding::PathNode* node);
    // private System.Void DecreaseKey(Pathfinding.BinaryHeap/Tuple node, System.UInt16 index)
    // Offset: 0x29A7C34
    void DecreaseKey(::Pathfinding::BinaryHeap::Tuple node, uint16_t index);
    // public Pathfinding.PathNode Remove()
    // Offset: 0x29A7D90
    ::Pathfinding::PathNode* Remove();
    // private System.Void Validate()
    // Offset: 0x29A807C
    void Validate();
    // public System.Void Rebuild()
    // Offset: 0x29A8358
    void Rebuild();
  }; // Pathfinding.BinaryHeap
  #pragma pack(pop)
  static check_size<sizeof(BinaryHeap), 24 + sizeof(::ArrayW<::Pathfinding::BinaryHeap::Tuple>)> __Pathfinding_BinaryHeapSizeCheck;
  static_assert(sizeof(BinaryHeap) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BinaryHeap::Tuple, "Pathfinding", "BinaryHeap/Tuple");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::RoundUpToNextMultipleMod1
// Il2CppName: RoundUpToNextMultipleMod1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Pathfinding::BinaryHeap::RoundUpToNextMultipleMod1)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "RoundUpToNextMultipleMod1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathNode* (Pathfinding::BinaryHeap::*)(int)>(&Pathfinding::BinaryHeap::GetNode)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::SetF
// Il2CppName: SetF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)(int, uint)>(&Pathfinding::BinaryHeap::SetF)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "SetF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, f});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Expand
// Il2CppName: Expand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::Expand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Expand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)(::Pathfinding::PathNode*)>(&Pathfinding::BinaryHeap::Add)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::DecreaseKey
// Il2CppName: DecreaseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)(::Pathfinding::BinaryHeap::Tuple, uint16_t)>(&Pathfinding::BinaryHeap::DecreaseKey)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "BinaryHeap/Tuple")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "DecreaseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, index});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathNode* (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeap::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeap::*)()>(&Pathfinding::BinaryHeap::Rebuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeap*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
