// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AIPath
#include "Pathfinding/AIPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: Pathfinding.Legacy
namespace Pathfinding::Legacy {
  // Forward declaring type: LegacyAIPath
  class LegacyAIPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Legacy::LegacyAIPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Legacy::LegacyAIPath*, "Pathfinding.Legacy", "LegacyAIPath");
// Type namespace: Pathfinding.Legacy
namespace Pathfinding::Legacy {
  // Size: 0x190
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Legacy.LegacyAIPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class LegacyAIPath : public ::Pathfinding::AIPath {
    public:
    // Writing base type padding for base size: 0x161 to desired offset: 0x164
    char ___base_padding[0x3] = {};
    public:
    // public System.Single forwardLook
    // Size: 0x4
    // Offset: 0x164
    float forwardLook;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean closestOnPathCheck
    // Size: 0x1
    // Offset: 0x168
    bool closestOnPathCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closestOnPathCheck and: minMoveScale
    char __padding1[0x3] = {};
    // protected System.Single minMoveScale
    // Size: 0x4
    // Offset: 0x16C
    float minMoveScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 currentWaypointIndex
    // Size: 0x4
    // Offset: 0x170
    int currentWaypointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.Vector3 lastFoundWaypointPosition
    // Size: 0xC
    // Offset: 0x174
    ::UnityEngine::Vector3 lastFoundWaypointPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected System.Single lastFoundWaypointTime
    // Size: 0x4
    // Offset: 0x180
    float lastFoundWaypointTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected UnityEngine.Vector3 targetDirection
    // Size: 0xC
    // Offset: 0x184
    ::UnityEngine::Vector3 targetDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public System.Single forwardLook
    [[deprecated("Use field access instead!")]] float& dyn_forwardLook();
    // Get instance field reference: public System.Boolean closestOnPathCheck
    [[deprecated("Use field access instead!")]] bool& dyn_closestOnPathCheck();
    // Get instance field reference: protected System.Single minMoveScale
    [[deprecated("Use field access instead!")]] float& dyn_minMoveScale();
    // Get instance field reference: protected System.Int32 currentWaypointIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentWaypointIndex();
    // Get instance field reference: protected UnityEngine.Vector3 lastFoundWaypointPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastFoundWaypointPosition();
    // Get instance field reference: protected System.Single lastFoundWaypointTime
    [[deprecated("Use field access instead!")]] float& dyn_lastFoundWaypointTime();
    // Get instance field reference: protected UnityEngine.Vector3 targetDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetDirection();
    // protected System.Single XZSqrMagnitude(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x2A0E4F8
    float XZSqrMagnitude(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // protected System.Void RotateTowards(UnityEngine.Vector3 dir)
    // Offset: 0x2A0E348
    void RotateTowards(::UnityEngine::Vector3 dir);
    // protected UnityEngine.Vector3 CalculateTargetPoint(UnityEngine.Vector3 p, UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x2A0E510
    ::UnityEngine::Vector3 CalculateTargetPoint(::UnityEngine::Vector3 p, ::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // protected override System.Void Awake()
    // Offset: 0x2A0D9C8
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
    // protected override System.Void OnPathComplete(Pathfinding.Path _p)
    // Offset: 0x2A0DAD8
    // Implemented from: Pathfinding.AIPath
    // Base method: System.Void AIPath::OnPathComplete(Pathfinding.Path _p)
    void OnPathComplete(::Pathfinding::Path* _p);
    // protected override System.Void Update()
    // Offset: 0x2A0E174
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::Update()
    void Update();
    // protected UnityEngine.Vector3 CalculateVelocity(UnityEngine.Vector3 currentPosition)
    // Offset: 0x2A0DD5C
    // Implemented from: Pathfinding.AIPath
    // Base method: UnityEngine.Vector3 AIPath::CalculateVelocity(UnityEngine.Vector3 currentPosition)
    ::UnityEngine::Vector3 CalculateVelocity(::UnityEngine::Vector3 currentPosition);
    // public System.Void .ctor()
    // Offset: 0x2A0E720
    // Implemented from: Pathfinding.AIPath
    // Base method: System.Void AIPath::.ctor()
    // Base method: System.Void AIBase::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegacyAIPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Legacy::LegacyAIPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegacyAIPath*, creationType>()));
    }
  }; // Pathfinding.Legacy.LegacyAIPath
  #pragma pack(pop)
  static check_size<sizeof(LegacyAIPath), 388 + sizeof(::UnityEngine::Vector3)> __Pathfinding_Legacy_LegacyAIPathSizeCheck;
  static_assert(sizeof(LegacyAIPath) == 0x190);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::XZSqrMagnitude
// Il2CppName: XZSqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::Legacy::LegacyAIPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Legacy::LegacyAIPath::XZSqrMagnitude)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "XZSqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::RotateTowards
// Il2CppName: RotateTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Legacy::LegacyAIPath::*)(::UnityEngine::Vector3)>(&Pathfinding::Legacy::LegacyAIPath::RotateTowards)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "RotateTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::CalculateTargetPoint
// Il2CppName: CalculateTargetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Legacy::LegacyAIPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Legacy::LegacyAIPath::CalculateTargetPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "CalculateTargetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Legacy::LegacyAIPath::*)()>(&Pathfinding::Legacy::LegacyAIPath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Legacy::LegacyAIPath::*)(::Pathfinding::Path*)>(&Pathfinding::Legacy::LegacyAIPath::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* _p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Legacy::LegacyAIPath::*)()>(&Pathfinding::Legacy::LegacyAIPath::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::CalculateVelocity
// Il2CppName: CalculateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Legacy::LegacyAIPath::*)(::UnityEngine::Vector3)>(&Pathfinding::Legacy::LegacyAIPath::CalculateVelocity)> {
  static const MethodInfo* get() {
    static auto* currentPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Legacy::LegacyAIPath*), "CalculateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPosition});
  }
};
// Writing MetadataGetter for method: Pathfinding::Legacy::LegacyAIPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
