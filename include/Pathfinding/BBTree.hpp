// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.IAstarPooledObject
#include "Pathfinding/Util/IAstarPooledObject.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: Pathfinding.IntRect
#include "Pathfinding/IntRect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: NNInfoInternal
  struct NNInfoInternal;
  // Forward declaring type: NNConstraint
  class NNConstraint;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: BBTree
  class BBTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BBTree);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BBTree*, "Pathfinding", "BBTree");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BBTree
  // [TokenAttribute] Offset: FFFFFFFF
  class BBTree : public ::Il2CppObject/*, public ::Pathfinding::Util::IAstarPooledObject*/ {
    public:
    // Nested type: ::Pathfinding::BBTree::BBTreeBox
    struct BBTreeBox;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.BBTree/BBTreeBox
    // [TokenAttribute] Offset: FFFFFFFF
    struct BBTreeBox/*, public ::System::ValueType*/ {
      public:
      public:
      // public Pathfinding.IntRect rect
      // Size: 0x10
      // Offset: 0x0
      ::Pathfinding::IntRect rect;
      // Field size check
      static_assert(sizeof(::Pathfinding::IntRect) == 0x10);
      // public System.Int32 nodeOffset
      // Size: 0x4
      // Offset: 0x10
      int nodeOffset;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 left
      // Size: 0x4
      // Offset: 0x14
      int left;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 right
      // Size: 0x4
      // Offset: 0x18
      int right;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BBTreeBox
      constexpr BBTreeBox(::Pathfinding::IntRect rect_ = {}, int nodeOffset_ = {}, int left_ = {}, int right_ = {}) noexcept : rect{rect_}, nodeOffset{nodeOffset_}, left{left_}, right{right_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Pathfinding.IntRect rect
      [[deprecated("Use field access instead!")]] ::Pathfinding::IntRect& dyn_rect();
      // Get instance field reference: public System.Int32 nodeOffset
      [[deprecated("Use field access instead!")]] int& dyn_nodeOffset();
      // Get instance field reference: public System.Int32 left
      [[deprecated("Use field access instead!")]] int& dyn_left();
      // Get instance field reference: public System.Int32 right
      [[deprecated("Use field access instead!")]] int& dyn_right();
      // public System.Boolean get_IsLeaf()
      // Offset: 0x29E70E8
      bool get_IsLeaf();
      // public System.Void .ctor(Pathfinding.IntRect rect)
      // Offset: 0x29E606C
      BBTreeBox(::Pathfinding::IntRect rect);
      // public System.Void .ctor(System.Int32 nodeOffset, Pathfinding.IntRect rect)
      // Offset: 0x29E79FC
      BBTreeBox(int nodeOffset, ::Pathfinding::IntRect rect);
      // public System.Boolean Contains(UnityEngine.Vector3 point)
      // Offset: 0x29E7490
      bool Contains(::UnityEngine::Vector3 point);
    }; // Pathfinding.BBTree/BBTreeBox
    #pragma pack(pop)
    static check_size<sizeof(BBTree::BBTreeBox), 24 + sizeof(int)> __Pathfinding_BBTree_BBTreeBoxSizeCheck;
    static_assert(sizeof(BBTree::BBTreeBox) == 0x1C);
    public:
    // private Pathfinding.BBTree/BBTreeBox[] tree
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Pathfinding::BBTree::BBTreeBox> tree;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::BBTree::BBTreeBox>) == 0x8);
    // private Pathfinding.TriangleMeshNode[] nodeLookup
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Pathfinding::TriangleMeshNode*> nodeLookup;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::TriangleMeshNode*>) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 leafNodes
    // Size: 0x4
    // Offset: 0x24
    int leafNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::Util::IAstarPooledObject
    operator ::Pathfinding::Util::IAstarPooledObject() noexcept {
      return *reinterpret_cast<::Pathfinding::Util::IAstarPooledObject*>(this);
    }
    // static field const value: static private System.Int32 MaximumLeafSize
    static constexpr const int MaximumLeafSize = 4;
    // Get static field: static private System.Int32 MaximumLeafSize
    static int _get_MaximumLeafSize();
    // Set static field: static private System.Int32 MaximumLeafSize
    static void _set_MaximumLeafSize(int value);
    // Get instance field reference: private Pathfinding.BBTree/BBTreeBox[] tree
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::BBTree::BBTreeBox>& dyn_tree();
    // Get instance field reference: private Pathfinding.TriangleMeshNode[] nodeLookup
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::TriangleMeshNode*>& dyn_nodeLookup();
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private System.Int32 leafNodes
    [[deprecated("Use field access instead!")]] int& dyn_leafNodes();
    // public UnityEngine.Rect get_Size()
    // Offset: 0x29E5C00
    ::UnityEngine::Rect get_Size();
    // public System.Void Clear()
    // Offset: 0x29E5C68
    void Clear();
    // private System.Void Pathfinding.Util.IAstarPooledObject.OnEnterPool()
    // Offset: 0x29E5E0C
    void Pathfinding_Util_IAstarPooledObject_OnEnterPool();
    // private System.Void EnsureCapacity(System.Int32 c)
    // Offset: 0x29E5E10
    void EnsureCapacity(int c);
    // private System.Void EnsureNodeCapacity(System.Int32 c)
    // Offset: 0x29E5EF8
    void EnsureNodeCapacity(int c);
    // private System.Int32 GetBox(Pathfinding.IntRect rect)
    // Offset: 0x29E5FE0
    int GetBox(::Pathfinding::IntRect rect);
    // public System.Void RebuildFrom(Pathfinding.TriangleMeshNode[] nodes)
    // Offset: 0x29E3674
    void RebuildFrom(::ArrayW<::Pathfinding::TriangleMeshNode*> nodes);
    // static private System.Int32 SplitByX(Pathfinding.TriangleMeshNode[] nodes, System.Int32[] permutation, System.Int32 from, System.Int32 to, System.Int32 divider)
    // Offset: 0x29E63A4
    static int SplitByX(::ArrayW<::Pathfinding::TriangleMeshNode*> nodes, ::ArrayW<int> permutation, int from, int to, int divider);
    // static private System.Int32 SplitByZ(Pathfinding.TriangleMeshNode[] nodes, System.Int32[] permutation, System.Int32 from, System.Int32 to, System.Int32 divider)
    // Offset: 0x29E6438
    static int SplitByZ(::ArrayW<::Pathfinding::TriangleMeshNode*> nodes, ::ArrayW<int> permutation, int from, int to, int divider);
    // private System.Int32 RebuildFromInternal(Pathfinding.TriangleMeshNode[] nodes, System.Int32[] permutation, Pathfinding.IntRect[] nodeBounds, System.Int32 from, System.Int32 to, System.Boolean odd)
    // Offset: 0x29E6084
    int RebuildFromInternal(::ArrayW<::Pathfinding::TriangleMeshNode*> nodes, ::ArrayW<int> permutation, ::ArrayW<::Pathfinding::IntRect> nodeBounds, int from, int to, bool odd);
    // static private Pathfinding.IntRect NodeBounds(System.Int32[] permutation, Pathfinding.IntRect[] nodeBounds, System.Int32 from, System.Int32 to)
    // Offset: 0x29E64CC
    static ::Pathfinding::IntRect NodeBounds(::ArrayW<int> permutation, ::ArrayW<::Pathfinding::IntRect> nodeBounds, int from, int to);
    // static private System.Void DrawDebugRect(Pathfinding.IntRect rect)
    // Offset: 0x29E6640
    static void DrawDebugRect(::Pathfinding::IntRect rect);
    // static private System.Void DrawDebugNode(Pathfinding.TriangleMeshNode node, System.Single yoffset, UnityEngine.Color color)
    // Offset: 0x29E6760
    static void DrawDebugNode(::Pathfinding::TriangleMeshNode* node, float yoffset, ::UnityEngine::Color color);
    // public Pathfinding.NNInfoInternal QueryClosest(UnityEngine.Vector3 p, Pathfinding.NNConstraint constraint, out System.Single distance)
    // Offset: 0x29E6B44
    ::Pathfinding::NNInfoInternal QueryClosest(::UnityEngine::Vector3 p, ::Pathfinding::NNConstraint* constraint, ByRef<float> distance);
    // public Pathfinding.NNInfoInternal QueryClosestXZ(UnityEngine.Vector3 p, Pathfinding.NNConstraint constraint, ref System.Single distance, Pathfinding.NNInfoInternal previous)
    // Offset: 0x29E6CE0
    ::Pathfinding::NNInfoInternal QueryClosestXZ(::UnityEngine::Vector3 p, ::Pathfinding::NNConstraint* constraint, ByRef<float> distance, ::Pathfinding::NNInfoInternal previous);
    // private System.Void SearchBoxClosestXZ(System.Int32 boxi, UnityEngine.Vector3 p, ref System.Single closestSqrDist, Pathfinding.NNConstraint constraint, ref Pathfinding.NNInfoInternal nnInfo)
    // Offset: 0x29E6EA4
    void SearchBoxClosestXZ(int boxi, ::UnityEngine::Vector3 p, ByRef<float> closestSqrDist, ::Pathfinding::NNConstraint* constraint, ByRef<::Pathfinding::NNInfoInternal> nnInfo);
    // public Pathfinding.NNInfoInternal QueryClosest(UnityEngine.Vector3 p, Pathfinding.NNConstraint constraint, ref System.Single distance, Pathfinding.NNInfoInternal previous)
    // Offset: 0x29E6C00
    ::Pathfinding::NNInfoInternal QueryClosest(::UnityEngine::Vector3 p, ::Pathfinding::NNConstraint* constraint, ByRef<float> distance, ::Pathfinding::NNInfoInternal previous);
    // private System.Void SearchBoxClosest(System.Int32 boxi, UnityEngine.Vector3 p, ref System.Single closestSqrDist, Pathfinding.NNConstraint constraint, ref Pathfinding.NNInfoInternal nnInfo)
    // Offset: 0x29E71D4
    void SearchBoxClosest(int boxi, ::UnityEngine::Vector3 p, ByRef<float> closestSqrDist, ::Pathfinding::NNConstraint* constraint, ByRef<::Pathfinding::NNInfoInternal> nnInfo);
    // private System.Void GetOrderedChildren(ref System.Int32 first, ref System.Int32 second, out System.Single firstDist, out System.Single secondDist, UnityEngine.Vector3 p)
    // Offset: 0x29E70F8
    void GetOrderedChildren(ByRef<int> first, ByRef<int> second, ByRef<float> firstDist, ByRef<float> secondDist, ::UnityEngine::Vector3 p);
    // public Pathfinding.TriangleMeshNode QueryInside(UnityEngine.Vector3 p, Pathfinding.NNConstraint constraint)
    // Offset: 0x29E73E0
    ::Pathfinding::TriangleMeshNode* QueryInside(::UnityEngine::Vector3 p, ::Pathfinding::NNConstraint* constraint);
    // private Pathfinding.TriangleMeshNode SearchBoxInside(System.Int32 boxi, UnityEngine.Vector3 p, Pathfinding.NNConstraint constraint)
    // Offset: 0x29E74C0
    ::Pathfinding::TriangleMeshNode* SearchBoxInside(int boxi, ::UnityEngine::Vector3 p, ::Pathfinding::NNConstraint* constraint);
    // public System.Void OnDrawGizmos()
    // Offset: 0x29E76A4
    void OnDrawGizmos();
    // private System.Void OnDrawGizmos(System.Int32 boxi, System.Int32 depth)
    // Offset: 0x29E76E8
    void OnDrawGizmos(int boxi, int depth);
    // static private System.Boolean NodeIntersectsCircle(Pathfinding.TriangleMeshNode node, UnityEngine.Vector3 p, System.Single radius)
    // Offset: 0x29E7864
    static bool NodeIntersectsCircle(::Pathfinding::TriangleMeshNode* node, ::UnityEngine::Vector3 p, float radius);
    // static private System.Boolean RectIntersectsCircle(Pathfinding.IntRect r, UnityEngine.Vector3 p, System.Single radius)
    // Offset: 0x29E78F0
    static bool RectIntersectsCircle(::Pathfinding::IntRect r, ::UnityEngine::Vector3 p, float radius);
    // static private System.Single SquaredRectPointDistance(Pathfinding.IntRect r, UnityEngine.Vector3 p)
    // Offset: 0x29E6DC0
    static float SquaredRectPointDistance(::Pathfinding::IntRect r, ::UnityEngine::Vector3 p);
    // public System.Void .ctor()
    // Offset: 0x29E366C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BBTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BBTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BBTree*, creationType>()));
    }
  }; // Pathfinding.BBTree
  #pragma pack(pop)
  static check_size<sizeof(BBTree), 36 + sizeof(int)> __Pathfinding_BBTreeSizeCheck;
  static_assert(sizeof(BBTree) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BBTree::BBTreeBox, "Pathfinding", "BBTree/BBTreeBox");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BBTree::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Pathfinding::BBTree::*)()>(&Pathfinding::BBTree::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)()>(&Pathfinding::BBTree::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::Pathfinding_Util_IAstarPooledObject_OnEnterPool
// Il2CppName: Pathfinding.Util.IAstarPooledObject.OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)()>(&Pathfinding::BBTree::Pathfinding_Util_IAstarPooledObject_OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "Pathfinding.Util.IAstarPooledObject.OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(int)>(&Pathfinding::BBTree::EnsureCapacity)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::EnsureNodeCapacity
// Il2CppName: EnsureNodeCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(int)>(&Pathfinding::BBTree::EnsureNodeCapacity)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "EnsureNodeCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::GetBox
// Il2CppName: GetBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::BBTree::*)(::Pathfinding::IntRect)>(&Pathfinding::BBTree::GetBox)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "GetBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::RebuildFrom
// Il2CppName: RebuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(::ArrayW<::Pathfinding::TriangleMeshNode*>)>(&Pathfinding::BBTree::RebuildFrom)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "RebuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SplitByX
// Il2CppName: SplitByX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Pathfinding::TriangleMeshNode*>, ::ArrayW<int>, int, int, int)>(&Pathfinding::BBTree::SplitByX)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    static auto* permutation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* divider = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SplitByX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, permutation, from, to, divider});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SplitByZ
// Il2CppName: SplitByZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Pathfinding::TriangleMeshNode*>, ::ArrayW<int>, int, int, int)>(&Pathfinding::BBTree::SplitByZ)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    static auto* permutation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* divider = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SplitByZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, permutation, from, to, divider});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::RebuildFromInternal
// Il2CppName: RebuildFromInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::BBTree::*)(::ArrayW<::Pathfinding::TriangleMeshNode*>, ::ArrayW<int>, ::ArrayW<::Pathfinding::IntRect>, int, int, bool)>(&Pathfinding::BBTree::RebuildFromInternal)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    static auto* permutation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* nodeBounds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect"), 1)->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* odd = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "RebuildFromInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, permutation, nodeBounds, from, to, odd});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::NodeBounds
// Il2CppName: NodeBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::IntRect (*)(::ArrayW<int>, ::ArrayW<::Pathfinding::IntRect>, int, int)>(&Pathfinding::BBTree::NodeBounds)> {
  static const MethodInfo* get() {
    static auto* permutation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* nodeBounds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect"), 1)->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "NodeBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permutation, nodeBounds, from, to});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::DrawDebugRect
// Il2CppName: DrawDebugRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::IntRect)>(&Pathfinding::BBTree::DrawDebugRect)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "DrawDebugRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::DrawDebugNode
// Il2CppName: DrawDebugNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::TriangleMeshNode*, float, ::UnityEngine::Color)>(&Pathfinding::BBTree::DrawDebugNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* yoffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "DrawDebugNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, yoffset, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::QueryClosest
// Il2CppName: QueryClosest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::BBTree::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ByRef<float>)>(&Pathfinding::BBTree::QueryClosest)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "QueryClosest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, constraint, distance});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::QueryClosestXZ
// Il2CppName: QueryClosestXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::BBTree::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ByRef<float>, ::Pathfinding::NNInfoInternal)>(&Pathfinding::BBTree::QueryClosestXZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* previous = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNInfoInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "QueryClosestXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, constraint, distance, previous});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SearchBoxClosestXZ
// Il2CppName: SearchBoxClosestXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(int, ::UnityEngine::Vector3, ByRef<float>, ::Pathfinding::NNConstraint*, ByRef<::Pathfinding::NNInfoInternal>)>(&Pathfinding::BBTree::SearchBoxClosestXZ)> {
  static const MethodInfo* get() {
    static auto* boxi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* closestSqrDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* nnInfo = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNInfoInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SearchBoxClosestXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boxi, p, closestSqrDist, constraint, nnInfo});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::QueryClosest
// Il2CppName: QueryClosest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::BBTree::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ByRef<float>, ::Pathfinding::NNInfoInternal)>(&Pathfinding::BBTree::QueryClosest)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* previous = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNInfoInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "QueryClosest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, constraint, distance, previous});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SearchBoxClosest
// Il2CppName: SearchBoxClosest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(int, ::UnityEngine::Vector3, ByRef<float>, ::Pathfinding::NNConstraint*, ByRef<::Pathfinding::NNInfoInternal>)>(&Pathfinding::BBTree::SearchBoxClosest)> {
  static const MethodInfo* get() {
    static auto* boxi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* closestSqrDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* nnInfo = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNInfoInternal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SearchBoxClosest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boxi, p, closestSqrDist, constraint, nnInfo});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::GetOrderedChildren
// Il2CppName: GetOrderedChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(ByRef<int>, ByRef<int>, ByRef<float>, ByRef<float>, ::UnityEngine::Vector3)>(&Pathfinding::BBTree::GetOrderedChildren)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* firstDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* secondDist = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "GetOrderedChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first, second, firstDist, secondDist, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::QueryInside
// Il2CppName: QueryInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::TriangleMeshNode* (Pathfinding::BBTree::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::BBTree::QueryInside)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "QueryInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SearchBoxInside
// Il2CppName: SearchBoxInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::TriangleMeshNode* (Pathfinding::BBTree::*)(int, ::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::BBTree::SearchBoxInside)> {
  static const MethodInfo* get() {
    static auto* boxi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SearchBoxInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boxi, p, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)()>(&Pathfinding::BBTree::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BBTree::*)(int, int)>(&Pathfinding::BBTree::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* boxi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boxi, depth});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::NodeIntersectsCircle
// Il2CppName: NodeIntersectsCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::TriangleMeshNode*, ::UnityEngine::Vector3, float)>(&Pathfinding::BBTree::NodeIntersectsCircle)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "NodeIntersectsCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, p, radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::RectIntersectsCircle
// Il2CppName: RectIntersectsCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::IntRect, ::UnityEngine::Vector3, float)>(&Pathfinding::BBTree::RectIntersectsCircle)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "RectIntersectsCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, p, radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::SquaredRectPointDistance
// Il2CppName: SquaredRectPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::IntRect, ::UnityEngine::Vector3)>(&Pathfinding::BBTree::SquaredRectPointDistance)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BBTree*), "SquaredRectPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::BBTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
