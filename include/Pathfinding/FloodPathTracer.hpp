// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ABPath
#include "Pathfinding/ABPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: FloodPath
  class FloodPath;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: FloodPathTracer
  class FloodPathTracer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::FloodPathTracer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::FloodPathTracer*, "Pathfinding", "FloodPathTracer");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x140
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.FloodPathTracer
  // [TokenAttribute] Offset: FFFFFFFF
  class FloodPathTracer : public ::Pathfinding::ABPath {
    public:
    public:
    // protected Pathfinding.FloodPath flood
    // Size: 0x8
    // Offset: 0x138
    ::Pathfinding::FloodPath* flood;
    // Field size check
    static_assert(sizeof(::Pathfinding::FloodPath*) == 0x8);
    public:
    // Creating conversion operator: operator ::Pathfinding::FloodPath*
    constexpr operator ::Pathfinding::FloodPath*() const noexcept {
      return flood;
    }
    // Get instance field reference: protected Pathfinding.FloodPath flood
    [[deprecated("Use field access instead!")]] ::Pathfinding::FloodPath*& dyn_flood();
    // static public Pathfinding.FloodPathTracer Construct(UnityEngine.Vector3 start, Pathfinding.FloodPath flood, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A0063C
    static ::Pathfinding::FloodPathTracer* Construct(::UnityEngine::Vector3 start, ::Pathfinding::FloodPath* flood, ::Pathfinding::OnPathDelegate* callback);
    // protected System.Void Setup(UnityEngine.Vector3 start, Pathfinding.FloodPath flood, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A006F8
    void Setup(::UnityEngine::Vector3 start, ::Pathfinding::FloodPath* flood, ::Pathfinding::OnPathDelegate* callback);
    // public System.Void Trace(Pathfinding.GraphNode from)
    // Offset: 0x2A008C0
    void Trace(::Pathfinding::GraphNode* from);
    // protected override System.Boolean get_hasEndPoint()
    // Offset: 0x2A005DC
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Boolean ABPath::get_hasEndPoint()
    bool get_hasEndPoint();
    // public System.Void .ctor()
    // Offset: 0x2A005E4
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::.ctor()
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloodPathTracer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::FloodPathTracer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloodPathTracer*, creationType>()));
    }
    // protected override System.Void Reset()
    // Offset: 0x2A00810
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Reset()
    void Reset();
    // protected override System.Void Initialize()
    // Offset: 0x2A00834
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Initialize()
    void Initialize();
    // protected override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x2A00A90
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
  }; // Pathfinding.FloodPathTracer
  #pragma pack(pop)
  static check_size<sizeof(FloodPathTracer), 312 + sizeof(::Pathfinding::FloodPath*)> __Pathfinding_FloodPathTracerSizeCheck;
  static_assert(sizeof(FloodPathTracer) == 0x140);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::FloodPathTracer* (*)(::UnityEngine::Vector3, ::Pathfinding::FloodPath*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPathTracer::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* flood = &::il2cpp_utils::GetClassFromName("Pathfinding", "FloodPath")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, flood, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPathTracer::*)(::UnityEngine::Vector3, ::Pathfinding::FloodPath*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPathTracer::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* flood = &::il2cpp_utils::GetClassFromName("Pathfinding", "FloodPath")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, flood, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPathTracer::*)(::Pathfinding::GraphNode*)>(&Pathfinding::FloodPathTracer::Trace)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::get_hasEndPoint
// Il2CppName: get_hasEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::FloodPathTracer::*)()>(&Pathfinding::FloodPathTracer::get_hasEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "get_hasEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPathTracer::*)()>(&Pathfinding::FloodPathTracer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPathTracer::*)()>(&Pathfinding::FloodPathTracer::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPathTracer::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPathTracer::*)(int64_t)>(&Pathfinding::FloodPathTracer::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathTracer*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
