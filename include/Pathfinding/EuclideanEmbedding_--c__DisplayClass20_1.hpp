// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.EuclideanEmbedding
#include "Pathfinding/EuclideanEmbedding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: FloodPath
  class FloodPath;
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1*, "Pathfinding", "EuclideanEmbedding/<>c__DisplayClass20_1");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class EuclideanEmbedding::$$c__DisplayClass20_1 : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.GraphNode pivot
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::GraphNode* pivot;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public System.Int32 pivotIndex
    // Size: 0x4
    // Offset: 0x18
    int pivotIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: pivotIndex and: floodPath
    char __padding1[0x4] = {};
    // public Pathfinding.FloodPath floodPath
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::FloodPath* floodPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::FloodPath*) == 0x8);
    // public Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_0 CS$<>8__locals1
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0* CS$$$8__locals1;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.GraphNode pivot
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_pivot();
    // Get instance field reference: public System.Int32 pivotIndex
    [[deprecated("Use field access instead!")]] int& dyn_pivotIndex();
    // Get instance field reference: public Pathfinding.FloodPath floodPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::FloodPath*& dyn_floodPath();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_0 CS$<>8__locals1
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*& dyn_CS$$$8__locals1();
    // public System.Void .ctor()
    // Offset: 0x29E9690
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EuclideanEmbedding::$$c__DisplayClass20_1* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EuclideanEmbedding::$$c__DisplayClass20_1*, creationType>()));
    }
    // System.Void <RecalculateCosts>b__2(Pathfinding.Path _p)
    // Offset: 0x29E9698
    void $RecalculateCosts$b__2(::Pathfinding::Path* _p);
  }; // Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_1
  #pragma pack(pop)
  static check_size<sizeof(EuclideanEmbedding::$$c__DisplayClass20_1), 40 + sizeof(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*)> __Pathfinding_EuclideanEmbedding_$$c__DisplayClass20_1SizeCheck;
  static_assert(sizeof(EuclideanEmbedding::$$c__DisplayClass20_1) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1::$RecalculateCosts$b__2
// Il2CppName: <RecalculateCosts>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1::*)(::Pathfinding::Path*)>(&Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1::$RecalculateCosts$b__2)> {
  static const MethodInfo* get() {
    static auto* _p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1*), "<RecalculateCosts>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_p});
  }
};
