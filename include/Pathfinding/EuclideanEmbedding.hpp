// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.HeuristicOptimizationMode
#include "Pathfinding/HeuristicOptimizationMode.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: EuclideanEmbedding
  class EuclideanEmbedding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EuclideanEmbedding);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EuclideanEmbedding*, "Pathfinding", "EuclideanEmbedding");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EuclideanEmbedding
  // [TokenAttribute] Offset: FFFFFFFF
  class EuclideanEmbedding : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0
    class $$c__DisplayClass17_0;
    // Nested type: ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1
    class $$c__DisplayClass20_1;
    // Nested type: ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2
    class $$c__DisplayClass20_2;
    public:
    // public Pathfinding.HeuristicOptimizationMode mode
    // Size: 0x4
    // Offset: 0x10
    ::Pathfinding::HeuristicOptimizationMode mode;
    // Field size check
    static_assert(sizeof(::Pathfinding::HeuristicOptimizationMode) == 0x4);
    // public System.Int32 seed
    // Size: 0x4
    // Offset: 0x14
    int seed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Transform pivotPointRoot
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* pivotPointRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Int32 spreadOutCount
    // Size: 0x4
    // Offset: 0x20
    int spreadOutCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean dirty
    // Size: 0x1
    // Offset: 0x24
    bool dirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dirty and: costs
    char __padding4[0x3] = {};
    // private System.UInt32[] costs
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint> costs;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Int32 maxNodeIndex
    // Size: 0x4
    // Offset: 0x30
    int maxNodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 pivotCount
    // Size: 0x4
    // Offset: 0x34
    int pivotCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.GraphNode[] pivots
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Pathfinding::GraphNode*> pivots;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GraphNode*>) == 0x8);
    // private System.UInt32 rval
    // Size: 0x4
    // Offset: 0x40
    uint rval;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: rval and: lockObj
    char __padding9[0x4] = {};
    // private System.Object lockObj
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* lockObj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // static field const value: static private System.UInt32 ra
    static constexpr const uint ra = 12820163u;
    // Get static field: static private System.UInt32 ra
    static uint _get_ra();
    // Set static field: static private System.UInt32 ra
    static void _set_ra(uint value);
    // static field const value: static private System.UInt32 rc
    static constexpr const uint rc = 1140671485u;
    // Get static field: static private System.UInt32 rc
    static uint _get_rc();
    // Set static field: static private System.UInt32 rc
    static void _set_rc(uint value);
    // Get instance field reference: public Pathfinding.HeuristicOptimizationMode mode
    [[deprecated("Use field access instead!")]] ::Pathfinding::HeuristicOptimizationMode& dyn_mode();
    // Get instance field reference: public System.Int32 seed
    [[deprecated("Use field access instead!")]] int& dyn_seed();
    // Get instance field reference: public UnityEngine.Transform pivotPointRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_pivotPointRoot();
    // Get instance field reference: public System.Int32 spreadOutCount
    [[deprecated("Use field access instead!")]] int& dyn_spreadOutCount();
    // Get instance field reference: public System.Boolean dirty
    [[deprecated("Use field access instead!")]] bool& dyn_dirty();
    // Get instance field reference: private System.UInt32[] costs
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_costs();
    // Get instance field reference: private System.Int32 maxNodeIndex
    [[deprecated("Use field access instead!")]] int& dyn_maxNodeIndex();
    // Get instance field reference: private System.Int32 pivotCount
    [[deprecated("Use field access instead!")]] int& dyn_pivotCount();
    // Get instance field reference: private Pathfinding.GraphNode[] pivots
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GraphNode*>& dyn_pivots();
    // Get instance field reference: private System.UInt32 rval
    [[deprecated("Use field access instead!")]] uint& dyn_rval();
    // Get instance field reference: private System.Object lockObj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockObj();
    // private System.UInt32 GetRandom()
    // Offset: 0x29E7A10
    uint GetRandom();
    // private System.Void EnsureCapacity(System.Int32 index)
    // Offset: 0x29E7A34
    void EnsureCapacity(int index);
    // public System.UInt32 GetHeuristic(System.Int32 nodeIndex1, System.Int32 nodeIndex2)
    // Offset: 0x29E7C3C
    uint GetHeuristic(int nodeIndex1, int nodeIndex2);
    // private System.Void GetClosestWalkableNodesToChildrenRecursively(UnityEngine.Transform tr, System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes)
    // Offset: 0x29E7D84
    void GetClosestWalkableNodesToChildrenRecursively(::UnityEngine::Transform* tr, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes);
    // private System.Void PickNRandomNodes(System.Int32 count, System.Collections.Generic.List`1<Pathfinding.GraphNode> buffer)
    // Offset: 0x29E81C4
    void PickNRandomNodes(int count, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* buffer);
    // private Pathfinding.GraphNode PickAnyWalkableNode()
    // Offset: 0x29E8368
    ::Pathfinding::GraphNode* PickAnyWalkableNode();
    // public System.Void RecalculatePivots()
    // Offset: 0x29E84EC
    void RecalculatePivots();
    // public System.Void RecalculateCosts()
    // Offset: 0x29E88F4
    void RecalculateCosts();
    // private System.Void ApplyGridGraphEndpointSpecialCase()
    // Offset: 0x29E8C30
    void ApplyGridGraphEndpointSpecialCase();
    // public System.Void OnDrawGizmos()
    // Offset: 0x29E9100
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x29E9264
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EuclideanEmbedding* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EuclideanEmbedding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EuclideanEmbedding*, creationType>()));
    }
  }; // Pathfinding.EuclideanEmbedding
  #pragma pack(pop)
  static check_size<sizeof(EuclideanEmbedding), 72 + sizeof(::Il2CppObject*)> __Pathfinding_EuclideanEmbeddingSizeCheck;
  static_assert(sizeof(EuclideanEmbedding) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::GetRandom
// Il2CppName: GetRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::GetRandom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "GetRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)(int)>(&Pathfinding::EuclideanEmbedding::EnsureCapacity)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::GetHeuristic
// Il2CppName: GetHeuristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::EuclideanEmbedding::*)(int, int)>(&Pathfinding::EuclideanEmbedding::GetHeuristic)> {
  static const MethodInfo* get() {
    static auto* nodeIndex1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeIndex2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "GetHeuristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeIndex1, nodeIndex2});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::GetClosestWalkableNodesToChildrenRecursively
// Il2CppName: GetClosestWalkableNodesToChildrenRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)(::UnityEngine::Transform*, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::EuclideanEmbedding::GetClosestWalkableNodesToChildrenRecursively)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "GetClosestWalkableNodesToChildrenRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr, nodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::PickNRandomNodes
// Il2CppName: PickNRandomNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)(int, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::EuclideanEmbedding::PickNRandomNodes)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "PickNRandomNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::PickAnyWalkableNode
// Il2CppName: PickAnyWalkableNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::PickAnyWalkableNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "PickAnyWalkableNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::RecalculatePivots
// Il2CppName: RecalculatePivots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::RecalculatePivots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "RecalculatePivots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::RecalculateCosts
// Il2CppName: RecalculateCosts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::RecalculateCosts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "RecalculateCosts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::ApplyGridGraphEndpointSpecialCase
// Il2CppName: ApplyGridGraphEndpointSpecialCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::ApplyGridGraphEndpointSpecialCase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "ApplyGridGraphEndpointSpecialCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::*)()>(&Pathfinding::EuclideanEmbedding::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
