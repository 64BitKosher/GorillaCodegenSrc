// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AdvancedSmooth
#include "Pathfinding/AdvancedSmooth.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AdvancedSmooth::TurnConstructor);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AdvancedSmooth::TurnConstructor*, "Pathfinding", "AdvancedSmooth/TurnConstructor");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AdvancedSmooth/TurnConstructor
  // [TokenAttribute] Offset: FFFFFFFF
  class AdvancedSmooth::TurnConstructor : public ::Il2CppObject {
    public:
    public:
    // public System.Single constantBias
    // Size: 0x4
    // Offset: 0x10
    float constantBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single factorBias
    // Size: 0x4
    // Offset: 0x14
    float factorBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public System.Single turningRadius
    static float _get_turningRadius();
    // Set static field: static public System.Single turningRadius
    static void _set_turningRadius(float value);
    // static field const value: static public System.Double ThreeSixtyRadians
    static constexpr const double ThreeSixtyRadians = 6.283185307179586;
    // Get static field: static public System.Double ThreeSixtyRadians
    static double _get_ThreeSixtyRadians();
    // Set static field: static public System.Double ThreeSixtyRadians
    static void _set_ThreeSixtyRadians(double value);
    // Get static field: static public UnityEngine.Vector3 prev
    static ::UnityEngine::Vector3 _get_prev();
    // Set static field: static public UnityEngine.Vector3 prev
    static void _set_prev(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 current
    static ::UnityEngine::Vector3 _get_current();
    // Set static field: static public UnityEngine.Vector3 current
    static void _set_current(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 next
    static ::UnityEngine::Vector3 _get_next();
    // Set static field: static public UnityEngine.Vector3 next
    static void _set_next(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 t1
    static ::UnityEngine::Vector3 _get_t1();
    // Set static field: static public UnityEngine.Vector3 t1
    static void _set_t1(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 t2
    static ::UnityEngine::Vector3 _get_t2();
    // Set static field: static public UnityEngine.Vector3 t2
    static void _set_t2(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 normal
    static ::UnityEngine::Vector3 _get_normal();
    // Set static field: static public UnityEngine.Vector3 normal
    static void _set_normal(::UnityEngine::Vector3 value);
    // Get static field: static public UnityEngine.Vector3 prevNormal
    static ::UnityEngine::Vector3 _get_prevNormal();
    // Set static field: static public UnityEngine.Vector3 prevNormal
    static void _set_prevNormal(::UnityEngine::Vector3 value);
    // Get static field: static public System.Boolean changedPreviousTangent
    static bool _get_changedPreviousTangent();
    // Set static field: static public System.Boolean changedPreviousTangent
    static void _set_changedPreviousTangent(bool value);
    // Get instance field reference: public System.Single constantBias
    [[deprecated("Use field access instead!")]] float& dyn_constantBias();
    // Get instance field reference: public System.Single factorBias
    [[deprecated("Use field access instead!")]] float& dyn_factorBias();
    // public System.Void Prepare(System.Int32 i, UnityEngine.Vector3[] vectorPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Prepare(int i, ::ArrayW<::UnityEngine::Vector3> vectorPath);
    // public System.Void OnTangentUpdate()
    // Offset: 0x29F1CC4
    void OnTangentUpdate();
    // public System.Void PointToTangent(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList)
    // Offset: 0x29F1CC8
    void PointToTangent(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>* turnList);
    // public System.Void TangentToPoint(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList)
    // Offset: 0x29F1CCC
    void TangentToPoint(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>* turnList);
    // public System.Void TangentToTangent(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList)
    // Offset: 0x29F1CD0
    void TangentToTangent(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>* turnList);
    // public System.Void GetPath(Pathfinding.AdvancedSmooth/Turn turn, System.Collections.Generic.List`1<UnityEngine.Vector3> output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetPath(::Pathfinding::AdvancedSmooth::Turn turn, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* output);
    // static public System.Void Setup(System.Int32 i, UnityEngine.Vector3[] vectorPath)
    // Offset: 0x29EEBB4
    static void Setup(int i, ::ArrayW<::UnityEngine::Vector3> vectorPath);
    // static public System.Void PostPrepare()
    // Offset: 0x29EF03C
    static void PostPrepare();
    // public System.Void AddCircleSegment(System.Double startAngle, System.Double endAngle, System.Boolean clockwise, UnityEngine.Vector3 center, System.Collections.Generic.List`1<UnityEngine.Vector3> output, System.Single radius)
    // Offset: 0x29F1288
    void AddCircleSegment(double startAngle, double endAngle, bool clockwise, ::UnityEngine::Vector3 center, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* output, float radius);
    // public System.Void DebugCircleSegment(UnityEngine.Vector3 center, System.Double startAngle, System.Double endAngle, System.Double radius, UnityEngine.Color color)
    // Offset: 0x29F1CD4
    void DebugCircleSegment(::UnityEngine::Vector3 center, double startAngle, double endAngle, double radius, ::UnityEngine::Color color);
    // public System.Void DebugCircle(UnityEngine.Vector3 center, System.Double radius, UnityEngine.Color color)
    // Offset: 0x29F1E60
    void DebugCircle(::UnityEngine::Vector3 center, double radius, ::UnityEngine::Color color);
    // public System.Double GetLengthFromAngle(System.Double angle, System.Double radius)
    // Offset: 0x29F043C
    double GetLengthFromAngle(double angle, double radius);
    // public System.Double ClockwiseAngle(System.Double from, System.Double to)
    // Offset: 0x29F03B4
    double ClockwiseAngle(double from, double to);
    // public System.Double CounterClockwiseAngle(System.Double from, System.Double to)
    // Offset: 0x29F03F8
    double CounterClockwiseAngle(double from, double to);
    // public UnityEngine.Vector3 AngleToVector(System.Double a)
    // Offset: 0x29F0444
    ::UnityEngine::Vector3 AngleToVector(double a);
    // public System.Double ToDegrees(System.Double rad)
    // Offset: 0x29F2000
    double ToDegrees(double rad);
    // public System.Double ClampAngle(System.Double a)
    // Offset: 0x29F1FC0
    double ClampAngle(double a);
    // public System.Double Atan2(UnityEngine.Vector3 v)
    // Offset: 0x29EF4F0
    double Atan2(::UnityEngine::Vector3 v);
    // protected System.Void .ctor()
    // Offset: 0x29F1544
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancedSmooth::TurnConstructor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AdvancedSmooth::TurnConstructor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancedSmooth::TurnConstructor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29F2010
    static void _cctor();
  }; // Pathfinding.AdvancedSmooth/TurnConstructor
  #pragma pack(pop)
  static check_size<sizeof(AdvancedSmooth::TurnConstructor), 20 + sizeof(float)> __Pathfinding_AdvancedSmooth_TurnConstructorSizeCheck;
  static_assert(sizeof(AdvancedSmooth::TurnConstructor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(int, ::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::AdvancedSmooth::TurnConstructor::Prepare)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vectorPath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, vectorPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::OnTangentUpdate
// Il2CppName: OnTangentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)()>(&Pathfinding::AdvancedSmooth::TurnConstructor::OnTangentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "OnTangentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::PointToTangent
// Il2CppName: PointToTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>*)>(&Pathfinding::AdvancedSmooth::TurnConstructor::PointToTangent)> {
  static const MethodInfo* get() {
    static auto* turnList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "PointToTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turnList});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::TangentToPoint
// Il2CppName: TangentToPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>*)>(&Pathfinding::AdvancedSmooth::TurnConstructor::TangentToPoint)> {
  static const MethodInfo* get() {
    static auto* turnList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "TangentToPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turnList});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::TangentToTangent
// Il2CppName: TangentToTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>*)>(&Pathfinding::AdvancedSmooth::TurnConstructor::TangentToTangent)> {
  static const MethodInfo* get() {
    static auto* turnList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "TangentToTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turnList});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::Pathfinding::AdvancedSmooth::Turn, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::AdvancedSmooth::TurnConstructor::GetPath)> {
  static const MethodInfo* get() {
    static auto* turn = &::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turn, output});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::AdvancedSmooth::TurnConstructor::Setup)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vectorPath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, vectorPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::PostPrepare
// Il2CppName: PostPrepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::AdvancedSmooth::TurnConstructor::PostPrepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "PostPrepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::AddCircleSegment
// Il2CppName: AddCircleSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double, double, bool, ::UnityEngine::Vector3, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float)>(&Pathfinding::AdvancedSmooth::TurnConstructor::AddCircleSegment)> {
  static const MethodInfo* get() {
    static auto* startAngle = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* endAngle = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* clockwise = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "AddCircleSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startAngle, endAngle, clockwise, center, output, radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::DebugCircleSegment
// Il2CppName: DebugCircleSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::UnityEngine::Vector3, double, double, double, ::UnityEngine::Color)>(&Pathfinding::AdvancedSmooth::TurnConstructor::DebugCircleSegment)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startAngle = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* endAngle = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "DebugCircleSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, startAngle, endAngle, radius, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::DebugCircle
// Il2CppName: DebugCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::UnityEngine::Vector3, double, ::UnityEngine::Color)>(&Pathfinding::AdvancedSmooth::TurnConstructor::DebugCircle)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "DebugCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::GetLengthFromAngle
// Il2CppName: GetLengthFromAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double, double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::GetLengthFromAngle)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "GetLengthFromAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::ClockwiseAngle
// Il2CppName: ClockwiseAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double, double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::ClockwiseAngle)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "ClockwiseAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::CounterClockwiseAngle
// Il2CppName: CounterClockwiseAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double, double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::CounterClockwiseAngle)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "CounterClockwiseAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::AngleToVector
// Il2CppName: AngleToVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::AngleToVector)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "AngleToVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::ToDegrees
// Il2CppName: ToDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::ToDegrees)> {
  static const MethodInfo* get() {
    static auto* rad = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "ToDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rad});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::ClampAngle
// Il2CppName: ClampAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(double)>(&Pathfinding::AdvancedSmooth::TurnConstructor::ClampAngle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "ClampAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::Atan2
// Il2CppName: Atan2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::AdvancedSmooth::TurnConstructor::*)(::UnityEngine::Vector3)>(&Pathfinding::AdvancedSmooth::TurnConstructor::Atan2)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), "Atan2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::TurnConstructor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::AdvancedSmooth::TurnConstructor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::TurnConstructor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
