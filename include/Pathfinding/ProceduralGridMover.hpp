// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridNodeBase
  class GridNodeBase;
  // Forward declaring type: GridGraph
  class GridGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ProceduralGridMover
  class ProceduralGridMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ProceduralGridMover);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ProceduralGridMover*, "Pathfinding", "ProceduralGridMover");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ProceduralGridMover
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class ProceduralGridMover : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Nested type: ::Pathfinding::ProceduralGridMover::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // Nested type: ::Pathfinding::ProceduralGridMover::$UpdateGraphCoroutine$d__13
    class $UpdateGraphCoroutine$d__13;
    public:
    // public System.Single updateDistance
    // Size: 0x4
    // Offset: 0x24
    float updateDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Pathfinding.GridNodeBase[] buffer
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Pathfinding::GridNodeBase*> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GridNodeBase*>) == 0x8);
    // private System.Boolean <updatingGraph>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool updatingGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updatingGraph and: graph
    char __padding3[0x7] = {};
    // public Pathfinding.GridGraph graph
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::GridGraph* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::GridGraph*) == 0x8);
    // public System.Int32 graphIndex
    // Size: 0x4
    // Offset: 0x48
    int graphIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Single updateDistance
    [[deprecated("Use field access instead!")]] float& dyn_updateDistance();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: private Pathfinding.GridNodeBase[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GridNodeBase*>& dyn_buffer();
    // Get instance field reference: private System.Boolean <updatingGraph>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$updatingGraph$k__BackingField();
    // Get instance field reference: public Pathfinding.GridGraph graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::GridGraph*& dyn_graph();
    // Get instance field reference: public System.Int32 graphIndex
    [[deprecated("Use field access instead!")]] int& dyn_graphIndex();
    // public System.Boolean get_updatingGraph()
    // Offset: 0x2A0BA10
    bool get_updatingGraph();
    // private System.Void set_updatingGraph(System.Boolean value)
    // Offset: 0x2A0BA18
    void set_updatingGraph(bool value);
    // private System.Void Start()
    // Offset: 0x2A0BA24
    void Start();
    // private System.Void Update()
    // Offset: 0x2A0BF5C
    void Update();
    // private UnityEngine.Vector3 PointToGraphSpace(UnityEngine.Vector3 p)
    // Offset: 0x2A0BFFC
    ::UnityEngine::Vector3 PointToGraphSpace(::UnityEngine::Vector3 p);
    // public System.Void UpdateGraph()
    // Offset: 0x2A0BE18
    void UpdateGraph();
    // private System.Collections.IEnumerator UpdateGraphCoroutine()
    // Offset: 0x2A0C028
    ::System::Collections::IEnumerator* UpdateGraphCoroutine();
    // public System.Void .ctor()
    // Offset: 0x2A0C0BC
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralGridMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ProceduralGridMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralGridMover*, creationType>()));
    }
  }; // Pathfinding.ProceduralGridMover
  #pragma pack(pop)
  static check_size<sizeof(ProceduralGridMover), 72 + sizeof(int)> __Pathfinding_ProceduralGridMoverSizeCheck;
  static_assert(sizeof(ProceduralGridMover) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::get_updatingGraph
// Il2CppName: get_updatingGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ProceduralGridMover::*)()>(&Pathfinding::ProceduralGridMover::get_updatingGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "get_updatingGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::set_updatingGraph
// Il2CppName: set_updatingGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::*)(bool)>(&Pathfinding::ProceduralGridMover::set_updatingGraph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "set_updatingGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::*)()>(&Pathfinding::ProceduralGridMover::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::*)()>(&Pathfinding::ProceduralGridMover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::PointToGraphSpace
// Il2CppName: PointToGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::ProceduralGridMover::*)(::UnityEngine::Vector3)>(&Pathfinding::ProceduralGridMover::PointToGraphSpace)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "PointToGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::UpdateGraph
// Il2CppName: UpdateGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ProceduralGridMover::*)()>(&Pathfinding::ProceduralGridMover::UpdateGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "UpdateGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::UpdateGraphCoroutine
// Il2CppName: UpdateGraphCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::ProceduralGridMover::*)()>(&Pathfinding::ProceduralGridMover::UpdateGraphCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ProceduralGridMover*), "UpdateGraphCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ProceduralGridMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
