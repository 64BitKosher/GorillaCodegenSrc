// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphMeta
  class GraphMeta;
  // Forward declaring type: SerializeSettings
  class SerializeSettings;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AstarData
  class AstarData;
  // Forward declaring type: NavGraph
  class NavGraph;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipFile
  class ZipFile;
  // Forward declaring type: ZipEntry
  class ZipEntry;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MemoryStream
  class MemoryStream;
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: UTF8Encoding
  class UTF8Encoding;
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Pathfinding.Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: AstarSerializer
  class AstarSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Serialization::AstarSerializer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Serialization::AstarSerializer*, "Pathfinding.Serialization", "AstarSerializer");
// Type namespace: Pathfinding.Serialization
namespace Pathfinding::Serialization {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Serialization.AstarSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  class AstarSerializer : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass45_0
    class $$c__DisplayClass45_0;
    // Nested type: ::Pathfinding::Serialization::AstarSerializer::$$c__DisplayClass46_0
    class $$c__DisplayClass46_0;
    public:
    // private Pathfinding.AstarData data
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::AstarData* data;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarData*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipFile zip
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Ionic::Zip::ZipFile* zip;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipFile*) == 0x8);
    // private System.IO.MemoryStream zipStream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::MemoryStream* zipStream;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    // private Pathfinding.Serialization.GraphMeta meta
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Serialization::GraphMeta* meta;
    // Field size check
    static_assert(sizeof(::Pathfinding::Serialization::GraphMeta*) == 0x8);
    // private Pathfinding.Serialization.SerializeSettings settings
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::Serialization::SerializeSettings* settings;
    // Field size check
    static_assert(sizeof(::Pathfinding::Serialization::SerializeSettings*) == 0x8);
    // private UnityEngine.GameObject contextRoot
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* contextRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private Pathfinding.NavGraph[] graphs
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Pathfinding::NavGraph*> graphs;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::NavGraph*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Pathfinding.NavGraph,System.Int32> graphIndexInZip
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::NavGraph*, int>* graphIndexInZip;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::NavGraph*, int>*) == 0x8);
    // private System.Int32 graphIndexOffset
    // Size: 0x4
    // Offset: 0x50
    int graphIndexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 checksum
    // Size: 0x4
    // Offset: 0x54
    uint checksum;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Text.UTF8Encoding encoding
    // Size: 0x8
    // Offset: 0x58
    ::System::Text::UTF8Encoding* encoding;
    // Field size check
    static_assert(sizeof(::System::Text::UTF8Encoding*) == 0x8);
    public:
    // static field const value: static private System.String binaryExt
    static constexpr const char* binaryExt = ".binary";
    // Get static field: static private System.String binaryExt
    static ::StringW _get_binaryExt();
    // Set static field: static private System.String binaryExt
    static void _set_binaryExt(::StringW value);
    // static field const value: static private System.String jsonExt
    static constexpr const char* jsonExt = ".json";
    // Get static field: static private System.String jsonExt
    static ::StringW _get_jsonExt();
    // Set static field: static private System.String jsonExt
    static void _set_jsonExt(::StringW value);
    // Get static field: static private System.Text.StringBuilder _stringBuilder
    static ::System::Text::StringBuilder* _get__stringBuilder();
    // Set static field: static private System.Text.StringBuilder _stringBuilder
    static void _set__stringBuilder(::System::Text::StringBuilder* value);
    // Get static field: static public readonly System.Version V3_8_3
    static ::System::Version* _get_V3_8_3();
    // Set static field: static public readonly System.Version V3_8_3
    static void _set_V3_8_3(::System::Version* value);
    // Get static field: static public readonly System.Version V3_9_0
    static ::System::Version* _get_V3_9_0();
    // Set static field: static public readonly System.Version V3_9_0
    static void _set_V3_9_0(::System::Version* value);
    // Get static field: static public readonly System.Version V4_1_0
    static ::System::Version* _get_V4_1_0();
    // Set static field: static public readonly System.Version V4_1_0
    static void _set_V4_1_0(::System::Version* value);
    // Get instance field reference: private Pathfinding.AstarData data
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarData*& dyn_data();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipFile zip
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipFile*& dyn_zip();
    // Get instance field reference: private System.IO.MemoryStream zipStream
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn_zipStream();
    // Get instance field reference: private Pathfinding.Serialization.GraphMeta meta
    [[deprecated("Use field access instead!")]] ::Pathfinding::Serialization::GraphMeta*& dyn_meta();
    // Get instance field reference: private Pathfinding.Serialization.SerializeSettings settings
    [[deprecated("Use field access instead!")]] ::Pathfinding::Serialization::SerializeSettings*& dyn_settings();
    // Get instance field reference: private UnityEngine.GameObject contextRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_contextRoot();
    // Get instance field reference: private Pathfinding.NavGraph[] graphs
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::NavGraph*>& dyn_graphs();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Pathfinding.NavGraph,System.Int32> graphIndexInZip
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::NavGraph*, int>*& dyn_graphIndexInZip();
    // Get instance field reference: private System.Int32 graphIndexOffset
    [[deprecated("Use field access instead!")]] int& dyn_graphIndexOffset();
    // Get instance field reference: private System.UInt32 checksum
    [[deprecated("Use field access instead!")]] uint& dyn_checksum();
    // Get instance field reference: private System.Text.UTF8Encoding encoding
    [[deprecated("Use field access instead!")]] ::System::Text::UTF8Encoding*& dyn_encoding();
    // static private System.Text.StringBuilder GetStringBuilder()
    // Offset: 0x2A1F4B4
    static ::System::Text::StringBuilder* GetStringBuilder();
    // public System.Void .ctor(Pathfinding.AstarData data, UnityEngine.GameObject contextRoot)
    // Offset: 0x2A1F52C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarSerializer* New_ctor(::Pathfinding::AstarData* data, ::UnityEngine::GameObject* contextRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Serialization::AstarSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarSerializer*, creationType>(data, contextRoot)));
    }
    // public System.Void .ctor(Pathfinding.AstarData data, Pathfinding.Serialization.SerializeSettings settings, UnityEngine.GameObject contextRoot)
    // Offset: 0x2A1F5C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarSerializer* New_ctor(::Pathfinding::AstarData* data, ::Pathfinding::Serialization::SerializeSettings* settings, ::UnityEngine::GameObject* contextRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Serialization::AstarSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarSerializer*, creationType>(data, settings, contextRoot)));
    }
    // public System.Void SetGraphIndexOffset(System.Int32 offset)
    // Offset: 0x2A1F680
    void SetGraphIndexOffset(int offset);
    // private System.Void AddChecksum(System.Byte[] bytes)
    // Offset: 0x2A1F688
    void AddChecksum(::ArrayW<uint8_t> bytes);
    // private System.Void AddEntry(System.String name, System.Byte[] bytes)
    // Offset: 0x2A1F6B0
    void AddEntry(::StringW name, ::ArrayW<uint8_t> bytes);
    // public System.UInt32 GetChecksum()
    // Offset: 0x2A1F6CC
    uint GetChecksum();
    // public System.Void OpenSerialize()
    // Offset: 0x2A1F6D4
    void OpenSerialize();
    // public System.Byte[] CloseSerialize()
    // Offset: 0x2A1F7F8
    ::ArrayW<uint8_t> CloseSerialize();
    // public System.Void SerializeGraphs(Pathfinding.NavGraph[] _graphs)
    // Offset: 0x2A2002C
    void SerializeGraphs(::ArrayW<::Pathfinding::NavGraph*> _graphs);
    // private System.Byte[] SerializeMeta()
    // Offset: 0x2A1FC10
    ::ArrayW<uint8_t> SerializeMeta();
    // public System.Byte[] Serialize(Pathfinding.NavGraph graph)
    // Offset: 0x2A20218
    ::ArrayW<uint8_t> Serialize(::Pathfinding::NavGraph* graph);
    // public System.Void SerializeNodes()
    // Offset: 0x2A20360
    void SerializeNodes();
    // static private System.Int32 GetMaxNodeIndexInAllGraphs(Pathfinding.NavGraph[] graphs)
    // Offset: 0x2A20364
    static int GetMaxNodeIndexInAllGraphs(::ArrayW<::Pathfinding::NavGraph*> graphs);
    // static private System.Byte[] SerializeNodeIndices(Pathfinding.NavGraph[] graphs)
    // Offset: 0x2A204A0
    static ::ArrayW<uint8_t> SerializeNodeIndices(::ArrayW<::Pathfinding::NavGraph*> graphs);
    // static private System.Byte[] SerializeGraphExtraInfo(Pathfinding.NavGraph graph)
    // Offset: 0x2A20730
    static ::ArrayW<uint8_t> SerializeGraphExtraInfo(::Pathfinding::NavGraph* graph);
    // static private System.Byte[] SerializeGraphNodeReferences(Pathfinding.NavGraph graph)
    // Offset: 0x2A208A0
    static ::ArrayW<uint8_t> SerializeGraphNodeReferences(::Pathfinding::NavGraph* graph);
    // public System.Void SerializeExtraInfo()
    // Offset: 0x2A20A38
    void SerializeExtraInfo();
    // private System.Byte[] SerializeNodeLinks()
    // Offset: 0x2A20CFC
    ::ArrayW<uint8_t> SerializeNodeLinks();
    // private Pathfinding.Ionic.Zip.ZipEntry GetEntry(System.String name)
    // Offset: 0x2A20E00
    ::Pathfinding::Ionic::Zip::ZipEntry* GetEntry(::StringW name);
    // private System.Boolean ContainsEntry(System.String name)
    // Offset: 0x2A20E1C
    bool ContainsEntry(::StringW name);
    // public System.Boolean OpenDeserialize(System.Byte[] bytes)
    // Offset: 0x2A20E44
    bool OpenDeserialize(::ArrayW<uint8_t> bytes);
    // static private System.Version FullyDefinedVersion(System.Version v)
    // Offset: 0x2A218CC
    static ::System::Version* FullyDefinedVersion(::System::Version* v);
    // public System.Void CloseDeserialize()
    // Offset: 0x2A2195C
    void CloseDeserialize();
    // private Pathfinding.NavGraph DeserializeGraph(System.Int32 zipIndex, System.Int32 graphIndex, System.Type[] availableGraphTypes)
    // Offset: 0x2A219B8
    ::Pathfinding::NavGraph* DeserializeGraph(int zipIndex, int graphIndex, ::ArrayW<::System::Type*> availableGraphTypes);
    // public Pathfinding.NavGraph[] DeserializeGraphs(System.Type[] availableGraphTypes)
    // Offset: 0x2A222C4
    ::ArrayW<::Pathfinding::NavGraph*> DeserializeGraphs(::ArrayW<::System::Type*> availableGraphTypes);
    // private System.Boolean DeserializeExtraInfo(Pathfinding.NavGraph graph)
    // Offset: 0x2A224C4
    bool DeserializeExtraInfo(::Pathfinding::NavGraph* graph);
    // private System.Boolean AnyDestroyedNodesInGraphs()
    // Offset: 0x2A22694
    bool AnyDestroyedNodesInGraphs();
    // private Pathfinding.GraphNode[] DeserializeNodeReferenceMap()
    // Offset: 0x2A227CC
    ::ArrayW<::Pathfinding::GraphNode*> DeserializeNodeReferenceMap();
    // private System.Void DeserializeNodeReferences(Pathfinding.NavGraph graph, Pathfinding.GraphNode[] int2Node)
    // Offset: 0x2A22C60
    void DeserializeNodeReferences(::Pathfinding::NavGraph* graph, ::ArrayW<::Pathfinding::GraphNode*> int2Node);
    // public System.Void DeserializeExtraInfo()
    // Offset: 0x2A22ED4
    void DeserializeExtraInfo();
    // private System.Void DeserializeNodeLinks(Pathfinding.GraphNode[] int2Node)
    // Offset: 0x2A23004
    void DeserializeNodeLinks(::ArrayW<::Pathfinding::GraphNode*> int2Node);
    // public System.Void PostDeserialization()
    // Offset: 0x2A23118
    void PostDeserialization();
    // public System.Void DeserializeEditorSettingsCompatibility()
    // Offset: 0x2A2324C
    void DeserializeEditorSettingsCompatibility();
    // static private System.IO.BinaryReader GetBinaryReader(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x2A2220C
    static ::System::IO::BinaryReader* GetBinaryReader(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // static private System.String GetString(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x2A22064
    static ::StringW GetString(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // private Pathfinding.Serialization.GraphMeta DeserializeMeta(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x2A21350
    ::Pathfinding::Serialization::GraphMeta* DeserializeMeta(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // private Pathfinding.Serialization.GraphMeta DeserializeBinaryMeta(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x2A2148C
    ::Pathfinding::Serialization::GraphMeta* DeserializeBinaryMeta(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // static public System.Void SaveToFile(System.String path, System.Byte[] data)
    // Offset: 0x2A23430
    static void SaveToFile(::StringW path, ::ArrayW<uint8_t> data);
    // static public System.Byte[] LoadFromFile(System.String path)
    // Offset: 0x2A235E8
    static ::ArrayW<uint8_t> LoadFromFile(::StringW path);
    // static private System.Void .cctor()
    // Offset: 0x2A237F0
    static void _cctor();
  }; // Pathfinding.Serialization.AstarSerializer
  #pragma pack(pop)
  static check_size<sizeof(AstarSerializer), 88 + sizeof(::System::Text::UTF8Encoding*)> __Pathfinding_Serialization_AstarSerializerSizeCheck;
  static_assert(sizeof(AstarSerializer) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetStringBuilder
// Il2CppName: GetStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)()>(&Pathfinding::Serialization::AstarSerializer::GetStringBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SetGraphIndexOffset
// Il2CppName: SetGraphIndexOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(int)>(&Pathfinding::Serialization::AstarSerializer::SetGraphIndexOffset)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SetGraphIndexOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::AddChecksum
// Il2CppName: AddChecksum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(::ArrayW<uint8_t>)>(&Pathfinding::Serialization::AstarSerializer::AddChecksum)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "AddChecksum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::AddEntry
// Il2CppName: AddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(::StringW, ::ArrayW<uint8_t>)>(&Pathfinding::Serialization::AstarSerializer::AddEntry)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "AddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bytes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetChecksum
// Il2CppName: GetChecksum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::GetChecksum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetChecksum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::OpenSerialize
// Il2CppName: OpenSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::OpenSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "OpenSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::CloseSerialize
// Il2CppName: CloseSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::CloseSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "CloseSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeGraphs
// Il2CppName: SerializeGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(::ArrayW<::Pathfinding::NavGraph*>)>(&Pathfinding::Serialization::AstarSerializer::SerializeGraphs)> {
  static const MethodInfo* get() {
    static auto* _graphs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_graphs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeMeta
// Il2CppName: SerializeMeta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::SerializeMeta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeMeta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Serialization::AstarSerializer::*)(::Pathfinding::NavGraph*)>(&Pathfinding::Serialization::AstarSerializer::Serialize)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeNodes
// Il2CppName: SerializeNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::SerializeNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetMaxNodeIndexInAllGraphs
// Il2CppName: GetMaxNodeIndexInAllGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Pathfinding::NavGraph*>)>(&Pathfinding::Serialization::AstarSerializer::GetMaxNodeIndexInAllGraphs)> {
  static const MethodInfo* get() {
    static auto* graphs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetMaxNodeIndexInAllGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeNodeIndices
// Il2CppName: SerializeNodeIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<::Pathfinding::NavGraph*>)>(&Pathfinding::Serialization::AstarSerializer::SerializeNodeIndices)> {
  static const MethodInfo* get() {
    static auto* graphs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeNodeIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeGraphExtraInfo
// Il2CppName: SerializeGraphExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Pathfinding::NavGraph*)>(&Pathfinding::Serialization::AstarSerializer::SerializeGraphExtraInfo)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeGraphExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeGraphNodeReferences
// Il2CppName: SerializeGraphNodeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Pathfinding::NavGraph*)>(&Pathfinding::Serialization::AstarSerializer::SerializeGraphNodeReferences)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeGraphNodeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SerializeNodeLinks
// Il2CppName: SerializeNodeLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::SerializeNodeLinks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SerializeNodeLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetEntry
// Il2CppName: GetEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (Pathfinding::Serialization::AstarSerializer::*)(::StringW)>(&Pathfinding::Serialization::AstarSerializer::GetEntry)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::ContainsEntry
// Il2CppName: ContainsEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Serialization::AstarSerializer::*)(::StringW)>(&Pathfinding::Serialization::AstarSerializer::ContainsEntry)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "ContainsEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::OpenDeserialize
// Il2CppName: OpenDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Serialization::AstarSerializer::*)(::ArrayW<uint8_t>)>(&Pathfinding::Serialization::AstarSerializer::OpenDeserialize)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "OpenDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::FullyDefinedVersion
// Il2CppName: FullyDefinedVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)(::System::Version*)>(&Pathfinding::Serialization::AstarSerializer::FullyDefinedVersion)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Version")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "FullyDefinedVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::CloseDeserialize
// Il2CppName: CloseDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::CloseDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "CloseDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeGraph
// Il2CppName: DeserializeGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavGraph* (Pathfinding::Serialization::AstarSerializer::*)(int, int, ::ArrayW<::System::Type*>)>(&Pathfinding::Serialization::AstarSerializer::DeserializeGraph)> {
  static const MethodInfo* get() {
    static auto* zipIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* graphIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* availableGraphTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zipIndex, graphIndex, availableGraphTypes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeGraphs
// Il2CppName: DeserializeGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::NavGraph*> (Pathfinding::Serialization::AstarSerializer::*)(::ArrayW<::System::Type*>)>(&Pathfinding::Serialization::AstarSerializer::DeserializeGraphs)> {
  static const MethodInfo* get() {
    static auto* availableGraphTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{availableGraphTypes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Serialization::AstarSerializer::*)(::Pathfinding::NavGraph*)>(&Pathfinding::Serialization::AstarSerializer::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::AnyDestroyedNodesInGraphs
// Il2CppName: AnyDestroyedNodesInGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::AnyDestroyedNodesInGraphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "AnyDestroyedNodesInGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeNodeReferenceMap
// Il2CppName: DeserializeNodeReferenceMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::GraphNode*> (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::DeserializeNodeReferenceMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeNodeReferenceMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeNodeReferences
// Il2CppName: DeserializeNodeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(::Pathfinding::NavGraph*, ::ArrayW<::Pathfinding::GraphNode*>)>(&Pathfinding::Serialization::AstarSerializer::DeserializeNodeReferences)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    static auto* int2Node = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeNodeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, int2Node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeNodeLinks
// Il2CppName: DeserializeNodeLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)(::ArrayW<::Pathfinding::GraphNode*>)>(&Pathfinding::Serialization::AstarSerializer::DeserializeNodeLinks)> {
  static const MethodInfo* get() {
    static auto* int2Node = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeNodeLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{int2Node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::PostDeserialization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeEditorSettingsCompatibility
// Il2CppName: DeserializeEditorSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Serialization::AstarSerializer::*)()>(&Pathfinding::Serialization::AstarSerializer::DeserializeEditorSettingsCompatibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeEditorSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetBinaryReader
// Il2CppName: GetBinaryReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::BinaryReader* (*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Serialization::AstarSerializer::GetBinaryReader)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetBinaryReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Serialization::AstarSerializer::GetString)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeMeta
// Il2CppName: DeserializeMeta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Serialization::GraphMeta* (Pathfinding::Serialization::AstarSerializer::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Serialization::AstarSerializer::DeserializeMeta)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeMeta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::DeserializeBinaryMeta
// Il2CppName: DeserializeBinaryMeta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Serialization::GraphMeta* (Pathfinding::Serialization::AstarSerializer::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Serialization::AstarSerializer::DeserializeBinaryMeta)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "DeserializeBinaryMeta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::SaveToFile
// Il2CppName: SaveToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<uint8_t>)>(&Pathfinding::Serialization::AstarSerializer::SaveToFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "SaveToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, data});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::LoadFromFile
// Il2CppName: LoadFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&Pathfinding::Serialization::AstarSerializer::LoadFromFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), "LoadFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Serialization::AstarSerializer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Serialization::AstarSerializer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Serialization::AstarSerializer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
