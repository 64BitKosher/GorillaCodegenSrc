// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: Int3PolygonClipper
  struct Int3PolygonClipper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::Int3PolygonClipper, "Pathfinding.Voxels", "Int3PolygonClipper");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Voxels.Int3PolygonClipper
  // [TokenAttribute] Offset: FFFFFFFF
  struct Int3PolygonClipper/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single[] clipPolygonCache
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> clipPolygonCache;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32[] clipPolygonIntCache
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<int> clipPolygonIntCache;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating value type constructor for type: Int3PolygonClipper
    constexpr Int3PolygonClipper(::ArrayW<float> clipPolygonCache_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<int> clipPolygonIntCache_ = ::ArrayW<int>(static_cast<void*>(nullptr))) noexcept : clipPolygonCache{clipPolygonCache_}, clipPolygonIntCache{clipPolygonIntCache_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single[] clipPolygonCache
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_clipPolygonCache();
    // Get instance field reference: private System.Int32[] clipPolygonIntCache
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_clipPolygonIntCache();
    // public System.Void Init()
    // Offset: 0x2A1AA94
    void Init();
    // public System.Int32 ClipPolygon(Pathfinding.Int3[] vIn, System.Int32 n, Pathfinding.Int3[] vOut, System.Int32 multi, System.Int32 offset, System.Int32 axis)
    // Offset: 0x2A1AB30
    int ClipPolygon(::ArrayW<::Pathfinding::Int3> vIn, int n, ::ArrayW<::Pathfinding::Int3> vOut, int multi, int offset, int axis);
  }; // Pathfinding.Voxels.Int3PolygonClipper
  #pragma pack(pop)
  static check_size<sizeof(Int3PolygonClipper), 8 + sizeof(::ArrayW<int>)> __Pathfinding_Voxels_Int3PolygonClipperSizeCheck;
  static_assert(sizeof(Int3PolygonClipper) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Voxels::Int3PolygonClipper::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Int3PolygonClipper::*)()>(&Pathfinding::Voxels::Int3PolygonClipper::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Int3PolygonClipper), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Int3PolygonClipper::ClipPolygon
// Il2CppName: ClipPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Voxels::Int3PolygonClipper::*)(::ArrayW<::Pathfinding::Int3>, int, ::ArrayW<::Pathfinding::Int3>, int, int, int)>(&Pathfinding::Voxels::Int3PolygonClipper::ClipPolygon)> {
  static const MethodInfo* get() {
    static auto* vIn = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vOut = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* multi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Int3PolygonClipper), "ClipPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vIn, n, vOut, multi, offset, axis});
  }
};
