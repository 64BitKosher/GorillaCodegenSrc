// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: VoxelContour
  struct VoxelContour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::VoxelContour, "Pathfinding.Voxels", "VoxelContour");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Voxels.VoxelContour
  // [TokenAttribute] Offset: FFFFFFFF
  struct VoxelContour/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 nverts
    // Size: 0x4
    // Offset: 0x0
    int nverts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nverts and: verts
    char __padding0[0x4] = {};
    // public System.Int32[] verts
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<int> verts;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] rverts
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> rverts;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 reg
    // Size: 0x4
    // Offset: 0x18
    int reg;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 area
    // Size: 0x4
    // Offset: 0x1C
    int area;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: VoxelContour
    constexpr VoxelContour(int nverts_ = {}, ::ArrayW<int> verts_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::ArrayW<int> rverts_ = ::ArrayW<int>(static_cast<void*>(nullptr)), int reg_ = {}, int area_ = {}) noexcept : nverts{nverts_}, verts{verts_}, rverts{rverts_}, reg{reg_}, area{area_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 nverts
    [[deprecated("Use field access instead!")]] int& dyn_nverts();
    // Get instance field reference: public System.Int32[] verts
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_verts();
    // Get instance field reference: public System.Int32[] rverts
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_rverts();
    // Get instance field reference: public System.Int32 reg
    [[deprecated("Use field access instead!")]] int& dyn_reg();
    // Get instance field reference: public System.Int32 area
    [[deprecated("Use field access instead!")]] int& dyn_area();
  }; // Pathfinding.Voxels.VoxelContour
  #pragma pack(pop)
  static check_size<sizeof(VoxelContour), 28 + sizeof(int)> __Pathfinding_Voxels_VoxelContourSizeCheck;
  static_assert(sizeof(VoxelContour) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
