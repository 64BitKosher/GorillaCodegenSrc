// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RecastGraph/RelevantGraphSurfaceMode
#include "Pathfinding/RecastGraph.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt16
#include "System/UInt16.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: RasterizationMesh
  class RasterizationMesh;
  // Forward declaring type: VoxelArea
  class VoxelArea;
  // Forward declaring type: VoxelContourSet
  class VoxelContourSet;
  // Forward declaring type: VoxelContour
  struct VoxelContour;
  // Forward declaring type: VoxelMesh
  struct VoxelMesh;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: Voxelize
  class Voxelize;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Voxels::Voxelize);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::Voxelize*, "Pathfinding.Voxels", "Voxelize");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Voxels.Voxelize
  // [TokenAttribute] Offset: FFFFFFFF
  class Voxelize : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> inputMeshes
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* inputMeshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*) == 0x8);
    // public readonly System.Int32 voxelWalkableClimb
    // Size: 0x4
    // Offset: 0x18
    int voxelWalkableClimb;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.UInt32 voxelWalkableHeight
    // Size: 0x4
    // Offset: 0x1C
    uint voxelWalkableHeight;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public readonly System.Single cellSize
    // Size: 0x4
    // Offset: 0x20
    float cellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single cellHeight
    // Size: 0x4
    // Offset: 0x24
    float cellHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 minRegionSize
    // Size: 0x4
    // Offset: 0x28
    int minRegionSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 borderSize
    // Size: 0x4
    // Offset: 0x2C
    int borderSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxEdgeLength
    // Size: 0x4
    // Offset: 0x30
    float maxEdgeLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSlope
    // Size: 0x4
    // Offset: 0x34
    float maxSlope;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.RecastGraph/RelevantGraphSurfaceMode relevantGraphSurfaceMode
    // Size: 0x4
    // Offset: 0x38
    ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode relevantGraphSurfaceMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode) == 0x4);
    // public UnityEngine.Bounds forcedBounds
    // Size: 0x18
    // Offset: 0x3C
    ::UnityEngine::Bounds forcedBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // Padding between fields: forcedBounds and: voxelArea
    char __padding10[0x4] = {};
    // public Pathfinding.Voxels.VoxelArea voxelArea
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::Voxels::VoxelArea* voxelArea;
    // Field size check
    static_assert(sizeof(::Pathfinding::Voxels::VoxelArea*) == 0x8);
    // public Pathfinding.Voxels.VoxelContourSet countourSet
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::Voxels::VoxelContourSet* countourSet;
    // Field size check
    static_assert(sizeof(::Pathfinding::Voxels::VoxelContourSet*) == 0x8);
    // private Pathfinding.Util.GraphTransform transform
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Util::GraphTransform* transform;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GraphTransform*) == 0x8);
    // private Pathfinding.Util.GraphTransform <transformVoxel2Graph>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::Util::GraphTransform* transformVoxel2Graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GraphTransform*) == 0x8);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x78
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 depth
    // Size: 0x4
    // Offset: 0x7C
    int depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 voxelOffset
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 voxelOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly UnityEngine.Vector3 cellScale
    // Size: 0xC
    // Offset: 0x8C
    ::UnityEngine::Vector3 cellScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // static field const value: static public System.UInt32 NotConnected
    static constexpr const uint NotConnected = 63u;
    // Get static field: static public System.UInt32 NotConnected
    static uint _get_NotConnected();
    // Set static field: static public System.UInt32 NotConnected
    static void _set_NotConnected(uint value);
    // static field const value: static private System.Int32 MaxLayers
    static constexpr const int MaxLayers = 65535;
    // Get static field: static private System.Int32 MaxLayers
    static int _get_MaxLayers();
    // Set static field: static private System.Int32 MaxLayers
    static void _set_MaxLayers(int value);
    // static field const value: static private System.Int32 MaxRegions
    static constexpr const int MaxRegions = 500;
    // Get static field: static private System.Int32 MaxRegions
    static int _get_MaxRegions();
    // Set static field: static private System.Int32 MaxRegions
    static void _set_MaxRegions(int value);
    // static field const value: static private System.Int32 UnwalkableArea
    static constexpr const int UnwalkableArea = 0;
    // Get static field: static private System.Int32 UnwalkableArea
    static int _get_UnwalkableArea();
    // Set static field: static private System.Int32 UnwalkableArea
    static void _set_UnwalkableArea(int value);
    // static field const value: static private System.UInt16 BorderReg
    static constexpr const uint16_t BorderReg = 32768u;
    // Get static field: static private System.UInt16 BorderReg
    static uint16_t _get_BorderReg();
    // Set static field: static private System.UInt16 BorderReg
    static void _set_BorderReg(uint16_t value);
    // static field const value: static private System.Int32 RC_BORDER_VERTEX
    static constexpr const int RC_BORDER_VERTEX = 65536;
    // Get static field: static private System.Int32 RC_BORDER_VERTEX
    static int _get_RC_BORDER_VERTEX();
    // Set static field: static private System.Int32 RC_BORDER_VERTEX
    static void _set_RC_BORDER_VERTEX(int value);
    // static field const value: static private System.Int32 RC_AREA_BORDER
    static constexpr const int RC_AREA_BORDER = 131072;
    // Get static field: static private System.Int32 RC_AREA_BORDER
    static int _get_RC_AREA_BORDER();
    // Set static field: static private System.Int32 RC_AREA_BORDER
    static void _set_RC_AREA_BORDER(int value);
    // static field const value: static private System.Int32 VERTEX_BUCKET_COUNT
    static constexpr const int VERTEX_BUCKET_COUNT = 4096;
    // Get static field: static private System.Int32 VERTEX_BUCKET_COUNT
    static int _get_VERTEX_BUCKET_COUNT();
    // Set static field: static private System.Int32 VERTEX_BUCKET_COUNT
    static void _set_VERTEX_BUCKET_COUNT(int value);
    // static field const value: static public System.Int32 RC_CONTOUR_TESS_WALL_EDGES
    static constexpr const int RC_CONTOUR_TESS_WALL_EDGES = 1;
    // Get static field: static public System.Int32 RC_CONTOUR_TESS_WALL_EDGES
    static int _get_RC_CONTOUR_TESS_WALL_EDGES();
    // Set static field: static public System.Int32 RC_CONTOUR_TESS_WALL_EDGES
    static void _set_RC_CONTOUR_TESS_WALL_EDGES(int value);
    // static field const value: static public System.Int32 RC_CONTOUR_TESS_AREA_EDGES
    static constexpr const int RC_CONTOUR_TESS_AREA_EDGES = 2;
    // Get static field: static public System.Int32 RC_CONTOUR_TESS_AREA_EDGES
    static int _get_RC_CONTOUR_TESS_AREA_EDGES();
    // Set static field: static public System.Int32 RC_CONTOUR_TESS_AREA_EDGES
    static void _set_RC_CONTOUR_TESS_AREA_EDGES(int value);
    // static field const value: static public System.Int32 RC_CONTOUR_TESS_TILE_EDGES
    static constexpr const int RC_CONTOUR_TESS_TILE_EDGES = 4;
    // Get static field: static public System.Int32 RC_CONTOUR_TESS_TILE_EDGES
    static int _get_RC_CONTOUR_TESS_TILE_EDGES();
    // Set static field: static public System.Int32 RC_CONTOUR_TESS_TILE_EDGES
    static void _set_RC_CONTOUR_TESS_TILE_EDGES(int value);
    // static field const value: static private System.Int32 ContourRegMask
    static constexpr const int ContourRegMask = 65535;
    // Get static field: static private System.Int32 ContourRegMask
    static int _get_ContourRegMask();
    // Set static field: static private System.Int32 ContourRegMask
    static void _set_ContourRegMask(int value);
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> inputMeshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*& dyn_inputMeshes();
    // Get instance field reference: public readonly System.Int32 voxelWalkableClimb
    [[deprecated("Use field access instead!")]] int& dyn_voxelWalkableClimb();
    // Get instance field reference: public readonly System.UInt32 voxelWalkableHeight
    [[deprecated("Use field access instead!")]] uint& dyn_voxelWalkableHeight();
    // Get instance field reference: public readonly System.Single cellSize
    [[deprecated("Use field access instead!")]] float& dyn_cellSize();
    // Get instance field reference: public readonly System.Single cellHeight
    [[deprecated("Use field access instead!")]] float& dyn_cellHeight();
    // Get instance field reference: public System.Int32 minRegionSize
    [[deprecated("Use field access instead!")]] int& dyn_minRegionSize();
    // Get instance field reference: public System.Int32 borderSize
    [[deprecated("Use field access instead!")]] int& dyn_borderSize();
    // Get instance field reference: public System.Single maxEdgeLength
    [[deprecated("Use field access instead!")]] float& dyn_maxEdgeLength();
    // Get instance field reference: public System.Single maxSlope
    [[deprecated("Use field access instead!")]] float& dyn_maxSlope();
    // Get instance field reference: public Pathfinding.RecastGraph/RelevantGraphSurfaceMode relevantGraphSurfaceMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode& dyn_relevantGraphSurfaceMode();
    // Get instance field reference: public UnityEngine.Bounds forcedBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_forcedBounds();
    // Get instance field reference: public Pathfinding.Voxels.VoxelArea voxelArea
    [[deprecated("Use field access instead!")]] ::Pathfinding::Voxels::VoxelArea*& dyn_voxelArea();
    // Get instance field reference: public Pathfinding.Voxels.VoxelContourSet countourSet
    [[deprecated("Use field access instead!")]] ::Pathfinding::Voxels::VoxelContourSet*& dyn_countourSet();
    // Get instance field reference: private Pathfinding.Util.GraphTransform transform
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GraphTransform*& dyn_transform();
    // Get instance field reference: private Pathfinding.Util.GraphTransform <transformVoxel2Graph>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GraphTransform*& dyn_$transformVoxel2Graph$k__BackingField();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 depth
    [[deprecated("Use field access instead!")]] int& dyn_depth();
    // Get instance field reference: private UnityEngine.Vector3 voxelOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_voxelOffset();
    // Get instance field reference: private readonly UnityEngine.Vector3 cellScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cellScale();
    // public System.Void BuildContours(System.Single maxError, System.Int32 maxEdgeLength, Pathfinding.Voxels.VoxelContourSet cset, System.Int32 buildFlags)
    // Offset: 0x2A11350
    void BuildContours(float maxError, int maxEdgeLength, ::Pathfinding::Voxels::VoxelContourSet* cset, int buildFlags);
    // private System.Void GetClosestIndices(System.Int32[] vertsa, System.Int32 nvertsa, System.Int32[] vertsb, System.Int32 nvertsb, ref System.Int32 ia, ref System.Int32 ib)
    // Offset: 0x2A13730
    void GetClosestIndices(::ArrayW<int> vertsa, int nvertsa, ::ArrayW<int> vertsb, int nvertsb, ByRef<int> ia, ByRef<int> ib);
    // static private System.Void ReleaseContours(Pathfinding.Voxels.VoxelContourSet cset)
    // Offset: 0x2A13CD0
    static void ReleaseContours(::Pathfinding::Voxels::VoxelContourSet* cset);
    // static public System.Boolean MergeContours(ref Pathfinding.Voxels.VoxelContour ca, ref Pathfinding.Voxels.VoxelContour cb, System.Int32 ia, System.Int32 ib)
    // Offset: 0x2A13910
    static bool MergeContours(ByRef<::Pathfinding::Voxels::VoxelContour> ca, ByRef<::Pathfinding::Voxels::VoxelContour> cb, int ia, int ib);
    // public System.Void SimplifyContour(System.Collections.Generic.List`1<System.Int32> verts, System.Collections.Generic.List`1<System.Int32> simplified, System.Single maxError, System.Int32 maxEdgeLenght, System.Int32 buildFlags)
    // Offset: 0x2A12354
    void SimplifyContour(::System::Collections::Generic::List_1<int>* verts, ::System::Collections::Generic::List_1<int>* simplified, float maxError, int maxEdgeLenght, int buildFlags);
    // public System.Void WalkContour(System.Int32 x, System.Int32 z, System.Int32 i, System.UInt16[] flags, System.Collections.Generic.List`1<System.Int32> verts)
    // Offset: 0x2A11D9C
    void WalkContour(int x, int z, int i, ::ArrayW<uint16_t> flags, ::System::Collections::Generic::List_1<int>* verts);
    // public System.Int32 GetCornerHeight(System.Int32 x, System.Int32 z, System.Int32 i, System.Int32 dir, ref System.Boolean isBorderVertex)
    // Offset: 0x2A13DF4
    int GetCornerHeight(int x, int z, int i, int dir, ByRef<bool> isBorderVertex);
    // public System.Void RemoveDegenerateSegments(System.Collections.Generic.List`1<System.Int32> simplified)
    // Offset: 0x2A13528
    void RemoveDegenerateSegments(::System::Collections::Generic::List_1<int>* simplified);
    // public System.Int32 CalcAreaOfPolygon2D(System.Int32[] verts, System.Int32 nverts)
    // Offset: 0x2A1366C
    int CalcAreaOfPolygon2D(::ArrayW<int> verts, int nverts);
    // static public System.Boolean Ileft(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] va, System.Int32[] vb, System.Int32[] vc)
    // Offset: 0x2A13C18
    static bool Ileft(int a, int b, int c, ::ArrayW<int> va, ::ArrayW<int> vb, ::ArrayW<int> vc);
    // static public System.Boolean Diagonal(System.Int32 i, System.Int32 j, System.Int32 n, System.Int32[] verts, System.Int32[] indices)
    // Offset: 0x2A1442C
    static bool Diagonal(int i, int j, int n, ::ArrayW<int> verts, ::ArrayW<int> indices);
    // static public System.Boolean InCone(System.Int32 i, System.Int32 j, System.Int32 n, System.Int32[] verts, System.Int32[] indices)
    // Offset: 0x2A1448C
    static bool InCone(int i, int j, int n, ::ArrayW<int> verts, ::ArrayW<int> indices);
    // static public System.Boolean Left(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] verts)
    // Offset: 0x2A14784
    static bool Left(int a, int b, int c, ::ArrayW<int> verts);
    // static public System.Boolean LeftOn(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] verts)
    // Offset: 0x2A1476C
    static bool LeftOn(int a, int b, int c, ::ArrayW<int> verts);
    // static public System.Boolean Collinear(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] verts)
    // Offset: 0x2A14834
    static bool Collinear(int a, int b, int c, ::ArrayW<int> verts);
    // static public System.Int32 Area2(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] verts)
    // Offset: 0x2A14798
    static int Area2(int a, int b, int c, ::ArrayW<int> verts);
    // static private System.Boolean Diagonalie(System.Int32 i, System.Int32 j, System.Int32 n, System.Int32[] verts, System.Int32[] indices)
    // Offset: 0x2A145BC
    static bool Diagonalie(int i, int j, int n, ::ArrayW<int> verts, ::ArrayW<int> indices);
    // static public System.Boolean Xorb(System.Boolean x, System.Boolean y)
    // Offset: 0x2A14964
    static bool Xorb(bool x, bool y);
    // static public System.Boolean IntersectProp(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d, System.Int32[] verts)
    // Offset: 0x2A14970
    static bool IntersectProp(int a, int b, int c, int d, ::ArrayW<int> verts);
    // static private System.Boolean Between(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32[] verts)
    // Offset: 0x2A14A6C
    static bool Between(int a, int b, int c, ::ArrayW<int> verts);
    // static private System.Boolean Intersect(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d, System.Int32[] verts)
    // Offset: 0x2A148C0
    static bool Intersect(int a, int b, int c, int d, ::ArrayW<int> verts);
    // static private System.Boolean Vequal(System.Int32 a, System.Int32 b, System.Int32[] verts)
    // Offset: 0x2A1484C
    static bool Vequal(int a, int b, ::ArrayW<int> verts);
    // static public System.Int32 Prev(System.Int32 i, System.Int32 n)
    // Offset: 0x2A14758
    static int Prev(int i, int n);
    // static public System.Int32 Next(System.Int32 i, System.Int32 n)
    // Offset: 0x2A14748
    static int Next(int i, int n);
    // public System.Void BuildPolyMesh(Pathfinding.Voxels.VoxelContourSet cset, System.Int32 nvp, out Pathfinding.Voxels.VoxelMesh mesh)
    // Offset: 0x2A14B90
    void BuildPolyMesh(::Pathfinding::Voxels::VoxelContourSet* cset, int nvp, ByRef<::Pathfinding::Voxels::VoxelMesh> mesh);
    // private System.Int32 Triangulate(System.Int32 n, System.Int32[] verts, ref System.Int32[] indices, ref System.Int32[] tris)
    // Offset: 0x2A15174
    int Triangulate(int n, ::ArrayW<int> verts, ByRef<::ArrayW<int>> indices, ByRef<::ArrayW<int>> tris);
    // public Pathfinding.Util.GraphTransform get_transformVoxel2Graph()
    // Offset: 0x2A155E0
    ::Pathfinding::Util::GraphTransform* get_transformVoxel2Graph();
    // private System.Void set_transformVoxel2Graph(Pathfinding.Util.GraphTransform value)
    // Offset: 0x2A155E8
    void set_transformVoxel2Graph(::Pathfinding::Util::GraphTransform* value);
    // public UnityEngine.Vector3 CompactSpanToVector(System.Int32 x, System.Int32 z, System.Int32 i)
    // Offset: 0x2A155F0
    ::UnityEngine::Vector3 CompactSpanToVector(int x, int z, int i);
    // public System.Void VectorToIndex(UnityEngine.Vector3 p, out System.Int32 x, out System.Int32 z)
    // Offset: 0x2A15664
    void VectorToIndex(::UnityEngine::Vector3 p, ByRef<int> x, ByRef<int> z);
    // public System.Void .ctor(System.Single ch, System.Single cs, System.Single walkableClimb, System.Single walkableHeight, System.Single maxSlope, System.Single maxEdgeLength)
    // Offset: 0x2A1584C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Voxelize* New_ctor(float ch, float cs, float walkableClimb, float walkableHeight, float maxSlope, float maxEdgeLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Voxels::Voxelize::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Voxelize*, creationType>(ch, cs, walkableClimb, walkableHeight, maxSlope, maxEdgeLength)));
    }
    // public System.Void Init()
    // Offset: 0x2A159F0
    void Init();
    // public System.Void VoxelizeInput(Pathfinding.Util.GraphTransform graphTransform, UnityEngine.Bounds graphSpaceBounds)
    // Offset: 0x2A15AA4
    void VoxelizeInput(::Pathfinding::Util::GraphTransform* graphTransform, ::UnityEngine::Bounds graphSpaceBounds);
    // public System.Void DebugDrawSpans()
    // Offset: 0x2A1683C
    void DebugDrawSpans();
    // public System.Void BuildCompactField()
    // Offset: 0x2A16AA8
    void BuildCompactField();
    // public System.Void BuildVoxelConnections()
    // Offset: 0x2A16DAC
    void BuildVoxelConnections();
    // private System.Void DrawLine(System.Int32 a, System.Int32 b, System.Int32[] indices, System.Int32[] verts, UnityEngine.Color color)
    // Offset: 0x2A170FC
    void DrawLine(int a, int b, ::ArrayW<int> indices, ::ArrayW<int> verts, ::UnityEngine::Color color);
    // public UnityEngine.Vector3 VoxelToWorld(System.Int32 x, System.Int32 y, System.Int32 z)
    // Offset: 0x2A172E0
    ::UnityEngine::Vector3 VoxelToWorld(int x, int y, int z);
    // public Pathfinding.Int3 VoxelToWorldInt3(Pathfinding.Int3 voxelPosition)
    // Offset: 0x2A17318
    ::Pathfinding::Int3 VoxelToWorldInt3(::Pathfinding::Int3 voxelPosition);
    // private UnityEngine.Vector3 ConvertPosWithoutOffset(System.Int32 x, System.Int32 y, System.Int32 z)
    // Offset: 0x2A175E4
    ::UnityEngine::Vector3 ConvertPosWithoutOffset(int x, int y, int z);
    // private UnityEngine.Vector3 ConvertPosition(System.Int32 x, System.Int32 z, System.Int32 i)
    // Offset: 0x2A1763C
    ::UnityEngine::Vector3 ConvertPosition(int x, int z, int i);
    // public System.Void ErodeWalkableArea(System.Int32 radius)
    // Offset: 0x2A176B0
    void ErodeWalkableArea(int radius);
    // public System.Void BuildDistanceField()
    // Offset: 0x2A17EB0
    void BuildDistanceField();
    // public System.Void ErodeVoxels(System.Int32 radius)
    // Offset: 0x2A18238
    void ErodeVoxels(int radius);
    // public System.Void FilterLowHeightSpans(System.UInt32 voxelWalkableHeight, System.Single cs, System.Single ch)
    // Offset: 0x2A1844C
    void FilterLowHeightSpans(uint voxelWalkableHeight, float cs, float ch);
    // public System.Void FilterLedges(System.UInt32 voxelWalkableHeight, System.Int32 voxelWalkableClimb, System.Single cs, System.Single ch)
    // Offset: 0x2A18520
    void FilterLedges(uint voxelWalkableHeight, int voxelWalkableClimb, float cs, float ch);
    // public System.Boolean FloodRegion(System.Int32 x, System.Int32 z, System.Int32 i, System.UInt32 level, System.UInt16 r, System.UInt16[] srcReg, System.UInt16[] srcDist, Pathfinding.Int3[] stack, System.Int32[] flags, System.Boolean[] closed)
    // Offset: 0x2A18938
    bool FloodRegion(int x, int z, int i, uint level, uint16_t r, ::ArrayW<uint16_t> srcReg, ::ArrayW<uint16_t> srcDist, ::ArrayW<::Pathfinding::Int3> stack, ::ArrayW<int> flags, ::ArrayW<bool> closed);
    // public System.Void MarkRectWithRegion(System.Int32 minx, System.Int32 maxx, System.Int32 minz, System.Int32 maxz, System.UInt16 region, System.UInt16[] srcReg)
    // Offset: 0x2A18E44
    void MarkRectWithRegion(int minx, int maxx, int minz, int maxz, uint16_t region, ::ArrayW<uint16_t> srcReg);
    // public System.UInt16 CalculateDistanceField(System.UInt16[] src)
    // Offset: 0x2A177DC
    uint16_t CalculateDistanceField(::ArrayW<uint16_t> src);
    // public System.UInt16[] BoxBlur(System.UInt16[] src, System.UInt16[] dst)
    // Offset: 0x2A17FC4
    ::ArrayW<uint16_t> BoxBlur(::ArrayW<uint16_t> src, ::ArrayW<uint16_t> dst);
    // public System.Void BuildRegions()
    // Offset: 0x2A18F30
    void BuildRegions();
    // static private System.Int32 union_find_find(System.Int32[] arr, System.Int32 x)
    // Offset: 0x2A1A368
    static int union_find_find(::ArrayW<int> arr, int x);
    // static private System.Void union_find_union(System.Int32[] arr, System.Int32 a, System.Int32 b)
    // Offset: 0x2A1A3C8
    static void union_find_union(::ArrayW<int> arr, int a, int b);
    // public System.Void FilterSmallRegions(System.UInt16[] reg, System.Int32 minRegionSize, System.Int32 maxRegions)
    // Offset: 0x2A19C2C
    void FilterSmallRegions(::ArrayW<uint16_t> reg, int minRegionSize, int maxRegions);
  }; // Pathfinding.Voxels.Voxelize
  #pragma pack(pop)
  static check_size<sizeof(Voxelize), 140 + sizeof(::UnityEngine::Vector3)> __Pathfinding_Voxels_VoxelizeSizeCheck;
  static_assert(sizeof(Voxelize) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildContours
// Il2CppName: BuildContours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(float, int, ::Pathfinding::Voxels::VoxelContourSet*, int)>(&Pathfinding::Voxels::Voxelize::BuildContours)> {
  static const MethodInfo* get() {
    static auto* maxError = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxEdgeLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cset = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelContourSet")->byval_arg;
    static auto* buildFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildContours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxError, maxEdgeLength, cset, buildFlags});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::GetClosestIndices
// Il2CppName: GetClosestIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::ArrayW<int>, int, ::ArrayW<int>, int, ByRef<int>, ByRef<int>)>(&Pathfinding::Voxels::Voxelize::GetClosestIndices)> {
  static const MethodInfo* get() {
    static auto* vertsa = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* nvertsa = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertsb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* nvertsb = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ia = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* ib = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "GetClosestIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertsa, nvertsa, vertsb, nvertsb, ia, ib});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::ReleaseContours
// Il2CppName: ReleaseContours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Voxels::VoxelContourSet*)>(&Pathfinding::Voxels::Voxelize::ReleaseContours)> {
  static const MethodInfo* get() {
    static auto* cset = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelContourSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "ReleaseContours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::MergeContours
// Il2CppName: MergeContours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Pathfinding::Voxels::VoxelContour>, ByRef<::Pathfinding::Voxels::VoxelContour>, int, int)>(&Pathfinding::Voxels::Voxelize::MergeContours)> {
  static const MethodInfo* get() {
    static auto* ca = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelContour")->this_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelContour")->this_arg;
    static auto* ia = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ib = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "MergeContours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ca, cb, ia, ib});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::SimplifyContour
// Il2CppName: SimplifyContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<int>*, float, int, int)>(&Pathfinding::Voxels::Voxelize::SimplifyContour)> {
  static const MethodInfo* get() {
    static auto* verts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* simplified = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* maxError = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxEdgeLenght = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buildFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "SimplifyContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, simplified, maxError, maxEdgeLenght, buildFlags});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::WalkContour
// Il2CppName: WalkContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(int, int, int, ::ArrayW<uint16_t>, ::System::Collections::Generic::List_1<int>*)>(&Pathfinding::Voxels::Voxelize::WalkContour)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* verts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "WalkContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, i, flags, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::GetCornerHeight
// Il2CppName: GetCornerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Voxels::Voxelize::*)(int, int, int, int, ByRef<bool>)>(&Pathfinding::Voxels::Voxelize::GetCornerHeight)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isBorderVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "GetCornerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, i, dir, isBorderVertex});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::RemoveDegenerateSegments
// Il2CppName: RemoveDegenerateSegments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::System::Collections::Generic::List_1<int>*)>(&Pathfinding::Voxels::Voxelize::RemoveDegenerateSegments)> {
  static const MethodInfo* get() {
    static auto* simplified = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "RemoveDegenerateSegments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simplified});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::CalcAreaOfPolygon2D
// Il2CppName: CalcAreaOfPolygon2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Voxels::Voxelize::*)(::ArrayW<int>, int)>(&Pathfinding::Voxels::Voxelize::CalcAreaOfPolygon2D)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* nverts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "CalcAreaOfPolygon2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, nverts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Ileft
// Il2CppName: Ileft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>, ::ArrayW<int>, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Ileft)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* va = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* vb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* vc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Ileft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, va, vb, vc});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Diagonal
// Il2CppName: Diagonal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Diagonal)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Diagonal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, n, verts, indices});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::InCone
// Il2CppName: InCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::InCone)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "InCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, n, verts, indices});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Left
// Il2CppName: Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Left)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::LeftOn
// Il2CppName: LeftOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::LeftOn)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "LeftOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Collinear
// Il2CppName: Collinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Collinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Collinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Area2
// Il2CppName: Area2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Area2)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Area2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Diagonalie
// Il2CppName: Diagonalie
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Diagonalie)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Diagonalie", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, n, verts, indices});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Xorb
// Il2CppName: Xorb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool)>(&Pathfinding::Voxels::Voxelize::Xorb)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Xorb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::IntersectProp
// Il2CppName: IntersectProp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::IntersectProp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "IntersectProp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Between
// Il2CppName: Between
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Between)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Between", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Intersect
// Il2CppName: Intersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Intersect)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Intersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Vequal
// Il2CppName: Vequal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, ::ArrayW<int>)>(&Pathfinding::Voxels::Voxelize::Vequal)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Vequal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, verts});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Prev
// Il2CppName: Prev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Pathfinding::Voxels::Voxelize::Prev)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Prev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, n});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Pathfinding::Voxels::Voxelize::Next)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, n});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildPolyMesh
// Il2CppName: BuildPolyMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::Pathfinding::Voxels::VoxelContourSet*, int, ByRef<::Pathfinding::Voxels::VoxelMesh>)>(&Pathfinding::Voxels::Voxelize::BuildPolyMesh)> {
  static const MethodInfo* get() {
    static auto* cset = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelContourSet")->byval_arg;
    static auto* nvp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelMesh")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildPolyMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cset, nvp, mesh});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Voxels::Voxelize::*)(int, ::ArrayW<int>, ByRef<::ArrayW<int>>, ByRef<::ArrayW<int>>)>(&Pathfinding::Voxels::Voxelize::Triangulate)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, verts, indices, tris});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::get_transformVoxel2Graph
// Il2CppName: get_transformVoxel2Graph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::get_transformVoxel2Graph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "get_transformVoxel2Graph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::set_transformVoxel2Graph
// Il2CppName: set_transformVoxel2Graph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::Voxels::Voxelize::set_transformVoxel2Graph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "set_transformVoxel2Graph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::CompactSpanToVector
// Il2CppName: CompactSpanToVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Voxels::Voxelize::*)(int, int, int)>(&Pathfinding::Voxels::Voxelize::CompactSpanToVector)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "CompactSpanToVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, i});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::VectorToIndex
// Il2CppName: VectorToIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::UnityEngine::Vector3, ByRef<int>, ByRef<int>)>(&Pathfinding::Voxels::Voxelize::VectorToIndex)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "VectorToIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::VoxelizeInput
// Il2CppName: VoxelizeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::Pathfinding::Util::GraphTransform*, ::UnityEngine::Bounds)>(&Pathfinding::Voxels::Voxelize::VoxelizeInput)> {
  static const MethodInfo* get() {
    static auto* graphTransform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    static auto* graphSpaceBounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "VoxelizeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphTransform, graphSpaceBounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::DebugDrawSpans
// Il2CppName: DebugDrawSpans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::DebugDrawSpans)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "DebugDrawSpans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildCompactField
// Il2CppName: BuildCompactField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::BuildCompactField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildCompactField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildVoxelConnections
// Il2CppName: BuildVoxelConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::BuildVoxelConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildVoxelConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::DrawLine
// Il2CppName: DrawLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(int, int, ::ArrayW<int>, ::ArrayW<int>, ::UnityEngine::Color)>(&Pathfinding::Voxels::Voxelize::DrawLine)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "DrawLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, indices, verts, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::VoxelToWorld
// Il2CppName: VoxelToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Voxels::Voxelize::*)(int, int, int)>(&Pathfinding::Voxels::Voxelize::VoxelToWorld)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "VoxelToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::VoxelToWorldInt3
// Il2CppName: VoxelToWorldInt3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::Voxels::Voxelize::*)(::Pathfinding::Int3)>(&Pathfinding::Voxels::Voxelize::VoxelToWorldInt3)> {
  static const MethodInfo* get() {
    static auto* voxelPosition = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "VoxelToWorldInt3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voxelPosition});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::ConvertPosWithoutOffset
// Il2CppName: ConvertPosWithoutOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Voxels::Voxelize::*)(int, int, int)>(&Pathfinding::Voxels::Voxelize::ConvertPosWithoutOffset)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "ConvertPosWithoutOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::ConvertPosition
// Il2CppName: ConvertPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Voxels::Voxelize::*)(int, int, int)>(&Pathfinding::Voxels::Voxelize::ConvertPosition)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "ConvertPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, i});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::ErodeWalkableArea
// Il2CppName: ErodeWalkableArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(int)>(&Pathfinding::Voxels::Voxelize::ErodeWalkableArea)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "ErodeWalkableArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildDistanceField
// Il2CppName: BuildDistanceField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::BuildDistanceField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildDistanceField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::ErodeVoxels
// Il2CppName: ErodeVoxels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(int)>(&Pathfinding::Voxels::Voxelize::ErodeVoxels)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "ErodeVoxels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::FilterLowHeightSpans
// Il2CppName: FilterLowHeightSpans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(uint, float, float)>(&Pathfinding::Voxels::Voxelize::FilterLowHeightSpans)> {
  static const MethodInfo* get() {
    static auto* voxelWalkableHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* cs = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "FilterLowHeightSpans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voxelWalkableHeight, cs, ch});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::FilterLedges
// Il2CppName: FilterLedges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(uint, int, float, float)>(&Pathfinding::Voxels::Voxelize::FilterLedges)> {
  static const MethodInfo* get() {
    static auto* voxelWalkableHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* voxelWalkableClimb = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cs = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "FilterLedges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voxelWalkableHeight, voxelWalkableClimb, cs, ch});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::FloodRegion
// Il2CppName: FloodRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Voxels::Voxelize::*)(int, int, int, uint, uint16_t, ::ArrayW<uint16_t>, ::ArrayW<uint16_t>, ::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>, ::ArrayW<bool>)>(&Pathfinding::Voxels::Voxelize::FloodRegion)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* srcReg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* srcDist = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* stack = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* flags = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* closed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "FloodRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, i, level, r, srcReg, srcDist, stack, flags, closed});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::MarkRectWithRegion
// Il2CppName: MarkRectWithRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(int, int, int, int, uint16_t, ::ArrayW<uint16_t>)>(&Pathfinding::Voxels::Voxelize::MarkRectWithRegion)> {
  static const MethodInfo* get() {
    static auto* minx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minz = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxz = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* region = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* srcReg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "MarkRectWithRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minx, maxx, minz, maxz, region, srcReg});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::CalculateDistanceField
// Il2CppName: CalculateDistanceField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (Pathfinding::Voxels::Voxelize::*)(::ArrayW<uint16_t>)>(&Pathfinding::Voxels::Voxelize::CalculateDistanceField)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "CalculateDistanceField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BoxBlur
// Il2CppName: BoxBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint16_t> (Pathfinding::Voxels::Voxelize::*)(::ArrayW<uint16_t>, ::ArrayW<uint16_t>)>(&Pathfinding::Voxels::Voxelize::BoxBlur)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* dst = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BoxBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::BuildRegions
// Il2CppName: BuildRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)()>(&Pathfinding::Voxels::Voxelize::BuildRegions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "BuildRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::union_find_find
// Il2CppName: union_find_find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>, int)>(&Pathfinding::Voxels::Voxelize::union_find_find)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "union_find_find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr, x});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::union_find_union
// Il2CppName: union_find_union
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int)>(&Pathfinding::Voxels::Voxelize::union_find_union)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "union_find_union", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr, a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::Voxelize::FilterSmallRegions
// Il2CppName: FilterSmallRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::Voxelize::*)(::ArrayW<uint16_t>, int, int)>(&Pathfinding::Voxels::Voxelize::FilterSmallRegions)> {
  static const MethodInfo* get() {
    static auto* reg = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* minRegionSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxRegions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::Voxelize*), "FilterSmallRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg, minRegionSize, maxRegions});
  }
};
