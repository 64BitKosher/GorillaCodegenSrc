// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: CompactVoxelSpan
  struct CompactVoxelSpan;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::CompactVoxelSpan, "Pathfinding.Voxels", "CompactVoxelSpan");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Voxels.CompactVoxelSpan
  // [TokenAttribute] Offset: FFFFFFFF
  struct CompactVoxelSpan/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt16 y
    // Size: 0x2
    // Offset: 0x0
    uint16_t y;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: y and: con
    char __padding0[0x2] = {};
    // public System.UInt32 con
    // Size: 0x4
    // Offset: 0x4
    uint con;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 h
    // Size: 0x4
    // Offset: 0x8
    uint h;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 reg
    // Size: 0x4
    // Offset: 0xC
    int reg;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CompactVoxelSpan
    constexpr CompactVoxelSpan(uint16_t y_ = {}, uint con_ = {}, uint h_ = {}, int reg_ = {}) noexcept : y{y_}, con{con_}, h{h_}, reg{reg_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt16 y
    [[deprecated("Use field access instead!")]] uint16_t& dyn_y();
    // Get instance field reference: public System.UInt32 con
    [[deprecated("Use field access instead!")]] uint& dyn_con();
    // Get instance field reference: public System.UInt32 h
    [[deprecated("Use field access instead!")]] uint& dyn_h();
    // Get instance field reference: public System.Int32 reg
    [[deprecated("Use field access instead!")]] int& dyn_reg();
    // public System.Void .ctor(System.UInt16 bottom, System.UInt32 height)
    // Offset: 0x2A112F8
    CompactVoxelSpan(uint16_t bottom, uint height);
    // public System.Void SetConnection(System.Int32 dir, System.UInt32 value)
    // Offset: 0x2A1130C
    void SetConnection(int dir, uint value);
    // public System.Int32 GetConnection(System.Int32 dir)
    // Offset: 0x2A11338
    int GetConnection(int dir);
  }; // Pathfinding.Voxels.CompactVoxelSpan
  #pragma pack(pop)
  static check_size<sizeof(CompactVoxelSpan), 12 + sizeof(int)> __Pathfinding_Voxels_CompactVoxelSpanSizeCheck;
  static_assert(sizeof(CompactVoxelSpan) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Voxels::CompactVoxelSpan::CompactVoxelSpan
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Voxels::CompactVoxelSpan::SetConnection
// Il2CppName: SetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::CompactVoxelSpan::*)(int, uint)>(&Pathfinding::Voxels::CompactVoxelSpan::SetConnection)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::CompactVoxelSpan), "SetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::CompactVoxelSpan::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Voxels::CompactVoxelSpan::*)(int)>(&Pathfinding::Voxels::CompactVoxelSpan::GetConnection)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::CompactVoxelSpan), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
