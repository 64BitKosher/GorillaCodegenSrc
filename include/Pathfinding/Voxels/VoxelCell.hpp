// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: VoxelSpan
  class VoxelSpan;
}
// Completed forward declares
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: VoxelCell
  struct VoxelCell;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::VoxelCell, "Pathfinding.Voxels", "VoxelCell");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Voxels.VoxelCell
  // [TokenAttribute] Offset: FFFFFFFF
  struct VoxelCell/*, public ::System::ValueType*/ {
    public:
    public:
    // public Pathfinding.Voxels.VoxelSpan firstSpan
    // Size: 0x8
    // Offset: 0x0
    ::Pathfinding::Voxels::VoxelSpan* firstSpan;
    // Field size check
    static_assert(sizeof(::Pathfinding::Voxels::VoxelSpan*) == 0x8);
    public:
    // Creating value type constructor for type: VoxelCell
    constexpr VoxelCell(::Pathfinding::Voxels::VoxelSpan* firstSpan_ = {}) noexcept : firstSpan{firstSpan_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Pathfinding::Voxels::VoxelSpan*
    constexpr operator ::Pathfinding::Voxels::VoxelSpan*() const noexcept {
      return firstSpan;
    }
    // Get instance field reference: public Pathfinding.Voxels.VoxelSpan firstSpan
    [[deprecated("Use field access instead!")]] ::Pathfinding::Voxels::VoxelSpan*& dyn_firstSpan();
    // public System.Void AddSpan(System.UInt32 bottom, System.UInt32 top, System.Int32 area, System.Int32 voxelWalkableClimb)
    // Offset: 0x2A110E0
    void AddSpan(uint bottom, uint top, int area, int voxelWalkableClimb);
  }; // Pathfinding.Voxels.VoxelCell
  #pragma pack(pop)
  static check_size<sizeof(VoxelCell), 0 + sizeof(::Pathfinding::Voxels::VoxelSpan*)> __Pathfinding_Voxels_VoxelCellSizeCheck;
  static_assert(sizeof(VoxelCell) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Voxels::VoxelCell::AddSpan
// Il2CppName: AddSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::VoxelCell::*)(uint, uint, int, int)>(&Pathfinding::Voxels::VoxelCell::AddSpan)> {
  static const MethodInfo* get() {
    static auto* bottom = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* area = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voxelWalkableClimb = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::VoxelCell), "AddSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bottom, top, area, voxelWalkableClimb});
  }
};
