// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Completed forward declares
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: RasterizationMesh
  class RasterizationMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Voxels::RasterizationMesh);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Voxels::RasterizationMesh*, "Pathfinding.Voxels", "RasterizationMesh");
// Type namespace: Pathfinding.Voxels
namespace Pathfinding::Voxels {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Voxels.RasterizationMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class RasterizationMesh : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.MeshFilter original
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::MeshFilter* original;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public System.Int32 area
    // Size: 0x4
    // Offset: 0x18
    int area;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: area and: vertices
    char __padding1[0x4] = {};
    // public UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Int32[] triangles
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 numVertices
    // Size: 0x4
    // Offset: 0x30
    int numVertices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numTriangles
    // Size: 0x4
    // Offset: 0x34
    int numTriangles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Bounds bounds
    // Size: 0x18
    // Offset: 0x38
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public UnityEngine.Matrix4x4 matrix
    // Size: 0x40
    // Offset: 0x50
    ::UnityEngine::Matrix4x4 matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public System.Boolean pool
    // Size: 0x1
    // Offset: 0x90
    bool pool;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.MeshFilter original
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_original();
    // Get instance field reference: public System.Int32 area
    [[deprecated("Use field access instead!")]] int& dyn_area();
    // Get instance field reference: public UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: public System.Int32[] triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triangles();
    // Get instance field reference: public System.Int32 numVertices
    [[deprecated("Use field access instead!")]] int& dyn_numVertices();
    // Get instance field reference: public System.Int32 numTriangles
    [[deprecated("Use field access instead!")]] int& dyn_numTriangles();
    // Get instance field reference: public UnityEngine.Bounds bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bounds();
    // Get instance field reference: public UnityEngine.Matrix4x4 matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_matrix();
    // Get instance field reference: public System.Boolean pool
    [[deprecated("Use field access instead!")]] bool& dyn_pool();
    // public System.Void .ctor()
    // Offset: 0x2A10CE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RasterizationMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Voxels::RasterizationMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RasterizationMesh*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] vertices, System.Int32[] triangles, UnityEngine.Bounds bounds)
    // Offset: 0x2A10CEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RasterizationMesh* New_ctor(::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<int> triangles, ::UnityEngine::Bounds bounds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Voxels::RasterizationMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RasterizationMesh*, creationType>(vertices, triangles, bounds)));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] vertices, System.Int32[] triangles, UnityEngine.Bounds bounds, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x2A10DC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RasterizationMesh* New_ctor(::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<int> triangles, ::UnityEngine::Bounds bounds, ::UnityEngine::Matrix4x4 matrix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Voxels::RasterizationMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RasterizationMesh*, creationType>(vertices, triangles, bounds, matrix)));
    }
    // public System.Void RecalculateBounds()
    // Offset: 0x2A10E68
    void RecalculateBounds();
    // public System.Void Pool()
    // Offset: 0x2A10FF8
    void Pool();
  }; // Pathfinding.Voxels.RasterizationMesh
  #pragma pack(pop)
  static check_size<sizeof(RasterizationMesh), 144 + sizeof(bool)> __Pathfinding_Voxels_RasterizationMeshSizeCheck;
  static_assert(sizeof(RasterizationMesh) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Voxels::RasterizationMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Voxels::RasterizationMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Voxels::RasterizationMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Voxels::RasterizationMesh::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::RasterizationMesh::*)()>(&Pathfinding::Voxels::RasterizationMesh::RecalculateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::RasterizationMesh*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Voxels::RasterizationMesh::Pool
// Il2CppName: Pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Voxels::RasterizationMesh::*)()>(&Pathfinding::Voxels::RasterizationMesh::Pool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Voxels::RasterizationMesh*), "Pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
