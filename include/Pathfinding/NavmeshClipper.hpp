// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: Pathfinding.GraphMask
#include "Pathfinding/GraphMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshClipper
  class NavmeshClipper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavmeshClipper);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshClipper*, "Pathfinding", "NavmeshClipper");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavmeshClipper
  // [TokenAttribute] Offset: FFFFFFFF
  class NavmeshClipper : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    public:
    // private System.Int32 listIndex
    // Size: 0x4
    // Offset: 0x24
    int listIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.GraphMask graphMask
    // Size: 0x4
    // Offset: 0x28
    ::Pathfinding::GraphMask graphMask;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphMask) == 0x4);
    public:
    // Get static field: static private System.Action`1<Pathfinding.NavmeshClipper> OnEnableCallback
    static ::System::Action_1<::Pathfinding::NavmeshClipper*>* _get_OnEnableCallback();
    // Set static field: static private System.Action`1<Pathfinding.NavmeshClipper> OnEnableCallback
    static void _set_OnEnableCallback(::System::Action_1<::Pathfinding::NavmeshClipper*>* value);
    // Get static field: static private System.Action`1<Pathfinding.NavmeshClipper> OnDisableCallback
    static ::System::Action_1<::Pathfinding::NavmeshClipper*>* _get_OnDisableCallback();
    // Set static field: static private System.Action`1<Pathfinding.NavmeshClipper> OnDisableCallback
    static void _set_OnDisableCallback(::System::Action_1<::Pathfinding::NavmeshClipper*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<Pathfinding.NavmeshClipper> all
    static ::System::Collections::Generic::List_1<::Pathfinding::NavmeshClipper*>* _get_all();
    // Set static field: static private readonly System.Collections.Generic.List`1<Pathfinding.NavmeshClipper> all
    static void _set_all(::System::Collections::Generic::List_1<::Pathfinding::NavmeshClipper*>* value);
    // Get instance field reference: private System.Int32 listIndex
    [[deprecated("Use field access instead!")]] int& dyn_listIndex();
    // Get instance field reference: public Pathfinding.GraphMask graphMask
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphMask& dyn_graphMask();
    // static public System.Void AddEnableCallback(System.Action`1<Pathfinding.NavmeshClipper> onEnable, System.Action`1<Pathfinding.NavmeshClipper> onDisable)
    // Offset: 0x29F8DC4
    static void AddEnableCallback(::System::Action_1<::Pathfinding::NavmeshClipper*>* onEnable, ::System::Action_1<::Pathfinding::NavmeshClipper*>* onDisable);
    // static public System.Void RemoveEnableCallback(System.Action`1<Pathfinding.NavmeshClipper> onEnable, System.Action`1<Pathfinding.NavmeshClipper> onDisable)
    // Offset: 0x29F8F44
    static void RemoveEnableCallback(::System::Action_1<::Pathfinding::NavmeshClipper*>* onEnable, ::System::Action_1<::Pathfinding::NavmeshClipper*>* onDisable);
    // static public System.Collections.Generic.List`1<Pathfinding.NavmeshClipper> get_allEnabled()
    // Offset: 0x29F90C4
    static ::System::Collections::Generic::List_1<::Pathfinding::NavmeshClipper*>* get_allEnabled();
    // protected System.Void OnEnable()
    // Offset: 0x29F911C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x29F9250
    void OnDisable();
    // System.Void NotifyUpdated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void NotifyUpdated();
    // public UnityEngine.Rect GetBounds(Pathfinding.Util.GraphTransform transform)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Rect GetBounds(::Pathfinding::Util::GraphTransform* transform);
    // public System.Boolean RequiresUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool RequiresUpdate();
    // public System.Void ForceUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ForceUpdate();
    // static private System.Void .cctor()
    // Offset: 0x29F93D8
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x29F8D48
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshClipper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavmeshClipper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshClipper*, creationType>()));
    }
  }; // Pathfinding.NavmeshClipper
  #pragma pack(pop)
  static check_size<sizeof(NavmeshClipper), 40 + sizeof(::Pathfinding::GraphMask)> __Pathfinding_NavmeshClipperSizeCheck;
  static_assert(sizeof(NavmeshClipper) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::AddEnableCallback
// Il2CppName: AddEnableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Pathfinding::NavmeshClipper*>*, ::System::Action_1<::Pathfinding::NavmeshClipper*>*)>(&Pathfinding::NavmeshClipper::AddEnableCallback)> {
  static const MethodInfo* get() {
    static auto* onEnable = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")})->byval_arg;
    static auto* onDisable = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "AddEnableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onEnable, onDisable});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::RemoveEnableCallback
// Il2CppName: RemoveEnableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Pathfinding::NavmeshClipper*>*, ::System::Action_1<::Pathfinding::NavmeshClipper*>*)>(&Pathfinding::NavmeshClipper::RemoveEnableCallback)> {
  static const MethodInfo* get() {
    static auto* onEnable = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")})->byval_arg;
    static auto* onDisable = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "RemoveEnableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onEnable, onDisable});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::get_allEnabled
// Il2CppName: get_allEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::NavmeshClipper*>* (*)()>(&Pathfinding::NavmeshClipper::get_allEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "get_allEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshClipper::*)()>(&Pathfinding::NavmeshClipper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshClipper::*)()>(&Pathfinding::NavmeshClipper::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::NotifyUpdated
// Il2CppName: NotifyUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshClipper::*)()>(&Pathfinding::NavmeshClipper::NotifyUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "NotifyUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Pathfinding::NavmeshClipper::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::NavmeshClipper::GetBounds)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::RequiresUpdate
// Il2CppName: RequiresUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshClipper::*)()>(&Pathfinding::NavmeshClipper::RequiresUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "RequiresUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshClipper::*)()>(&Pathfinding::NavmeshClipper::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::NavmeshClipper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshClipper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshClipper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
