// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphModifier
#include "Pathfinding/GraphModifier.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NodeLink3Node
  class NodeLink3Node;
  // Forward declaring type: MeshNode
  class MeshNode;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NodeLink3
  class NodeLink3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NodeLink3);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NodeLink3*, "Pathfinding", "NodeLink3");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NodeLink3
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class NodeLink3 : public ::Pathfinding::GraphModifier {
    public:
    public:
    // public UnityEngine.Transform end
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single costFactor
    // Size: 0x4
    // Offset: 0x48
    float costFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean oneWay
    // Size: 0x1
    // Offset: 0x4C
    bool oneWay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: oneWay and: startNode
    char __padding2[0x3] = {};
    // private Pathfinding.NodeLink3Node startNode
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::NodeLink3Node* startNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::NodeLink3Node*) == 0x8);
    // private Pathfinding.NodeLink3Node endNode
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::NodeLink3Node* endNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::NodeLink3Node*) == 0x8);
    // private Pathfinding.MeshNode connectedNode1
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::MeshNode* connectedNode1;
    // Field size check
    static_assert(sizeof(::Pathfinding::MeshNode*) == 0x8);
    // private Pathfinding.MeshNode connectedNode2
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::MeshNode* connectedNode2;
    // Field size check
    static_assert(sizeof(::Pathfinding::MeshNode*) == 0x8);
    // private UnityEngine.Vector3 clamped1
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 clamped1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 clamped2
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 clamped2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean postScanCalled
    // Size: 0x1
    // Offset: 0x88
    bool postScanCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.NodeLink3> reference
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::NodeLink3*>* _get_reference();
    // Set static field: static protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.NodeLink3> reference
    static void _set_reference(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::NodeLink3*>* value);
    // Get static field: static private readonly UnityEngine.Color GizmosColor
    static ::UnityEngine::Color _get_GizmosColor();
    // Set static field: static private readonly UnityEngine.Color GizmosColor
    static void _set_GizmosColor(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color GizmosColorSelected
    static ::UnityEngine::Color _get_GizmosColorSelected();
    // Set static field: static private readonly UnityEngine.Color GizmosColorSelected
    static void _set_GizmosColorSelected(::UnityEngine::Color value);
    // Get instance field reference: public UnityEngine.Transform end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_end();
    // Get instance field reference: public System.Single costFactor
    [[deprecated("Use field access instead!")]] float& dyn_costFactor();
    // Get instance field reference: public System.Boolean oneWay
    [[deprecated("Use field access instead!")]] bool& dyn_oneWay();
    // Get instance field reference: private Pathfinding.NodeLink3Node startNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::NodeLink3Node*& dyn_startNode();
    // Get instance field reference: private Pathfinding.NodeLink3Node endNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::NodeLink3Node*& dyn_endNode();
    // Get instance field reference: private Pathfinding.MeshNode connectedNode1
    [[deprecated("Use field access instead!")]] ::Pathfinding::MeshNode*& dyn_connectedNode1();
    // Get instance field reference: private Pathfinding.MeshNode connectedNode2
    [[deprecated("Use field access instead!")]] ::Pathfinding::MeshNode*& dyn_connectedNode2();
    // Get instance field reference: private UnityEngine.Vector3 clamped1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clamped1();
    // Get instance field reference: private UnityEngine.Vector3 clamped2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clamped2();
    // Get instance field reference: private System.Boolean postScanCalled
    [[deprecated("Use field access instead!")]] bool& dyn_postScanCalled();
    // static public Pathfinding.NodeLink3 GetNodeLink(Pathfinding.GraphNode node)
    // Offset: 0x29B1AB0
    static ::Pathfinding::NodeLink3* GetNodeLink(::Pathfinding::GraphNode* node);
    // public UnityEngine.Transform get_StartTransform()
    // Offset: 0x29B1B48
    ::UnityEngine::Transform* get_StartTransform();
    // public UnityEngine.Transform get_EndTransform()
    // Offset: 0x29B1B50
    ::UnityEngine::Transform* get_EndTransform();
    // public Pathfinding.GraphNode get_StartNode()
    // Offset: 0x29B1B58
    ::Pathfinding::GraphNode* get_StartNode();
    // public Pathfinding.GraphNode get_EndNode()
    // Offset: 0x29B1B60
    ::Pathfinding::GraphNode* get_EndNode();
    // public System.Void InternalOnPostScan()
    // Offset: 0x29B1C7C
    void InternalOnPostScan();
    // private System.Void RemoveConnections(Pathfinding.GraphNode node)
    // Offset: 0x29B35D4
    void RemoveConnections(::Pathfinding::GraphNode* node);
    // private System.Void ContextApplyForce()
    // Offset: 0x29B35F8
    void ContextApplyForce();
    // public System.Void Apply(System.Boolean forceNewCheck)
    // Offset: 0x29B1FC0
    void Apply(bool forceNewCheck);
    // public System.Void OnDrawGizmosSelected()
    // Offset: 0x29B3668
    void OnDrawGizmosSelected();
    // public System.Void OnDrawGizmos()
    // Offset: 0x29B3BFC
    void OnDrawGizmos();
    // public System.Void OnDrawGizmos(System.Boolean selected)
    // Offset: 0x29B3670
    void OnDrawGizmos(bool selected);
    // private System.Boolean <OnPostScan>b__20_0(System.Boolean force)
    // Offset: 0x29B3D24
    bool $OnPostScan$b__20_0(bool force);
    // public override System.Void OnPostScan()
    // Offset: 0x29B1B68
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnPostScan()
    void OnPostScan();
    // public override System.Void OnGraphsPostUpdate()
    // Offset: 0x29B3220
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnGraphsPostUpdate()
    void OnGraphsPostUpdate();
    // protected override System.Void OnEnable()
    // Offset: 0x29B331C
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x29B3460
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x29B3C04
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NodeLink3* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NodeLink3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NodeLink3*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29B3C64
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.cctor()
    static void _cctor();
  }; // Pathfinding.NodeLink3
  #pragma pack(pop)
  static check_size<sizeof(NodeLink3), 136 + sizeof(bool)> __Pathfinding_NodeLink3SizeCheck;
  static_assert(sizeof(NodeLink3) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NodeLink3::GetNodeLink
// Il2CppName: GetNodeLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NodeLink3* (*)(::Pathfinding::GraphNode*)>(&Pathfinding::NodeLink3::GetNodeLink)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "GetNodeLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::get_StartTransform
// Il2CppName: get_StartTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::get_StartTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "get_StartTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::get_EndTransform
// Il2CppName: get_EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::get_EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "get_EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::get_StartNode
// Il2CppName: get_StartNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::get_StartNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "get_StartNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::get_EndNode
// Il2CppName: get_EndNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::get_EndNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "get_EndNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::InternalOnPostScan
// Il2CppName: InternalOnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::InternalOnPostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "InternalOnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::RemoveConnections
// Il2CppName: RemoveConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)(::Pathfinding::GraphNode*)>(&Pathfinding::NodeLink3::RemoveConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "RemoveConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::ContextApplyForce
// Il2CppName: ContextApplyForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::ContextApplyForce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "ContextApplyForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)(bool)>(&Pathfinding::NodeLink3::Apply)> {
  static const MethodInfo* get() {
    static auto* forceNewCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceNewCheck});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)(bool)>(&Pathfinding::NodeLink3::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* selected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selected});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::$OnPostScan$b__20_0
// Il2CppName: <OnPostScan>b__20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NodeLink3::*)(bool)>(&Pathfinding::NodeLink3::$OnPostScan$b__20_0)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "<OnPostScan>b__20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnPostScan
// Il2CppName: OnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnPostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnGraphsPostUpdate
// Il2CppName: OnGraphsPostUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnGraphsPostUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnGraphsPostUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink3::*)()>(&Pathfinding::NodeLink3::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NodeLink3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::NodeLink3::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink3*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
