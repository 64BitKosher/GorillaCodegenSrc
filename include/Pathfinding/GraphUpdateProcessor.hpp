// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Skipping declaration: GraphUpdateOrder because it is already included!
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: AstarWorkItem
  struct AstarWorkItem;
  // Forward declaring type: IUpdatableGraph
  class IUpdatableGraph;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: UnityEngine::Profiling
namespace UnityEngine::Profiling {
  // Forward declaring type: CustomSampler
  class CustomSampler;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphUpdateProcessor
  class GraphUpdateProcessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphUpdateProcessor);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUpdateProcessor*, "Pathfinding", "GraphUpdateProcessor");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphUpdateProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphUpdateProcessor : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder
    struct GraphUpdateOrder;
    // Nested type: ::Pathfinding::GraphUpdateProcessor::GUOSingle
    struct GUOSingle;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.GraphUpdateProcessor/GraphUpdateOrder
    // [TokenAttribute] Offset: FFFFFFFF
    struct GraphUpdateOrder/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GraphUpdateOrder
      constexpr GraphUpdateOrder(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.GraphUpdateProcessor/GraphUpdateOrder GraphUpdate
      static constexpr const int GraphUpdate = 0;
      // Get static field: static public Pathfinding.GraphUpdateProcessor/GraphUpdateOrder GraphUpdate
      static ::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder _get_GraphUpdate();
      // Set static field: static public Pathfinding.GraphUpdateProcessor/GraphUpdateOrder GraphUpdate
      static void _set_GraphUpdate(::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.GraphUpdateProcessor/GraphUpdateOrder
    #pragma pack(pop)
    static check_size<sizeof(GraphUpdateProcessor::GraphUpdateOrder), 0 + sizeof(int)> __Pathfinding_GraphUpdateProcessor_GraphUpdateOrderSizeCheck;
    static_assert(sizeof(GraphUpdateProcessor::GraphUpdateOrder) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.GraphUpdateProcessor/GUOSingle
    // [TokenAttribute] Offset: FFFFFFFF
    struct GUOSingle/*, public ::System::ValueType*/ {
      public:
      public:
      // public Pathfinding.GraphUpdateProcessor/GraphUpdateOrder order
      // Size: 0x4
      // Offset: 0x0
      ::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder order;
      // Field size check
      static_assert(sizeof(::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder) == 0x4);
      // Padding between fields: order and: graph
      char __padding0[0x4] = {};
      // public Pathfinding.IUpdatableGraph graph
      // Size: 0x8
      // Offset: 0x8
      ::Pathfinding::IUpdatableGraph* graph;
      // Field size check
      static_assert(sizeof(::Pathfinding::IUpdatableGraph*) == 0x8);
      // public Pathfinding.GraphUpdateObject obj
      // Size: 0x8
      // Offset: 0x10
      ::Pathfinding::GraphUpdateObject* obj;
      // Field size check
      static_assert(sizeof(::Pathfinding::GraphUpdateObject*) == 0x8);
      public:
      // Creating value type constructor for type: GUOSingle
      constexpr GUOSingle(::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder order_ = {}, ::Pathfinding::IUpdatableGraph* graph_ = {}, ::Pathfinding::GraphUpdateObject* obj_ = {}) noexcept : order{order_}, graph{graph_}, obj{obj_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Pathfinding.GraphUpdateProcessor/GraphUpdateOrder order
      [[deprecated("Use field access instead!")]] ::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder& dyn_order();
      // Get instance field reference: public Pathfinding.IUpdatableGraph graph
      [[deprecated("Use field access instead!")]] ::Pathfinding::IUpdatableGraph*& dyn_graph();
      // Get instance field reference: public Pathfinding.GraphUpdateObject obj
      [[deprecated("Use field access instead!")]] ::Pathfinding::GraphUpdateObject*& dyn_obj();
    }; // Pathfinding.GraphUpdateProcessor/GUOSingle
    #pragma pack(pop)
    static check_size<sizeof(GraphUpdateProcessor::GUOSingle), 16 + sizeof(::Pathfinding::GraphUpdateObject*)> __Pathfinding_GraphUpdateProcessor_GUOSingleSizeCheck;
    static_assert(sizeof(GraphUpdateProcessor::GUOSingle) == 0x18);
    public:
    // private System.Action OnGraphsUpdated
    // Size: 0x8
    // Offset: 0x10
    ::System::Action* OnGraphsUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly AstarPath astar
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AstarPath* astar;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // private System.Threading.Thread graphUpdateThread
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::Thread* graphUpdateThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.Boolean anyGraphUpdateInProgress
    // Size: 0x1
    // Offset: 0x28
    bool anyGraphUpdateInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: anyGraphUpdateInProgress and: asyncUpdateProfilingSampler
    char __padding3[0x7] = {};
    // private UnityEngine.Profiling.CustomSampler asyncUpdateProfilingSampler
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Profiling::CustomSampler* asyncUpdateProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Profiling::CustomSampler*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> graphUpdateQueue
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>* graphUpdateQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueueAsync
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>* graphUpdateQueueAsync;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueuePost
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>* graphUpdateQueuePost;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueueRegular
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>* graphUpdateQueueRegular;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*) == 0x8);
    // private readonly System.Threading.ManualResetEvent asyncGraphUpdatesComplete
    // Size: 0x8
    // Offset: 0x58
    ::System::Threading::ManualResetEvent* asyncGraphUpdatesComplete;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private readonly System.Threading.AutoResetEvent graphUpdateAsyncEvent
    // Size: 0x8
    // Offset: 0x60
    ::System::Threading::AutoResetEvent* graphUpdateAsyncEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private readonly System.Threading.AutoResetEvent exitAsyncThread
    // Size: 0x8
    // Offset: 0x68
    ::System::Threading::AutoResetEvent* exitAsyncThread;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    public:
    // Get instance field reference: private System.Action OnGraphsUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGraphsUpdated();
    // Get instance field reference: private readonly AstarPath astar
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_astar();
    // Get instance field reference: private System.Threading.Thread graphUpdateThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_graphUpdateThread();
    // Get instance field reference: private System.Boolean anyGraphUpdateInProgress
    [[deprecated("Use field access instead!")]] bool& dyn_anyGraphUpdateInProgress();
    // Get instance field reference: private UnityEngine.Profiling.CustomSampler asyncUpdateProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Profiling::CustomSampler*& dyn_asyncUpdateProfilingSampler();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> graphUpdateQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*& dyn_graphUpdateQueue();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueueAsync
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*& dyn_graphUpdateQueueAsync();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueuePost
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*& dyn_graphUpdateQueuePost();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateProcessor/GUOSingle> graphUpdateQueueRegular
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateProcessor::GUOSingle>*& dyn_graphUpdateQueueRegular();
    // Get instance field reference: private readonly System.Threading.ManualResetEvent asyncGraphUpdatesComplete
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_asyncGraphUpdatesComplete();
    // Get instance field reference: private readonly System.Threading.AutoResetEvent graphUpdateAsyncEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_graphUpdateAsyncEvent();
    // Get instance field reference: private readonly System.Threading.AutoResetEvent exitAsyncThread
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_exitAsyncThread();
    // public System.Void add_OnGraphsUpdated(System.Action value)
    // Offset: 0x29A8EB0
    void add_OnGraphsUpdated(::System::Action* value);
    // public System.Void remove_OnGraphsUpdated(System.Action value)
    // Offset: 0x29A8F4C
    void remove_OnGraphsUpdated(::System::Action* value);
    // public System.Boolean get_IsAnyGraphUpdateQueued()
    // Offset: 0x29A8FE8
    bool get_IsAnyGraphUpdateQueued();
    // public System.Boolean get_IsAnyGraphUpdateInProgress()
    // Offset: 0x29A9038
    bool get_IsAnyGraphUpdateInProgress();
    // public System.Void .ctor(AstarPath astar)
    // Offset: 0x29A9040
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUpdateProcessor* New_ctor(::GlobalNamespace::AstarPath* astar) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUpdateProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUpdateProcessor*, creationType>(astar)));
    }
    // public Pathfinding.AstarWorkItem GetWorkItem()
    // Offset: 0x29A9220
    ::Pathfinding::AstarWorkItem GetWorkItem();
    // public System.Void EnableMultithreading()
    // Offset: 0x29A934C
    void EnableMultithreading();
    // public System.Void DisableMultithreading()
    // Offset: 0x29A94C4
    void DisableMultithreading();
    // public System.Void AddToQueue(Pathfinding.GraphUpdateObject ob)
    // Offset: 0x29A9590
    void AddToQueue(::Pathfinding::GraphUpdateObject* ob);
    // private System.Void QueueGraphUpdatesInternal()
    // Offset: 0x29A95E8
    void QueueGraphUpdatesInternal();
    // private System.Boolean ProcessGraphUpdates(System.Boolean force)
    // Offset: 0x29A9B88
    bool ProcessGraphUpdates(bool force);
    // private System.Boolean ProcessRegularUpdates(System.Boolean force)
    // Offset: 0x29A9EDC
    bool ProcessRegularUpdates(bool force);
    // private System.Boolean StartAsyncUpdatesIfQueued()
    // Offset: 0x29AA338
    bool StartAsyncUpdatesIfQueued();
    // private System.Void ProcessPostUpdates()
    // Offset: 0x29A9C5C
    void ProcessPostUpdates();
    // private System.Void ProcessGraphUpdatesAsync()
    // Offset: 0x29AA3B0
    void ProcessGraphUpdatesAsync();
  }; // Pathfinding.GraphUpdateProcessor
  #pragma pack(pop)
  static check_size<sizeof(GraphUpdateProcessor), 104 + sizeof(::System::Threading::AutoResetEvent*)> __Pathfinding_GraphUpdateProcessorSizeCheck;
  static_assert(sizeof(GraphUpdateProcessor) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUpdateProcessor::GUOSingle, "Pathfinding", "GraphUpdateProcessor/GUOSingle");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUpdateProcessor::GraphUpdateOrder, "Pathfinding", "GraphUpdateProcessor/GraphUpdateOrder");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::add_OnGraphsUpdated
// Il2CppName: add_OnGraphsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)(::System::Action*)>(&Pathfinding::GraphUpdateProcessor::add_OnGraphsUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "add_OnGraphsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::remove_OnGraphsUpdated
// Il2CppName: remove_OnGraphsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)(::System::Action*)>(&Pathfinding::GraphUpdateProcessor::remove_OnGraphsUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "remove_OnGraphsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::get_IsAnyGraphUpdateQueued
// Il2CppName: get_IsAnyGraphUpdateQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::get_IsAnyGraphUpdateQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "get_IsAnyGraphUpdateQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::get_IsAnyGraphUpdateInProgress
// Il2CppName: get_IsAnyGraphUpdateInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::get_IsAnyGraphUpdateInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "get_IsAnyGraphUpdateInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::GetWorkItem
// Il2CppName: GetWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::AstarWorkItem (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::GetWorkItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "GetWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::EnableMultithreading
// Il2CppName: EnableMultithreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::EnableMultithreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "EnableMultithreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::DisableMultithreading
// Il2CppName: DisableMultithreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::DisableMultithreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "DisableMultithreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::AddToQueue
// Il2CppName: AddToQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GraphUpdateProcessor::AddToQueue)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "AddToQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::QueueGraphUpdatesInternal
// Il2CppName: QueueGraphUpdatesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::QueueGraphUpdatesInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "QueueGraphUpdatesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::ProcessGraphUpdates
// Il2CppName: ProcessGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateProcessor::*)(bool)>(&Pathfinding::GraphUpdateProcessor::ProcessGraphUpdates)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "ProcessGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::ProcessRegularUpdates
// Il2CppName: ProcessRegularUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateProcessor::*)(bool)>(&Pathfinding::GraphUpdateProcessor::ProcessRegularUpdates)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "ProcessRegularUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::StartAsyncUpdatesIfQueued
// Il2CppName: StartAsyncUpdatesIfQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::StartAsyncUpdatesIfQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "StartAsyncUpdatesIfQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::ProcessPostUpdates
// Il2CppName: ProcessPostUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::ProcessPostUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "ProcessPostUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateProcessor::ProcessGraphUpdatesAsync
// Il2CppName: ProcessGraphUpdatesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateProcessor::*)()>(&Pathfinding::GraphUpdateProcessor::ProcessGraphUpdatesAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateProcessor*), "ProcessGraphUpdatesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
