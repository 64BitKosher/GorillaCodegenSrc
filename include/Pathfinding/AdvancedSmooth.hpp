// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.MonoModifier
#include "Pathfinding/MonoModifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AdvancedSmooth
  class AdvancedSmooth;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AdvancedSmooth);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AdvancedSmooth*, "Pathfinding", "AdvancedSmooth");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AdvancedSmooth
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class AdvancedSmooth : public ::Pathfinding::MonoModifier {
    public:
    // Nested type: ::Pathfinding::AdvancedSmooth::MaxTurn
    class MaxTurn;
    // Nested type: ::Pathfinding::AdvancedSmooth::ConstantTurn
    class ConstantTurn;
    // Nested type: ::Pathfinding::AdvancedSmooth::TurnConstructor
    class TurnConstructor;
    // Nested type: ::Pathfinding::AdvancedSmooth::Turn
    struct Turn;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.AdvancedSmooth/Turn
    // [TokenAttribute] Offset: FFFFFFFF
    struct Turn/*, public ::System::ValueType, public ::System::IComparable_1<::Pathfinding::AdvancedSmooth::Turn>*/ {
      public:
      public:
      // public System.Single length
      // Size: 0x4
      // Offset: 0x0
      float length;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Int32 id
      // Size: 0x4
      // Offset: 0x4
      int id;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public Pathfinding.AdvancedSmooth/TurnConstructor constructor
      // Size: 0x8
      // Offset: 0x8
      ::Pathfinding::AdvancedSmooth::TurnConstructor* constructor;
      // Field size check
      static_assert(sizeof(::Pathfinding::AdvancedSmooth::TurnConstructor*) == 0x8);
      public:
      // Creating value type constructor for type: Turn
      constexpr Turn(float length_ = {}, int id_ = {}, ::Pathfinding::AdvancedSmooth::TurnConstructor* constructor_ = {}) noexcept : length{length_}, id{id_}, constructor{constructor_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IComparable_1<::Pathfinding::AdvancedSmooth::Turn>
      operator ::System::IComparable_1<::Pathfinding::AdvancedSmooth::Turn>() noexcept {
        return *reinterpret_cast<::System::IComparable_1<::Pathfinding::AdvancedSmooth::Turn>*>(this);
      }
      // Get instance field reference: public System.Single length
      [[deprecated("Use field access instead!")]] float& dyn_length();
      // Get instance field reference: public System.Int32 id
      [[deprecated("Use field access instead!")]] int& dyn_id();
      // Get instance field reference: public Pathfinding.AdvancedSmooth/TurnConstructor constructor
      [[deprecated("Use field access instead!")]] ::Pathfinding::AdvancedSmooth::TurnConstructor*& dyn_constructor();
      // public System.Single get_score()
      // Offset: 0x29F2060
      float get_score();
      // public System.Void .ctor(System.Single length, Pathfinding.AdvancedSmooth/TurnConstructor constructor, System.Int32 id)
      // Offset: 0x29F04C4
      Turn(float length, ::Pathfinding::AdvancedSmooth::TurnConstructor* constructor, int id);
      // public System.Void GetPath(System.Collections.Generic.List`1<UnityEngine.Vector3> output)
      // Offset: 0x29EF218
      void GetPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* output);
      // public System.Int32 CompareTo(Pathfinding.AdvancedSmooth/Turn t)
      // Offset: 0x29F2088
      int CompareTo(::Pathfinding::AdvancedSmooth::Turn t);
    }; // Pathfinding.AdvancedSmooth/Turn
    #pragma pack(pop)
    static check_size<sizeof(AdvancedSmooth::Turn), 8 + sizeof(::Pathfinding::AdvancedSmooth::TurnConstructor*)> __Pathfinding_AdvancedSmooth_TurnSizeCheck;
    static_assert(sizeof(AdvancedSmooth::Turn) == 0x10);
    public:
    // public System.Single turningRadius
    // Size: 0x4
    // Offset: 0x30
    float turningRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: turningRadius and: turnConstruct1
    char __padding0[0x4] = {};
    // public Pathfinding.AdvancedSmooth/MaxTurn turnConstruct1
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::AdvancedSmooth::MaxTurn* turnConstruct1;
    // Field size check
    static_assert(sizeof(::Pathfinding::AdvancedSmooth::MaxTurn*) == 0x8);
    // public Pathfinding.AdvancedSmooth/ConstantTurn turnConstruct2
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::AdvancedSmooth::ConstantTurn* turnConstruct2;
    // Field size check
    static_assert(sizeof(::Pathfinding::AdvancedSmooth::ConstantTurn*) == 0x8);
    public:
    // Get instance field reference: public System.Single turningRadius
    [[deprecated("Use field access instead!")]] float& dyn_turningRadius();
    // Get instance field reference: public Pathfinding.AdvancedSmooth/MaxTurn turnConstruct1
    [[deprecated("Use field access instead!")]] ::Pathfinding::AdvancedSmooth::MaxTurn*& dyn_turnConstruct1();
    // Get instance field reference: public Pathfinding.AdvancedSmooth/ConstantTurn turnConstruct2
    [[deprecated("Use field access instead!")]] ::Pathfinding::AdvancedSmooth::ConstantTurn*& dyn_turnConstruct2();
    // private System.Void EvaluatePaths(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList, System.Collections.Generic.List`1<UnityEngine.Vector3> output)
    // Offset: 0x29EF094
    void EvaluatePaths(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>* turnList, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* output);
    // public override System.Int32 get_Order()
    // Offset: 0x29EE80C
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Int32 MonoModifier::get_Order()
    int get_Order();
    // public override System.Void Apply(Pathfinding.Path p)
    // Offset: 0x29EE814
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::Apply(Pathfinding.Path p)
    void Apply(::Pathfinding::Path* p);
    // public System.Void .ctor()
    // Offset: 0x29EF248
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancedSmooth* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AdvancedSmooth::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancedSmooth*, creationType>()));
    }
  }; // Pathfinding.AdvancedSmooth
  #pragma pack(pop)
  static check_size<sizeof(AdvancedSmooth), 64 + sizeof(::Pathfinding::AdvancedSmooth::ConstantTurn*)> __Pathfinding_AdvancedSmoothSizeCheck;
  static_assert(sizeof(AdvancedSmooth) == 0x48);
  // static public System.Boolean op_LessThan(Pathfinding.AdvancedSmooth/Turn lhs, Pathfinding.AdvancedSmooth/Turn rhs)
  // Offset: 0x29F20E4
  bool operator <(const ::Pathfinding::AdvancedSmooth::Turn& lhs, const ::Pathfinding::AdvancedSmooth::Turn& rhs);
  // static public System.Boolean op_GreaterThan(Pathfinding.AdvancedSmooth/Turn lhs, Pathfinding.AdvancedSmooth/Turn rhs)
  // Offset: 0x29F2124
  bool operator >(const ::Pathfinding::AdvancedSmooth::Turn& lhs, const ::Pathfinding::AdvancedSmooth::Turn& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AdvancedSmooth::Turn, "Pathfinding", "AdvancedSmooth/Turn");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::EvaluatePaths
// Il2CppName: EvaluatePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::*)(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::AdvancedSmooth::EvaluatePaths)> {
  static const MethodInfo* get() {
    static auto* turnList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")})->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth*), "EvaluatePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turnList, output});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::AdvancedSmooth::*)()>(&Pathfinding::AdvancedSmooth::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::*)(::Pathfinding::Path*)>(&Pathfinding::AdvancedSmooth::Apply)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
