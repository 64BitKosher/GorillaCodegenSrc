// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GridGraph
#include "Pathfinding/GridGraph.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridNodeBase
  class GridNodeBase;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphCollision
  class GraphCollision;
  // Forward declaring type: LevelGridNode
  class LevelGridNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphUpdateShape
  class GraphUpdateShape;
  // Forward declaring type: IntRect
  struct IntRect;
  // Forward declaring type: NNInfoInternal
  struct NNInfoInternal;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: LayerGridGraph
  class LayerGridGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::LayerGridGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::LayerGridGraph*, "Pathfinding", "LayerGridGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x1A4
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.LayerGridGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class LayerGridGraph : public ::Pathfinding::GridGraph {
    public:
    // Nested type: ::Pathfinding::LayerGridGraph::HeightSample
    struct HeightSample;
    // Nested type: ::Pathfinding::LayerGridGraph::HitComparer
    class HitComparer;
    // Nested type: ::Pathfinding::LayerGridGraph::$ScanInternal$d__19
    class $ScanInternal$d__19;
    // Size: 0x3D
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.LayerGridGraph/HeightSample
    // [TokenAttribute] Offset: FFFFFFFF
    struct HeightSample/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.RaycastHit hit
      // Size: 0x2C
      // Offset: 0xC
      ::UnityEngine::RaycastHit hit;
      // Field size check
      static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
      // public System.Single height
      // Size: 0x4
      // Offset: 0x38
      float height;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Boolean walkable
      // Size: 0x1
      // Offset: 0x3C
      bool walkable;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: HeightSample
      constexpr HeightSample(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::RaycastHit hit_ = {}, float height_ = {}, bool walkable_ = {}) noexcept : position{position_}, hit{hit_}, height{height_}, walkable{walkable_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.RaycastHit hit
      [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_hit();
      // Get instance field reference: public System.Single height
      [[deprecated("Use field access instead!")]] float& dyn_height();
      // Get instance field reference: public System.Boolean walkable
      [[deprecated("Use field access instead!")]] bool& dyn_walkable();
    }; // Pathfinding.LayerGridGraph/HeightSample
    #pragma pack(pop)
    static check_size<sizeof(LayerGridGraph::HeightSample), 60 + sizeof(bool)> __Pathfinding_LayerGridGraph_HeightSampleSizeCheck;
    static_assert(sizeof(LayerGridGraph::HeightSample) == 0x3D);
    public:
    // System.Int32 layerCount
    // Size: 0x4
    // Offset: 0x190
    int layerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single mergeSpanRange
    // Size: 0x4
    // Offset: 0x194
    float mergeSpanRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single characterHeight
    // Size: 0x4
    // Offset: 0x198
    float characterHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Int32 lastScannedWidth
    // Size: 0x4
    // Offset: 0x19C
    int lastScannedWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lastScannedDepth
    // Size: 0x4
    // Offset: 0x1A0
    int lastScannedDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly Pathfinding.LayerGridGraph/HitComparer comparer
    static ::Pathfinding::LayerGridGraph::HitComparer* _get_comparer();
    // Set static field: static private readonly Pathfinding.LayerGridGraph/HitComparer comparer
    static void _set_comparer(::Pathfinding::LayerGridGraph::HitComparer* value);
    // Get static field: static private Pathfinding.LayerGridGraph/HeightSample[] heightSampleBuffer
    static ::ArrayW<::Pathfinding::LayerGridGraph::HeightSample> _get_heightSampleBuffer();
    // Set static field: static private Pathfinding.LayerGridGraph/HeightSample[] heightSampleBuffer
    static void _set_heightSampleBuffer(::ArrayW<::Pathfinding::LayerGridGraph::HeightSample> value);
    // Get instance field reference: System.Int32 layerCount
    [[deprecated("Use field access instead!")]] int& dyn_layerCount();
    // Get instance field reference: public System.Single mergeSpanRange
    [[deprecated("Use field access instead!")]] float& dyn_mergeSpanRange();
    // Get instance field reference: public System.Single characterHeight
    [[deprecated("Use field access instead!")]] float& dyn_characterHeight();
    // Get instance field reference: System.Int32 lastScannedWidth
    [[deprecated("Use field access instead!")]] int& dyn_lastScannedWidth();
    // Get instance field reference: System.Int32 lastScannedDepth
    [[deprecated("Use field access instead!")]] int& dyn_lastScannedDepth();
    // public Pathfinding.GridNodeBase GetNode(System.Int32 x, System.Int32 z, System.Int32 layer)
    // Offset: 0x29C9DF8
    ::Pathfinding::GridNodeBase* GetNode(int x, int z, int layer);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateArea(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29C9E70
    void Pathfinding_IUpdatableGraph_UpdateArea(::Pathfinding::GraphUpdateObject* o);
    // static protected Pathfinding.LayerGridGraph/HeightSample[] SampleHeights(Pathfinding.GraphCollision collision, System.Single mergeSpanRange, UnityEngine.Vector3 position, out System.Int32 numHits)
    // Offset: 0x29CA794
    static ::ArrayW<::Pathfinding::LayerGridGraph::HeightSample> SampleHeights(::Pathfinding::GraphCollision* collision, float mergeSpanRange, ::UnityEngine::Vector3 position, ByRef<int> numHits);
    // private System.Void AddLayers(System.Int32 count)
    // Offset: 0x29CB498
    void AddLayers(int count);
    // public System.Void CalculateConnections(System.Int32 x, System.Int32 z, System.Int32 layerIndex, Pathfinding.LevelGridNode node)
    // Offset: 0x29CBCE0
    void CalculateConnections(int x, int z, int layerIndex, ::Pathfinding::LevelGridNode* node);
    // public System.Void CalculateConnections(System.Int32 x, System.Int32 z, System.Int32 layerIndex)
    // Offset: 0x29CB8B0
    void CalculateConnections(int x, int z, int layerIndex);
    // private Pathfinding.GridNodeBase GetNearestNode(UnityEngine.Vector3 position, System.Int32 x, System.Int32 z, Pathfinding.NNConstraint constraint)
    // Offset: 0x29CC020
    ::Pathfinding::GridNodeBase* GetNearestNode(::UnityEngine::Vector3 position, int x, int z, ::Pathfinding::NNConstraint* constraint);
    // static public System.Boolean CheckConnection(Pathfinding.LevelGridNode node, System.Int32 dir)
    // Offset: 0x29CC210
    static bool CheckConnection(::Pathfinding::LevelGridNode* node, int dir);
    // protected override System.Void OnDestroy()
    // Offset: 0x29C9284
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::OnDestroy()
    void OnDestroy();
    // private System.Void RemoveGridGraphFromStatic()
    // Offset: 0x29C92A8
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::RemoveGridGraphFromStatic()
    void RemoveGridGraphFromStatic();
    // public override System.Boolean get_uniformWidthDepthGrid()
    // Offset: 0x29C952C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Boolean GridGraph::get_uniformWidthDepthGrid()
    bool get_uniformWidthDepthGrid();
    // public override System.Int32 get_LayerCount()
    // Offset: 0x29C9534
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Int32 GridGraph::get_LayerCount()
    int get_LayerCount();
    // public override System.Int32 CountNodes()
    // Offset: 0x29C953C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Int32 GridGraph::CountNodes()
    int CountNodes();
    // public override System.Void GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0x29C959C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    void GetNodes(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // protected override System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(UnityEngine.Bounds b, Pathfinding.GraphUpdateShape shape)
    // Offset: 0x29C960C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Collections.Generic.List`1<Pathfinding.GraphNode> GridGraph::GetNodesInRegion(UnityEngine.Bounds b, Pathfinding.GraphUpdateShape shape)
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::UnityEngine::Bounds b, ::Pathfinding::GraphUpdateShape* shape);
    // public override System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(Pathfinding.IntRect rect)
    // Offset: 0x29C98F0
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Collections.Generic.List`1<Pathfinding.GraphNode> GridGraph::GetNodesInRegion(Pathfinding.IntRect rect)
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::Pathfinding::IntRect rect);
    // public override System.Int32 GetNodesInRegion(Pathfinding.IntRect rect, Pathfinding.GridNodeBase[] buffer)
    // Offset: 0x29C9B18
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Int32 GridGraph::GetNodesInRegion(Pathfinding.IntRect rect, Pathfinding.GridNodeBase[] buffer)
    int GetNodesInRegion(::Pathfinding::IntRect rect, ::ArrayW<::Pathfinding::GridNodeBase*> buffer);
    // public override Pathfinding.GridNodeBase GetNode(System.Int32 x, System.Int32 z)
    // Offset: 0x29C9D9C
    // Implemented from: Pathfinding.GridGraph
    // Base method: Pathfinding.GridNodeBase GridGraph::GetNode(System.Int32 x, System.Int32 z)
    ::Pathfinding::GridNodeBase* GetNode(int x, int z);
    // protected override System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanInternal()
    // Offset: 0x29CA6E4
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> GridGraph::ScanInternal()
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanInternal();
    // public override System.Void RecalculateCell(System.Int32 x, System.Int32 z, System.Boolean resetPenalties, System.Boolean resetTags)
    // Offset: 0x29CAB84
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::RecalculateCell(System.Int32 x, System.Int32 z, System.Boolean resetPenalties, System.Boolean resetTags)
    void RecalculateCell(int x, int z, bool resetPenalties, bool resetTags);
    // protected override System.Boolean ErosionAnyFalseConnections(Pathfinding.GraphNode baseNode)
    // Offset: 0x29CB6BC
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Boolean GridGraph::ErosionAnyFalseConnections(Pathfinding.GraphNode baseNode)
    bool ErosionAnyFalseConnections(::Pathfinding::GraphNode* baseNode);
    // public override System.Void CalculateConnections(Pathfinding.GridNodeBase baseNode)
    // Offset: 0x29CB7FC
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::CalculateConnections(Pathfinding.GridNodeBase baseNode)
    void CalculateConnections(::Pathfinding::GridNodeBase* baseNode);
    // public override System.Void CalculateConnections(System.Int32 x, System.Int32 z)
    // Offset: 0x29CBCE4
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::CalculateConnections(System.Int32 x, System.Int32 z)
    void CalculateConnections(int x, int z);
    // public override Pathfinding.NNInfoInternal GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x29CBE64
    // Implemented from: Pathfinding.GridGraph
    // Base method: Pathfinding.NNInfoInternal GridGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfoInternal GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // protected override Pathfinding.GridNodeBase GetNearestFromGraphSpace(UnityEngine.Vector3 positionGraphSpace)
    // Offset: 0x29CC154
    // Implemented from: Pathfinding.GridGraph
    // Base method: Pathfinding.GridNodeBase GridGraph::GetNearestFromGraphSpace(UnityEngine.Vector3 positionGraphSpace)
    ::Pathfinding::GridNodeBase* GetNearestFromGraphSpace(::UnityEngine::Vector3 positionGraphSpace);
    // protected override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29CC230
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29CC33C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29CC51C
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    void PostDeserialization(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void .ctor()
    // Offset: 0x29CC748
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::.ctor()
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LayerGridGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::LayerGridGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LayerGridGraph*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29CC7AC
    // Implemented from: Pathfinding.GridGraph
    // Base method: System.Void GridGraph::.cctor()
    static void _cctor();
  }; // Pathfinding.LayerGridGraph
  #pragma pack(pop)
  static check_size<sizeof(LayerGridGraph), 416 + sizeof(int)> __Pathfinding_LayerGridGraphSizeCheck;
  static_assert(sizeof(LayerGridGraph) == 0x1A4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::LayerGridGraph::HeightSample, "Pathfinding", "LayerGridGraph/HeightSample");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::LayerGridGraph::*)(int, int, int)>(&Pathfinding::LayerGridGraph::GetNode)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, layer});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::Pathfinding_IUpdatableGraph_UpdateArea
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::LayerGridGraph::Pathfinding_IUpdatableGraph_UpdateArea)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "Pathfinding.IUpdatableGraph.UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::SampleHeights
// Il2CppName: SampleHeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::LayerGridGraph::HeightSample> (*)(::Pathfinding::GraphCollision*, float, ::UnityEngine::Vector3, ByRef<int>)>(&Pathfinding::LayerGridGraph::SampleHeights)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphCollision")->byval_arg;
    static auto* mergeSpanRange = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* numHits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "SampleHeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision, mergeSpanRange, position, numHits});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::AddLayers
// Il2CppName: AddLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(int)>(&Pathfinding::LayerGridGraph::AddLayers)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "AddLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(int, int, int, ::Pathfinding::LevelGridNode*)>(&Pathfinding::LayerGridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "LevelGridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, layerIndex, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(int, int, int)>(&Pathfinding::LayerGridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, layerIndex});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNearestNode
// Il2CppName: GetNearestNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::LayerGridGraph::*)(::UnityEngine::Vector3, int, int, ::Pathfinding::NNConstraint*)>(&Pathfinding::LayerGridGraph::GetNearestNode)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNearestNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, x, z, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CheckConnection
// Il2CppName: CheckConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::LevelGridNode*, int)>(&Pathfinding::LayerGridGraph::CheckConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "LevelGridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CheckConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::RemoveGridGraphFromStatic
// Il2CppName: RemoveGridGraphFromStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::RemoveGridGraphFromStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "RemoveGridGraphFromStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::get_uniformWidthDepthGrid
// Il2CppName: get_uniformWidthDepthGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::get_uniformWidthDepthGrid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "get_uniformWidthDepthGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::get_LayerCount
// Il2CppName: get_LayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::get_LayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "get_LayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CountNodes
// Il2CppName: CountNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::CountNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CountNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::LayerGridGraph::GetNodes)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::LayerGridGraph::*)(::UnityEngine::Bounds, ::Pathfinding::GraphUpdateShape*)>(&Pathfinding::LayerGridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::LayerGridGraph::*)(::Pathfinding::IntRect)>(&Pathfinding::LayerGridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::LayerGridGraph::*)(::Pathfinding::IntRect, ::ArrayW<::Pathfinding::GridNodeBase*>)>(&Pathfinding::LayerGridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::LayerGridGraph::*)(int, int)>(&Pathfinding::LayerGridGraph::GetNode)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::LayerGridGraph::*)()>(&Pathfinding::LayerGridGraph::ScanInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::RecalculateCell
// Il2CppName: RecalculateCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(int, int, bool, bool)>(&Pathfinding::LayerGridGraph::RecalculateCell)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resetPenalties = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resetTags = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "RecalculateCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, resetPenalties, resetTags});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::ErosionAnyFalseConnections
// Il2CppName: ErosionAnyFalseConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::LayerGridGraph::*)(::Pathfinding::GraphNode*)>(&Pathfinding::LayerGridGraph::ErosionAnyFalseConnections)> {
  static const MethodInfo* get() {
    static auto* baseNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "ErosionAnyFalseConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::Pathfinding::GridNodeBase*)>(&Pathfinding::LayerGridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* baseNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(int, int)>(&Pathfinding::LayerGridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::LayerGridGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::LayerGridGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::GetNearestFromGraphSpace
// Il2CppName: GetNearestFromGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::LayerGridGraph::*)(::UnityEngine::Vector3)>(&Pathfinding::LayerGridGraph::GetNearestFromGraphSpace)> {
  static const MethodInfo* get() {
    static auto* positionGraphSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "GetNearestFromGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionGraphSpace});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::LayerGridGraph::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::LayerGridGraph::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LayerGridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::LayerGridGraph::PostDeserialization)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::LayerGridGraph::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::LayerGridGraph::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LayerGridGraph*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
