// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: Pathfinding.IUpdatableGraph
#include "Pathfinding/IUpdatableGraph.hpp"
// Including type: Pathfinding.ITransformedGraph
#include "Pathfinding/ITransformedGraph.hpp"
// Including type: Pathfinding.IRaycastableGraph
#include "Pathfinding/IRaycastableGraph.hpp"
// Including type: Pathfinding.InspectorGridMode
#include "Pathfinding/InspectorGridMode.hpp"
// Including type: Pathfinding.InspectorGridHexagonNodeSize
#include "Pathfinding/InspectorGridHexagonNodeSize.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.NumNeighbours
#include "Pathfinding/NumNeighbours.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphCollision
  class GraphCollision;
  // Forward declaring type: GridNodeBase
  class GridNodeBase;
  // Forward declaring type: Int3
  struct Int3;
  // Forward declaring type: GridNode
  class GridNode;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: IntRect
  struct IntRect;
  // Forward declaring type: GraphUpdateShape
  class GraphUpdateShape;
  // Forward declaring type: GraphUpdateThreading
  struct GraphUpdateThreading;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphHitInfo
  struct GraphHitInfo;
  // Forward declaring type: Int2
  struct Int2;
  // Forward declaring type: GridHitInfo
  struct GridHitInfo;
  // Forward declaring type: NNInfoInternal
  struct NNInfoInternal;
  // Forward declaring type: NNConstraint
  class NNConstraint;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
  // Forward declaring type: GraphGizmoHelper
  class GraphGizmoHelper;
  // Forward declaring type: RetainedGizmos
  class RetainedGizmos;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridGraph
  class GridGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GridGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GridGraph*, "Pathfinding", "GridGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x190
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GridGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  // [JsonOptInAttribute] Offset: FFFFFFFF
  class GridGraph : public ::Pathfinding::NavGraph/*, public ::Pathfinding::IUpdatableGraph, public ::Pathfinding::ITransformedGraph, public ::Pathfinding::IRaycastableGraph*/ {
    public:
    // Nested type: ::Pathfinding::GridGraph::TextureData
    class TextureData;
    // Nested type: ::Pathfinding::GridGraph::$$c
    class $$c;
    // Nested type: ::Pathfinding::GridGraph::$$c__DisplayClass64_0
    class $$c__DisplayClass64_0;
    // Nested type: ::Pathfinding::GridGraph::$ScanInternal$d__92
    class $ScanInternal$d__92;
    public:
    // public Pathfinding.InspectorGridMode inspectorGridMode
    // Size: 0x4
    // Offset: 0xD0
    ::Pathfinding::InspectorGridMode inspectorGridMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::InspectorGridMode) == 0x4);
    // public Pathfinding.InspectorGridHexagonNodeSize inspectorHexagonSizeMode
    // Size: 0x4
    // Offset: 0xD4
    ::Pathfinding::InspectorGridHexagonNodeSize inspectorHexagonSizeMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::InspectorGridHexagonNodeSize) == 0x4);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0xD8
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 depth
    // Size: 0x4
    // Offset: 0xDC
    int depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single aspectRatio
    // Size: 0x4
    // Offset: 0xE0
    float aspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single isometricAngle
    // Size: 0x4
    // Offset: 0xE4
    float isometricAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean uniformEdgeCosts
    // Size: 0x1
    // Offset: 0xE8
    bool uniformEdgeCosts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uniformEdgeCosts and: rotation
    char __padding6[0x3] = {};
    // public UnityEngine.Vector3 rotation
    // Size: 0xC
    // Offset: 0xEC
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0xF8
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector2 unclampedSize
    // Size: 0x8
    // Offset: 0x104
    ::UnityEngine::Vector2 unclampedSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single nodeSize
    // Size: 0x4
    // Offset: 0x10C
    float nodeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.GraphCollision collision
    // Size: 0x8
    // Offset: 0x110
    ::Pathfinding::GraphCollision* collision;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphCollision*) == 0x8);
    // public System.Single maxClimb
    // Size: 0x4
    // Offset: 0x118
    float maxClimb;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSlope
    // Size: 0x4
    // Offset: 0x11C
    float maxSlope;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 erodeIterations
    // Size: 0x4
    // Offset: 0x120
    int erodeIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean erosionUseTags
    // Size: 0x1
    // Offset: 0x124
    bool erosionUseTags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: erosionUseTags and: erosionFirstTag
    char __padding15[0x3] = {};
    // public System.Int32 erosionFirstTag
    // Size: 0x4
    // Offset: 0x128
    int erosionFirstTag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.NumNeighbours neighbours
    // Size: 0x4
    // Offset: 0x12C
    ::Pathfinding::NumNeighbours neighbours;
    // Field size check
    static_assert(sizeof(::Pathfinding::NumNeighbours) == 0x4);
    // public System.Boolean cutCorners
    // Size: 0x1
    // Offset: 0x130
    bool cutCorners;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cutCorners and: penaltyPositionOffset
    char __padding18[0x3] = {};
    // public System.Single penaltyPositionOffset
    // Size: 0x4
    // Offset: 0x134
    float penaltyPositionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean penaltyPosition
    // Size: 0x1
    // Offset: 0x138
    bool penaltyPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: penaltyPosition and: penaltyPositionFactor
    char __padding20[0x3] = {};
    // public System.Single penaltyPositionFactor
    // Size: 0x4
    // Offset: 0x13C
    float penaltyPositionFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean penaltyAngle
    // Size: 0x1
    // Offset: 0x140
    bool penaltyAngle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: penaltyAngle and: penaltyAngleFactor
    char __padding22[0x3] = {};
    // public System.Single penaltyAngleFactor
    // Size: 0x4
    // Offset: 0x144
    float penaltyAngleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single penaltyAnglePower
    // Size: 0x4
    // Offset: 0x148
    float penaltyAnglePower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useJumpPointSearch
    // Size: 0x1
    // Offset: 0x14C
    bool useJumpPointSearch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showMeshOutline
    // Size: 0x1
    // Offset: 0x14D
    bool showMeshOutline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showNodeConnections
    // Size: 0x1
    // Offset: 0x14E
    bool showNodeConnections;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showMeshSurface
    // Size: 0x1
    // Offset: 0x14F
    bool showMeshSurface;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public Pathfinding.GridGraph/TextureData textureData
    // Size: 0x8
    // Offset: 0x150
    ::Pathfinding::GridGraph::TextureData* textureData;
    // Field size check
    static_assert(sizeof(::Pathfinding::GridGraph::TextureData*) == 0x8);
    // private UnityEngine.Vector2 <size>k__BackingField
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly System.Int32[] neighbourOffsets
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<int> neighbourOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.UInt32[] neighbourCosts
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<uint> neighbourCosts;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // public readonly System.Int32[] neighbourXOffsets
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<int> neighbourXOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.Int32[] neighbourZOffsets
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<int> neighbourZOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Pathfinding.GridNodeBase[] nodes
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::Pathfinding::GridNodeBase*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GridNodeBase*>) == 0x8);
    // private Pathfinding.Util.GraphTransform <transform>k__BackingField
    // Size: 0x8
    // Offset: 0x188
    ::Pathfinding::Util::GraphTransform* transform;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GraphTransform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IUpdatableGraph
    operator ::Pathfinding::IUpdatableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IUpdatableGraph*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::ITransformedGraph
    operator ::Pathfinding::ITransformedGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::ITransformedGraph*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::IRaycastableGraph
    operator ::Pathfinding::IRaycastableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IRaycastableGraph*>(this);
    }
    // Get static field: static public readonly System.Single StandardIsometricAngle
    static float _get_StandardIsometricAngle();
    // Set static field: static public readonly System.Single StandardIsometricAngle
    static void _set_StandardIsometricAngle(float value);
    // Get static field: static public readonly System.Single StandardDimetricAngle
    static float _get_StandardDimetricAngle();
    // Set static field: static public readonly System.Single StandardDimetricAngle
    static void _set_StandardDimetricAngle(float value);
    // Get static field: static readonly System.Int32[] hexagonNeighbourIndices
    static ::ArrayW<int> _get_hexagonNeighbourIndices();
    // Set static field: static readonly System.Int32[] hexagonNeighbourIndices
    static void _set_hexagonNeighbourIndices(::ArrayW<int> value);
    // static field const value: static public System.Int32 getNearestForceOverlap
    static constexpr const int getNearestForceOverlap = 2;
    // Get static field: static public System.Int32 getNearestForceOverlap
    static int _get_getNearestForceOverlap();
    // Set static field: static public System.Int32 getNearestForceOverlap
    static void _set_getNearestForceOverlap(int value);
    // static field const value: static private System.Int32 FixedPrecisionScale
    static constexpr const int FixedPrecisionScale = 1024;
    // Get static field: static private System.Int32 FixedPrecisionScale
    static int _get_FixedPrecisionScale();
    // Set static field: static private System.Int32 FixedPrecisionScale
    static void _set_FixedPrecisionScale(int value);
    // Get instance field reference: public Pathfinding.InspectorGridMode inspectorGridMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::InspectorGridMode& dyn_inspectorGridMode();
    // Get instance field reference: public Pathfinding.InspectorGridHexagonNodeSize inspectorHexagonSizeMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::InspectorGridHexagonNodeSize& dyn_inspectorHexagonSizeMode();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 depth
    [[deprecated("Use field access instead!")]] int& dyn_depth();
    // Get instance field reference: public System.Single aspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_aspectRatio();
    // Get instance field reference: public System.Single isometricAngle
    [[deprecated("Use field access instead!")]] float& dyn_isometricAngle();
    // Get instance field reference: public System.Boolean uniformEdgeCosts
    [[deprecated("Use field access instead!")]] bool& dyn_uniformEdgeCosts();
    // Get instance field reference: public UnityEngine.Vector3 rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector2 unclampedSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_unclampedSize();
    // Get instance field reference: public System.Single nodeSize
    [[deprecated("Use field access instead!")]] float& dyn_nodeSize();
    // Get instance field reference: public Pathfinding.GraphCollision collision
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphCollision*& dyn_collision();
    // Get instance field reference: public System.Single maxClimb
    [[deprecated("Use field access instead!")]] float& dyn_maxClimb();
    // Get instance field reference: public System.Single maxSlope
    [[deprecated("Use field access instead!")]] float& dyn_maxSlope();
    // Get instance field reference: public System.Int32 erodeIterations
    [[deprecated("Use field access instead!")]] int& dyn_erodeIterations();
    // Get instance field reference: public System.Boolean erosionUseTags
    [[deprecated("Use field access instead!")]] bool& dyn_erosionUseTags();
    // Get instance field reference: public System.Int32 erosionFirstTag
    [[deprecated("Use field access instead!")]] int& dyn_erosionFirstTag();
    // Get instance field reference: public Pathfinding.NumNeighbours neighbours
    [[deprecated("Use field access instead!")]] ::Pathfinding::NumNeighbours& dyn_neighbours();
    // Get instance field reference: public System.Boolean cutCorners
    [[deprecated("Use field access instead!")]] bool& dyn_cutCorners();
    // Get instance field reference: public System.Single penaltyPositionOffset
    [[deprecated("Use field access instead!")]] float& dyn_penaltyPositionOffset();
    // Get instance field reference: public System.Boolean penaltyPosition
    [[deprecated("Use field access instead!")]] bool& dyn_penaltyPosition();
    // Get instance field reference: public System.Single penaltyPositionFactor
    [[deprecated("Use field access instead!")]] float& dyn_penaltyPositionFactor();
    // Get instance field reference: public System.Boolean penaltyAngle
    [[deprecated("Use field access instead!")]] bool& dyn_penaltyAngle();
    // Get instance field reference: public System.Single penaltyAngleFactor
    [[deprecated("Use field access instead!")]] float& dyn_penaltyAngleFactor();
    // Get instance field reference: public System.Single penaltyAnglePower
    [[deprecated("Use field access instead!")]] float& dyn_penaltyAnglePower();
    // Get instance field reference: public System.Boolean useJumpPointSearch
    [[deprecated("Use field access instead!")]] bool& dyn_useJumpPointSearch();
    // Get instance field reference: public System.Boolean showMeshOutline
    [[deprecated("Use field access instead!")]] bool& dyn_showMeshOutline();
    // Get instance field reference: public System.Boolean showNodeConnections
    [[deprecated("Use field access instead!")]] bool& dyn_showNodeConnections();
    // Get instance field reference: public System.Boolean showMeshSurface
    [[deprecated("Use field access instead!")]] bool& dyn_showMeshSurface();
    // Get instance field reference: public Pathfinding.GridGraph/TextureData textureData
    [[deprecated("Use field access instead!")]] ::Pathfinding::GridGraph::TextureData*& dyn_textureData();
    // Get instance field reference: private UnityEngine.Vector2 <size>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$size$k__BackingField();
    // Get instance field reference: public readonly System.Int32[] neighbourOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourOffsets();
    // Get instance field reference: public readonly System.UInt32[] neighbourCosts
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_neighbourCosts();
    // Get instance field reference: public readonly System.Int32[] neighbourXOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourXOffsets();
    // Get instance field reference: public readonly System.Int32[] neighbourZOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourZOffsets();
    // Get instance field reference: public Pathfinding.GridNodeBase[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GridNodeBase*>& dyn_nodes();
    // Get instance field reference: private Pathfinding.Util.GraphTransform <transform>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GraphTransform*& dyn_$transform$k__BackingField();
    // private System.Void RemoveGridGraphFromStatic()
    // Offset: 0x29BF404
    void RemoveGridGraphFromStatic();
    // public System.Boolean get_uniformWidthDepthGrid()
    // Offset: 0x29BF57C
    bool get_uniformWidthDepthGrid();
    // public System.Int32 get_LayerCount()
    // Offset: 0x29BF584
    int get_LayerCount();
    // protected System.Boolean get_useRaycastNormal()
    // Offset: 0x29BF610
    bool get_useRaycastNormal();
    // public UnityEngine.Vector2 get_size()
    // Offset: 0x29BF688
    ::UnityEngine::Vector2 get_size();
    // protected System.Void set_size(UnityEngine.Vector2 value)
    // Offset: 0x29BF694
    void set_size(::UnityEngine::Vector2 value);
    // public Pathfinding.Util.GraphTransform get_transform()
    // Offset: 0x29BF6A0
    ::Pathfinding::Util::GraphTransform* get_transform();
    // private System.Void set_transform(Pathfinding.Util.GraphTransform value)
    // Offset: 0x29BF6A8
    void set_transform(::Pathfinding::Util::GraphTransform* value);
    // public System.Boolean get_is2D()
    // Offset: 0x29BF6B8
    bool get_is2D();
    // public System.Void set_is2D(System.Boolean value)
    // Offset: 0x29BF7CC
    void set_is2D(bool value);
    // public System.Void RelocateNodes(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single nodeSize, System.Single aspectRatio, System.Single isometricAngle)
    // Offset: 0x29BFB4C
    void RelocateNodes(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float nodeSize, float aspectRatio, float isometricAngle);
    // public Pathfinding.Int3 GraphPointToWorld(System.Int32 x, System.Int32 z, System.Single height)
    // Offset: 0x29BFD14
    ::Pathfinding::Int3 GraphPointToWorld(int x, int z, float height);
    // static public System.Single ConvertHexagonSizeToNodeSize(Pathfinding.InspectorGridHexagonNodeSize mode, System.Single value)
    // Offset: 0x29BFD58
    static float ConvertHexagonSizeToNodeSize(::Pathfinding::InspectorGridHexagonNodeSize mode, float value);
    // static public System.Single ConvertNodeSizeToHexagonSize(Pathfinding.InspectorGridHexagonNodeSize mode, System.Single value)
    // Offset: 0x29BFDF4
    static float ConvertNodeSizeToHexagonSize(::Pathfinding::InspectorGridHexagonNodeSize mode, float value);
    // public System.Int32 get_Width()
    // Offset: 0x29BFE90
    int get_Width();
    // public System.Void set_Width(System.Int32 value)
    // Offset: 0x29BFE98
    void set_Width(int value);
    // public System.Int32 get_Depth()
    // Offset: 0x29BFEA0
    int get_Depth();
    // public System.Void set_Depth(System.Int32 value)
    // Offset: 0x29BFEA8
    void set_Depth(int value);
    // public System.UInt32 GetConnectionCost(System.Int32 dir)
    // Offset: 0x29BFEB0
    uint GetConnectionCost(int dir);
    // public Pathfinding.GridNode GetNodeConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x29BFEE0
    ::Pathfinding::GridNode* GetNodeConnection(::Pathfinding::GridNode* node, int dir);
    // public System.Boolean HasNodeConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x29C0194
    bool HasNodeConnection(::Pathfinding::GridNode* node, int dir);
    // public System.Void SetNodeConnection(Pathfinding.GridNode node, System.Int32 dir, System.Boolean value)
    // Offset: 0x29C02FC
    void SetNodeConnection(::Pathfinding::GridNode* node, int dir, bool value);
    // private Pathfinding.GridNode GetNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir)
    // Offset: 0x29C001C
    ::Pathfinding::GridNode* GetNodeConnection(int index, int x, int z, int dir);
    // public System.Void SetNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir, System.Boolean value)
    // Offset: 0x29C0340
    void SetNodeConnection(int index, int x, int z, int dir, bool value);
    // public System.Boolean HasNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir)
    // Offset: 0x29C0224
    bool HasNodeConnection(int index, int x, int z, int dir);
    // public System.Void SetGridShape(Pathfinding.InspectorGridMode shape)
    // Offset: 0x29C03F4
    void SetGridShape(::Pathfinding::InspectorGridMode shape);
    // public System.Void SetDimensions(System.Int32 width, System.Int32 depth, System.Single nodeSize)
    // Offset: 0x29BFCF4
    void SetDimensions(int width, int depth, float nodeSize);
    // public System.Void UpdateSizeFromWidthDepth()
    // Offset: 0x29C0524
    void UpdateSizeFromWidthDepth();
    // public System.Void GenerateMatrix()
    // Offset: 0x29C0540
    void GenerateMatrix();
    // public System.Void UpdateTransform()
    // Offset: 0x29C04F0
    void UpdateTransform();
    // public Pathfinding.Util.GraphTransform CalculateTransform()
    // Offset: 0x29C08F0
    ::Pathfinding::Util::GraphTransform* CalculateTransform();
    // private System.Void CalculateDimensions(out System.Int32 width, out System.Int32 depth, out System.Single nodeSize)
    // Offset: 0x29C0544
    void CalculateDimensions(ByRef<int> width, ByRef<int> depth, ByRef<float> nodeSize);
    // protected Pathfinding.GridNodeBase GetNearestFromGraphSpace(UnityEngine.Vector3 positionGraphSpace)
    // Offset: 0x29C0F38
    ::Pathfinding::GridNodeBase* GetNearestFromGraphSpace(::UnityEngine::Vector3 positionGraphSpace);
    // public System.Void SetUpOffsetsAndCosts()
    // Offset: 0x29C1558
    void SetUpOffsetsAndCosts();
    // public System.Void UpdateNodePositionCollision(Pathfinding.GridNode node, System.Int32 x, System.Int32 z, System.Boolean resetPenalty)
    // Offset: 0x29C19D8
    void UpdateNodePositionCollision(::Pathfinding::GridNode* node, int x, int z, bool resetPenalty);
    // public System.Void RecalculateCell(System.Int32 x, System.Int32 z, System.Boolean resetPenalties, System.Boolean resetTags)
    // Offset: 0x29C19FC
    void RecalculateCell(int x, int z, bool resetPenalties, bool resetTags);
    // protected System.Boolean ErosionAnyFalseConnections(Pathfinding.GraphNode baseNode)
    // Offset: 0x29C1EC0
    bool ErosionAnyFalseConnections(::Pathfinding::GraphNode* baseNode);
    // private System.Void ErodeNode(Pathfinding.GraphNode node)
    // Offset: 0x29C2000
    void ErodeNode(::Pathfinding::GraphNode* node);
    // private System.Void ErodeNodeWithTagsInit(Pathfinding.GraphNode node)
    // Offset: 0x29C2068
    void ErodeNodeWithTagsInit(::Pathfinding::GraphNode* node);
    // private System.Void ErodeNodeWithTags(Pathfinding.GraphNode node, System.Int32 iteration)
    // Offset: 0x29C20CC
    void ErodeNodeWithTags(::Pathfinding::GraphNode* node, int iteration);
    // public System.Void ErodeWalkableArea()
    // Offset: 0x29C22C4
    void ErodeWalkableArea();
    // public System.Void ErodeWalkableArea(System.Int32 xmin, System.Int32 zmin, System.Int32 xmax, System.Int32 zmax)
    // Offset: 0x29C22D4
    void ErodeWalkableArea(int xmin, int zmin, int xmax, int zmax);
    // public System.Boolean IsValidConnection(Pathfinding.GridNodeBase node1, Pathfinding.GridNodeBase node2)
    // Offset: 0x29C2710
    bool IsValidConnection(::Pathfinding::GridNodeBase* node1, ::Pathfinding::GridNodeBase* node2);
    // public System.Void CalculateConnectionsForCellAndNeighbours(System.Int32 x, System.Int32 z)
    // Offset: 0x29C28A4
    void CalculateConnectionsForCellAndNeighbours(int x, int z);
    // static public System.Void CalculateConnections(Pathfinding.GridNode node)
    // Offset: 0x29C296C
    static void CalculateConnections(::Pathfinding::GridNode* node);
    // public System.Void CalculateConnections(Pathfinding.GridNodeBase node)
    // Offset: 0x29C29F8
    void CalculateConnections(::Pathfinding::GridNodeBase* node);
    // public System.Void CalculateConnections(System.Int32 x, System.Int32 z, Pathfinding.GridNode node)
    // Offset: 0x29C2A38
    void CalculateConnections(int x, int z, ::Pathfinding::GridNode* node);
    // public System.Void CalculateConnections(System.Int32 x, System.Int32 z)
    // Offset: 0x29C2A48
    void CalculateConnections(int x, int z);
    // private System.Void CreateNavmeshSurfaceVisualization(Pathfinding.GridNodeBase[] nodes, System.Int32 nodeCount, Pathfinding.Util.GraphGizmoHelper helper)
    // Offset: 0x29C3890
    void CreateNavmeshSurfaceVisualization(::ArrayW<::Pathfinding::GridNodeBase*> nodes, int nodeCount, ::Pathfinding::Util::GraphGizmoHelper* helper);
    // public Pathfinding.IntRect GetRectFromBounds(UnityEngine.Bounds bounds)
    // Offset: 0x29C42F4
    ::Pathfinding::IntRect GetRectFromBounds(::UnityEngine::Bounds bounds);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(UnityEngine.Bounds bounds)
    // Offset: 0x29C46AC
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::UnityEngine::Bounds bounds);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(Pathfinding.GraphUpdateShape shape)
    // Offset: 0x29C4734
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::Pathfinding::GraphUpdateShape* shape);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(UnityEngine.Bounds bounds, Pathfinding.GraphUpdateShape shape)
    // Offset: 0x29C47A8
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::UnityEngine::Bounds bounds, ::Pathfinding::GraphUpdateShape* shape);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(UnityEngine.Bounds bounds)
    // Offset: 0x29C46F0
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::UnityEngine::Bounds bounds);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(Pathfinding.GraphUpdateShape shape)
    // Offset: 0x29C4738
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::Pathfinding::GraphUpdateShape* shape);
    // protected System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(UnityEngine.Bounds bounds, Pathfinding.GraphUpdateShape shape)
    // Offset: 0x29C47E8
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::UnityEngine::Bounds bounds, ::Pathfinding::GraphUpdateShape* shape);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInRegion(Pathfinding.IntRect rect)
    // Offset: 0x29C4A80
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInRegion(::Pathfinding::IntRect rect);
    // public System.Int32 GetNodesInRegion(Pathfinding.IntRect rect, Pathfinding.GridNodeBase[] buffer)
    // Offset: 0x29C4CB0
    int GetNodesInRegion(::Pathfinding::IntRect rect, ::ArrayW<::Pathfinding::GridNodeBase*> buffer);
    // public Pathfinding.GridNodeBase GetNode(System.Int32 x, System.Int32 z)
    // Offset: 0x29C4E50
    ::Pathfinding::GridNodeBase* GetNode(int x, int z);
    // private Pathfinding.GraphUpdateThreading Pathfinding.IUpdatableGraph.CanUpdateAsync(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29C4EAC
    ::Pathfinding::GraphUpdateThreading Pathfinding_IUpdatableGraph_CanUpdateAsync(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaInit(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29C4EB4
    void Pathfinding_IUpdatableGraph_UpdateAreaInit(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaPost(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29C4EB8
    void Pathfinding_IUpdatableGraph_UpdateAreaPost(::Pathfinding::GraphUpdateObject* o);
    // protected System.Void CalculateAffectedRegions(Pathfinding.GraphUpdateObject o, out Pathfinding.IntRect originalRect, out Pathfinding.IntRect affectRect, out Pathfinding.IntRect physicsRect, out System.Boolean willChangeWalkability, out System.Int32 erosion)
    // Offset: 0x29C4EBC
    void CalculateAffectedRegions(::Pathfinding::GraphUpdateObject* o, ByRef<::Pathfinding::IntRect> originalRect, ByRef<::Pathfinding::IntRect> affectRect, ByRef<::Pathfinding::IntRect> physicsRect, ByRef<bool> willChangeWalkability, ByRef<int> erosion);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateArea(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29C5664
    void Pathfinding_IUpdatableGraph_UpdateArea(::Pathfinding::GraphUpdateObject* o);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0x29C5CEC
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, Pathfinding.GraphNode hint)
    // Offset: 0x29C60B0
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::Pathfinding::GraphNode* hint);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit)
    // Offset: 0x29C60E8
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit);
    // static protected System.Int64 CrossMagnitude(Pathfinding.Int2 a, Pathfinding.Int2 b)
    // Offset: 0x29C6108
    static int64_t CrossMagnitude(::Pathfinding::Int2 a, ::Pathfinding::Int2 b);
    // protected System.Boolean ClipLineSegmentToBounds(UnityEngine.Vector3 a, UnityEngine.Vector3 b, out UnityEngine.Vector3 outA, out UnityEngine.Vector3 outB)
    // Offset: 0x29C6128
    bool ClipLineSegmentToBounds(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ByRef<::UnityEngine::Vector3> outA, ByRef<::UnityEngine::Vector3> outB);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace)
    // Offset: 0x29C60F8
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter)
    // Offset: 0x29C5D24
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter);
    // public System.Boolean SnappedLinecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit)
    // Offset: 0x29C6840
    bool SnappedLinecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit);
    // public System.Boolean Linecast(Pathfinding.GridNodeBase fromNode, Pathfinding.GridNodeBase toNode, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter)
    // Offset: 0x29C6928
    bool Linecast(::Pathfinding::GridNodeBase* fromNode, ::Pathfinding::GridNodeBase* toNode, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter);
    // public System.Boolean Linecast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, out Pathfinding.GridHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter)
    // Offset: 0x29C65A4
    bool Linecast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ByRef<::Pathfinding::GridHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter);
    // public System.Boolean Linecast(Pathfinding.GridNodeBase fromNode, UnityEngine.Vector2 normalizedFromPoint, Pathfinding.GridNodeBase toNode, UnityEngine.Vector2 normalizedToPoint, out Pathfinding.GridHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter, System.Boolean continuePastEnd)
    // Offset: 0x29C6968
    bool Linecast(::Pathfinding::GridNodeBase* fromNode, ::UnityEngine::Vector2 normalizedFromPoint, ::Pathfinding::GridNodeBase* toNode, ::UnityEngine::Vector2 normalizedToPoint, ByRef<::Pathfinding::GridHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter, bool continuePastEnd);
    // public System.Boolean Linecast(Pathfinding.GridNodeBase fromNode, Pathfinding.Int2 fixedNormalizedFromPoint, Pathfinding.GridNodeBase toNode, Pathfinding.Int2 fixedNormalizedToPoint, out Pathfinding.GridHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter, System.Boolean continuePastEnd)
    // Offset: 0x29C6C5C
    bool Linecast(::Pathfinding::GridNodeBase* fromNode, ::Pathfinding::Int2 fixedNormalizedFromPoint, ::Pathfinding::GridNodeBase* toNode, ::Pathfinding::Int2 fixedNormalizedToPoint, ByRef<::Pathfinding::GridHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter, bool continuePastEnd);
    // public System.Boolean CheckConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x29C7A94
    bool CheckConnection(::Pathfinding::GridNode* node, int dir);
    // static private System.Void .cctor()
    // Offset: 0x29C82F0
    static void _cctor();
    // protected override System.Void OnDestroy()
    // Offset: 0x29BF3E8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDestroy()
    void OnDestroy();
    // protected override System.Void DestroyAllNodes()
    // Offset: 0x29BF488
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DestroyAllNodes()
    void DestroyAllNodes();
    // public override System.Int32 CountNodes()
    // Offset: 0x29BF58C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Int32 NavGraph::CountNodes()
    int CountNodes();
    // public override System.Void GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0x29BF5A4
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    void GetNodes(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // public System.Void .ctor()
    // Offset: 0x29BF844
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GridGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GridGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GridGraph*, creationType>()));
    }
    // public override System.Void RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    // Offset: 0x29BFB00
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    void RelocateNodes(::UnityEngine::Matrix4x4 deltaMatrix);
    // public override Pathfinding.NNInfoInternal GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x29C0D8C
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfoInternal GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public override Pathfinding.NNInfoInternal GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x29C0FCC
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    ::Pathfinding::NNInfoInternal GetNearestForce(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // protected override System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanInternal()
    // Offset: 0x29C1928
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> NavGraph::ScanInternal()
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanInternal();
    // public override System.Void OnDrawGizmos(Pathfinding.Util.RetainedGizmos gizmos, System.Boolean drawNodes)
    // Offset: 0x29C2F80
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDrawGizmos(Pathfinding.Util.RetainedGizmos gizmos, System.Boolean drawNodes)
    void OnDrawGizmos(::Pathfinding::Util::RetainedGizmos* gizmos, bool drawNodes);
    // protected override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29C7C44
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29C7CFC
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29C7E94
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29C8114
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    void PostDeserialization(::Pathfinding::Serialization::GraphSerializationContext* ctx);
  }; // Pathfinding.GridGraph
  #pragma pack(pop)
  static check_size<sizeof(GridGraph), 392 + sizeof(::Pathfinding::Util::GraphTransform*)> __Pathfinding_GridGraphSizeCheck;
  static_assert(sizeof(GridGraph) == 0x190);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GridGraph::RemoveGridGraphFromStatic
// Il2CppName: RemoveGridGraphFromStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::RemoveGridGraphFromStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RemoveGridGraphFromStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_uniformWidthDepthGrid
// Il2CppName: get_uniformWidthDepthGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_uniformWidthDepthGrid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_uniformWidthDepthGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_LayerCount
// Il2CppName: get_LayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_LayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_LayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_useRaycastNormal
// Il2CppName: get_useRaycastNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_useRaycastNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_useRaycastNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_size
// Il2CppName: get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_size
// Il2CppName: set_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Vector2)>(&Pathfinding::GridGraph::set_size)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_transform
// Il2CppName: set_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::GridGraph::set_transform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_is2D
// Il2CppName: get_is2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_is2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_is2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_is2D
// Il2CppName: set_is2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(bool)>(&Pathfinding::GridGraph::set_is2D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_is2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, float)>(&Pathfinding::GridGraph::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* nodeSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isometricAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, nodeSize, aspectRatio, isometricAngle});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GraphPointToWorld
// Il2CppName: GraphPointToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::GridGraph::*)(int, int, float)>(&Pathfinding::GridGraph::GraphPointToWorld)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GraphPointToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, height});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ConvertHexagonSizeToNodeSize
// Il2CppName: ConvertHexagonSizeToNodeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::InspectorGridHexagonNodeSize, float)>(&Pathfinding::GridGraph::ConvertHexagonSizeToNodeSize)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("Pathfinding", "InspectorGridHexagonNodeSize")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ConvertHexagonSizeToNodeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ConvertNodeSizeToHexagonSize
// Il2CppName: ConvertNodeSizeToHexagonSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::InspectorGridHexagonNodeSize, float)>(&Pathfinding::GridGraph::ConvertNodeSizeToHexagonSize)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("Pathfinding", "InspectorGridHexagonNodeSize")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ConvertNodeSizeToHexagonSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_Width
// Il2CppName: set_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::set_Width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_Depth
// Il2CppName: set_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::set_Depth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetConnectionCost
// Il2CppName: GetConnectionCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::GetConnectionCost)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetConnectionCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodeConnection
// Il2CppName: GetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNode* (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::GetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::HasNodeConnection
// Il2CppName: HasNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::HasNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "HasNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetNodeConnection
// Il2CppName: SetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int, bool)>(&Pathfinding::GridGraph::SetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodeConnection
// Il2CppName: GetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNode* (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::GetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetNodeConnection
// Il2CppName: SetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, int, int, bool)>(&Pathfinding::GridGraph::SetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::HasNodeConnection
// Il2CppName: HasNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::HasNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "HasNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetGridShape
// Il2CppName: SetGridShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::InspectorGridMode)>(&Pathfinding::GridGraph::SetGridShape)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "InspectorGridMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetGridShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetDimensions
// Il2CppName: SetDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, float)>(&Pathfinding::GridGraph::SetDimensions)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, depth, nodeSize});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateSizeFromWidthDepth
// Il2CppName: UpdateSizeFromWidthDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::UpdateSizeFromWidthDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateSizeFromWidthDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GenerateMatrix
// Il2CppName: GenerateMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::GenerateMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GenerateMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateTransform
// Il2CppName: CalculateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::CalculateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateDimensions
// Il2CppName: CalculateDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(ByRef<int>, ByRef<int>, ByRef<float>)>(&Pathfinding::GridGraph::CalculateDimensions)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* nodeSize = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, depth, nodeSize});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNearestFromGraphSpace
// Il2CppName: GetNearestFromGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::GridGraph::*)(::UnityEngine::Vector3)>(&Pathfinding::GridGraph::GetNearestFromGraphSpace)> {
  static const MethodInfo* get() {
    static auto* positionGraphSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNearestFromGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionGraphSpace});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetUpOffsetsAndCosts
// Il2CppName: SetUpOffsetsAndCosts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::SetUpOffsetsAndCosts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetUpOffsetsAndCosts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateNodePositionCollision
// Il2CppName: UpdateNodePositionCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int, int, bool)>(&Pathfinding::GridGraph::UpdateNodePositionCollision)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resetPenalty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateNodePositionCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, x, z, resetPenalty});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::RecalculateCell
// Il2CppName: RecalculateCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, bool, bool)>(&Pathfinding::GridGraph::RecalculateCell)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resetPenalties = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resetTags = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RecalculateCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, resetPenalties, resetTags});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErosionAnyFalseConnections
// Il2CppName: ErosionAnyFalseConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::ErosionAnyFalseConnections)> {
  static const MethodInfo* get() {
    static auto* baseNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErosionAnyFalseConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeNode
// Il2CppName: ErodeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::ErodeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeNodeWithTagsInit
// Il2CppName: ErodeNodeWithTagsInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::ErodeNodeWithTagsInit)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeNodeWithTagsInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeNodeWithTags
// Il2CppName: ErodeNodeWithTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphNode*, int)>(&Pathfinding::GridGraph::ErodeNodeWithTags)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* iteration = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeNodeWithTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, iteration});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeWalkableArea
// Il2CppName: ErodeWalkableArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::ErodeWalkableArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeWalkableArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeWalkableArea
// Il2CppName: ErodeWalkableArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::ErodeWalkableArea)> {
  static const MethodInfo* get() {
    static auto* xmin = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zmin = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xmax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zmax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeWalkableArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmin, zmin, xmax, zmax});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::IsValidConnection
// Il2CppName: IsValidConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNodeBase*, ::Pathfinding::GridNodeBase*)>(&Pathfinding::GridGraph::IsValidConnection)> {
  static const MethodInfo* get() {
    static auto* node1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* node2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "IsValidConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node1, node2});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnectionsForCellAndNeighbours
// Il2CppName: CalculateConnectionsForCellAndNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int)>(&Pathfinding::GridGraph::CalculateConnectionsForCellAndNeighbours)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnectionsForCellAndNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GridNodeBase*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, ::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CreateNavmeshSurfaceVisualization
// Il2CppName: CreateNavmeshSurfaceVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::ArrayW<::Pathfinding::GridNodeBase*>, int, ::Pathfinding::Util::GraphGizmoHelper*)>(&Pathfinding::GridGraph::CreateNavmeshSurfaceVisualization)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase"), 1)->byval_arg;
    static auto* nodeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* helper = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphGizmoHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CreateNavmeshSurfaceVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, nodeCount, helper});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetRectFromBounds
// Il2CppName: GetRectFromBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::IntRect (Pathfinding::GridGraph::*)(::UnityEngine::Bounds)>(&Pathfinding::GridGraph::GetRectFromBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetRectFromBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds, ::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds)>(&Pathfinding::GridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds, ::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::Pathfinding::IntRect)>(&Pathfinding::GridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInRegion
// Il2CppName: GetNodesInRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)(::Pathfinding::IntRect, ::ArrayW<::Pathfinding::GridNodeBase*>)>(&Pathfinding::GridGraph::GetNodesInRegion)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNodeBase* (Pathfinding::GridGraph::*)(int, int)>(&Pathfinding::GridGraph::GetNode)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync
// Il2CppName: Pathfinding.IUpdatableGraph.CanUpdateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateThreading (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Pathfinding.IUpdatableGraph.CanUpdateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateAffectedRegions
// Il2CppName: CalculateAffectedRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*, ByRef<::Pathfinding::IntRect>, ByRef<::Pathfinding::IntRect>, ByRef<::Pathfinding::IntRect>, ByRef<bool>, ByRef<int>)>(&Pathfinding::GridGraph::CalculateAffectedRegions)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* originalRect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->this_arg;
    static auto* affectRect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->this_arg;
    static auto* physicsRect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->this_arg;
    static auto* willChangeWalkability = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* erosion = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateAffectedRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, originalRect, affectRect, physicsRect, willChangeWalkability, erosion});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateArea
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::Pathfinding_IUpdatableGraph_UpdateArea)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Pathfinding.IUpdatableGraph.UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hint, hit});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CrossMagnitude
// Il2CppName: CrossMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::GridGraph::CrossMagnitude)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CrossMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ClipLineSegmentToBounds
// Il2CppName: ClipLineSegmentToBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Pathfinding::GridGraph::ClipLineSegmentToBounds)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* outA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* outB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ClipLineSegmentToBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, outA, outB});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hint, hit, trace});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hit, trace, filter});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SnappedLinecast
// Il2CppName: SnappedLinecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>)>(&Pathfinding::GridGraph::SnappedLinecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SnappedLinecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hint, hit});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNodeBase*, ::Pathfinding::GridNodeBase*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* fromNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* toNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromNode, toNode, filter});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::Pathfinding::GridHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, hit, trace, filter});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNodeBase*, ::UnityEngine::Vector2, ::Pathfinding::GridNodeBase*, ::UnityEngine::Vector2, ByRef<::Pathfinding::GridHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*, bool)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* fromNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* normalizedFromPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* toNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* normalizedToPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* continuePastEnd = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromNode, normalizedFromPoint, toNode, normalizedToPoint, hit, trace, filter, continuePastEnd});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNodeBase*, ::Pathfinding::Int2, ::Pathfinding::GridNodeBase*, ::Pathfinding::Int2, ByRef<::Pathfinding::GridHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*, bool)>(&Pathfinding::GridGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* fromNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* fixedNormalizedFromPoint = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* toNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNodeBase")->byval_arg;
    static auto* fixedNormalizedToPoint = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* continuePastEnd = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromNode, fixedNormalizedFromPoint, toNode, fixedNormalizedToPoint, hit, trace, filter, continuePastEnd});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CheckConnection
// Il2CppName: CheckConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::CheckConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CheckConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::GridGraph::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::DestroyAllNodes
// Il2CppName: DestroyAllNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::DestroyAllNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "DestroyAllNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CountNodes
// Il2CppName: CountNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::CountNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CountNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::GridGraph::GetNodes)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GridGraph::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Matrix4x4)>(&Pathfinding::GridGraph::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* deltaMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::GridGraph::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::ScanInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Util::RetainedGizmos*, bool)>(&Pathfinding::GridGraph::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* gizmos = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos")->byval_arg;
    static auto* drawNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gizmos, drawNodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::PostDeserialization)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
