// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: SingleNodeBlocker
  class SingleNodeBlocker;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: BlockManager
  class BlockManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BlockManager);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BlockManager*, "Pathfinding", "BlockManager");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BlockManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class BlockManager : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    // Nested type: ::Pathfinding::BlockManager::BlockMode
    struct BlockMode;
    // Nested type: ::Pathfinding::BlockManager::TraversalProvider
    class TraversalProvider;
    // Nested type: ::Pathfinding::BlockManager::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    // Nested type: ::Pathfinding::BlockManager::$$c__DisplayClass7_0
    class $$c__DisplayClass7_0;
    public:
    // private System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker>> blocked
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*>* blocked;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker>> blocked
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*>*& dyn_blocked();
    // private System.Void Start()
    // Offset: 0x2A03DB0
    void Start();
    // public System.Boolean NodeContainsAnyOf(Pathfinding.GraphNode node, System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker> selector)
    // Offset: 0x2A03E88
    bool NodeContainsAnyOf(::Pathfinding::GraphNode* node, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>* selector);
    // public System.Boolean NodeContainsAnyExcept(Pathfinding.GraphNode node, System.Collections.Generic.List`1<Pathfinding.SingleNodeBlocker> selector)
    // Offset: 0x2A03FA0
    bool NodeContainsAnyExcept(::Pathfinding::GraphNode* node, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>* selector);
    // public System.Void InternalBlock(Pathfinding.GraphNode node, Pathfinding.SingleNodeBlocker blocker)
    // Offset: 0x2A040C4
    void InternalBlock(::Pathfinding::GraphNode* node, ::Pathfinding::SingleNodeBlocker* blocker);
    // public System.Void InternalUnblock(Pathfinding.GraphNode node, Pathfinding.SingleNodeBlocker blocker)
    // Offset: 0x2A04224
    void InternalUnblock(::Pathfinding::GraphNode* node, ::Pathfinding::SingleNodeBlocker* blocker);
    // public System.Void .ctor()
    // Offset: 0x2A04384
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlockManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BlockManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlockManager*, creationType>()));
    }
  }; // Pathfinding.BlockManager
  #pragma pack(pop)
  static check_size<sizeof(BlockManager), 40 + sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*>*)> __Pathfinding_BlockManagerSizeCheck;
  static_assert(sizeof(BlockManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BlockManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BlockManager::*)()>(&Pathfinding::BlockManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::NodeContainsAnyOf
// Il2CppName: NodeContainsAnyOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::BlockManager::*)(::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*)>(&Pathfinding::BlockManager::NodeContainsAnyOf)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* selector = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "SingleNodeBlocker")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager*), "NodeContainsAnyOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, selector});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::NodeContainsAnyExcept
// Il2CppName: NodeContainsAnyExcept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::BlockManager::*)(::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::Pathfinding::SingleNodeBlocker*>*)>(&Pathfinding::BlockManager::NodeContainsAnyExcept)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* selector = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "SingleNodeBlocker")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager*), "NodeContainsAnyExcept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, selector});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::InternalBlock
// Il2CppName: InternalBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BlockManager::*)(::Pathfinding::GraphNode*, ::Pathfinding::SingleNodeBlocker*)>(&Pathfinding::BlockManager::InternalBlock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* blocker = &::il2cpp_utils::GetClassFromName("Pathfinding", "SingleNodeBlocker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager*), "InternalBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, blocker});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::InternalUnblock
// Il2CppName: InternalUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BlockManager::*)(::Pathfinding::GraphNode*, ::Pathfinding::SingleNodeBlocker*)>(&Pathfinding::BlockManager::InternalUnblock)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* blocker = &::il2cpp_utils::GetClassFromName("Pathfinding", "SingleNodeBlocker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BlockManager*), "InternalUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, blocker});
  }
};
// Writing MetadataGetter for method: Pathfinding::BlockManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
