// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichPathPart
  class RichPathPart;
  // Forward declaring type: Seeker
  class Seeker;
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: ITransform
  class ITransform;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichPath
  class RichPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RichPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RichPath*, "Pathfinding", "RichPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RichPath
  // [TokenAttribute] Offset: FFFFFFFF
  class RichPath : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 currentPart
    // Size: 0x4
    // Offset: 0x10
    int currentPart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentPart and: parts
    char __padding0[0x4] = {};
    // private readonly System.Collections.Generic.List`1<Pathfinding.RichPathPart> parts
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Pathfinding::RichPathPart*>* parts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::RichPathPart*>*) == 0x8);
    // public Pathfinding.Seeker seeker
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Seeker* seeker;
    // Field size check
    static_assert(sizeof(::Pathfinding::Seeker*) == 0x8);
    // public Pathfinding.Util.ITransform transform
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Util::ITransform* transform;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::ITransform*) == 0x8);
    // private UnityEngine.Vector3 <Endpoint>k__BackingField
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 Endpoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Int32 currentPart
    [[deprecated("Use field access instead!")]] int& dyn_currentPart();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Pathfinding.RichPathPart> parts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::RichPathPart*>*& dyn_parts();
    // Get instance field reference: public Pathfinding.Seeker seeker
    [[deprecated("Use field access instead!")]] ::Pathfinding::Seeker*& dyn_seeker();
    // Get instance field reference: public Pathfinding.Util.ITransform transform
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::ITransform*& dyn_transform();
    // Get instance field reference: private UnityEngine.Vector3 <Endpoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Endpoint$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x29936D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RichPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RichPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RichPath*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x2990F68
    void Clear();
    // public System.Void Initialize(Pathfinding.Seeker seeker, Pathfinding.Path path, System.Boolean mergePartEndpoints, System.Boolean simplificationMode)
    // Offset: 0x299054C
    void Initialize(::Pathfinding::Seeker* seeker, ::Pathfinding::Path* path, bool mergePartEndpoints, bool simplificationMode);
    // public UnityEngine.Vector3 get_Endpoint()
    // Offset: 0x2994454
    ::UnityEngine::Vector3 get_Endpoint();
    // private System.Void set_Endpoint(UnityEngine.Vector3 value)
    // Offset: 0x2994460
    void set_Endpoint(::UnityEngine::Vector3 value);
    // public System.Boolean get_CompletedAllParts()
    // Offset: 0x2990FE4
    bool get_CompletedAllParts();
    // public System.Boolean get_IsLastPart()
    // Offset: 0x298FE34
    bool get_IsLastPart();
    // public System.Void NextPart()
    // Offset: 0x2991038
    void NextPart();
    // public Pathfinding.RichPathPart GetCurrentPart()
    // Offset: 0x298FC74
    ::Pathfinding::RichPathPart* GetCurrentPart();
    // public System.Void GetRemainingPath(System.Collections.Generic.List`1<UnityEngine.Vector3> buffer, UnityEngine.Vector3 currentPosition, out System.Boolean requiresRepath)
    // Offset: 0x29910B8
    void GetRemainingPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer, ::UnityEngine::Vector3 currentPosition, ByRef<bool> requiresRepath);
  }; // Pathfinding.RichPath
  #pragma pack(pop)
  static check_size<sizeof(RichPath), 48 + sizeof(::UnityEngine::Vector3)> __Pathfinding_RichPathSizeCheck;
  static_assert(sizeof(RichPath) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RichPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RichPath::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichPath::*)(::Pathfinding::Seeker*, ::Pathfinding::Path*, bool, bool)>(&Pathfinding::RichPath::Initialize)> {
  static const MethodInfo* get() {
    static auto* seeker = &::il2cpp_utils::GetClassFromName("Pathfinding", "Seeker")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* mergePartEndpoints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* simplificationMode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seeker, path, mergePartEndpoints, simplificationMode});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::get_Endpoint
// Il2CppName: get_Endpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::get_Endpoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "get_Endpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::set_Endpoint
// Il2CppName: set_Endpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichPath::*)(::UnityEngine::Vector3)>(&Pathfinding::RichPath::set_Endpoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "set_Endpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::get_CompletedAllParts
// Il2CppName: get_CompletedAllParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::get_CompletedAllParts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "get_CompletedAllParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::get_IsLastPart
// Il2CppName: get_IsLastPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::get_IsLastPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "get_IsLastPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::NextPart
// Il2CppName: NextPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::NextPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "NextPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::GetCurrentPart
// Il2CppName: GetCurrentPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RichPathPart* (Pathfinding::RichPath::*)()>(&Pathfinding::RichPath::GetCurrentPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "GetCurrentPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichPath::GetRemainingPath
// Il2CppName: GetRemainingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichPath::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::RichPath::GetRemainingPath)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* currentPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* requiresRepath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichPath*), "GetRemainingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, currentPosition, requiresRepath});
  }
};
