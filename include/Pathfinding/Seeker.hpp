// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: Pathfinding.GraphMask
#include "Pathfinding/GraphMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: StartEndModifier
  class StartEndModifier;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: IPathModifier
  class IPathModifier;
  // Forward declaring type: ABPath
  class ABPath;
  // Forward declaring type: MultiTargetPath
  class MultiTargetPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Seeker
  class Seeker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Seeker);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Seeker*, "Pathfinding", "Seeker");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Seeker
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class Seeker : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Seeker::ModifierPass
    struct ModifierPass;
    // Nested type: ::Pathfinding::Seeker::$$c
    class $$c;
    public:
    // public System.Boolean drawGizmos
    // Size: 0x1
    // Offset: 0x24
    bool drawGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean detailedGizmos
    // Size: 0x1
    // Offset: 0x25
    bool detailedGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: detailedGizmos and: startEndModifier
    char __padding1[0x2] = {};
    // public Pathfinding.StartEndModifier startEndModifier
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::StartEndModifier* startEndModifier;
    // Field size check
    static_assert(sizeof(::Pathfinding::StartEndModifier*) == 0x8);
    // public System.Int32 traversableTags
    // Size: 0x4
    // Offset: 0x30
    int traversableTags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: traversableTags and: tagPenalties
    char __padding3[0x4] = {};
    // public System.Int32[] tagPenalties
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> tagPenalties;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Pathfinding.GraphMask graphMask
    // Size: 0x4
    // Offset: 0x40
    ::Pathfinding::GraphMask graphMask;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphMask) == 0x4);
    // private System.Int32 graphMaskCompatibility
    // Size: 0x4
    // Offset: 0x44
    int graphMaskCompatibility;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.OnPathDelegate pathCallback
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::OnPathDelegate* pathCallback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public Pathfinding.OnPathDelegate preProcessPath
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::OnPathDelegate* preProcessPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public Pathfinding.OnPathDelegate postProcessPath
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::OnPathDelegate* postProcessPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> lastCompletedVectorPath
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* lastCompletedVectorPath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.GraphNode> lastCompletedNodePath
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* lastCompletedNodePath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // protected Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private Pathfinding.Path prevPath
    // Size: 0x8
    // Offset: 0x78
    ::Pathfinding::Path* prevPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private readonly Pathfinding.OnPathDelegate onPathDelegate
    // Size: 0x8
    // Offset: 0x80
    ::Pathfinding::OnPathDelegate* onPathDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private readonly Pathfinding.OnPathDelegate onPartialPathDelegate
    // Size: 0x8
    // Offset: 0x88
    ::Pathfinding::OnPathDelegate* onPartialPathDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private Pathfinding.OnPathDelegate tmpPathCallback
    // Size: 0x8
    // Offset: 0x90
    ::Pathfinding::OnPathDelegate* tmpPathCallback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // protected System.UInt32 lastPathID
    // Size: 0x4
    // Offset: 0x98
    uint lastPathID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: lastPathID and: modifiers
    char __padding17[0x4] = {};
    // private readonly System.Collections.Generic.List`1<Pathfinding.IPathModifier> modifiers
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>* modifiers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean drawGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_drawGizmos();
    // Get instance field reference: public System.Boolean detailedGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_detailedGizmos();
    // Get instance field reference: public Pathfinding.StartEndModifier startEndModifier
    [[deprecated("Use field access instead!")]] ::Pathfinding::StartEndModifier*& dyn_startEndModifier();
    // Get instance field reference: public System.Int32 traversableTags
    [[deprecated("Use field access instead!")]] int& dyn_traversableTags();
    // Get instance field reference: public System.Int32[] tagPenalties
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_tagPenalties();
    // Get instance field reference: public Pathfinding.GraphMask graphMask
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphMask& dyn_graphMask();
    // Get instance field reference: private System.Int32 graphMaskCompatibility
    [[deprecated("Use field access instead!")]] int& dyn_graphMaskCompatibility();
    // Get instance field reference: public Pathfinding.OnPathDelegate pathCallback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_pathCallback();
    // Get instance field reference: public Pathfinding.OnPathDelegate preProcessPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_preProcessPath();
    // Get instance field reference: public Pathfinding.OnPathDelegate postProcessPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_postProcessPath();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> lastCompletedVectorPath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_lastCompletedVectorPath();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.GraphNode> lastCompletedNodePath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_lastCompletedNodePath();
    // Get instance field reference: protected Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: private Pathfinding.Path prevPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_prevPath();
    // Get instance field reference: private readonly Pathfinding.OnPathDelegate onPathDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_onPathDelegate();
    // Get instance field reference: private readonly Pathfinding.OnPathDelegate onPartialPathDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_onPartialPathDelegate();
    // Get instance field reference: private Pathfinding.OnPathDelegate tmpPathCallback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_tmpPathCallback();
    // Get instance field reference: protected System.UInt32 lastPathID
    [[deprecated("Use field access instead!")]] uint& dyn_lastPathID();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Pathfinding.IPathModifier> modifiers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*& dyn_modifiers();
    // public Pathfinding.Path GetCurrentPath()
    // Offset: 0x29972E0
    ::Pathfinding::Path* GetCurrentPath();
    // public System.Void CancelCurrentPathRequest(System.Boolean pool)
    // Offset: 0x2989B50
    void CancelCurrentPathRequest(bool pool);
    // public System.Void OnDestroy()
    // Offset: 0x2997308
    void OnDestroy();
    // private System.Void ReleaseClaimedPath()
    // Offset: 0x2997330
    void ReleaseClaimedPath();
    // public System.Void RegisterModifier(Pathfinding.IPathModifier modifier)
    // Offset: 0x299737C
    void RegisterModifier(::Pathfinding::IPathModifier* modifier);
    // public System.Void DeregisterModifier(Pathfinding.IPathModifier modifier)
    // Offset: 0x29974FC
    void DeregisterModifier(::Pathfinding::IPathModifier* modifier);
    // public System.Void PostProcess(Pathfinding.Path path)
    // Offset: 0x2997554
    void PostProcess(::Pathfinding::Path* path);
    // public System.Void RunModifiers(Pathfinding.Seeker/ModifierPass pass, Pathfinding.Path path)
    // Offset: 0x2997560
    void RunModifiers(::Pathfinding::Seeker::ModifierPass pass, ::Pathfinding::Path* path);
    // public System.Boolean IsDone()
    // Offset: 0x29972E8
    bool IsDone();
    // private System.Void OnPathComplete(Pathfinding.Path path)
    // Offset: 0x2997764
    void OnPathComplete(::Pathfinding::Path* path);
    // private System.Void OnPathComplete(Pathfinding.Path p, System.Boolean runModifiers, System.Boolean sendCallbacks)
    // Offset: 0x2997770
    void OnPathComplete(::Pathfinding::Path* p, bool runModifiers, bool sendCallbacks);
    // private System.Void OnPartialPathComplete(Pathfinding.Path p)
    // Offset: 0x29978E8
    void OnPartialPathComplete(::Pathfinding::Path* p);
    // private System.Void OnMultiPathComplete(Pathfinding.Path p)
    // Offset: 0x29978F4
    void OnMultiPathComplete(::Pathfinding::Path* p);
    // public Pathfinding.ABPath GetNewPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0x2997900
    ::Pathfinding::ABPath* GetNewPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0x299799C
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29979A4
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback, Pathfinding.GraphMask graphMask)
    // Offset: 0x2997A60
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback, ::Pathfinding::GraphMask graphMask);
    // public Pathfinding.Path StartPath(Pathfinding.Path p, Pathfinding.OnPathDelegate callback)
    // Offset: 0x298A3F8
    ::Pathfinding::Path* StartPath(::Pathfinding::Path* p, ::Pathfinding::OnPathDelegate* callback);
    // public Pathfinding.Path StartPath(Pathfinding.Path p, Pathfinding.OnPathDelegate callback, Pathfinding.GraphMask graphMask)
    // Offset: 0x2997B24
    ::Pathfinding::Path* StartPath(::Pathfinding::Path* p, ::Pathfinding::OnPathDelegate* callback, ::Pathfinding::GraphMask graphMask);
    // private System.Void StartPathInternal(Pathfinding.Path p, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2997B54
    void StartPathInternal(::Pathfinding::Path* p, ::Pathfinding::OnPathDelegate* callback);
    // public Pathfinding.MultiTargetPath StartMultiTargetPath(UnityEngine.Vector3 start, UnityEngine.Vector3[] endPoints, System.Boolean pathsForAll, Pathfinding.OnPathDelegate callback, System.Int32 graphMask)
    // Offset: 0x2997DEC
    ::Pathfinding::MultiTargetPath* StartMultiTargetPath(::UnityEngine::Vector3 start, ::ArrayW<::UnityEngine::Vector3> endPoints, bool pathsForAll, ::Pathfinding::OnPathDelegate* callback, int graphMask);
    // public Pathfinding.MultiTargetPath StartMultiTargetPath(UnityEngine.Vector3[] startPoints, UnityEngine.Vector3 end, System.Boolean pathsForAll, Pathfinding.OnPathDelegate callback, System.Int32 graphMask)
    // Offset: 0x2997E5C
    ::Pathfinding::MultiTargetPath* StartMultiTargetPath(::ArrayW<::UnityEngine::Vector3> startPoints, ::UnityEngine::Vector3 end, bool pathsForAll, ::Pathfinding::OnPathDelegate* callback, int graphMask);
    // public Pathfinding.MultiTargetPath StartMultiTargetPath(Pathfinding.MultiTargetPath p, Pathfinding.OnPathDelegate callback, System.Int32 graphMask)
    // Offset: 0x2997ECC
    ::Pathfinding::MultiTargetPath* StartMultiTargetPath(::Pathfinding::MultiTargetPath* p, ::Pathfinding::OnPathDelegate* callback, int graphMask);
    // public System.Void OnDrawGizmos()
    // Offset: 0x2997F08
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x2997104
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Seeker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Seeker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Seeker*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x29972B4
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
    // protected override System.Int32 OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    // Offset: 0x299810C
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Int32 VersionedMonoBehaviour::OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    int OnUpgradeSerializedData(int version, bool unityThread);
  }; // Pathfinding.Seeker
  #pragma pack(pop)
  static check_size<sizeof(Seeker), 160 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*)> __Pathfinding_SeekerSizeCheck;
  static_assert(sizeof(Seeker) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Seeker::GetCurrentPath
// Il2CppName: GetCurrentPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::GetCurrentPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "GetCurrentPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::CancelCurrentPathRequest
// Il2CppName: CancelCurrentPathRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(bool)>(&Pathfinding::Seeker::CancelCurrentPathRequest)> {
  static const MethodInfo* get() {
    static auto* pool = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "CancelCurrentPathRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pool});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::ReleaseClaimedPath
// Il2CppName: ReleaseClaimedPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::ReleaseClaimedPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "ReleaseClaimedPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::RegisterModifier
// Il2CppName: RegisterModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::IPathModifier*)>(&Pathfinding::Seeker::RegisterModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("Pathfinding", "IPathModifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "RegisterModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::DeregisterModifier
// Il2CppName: DeregisterModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::IPathModifier*)>(&Pathfinding::Seeker::DeregisterModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("Pathfinding", "IPathModifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "DeregisterModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::PostProcess
// Il2CppName: PostProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*)>(&Pathfinding::Seeker::PostProcess)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "PostProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::RunModifiers
// Il2CppName: RunModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Seeker::ModifierPass, ::Pathfinding::Path*)>(&Pathfinding::Seeker::RunModifiers)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("Pathfinding", "Seeker/ModifierPass")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "RunModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::IsDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*)>(&Pathfinding::Seeker::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*, bool, bool)>(&Pathfinding::Seeker::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* runModifiers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sendCallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, runModifiers, sendCallbacks});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnPartialPathComplete
// Il2CppName: OnPartialPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*)>(&Pathfinding::Seeker::OnPartialPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnPartialPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnMultiPathComplete
// Il2CppName: OnMultiPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*)>(&Pathfinding::Seeker::OnMultiPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnMultiPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::GetNewPath
// Il2CppName: GetNewPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ABPath* (Pathfinding::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Seeker::GetNewPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "GetNewPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*, ::Pathfinding::GraphMask)>(&Pathfinding::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback, graphMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)(::Pathfinding::Path*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Seeker::*)(::Pathfinding::Path*, ::Pathfinding::OnPathDelegate*, ::Pathfinding::GraphMask)>(&Pathfinding::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback, graphMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartPathInternal
// Il2CppName: StartPathInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)(::Pathfinding::Path*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::Seeker::StartPathInternal)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartPathInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartMultiTargetPath
// Il2CppName: StartMultiTargetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::MultiTargetPath* (Pathfinding::Seeker::*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, bool, ::Pathfinding::OnPathDelegate*, int)>(&Pathfinding::Seeker::StartMultiTargetPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* pathsForAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartMultiTargetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, endPoints, pathsForAll, callback, graphMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartMultiTargetPath
// Il2CppName: StartMultiTargetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::MultiTargetPath* (Pathfinding::Seeker::*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3, bool, ::Pathfinding::OnPathDelegate*, int)>(&Pathfinding::Seeker::StartMultiTargetPath)> {
  static const MethodInfo* get() {
    static auto* startPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pathsForAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartMultiTargetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPoints, end, pathsForAll, callback, graphMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::StartMultiTargetPath
// Il2CppName: StartMultiTargetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::MultiTargetPath* (Pathfinding::Seeker::*)(::Pathfinding::MultiTargetPath*, ::Pathfinding::OnPathDelegate*, int)>(&Pathfinding::Seeker::StartMultiTargetPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "MultiTargetPath")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "StartMultiTargetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback, graphMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Seeker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Seeker::*)()>(&Pathfinding::Seeker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Seeker::OnUpgradeSerializedData
// Il2CppName: OnUpgradeSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Seeker::*)(int, bool)>(&Pathfinding::Seeker::OnUpgradeSerializedData)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* unityThread = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Seeker*), "OnUpgradeSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, unityThread});
  }
};
