// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AdvancedSmooth
#include "Pathfinding/AdvancedSmooth.hpp"
// Including type: Pathfinding.AdvancedSmooth/TurnConstructor
#include "Pathfinding/AdvancedSmooth_TurnConstructor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AdvancedSmooth::ConstantTurn);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AdvancedSmooth::ConstantTurn*, "Pathfinding", "AdvancedSmooth/ConstantTurn");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AdvancedSmooth/ConstantTurn
  // [TokenAttribute] Offset: FFFFFFFF
  class AdvancedSmooth::ConstantTurn : public ::Pathfinding::AdvancedSmooth::TurnConstructor {
    public:
    public:
    // private UnityEngine.Vector3 circleCenter
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 circleCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: circleCenter and: gamma1
    char __padding0[0x4] = {};
    // private System.Double gamma1
    // Size: 0x8
    // Offset: 0x28
    double gamma1;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double gamma2
    // Size: 0x8
    // Offset: 0x30
    double gamma2;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean clockwise
    // Size: 0x1
    // Offset: 0x38
    bool clockwise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Vector3 circleCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_circleCenter();
    // Get instance field reference: private System.Double gamma1
    [[deprecated("Use field access instead!")]] double& dyn_gamma1();
    // Get instance field reference: private System.Double gamma2
    [[deprecated("Use field access instead!")]] double& dyn_gamma2();
    // Get instance field reference: private System.Boolean clockwise
    [[deprecated("Use field access instead!")]] bool& dyn_clockwise();
    // public override System.Void Prepare(System.Int32 i, UnityEngine.Vector3[] vectorPath)
    // Offset: 0x29F1554
    // Implemented from: Pathfinding.AdvancedSmooth/TurnConstructor
    // Base method: System.Void TurnConstructor::Prepare(System.Int32 i, UnityEngine.Vector3[] vectorPath)
    void Prepare(int i, ::ArrayW<::UnityEngine::Vector3> vectorPath);
    // public override System.Void TangentToTangent(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList)
    // Offset: 0x29F1558
    // Implemented from: Pathfinding.AdvancedSmooth/TurnConstructor
    // Base method: System.Void TurnConstructor::TangentToTangent(System.Collections.Generic.List`1<Pathfinding.AdvancedSmooth/Turn> turnList)
    void TangentToTangent(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>* turnList);
    // public override System.Void GetPath(Pathfinding.AdvancedSmooth/Turn turn, System.Collections.Generic.List`1<UnityEngine.Vector3> output)
    // Offset: 0x29F1940
    // Implemented from: Pathfinding.AdvancedSmooth/TurnConstructor
    // Base method: System.Void TurnConstructor::GetPath(Pathfinding.AdvancedSmooth/Turn turn, System.Collections.Generic.List`1<UnityEngine.Vector3> output)
    void GetPath(::Pathfinding::AdvancedSmooth::Turn turn, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* output);
    // public System.Void .ctor()
    // Offset: 0x29EF3A8
    // Implemented from: Pathfinding.AdvancedSmooth/TurnConstructor
    // Base method: System.Void TurnConstructor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancedSmooth::ConstantTurn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AdvancedSmooth::ConstantTurn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancedSmooth::ConstantTurn*, creationType>()));
    }
  }; // Pathfinding.AdvancedSmooth/ConstantTurn
  #pragma pack(pop)
  static check_size<sizeof(AdvancedSmooth::ConstantTurn), 56 + sizeof(bool)> __Pathfinding_AdvancedSmooth_ConstantTurnSizeCheck;
  static_assert(sizeof(AdvancedSmooth::ConstantTurn) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::ConstantTurn::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::ConstantTurn::*)(int, ::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::AdvancedSmooth::ConstantTurn::Prepare)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vectorPath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::ConstantTurn*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, vectorPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::ConstantTurn::TangentToTangent
// Il2CppName: TangentToTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::ConstantTurn::*)(::System::Collections::Generic::List_1<::Pathfinding::AdvancedSmooth::Turn>*)>(&Pathfinding::AdvancedSmooth::ConstantTurn::TangentToTangent)> {
  static const MethodInfo* get() {
    static auto* turnList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::ConstantTurn*), "TangentToTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turnList});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::ConstantTurn::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AdvancedSmooth::ConstantTurn::*)(::Pathfinding::AdvancedSmooth::Turn, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::AdvancedSmooth::ConstantTurn::GetPath)> {
  static const MethodInfo* get() {
    static auto* turn = &::il2cpp_utils::GetClassFromName("Pathfinding", "AdvancedSmooth/Turn")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AdvancedSmooth::ConstantTurn*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turn, output});
  }
};
// Writing MetadataGetter for method: Pathfinding::AdvancedSmooth::ConstantTurn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
