// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Int3
  struct Int3;
  // Forward declaring type: Int2
  struct Int2;
  // Forward declaring type: Side
  struct Side;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: VectorMath
  class VectorMath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::VectorMath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::VectorMath*, "Pathfinding", "VectorMath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.VectorMath
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorMath : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector2 ComplexMultiply(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0x299DF0C
    static ::UnityEngine::Vector2 ComplexMultiply(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b);
    // static public UnityEngine.Vector2 ComplexMultiplyConjugate(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0x299DF28
    static ::UnityEngine::Vector2 ComplexMultiplyConjugate(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b);
    // static public UnityEngine.Vector3 ClosestPointOnLine(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 point)
    // Offset: 0x299DF44
    static ::UnityEngine::Vector3 ClosestPointOnLine(::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd, ::UnityEngine::Vector3 point);
    // static public System.Single ClosestPointOnLineFactor(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 point)
    // Offset: 0x299E084
    static float ClosestPointOnLineFactor(::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd, ::UnityEngine::Vector3 point);
    // static public System.Single ClosestPointOnLineFactor(Pathfinding.Int3 lineStart, Pathfinding.Int3 lineEnd, Pathfinding.Int3 point)
    // Offset: 0x299E0F0
    static float ClosestPointOnLineFactor(::Pathfinding::Int3 lineStart, ::Pathfinding::Int3 lineEnd, ::Pathfinding::Int3 point);
    // static public System.Single ClosestPointOnLineFactor(Pathfinding.Int2 lineStart, Pathfinding.Int2 lineEnd, Pathfinding.Int2 point)
    // Offset: 0x299E19C
    static float ClosestPointOnLineFactor(::Pathfinding::Int2 lineStart, ::Pathfinding::Int2 lineEnd, ::Pathfinding::Int2 point);
    // static public UnityEngine.Vector3 ClosestPointOnSegment(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 point)
    // Offset: 0x299E218
    static ::UnityEngine::Vector3 ClosestPointOnSegment(::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd, ::UnityEngine::Vector3 point);
    // static public UnityEngine.Vector3 ClosestPointOnSegmentXZ(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 point)
    // Offset: 0x299E2A8
    static ::UnityEngine::Vector3 ClosestPointOnSegmentXZ(::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd, ::UnityEngine::Vector3 point);
    // static public System.Single SqrDistancePointSegmentApproximate(System.Int32 x, System.Int32 z, System.Int32 px, System.Int32 pz, System.Int32 qx, System.Int32 qz)
    // Offset: 0x299E438
    static float SqrDistancePointSegmentApproximate(int x, int z, int px, int pz, int qx, int qz);
    // static public System.Single SqrDistancePointSegmentApproximate(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x299E4D4
    static float SqrDistancePointSegmentApproximate(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public System.Single SqrDistancePointSegment(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 p)
    // Offset: 0x299E570
    static float SqrDistancePointSegment(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 p);
    // static public System.Single SqrDistanceSegmentSegment(UnityEngine.Vector3 s1, UnityEngine.Vector3 e1, UnityEngine.Vector3 s2, UnityEngine.Vector3 e2)
    // Offset: 0x299E5C8
    static float SqrDistanceSegmentSegment(::UnityEngine::Vector3 s1, ::UnityEngine::Vector3 e1, ::UnityEngine::Vector3 s2, ::UnityEngine::Vector3 e2);
    // static public System.Single SqrDistanceXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x299E8CC
    static float SqrDistanceXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // static public System.Int64 SignedTriangleAreaTimes2XZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x299E8E4
    static int64_t SignedTriangleAreaTimes2XZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Single SignedTriangleAreaTimes2XZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x299E900
    static float SignedTriangleAreaTimes2XZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean RightXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 p)
    // Offset: 0x299E928
    static bool RightXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 p);
    // static public System.Boolean RightXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x299E960
    static bool RightXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public Pathfinding.Side SideXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x299E984
    static ::Pathfinding::Side SideXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public System.Boolean RightOrColinear(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 p)
    // Offset: 0x299E9B8
    static bool RightOrColinear(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b, ::UnityEngine::Vector2 p);
    // static public System.Boolean RightOrColinear(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 p)
    // Offset: 0x299E9E0
    static bool RightOrColinear(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 p);
    // static public System.Boolean RightOrColinearXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 p)
    // Offset: 0x299EA18
    static bool RightOrColinearXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 p);
    // static public System.Boolean RightOrColinearXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x299EA48
    static bool RightOrColinearXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public System.Boolean IsClockwiseMarginXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x299EA6C
    static bool IsClockwiseMarginXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsClockwiseXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x299EAA4
    static bool IsClockwiseXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsClockwiseXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x299EAD4
    static bool IsClockwiseXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsClockwiseOrColinearXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x299EAF8
    static bool IsClockwiseOrColinearXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsClockwiseOrColinear(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 c)
    // Offset: 0x299EB1C
    static bool IsClockwiseOrColinear(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 c);
    // static public System.Boolean IsColinear(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x299EB54
    static bool IsColinear(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsColinear(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c)
    // Offset: 0x299EBC0
    static bool IsColinear(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b, ::UnityEngine::Vector2 c);
    // static public System.Boolean IsColinearXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x299EC04
    static bool IsColinearXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsColinearXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x299EC28
    static bool IsColinearXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsColinearAlmostXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x299EC74
    static bool IsColinearAlmostXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean SegmentsIntersect(Pathfinding.Int2 start1, Pathfinding.Int2 end1, Pathfinding.Int2 start2, Pathfinding.Int2 end2)
    // Offset: 0x299EC98
    static bool SegmentsIntersect(::Pathfinding::Int2 start1, ::Pathfinding::Int2 end1, ::Pathfinding::Int2 start2, ::Pathfinding::Int2 end2);
    // static public System.Boolean SegmentsIntersectXZ(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x299ED58
    static bool SegmentsIntersectXZ(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Boolean SegmentsIntersectXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x299EDE0
    static bool SegmentsIntersectXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public System.Boolean LineLineIntersectionFactor(UnityEngine.Vector2 start1, UnityEngine.Vector2 dir1, UnityEngine.Vector2 start2, UnityEngine.Vector2 dir2, out System.Single t)
    // Offset: 0x299EE6C
    static bool LineLineIntersectionFactor(::UnityEngine::Vector2 start1, ::UnityEngine::Vector2 dir1, ::UnityEngine::Vector2 start2, ::UnityEngine::Vector2 dir2, ByRef<float> t);
    // static public UnityEngine.Vector3 LineDirIntersectionPointXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 dir1, UnityEngine.Vector3 start2, UnityEngine.Vector3 dir2)
    // Offset: 0x299EEBC
    static ::UnityEngine::Vector3 LineDirIntersectionPointXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 dir1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 dir2);
    // static public UnityEngine.Vector3 LineDirIntersectionPointXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 dir1, UnityEngine.Vector3 start2, UnityEngine.Vector3 dir2, out System.Boolean intersects)
    // Offset: 0x299EF14
    static ::UnityEngine::Vector3 LineDirIntersectionPointXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 dir1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 dir2, ByRef<bool> intersects);
    // static public System.Boolean RaySegmentIntersectXZ(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x299EF7C
    static bool RaySegmentIntersectXZ(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Boolean LineIntersectionFactorXZ(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2, out System.Single factor1, out System.Single factor2)
    // Offset: 0x299F060
    static bool LineIntersectionFactorXZ(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2, ByRef<float> factor1, ByRef<float> factor2);
    // static public System.Boolean LineIntersectionFactorXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Single factor1, out System.Single factor2)
    // Offset: 0x299F148
    static bool LineIntersectionFactorXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<float> factor1, ByRef<float> factor2);
    // static public System.Single LineRayIntersectionFactorXZ(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x299F1E0
    static float LineRayIntersectionFactorXZ(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Single LineIntersectionFactorXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x299F2B4
    static float LineIntersectionFactorXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public UnityEngine.Vector3 LineIntersectionPointXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x299F30C
    static ::UnityEngine::Vector3 LineIntersectionPointXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public UnityEngine.Vector3 LineIntersectionPointXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Boolean intersects)
    // Offset: 0x299F348
    static ::UnityEngine::Vector3 LineIntersectionPointXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<bool> intersects);
    // static public UnityEngine.Vector2 LineIntersectionPoint(UnityEngine.Vector2 start1, UnityEngine.Vector2 end1, UnityEngine.Vector2 start2, UnityEngine.Vector2 end2)
    // Offset: 0x299F3C4
    static ::UnityEngine::Vector2 LineIntersectionPoint(::UnityEngine::Vector2 start1, ::UnityEngine::Vector2 end1, ::UnityEngine::Vector2 start2, ::UnityEngine::Vector2 end2);
    // static public UnityEngine.Vector2 LineIntersectionPoint(UnityEngine.Vector2 start1, UnityEngine.Vector2 end1, UnityEngine.Vector2 start2, UnityEngine.Vector2 end2, out System.Boolean intersects)
    // Offset: 0x299F3D8
    static ::UnityEngine::Vector2 LineIntersectionPoint(::UnityEngine::Vector2 start1, ::UnityEngine::Vector2 end1, ::UnityEngine::Vector2 start2, ::UnityEngine::Vector2 end2, ByRef<bool> intersects);
    // static public UnityEngine.Vector3 SegmentIntersectionPointXZ(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Boolean intersects)
    // Offset: 0x299F438
    static ::UnityEngine::Vector3 SegmentIntersectionPointXZ(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<bool> intersects);
    // static public System.Boolean SegmentIntersectsBounds(UnityEngine.Bounds bounds, UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x299F4EC
    static bool SegmentIntersectsBounds(::UnityEngine::Bounds bounds, ::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // static public System.Single LineCircleIntersectionFactor(UnityEngine.Vector3 circleCenter, UnityEngine.Vector3 linePoint1, UnityEngine.Vector3 linePoint2, System.Single radius)
    // Offset: 0x299F73C
    static float LineCircleIntersectionFactor(::UnityEngine::Vector3 circleCenter, ::UnityEngine::Vector3 linePoint1, ::UnityEngine::Vector3 linePoint2, float radius);
    // static public System.Boolean ReversesFaceOrientations(UnityEngine.Matrix4x4 matrix)
    // Offset: 0x299F8FC
    static bool ReversesFaceOrientations(::UnityEngine::Matrix4x4 matrix);
    // static public System.Boolean ReversesFaceOrientationsXZ(UnityEngine.Matrix4x4 matrix)
    // Offset: 0x299F9C0
    static bool ReversesFaceOrientationsXZ(::UnityEngine::Matrix4x4 matrix);
    // static public UnityEngine.Vector3 Normalize(UnityEngine.Vector3 v, out System.Single magnitude)
    // Offset: 0x299F81C
    static ::UnityEngine::Vector3 Normalize(::UnityEngine::Vector3 v, ByRef<float> magnitude);
    // static public UnityEngine.Vector2 Normalize(UnityEngine.Vector2 v, out System.Single magnitude)
    // Offset: 0x299FA20
    static ::UnityEngine::Vector2 Normalize(::UnityEngine::Vector2 v, ByRef<float> magnitude);
    // static public UnityEngine.Vector3 ClampMagnitudeXZ(UnityEngine.Vector3 v, System.Single maxMagnitude)
    // Offset: 0x299FAE4
    static ::UnityEngine::Vector3 ClampMagnitudeXZ(::UnityEngine::Vector3 v, float maxMagnitude);
    // static public System.Single MagnitudeXZ(UnityEngine.Vector3 v)
    // Offset: 0x299FB18
    static float MagnitudeXZ(::UnityEngine::Vector3 v);
  }; // Pathfinding.VectorMath
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::VectorMath::ComplexMultiply
// Il2CppName: ComplexMultiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::VectorMath::ComplexMultiply)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ComplexMultiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ComplexMultiplyConjugate
// Il2CppName: ComplexMultiplyConjugate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::VectorMath::ComplexMultiplyConjugate)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ComplexMultiplyConjugate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnLine
// Il2CppName: ClosestPointOnLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::ClosestPointOnLine)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnLineFactor
// Il2CppName: ClosestPointOnLineFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::ClosestPointOnLineFactor)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnLineFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnLineFactor
// Il2CppName: ClosestPointOnLineFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::ClosestPointOnLineFactor)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnLineFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnLineFactor
// Il2CppName: ClosestPointOnLineFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::VectorMath::ClosestPointOnLineFactor)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnLineFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnSegment
// Il2CppName: ClosestPointOnSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::ClosestPointOnSegment)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClosestPointOnSegmentXZ
// Il2CppName: ClosestPointOnSegmentXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::ClosestPointOnSegmentXZ)> {
  static const MethodInfo* get() {
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClosestPointOnSegmentXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineStart, lineEnd, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SqrDistancePointSegmentApproximate
// Il2CppName: SqrDistancePointSegmentApproximate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, int, int, int, int, int)>(&Pathfinding::VectorMath::SqrDistancePointSegmentApproximate)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* px = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pz = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* qx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* qz = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SqrDistancePointSegmentApproximate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, px, pz, qx, qz});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SqrDistancePointSegmentApproximate
// Il2CppName: SqrDistancePointSegmentApproximate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::SqrDistancePointSegmentApproximate)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SqrDistancePointSegmentApproximate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SqrDistancePointSegment
// Il2CppName: SqrDistancePointSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SqrDistancePointSegment)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SqrDistancePointSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SqrDistanceSegmentSegment
// Il2CppName: SqrDistanceSegmentSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SqrDistanceSegmentSegment)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SqrDistanceSegmentSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, e1, s2, e2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SqrDistanceXZ
// Il2CppName: SqrDistanceXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SqrDistanceXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SqrDistanceXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SignedTriangleAreaTimes2XZ
// Il2CppName: SignedTriangleAreaTimes2XZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::SignedTriangleAreaTimes2XZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SignedTriangleAreaTimes2XZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SignedTriangleAreaTimes2XZ
// Il2CppName: SignedTriangleAreaTimes2XZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SignedTriangleAreaTimes2XZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SignedTriangleAreaTimes2XZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightXZ
// Il2CppName: RightXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::RightXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightXZ
// Il2CppName: RightXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::RightXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SideXZ
// Il2CppName: SideXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Side (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::SideXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SideXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightOrColinear
// Il2CppName: RightOrColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::VectorMath::RightOrColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightOrColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightOrColinear
// Il2CppName: RightOrColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::VectorMath::RightOrColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightOrColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightOrColinearXZ
// Il2CppName: RightOrColinearXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::RightOrColinearXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightOrColinearXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RightOrColinearXZ
// Il2CppName: RightOrColinearXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::RightOrColinearXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RightOrColinearXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsClockwiseMarginXZ
// Il2CppName: IsClockwiseMarginXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::IsClockwiseMarginXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsClockwiseMarginXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsClockwiseXZ
// Il2CppName: IsClockwiseXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::IsClockwiseXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsClockwiseXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsClockwiseXZ
// Il2CppName: IsClockwiseXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::IsClockwiseXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsClockwiseXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsClockwiseOrColinearXZ
// Il2CppName: IsClockwiseOrColinearXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::IsClockwiseOrColinearXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsClockwiseOrColinearXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsClockwiseOrColinear
// Il2CppName: IsClockwiseOrColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::VectorMath::IsClockwiseOrColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsClockwiseOrColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsColinear
// Il2CppName: IsColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::IsColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsColinear
// Il2CppName: IsColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::VectorMath::IsColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsColinearXZ
// Il2CppName: IsColinearXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::IsColinearXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsColinearXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsColinearXZ
// Il2CppName: IsColinearXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::IsColinearXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsColinearXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::IsColinearAlmostXZ
// Il2CppName: IsColinearAlmostXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::IsColinearAlmostXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "IsColinearAlmostXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SegmentsIntersect
// Il2CppName: SegmentsIntersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::VectorMath::SegmentsIntersect)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SegmentsIntersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SegmentsIntersectXZ
// Il2CppName: SegmentsIntersectXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::SegmentsIntersectXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SegmentsIntersectXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SegmentsIntersectXZ
// Il2CppName: SegmentsIntersectXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SegmentsIntersectXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SegmentsIntersectXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineLineIntersectionFactor
// Il2CppName: LineLineIntersectionFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::VectorMath::LineLineIntersectionFactor)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* dir1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* dir2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineLineIntersectionFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, dir1, start2, dir2, t});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineDirIntersectionPointXZ
// Il2CppName: LineDirIntersectionPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::LineDirIntersectionPointXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineDirIntersectionPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, dir1, start2, dir2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineDirIntersectionPointXZ
// Il2CppName: LineDirIntersectionPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::VectorMath::LineDirIntersectionPointXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineDirIntersectionPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, dir1, start2, dir2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::RaySegmentIntersectXZ
// Il2CppName: RaySegmentIntersectXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::RaySegmentIntersectXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "RaySegmentIntersectXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionFactorXZ
// Il2CppName: LineIntersectionFactorXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ByRef<float>, ByRef<float>)>(&Pathfinding::VectorMath::LineIntersectionFactorXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* factor1 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* factor2 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionFactorXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, factor1, factor2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionFactorXZ
// Il2CppName: LineIntersectionFactorXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<float>, ByRef<float>)>(&Pathfinding::VectorMath::LineIntersectionFactorXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* factor1 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* factor2 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionFactorXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, factor1, factor2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineRayIntersectionFactorXZ
// Il2CppName: LineRayIntersectionFactorXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::VectorMath::LineRayIntersectionFactorXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineRayIntersectionFactorXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionFactorXZ
// Il2CppName: LineIntersectionFactorXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::LineIntersectionFactorXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionFactorXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionPointXZ
// Il2CppName: LineIntersectionPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::LineIntersectionPointXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionPointXZ
// Il2CppName: LineIntersectionPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::VectorMath::LineIntersectionPointXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionPoint
// Il2CppName: LineIntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::VectorMath::LineIntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineIntersectionPoint
// Il2CppName: LineIntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ByRef<bool>)>(&Pathfinding::VectorMath::LineIntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineIntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SegmentIntersectionPointXZ
// Il2CppName: SegmentIntersectionPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::VectorMath::SegmentIntersectionPointXZ)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SegmentIntersectionPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::SegmentIntersectsBounds
// Il2CppName: SegmentIntersectsBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Bounds, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::VectorMath::SegmentIntersectsBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "SegmentIntersectsBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::LineCircleIntersectionFactor
// Il2CppName: LineCircleIntersectionFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::VectorMath::LineCircleIntersectionFactor)> {
  static const MethodInfo* get() {
    static auto* circleCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linePoint1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linePoint2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "LineCircleIntersectionFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{circleCenter, linePoint1, linePoint2, radius});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ReversesFaceOrientations
// Il2CppName: ReversesFaceOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Matrix4x4)>(&Pathfinding::VectorMath::ReversesFaceOrientations)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ReversesFaceOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ReversesFaceOrientationsXZ
// Il2CppName: ReversesFaceOrientationsXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Matrix4x4)>(&Pathfinding::VectorMath::ReversesFaceOrientationsXZ)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ReversesFaceOrientationsXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ByRef<float>)>(&Pathfinding::VectorMath::Normalize)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, magnitude});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ByRef<float>)>(&Pathfinding::VectorMath::Normalize)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, magnitude});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::ClampMagnitudeXZ
// Il2CppName: ClampMagnitudeXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&Pathfinding::VectorMath::ClampMagnitudeXZ)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxMagnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "ClampMagnitudeXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, maxMagnitude});
  }
};
// Writing MetadataGetter for method: Pathfinding::VectorMath::MagnitudeXZ
// Il2CppName: MagnitudeXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&Pathfinding::VectorMath::MagnitudeXZ)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::VectorMath*), "MagnitudeXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
