// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NNConstraint
#include "Pathfinding/NNConstraint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: FloodPath
  class FloodPath;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: FloodPathConstraint
  class FloodPathConstraint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::FloodPathConstraint);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::FloodPathConstraint*, "Pathfinding", "FloodPathConstraint");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.FloodPathConstraint
  // [TokenAttribute] Offset: FFFFFFFF
  class FloodPathConstraint : public ::Pathfinding::NNConstraint {
    public:
    // Writing base type padding for base size: 0x25 to desired offset: 0x28
    char ___base_padding[0x3] = {};
    public:
    // private readonly Pathfinding.FloodPath path
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::FloodPath* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::FloodPath*) == 0x8);
    public:
    // Creating conversion operator: operator ::Pathfinding::FloodPath*
    constexpr operator ::Pathfinding::FloodPath*() const noexcept {
      return path;
    }
    // Get instance field reference: private readonly Pathfinding.FloodPath path
    [[deprecated("Use field access instead!")]] ::Pathfinding::FloodPath*& dyn_path();
    // public System.Void .ctor(Pathfinding.FloodPath path)
    // Offset: 0x2A00504
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloodPathConstraint* New_ctor(::Pathfinding::FloodPath* path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::FloodPathConstraint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloodPathConstraint*, creationType>(path)));
    }
    // public override System.Boolean Suitable(Pathfinding.GraphNode node)
    // Offset: 0x2A00594
    // Implemented from: Pathfinding.NNConstraint
    // Base method: System.Boolean NNConstraint::Suitable(Pathfinding.GraphNode node)
    bool Suitable(::Pathfinding::GraphNode* node);
  }; // Pathfinding.FloodPathConstraint
  #pragma pack(pop)
  static check_size<sizeof(FloodPathConstraint), 40 + sizeof(::Pathfinding::FloodPath*)> __Pathfinding_FloodPathConstraintSizeCheck;
  static_assert(sizeof(FloodPathConstraint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::FloodPathConstraint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::FloodPathConstraint::Suitable
// Il2CppName: Suitable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::FloodPathConstraint::*)(::Pathfinding::GraphNode*)>(&Pathfinding::FloodPathConstraint::Suitable)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPathConstraint*), "Suitable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
