// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: Pathfinding.BlockManager
#include "Pathfinding/BlockManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: SingleNodeBlocker
  class SingleNodeBlocker;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: TurnBasedAI
  class TurnBasedAI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::TurnBasedAI);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::TurnBasedAI*, "Pathfinding.Examples", "TurnBasedAI");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.TurnBasedAI
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class TurnBasedAI : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    public:
    // public System.Int32 movementPoints
    // Size: 0x4
    // Offset: 0x24
    int movementPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pathfinding.BlockManager blockManager
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::BlockManager* blockManager;
    // Field size check
    static_assert(sizeof(::Pathfinding::BlockManager*) == 0x8);
    // public Pathfinding.SingleNodeBlocker blocker
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::SingleNodeBlocker* blocker;
    // Field size check
    static_assert(sizeof(::Pathfinding::SingleNodeBlocker*) == 0x8);
    // public Pathfinding.GraphNode targetNode
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::GraphNode* targetNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.BlockManager/TraversalProvider traversalProvider
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::BlockManager::TraversalProvider* traversalProvider;
    // Field size check
    static_assert(sizeof(::Pathfinding::BlockManager::TraversalProvider*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 movementPoints
    [[deprecated("Use field access instead!")]] int& dyn_movementPoints();
    // Get instance field reference: public Pathfinding.BlockManager blockManager
    [[deprecated("Use field access instead!")]] ::Pathfinding::BlockManager*& dyn_blockManager();
    // Get instance field reference: public Pathfinding.SingleNodeBlocker blocker
    [[deprecated("Use field access instead!")]] ::Pathfinding::SingleNodeBlocker*& dyn_blocker();
    // Get instance field reference: public Pathfinding.GraphNode targetNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_targetNode();
    // Get instance field reference: public Pathfinding.BlockManager/TraversalProvider traversalProvider
    [[deprecated("Use field access instead!")]] ::Pathfinding::BlockManager::TraversalProvider*& dyn_traversalProvider();
    // private System.Void Start()
    // Offset: 0x2A3F5C0
    void Start();
    // protected override System.Void Awake()
    // Offset: 0x2A3F5DC
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x2A3F710
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TurnBasedAI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::TurnBasedAI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TurnBasedAI*, creationType>()));
    }
  }; // Pathfinding.Examples.TurnBasedAI
  #pragma pack(pop)
  static check_size<sizeof(TurnBasedAI), 64 + sizeof(::Pathfinding::BlockManager::TraversalProvider*)> __Pathfinding_Examples_TurnBasedAISizeCheck;
  static_assert(sizeof(TurnBasedAI) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedAI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedAI::*)()>(&Pathfinding::Examples::TurnBasedAI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedAI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedAI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedAI::*)()>(&Pathfinding::Examples::TurnBasedAI::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedAI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedAI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
