// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: HexagonTrigger
  class HexagonTrigger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::HexagonTrigger);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::HexagonTrigger*, "Pathfinding.Examples", "HexagonTrigger");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.HexagonTrigger
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class HexagonTrigger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.UI.Button button
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.Animator anim
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Animator* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Boolean visible
    // Size: 0x1
    // Offset: 0x30
    bool visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.UI.Button button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_button();
    // Get instance field reference: private UnityEngine.Animator anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_anim();
    // Get instance field reference: private System.Boolean visible
    [[deprecated("Use field access instead!")]] bool& dyn_visible();
    // private System.Void Awake()
    // Offset: 0x2A46A08
    void Awake();
    // private System.Void OnTriggerEnter(UnityEngine.Collider coll)
    // Offset: 0x2A46A78
    void OnTriggerEnter(::UnityEngine::Collider* coll);
    // private System.Void OnTriggerExit(UnityEngine.Collider coll)
    // Offset: 0x2A46BDC
    void OnTriggerExit(::UnityEngine::Collider* coll);
    // public System.Void .ctor()
    // Offset: 0x2A46CC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HexagonTrigger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::HexagonTrigger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HexagonTrigger*, creationType>()));
    }
  }; // Pathfinding.Examples.HexagonTrigger
  #pragma pack(pop)
  static check_size<sizeof(HexagonTrigger), 48 + sizeof(bool)> __Pathfinding_Examples_HexagonTriggerSizeCheck;
  static_assert(sizeof(HexagonTrigger) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::HexagonTrigger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::HexagonTrigger::*)()>(&Pathfinding::Examples::HexagonTrigger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::HexagonTrigger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::HexagonTrigger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::HexagonTrigger::*)(::UnityEngine::Collider*)>(&Pathfinding::Examples::HexagonTrigger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* coll = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::HexagonTrigger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coll});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::HexagonTrigger::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::HexagonTrigger::*)(::UnityEngine::Collider*)>(&Pathfinding::Examples::HexagonTrigger::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* coll = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::HexagonTrigger*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coll});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::HexagonTrigger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
