// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Examples.TurnBasedManager
#include "Pathfinding/Examples/TurnBasedManager.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ABPath
  class ABPath;
}
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
  // Forward declaring type: TurnBasedAI
  class TurnBasedAI;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*, "Pathfinding.Examples", "TurnBasedManager/<MoveAlongPath>d__14");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.TurnBasedManager/<MoveAlongPath>d__14
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TurnBasedManager::$MoveAlongPath$d__14 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public Pathfinding.ABPath path
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::ABPath* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::ABPath*) == 0x8);
    // public Pathfinding.Examples.TurnBasedAI unit
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Examples::TurnBasedAI* unit;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::TurnBasedAI*) == 0x8);
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x30
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <distanceAlongSegment>5__2
    // Size: 0x4
    // Offset: 0x34
    float $distanceAlongSegment$5__2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <i>5__3
    // Size: 0x4
    // Offset: 0x38
    int $i$5__3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 <p0>5__4
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 $p0$5__4;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <p1>5__5
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 $p1$5__5;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <p2>5__6
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 $p2$5__6;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <p3>5__7
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 $p3$5__7;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <segmentLength>5__8
    // Size: 0x4
    // Offset: 0x6C
    float $segmentLength$5__8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public Pathfinding.ABPath path
    [[deprecated("Use field access instead!")]] ::Pathfinding::ABPath*& dyn_path();
    // Get instance field reference: public Pathfinding.Examples.TurnBasedAI unit
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::TurnBasedAI*& dyn_unit();
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: private System.Single <distanceAlongSegment>5__2
    [[deprecated("Use field access instead!")]] float& dyn_$distanceAlongSegment$5__2();
    // Get instance field reference: private System.Int32 <i>5__3
    [[deprecated("Use field access instead!")]] int& dyn_$i$5__3();
    // Get instance field reference: private UnityEngine.Vector3 <p0>5__4
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$p0$5__4();
    // Get instance field reference: private UnityEngine.Vector3 <p1>5__5
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$p1$5__5();
    // Get instance field reference: private UnityEngine.Vector3 <p2>5__6
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$p2$5__6();
    // Get instance field reference: private UnityEngine.Vector3 <p3>5__7
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$p3$5__7();
    // Get instance field reference: private System.Single <segmentLength>5__8
    [[deprecated("Use field access instead!")]] float& dyn_$segmentLength$5__8();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2A47BB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TurnBasedManager::$MoveAlongPath$d__14* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TurnBasedManager::$MoveAlongPath$d__14*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A47C68
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2A47C6C
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x2A47FC4
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x2A47FCC
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2A48004
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // Pathfinding.Examples.TurnBasedManager/<MoveAlongPath>d__14
  #pragma pack(pop)
  static check_size<sizeof(TurnBasedManager::$MoveAlongPath$d__14), 108 + sizeof(float)> __Pathfinding_Examples_TurnBasedManager_$MoveAlongPath$d__14SizeCheck;
  static_assert(sizeof(TurnBasedManager::$MoveAlongPath$d__14) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::*)()>(&Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::*)()>(&Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::*)()>(&Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::*)()>(&Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::*)()>(&Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
