// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
  // Forward declaring type: TurnBasedAI
  class TurnBasedAI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: ABPath
  class ABPath;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: TurnBasedManager
  class TurnBasedManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::TurnBasedManager);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::TurnBasedManager*, "Pathfinding.Examples", "TurnBasedManager");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.TurnBasedManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class TurnBasedManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Examples::TurnBasedManager::State
    struct State;
    // Nested type: ::Pathfinding::Examples::TurnBasedManager::$MoveAlongPath$d__14
    class $MoveAlongPath$d__14;
    // Nested type: ::Pathfinding::Examples::TurnBasedManager::$MoveToNode$d__13
    class $MoveToNode$d__13;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.Examples.TurnBasedManager/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.Examples.TurnBasedManager/State SelectUnit
      static constexpr const int SelectUnit = 0;
      // Get static field: static public Pathfinding.Examples.TurnBasedManager/State SelectUnit
      static ::Pathfinding::Examples::TurnBasedManager::State _get_SelectUnit();
      // Set static field: static public Pathfinding.Examples.TurnBasedManager/State SelectUnit
      static void _set_SelectUnit(::Pathfinding::Examples::TurnBasedManager::State value);
      // static field const value: static public Pathfinding.Examples.TurnBasedManager/State SelectTarget
      static constexpr const int SelectTarget = 1;
      // Get static field: static public Pathfinding.Examples.TurnBasedManager/State SelectTarget
      static ::Pathfinding::Examples::TurnBasedManager::State _get_SelectTarget();
      // Set static field: static public Pathfinding.Examples.TurnBasedManager/State SelectTarget
      static void _set_SelectTarget(::Pathfinding::Examples::TurnBasedManager::State value);
      // static field const value: static public Pathfinding.Examples.TurnBasedManager/State Move
      static constexpr const int Move = 2;
      // Get static field: static public Pathfinding.Examples.TurnBasedManager/State Move
      static ::Pathfinding::Examples::TurnBasedManager::State _get_Move();
      // Set static field: static public Pathfinding.Examples.TurnBasedManager/State Move
      static void _set_Move(::Pathfinding::Examples::TurnBasedManager::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.Examples.TurnBasedManager/State
    #pragma pack(pop)
    static check_size<sizeof(TurnBasedManager::State), 0 + sizeof(int)> __Pathfinding_Examples_TurnBasedManager_StateSizeCheck;
    static_assert(sizeof(TurnBasedManager::State) == 0x4);
    public:
    // private Pathfinding.Examples.TurnBasedAI selected
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Examples::TurnBasedAI* selected;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::TurnBasedAI*) == 0x8);
    // public System.Single movementSpeed
    // Size: 0x4
    // Offset: 0x28
    float movementSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: movementSpeed and: nodePrefab
    char __padding1[0x4] = {};
    // public UnityEngine.GameObject nodePrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* nodePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.LayerMask layerMask
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: layerMask and: possibleMoves
    char __padding3[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> possibleMoves
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* possibleMoves;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.EventSystems.EventSystem eventSystem
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::EventSystems::EventSystem* eventSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::EventSystem*) == 0x8);
    // public Pathfinding.Examples.TurnBasedManager/State state
    // Size: 0x4
    // Offset: 0x50
    ::Pathfinding::Examples::TurnBasedManager::State state;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::TurnBasedManager::State) == 0x4);
    public:
    // Get instance field reference: private Pathfinding.Examples.TurnBasedAI selected
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::TurnBasedAI*& dyn_selected();
    // Get instance field reference: public System.Single movementSpeed
    [[deprecated("Use field access instead!")]] float& dyn_movementSpeed();
    // Get instance field reference: public UnityEngine.GameObject nodePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_nodePrefab();
    // Get instance field reference: public UnityEngine.LayerMask layerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_layerMask();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> possibleMoves
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_possibleMoves();
    // Get instance field reference: private UnityEngine.EventSystems.EventSystem eventSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::EventSystem*& dyn_eventSystem();
    // Get instance field reference: public Pathfinding.Examples.TurnBasedManager/State state
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::TurnBasedManager::State& dyn_state();
    // private System.Void Awake()
    // Offset: 0x2A47204
    void Awake();
    // private System.Void Update()
    // Offset: 0x2A4727C
    void Update();
    // private System.Void HandleButtonUnderRay(UnityEngine.Ray ray)
    // Offset: 0x2A473E8
    void HandleButtonUnderRay(::UnityEngine::Ray ray);
    // private T GetByRay(UnityEngine.Ray ray)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetByRay(::UnityEngine::Ray ray) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::TurnBasedManager::GetByRay");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetByRay", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, ray);
    }
    // private System.Void Select(Pathfinding.Examples.TurnBasedAI unit)
    // Offset: 0x2A47AF0
    void Select(::Pathfinding::Examples::TurnBasedAI* unit);
    // private System.Collections.IEnumerator MoveToNode(Pathfinding.Examples.TurnBasedAI unit, Pathfinding.GraphNode node)
    // Offset: 0x2A47A54
    ::System::Collections::IEnumerator* MoveToNode(::Pathfinding::Examples::TurnBasedAI* unit, ::Pathfinding::GraphNode* node);
    // static private System.Collections.IEnumerator MoveAlongPath(Pathfinding.Examples.TurnBasedAI unit, Pathfinding.ABPath path, System.Single speed)
    // Offset: 0x2A47B20
    static ::System::Collections::IEnumerator* MoveAlongPath(::Pathfinding::Examples::TurnBasedAI* unit, ::Pathfinding::ABPath* path, float speed);
    // private System.Void DestroyPossibleMoves()
    // Offset: 0x2A474EC
    void DestroyPossibleMoves();
    // private System.Void GeneratePossibleMoves(Pathfinding.Examples.TurnBasedAI unit)
    // Offset: 0x2A47684
    void GeneratePossibleMoves(::Pathfinding::Examples::TurnBasedAI* unit);
    // public System.Void .ctor()
    // Offset: 0x2A47BE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TurnBasedManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::TurnBasedManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TurnBasedManager*, creationType>()));
    }
  }; // Pathfinding.Examples.TurnBasedManager
  #pragma pack(pop)
  static check_size<sizeof(TurnBasedManager), 80 + sizeof(::Pathfinding::Examples::TurnBasedManager::State)> __Pathfinding_Examples_TurnBasedManagerSizeCheck;
  static_assert(sizeof(TurnBasedManager) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::TurnBasedManager::State, "Pathfinding.Examples", "TurnBasedManager/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)()>(&Pathfinding::Examples::TurnBasedManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)()>(&Pathfinding::Examples::TurnBasedManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::HandleButtonUnderRay
// Il2CppName: HandleButtonUnderRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)(::UnityEngine::Ray)>(&Pathfinding::Examples::TurnBasedManager::HandleButtonUnderRay)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "HandleButtonUnderRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::GetByRay
// Il2CppName: GetByRay
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)(::Pathfinding::Examples::TurnBasedAI*)>(&Pathfinding::Examples::TurnBasedManager::Select)> {
  static const MethodInfo* get() {
    static auto* unit = &::il2cpp_utils::GetClassFromName("Pathfinding.Examples", "TurnBasedAI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unit});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::MoveToNode
// Il2CppName: MoveToNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::TurnBasedManager::*)(::Pathfinding::Examples::TurnBasedAI*, ::Pathfinding::GraphNode*)>(&Pathfinding::Examples::TurnBasedManager::MoveToNode)> {
  static const MethodInfo* get() {
    static auto* unit = &::il2cpp_utils::GetClassFromName("Pathfinding.Examples", "TurnBasedAI")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "MoveToNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unit, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::MoveAlongPath
// Il2CppName: MoveAlongPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::Pathfinding::Examples::TurnBasedAI*, ::Pathfinding::ABPath*, float)>(&Pathfinding::Examples::TurnBasedManager::MoveAlongPath)> {
  static const MethodInfo* get() {
    static auto* unit = &::il2cpp_utils::GetClassFromName("Pathfinding.Examples", "TurnBasedAI")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "ABPath")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "MoveAlongPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unit, path, speed});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::DestroyPossibleMoves
// Il2CppName: DestroyPossibleMoves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)()>(&Pathfinding::Examples::TurnBasedManager::DestroyPossibleMoves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "DestroyPossibleMoves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::GeneratePossibleMoves
// Il2CppName: GeneratePossibleMoves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedManager::*)(::Pathfinding::Examples::TurnBasedAI*)>(&Pathfinding::Examples::TurnBasedManager::GeneratePossibleMoves)> {
  static const MethodInfo* get() {
    static auto* unit = &::il2cpp_utils::GetClassFromName("Pathfinding.Examples", "TurnBasedAI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedManager*), "GeneratePossibleMoves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unit});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
