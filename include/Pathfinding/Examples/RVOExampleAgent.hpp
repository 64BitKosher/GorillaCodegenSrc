// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: RVOController
  class RVOController;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: Seeker
  class Seeker;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: RVOExampleAgent
  class RVOExampleAgent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::RVOExampleAgent);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::RVOExampleAgent*, "Pathfinding.Examples", "RVOExampleAgent");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.RVOExampleAgent
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class RVOExampleAgent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single repathRate
    // Size: 0x4
    // Offset: 0x20
    float repathRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single nextRepath
    // Size: 0x4
    // Offset: 0x24
    float nextRepath;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 target
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean canSearchAgain
    // Size: 0x1
    // Offset: 0x34
    bool canSearchAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canSearchAgain and: controller
    char __padding3[0x3] = {};
    // private Pathfinding.RVO.RVOController controller
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::RVO::RVOController* controller;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOController*) == 0x8);
    // public System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x40
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxSpeed and: path
    char __padding5[0x4] = {};
    // private Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> vectorPath
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vectorPath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Int32 wp
    // Size: 0x4
    // Offset: 0x58
    int wp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single moveNextDist
    // Size: 0x4
    // Offset: 0x5C
    float moveNextDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowdownDistance
    // Size: 0x4
    // Offset: 0x60
    float slowdownDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask groundMask
    // Size: 0x4
    // Offset: 0x64
    ::UnityEngine::LayerMask groundMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private Pathfinding.Seeker seeker
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Seeker* seeker;
    // Field size check
    static_assert(sizeof(::Pathfinding::Seeker*) == 0x8);
    // private UnityEngine.MeshRenderer[] rends
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::MeshRenderer*> rends;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    public:
    // Get instance field reference: public System.Single repathRate
    [[deprecated("Use field access instead!")]] float& dyn_repathRate();
    // Get instance field reference: private System.Single nextRepath
    [[deprecated("Use field access instead!")]] float& dyn_nextRepath();
    // Get instance field reference: private UnityEngine.Vector3 target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_target();
    // Get instance field reference: private System.Boolean canSearchAgain
    [[deprecated("Use field access instead!")]] bool& dyn_canSearchAgain();
    // Get instance field reference: private Pathfinding.RVO.RVOController controller
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOController*& dyn_controller();
    // Get instance field reference: public System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: private Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> vectorPath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_vectorPath();
    // Get instance field reference: private System.Int32 wp
    [[deprecated("Use field access instead!")]] int& dyn_wp();
    // Get instance field reference: public System.Single moveNextDist
    [[deprecated("Use field access instead!")]] float& dyn_moveNextDist();
    // Get instance field reference: public System.Single slowdownDistance
    [[deprecated("Use field access instead!")]] float& dyn_slowdownDistance();
    // Get instance field reference: public UnityEngine.LayerMask groundMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_groundMask();
    // Get instance field reference: private Pathfinding.Seeker seeker
    [[deprecated("Use field access instead!")]] ::Pathfinding::Seeker*& dyn_seeker();
    // Get instance field reference: private UnityEngine.MeshRenderer[] rends
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_rends();
    // public System.Void Awake()
    // Offset: 0x2A435F8
    void Awake();
    // public System.Void SetTarget(UnityEngine.Vector3 target)
    // Offset: 0x2A431F8
    void SetTarget(::UnityEngine::Vector3 target);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x2A43204
    void SetColor(::UnityEngine::Color color);
    // public System.Void RecalculatePath()
    // Offset: 0x2A43688
    void RecalculatePath();
    // public System.Void OnPathComplete(Pathfinding.Path _p)
    // Offset: 0x2A437A4
    void OnPathComplete(::Pathfinding::Path* _p);
    // public System.Void Update()
    // Offset: 0x2A43A74
    void Update();
    // public System.Void .ctor()
    // Offset: 0x2A443EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVOExampleAgent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::RVOExampleAgent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVOExampleAgent*, creationType>()));
    }
  }; // Pathfinding.Examples.RVOExampleAgent
  #pragma pack(pop)
  static check_size<sizeof(RVOExampleAgent), 112 + sizeof(::ArrayW<::UnityEngine::MeshRenderer*>)> __Pathfinding_Examples_RVOExampleAgentSizeCheck;
  static_assert(sizeof(RVOExampleAgent) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)()>(&Pathfinding::Examples::RVOExampleAgent::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)(::UnityEngine::Vector3)>(&Pathfinding::Examples::RVOExampleAgent::SetTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)(::UnityEngine::Color)>(&Pathfinding::Examples::RVOExampleAgent::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::RecalculatePath
// Il2CppName: RecalculatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)()>(&Pathfinding::Examples::RVOExampleAgent::RecalculatePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "RecalculatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)(::Pathfinding::Path*)>(&Pathfinding::Examples::RVOExampleAgent::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* _p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::RVOExampleAgent::*)()>(&Pathfinding::Examples::RVOExampleAgent::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOExampleAgent*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOExampleAgent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
