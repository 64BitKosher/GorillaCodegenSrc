// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: ObjectPlacer
  class ObjectPlacer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::ObjectPlacer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::ObjectPlacer*, "Pathfinding.Examples", "ObjectPlacer");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.ObjectPlacer
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class ObjectPlacer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Examples::ObjectPlacer::$RemoveObject$d__5
    class $RemoveObject$d__5;
    public:
    // public UnityEngine.GameObject go
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* go;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean direct
    // Size: 0x1
    // Offset: 0x28
    bool direct;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean issueGUOs
    // Size: 0x1
    // Offset: 0x29
    bool issueGUOs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.GameObject go
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_go();
    // Get instance field reference: public System.Boolean direct
    [[deprecated("Use field access instead!")]] bool& dyn_direct();
    // Get instance field reference: public System.Boolean issueGUOs
    [[deprecated("Use field access instead!")]] bool& dyn_issueGUOs();
    // private System.Void Update()
    // Offset: 0x2A4CA04
    void Update();
    // public System.Void PlaceObject()
    // Offset: 0x2A4CAA0
    void PlaceObject();
    // public System.Collections.IEnumerator RemoveObject()
    // Offset: 0x2A4CD34
    ::System::Collections::IEnumerator* RemoveObject();
    // public System.Void .ctor()
    // Offset: 0x2A4CDC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPlacer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::ObjectPlacer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPlacer*, creationType>()));
    }
  }; // Pathfinding.Examples.ObjectPlacer
  #pragma pack(pop)
  static check_size<sizeof(ObjectPlacer), 41 + sizeof(bool)> __Pathfinding_Examples_ObjectPlacerSizeCheck;
  static_assert(sizeof(ObjectPlacer) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::ObjectPlacer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ObjectPlacer::*)()>(&Pathfinding::Examples::ObjectPlacer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ObjectPlacer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ObjectPlacer::PlaceObject
// Il2CppName: PlaceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ObjectPlacer::*)()>(&Pathfinding::Examples::ObjectPlacer::PlaceObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ObjectPlacer*), "PlaceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ObjectPlacer::RemoveObject
// Il2CppName: RemoveObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::ObjectPlacer::*)()>(&Pathfinding::Examples::ObjectPlacer::RemoveObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ObjectPlacer*), "RemoveObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ObjectPlacer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
