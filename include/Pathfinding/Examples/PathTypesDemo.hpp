// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: FloodPath
  class FloodPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: PathTypesDemo
  class PathTypesDemo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::PathTypesDemo);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::PathTypesDemo*, "Pathfinding.Examples", "PathTypesDemo");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.PathTypesDemo
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class PathTypesDemo : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Examples::PathTypesDemo::DemoMode
    struct DemoMode;
    // Nested type: ::Pathfinding::Examples::PathTypesDemo::$DemoConstantPath$d__22
    class $DemoConstantPath$d__22;
    // Nested type: ::Pathfinding::Examples::PathTypesDemo::$DemoMultiTargetPath$d__21
    class $DemoMultiTargetPath$d__21;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.Examples.PathTypesDemo/DemoMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DemoMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DemoMode
      constexpr DemoMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode ABPath
      static constexpr const int ABPath = 0;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode ABPath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_ABPath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode ABPath
      static void _set_ABPath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode MultiTargetPath
      static constexpr const int MultiTargetPath = 1;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode MultiTargetPath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_MultiTargetPath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode MultiTargetPath
      static void _set_MultiTargetPath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode RandomPath
      static constexpr const int RandomPath = 2;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode RandomPath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_RandomPath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode RandomPath
      static void _set_RandomPath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode FleePath
      static constexpr const int FleePath = 3;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FleePath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_FleePath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FleePath
      static void _set_FleePath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode ConstantPath
      static constexpr const int ConstantPath = 4;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode ConstantPath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_ConstantPath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode ConstantPath
      static void _set_ConstantPath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPath
      static constexpr const int FloodPath = 5;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPath
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_FloodPath();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPath
      static void _set_FloodPath(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // static field const value: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPathTracer
      static constexpr const int FloodPathTracer = 6;
      // Get static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPathTracer
      static ::Pathfinding::Examples::PathTypesDemo::DemoMode _get_FloodPathTracer();
      // Set static field: static public Pathfinding.Examples.PathTypesDemo/DemoMode FloodPathTracer
      static void _set_FloodPathTracer(::Pathfinding::Examples::PathTypesDemo::DemoMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.Examples.PathTypesDemo/DemoMode
    #pragma pack(pop)
    static check_size<sizeof(PathTypesDemo::DemoMode), 0 + sizeof(int)> __Pathfinding_Examples_PathTypesDemo_DemoModeSizeCheck;
    static_assert(sizeof(PathTypesDemo::DemoMode) == 0x4);
    public:
    // public Pathfinding.Examples.PathTypesDemo/DemoMode activeDemo
    // Size: 0x4
    // Offset: 0x20
    ::Pathfinding::Examples::PathTypesDemo::DemoMode activeDemo;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::PathTypesDemo::DemoMode) == 0x4);
    // Padding between fields: activeDemo and: start
    char __padding0[0x4] = {};
    // public UnityEngine.Transform start
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform end
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 pathOffset
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 pathOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: pathOffset and: lineMat
    char __padding3[0x4] = {};
    // public UnityEngine.Material lineMat
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* lineMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material squareMat
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* squareMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Single lineWidth
    // Size: 0x4
    // Offset: 0x58
    float lineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 searchLength
    // Size: 0x4
    // Offset: 0x5C
    int searchLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 spread
    // Size: 0x4
    // Offset: 0x60
    int spread;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single aimStrength
    // Size: 0x4
    // Offset: 0x64
    float aimStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Pathfinding.Path lastPath
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Path* lastPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private Pathfinding.FloodPath lastFloodPath
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::FloodPath* lastFloodPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::FloodPath*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> lastRender
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* lastRender;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> multipoints
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* multipoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.Examples.PathTypesDemo/DemoMode activeDemo
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::PathTypesDemo::DemoMode& dyn_activeDemo();
    // Get instance field reference: public UnityEngine.Transform start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_start();
    // Get instance field reference: public UnityEngine.Transform end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_end();
    // Get instance field reference: public UnityEngine.Vector3 pathOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pathOffset();
    // Get instance field reference: public UnityEngine.Material lineMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lineMat();
    // Get instance field reference: public UnityEngine.Material squareMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_squareMat();
    // Get instance field reference: public System.Single lineWidth
    [[deprecated("Use field access instead!")]] float& dyn_lineWidth();
    // Get instance field reference: public System.Int32 searchLength
    [[deprecated("Use field access instead!")]] int& dyn_searchLength();
    // Get instance field reference: public System.Int32 spread
    [[deprecated("Use field access instead!")]] int& dyn_spread();
    // Get instance field reference: public System.Single aimStrength
    [[deprecated("Use field access instead!")]] float& dyn_aimStrength();
    // Get instance field reference: private Pathfinding.Path lastPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_lastPath();
    // Get instance field reference: private Pathfinding.FloodPath lastFloodPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::FloodPath*& dyn_lastFloodPath();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> lastRender
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_lastRender();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> multipoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_multipoints();
    // private System.Void Update()
    // Offset: 0x2A4949C
    void Update();
    // public System.Void OnGUI()
    // Offset: 0x2A49A38
    void OnGUI();
    // public System.Void OnPathComplete(Pathfinding.Path p)
    // Offset: 0x2A4A7D8
    void OnPathComplete(::Pathfinding::Path* p);
    // private System.Void ClearPrevious()
    // Offset: 0x2A4AAB4
    void ClearPrevious();
    // private System.Void OnDestroy()
    // Offset: 0x2A4ABB0
    void OnDestroy();
    // private System.Void DemoPath()
    // Offset: 0x2A49678
    void DemoPath();
    // private System.Collections.IEnumerator DemoMultiTargetPath()
    // Offset: 0x2A4ABD0
    ::System::Collections::IEnumerator* DemoMultiTargetPath();
    // public System.Collections.IEnumerator DemoConstantPath()
    // Offset: 0x2A4AC3C
    ::System::Collections::IEnumerator* DemoConstantPath();
    // public System.Void .ctor()
    // Offset: 0x2A4ACF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathTypesDemo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::PathTypesDemo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathTypesDemo*, creationType>()));
    }
  }; // Pathfinding.Examples.PathTypesDemo
  #pragma pack(pop)
  static check_size<sizeof(PathTypesDemo), 128 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __Pathfinding_Examples_PathTypesDemoSizeCheck;
  static_assert(sizeof(PathTypesDemo) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::PathTypesDemo::DemoMode, "Pathfinding.Examples", "PathTypesDemo/DemoMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)(::Pathfinding::Path*)>(&Pathfinding::Examples::PathTypesDemo::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::ClearPrevious
// Il2CppName: ClearPrevious
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::ClearPrevious)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "ClearPrevious", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::DemoPath
// Il2CppName: DemoPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::DemoPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "DemoPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::DemoMultiTargetPath
// Il2CppName: DemoMultiTargetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::DemoMultiTargetPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "DemoMultiTargetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::DemoConstantPath
// Il2CppName: DemoConstantPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::PathTypesDemo::*)()>(&Pathfinding::Examples::PathTypesDemo::DemoConstantPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::PathTypesDemo*), "DemoConstantPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::PathTypesDemo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
