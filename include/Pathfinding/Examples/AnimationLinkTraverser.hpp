// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichAI
  class RichAI;
  // Forward declaring type: RichSpecial
  class RichSpecial;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: AnimationLinkTraverser
  class AnimationLinkTraverser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::AnimationLinkTraverser);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::AnimationLinkTraverser*, "Pathfinding.Examples", "AnimationLinkTraverser");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.AnimationLinkTraverser
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class AnimationLinkTraverser : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    // Nested type: ::Pathfinding::Examples::AnimationLinkTraverser::$TraverseOffMeshLink$d__4
    class $TraverseOffMeshLink$d__4;
    public:
    // public UnityEngine.Animation anim
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Animation* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    // private Pathfinding.RichAI ai
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::RichAI* ai;
    // Field size check
    static_assert(sizeof(::Pathfinding::RichAI*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Animation anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn_anim();
    // Get instance field reference: private Pathfinding.RichAI ai
    [[deprecated("Use field access instead!")]] ::Pathfinding::RichAI*& dyn_ai();
    // private System.Void OnEnable()
    // Offset: 0x2A4D2D4
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2A4D42C
    void OnDisable();
    // protected System.Collections.IEnumerator TraverseOffMeshLink(Pathfinding.RichSpecial rs)
    // Offset: 0x2A4D550
    ::System::Collections::IEnumerator* TraverseOffMeshLink(::Pathfinding::RichSpecial* rs);
    // public System.Void .ctor()
    // Offset: 0x2A4D600
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimationLinkTraverser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::AnimationLinkTraverser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimationLinkTraverser*, creationType>()));
    }
  }; // Pathfinding.Examples.AnimationLinkTraverser
  #pragma pack(pop)
  static check_size<sizeof(AnimationLinkTraverser), 48 + sizeof(::Pathfinding::RichAI*)> __Pathfinding_Examples_AnimationLinkTraverserSizeCheck;
  static_assert(sizeof(AnimationLinkTraverser) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::AnimationLinkTraverser::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::AnimationLinkTraverser::*)()>(&Pathfinding::Examples::AnimationLinkTraverser::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::AnimationLinkTraverser*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::AnimationLinkTraverser::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::AnimationLinkTraverser::*)()>(&Pathfinding::Examples::AnimationLinkTraverser::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::AnimationLinkTraverser*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::AnimationLinkTraverser::TraverseOffMeshLink
// Il2CppName: TraverseOffMeshLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::AnimationLinkTraverser::*)(::Pathfinding::RichSpecial*)>(&Pathfinding::Examples::AnimationLinkTraverser::TraverseOffMeshLink)> {
  static const MethodInfo* get() {
    static auto* rs = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichSpecial")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::AnimationLinkTraverser*), "TraverseOffMeshLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::AnimationLinkTraverser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
