// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: SingleNodeBlocker
  class SingleNodeBlocker;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: TurnBasedDoor
  class TurnBasedDoor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::TurnBasedDoor);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::TurnBasedDoor*, "Pathfinding.Examples", "TurnBasedDoor");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.TurnBasedDoor
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class TurnBasedDoor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Examples::TurnBasedDoor::$WaitAndClose$d__6
    class $WaitAndClose$d__6;
    public:
    // private UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private Pathfinding.SingleNodeBlocker blocker
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::SingleNodeBlocker* blocker;
    // Field size check
    static_assert(sizeof(::Pathfinding::SingleNodeBlocker*) == 0x8);
    // private System.Boolean open
    // Size: 0x1
    // Offset: 0x30
    bool open;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: private Pathfinding.SingleNodeBlocker blocker
    [[deprecated("Use field access instead!")]] ::Pathfinding::SingleNodeBlocker*& dyn_blocker();
    // Get instance field reference: private System.Boolean open
    [[deprecated("Use field access instead!")]] bool& dyn_open();
    // private System.Void Awake()
    // Offset: 0x2A46CD0
    void Awake();
    // private System.Void Start()
    // Offset: 0x2A46D60
    void Start();
    // public System.Void Close()
    // Offset: 0x2A46DCC
    void Close();
    // private System.Collections.IEnumerator WaitAndClose()
    // Offset: 0x2A46DEC
    ::System::Collections::IEnumerator* WaitAndClose();
    // public System.Void Open()
    // Offset: 0x2A46E80
    void Open();
    // public System.Void Toggle()
    // Offset: 0x2A46F00
    void Toggle();
    // public System.Void .ctor()
    // Offset: 0x2A46F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TurnBasedDoor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::TurnBasedDoor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TurnBasedDoor*, creationType>()));
    }
  }; // Pathfinding.Examples.TurnBasedDoor
  #pragma pack(pop)
  static check_size<sizeof(TurnBasedDoor), 48 + sizeof(bool)> __Pathfinding_Examples_TurnBasedDoorSizeCheck;
  static_assert(sizeof(TurnBasedDoor) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::WaitAndClose
// Il2CppName: WaitAndClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::WaitAndClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "WaitAndClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::Open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::TurnBasedDoor::*)()>(&Pathfinding::Examples::TurnBasedDoor::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::TurnBasedDoor*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::TurnBasedDoor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
