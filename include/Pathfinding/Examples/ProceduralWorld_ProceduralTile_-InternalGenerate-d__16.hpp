// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Examples.ProceduralWorld/ProceduralTile
#include "Pathfinding/Examples/ProceduralWorld_ProceduralTile.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: Pathfinding.Examples.ProceduralWorld
#include "Pathfinding/Examples/ProceduralWorld.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*, "Pathfinding.Examples", "ProceduralWorld/ProceduralTile/<InternalGenerate>d__16");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.ProceduralWorld/ProceduralTile/<InternalGenerate>d__16
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class ProceduralWorld::ProceduralTile::$InternalGenerate$d__16 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public Pathfinding.Examples.ProceduralWorld/ProceduralTile <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Examples::ProceduralWorld::ProceduralTile* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::ProceduralWorld::ProceduralTile*) == 0x8);
    // private System.Int32 <counter>5__2
    // Size: 0x4
    // Offset: 0x28
    int $counter$5__2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $counter$5__2 and: $ditherMap$5__3
    char __padding3[0x4] = {};
    // private System.Single[,] <ditherMap>5__3
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<float> $ditherMap$5__3;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 <i>5__4
    // Size: 0x4
    // Offset: 0x38
    int $i$5__4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $i$5__4 and: $pref$5__5
    char __padding5[0x4] = {};
    // private Pathfinding.Examples.ProceduralWorld/ProceduralPrefab <pref>5__5
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab* $pref$5__5;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab*) == 0x8);
    // private System.Single <subSize>5__6
    // Size: 0x4
    // Offset: 0x48
    float $subSize$5__6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <sx>5__7
    // Size: 0x4
    // Offset: 0x4C
    int $sx$5__7;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <sz>5__8
    // Size: 0x4
    // Offset: 0x50
    int $sz$5__8;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <px>5__9
    // Size: 0x4
    // Offset: 0x54
    float $px$5__9;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <pz>5__10
    // Size: 0x4
    // Offset: 0x58
    float $pz$5__10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <count>5__11
    // Size: 0x4
    // Offset: 0x5C
    int $count$5__11;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <j>5__12
    // Size: 0x4
    // Offset: 0x60
    int $j$5__12;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public Pathfinding.Examples.ProceduralWorld/ProceduralTile <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::ProceduralWorld::ProceduralTile*& dyn_$$4__this();
    // Get instance field reference: private System.Int32 <counter>5__2
    [[deprecated("Use field access instead!")]] int& dyn_$counter$5__2();
    // Get instance field reference: private System.Single[,] <ditherMap>5__3
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_$ditherMap$5__3();
    // Get instance field reference: private System.Int32 <i>5__4
    [[deprecated("Use field access instead!")]] int& dyn_$i$5__4();
    // Get instance field reference: private Pathfinding.Examples.ProceduralWorld/ProceduralPrefab <pref>5__5
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab*& dyn_$pref$5__5();
    // Get instance field reference: private System.Single <subSize>5__6
    [[deprecated("Use field access instead!")]] float& dyn_$subSize$5__6();
    // Get instance field reference: private System.Int32 <sx>5__7
    [[deprecated("Use field access instead!")]] int& dyn_$sx$5__7();
    // Get instance field reference: private System.Int32 <sz>5__8
    [[deprecated("Use field access instead!")]] int& dyn_$sz$5__8();
    // Get instance field reference: private System.Single <px>5__9
    [[deprecated("Use field access instead!")]] float& dyn_$px$5__9();
    // Get instance field reference: private System.Single <pz>5__10
    [[deprecated("Use field access instead!")]] float& dyn_$pz$5__10();
    // Get instance field reference: private System.Int32 <count>5__11
    [[deprecated("Use field access instead!")]] int& dyn_$count$5__11();
    // Get instance field reference: private System.Int32 <j>5__12
    [[deprecated("Use field access instead!")]] int& dyn_$j$5__12();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2A45350
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralWorld::ProceduralTile::$InternalGenerate$d__16* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A45650
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2A45654
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x2A45EC0
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x2A45EC8
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2A45F00
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // Pathfinding.Examples.ProceduralWorld/ProceduralTile/<InternalGenerate>d__16
  #pragma pack(pop)
  static check_size<sizeof(ProceduralWorld::ProceduralTile::$InternalGenerate$d__16), 96 + sizeof(int)> __Pathfinding_Examples_ProceduralWorld_ProceduralTile_$InternalGenerate$d__16SizeCheck;
  static_assert(sizeof(ProceduralWorld::ProceduralTile::$InternalGenerate$d__16) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::*)()>(&Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::*)()>(&Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::*)()>(&Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::*)()>(&Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::*)()>(&Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ProceduralWorld::ProceduralTile::$InternalGenerate$d__16*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
