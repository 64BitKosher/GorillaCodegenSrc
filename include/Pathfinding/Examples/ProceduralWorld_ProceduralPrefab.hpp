// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Examples.ProceduralWorld
#include "Pathfinding/Examples/ProceduralWorld.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.Examples.ProceduralWorld/RotationRandomness
#include "Pathfinding/Examples/ProceduralWorld_RotationRandomness.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab*, "Pathfinding.Examples", "ProceduralWorld/ProceduralPrefab");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.ProceduralWorld/ProceduralPrefab
  // [TokenAttribute] Offset: FFFFFFFF
  class ProceduralWorld::ProceduralPrefab : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject prefab
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* prefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single density
    // Size: 0x4
    // Offset: 0x18
    float density;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single perlin
    // Size: 0x4
    // Offset: 0x1C
    float perlin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single perlinPower
    // Size: 0x4
    // Offset: 0x20
    float perlinPower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 perlinOffset
    // Size: 0x8
    // Offset: 0x24
    ::UnityEngine::Vector2 perlinOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single perlinScale
    // Size: 0x4
    // Offset: 0x2C
    float perlinScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single random
    // Size: 0x4
    // Offset: 0x30
    float random;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.Examples.ProceduralWorld/RotationRandomness randomRotation
    // Size: 0x4
    // Offset: 0x34
    ::Pathfinding::Examples::ProceduralWorld::RotationRandomness randomRotation;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::ProceduralWorld::RotationRandomness) == 0x4);
    // public System.Boolean singleFixed
    // Size: 0x1
    // Offset: 0x38
    bool singleFixed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.GameObject prefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_prefab();
    // Get instance field reference: public System.Single density
    [[deprecated("Use field access instead!")]] float& dyn_density();
    // Get instance field reference: public System.Single perlin
    [[deprecated("Use field access instead!")]] float& dyn_perlin();
    // Get instance field reference: public System.Single perlinPower
    [[deprecated("Use field access instead!")]] float& dyn_perlinPower();
    // Get instance field reference: public UnityEngine.Vector2 perlinOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_perlinOffset();
    // Get instance field reference: public System.Single perlinScale
    [[deprecated("Use field access instead!")]] float& dyn_perlinScale();
    // Get instance field reference: public System.Single random
    [[deprecated("Use field access instead!")]] float& dyn_random();
    // Get instance field reference: public Pathfinding.Examples.ProceduralWorld/RotationRandomness randomRotation
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::ProceduralWorld::RotationRandomness& dyn_randomRotation();
    // Get instance field reference: public System.Boolean singleFixed
    [[deprecated("Use field access instead!")]] bool& dyn_singleFixed();
    // public System.Void .ctor()
    // Offset: 0x2A4503C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralWorld::ProceduralPrefab* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::ProceduralWorld::ProceduralPrefab::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralWorld::ProceduralPrefab*, creationType>()));
    }
  }; // Pathfinding.Examples.ProceduralWorld/ProceduralPrefab
  #pragma pack(pop)
  static check_size<sizeof(ProceduralWorld::ProceduralPrefab), 56 + sizeof(bool)> __Pathfinding_Examples_ProceduralWorld_ProceduralPrefabSizeCheck;
  static_assert(sizeof(ProceduralWorld::ProceduralPrefab) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::ProceduralWorld::ProceduralPrefab::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
