// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: BezierMover
  class BezierMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::BezierMover);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::BezierMover*, "Pathfinding.Examples", "BezierMover");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.BezierMover
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class BezierMover : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform[] points
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x28
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tiltAmount
    // Size: 0x4
    // Offset: 0x2C
    float tiltAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single time
    // Size: 0x4
    // Offset: 0x30
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Transform[] points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_points();
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: public System.Single tiltAmount
    [[deprecated("Use field access instead!")]] float& dyn_tiltAmount();
    // Get instance field reference: private System.Single time
    [[deprecated("Use field access instead!")]] float& dyn_time();
    // private UnityEngine.Vector3 Position(System.Single t)
    // Offset: 0x2A4603C
    ::UnityEngine::Vector3 Position(float t);
    // private System.Void Update()
    // Offset: 0x2A46274
    void Update();
    // private System.Void OnDrawGizmos()
    // Offset: 0x2A466D0
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x2A46878
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::BezierMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierMover*, creationType>()));
    }
  }; // Pathfinding.Examples.BezierMover
  #pragma pack(pop)
  static check_size<sizeof(BezierMover), 48 + sizeof(float)> __Pathfinding_Examples_BezierMoverSizeCheck;
  static_assert(sizeof(BezierMover) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::BezierMover::Position
// Il2CppName: Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Examples::BezierMover::*)(float)>(&Pathfinding::Examples::BezierMover::Position)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::BezierMover*), "Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::BezierMover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::BezierMover::*)()>(&Pathfinding::Examples::BezierMover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::BezierMover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::BezierMover::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::BezierMover::*)()>(&Pathfinding::Examples::BezierMover::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::BezierMover*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::BezierMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
