// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: IAstarAI
  class IAstarAI;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: MineBotAnimation
  class MineBotAnimation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::MineBotAnimation);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::MineBotAnimation*, "Pathfinding.Examples", "MineBotAnimation");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.MineBotAnimation
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class MineBotAnimation : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.Animator anim
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Animator* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.GameObject endOfPathEffect
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* endOfPathEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean isAtDestination
    // Size: 0x1
    // Offset: 0x38
    bool isAtDestination;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isAtDestination and: ai
    char __padding2[0x7] = {};
    // private Pathfinding.IAstarAI ai
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::IAstarAI* ai;
    // Field size check
    static_assert(sizeof(::Pathfinding::IAstarAI*) == 0x8);
    // private UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Vector3 lastTarget
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 lastTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Animator anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_anim();
    // Get instance field reference: public UnityEngine.GameObject endOfPathEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_endOfPathEffect();
    // Get instance field reference: private System.Boolean isAtDestination
    [[deprecated("Use field access instead!")]] bool& dyn_isAtDestination();
    // Get instance field reference: private Pathfinding.IAstarAI ai
    [[deprecated("Use field access instead!")]] ::Pathfinding::IAstarAI*& dyn_ai();
    // Get instance field reference: private UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: protected UnityEngine.Vector3 lastTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastTarget();
    // private System.Void OnTargetReached()
    // Offset: 0x2A4C64C
    void OnTargetReached();
    // protected System.Void Update()
    // Offset: 0x2A4C808
    void Update();
    // protected override System.Void Awake()
    // Offset: 0x2A4C5B0
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x2A4C9FC
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MineBotAnimation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::MineBotAnimation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MineBotAnimation*, creationType>()));
    }
  }; // Pathfinding.Examples.MineBotAnimation
  #pragma pack(pop)
  static check_size<sizeof(MineBotAnimation), 80 + sizeof(::UnityEngine::Vector3)> __Pathfinding_Examples_MineBotAnimationSizeCheck;
  static_assert(sizeof(MineBotAnimation) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::MineBotAnimation::OnTargetReached
// Il2CppName: OnTargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::MineBotAnimation::*)()>(&Pathfinding::Examples::MineBotAnimation::OnTargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::MineBotAnimation*), "OnTargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::MineBotAnimation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::MineBotAnimation::*)()>(&Pathfinding::Examples::MineBotAnimation::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::MineBotAnimation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::MineBotAnimation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::MineBotAnimation::*)()>(&Pathfinding::Examples::MineBotAnimation::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::MineBotAnimation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::MineBotAnimation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
