// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: Astar3DButton
  class Astar3DButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::Astar3DButton);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::Astar3DButton*, "Pathfinding.Examples", "Astar3DButton");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.Astar3DButton
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class Astar3DButton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Pathfinding.GraphNode node
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::GraphNode* node;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.GraphNode node
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_node();
    // public System.Void OnHover(System.Boolean hover)
    // Offset: 0x2A469F8
    void OnHover(bool hover);
    // public System.Void OnClick()
    // Offset: 0x2A469FC
    void OnClick();
    // public System.Void .ctor()
    // Offset: 0x2A46A00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Astar3DButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::Astar3DButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Astar3DButton*, creationType>()));
    }
  }; // Pathfinding.Examples.Astar3DButton
  #pragma pack(pop)
  static check_size<sizeof(Astar3DButton), 32 + sizeof(::Pathfinding::GraphNode*)> __Pathfinding_Examples_Astar3DButtonSizeCheck;
  static_assert(sizeof(Astar3DButton) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::Astar3DButton::OnHover
// Il2CppName: OnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::Astar3DButton::*)(bool)>(&Pathfinding::Examples::Astar3DButton::OnHover)> {
  static const MethodInfo* get() {
    static auto* hover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::Astar3DButton*), "OnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hover});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::Astar3DButton::OnClick
// Il2CppName: OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::Astar3DButton::*)()>(&Pathfinding::Examples::Astar3DButton::OnClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::Astar3DButton*), "OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::Astar3DButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
