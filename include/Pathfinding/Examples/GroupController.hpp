// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUIStyle
  class GUIStyle;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
  // Forward declaring type: RVOExampleAgent
  class RVOExampleAgent;
}
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: Simulator
  class Simulator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: GroupController
  class GroupController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::GroupController);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::GroupController*, "Pathfinding.Examples", "GroupController");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.GroupController
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class GroupController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GUIStyle selectionBox
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GUIStyle* selectionBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyle*) == 0x8);
    // public System.Boolean adjustCamera
    // Size: 0x1
    // Offset: 0x28
    bool adjustCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: adjustCamera and: start
    char __padding1[0x3] = {};
    // private UnityEngine.Vector2 start
    // Size: 0x8
    // Offset: 0x2C
    ::UnityEngine::Vector2 start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 end
    // Size: 0x8
    // Offset: 0x34
    ::UnityEngine::Vector2 end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean wasDown
    // Size: 0x1
    // Offset: 0x3C
    bool wasDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasDown and: selection
    char __padding4[0x3] = {};
    // private System.Collections.Generic.List`1<Pathfinding.Examples.RVOExampleAgent> selection
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Pathfinding::Examples::RVOExampleAgent*>* selection;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::Examples::RVOExampleAgent*>*) == 0x8);
    // private Pathfinding.RVO.Simulator sim
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::RVO::Simulator* sim;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::Simulator*) == 0x8);
    // private UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // static field const value: static private System.Single rad2Deg
    static constexpr const float rad2Deg = 57.295776;
    // Get static field: static private System.Single rad2Deg
    static float _get_rad2Deg();
    // Set static field: static private System.Single rad2Deg
    static void _set_rad2Deg(float value);
    // Get instance field reference: public UnityEngine.GUIStyle selectionBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyle*& dyn_selectionBox();
    // Get instance field reference: public System.Boolean adjustCamera
    [[deprecated("Use field access instead!")]] bool& dyn_adjustCamera();
    // Get instance field reference: private UnityEngine.Vector2 start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_start();
    // Get instance field reference: private UnityEngine.Vector2 end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_end();
    // Get instance field reference: private System.Boolean wasDown
    [[deprecated("Use field access instead!")]] bool& dyn_wasDown();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.Examples.RVOExampleAgent> selection
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Examples::RVOExampleAgent*>*& dyn_selection();
    // Get instance field reference: private Pathfinding.RVO.Simulator sim
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::Simulator*& dyn_sim();
    // Get instance field reference: private UnityEngine.Camera cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cam();
    // public System.Void Start()
    // Offset: 0x2A3F720
    void Start();
    // public System.Void Update()
    // Offset: 0x2A3F854
    void Update();
    // private System.Void OnGUI()
    // Offset: 0x2A3FD6C
    void OnGUI();
    // public System.Void Order()
    // Offset: 0x2A3FACC
    void Order();
    // public System.Void Select(UnityEngine.Vector2 _start, UnityEngine.Vector2 _end)
    // Offset: 0x2A3FF34
    void Select(::UnityEngine::Vector2 _start, ::UnityEngine::Vector2 _end);
    // public UnityEngine.Color GetColor(System.Single angle)
    // Offset: 0x2A401C8
    ::UnityEngine::Color GetColor(float angle);
    // public System.Void .ctor()
    // Offset: 0x2A401EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::GroupController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupController*, creationType>()));
    }
  }; // Pathfinding.Examples.GroupController
  #pragma pack(pop)
  static check_size<sizeof(GroupController), 80 + sizeof(::UnityEngine::Camera*)> __Pathfinding_Examples_GroupControllerSizeCheck;
  static_assert(sizeof(GroupController) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::GroupController::*)()>(&Pathfinding::Examples::GroupController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::GroupController::*)()>(&Pathfinding::Examples::GroupController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::GroupController::*)()>(&Pathfinding::Examples::GroupController::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::Order
// Il2CppName: Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::GroupController::*)()>(&Pathfinding::Examples::GroupController::Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::GroupController::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Examples::GroupController::Select)> {
  static const MethodInfo* get() {
    static auto* _start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* _end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_start, _end});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Pathfinding::Examples::GroupController::*)(float)>(&Pathfinding::Examples::GroupController::GetColor)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::GroupController*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::GroupController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
