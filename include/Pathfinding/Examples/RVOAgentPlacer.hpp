// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: RVOAgentPlacer
  class RVOAgentPlacer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::RVOAgentPlacer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::RVOAgentPlacer*, "Pathfinding.Examples", "RVOAgentPlacer");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.RVOAgentPlacer
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class RVOAgentPlacer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pathfinding::Examples::RVOAgentPlacer::$Start$d__6
    class $Start$d__6;
    public:
    // public System.Int32 agents
    // Size: 0x4
    // Offset: 0x20
    int agents;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single ringSize
    // Size: 0x4
    // Offset: 0x24
    float ringSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: mask and: prefab
    char __padding2[0x4] = {};
    // public UnityEngine.GameObject prefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* prefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 goalOffset
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 goalOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single repathRate
    // Size: 0x4
    // Offset: 0x44
    float repathRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single rad2Deg
    static constexpr const float rad2Deg = 57.295776;
    // Get static field: static private System.Single rad2Deg
    static float _get_rad2Deg();
    // Set static field: static private System.Single rad2Deg
    static void _set_rad2Deg(float value);
    // Get instance field reference: public System.Int32 agents
    [[deprecated("Use field access instead!")]] int& dyn_agents();
    // Get instance field reference: public System.Single ringSize
    [[deprecated("Use field access instead!")]] float& dyn_ringSize();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public UnityEngine.GameObject prefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_prefab();
    // Get instance field reference: public UnityEngine.Vector3 goalOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_goalOffset();
    // Get instance field reference: public System.Single repathRate
    [[deprecated("Use field access instead!")]] float& dyn_repathRate();
    // private System.Collections.IEnumerator Start()
    // Offset: 0x2A42D84
    ::System::Collections::IEnumerator* Start();
    // public UnityEngine.Color GetColor(System.Single angle)
    // Offset: 0x2A42E18
    ::UnityEngine::Color GetColor(float angle);
    // public System.Void .ctor()
    // Offset: 0x2A42E3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RVOAgentPlacer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::RVOAgentPlacer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RVOAgentPlacer*, creationType>()));
    }
  }; // Pathfinding.Examples.RVOAgentPlacer
  #pragma pack(pop)
  static check_size<sizeof(RVOAgentPlacer), 68 + sizeof(float)> __Pathfinding_Examples_RVOAgentPlacerSizeCheck;
  static_assert(sizeof(RVOAgentPlacer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::RVOAgentPlacer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Examples::RVOAgentPlacer::*)()>(&Pathfinding::Examples::RVOAgentPlacer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOAgentPlacer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOAgentPlacer::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Pathfinding::Examples::RVOAgentPlacer::*)(float)>(&Pathfinding::Examples::RVOAgentPlacer::GetColor)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::RVOAgentPlacer*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::RVOAgentPlacer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
