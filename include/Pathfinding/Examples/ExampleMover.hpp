// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Examples
namespace Pathfinding::Examples {
  // Forward declaring type: RVOExampleAgent
  class RVOExampleAgent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Forward declaring type: ExampleMover
  class ExampleMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Examples::ExampleMover);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Examples::ExampleMover*, "Pathfinding.Examples", "ExampleMover");
// Type namespace: Pathfinding.Examples
namespace Pathfinding::Examples {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Examples.ExampleMover
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class ExampleMover : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Pathfinding.Examples.RVOExampleAgent agent
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Examples::RVOExampleAgent* agent;
    // Field size check
    static_assert(sizeof(::Pathfinding::Examples::RVOExampleAgent*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: private Pathfinding.Examples.RVOExampleAgent agent
    [[deprecated("Use field access instead!")]] ::Pathfinding::Examples::RVOExampleAgent*& dyn_agent();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // private System.Void Awake()
    // Offset: 0x2A48370
    void Awake();
    // private System.Void Start()
    // Offset: 0x2A483C8
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x2A48400
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x2A48450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExampleMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Examples::ExampleMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExampleMover*, creationType>()));
    }
  }; // Pathfinding.Examples.ExampleMover
  #pragma pack(pop)
  static check_size<sizeof(ExampleMover), 40 + sizeof(::UnityEngine::Transform*)> __Pathfinding_Examples_ExampleMoverSizeCheck;
  static_assert(sizeof(ExampleMover) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Examples::ExampleMover::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ExampleMover::*)()>(&Pathfinding::Examples::ExampleMover::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ExampleMover*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ExampleMover::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ExampleMover::*)()>(&Pathfinding::Examples::ExampleMover::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ExampleMover*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ExampleMover::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Examples::ExampleMover::*)()>(&Pathfinding::Examples::ExampleMover::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Examples::ExampleMover*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Examples::ExampleMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
