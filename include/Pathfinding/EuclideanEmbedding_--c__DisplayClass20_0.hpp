// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.EuclideanEmbedding
#include "Pathfinding/EuclideanEmbedding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*, "Pathfinding", "EuclideanEmbedding/<>c__DisplayClass20_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class EuclideanEmbedding::$$c__DisplayClass20_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 numComplete
    // Size: 0x4
    // Offset: 0x10
    int numComplete;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numComplete and: $$4__this
    char __padding0[0x4] = {};
    // public Pathfinding.EuclideanEmbedding <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::EuclideanEmbedding* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding*) == 0x8);
    // public Pathfinding.OnPathDelegate onComplete
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::OnPathDelegate* onComplete;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public System.Action`1<System.Int32> startCostCalculation
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<int>* startCostCalculation;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 numComplete
    [[deprecated("Use field access instead!")]] int& dyn_numComplete();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.OnPathDelegate onComplete
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_onComplete();
    // Get instance field reference: public System.Action`1<System.Int32> startCostCalculation
    [[deprecated("Use field access instead!")]] ::System::Action_1<int>*& dyn_startCostCalculation();
    // public System.Void .ctor()
    // Offset: 0x29E8C28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EuclideanEmbedding::$$c__DisplayClass20_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EuclideanEmbedding::$$c__DisplayClass20_0*, creationType>()));
    }
    // System.Void <RecalculateCosts>b__0(Pathfinding.Path path)
    // Offset: 0x29E94D0
    void $RecalculateCosts$b__0(::Pathfinding::Path* path);
    // System.Void <RecalculateCosts>b__1(System.Int32 pivotIndex)
    // Offset: 0x29E950C
    void $RecalculateCosts$b__1(int pivotIndex);
  }; // Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_0
  #pragma pack(pop)
  static check_size<sizeof(EuclideanEmbedding::$$c__DisplayClass20_0), 40 + sizeof(::System::Action_1<int>*)> __Pathfinding_EuclideanEmbedding_$$c__DisplayClass20_0SizeCheck;
  static_assert(sizeof(EuclideanEmbedding::$$c__DisplayClass20_0) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::$RecalculateCosts$b__0
// Il2CppName: <RecalculateCosts>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::*)(::Pathfinding::Path*)>(&Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::$RecalculateCosts$b__0)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*), "<RecalculateCosts>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::$RecalculateCosts$b__1
// Il2CppName: <RecalculateCosts>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::*)(int)>(&Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0::$RecalculateCosts$b__1)> {
  static const MethodInfo* get() {
    static auto* pivotIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_0*), "<RecalculateCosts>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pivotIndex});
  }
};
