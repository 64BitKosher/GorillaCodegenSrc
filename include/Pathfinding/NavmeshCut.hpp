// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavmeshClipper
#include "Pathfinding/NavmeshClipper.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.Int2
#include "Pathfinding/Int2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rect
  struct Rect;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshCut
  class NavmeshCut;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavmeshCut);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshCut*, "Pathfinding", "NavmeshCut");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xA4
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavmeshCut
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class NavmeshCut : public ::Pathfinding::NavmeshClipper {
    public:
    // Nested type: ::Pathfinding::NavmeshCut::MeshType
    struct MeshType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.NavmeshCut/MeshType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MeshType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MeshType
      constexpr MeshType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.NavmeshCut/MeshType Rectangle
      static constexpr const int Rectangle = 0;
      // Get static field: static public Pathfinding.NavmeshCut/MeshType Rectangle
      static ::Pathfinding::NavmeshCut::MeshType _get_Rectangle();
      // Set static field: static public Pathfinding.NavmeshCut/MeshType Rectangle
      static void _set_Rectangle(::Pathfinding::NavmeshCut::MeshType value);
      // static field const value: static public Pathfinding.NavmeshCut/MeshType Circle
      static constexpr const int Circle = 1;
      // Get static field: static public Pathfinding.NavmeshCut/MeshType Circle
      static ::Pathfinding::NavmeshCut::MeshType _get_Circle();
      // Set static field: static public Pathfinding.NavmeshCut/MeshType Circle
      static void _set_Circle(::Pathfinding::NavmeshCut::MeshType value);
      // static field const value: static public Pathfinding.NavmeshCut/MeshType CustomMesh
      static constexpr const int CustomMesh = 2;
      // Get static field: static public Pathfinding.NavmeshCut/MeshType CustomMesh
      static ::Pathfinding::NavmeshCut::MeshType _get_CustomMesh();
      // Set static field: static public Pathfinding.NavmeshCut/MeshType CustomMesh
      static void _set_CustomMesh(::Pathfinding::NavmeshCut::MeshType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.NavmeshCut/MeshType
    #pragma pack(pop)
    static check_size<sizeof(NavmeshCut::MeshType), 0 + sizeof(int)> __Pathfinding_NavmeshCut_MeshTypeSizeCheck;
    static_assert(sizeof(NavmeshCut::MeshType) == 0x4);
    public:
    // public Pathfinding.NavmeshCut/MeshType type
    // Size: 0x4
    // Offset: 0x2C
    ::Pathfinding::NavmeshCut::MeshType type;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshCut::MeshType) == 0x4);
    // public UnityEngine.Mesh mesh
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Vector2 rectangleSize
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 rectangleSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single circleRadius
    // Size: 0x4
    // Offset: 0x40
    float circleRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 circleResolution
    // Size: 0x4
    // Offset: 0x44
    int circleResolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x48
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single meshScale
    // Size: 0x4
    // Offset: 0x4C
    float meshScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single updateDistance
    // Size: 0x4
    // Offset: 0x5C
    float updateDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isDual
    // Size: 0x1
    // Offset: 0x60
    bool isDual;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean cutsAddedGeom
    // Size: 0x1
    // Offset: 0x61
    bool cutsAddedGeom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cutsAddedGeom and: updateRotationDistance
    char __padding10[0x2] = {};
    // public System.Single updateRotationDistance
    // Size: 0x4
    // Offset: 0x64
    float updateRotationDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useRotationAndScale
    // Size: 0x1
    // Offset: 0x68
    bool useRotationAndScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRotationAndScale and: contours
    char __padding12[0x7] = {};
    // private UnityEngine.Vector3[][] contours
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::ArrayW<::UnityEngine::Vector3>> contours;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Vector3>>) == 0x8);
    // protected UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Mesh lastMesh
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Mesh* lastMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion lastRotation
    // Size: 0x10
    // Offset: 0x94
    ::UnityEngine::Quaternion lastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int2,System.Int32> edges
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, int>* _get_edges();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int2,System.Int32> edges
    static void _set_edges(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, int>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pointers
    static ::System::Collections::Generic::Dictionary_2<int, int>* _get_pointers();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pointers
    static void _set_pointers(::System::Collections::Generic::Dictionary_2<int, int>* value);
    // Get static field: static public readonly UnityEngine.Color GizmoColor
    static ::UnityEngine::Color _get_GizmoColor();
    // Set static field: static public readonly UnityEngine.Color GizmoColor
    static void _set_GizmoColor(::UnityEngine::Color value);
    // Get instance field reference: public Pathfinding.NavmeshCut/MeshType type
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshCut::MeshType& dyn_type();
    // Get instance field reference: public UnityEngine.Mesh mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_mesh();
    // Get instance field reference: public UnityEngine.Vector2 rectangleSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_rectangleSize();
    // Get instance field reference: public System.Single circleRadius
    [[deprecated("Use field access instead!")]] float& dyn_circleRadius();
    // Get instance field reference: public System.Int32 circleResolution
    [[deprecated("Use field access instead!")]] int& dyn_circleResolution();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public System.Single meshScale
    [[deprecated("Use field access instead!")]] float& dyn_meshScale();
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public System.Single updateDistance
    [[deprecated("Use field access instead!")]] float& dyn_updateDistance();
    // Get instance field reference: public System.Boolean isDual
    [[deprecated("Use field access instead!")]] bool& dyn_isDual();
    // Get instance field reference: public System.Boolean cutsAddedGeom
    [[deprecated("Use field access instead!")]] bool& dyn_cutsAddedGeom();
    // Get instance field reference: public System.Single updateRotationDistance
    [[deprecated("Use field access instead!")]] float& dyn_updateRotationDistance();
    // Get instance field reference: public System.Boolean useRotationAndScale
    [[deprecated("Use field access instead!")]] bool& dyn_useRotationAndScale();
    // Get instance field reference: private UnityEngine.Vector3[][] contours
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Vector3>>& dyn_contours();
    // Get instance field reference: protected UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: private UnityEngine.Mesh lastMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_lastMesh();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: private UnityEngine.Quaternion lastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastRotation();
    // public System.Void UsedForCut()
    // Offset: 0x29F95E0
    void UsedForCut();
    // private System.Void CalculateMeshContour()
    // Offset: 0x29F9630
    void CalculateMeshContour();
    // public System.Void GetContour(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> buffer)
    // Offset: 0x29FA08C
    void GetContour(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>* buffer);
    // private System.Void TransformBuffer(System.Collections.Generic.List`1<UnityEngine.Vector3> buffer, System.Boolean reverse)
    // Offset: 0x29FA728
    void TransformBuffer(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer, bool reverse);
    // public System.Void OnDrawGizmos()
    // Offset: 0x29FA918
    void OnDrawGizmos();
    // System.Single GetY(Pathfinding.Util.GraphTransform transform)
    // Offset: 0x29FAB74
    float GetY(::Pathfinding::Util::GraphTransform* transform);
    // public System.Void OnDrawGizmosSelected()
    // Offset: 0x29FABF0
    void OnDrawGizmosSelected();
    // protected override System.Void Awake()
    // Offset: 0x29F9468
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x29F9494
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Void NavmeshClipper::OnEnable()
    void OnEnable();
    // public override System.Void ForceUpdate()
    // Offset: 0x29F94D4
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Void NavmeshClipper::ForceUpdate()
    void ForceUpdate();
    // public override System.Boolean RequiresUpdate()
    // Offset: 0x29F94E8
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Boolean NavmeshClipper::RequiresUpdate()
    bool RequiresUpdate();
    // override System.Void NotifyUpdated()
    // Offset: 0x29F95E4
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Void NavmeshClipper::NotifyUpdated()
    void NotifyUpdated();
    // public override UnityEngine.Rect GetBounds(Pathfinding.Util.GraphTransform inverseTransform)
    // Offset: 0x29F9DF4
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: UnityEngine.Rect NavmeshClipper::GetBounds(Pathfinding.Util.GraphTransform inverseTransform)
    ::UnityEngine::Rect GetBounds(::Pathfinding::Util::GraphTransform* inverseTransform);
    // public System.Void .ctor()
    // Offset: 0x29FB0A0
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Void NavmeshClipper::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshCut* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavmeshCut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshCut*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x29FB140
    // Implemented from: Pathfinding.NavmeshClipper
    // Base method: System.Void NavmeshClipper::.cctor()
    static void _cctor();
  }; // Pathfinding.NavmeshCut
  #pragma pack(pop)
  static check_size<sizeof(NavmeshCut), 148 + sizeof(::UnityEngine::Quaternion)> __Pathfinding_NavmeshCutSizeCheck;
  static_assert(sizeof(NavmeshCut) == 0xA4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshCut::MeshType, "Pathfinding", "NavmeshCut/MeshType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::UsedForCut
// Il2CppName: UsedForCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::UsedForCut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "UsedForCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::CalculateMeshContour
// Il2CppName: CalculateMeshContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::CalculateMeshContour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "CalculateMeshContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::GetContour
// Il2CppName: GetContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>*)>(&Pathfinding::NavmeshCut::GetContour)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "GetContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::TransformBuffer
// Il2CppName: TransformBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, bool)>(&Pathfinding::NavmeshCut::TransformBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* reverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "TransformBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, reverse});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::GetY
// Il2CppName: GetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::NavmeshCut::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::NavmeshCut::GetY)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "GetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::RequiresUpdate
// Il2CppName: RequiresUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::RequiresUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "RequiresUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::NotifyUpdated
// Il2CppName: NotifyUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshCut::*)()>(&Pathfinding::NavmeshCut::NotifyUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "NotifyUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Pathfinding::NavmeshCut::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::NavmeshCut::GetBounds)> {
  static const MethodInfo* get() {
    static auto* inverseTransform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inverseTransform});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NavmeshCut::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::NavmeshCut::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshCut*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
