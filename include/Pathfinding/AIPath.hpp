// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AIBase
#include "Pathfinding/AIBase.hpp"
// Including type: Pathfinding.IAstarAI
#include "Pathfinding/IAstarAI.hpp"
// Including type: Pathfinding.CloseToDestinationMode
#include "Pathfinding/CloseToDestinationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: NNConstraint
  class NNConstraint;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: PathInterpolator
  class PathInterpolator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AIPath
  class AIPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AIPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AIPath*, "Pathfinding", "AIPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x161
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AIPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class AIPath : public ::Pathfinding::AIBase/*, public ::Pathfinding::IAstarAI*/ {
    public:
    public:
    // public System.Single maxAcceleration
    // Size: 0x4
    // Offset: 0x130
    float maxAcceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationSpeed
    // Size: 0x4
    // Offset: 0x134
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowdownDistance
    // Size: 0x4
    // Offset: 0x138
    float slowdownDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pickNextWaypointDist
    // Size: 0x4
    // Offset: 0x13C
    float pickNextWaypointDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endReachedDistance
    // Size: 0x4
    // Offset: 0x140
    float endReachedDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean alwaysDrawGizmos
    // Size: 0x1
    // Offset: 0x144
    bool alwaysDrawGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean slowWhenNotFacingTarget
    // Size: 0x1
    // Offset: 0x145
    bool slowWhenNotFacingTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: slowWhenNotFacingTarget and: whenCloseToDestination
    char __padding6[0x2] = {};
    // public Pathfinding.CloseToDestinationMode whenCloseToDestination
    // Size: 0x4
    // Offset: 0x148
    ::Pathfinding::CloseToDestinationMode whenCloseToDestination;
    // Field size check
    static_assert(sizeof(::Pathfinding::CloseToDestinationMode) == 0x4);
    // public System.Boolean constrainInsideGraph
    // Size: 0x1
    // Offset: 0x14C
    bool constrainInsideGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: constrainInsideGraph and: path
    char __padding8[0x3] = {};
    // protected Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x150
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // protected Pathfinding.Util.PathInterpolator interpolator
    // Size: 0x8
    // Offset: 0x158
    ::Pathfinding::Util::PathInterpolator* interpolator;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::PathInterpolator*) == 0x8);
    // private System.Boolean <reachedEndOfPath>k__BackingField
    // Size: 0x1
    // Offset: 0x160
    bool reachedEndOfPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IAstarAI
    operator ::Pathfinding::IAstarAI() noexcept {
      return *reinterpret_cast<::Pathfinding::IAstarAI*>(this);
    }
    // Get static field: static private Pathfinding.NNConstraint cachedNNConstraint
    static ::Pathfinding::NNConstraint* _get_cachedNNConstraint();
    // Set static field: static private Pathfinding.NNConstraint cachedNNConstraint
    static void _set_cachedNNConstraint(::Pathfinding::NNConstraint* value);
    // Get instance field reference: public System.Single maxAcceleration
    [[deprecated("Use field access instead!")]] float& dyn_maxAcceleration();
    // Get instance field reference: public System.Single rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotationSpeed();
    // Get instance field reference: public System.Single slowdownDistance
    [[deprecated("Use field access instead!")]] float& dyn_slowdownDistance();
    // Get instance field reference: public System.Single pickNextWaypointDist
    [[deprecated("Use field access instead!")]] float& dyn_pickNextWaypointDist();
    // Get instance field reference: public System.Single endReachedDistance
    [[deprecated("Use field access instead!")]] float& dyn_endReachedDistance();
    // Get instance field reference: public System.Boolean alwaysDrawGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_alwaysDrawGizmos();
    // Get instance field reference: public System.Boolean slowWhenNotFacingTarget
    [[deprecated("Use field access instead!")]] bool& dyn_slowWhenNotFacingTarget();
    // Get instance field reference: public Pathfinding.CloseToDestinationMode whenCloseToDestination
    [[deprecated("Use field access instead!")]] ::Pathfinding::CloseToDestinationMode& dyn_whenCloseToDestination();
    // Get instance field reference: public System.Boolean constrainInsideGraph
    [[deprecated("Use field access instead!")]] bool& dyn_constrainInsideGraph();
    // Get instance field reference: protected Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: protected Pathfinding.Util.PathInterpolator interpolator
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::PathInterpolator*& dyn_interpolator();
    // Get instance field reference: private System.Boolean <reachedEndOfPath>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$reachedEndOfPath$k__BackingField();
    // public System.Single get_remainingDistance()
    // Offset: 0x298DBB0
    float get_remainingDistance();
    // public System.Boolean get_reachedDestination()
    // Offset: 0x298DD2C
    bool get_reachedDestination();
    // public System.Boolean get_reachedEndOfPath()
    // Offset: 0x298DF90
    bool get_reachedEndOfPath();
    // protected System.Void set_reachedEndOfPath(System.Boolean value)
    // Offset: 0x298DF98
    void set_reachedEndOfPath(bool value);
    // public System.Boolean get_hasPath()
    // Offset: 0x298DFA4
    bool get_hasPath();
    // public System.Boolean get_pathPending()
    // Offset: 0x298DFC0
    bool get_pathPending();
    // public UnityEngine.Vector3 get_steeringTarget()
    // Offset: 0x298DFC8
    ::UnityEngine::Vector3 get_steeringTarget();
    // private System.Single Pathfinding.IAstarAI.get_radius()
    // Offset: 0x298E00C
    float Pathfinding_IAstarAI_get_radius();
    // private System.Void Pathfinding.IAstarAI.set_radius(System.Single value)
    // Offset: 0x298E014
    void Pathfinding_IAstarAI_set_radius(float value);
    // private System.Single Pathfinding.IAstarAI.get_height()
    // Offset: 0x298E01C
    float Pathfinding_IAstarAI_get_height();
    // private System.Void Pathfinding.IAstarAI.set_height(System.Single value)
    // Offset: 0x298E024
    void Pathfinding_IAstarAI_set_height(float value);
    // private System.Single Pathfinding.IAstarAI.get_maxSpeed()
    // Offset: 0x298E02C
    float Pathfinding_IAstarAI_get_maxSpeed();
    // private System.Void Pathfinding.IAstarAI.set_maxSpeed(System.Single value)
    // Offset: 0x298E034
    void Pathfinding_IAstarAI_set_maxSpeed(float value);
    // private System.Boolean Pathfinding.IAstarAI.get_canSearch()
    // Offset: 0x298E03C
    bool Pathfinding_IAstarAI_get_canSearch();
    // private System.Void Pathfinding.IAstarAI.set_canSearch(System.Boolean value)
    // Offset: 0x298E060
    void Pathfinding_IAstarAI_set_canSearch(bool value);
    // private System.Boolean Pathfinding.IAstarAI.get_canMove()
    // Offset: 0x298E094
    bool Pathfinding_IAstarAI_get_canMove();
    // private System.Void Pathfinding.IAstarAI.set_canMove(System.Boolean value)
    // Offset: 0x298E09C
    void Pathfinding_IAstarAI_set_canMove(bool value);
    // public System.Void GetRemainingPath(System.Collections.Generic.List`1<UnityEngine.Vector3> buffer, out System.Boolean stale)
    // Offset: 0x298E0A8
    void GetRemainingPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer, ByRef<bool> stale);
    // public System.Void OnTargetReached()
    // Offset: 0x298E21C
    void OnTargetReached();
    // protected System.Void CalculateNextRotation(System.Single slowdown, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x298F180
    void CalculateNextRotation(float slowdown, ByRef<::UnityEngine::Quaternion> nextRotation);
    // public System.Boolean get_TargetReached()
    // Offset: 0x298F660
    bool get_TargetReached();
    // public System.Single get_turningSpeed()
    // Offset: 0x298F668
    float get_turningSpeed();
    // public System.Void set_turningSpeed(System.Single value)
    // Offset: 0x298F67C
    void set_turningSpeed(float value);
    // public System.Single get_speed()
    // Offset: 0x298F690
    float get_speed();
    // public System.Void set_speed(System.Single value)
    // Offset: 0x298F698
    void set_speed(float value);
    // public UnityEngine.Vector3 get_targetDirection()
    // Offset: 0x298F6A0
    ::UnityEngine::Vector3 get_targetDirection();
    // public UnityEngine.Vector3 CalculateVelocity(UnityEngine.Vector3 position)
    // Offset: 0x298F7AC
    ::UnityEngine::Vector3 CalculateVelocity(::UnityEngine::Vector3 position);
    // public override System.Void Teleport(UnityEngine.Vector3 newPosition, System.Boolean clearPath)
    // Offset: 0x298DBA4
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::Teleport(UnityEngine.Vector3 newPosition, System.Boolean clearPath)
    void Teleport(::UnityEngine::Vector3 newPosition, bool clearPath);
    // protected override System.Void OnDisable()
    // Offset: 0x298E1B8
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::OnDisable()
    void OnDisable();
    // protected override System.Void OnPathComplete(Pathfinding.Path newPath)
    // Offset: 0x298E220
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::OnPathComplete(Pathfinding.Path newPath)
    void OnPathComplete(::Pathfinding::Path* newPath);
    // protected override System.Void ClearPath()
    // Offset: 0x298E82C
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::ClearPath()
    void ClearPath();
    // protected override System.Void MovementUpdateInternal(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x298E890
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::MovementUpdateInternal(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    void MovementUpdateInternal(float deltaTime, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // protected override UnityEngine.Vector3 ClampToNavmesh(UnityEngine.Vector3 position, out System.Boolean positionChanged)
    // Offset: 0x298F320
    // Implemented from: Pathfinding.AIBase
    // Base method: UnityEngine.Vector3 AIBase::ClampToNavmesh(UnityEngine.Vector3 position, out System.Boolean positionChanged)
    ::UnityEngine::Vector3 ClampToNavmesh(::UnityEngine::Vector3 position, ByRef<bool> positionChanged);
    // protected override System.Int32 OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    // Offset: 0x298F62C
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Int32 AIBase::OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    int OnUpgradeSerializedData(int version, bool unityThread);
    // public System.Void .ctor()
    // Offset: 0x298F7B0
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AIPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AIPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AIPath*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x298F864
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::.cctor()
    static void _cctor();
  }; // Pathfinding.AIPath
  #pragma pack(pop)
  static check_size<sizeof(AIPath), 352 + sizeof(bool)> __Pathfinding_AIPathSizeCheck;
  static_assert(sizeof(AIPath) == 0x161);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AIPath::get_remainingDistance
// Il2CppName: get_remainingDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_remainingDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_remainingDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_reachedDestination
// Il2CppName: get_reachedDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_reachedDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_reachedDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_reachedEndOfPath
// Il2CppName: get_reachedEndOfPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_reachedEndOfPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_reachedEndOfPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::set_reachedEndOfPath
// Il2CppName: set_reachedEndOfPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(bool)>(&Pathfinding::AIPath::set_reachedEndOfPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "set_reachedEndOfPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_hasPath
// Il2CppName: get_hasPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_hasPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_hasPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_pathPending
// Il2CppName: get_pathPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_pathPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_pathPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_steeringTarget
// Il2CppName: get_steeringTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_steeringTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_steeringTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_get_radius
// Il2CppName: Pathfinding.IAstarAI.get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::Pathfinding_IAstarAI_get_radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_set_radius
// Il2CppName: Pathfinding.IAstarAI.set_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float)>(&Pathfinding::AIPath::Pathfinding_IAstarAI_set_radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.set_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_get_height
// Il2CppName: Pathfinding.IAstarAI.get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::Pathfinding_IAstarAI_get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_set_height
// Il2CppName: Pathfinding.IAstarAI.set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float)>(&Pathfinding::AIPath::Pathfinding_IAstarAI_set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_get_maxSpeed
// Il2CppName: Pathfinding.IAstarAI.get_maxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::Pathfinding_IAstarAI_get_maxSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.get_maxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_set_maxSpeed
// Il2CppName: Pathfinding.IAstarAI.set_maxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float)>(&Pathfinding::AIPath::Pathfinding_IAstarAI_set_maxSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.set_maxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_get_canSearch
// Il2CppName: Pathfinding.IAstarAI.get_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::Pathfinding_IAstarAI_get_canSearch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.get_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_set_canSearch
// Il2CppName: Pathfinding.IAstarAI.set_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(bool)>(&Pathfinding::AIPath::Pathfinding_IAstarAI_set_canSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.set_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_get_canMove
// Il2CppName: Pathfinding.IAstarAI.get_canMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::Pathfinding_IAstarAI_get_canMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.get_canMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Pathfinding_IAstarAI_set_canMove
// Il2CppName: Pathfinding.IAstarAI.set_canMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(bool)>(&Pathfinding::AIPath::Pathfinding_IAstarAI_set_canMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Pathfinding.IAstarAI.set_canMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::GetRemainingPath
// Il2CppName: GetRemainingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ByRef<bool>)>(&Pathfinding::AIPath::GetRemainingPath)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* stale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "GetRemainingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, stale});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::OnTargetReached
// Il2CppName: OnTargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::OnTargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "OnTargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::CalculateNextRotation
// Il2CppName: CalculateNextRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::AIPath::CalculateNextRotation)> {
  static const MethodInfo* get() {
    static auto* slowdown = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "CalculateNextRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slowdown, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_TargetReached
// Il2CppName: get_TargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_TargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_TargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_turningSpeed
// Il2CppName: get_turningSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_turningSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_turningSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::set_turningSpeed
// Il2CppName: set_turningSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float)>(&Pathfinding::AIPath::set_turningSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "set_turningSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_speed
// Il2CppName: get_speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_speed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::set_speed
// Il2CppName: set_speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float)>(&Pathfinding::AIPath::set_speed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "set_speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::get_targetDirection
// Il2CppName: get_targetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::get_targetDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "get_targetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::CalculateVelocity
// Il2CppName: CalculateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIPath::*)(::UnityEngine::Vector3)>(&Pathfinding::AIPath::CalculateVelocity)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "CalculateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::Teleport
// Il2CppName: Teleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(::UnityEngine::Vector3, bool)>(&Pathfinding::AIPath::Teleport)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* clearPath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "Teleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition, clearPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(::Pathfinding::Path*)>(&Pathfinding::AIPath::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* newPath = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::ClearPath
// Il2CppName: ClearPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)()>(&Pathfinding::AIPath::ClearPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "ClearPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::MovementUpdateInternal
// Il2CppName: MovementUpdateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIPath::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::AIPath::MovementUpdateInternal)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "MovementUpdateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::ClampToNavmesh
// Il2CppName: ClampToNavmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIPath::*)(::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::AIPath::ClampToNavmesh)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* positionChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "ClampToNavmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, positionChanged});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::OnUpgradeSerializedData
// Il2CppName: OnUpgradeSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::AIPath::*)(int, bool)>(&Pathfinding::AIPath::OnUpgradeSerializedData)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* unityThread = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), "OnUpgradeSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, unityThread});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::AIPath::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::AIPath::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIPath*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
