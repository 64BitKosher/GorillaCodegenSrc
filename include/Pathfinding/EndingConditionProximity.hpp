// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ABPathEndingCondition
#include "Pathfinding/ABPathEndingCondition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ABPath
  class ABPath;
  // Forward declaring type: PathNode
  class PathNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: EndingConditionProximity
  class EndingConditionProximity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EndingConditionProximity);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EndingConditionProximity*, "Pathfinding", "EndingConditionProximity");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EndingConditionProximity
  // [TokenAttribute] Offset: FFFFFFFF
  class EndingConditionProximity : public ::Pathfinding::ABPathEndingCondition {
    public:
    public:
    // public System.Single maxDistance
    // Size: 0x4
    // Offset: 0x20
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // public System.Void .ctor(Pathfinding.ABPath p, System.Single maxDistance)
    // Offset: 0x2A03D14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EndingConditionProximity* New_ctor(::Pathfinding::ABPath* p, float maxDistance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EndingConditionProximity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EndingConditionProximity*, creationType>(p, maxDistance)));
    }
    // public override System.Boolean TargetFound(Pathfinding.PathNode node)
    // Offset: 0x2A03D40
    // Implemented from: Pathfinding.ABPathEndingCondition
    // Base method: System.Boolean ABPathEndingCondition::TargetFound(Pathfinding.PathNode node)
    bool TargetFound(::Pathfinding::PathNode* node);
  }; // Pathfinding.EndingConditionProximity
  #pragma pack(pop)
  static check_size<sizeof(EndingConditionProximity), 32 + sizeof(float)> __Pathfinding_EndingConditionProximitySizeCheck;
  static_assert(sizeof(EndingConditionProximity) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EndingConditionProximity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::EndingConditionProximity::TargetFound
// Il2CppName: TargetFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::EndingConditionProximity::*)(::Pathfinding::PathNode*)>(&Pathfinding::EndingConditionProximity::TargetFound)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EndingConditionProximity*), "TargetFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
