// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.EuclideanEmbedding
#include "Pathfinding/EuclideanEmbedding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2*, "Pathfinding", "EuclideanEmbedding/<>c__DisplayClass20_2");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_2
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class EuclideanEmbedding::$$c__DisplayClass20_2 : public ::Il2CppObject {
    public:
    public:
    // public System.UInt32 costOffset
    // Size: 0x4
    // Offset: 0x10
    uint costOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: costOffset and: CS$$$8__locals2
    char __padding0[0x4] = {};
    // public Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_1 CS$<>8__locals2
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1* CS$$$8__locals2;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1*) == 0x8);
    // public System.Action`1<Pathfinding.GraphNode> <>9__3
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::Pathfinding::GraphNode*>* $$9__3;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::GraphNode*>*) == 0x8);
    public:
    // Get instance field reference: public System.UInt32 costOffset
    [[deprecated("Use field access instead!")]] uint& dyn_costOffset();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_1 CS$<>8__locals2
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_1*& dyn_CS$$$8__locals2();
    // Get instance field reference: public System.Action`1<Pathfinding.GraphNode> <>9__3
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::GraphNode*>*& dyn_$$9__3();
    // public System.Void .ctor()
    // Offset: 0x29E9C58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EuclideanEmbedding::$$c__DisplayClass20_2* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EuclideanEmbedding::$$c__DisplayClass20_2*, creationType>()));
    }
    // System.Void <RecalculateCosts>b__3(Pathfinding.GraphNode node)
    // Offset: 0x29E9C60
    void $RecalculateCosts$b__3(::Pathfinding::GraphNode* node);
  }; // Pathfinding.EuclideanEmbedding/<>c__DisplayClass20_2
  #pragma pack(pop)
  static check_size<sizeof(EuclideanEmbedding::$$c__DisplayClass20_2), 32 + sizeof(::System::Action_1<::Pathfinding::GraphNode*>*)> __Pathfinding_EuclideanEmbedding_$$c__DisplayClass20_2SizeCheck;
  static_assert(sizeof(EuclideanEmbedding::$$c__DisplayClass20_2) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2::$RecalculateCosts$b__3
// Il2CppName: <RecalculateCosts>b__3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2::*)(::Pathfinding::GraphNode*)>(&Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2::$RecalculateCosts$b__3)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding::$$c__DisplayClass20_2*), "<RecalculateCosts>b__3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
