// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: LocalSpaceGraph
  class LocalSpaceGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::LocalSpaceGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::LocalSpaceGraph*, "Pathfinding", "LocalSpaceGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.LocalSpaceGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class LocalSpaceGraph : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    public:
    // private UnityEngine.Matrix4x4 originalMatrix
    // Size: 0x40
    // Offset: 0x24
    ::UnityEngine::Matrix4x4 originalMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // Padding between fields: originalMatrix and: transformation
    char __padding0[0x4] = {};
    // private Pathfinding.Util.GraphTransform <transformation>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Util::GraphTransform* transformation;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GraphTransform*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Matrix4x4 originalMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_originalMatrix();
    // Get instance field reference: private Pathfinding.Util.GraphTransform <transformation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GraphTransform*& dyn_$transformation$k__BackingField();
    // public Pathfinding.Util.GraphTransform get_transformation()
    // Offset: 0x29BBE38
    ::Pathfinding::Util::GraphTransform* get_transformation();
    // private System.Void set_transformation(Pathfinding.Util.GraphTransform value)
    // Offset: 0x29BBE40
    void set_transformation(::Pathfinding::Util::GraphTransform* value);
    // private System.Void Start()
    // Offset: 0x29BBE48
    void Start();
    // public System.Void Refresh()
    // Offset: 0x29BBEC0
    void Refresh();
    // public System.Void .ctor()
    // Offset: 0x29BBFE4
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalSpaceGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::LocalSpaceGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalSpaceGraph*, creationType>()));
    }
  }; // Pathfinding.LocalSpaceGraph
  #pragma pack(pop)
  static check_size<sizeof(LocalSpaceGraph), 104 + sizeof(::Pathfinding::Util::GraphTransform*)> __Pathfinding_LocalSpaceGraphSizeCheck;
  static_assert(sizeof(LocalSpaceGraph) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::LocalSpaceGraph::get_transformation
// Il2CppName: get_transformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::LocalSpaceGraph::*)()>(&Pathfinding::LocalSpaceGraph::get_transformation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LocalSpaceGraph*), "get_transformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LocalSpaceGraph::set_transformation
// Il2CppName: set_transformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LocalSpaceGraph::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::LocalSpaceGraph::set_transformation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LocalSpaceGraph*), "set_transformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::LocalSpaceGraph::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LocalSpaceGraph::*)()>(&Pathfinding::LocalSpaceGraph::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LocalSpaceGraph*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LocalSpaceGraph::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::LocalSpaceGraph::*)()>(&Pathfinding::LocalSpaceGraph::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::LocalSpaceGraph*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::LocalSpaceGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
