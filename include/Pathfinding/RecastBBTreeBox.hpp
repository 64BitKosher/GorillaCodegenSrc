// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RecastMeshObj
  class RecastMeshObj;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RecastBBTreeBox
  class RecastBBTreeBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RecastBBTreeBox);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RecastBBTreeBox*, "Pathfinding", "RecastBBTreeBox");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RecastBBTreeBox
  // [TokenAttribute] Offset: FFFFFFFF
  class RecastBBTreeBox : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Rect rect
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public Pathfinding.RecastMeshObj mesh
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::RecastMeshObj* mesh;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastMeshObj*) == 0x8);
    // public Pathfinding.RecastBBTreeBox c1
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::RecastBBTreeBox* c1;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastBBTreeBox*) == 0x8);
    // public Pathfinding.RecastBBTreeBox c2
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::RecastBBTreeBox* c2;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastBBTreeBox*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Rect rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
    // Get instance field reference: public Pathfinding.RecastMeshObj mesh
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastMeshObj*& dyn_mesh();
    // Get instance field reference: public Pathfinding.RecastBBTreeBox c1
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastBBTreeBox*& dyn_c1();
    // Get instance field reference: public Pathfinding.RecastBBTreeBox c2
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastBBTreeBox*& dyn_c2();
    // public System.Void .ctor(Pathfinding.RecastMeshObj mesh)
    // Offset: 0x29ED9BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecastBBTreeBox* New_ctor(::Pathfinding::RecastMeshObj* mesh) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RecastBBTreeBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecastBBTreeBox*, creationType>(mesh)));
    }
    // public System.Boolean Contains(UnityEngine.Vector3 p)
    // Offset: 0x29EDA7C
    bool Contains(::UnityEngine::Vector3 p);
  }; // Pathfinding.RecastBBTreeBox
  #pragma pack(pop)
  static check_size<sizeof(RecastBBTreeBox), 48 + sizeof(::Pathfinding::RecastBBTreeBox*)> __Pathfinding_RecastBBTreeBoxSizeCheck;
  static_assert(sizeof(RecastBBTreeBox) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RecastBBTreeBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RecastBBTreeBox::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RecastBBTreeBox::*)(::UnityEngine::Vector3)>(&Pathfinding::RecastBBTreeBox::Contains)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastBBTreeBox*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
