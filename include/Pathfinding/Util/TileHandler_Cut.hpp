// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.TileHandler
#include "Pathfinding/Util/TileHandler.hpp"
// Including type: Pathfinding.IntRect
#include "Pathfinding/IntRect.hpp"
// Including type: Pathfinding.Int2
#include "Pathfinding/Int2.hpp"
// Including type: Pathfinding.ClipperLib.IntPoint
#include "Pathfinding/ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::TileHandler::Cut);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::TileHandler::Cut*, "Pathfinding.Util", "TileHandler/Cut");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.TileHandler/Cut
  // [TokenAttribute] Offset: FFFFFFFF
  class TileHandler::Cut : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.IntRect bounds
    // Size: 0x10
    // Offset: 0x10
    ::Pathfinding::IntRect bounds;
    // Field size check
    static_assert(sizeof(::Pathfinding::IntRect) == 0x10);
    // public Pathfinding.Int2 boundsY
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Int2 boundsY;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int2) == 0x8);
    // public System.Boolean isDual
    // Size: 0x1
    // Offset: 0x28
    bool isDual;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean cutsAddedGeom
    // Size: 0x1
    // Offset: 0x29
    bool cutsAddedGeom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cutsAddedGeom and: contour
    char __padding3[0x6] = {};
    // public System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> contour
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* contour;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.IntRect bounds
    [[deprecated("Use field access instead!")]] ::Pathfinding::IntRect& dyn_bounds();
    // Get instance field reference: public Pathfinding.Int2 boundsY
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int2& dyn_boundsY();
    // Get instance field reference: public System.Boolean isDual
    [[deprecated("Use field access instead!")]] bool& dyn_isDual();
    // Get instance field reference: public System.Boolean cutsAddedGeom
    [[deprecated("Use field access instead!")]] bool& dyn_cutsAddedGeom();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> contour
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*& dyn_contour();
    // public System.Void .ctor()
    // Offset: 0x2A30CAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TileHandler::Cut* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::TileHandler::Cut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TileHandler::Cut*, creationType>()));
    }
  }; // Pathfinding.Util.TileHandler/Cut
  #pragma pack(pop)
  static check_size<sizeof(TileHandler::Cut), 48 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*)> __Pathfinding_Util_TileHandler_CutSizeCheck;
  static_assert(sizeof(TileHandler::Cut) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::Cut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
