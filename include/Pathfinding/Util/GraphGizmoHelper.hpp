// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.IAstarPooledObject
#include "Pathfinding/Util/IAstarPooledObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Pathfinding.Util.RetainedGizmos/Hasher
#include "Pathfinding/Util/RetainedGizmos_Hasher.hpp"
// Including type: Pathfinding.GraphDebugMode
#include "Pathfinding/GraphDebugMode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphGizmoHelper
  class GraphGizmoHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::GraphGizmoHelper);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::GraphGizmoHelper*, "Pathfinding.Util", "GraphGizmoHelper");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.GraphGizmoHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphGizmoHelper : public ::Il2CppObject/*, public ::Pathfinding::Util::IAstarPooledObject, public ::System::IDisposable*/ {
    public:
    public:
    // private Pathfinding.Util.RetainedGizmos/Hasher <hasher>k__BackingField
    // Size: 0x18
    // Offset: 0x10
    ::Pathfinding::Util::RetainedGizmos::Hasher hasher;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::RetainedGizmos::Hasher) == 0x18);
    // private Pathfinding.Util.RetainedGizmos gizmos
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Util::RetainedGizmos* gizmos;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::RetainedGizmos*) == 0x8);
    // private Pathfinding.PathHandler debugData
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::PathHandler* debugData;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    // private System.UInt16 debugPathID
    // Size: 0x2
    // Offset: 0x38
    uint16_t debugPathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: debugPathID and: debugMode
    char __padding3[0x2] = {};
    // private Pathfinding.GraphDebugMode debugMode
    // Size: 0x4
    // Offset: 0x3C
    ::Pathfinding::GraphDebugMode debugMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphDebugMode) == 0x4);
    // private System.Boolean showSearchTree
    // Size: 0x1
    // Offset: 0x40
    bool showSearchTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showSearchTree and: debugFloor
    char __padding5[0x3] = {};
    // private System.Single debugFloor
    // Size: 0x4
    // Offset: 0x44
    float debugFloor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single debugRoof
    // Size: 0x4
    // Offset: 0x48
    float debugRoof;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: debugRoof and: builder
    char __padding7[0x4] = {};
    // private Pathfinding.Util.RetainedGizmos/Builder <builder>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::Util::RetainedGizmos::Builder* builder;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::RetainedGizmos::Builder*) == 0x8);
    // private UnityEngine.Vector3 drawConnectionStart
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 drawConnectionStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Color drawConnectionColor
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Color drawConnectionColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: drawConnectionColor and: drawConnection
    char __padding10[0x4] = {};
    // private readonly System.Action`1<Pathfinding.GraphNode> drawConnection
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_1<::Pathfinding::GraphNode*>* drawConnection;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::GraphNode*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::Util::IAstarPooledObject
    operator ::Pathfinding::Util::IAstarPooledObject() noexcept {
      return *reinterpret_cast<::Pathfinding::Util::IAstarPooledObject*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Pathfinding.Util.RetainedGizmos/Hasher <hasher>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::RetainedGizmos::Hasher& dyn_$hasher$k__BackingField();
    // Get instance field reference: private Pathfinding.Util.RetainedGizmos gizmos
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::RetainedGizmos*& dyn_gizmos();
    // Get instance field reference: private Pathfinding.PathHandler debugData
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_debugData();
    // Get instance field reference: private System.UInt16 debugPathID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_debugPathID();
    // Get instance field reference: private Pathfinding.GraphDebugMode debugMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphDebugMode& dyn_debugMode();
    // Get instance field reference: private System.Boolean showSearchTree
    [[deprecated("Use field access instead!")]] bool& dyn_showSearchTree();
    // Get instance field reference: private System.Single debugFloor
    [[deprecated("Use field access instead!")]] float& dyn_debugFloor();
    // Get instance field reference: private System.Single debugRoof
    [[deprecated("Use field access instead!")]] float& dyn_debugRoof();
    // Get instance field reference: private Pathfinding.Util.RetainedGizmos/Builder <builder>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::RetainedGizmos::Builder*& dyn_$builder$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 drawConnectionStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_drawConnectionStart();
    // Get instance field reference: private UnityEngine.Color drawConnectionColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_drawConnectionColor();
    // Get instance field reference: private readonly System.Action`1<Pathfinding.GraphNode> drawConnection
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::GraphNode*>*& dyn_drawConnection();
    // public Pathfinding.Util.RetainedGizmos/Hasher get_hasher()
    // Offset: 0x2A31C60
    ::Pathfinding::Util::RetainedGizmos::Hasher get_hasher();
    // private System.Void set_hasher(Pathfinding.Util.RetainedGizmos/Hasher value)
    // Offset: 0x2A31C74
    void set_hasher(::Pathfinding::Util::RetainedGizmos::Hasher value);
    // public Pathfinding.Util.RetainedGizmos/Builder get_builder()
    // Offset: 0x2A31C8C
    ::Pathfinding::Util::RetainedGizmos::Builder* get_builder();
    // private System.Void set_builder(Pathfinding.Util.RetainedGizmos/Builder value)
    // Offset: 0x2A31C94
    void set_builder(::Pathfinding::Util::RetainedGizmos::Builder* value);
    // public System.Void .ctor()
    // Offset: 0x2A31C9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphGizmoHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::GraphGizmoHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphGizmoHelper*, creationType>()));
    }
    // public System.Void Init(AstarPath active, Pathfinding.Util.RetainedGizmos/Hasher hasher, Pathfinding.Util.RetainedGizmos gizmos)
    // Offset: 0x2A31D2C
    void Init(::GlobalNamespace::AstarPath* active, ::Pathfinding::Util::RetainedGizmos::Hasher hasher, ::Pathfinding::Util::RetainedGizmos* gizmos);
    // public System.Void OnEnterPool()
    // Offset: 0x2A31E4C
    void OnEnterPool();
    // public System.Void DrawConnections(Pathfinding.GraphNode node)
    // Offset: 0x2A31ECC
    void DrawConnections(::Pathfinding::GraphNode* node);
    // private System.Void DrawConnection(Pathfinding.GraphNode other)
    // Offset: 0x2A3256C
    void DrawConnection(::Pathfinding::GraphNode* other);
    // public UnityEngine.Color NodeColor(Pathfinding.GraphNode node)
    // Offset: 0x2A32080
    ::UnityEngine::Color NodeColor(::Pathfinding::GraphNode* node);
    // static public System.Boolean InSearchTree(Pathfinding.GraphNode node, Pathfinding.PathHandler handler, System.UInt16 pathID)
    // Offset: 0x2A32044
    static bool InSearchTree(::Pathfinding::GraphNode* node, ::Pathfinding::PathHandler* handler, uint16_t pathID);
    // public System.Void DrawWireTriangle(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Color color)
    // Offset: 0x2A3261C
    void DrawWireTriangle(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Color color);
    // public System.Void DrawTriangles(UnityEngine.Vector3[] vertices, UnityEngine.Color[] colors, System.Int32 numTriangles)
    // Offset: 0x2A326EC
    void DrawTriangles(::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<::UnityEngine::Color> colors, int numTriangles);
    // public System.Void DrawWireTriangles(UnityEngine.Vector3[] vertices, UnityEngine.Color[] colors, System.Int32 numTriangles)
    // Offset: 0x2A32984
    void DrawWireTriangles(::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<::UnityEngine::Color> colors, int numTriangles);
    // public System.Void Submit()
    // Offset: 0x2A32A7C
    void Submit();
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A32AF4
    void System_IDisposable_Dispose();
  }; // Pathfinding.Util.GraphGizmoHelper
  #pragma pack(pop)
  static check_size<sizeof(GraphGizmoHelper), 120 + sizeof(::System::Action_1<::Pathfinding::GraphNode*>*)> __Pathfinding_Util_GraphGizmoHelperSizeCheck;
  static_assert(sizeof(GraphGizmoHelper) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::get_hasher
// Il2CppName: get_hasher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::RetainedGizmos::Hasher (Pathfinding::Util::GraphGizmoHelper::*)()>(&Pathfinding::Util::GraphGizmoHelper::get_hasher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "get_hasher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::set_hasher
// Il2CppName: set_hasher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::Pathfinding::Util::RetainedGizmos::Hasher)>(&Pathfinding::Util::GraphGizmoHelper::set_hasher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos/Hasher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "set_hasher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::get_builder
// Il2CppName: get_builder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::RetainedGizmos::Builder* (Pathfinding::Util::GraphGizmoHelper::*)()>(&Pathfinding::Util::GraphGizmoHelper::get_builder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "get_builder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::set_builder
// Il2CppName: set_builder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::Pathfinding::Util::RetainedGizmos::Builder*)>(&Pathfinding::Util::GraphGizmoHelper::set_builder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos/Builder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "set_builder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::GlobalNamespace::AstarPath*, ::Pathfinding::Util::RetainedGizmos::Hasher, ::Pathfinding::Util::RetainedGizmos*)>(&Pathfinding::Util::GraphGizmoHelper::Init)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("", "AstarPath")->byval_arg;
    static auto* hasher = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos/Hasher")->byval_arg;
    static auto* gizmos = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active, hasher, gizmos});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::OnEnterPool
// Il2CppName: OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)()>(&Pathfinding::Util::GraphGizmoHelper::OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::DrawConnections
// Il2CppName: DrawConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Util::GraphGizmoHelper::DrawConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "DrawConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::DrawConnection
// Il2CppName: DrawConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Util::GraphGizmoHelper::DrawConnection)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "DrawConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::NodeColor
// Il2CppName: NodeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Pathfinding::Util::GraphGizmoHelper::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Util::GraphGizmoHelper::NodeColor)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "NodeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::InSearchTree
// Il2CppName: InSearchTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::GraphNode*, ::Pathfinding::PathHandler*, uint16_t)>(&Pathfinding::Util::GraphGizmoHelper::InSearchTree)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    static auto* pathID = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "InSearchTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, handler, pathID});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::DrawWireTriangle
// Il2CppName: DrawWireTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color)>(&Pathfinding::Util::GraphGizmoHelper::DrawWireTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "DrawWireTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::DrawTriangles
// Il2CppName: DrawTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Color>, int)>(&Pathfinding::Util::GraphGizmoHelper::DrawTriangles)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* numTriangles = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "DrawTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, colors, numTriangles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::DrawWireTriangles
// Il2CppName: DrawWireTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Color>, int)>(&Pathfinding::Util::GraphGizmoHelper::DrawWireTriangles)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* numTriangles = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "DrawWireTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, colors, numTriangles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::Submit
// Il2CppName: Submit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)()>(&Pathfinding::Util::GraphGizmoHelper::Submit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "Submit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphGizmoHelper::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphGizmoHelper::*)()>(&Pathfinding::Util::GraphGizmoHelper::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphGizmoHelper*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
