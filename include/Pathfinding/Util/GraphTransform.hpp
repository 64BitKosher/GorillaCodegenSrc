// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.IMovementPlane
#include "Pathfinding/Util/IMovementPlane.hpp"
// Including type: Pathfinding.Util.ITransform
#include "Pathfinding/Util/ITransform.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::GraphTransform);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::GraphTransform*, "Pathfinding.Util", "GraphTransform");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.GraphTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphTransform : public ::Il2CppObject/*, public ::Pathfinding::Util::IMovementPlane, public ::Pathfinding::Util::ITransform*/ {
    public:
    public:
    // public readonly System.Boolean identity
    // Size: 0x1
    // Offset: 0x10
    bool identity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean onlyTranslational
    // Size: 0x1
    // Offset: 0x11
    bool onlyTranslational;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean isXY
    // Size: 0x1
    // Offset: 0x12
    bool isXY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean isXZ
    // Size: 0x1
    // Offset: 0x13
    bool isXZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly UnityEngine.Matrix4x4 matrix
    // Size: 0x40
    // Offset: 0x14
    ::UnityEngine::Matrix4x4 matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private readonly UnityEngine.Matrix4x4 inverseMatrix
    // Size: 0x40
    // Offset: 0x54
    ::UnityEngine::Matrix4x4 inverseMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private readonly UnityEngine.Vector3 up
    // Size: 0xC
    // Offset: 0x94
    ::UnityEngine::Vector3 up;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly UnityEngine.Vector3 translation
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 translation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly Pathfinding.Int3 i3translation
    // Size: 0xC
    // Offset: 0xAC
    ::Pathfinding::Int3 i3translation;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int3) == 0xC);
    // private readonly UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private readonly UnityEngine.Quaternion inverseRotation
    // Size: 0x10
    // Offset: 0xC8
    ::UnityEngine::Quaternion inverseRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::Util::IMovementPlane
    operator ::Pathfinding::Util::IMovementPlane() noexcept {
      return *reinterpret_cast<::Pathfinding::Util::IMovementPlane*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::Util::ITransform
    operator ::Pathfinding::Util::ITransform() noexcept {
      return *reinterpret_cast<::Pathfinding::Util::ITransform*>(this);
    }
    // Get static field: static public readonly Pathfinding.Util.GraphTransform identityTransform
    static ::Pathfinding::Util::GraphTransform* _get_identityTransform();
    // Set static field: static public readonly Pathfinding.Util.GraphTransform identityTransform
    static void _set_identityTransform(::Pathfinding::Util::GraphTransform* value);
    // Get instance field reference: public readonly System.Boolean identity
    [[deprecated("Use field access instead!")]] bool& dyn_identity();
    // Get instance field reference: public readonly System.Boolean onlyTranslational
    [[deprecated("Use field access instead!")]] bool& dyn_onlyTranslational();
    // Get instance field reference: private readonly System.Boolean isXY
    [[deprecated("Use field access instead!")]] bool& dyn_isXY();
    // Get instance field reference: private readonly System.Boolean isXZ
    [[deprecated("Use field access instead!")]] bool& dyn_isXZ();
    // Get instance field reference: private readonly UnityEngine.Matrix4x4 matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_matrix();
    // Get instance field reference: private readonly UnityEngine.Matrix4x4 inverseMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_inverseMatrix();
    // Get instance field reference: private readonly UnityEngine.Vector3 up
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_up();
    // Get instance field reference: private readonly UnityEngine.Vector3 translation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_translation();
    // Get instance field reference: private readonly Pathfinding.Int3 i3translation
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int3& dyn_i3translation();
    // Get instance field reference: private readonly UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: private readonly UnityEngine.Quaternion inverseRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_inverseRotation();
    // public System.Void .ctor(UnityEngine.Matrix4x4 matrix)
    // Offset: 0x2A2981C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphTransform* New_ctor(::UnityEngine::Matrix4x4 matrix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::GraphTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphTransform*, creationType>(matrix)));
    }
    // public UnityEngine.Vector3 WorldUpAtGraphPosition(UnityEngine.Vector3 point)
    // Offset: 0x2A29CF8
    ::UnityEngine::Vector3 WorldUpAtGraphPosition(::UnityEngine::Vector3 point);
    // static private System.Boolean MatrixIsTranslational(UnityEngine.Matrix4x4 matrix)
    // Offset: 0x2A29BD0
    static bool MatrixIsTranslational(::UnityEngine::Matrix4x4 matrix);
    // public UnityEngine.Vector3 Transform(UnityEngine.Vector3 point)
    // Offset: 0x2A29D04
    ::UnityEngine::Vector3 Transform(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 point)
    // Offset: 0x2A29CB8
    ::UnityEngine::Vector3 TransformVector(::UnityEngine::Vector3 point);
    // public System.Void Transform(Pathfinding.Int3[] arr)
    // Offset: 0x2A29D5C
    void Transform(::ArrayW<::Pathfinding::Int3> arr);
    // public System.Void Transform(UnityEngine.Vector3[] arr)
    // Offset: 0x2A29EC4
    void Transform(::ArrayW<::UnityEngine::Vector3> arr);
    // public UnityEngine.Vector3 InverseTransform(UnityEngine.Vector3 point)
    // Offset: 0x2A29FE4
    ::UnityEngine::Vector3 InverseTransform(::UnityEngine::Vector3 point);
    // public Pathfinding.Int3 InverseTransform(Pathfinding.Int3 point)
    // Offset: 0x2A2A03C
    ::Pathfinding::Int3 InverseTransform(::Pathfinding::Int3 point);
    // public System.Void InverseTransform(Pathfinding.Int3[] arr)
    // Offset: 0x2A2A0B8
    void InverseTransform(::ArrayW<::Pathfinding::Int3> arr);
    // public UnityEngine.Bounds Transform(UnityEngine.Bounds bounds)
    // Offset: 0x2A2A328
    ::UnityEngine::Bounds Transform(::UnityEngine::Bounds bounds);
    // public UnityEngine.Bounds InverseTransform(UnityEngine.Bounds bounds)
    // Offset: 0x2A2A6A0
    ::UnityEngine::Bounds InverseTransform(::UnityEngine::Bounds bounds);
    // private UnityEngine.Vector2 Pathfinding.Util.IMovementPlane.ToPlane(UnityEngine.Vector3 point)
    // Offset: 0x2A2AA18
    ::UnityEngine::Vector2 Pathfinding_Util_IMovementPlane_ToPlane(::UnityEngine::Vector3 point);
    // private UnityEngine.Vector2 Pathfinding.Util.IMovementPlane.ToPlane(UnityEngine.Vector3 point, out System.Single elevation)
    // Offset: 0x2A2AA68
    ::UnityEngine::Vector2 Pathfinding_Util_IMovementPlane_ToPlane(::UnityEngine::Vector3 point, ByRef<float> elevation);
    // private UnityEngine.Vector3 Pathfinding.Util.IMovementPlane.ToWorld(UnityEngine.Vector2 point, System.Single elevation)
    // Offset: 0x2A2AAB4
    ::UnityEngine::Vector3 Pathfinding_Util_IMovementPlane_ToWorld(::UnityEngine::Vector2 point, float elevation);
    // static private System.Void .cctor()
    // Offset: 0x2A2AAD8
    static void _cctor();
  }; // Pathfinding.Util.GraphTransform
  #pragma pack(pop)
  static check_size<sizeof(GraphTransform), 200 + sizeof(::UnityEngine::Quaternion)> __Pathfinding_Util_GraphTransformSizeCheck;
  static_assert(sizeof(GraphTransform) == 0xD8);
  // static public Pathfinding.Util.GraphTransform op_Multiply(Pathfinding.Util.GraphTransform lhs, UnityEngine.Matrix4x4 rhs)
  // Offset: 0x2A2A178
  ::Pathfinding::Util::GraphTransform* operator*(::Pathfinding::Util::GraphTransform& lhs, const ::UnityEngine::Matrix4x4& rhs);
  // static public Pathfinding.Util.GraphTransform op_Multiply(UnityEngine.Matrix4x4 lhs, Pathfinding.Util.GraphTransform rhs)
  // Offset: 0x2A2A248
  ::Pathfinding::Util::GraphTransform* operator*(const ::UnityEngine::Matrix4x4& lhs, ::Pathfinding::Util::GraphTransform& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::WorldUpAtGraphPosition
// Il2CppName: WorldUpAtGraphPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::GraphTransform::WorldUpAtGraphPosition)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "WorldUpAtGraphPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::MatrixIsTranslational
// Il2CppName: MatrixIsTranslational
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Matrix4x4)>(&Pathfinding::Util::GraphTransform::MatrixIsTranslational)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "MatrixIsTranslational", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::GraphTransform::Transform)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::TransformVector
// Il2CppName: TransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::GraphTransform::TransformVector)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "TransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphTransform::*)(::ArrayW<::Pathfinding::Int3>)>(&Pathfinding::Util::GraphTransform::Transform)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphTransform::*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::Util::GraphTransform::Transform)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::GraphTransform::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::Util::GraphTransform::*)(::Pathfinding::Int3)>(&Pathfinding::Util::GraphTransform::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::GraphTransform::*)(::ArrayW<::Pathfinding::Int3>)>(&Pathfinding::Util::GraphTransform::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Bounds)>(&Pathfinding::Util::GraphTransform::Transform)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Bounds)>(&Pathfinding::Util::GraphTransform::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToPlane
// Il2CppName: Pathfinding.Util.IMovementPlane.ToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToPlane)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Pathfinding.Util.IMovementPlane.ToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToPlane
// Il2CppName: Pathfinding.Util.IMovementPlane.ToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector3, ByRef<float>)>(&Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToPlane)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* elevation = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Pathfinding.Util.IMovementPlane.ToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, elevation});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToWorld
// Il2CppName: Pathfinding.Util.IMovementPlane.ToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::GraphTransform::*)(::UnityEngine::Vector2, float)>(&Pathfinding::Util::GraphTransform::Pathfinding_Util_IMovementPlane_ToWorld)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elevation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), "Pathfinding.Util.IMovementPlane.ToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, elevation});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Util::GraphTransform::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::GraphTransform*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Pathfinding::Util::GraphTransform::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
