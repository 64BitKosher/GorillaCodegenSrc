// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: ITransform
  class ITransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::ITransform);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::ITransform*, "Pathfinding.Util", "ITransform");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.ITransform
  // [TokenAttribute] Offset: FFFFFFFF
  class ITransform {
    public:
    // public UnityEngine.Vector3 Transform(UnityEngine.Vector3 position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 Transform(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 InverseTransform(UnityEngine.Vector3 position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 InverseTransform(::UnityEngine::Vector3 position);
  }; // Pathfinding.Util.ITransform
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::ITransform::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::ITransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::ITransform::Transform)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::ITransform*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::ITransform::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::ITransform::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::ITransform::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::ITransform*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
