// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Skipping declaration: <Run>d__7 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: ParallelWorkQueue`1<T>
  template<typename T>
  class ParallelWorkQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Pathfinding::Util::ParallelWorkQueue_1, "Pathfinding.Util", "ParallelWorkQueue`1");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // WARNING Size may be invalid!
  // Autogenerated type: Pathfinding.Util.ParallelWorkQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ParallelWorkQueue_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7<T>
    class $Run$d__7;
    // WARNING Size may be invalid!
    // Autogenerated type: Pathfinding.Util.ParallelWorkQueue`1/<Run>d__7
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $Run$d__7 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<int>, public ::System::Collections::Generic::IEnumerator_1<int>*/ {
      public:
      using declaring_type = ParallelWorkQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<Run>d__7";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 <>2__current
      // Size: 0x4
      // Offset: 0x0
      int $$2__current;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 <>l__initialThreadId
      // Size: 0x4
      // Offset: 0x0
      int $$l__initialThreadId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public Pathfinding.Util.ParallelWorkQueue`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Pathfinding::Util::ParallelWorkQueue_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Pathfinding::Util::ParallelWorkQueue_1<T>*) == 0x8);
      // private System.Int32 progressTimeoutMillis
      // Size: 0x4
      // Offset: 0x0
      int progressTimeoutMillis;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 <>3__progressTimeoutMillis
      // Size: 0x4
      // Offset: 0x0
      int $$3__progressTimeoutMillis;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<int>
      operator ::System::Collections::Generic::IEnumerable_1<int>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<int>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<int>
      operator ::System::Collections::Generic::IEnumerator_1<int>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<int>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>2__current
      [[deprecated("Use field access instead!")]] int& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>l__initialThreadId
      [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_$$l__initialThreadId");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Pathfinding.Util.ParallelWorkQueue`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Pathfinding::Util::ParallelWorkQueue_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Pathfinding::Util::ParallelWorkQueue_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 progressTimeoutMillis
      [[deprecated("Use field access instead!")]] int& dyn_progressTimeoutMillis() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_progressTimeoutMillis");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressTimeoutMillis"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 <>3__progressTimeoutMillis
      [[deprecated("Use field access instead!")]] int& dyn_$$3__progressTimeoutMillis() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::dyn_$$3__progressTimeoutMillis");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__progressTimeoutMillis"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ParallelWorkQueue_1<T>::$Run$d__7* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ParallelWorkQueue_1<T>::$Run$d__7*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Int32 System.Collections.Generic.IEnumerator<System.Int32>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int System_Collections_Generic_IEnumerator$System_Int32$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.Collections.Generic.IEnumerator<System.Int32>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerator`1<System.Int32> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<int>* System_Collections_Generic_IEnumerable$System_Int32$_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<int>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::$Run$d__7::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Util::ParallelWorkQueue_1<T>::$Run$d__7*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
    }; // Pathfinding.Util.ParallelWorkQueue`1/<Run>d__7
    // Could not write size check! Type: Pathfinding.Util.ParallelWorkQueue`1/<Run>d__7 is generic, or has no fields that are valid for size checks!
    public:
    // public System.Action`2<T,System.Int32> action
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_2<T, int>* action;
    // Field size check
    static_assert(sizeof(::System::Action_2<T, int>*) == 0x8);
    // public readonly System.Int32 threadCount
    // Size: 0x4
    // Offset: 0x0
    int threadCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.Queue`1<T> queue
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<T>* queue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<T>*) == 0x8);
    // private readonly System.Int32 initialCount
    // Size: 0x4
    // Offset: 0x0
    int initialCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.ManualResetEvent[] waitEvents
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::System::Threading::ManualResetEvent*> waitEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Threading::ManualResetEvent*>) == 0x8);
    // private System.Exception innerException
    // Size: 0x8
    // Offset: 0x0
    ::System::Exception* innerException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.Action`2<T,System.Int32> action
    [[deprecated("Use field access instead!")]] ::System::Action_2<T, int>*& dyn_action() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_action");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
      return *reinterpret_cast<::System::Action_2<T, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public readonly System.Int32 threadCount
    [[deprecated("Use field access instead!")]] int& dyn_threadCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_threadCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "threadCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Queue`1<T> queue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<T>*& dyn_queue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_queue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queue"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 initialCount
    [[deprecated("Use field access instead!")]] int& dyn_initialCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_initialCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.ManualResetEvent[] waitEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::ManualResetEvent*>& dyn_waitEvents() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_waitEvents");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitEvents"))->offset;
      return *reinterpret_cast<::ArrayW<::System::Threading::ManualResetEvent*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Exception innerException
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_innerException() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::dyn_innerException");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "innerException"))->offset;
      return *reinterpret_cast<::System::Exception**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Collections.Generic.Queue`1<T> queue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelWorkQueue_1<T>* New_ctor(::System::Collections::Generic::Queue_1<T>* queue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelWorkQueue_1<T>*, creationType>(queue)));
    }
    // public System.Collections.Generic.IEnumerable`1<System.Int32> Run(System.Int32 progressTimeoutMillis)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<int>* Run(int progressTimeoutMillis) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::Run");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progressTimeoutMillis)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<int>*, false>(this, ___internal__method, progressTimeoutMillis);
    }
    // private System.Void RunTask(System.Int32 threadIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RunTask(int threadIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::RunTask");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(threadIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, threadIndex);
    }
    // private System.Void <Run>b__7_0(System.Object threadIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $Run$b__7_0(::Il2CppObject* threadIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::ParallelWorkQueue_1::<Run>b__7_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(threadIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, threadIndex);
    }
  }; // Pathfinding.Util.ParallelWorkQueue`1
  // Could not write size check! Type: Pathfinding.Util.ParallelWorkQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
