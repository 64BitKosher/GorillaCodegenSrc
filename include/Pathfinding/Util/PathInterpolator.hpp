// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: IMovementPlane
  class IMovementPlane;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: PathInterpolator
  class PathInterpolator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::PathInterpolator);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::PathInterpolator*, "Pathfinding.Util", "PathInterpolator");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.PathInterpolator
  // [TokenAttribute] Offset: FFFFFFFF
  class PathInterpolator : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> path
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Single distanceToSegmentStart
    // Size: 0x4
    // Offset: 0x18
    float distanceToSegmentStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentDistance
    // Size: 0x4
    // Offset: 0x1C
    float currentDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentSegmentLength
    // Size: 0x4
    // Offset: 0x20
    float currentSegmentLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single totalDistance
    // Size: 0x4
    // Offset: 0x24
    float totalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <segmentIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int segmentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> path
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_path();
    // Get instance field reference: private System.Single distanceToSegmentStart
    [[deprecated("Use field access instead!")]] float& dyn_distanceToSegmentStart();
    // Get instance field reference: private System.Single currentDistance
    [[deprecated("Use field access instead!")]] float& dyn_currentDistance();
    // Get instance field reference: private System.Single currentSegmentLength
    [[deprecated("Use field access instead!")]] float& dyn_currentSegmentLength();
    // Get instance field reference: private System.Single totalDistance
    [[deprecated("Use field access instead!")]] float& dyn_totalDistance();
    // Get instance field reference: private System.Int32 <segmentIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$segmentIndex$k__BackingField();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x2A28354
    ::UnityEngine::Vector3 get_position();
    // public UnityEngine.Vector3 get_endPoint()
    // Offset: 0x2A2843C
    ::UnityEngine::Vector3 get_endPoint();
    // public UnityEngine.Vector3 get_tangent()
    // Offset: 0x2A284A0
    ::UnityEngine::Vector3 get_tangent();
    // public System.Single get_remainingDistance()
    // Offset: 0x2A28538
    float get_remainingDistance();
    // public System.Void set_remainingDistance(System.Single value)
    // Offset: 0x2A28548
    void set_remainingDistance(float value);
    // public System.Single get_distance()
    // Offset: 0x2A28630
    float get_distance();
    // public System.Void set_distance(System.Single value)
    // Offset: 0x2A28554
    void set_distance(float value);
    // public System.Int32 get_segmentIndex()
    // Offset: 0x2A28638
    int get_segmentIndex();
    // private System.Void set_segmentIndex(System.Int32 value)
    // Offset: 0x2A28640
    void set_segmentIndex(int value);
    // public System.Boolean get_valid()
    // Offset: 0x2A28648
    bool get_valid();
    // public System.Void GetRemainingPath(System.Collections.Generic.List`1<UnityEngine.Vector3> buffer)
    // Offset: 0x2A28658
    void GetRemainingPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer);
    // public System.Void SetPath(System.Collections.Generic.List`1<UnityEngine.Vector3> path)
    // Offset: 0x2A28818
    void SetPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path);
    // public System.Void MoveToSegment(System.Int32 index, System.Single fractionAlongSegment)
    // Offset: 0x2A28A74
    void MoveToSegment(int index, float fractionAlongSegment);
    // public System.Void MoveToClosestPoint(UnityEngine.Vector3 point)
    // Offset: 0x2A28B94
    void MoveToClosestPoint(::UnityEngine::Vector3 point);
    // public System.Void MoveToLocallyClosestPoint(UnityEngine.Vector3 point, System.Boolean allowForwards, System.Boolean allowBackwards)
    // Offset: 0x2A28D94
    void MoveToLocallyClosestPoint(::UnityEngine::Vector3 point, bool allowForwards, bool allowBackwards);
    // public System.Void MoveToCircleIntersection2D(UnityEngine.Vector3 circleCenter3D, System.Single radius, Pathfinding.Util.IMovementPlane transform)
    // Offset: 0x2A291F0
    void MoveToCircleIntersection2D(::UnityEngine::Vector3 circleCenter3D, float radius, ::Pathfinding::Util::IMovementPlane* transform);
    // protected System.Void PrevSegment()
    // Offset: 0x2A295E0
    void PrevSegment();
    // protected System.Void NextSegment()
    // Offset: 0x2A296F0
    void NextSegment();
    // public System.Void .ctor()
    // Offset: 0x2A29808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathInterpolator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::PathInterpolator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathInterpolator*, creationType>()));
    }
  }; // Pathfinding.Util.PathInterpolator
  #pragma pack(pop)
  static check_size<sizeof(PathInterpolator), 40 + sizeof(int)> __Pathfinding_Util_PathInterpolatorSizeCheck;
  static_assert(sizeof(PathInterpolator) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_endPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_tangent
// Il2CppName: get_tangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_tangent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_tangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_remainingDistance
// Il2CppName: get_remainingDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_remainingDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_remainingDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::set_remainingDistance
// Il2CppName: set_remainingDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(float)>(&Pathfinding::Util::PathInterpolator::set_remainingDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "set_remainingDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_distance
// Il2CppName: get_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_distance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::set_distance
// Il2CppName: set_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(float)>(&Pathfinding::Util::PathInterpolator::set_distance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "set_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_segmentIndex
// Il2CppName: get_segmentIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_segmentIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_segmentIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::set_segmentIndex
// Il2CppName: set_segmentIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(int)>(&Pathfinding::Util::PathInterpolator::set_segmentIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "set_segmentIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::get_valid
// Il2CppName: get_valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::get_valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "get_valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::GetRemainingPath
// Il2CppName: GetRemainingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::Util::PathInterpolator::GetRemainingPath)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "GetRemainingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::Util::PathInterpolator::SetPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::MoveToSegment
// Il2CppName: MoveToSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(int, float)>(&Pathfinding::Util::PathInterpolator::MoveToSegment)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fractionAlongSegment = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "MoveToSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, fractionAlongSegment});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::MoveToClosestPoint
// Il2CppName: MoveToClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(::UnityEngine::Vector3)>(&Pathfinding::Util::PathInterpolator::MoveToClosestPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "MoveToClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::MoveToLocallyClosestPoint
// Il2CppName: MoveToLocallyClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(::UnityEngine::Vector3, bool, bool)>(&Pathfinding::Util::PathInterpolator::MoveToLocallyClosestPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* allowForwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* allowBackwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "MoveToLocallyClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, allowForwards, allowBackwards});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::MoveToCircleIntersection2D
// Il2CppName: MoveToCircleIntersection2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)(::UnityEngine::Vector3, float, ::Pathfinding::Util::IMovementPlane*)>(&Pathfinding::Util::PathInterpolator::MoveToCircleIntersection2D)> {
  static const MethodInfo* get() {
    static auto* circleCenter3D = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "IMovementPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "MoveToCircleIntersection2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{circleCenter3D, radius, transform});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::PrevSegment
// Il2CppName: PrevSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::PrevSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "PrevSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::NextSegment
// Il2CppName: NextSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::PathInterpolator::*)()>(&Pathfinding::Util::PathInterpolator::NextSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::PathInterpolator*), "NextSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::PathInterpolator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
