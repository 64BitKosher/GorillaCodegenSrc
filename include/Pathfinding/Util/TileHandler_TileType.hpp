// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.TileHandler
#include "Pathfinding/Util/TileHandler.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::TileHandler::TileType);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::TileHandler::TileType*, "Pathfinding.Util", "TileHandler/TileType");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.TileHandler/TileType
  // [TokenAttribute] Offset: FFFFFFFF
  class TileHandler::TileType : public ::Il2CppObject {
    public:
    public:
    // private Pathfinding.Int3[] verts
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Pathfinding::Int3> verts;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::Int3>) == 0x8);
    // private System.Int32[] tris
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> tris;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private Pathfinding.Int3 offset
    // Size: 0xC
    // Offset: 0x20
    ::Pathfinding::Int3 offset;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int3) == 0xC);
    // private System.Int32 lastYOffset
    // Size: 0x4
    // Offset: 0x2C
    int lastYOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastRotation
    // Size: 0x4
    // Offset: 0x30
    int lastRotation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 width
    // Size: 0x4
    // Offset: 0x34
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 depth
    // Size: 0x4
    // Offset: 0x38
    int depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Int32[] Rotations
    static ::ArrayW<int> _get_Rotations();
    // Set static field: static private readonly System.Int32[] Rotations
    static void _set_Rotations(::ArrayW<int> value);
    // Get instance field reference: private Pathfinding.Int3[] verts
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::Int3>& dyn_verts();
    // Get instance field reference: private System.Int32[] tris
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_tris();
    // Get instance field reference: private Pathfinding.Int3 offset
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int3& dyn_offset();
    // Get instance field reference: private System.Int32 lastYOffset
    [[deprecated("Use field access instead!")]] int& dyn_lastYOffset();
    // Get instance field reference: private System.Int32 lastRotation
    [[deprecated("Use field access instead!")]] int& dyn_lastRotation();
    // Get instance field reference: private System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: private System.Int32 depth
    [[deprecated("Use field access instead!")]] int& dyn_depth();
    // public System.Int32 get_Width()
    // Offset: 0x2A30954
    int get_Width();
    // public System.Int32 get_Depth()
    // Offset: 0x2A3095C
    int get_Depth();
    // public System.Void .ctor(Pathfinding.Int3[] sourceVerts, System.Int32[] sourceTris, Pathfinding.Int3 tileSize, Pathfinding.Int3 centerOffset, System.Int32 width, System.Int32 depth)
    // Offset: 0x2A2B9C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TileHandler::TileType* New_ctor(::ArrayW<::Pathfinding::Int3> sourceVerts, ::ArrayW<int> sourceTris, ::Pathfinding::Int3 tileSize, ::Pathfinding::Int3 centerOffset, int width, int depth) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::TileHandler::TileType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TileHandler::TileType*, creationType>(sourceVerts, sourceTris, tileSize, centerOffset, width, depth)));
    }
    // public System.Void .ctor(UnityEngine.Mesh source, Pathfinding.Int3 tileSize, Pathfinding.Int3 centerOffset, System.Int32 width, System.Int32 depth)
    // Offset: 0x2A2B624
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TileHandler::TileType* New_ctor(::UnityEngine::Mesh* source, ::Pathfinding::Int3 tileSize, ::Pathfinding::Int3 centerOffset, int width, int depth) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::TileHandler::TileType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TileHandler::TileType*, creationType>(source, tileSize, centerOffset, width, depth)));
    }
    // public System.Void Load(out Pathfinding.Int3[] verts, out System.Int32[] tris, System.Int32 rotation, System.Int32 yoffset)
    // Offset: 0x2A30964
    void Load(ByRef<::ArrayW<::Pathfinding::Int3>> verts, ByRef<::ArrayW<int>> tris, int rotation, int yoffset);
    // static private System.Void .cctor()
    // Offset: 0x2A30C0C
    static void _cctor();
  }; // Pathfinding.Util.TileHandler/TileType
  #pragma pack(pop)
  static check_size<sizeof(TileHandler::TileType), 56 + sizeof(int)> __Pathfinding_Util_TileHandler_TileTypeSizeCheck;
  static_assert(sizeof(TileHandler::TileType) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::TileHandler::TileType::*)()>(&Pathfinding::Util::TileHandler::TileType::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler::TileType*), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::TileHandler::TileType::*)()>(&Pathfinding::Util::TileHandler::TileType::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler::TileType*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::TileType::*)(ByRef<::ArrayW<::Pathfinding::Int3>>, ByRef<::ArrayW<int>>, int, int)>(&Pathfinding::Util::TileHandler::TileType::Load)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->this_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yoffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler::TileType*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, tris, rotation, yoffset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::TileType::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Util::TileHandler::TileType::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler::TileType*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
