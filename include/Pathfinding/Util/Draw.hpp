// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: Draw
  class Draw;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::Draw);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::Draw*, "Pathfinding.Util", "Draw");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.Draw
  // [TokenAttribute] Offset: FFFFFFFF
  class Draw : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean gizmos
    // Size: 0x1
    // Offset: 0x10
    bool gizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gizmos and: matrix
    char __padding0[0x3] = {};
    // private UnityEngine.Matrix4x4 matrix
    // Size: 0x40
    // Offset: 0x14
    ::UnityEngine::Matrix4x4 matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get static field: static public readonly Pathfinding.Util.Draw Debug
    static ::Pathfinding::Util::Draw* _get_Debug();
    // Set static field: static public readonly Pathfinding.Util.Draw Debug
    static void _set_Debug(::Pathfinding::Util::Draw* value);
    // Get static field: static public readonly Pathfinding.Util.Draw Gizmos
    static ::Pathfinding::Util::Draw* _get_Gizmos();
    // Set static field: static public readonly Pathfinding.Util.Draw Gizmos
    static void _set_Gizmos(::Pathfinding::Util::Draw* value);
    // Get instance field reference: private System.Boolean gizmos
    [[deprecated("Use field access instead!")]] bool& dyn_gizmos();
    // Get instance field reference: private UnityEngine.Matrix4x4 matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_matrix();
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x2A26F00
    void SetColor(::UnityEngine::Color color);
    // public System.Void Polyline(System.Collections.Generic.List`1<UnityEngine.Vector3> points, UnityEngine.Color color, System.Boolean cycle)
    // Offset: 0x2A26F9C
    void Polyline(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, ::UnityEngine::Color color, bool cycle);
    // public System.Void Line(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Color color)
    // Offset: 0x2A27110
    void Line(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Color color);
    // public System.Void CircleXZ(UnityEngine.Vector3 center, System.Single radius, UnityEngine.Color color, System.Single startAngle, System.Single endAngle)
    // Offset: 0x2A27258
    void CircleXZ(::UnityEngine::Vector3 center, float radius, ::UnityEngine::Color color, float startAngle, float endAngle);
    // public System.Void Cylinder(UnityEngine.Vector3 position, UnityEngine.Vector3 up, System.Single height, System.Single radius, UnityEngine.Color color)
    // Offset: 0x2A27394
    void Cylinder(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 up, float height, float radius, ::UnityEngine::Color color);
    // public System.Void CrossXZ(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single size)
    // Offset: 0x2A27728
    void CrossXZ(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float size);
    // public System.Void Bezier(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Color color)
    // Offset: 0x2A2785C
    void Bezier(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x2A27BB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Draw* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::Draw::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Draw*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2A27C18
    static void _cctor();
  }; // Pathfinding.Util.Draw
  #pragma pack(pop)
  static check_size<sizeof(Draw), 20 + sizeof(::UnityEngine::Matrix4x4)> __Pathfinding_Util_DrawSizeCheck;
  static_assert(sizeof(Draw) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::Draw::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Color)>(&Pathfinding::Util::Draw::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::Polyline
// Il2CppName: Polyline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::UnityEngine::Color, bool)>(&Pathfinding::Util::Draw::Polyline)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* cycle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "Polyline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, color, cycle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::Line
// Il2CppName: Line
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color)>(&Pathfinding::Util::Draw::Line)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "Line", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::CircleXZ
// Il2CppName: CircleXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Vector3, float, ::UnityEngine::Color, float, float)>(&Pathfinding::Util::Draw::CircleXZ)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* startAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "CircleXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, color, startAngle, endAngle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::Cylinder
// Il2CppName: Cylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ::UnityEngine::Color)>(&Pathfinding::Util::Draw::Cylinder)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "Cylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, up, height, radius, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::CrossXZ
// Il2CppName: CrossXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&Pathfinding::Util::Draw::CrossXZ)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "CrossXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, size});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::Bezier
// Il2CppName: Bezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::Draw::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color)>(&Pathfinding::Util::Draw::Bezier)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), "Bezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, color});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Draw::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::Draw::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Util::Draw::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Draw*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
