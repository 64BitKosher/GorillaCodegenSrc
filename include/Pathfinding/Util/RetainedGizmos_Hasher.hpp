// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Util.RetainedGizmos
#include "Pathfinding/Util/RetainedGizmos.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::RetainedGizmos::Hasher, "Pathfinding.Util", "RetainedGizmos/Hasher");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Util.RetainedGizmos/Hasher
  // [TokenAttribute] Offset: FFFFFFFF
  struct RetainedGizmos::Hasher/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt64 hash
    // Size: 0x8
    // Offset: 0x0
    uint64_t hash;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Boolean includePathSearchInfo
    // Size: 0x1
    // Offset: 0x8
    bool includePathSearchInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean includeAreaInfo
    // Size: 0x1
    // Offset: 0x9
    bool includeAreaInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: includeAreaInfo and: debugData
    char __padding2[0x6] = {};
    // private Pathfinding.PathHandler debugData
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::PathHandler* debugData;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    public:
    // Creating value type constructor for type: Hasher
    constexpr Hasher(uint64_t hash_ = {}, bool includePathSearchInfo_ = {}, bool includeAreaInfo_ = {}, ::Pathfinding::PathHandler* debugData_ = {}) noexcept : hash{hash_}, includePathSearchInfo{includePathSearchInfo_}, includeAreaInfo{includeAreaInfo_}, debugData{debugData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt64 hash
    [[deprecated("Use field access instead!")]] uint64_t& dyn_hash();
    // Get instance field reference: private System.Boolean includePathSearchInfo
    [[deprecated("Use field access instead!")]] bool& dyn_includePathSearchInfo();
    // Get instance field reference: private System.Boolean includeAreaInfo
    [[deprecated("Use field access instead!")]] bool& dyn_includeAreaInfo();
    // Get instance field reference: private Pathfinding.PathHandler debugData
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_debugData();
    // public System.Void .ctor(AstarPath active)
    // Offset: 0x2A33658
    Hasher(::GlobalNamespace::AstarPath* active);
    // public System.Void AddHash(System.Int32 hash)
    // Offset: 0x2A32BC0
    void AddHash(int hash);
    // public System.Void HashNode(Pathfinding.GraphNode node)
    // Offset: 0x2A337C8
    void HashNode(::Pathfinding::GraphNode* node);
    // public System.UInt64 get_Hash()
    // Offset: 0x2A338CC
    uint64_t get_Hash();
  }; // Pathfinding.Util.RetainedGizmos/Hasher
  #pragma pack(pop)
  static check_size<sizeof(RetainedGizmos::Hasher), 16 + sizeof(::Pathfinding::PathHandler*)> __Pathfinding_Util_RetainedGizmos_HasherSizeCheck;
  static_assert(sizeof(RetainedGizmos::Hasher) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::RetainedGizmos::Hasher::Hasher
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::RetainedGizmos::Hasher::AddHash
// Il2CppName: AddHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::RetainedGizmos::Hasher::*)(int)>(&Pathfinding::Util::RetainedGizmos::Hasher::AddHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::RetainedGizmos::Hasher), "AddHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::RetainedGizmos::Hasher::HashNode
// Il2CppName: HashNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::RetainedGizmos::Hasher::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Util::RetainedGizmos::Hasher::HashNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::RetainedGizmos::Hasher), "HashNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::RetainedGizmos::Hasher::get_Hash
// Il2CppName: get_Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Pathfinding::Util::RetainedGizmos::Hasher::*)()>(&Pathfinding::Util::RetainedGizmos::Hasher::get_Hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::RetainedGizmos::Hasher), "get_Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
