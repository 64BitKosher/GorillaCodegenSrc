// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Int2
#include "Pathfinding/Int2.hpp"
// Including type: Pathfinding.Voxels.Int3PolygonClipper
#include "Pathfinding/Voxels/Int3PolygonClipper.hpp"
// Including type: Pathfinding.ClipperLib.IntPoint
#include "Pathfinding/ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GridLookup`1<T>
  template<typename T>
  class GridLookup_1;
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshBase
  class NavmeshBase;
  // Forward declaring type: NavmeshClipper
  class NavmeshClipper;
  // Forward declaring type: NavmeshTile
  class NavmeshTile;
  // Forward declaring type: IntRect
  struct IntRect;
  // Forward declaring type: NavmeshCut
  class NavmeshCut;
  // Forward declaring type: IWorkItemContext
  class IWorkItemContext;
}
// Forward declaring namespace: Pathfinding::ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: Clipper
  class Clipper;
  // Forward declaring type: PolyTree
  class PolyTree;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: Polygon
  class Polygon;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: TileHandler
  class TileHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::TileHandler);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::TileHandler*, "Pathfinding.Util", "TileHandler");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.TileHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class TileHandler : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Util::TileHandler::TileType
    class TileType;
    // Nested type: ::Pathfinding::Util::TileHandler::CutMode
    struct CutMode;
    // Nested type: ::Pathfinding::Util::TileHandler::Cut
    class Cut;
    // Nested type: ::Pathfinding::Util::TileHandler::CuttingResult
    struct CuttingResult;
    // Nested type: ::Pathfinding::Util::TileHandler::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: ::Pathfinding::Util::TileHandler::$$c__DisplayClass41_0
    class $$c__DisplayClass41_0;
    public:
    // public readonly Pathfinding.NavmeshBase graph
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::NavmeshBase* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshBase*) == 0x8);
    // private readonly System.Int32 tileXCount
    // Size: 0x4
    // Offset: 0x18
    int tileXCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 tileZCount
    // Size: 0x4
    // Offset: 0x1C
    int tileZCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly Pathfinding.ClipperLib.Clipper clipper
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::ClipperLib::Clipper* clipper;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::Clipper*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int2,System.Int32> cached_Int2_int_dict
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, int>* cached_Int2_int_dict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, int>*) == 0x8);
    // private readonly Pathfinding.Util.TileHandler/TileType[] activeTileTypes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Pathfinding::Util::TileHandler::TileType*> activeTileTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::Util::TileHandler::TileType*>) == 0x8);
    // private readonly System.Int32[] activeTileRotations
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> activeTileRotations;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] activeTileOffsets
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> activeTileOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Boolean[] reloadedInBatch
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<bool> reloadedInBatch;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // public readonly Pathfinding.Util.GridLookup`1<Pathfinding.NavmeshClipper> cuts
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::Util::GridLookup_1<::Pathfinding::NavmeshClipper*>* cuts;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GridLookup_1<::Pathfinding::NavmeshClipper*>*) == 0x8);
    // private System.Int32 batchDepth
    // Size: 0x4
    // Offset: 0x58
    int batchDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: batchDepth and: simpleClipper
    char __padding10[0x4] = {};
    // private readonly Pathfinding.Voxels.Int3PolygonClipper simpleClipper
    // Size: 0x10
    // Offset: 0x60
    ::Pathfinding::Voxels::Int3PolygonClipper simpleClipper;
    // Field size check
    static_assert(sizeof(::Pathfinding::Voxels::Int3PolygonClipper) == 0x10);
    public:
    // Get instance field reference: public readonly Pathfinding.NavmeshBase graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshBase*& dyn_graph();
    // Get instance field reference: private readonly System.Int32 tileXCount
    [[deprecated("Use field access instead!")]] int& dyn_tileXCount();
    // Get instance field reference: private readonly System.Int32 tileZCount
    [[deprecated("Use field access instead!")]] int& dyn_tileZCount();
    // Get instance field reference: private readonly Pathfinding.ClipperLib.Clipper clipper
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::Clipper*& dyn_clipper();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Pathfinding.Int2,System.Int32> cached_Int2_int_dict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, int>*& dyn_cached_Int2_int_dict();
    // Get instance field reference: private readonly Pathfinding.Util.TileHandler/TileType[] activeTileTypes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::Util::TileHandler::TileType*>& dyn_activeTileTypes();
    // Get instance field reference: private readonly System.Int32[] activeTileRotations
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_activeTileRotations();
    // Get instance field reference: private readonly System.Int32[] activeTileOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_activeTileOffsets();
    // Get instance field reference: private readonly System.Boolean[] reloadedInBatch
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_reloadedInBatch();
    // Get instance field reference: public readonly Pathfinding.Util.GridLookup`1<Pathfinding.NavmeshClipper> cuts
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GridLookup_1<::Pathfinding::NavmeshClipper*>*& dyn_cuts();
    // Get instance field reference: private System.Int32 batchDepth
    [[deprecated("Use field access instead!")]] int& dyn_batchDepth();
    // Get instance field reference: private readonly Pathfinding.Voxels.Int3PolygonClipper simpleClipper
    [[deprecated("Use field access instead!")]] ::Pathfinding::Voxels::Int3PolygonClipper& dyn_simpleClipper();
    // private System.Boolean get_isBatching()
    // Offset: 0x2A2AB8C
    bool get_isBatching();
    // public System.Boolean get_isValid()
    // Offset: 0x2A2AB9C
    bool get_isValid();
    // public System.Void .ctor(Pathfinding.NavmeshBase graph)
    // Offset: 0x2A2ABF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TileHandler* New_ctor(::Pathfinding::NavmeshBase* graph) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::TileHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TileHandler*, creationType>(graph)));
    }
    // public System.Void OnRecalculatedTiles(Pathfinding.NavmeshTile[] recalculatedTiles)
    // Offset: 0x2A2AEB8
    void OnRecalculatedTiles(::ArrayW<::Pathfinding::NavmeshTile*> recalculatedTiles);
    // public System.Int32 GetActiveRotation(Pathfinding.Int2 p)
    // Offset: 0x2A2B4E8
    int GetActiveRotation(::Pathfinding::Int2 p);
    // public Pathfinding.Util.TileHandler/TileType RegisterTileType(UnityEngine.Mesh source, Pathfinding.Int3 centerOffset, System.Int32 width, System.Int32 depth)
    // Offset: 0x2A2B524
    ::Pathfinding::Util::TileHandler::TileType* RegisterTileType(::UnityEngine::Mesh* source, ::Pathfinding::Int3 centerOffset, int width, int depth);
    // public System.Void CreateTileTypesFromGraph()
    // Offset: 0x2A2B8DC
    void CreateTileTypesFromGraph();
    // private System.Void UpdateTileType(Pathfinding.NavmeshTile tile)
    // Offset: 0x2A2AF70
    void UpdateTileType(::Pathfinding::NavmeshTile* tile);
    // public System.Void StartBatchLoad()
    // Offset: 0x2A2B1CC
    void StartBatchLoad();
    // public System.Void EndBatchLoad()
    // Offset: 0x2A2B364
    void EndBatchLoad();
    // private Pathfinding.Util.TileHandler/CuttingResult CutPoly(Pathfinding.Int3[] verts, System.Int32[] tris, Pathfinding.Int3[] extraShape, Pathfinding.Util.GraphTransform graphTransform, Pathfinding.IntRect tiles, Pathfinding.Util.TileHandler/CutMode mode, System.Int32 perturbate)
    // Offset: 0x2A2BCB8
    ::Pathfinding::Util::TileHandler::CuttingResult CutPoly(::ArrayW<::Pathfinding::Int3> verts, ::ArrayW<int> tris, ::ArrayW<::Pathfinding::Int3> extraShape, ::Pathfinding::Util::GraphTransform* graphTransform, ::Pathfinding::IntRect tiles, ::Pathfinding::Util::TileHandler::CutMode mode, int perturbate);
    // static private System.Collections.Generic.List`1<Pathfinding.Util.TileHandler/Cut> PrepareNavmeshCutsForCutting(System.Collections.Generic.List`1<Pathfinding.NavmeshCut> navmeshCuts, Pathfinding.Util.GraphTransform transform, Pathfinding.IntRect cutSpaceBounds, System.Int32 perturbate, System.Boolean anyNavmeshAdds)
    // Offset: 0x2A2DF8C
    static ::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>* PrepareNavmeshCutsForCutting(::System::Collections::Generic::List_1<::Pathfinding::NavmeshCut*>* navmeshCuts, ::Pathfinding::Util::GraphTransform* transform, ::Pathfinding::IntRect cutSpaceBounds, int perturbate, bool anyNavmeshAdds);
    // static private System.Void PoolPolygon(Pathfinding.Poly2Tri.Polygon polygon, System.Collections.Generic.Stack`1<Pathfinding.Poly2Tri.Polygon> pool)
    // Offset: 0x2A2EF3C
    static void PoolPolygon(::Pathfinding::Poly2Tri::Polygon* polygon, ::System::Collections::Generic::Stack_1<::Pathfinding::Poly2Tri::Polygon*>* pool);
    // private System.Void CutAll(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> poly, System.Collections.Generic.List`1<System.Int32> intersectingCutIndices, System.Collections.Generic.List`1<Pathfinding.Util.TileHandler/Cut> cuts, Pathfinding.ClipperLib.PolyTree result)
    // Offset: 0x2A2EA7C
    void CutAll(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* poly, ::System::Collections::Generic::List_1<int>* intersectingCutIndices, ::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>* cuts, ::Pathfinding::ClipperLib::PolyTree* result);
    // private System.Void CutDual(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> poly, System.Collections.Generic.List`1<System.Int32> tmpIntersectingCuts, System.Collections.Generic.List`1<Pathfinding.Util.TileHandler/Cut> cuts, System.Boolean hasDual, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> intermediateResult, Pathfinding.ClipperLib.PolyTree result)
    // Offset: 0x2A2EBC8
    void CutDual(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* poly, ::System::Collections::Generic::List_1<int>* tmpIntersectingCuts, ::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>* cuts, bool hasDual, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* intermediateResult, ::Pathfinding::ClipperLib::PolyTree* result);
    // private System.Void CutExtra(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> poly, System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> extraClipShape, Pathfinding.ClipperLib.PolyTree result)
    // Offset: 0x2A2EE9C
    void CutExtra(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* poly, ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* extraClipShape, ::Pathfinding::ClipperLib::PolyTree* result);
    // private System.Int32 ClipAgainstRectangle(Pathfinding.Int3[] clipIn, Pathfinding.Int3[] clipOut, Pathfinding.Int2 size)
    // Offset: 0x2A2E9A0
    int ClipAgainstRectangle(::ArrayW<::Pathfinding::Int3> clipIn, ::ArrayW<::Pathfinding::Int3> clipOut, ::Pathfinding::Int2 size);
    // static private System.Void CopyMesh(Pathfinding.Int3[] vertices, System.Int32[] triangles, System.Collections.Generic.List`1<Pathfinding.Int3> outVertices, System.Collections.Generic.List`1<System.Int32> outTriangles)
    // Offset: 0x2A2E72C
    static void CopyMesh(::ArrayW<::Pathfinding::Int3> vertices, ::ArrayW<int> triangles, ::System::Collections::Generic::List_1<::Pathfinding::Int3>* outVertices, ::System::Collections::Generic::List_1<int>* outTriangles);
    // private System.Void DelaunayRefinement(Pathfinding.Int3[] verts, System.Int32[] tris, ref System.Int32 tCount, System.Boolean delaunay, System.Boolean colinear)
    // Offset: 0x2A2F42C
    void DelaunayRefinement(::ArrayW<::Pathfinding::Int3> verts, ::ArrayW<int> tris, ByRef<int> tCount, bool delaunay, bool colinear);
    // public System.Void ClearTile(System.Int32 x, System.Int32 z)
    // Offset: 0x2A301D8
    void ClearTile(int x, int z);
    // public System.Void ReloadInBounds(UnityEngine.Bounds bounds)
    // Offset: 0x2A30394
    void ReloadInBounds(::UnityEngine::Bounds bounds);
    // public System.Void ReloadInBounds(Pathfinding.IntRect tiles)
    // Offset: 0x2A30400
    void ReloadInBounds(::Pathfinding::IntRect tiles);
    // public System.Void ReloadTile(System.Int32 x, System.Int32 z)
    // Offset: 0x2A2B2C0
    void ReloadTile(int x, int z);
    // public System.Void LoadTile(Pathfinding.Util.TileHandler/TileType tile, System.Int32 x, System.Int32 z, System.Int32 rotation, System.Int32 yoffset)
    // Offset: 0x2A304C8
    void LoadTile(::Pathfinding::Util::TileHandler::TileType* tile, int x, int z, int rotation, int yoffset);
    // private System.Boolean <StartBatchLoad>b__23_0(System.Boolean force)
    // Offset: 0x2A3086C
    bool $StartBatchLoad$b__23_0(bool force);
    // private System.Boolean <EndBatchLoad>b__24_0(Pathfinding.IWorkItemContext ctx, System.Boolean force)
    // Offset: 0x2A30890
    bool $EndBatchLoad$b__24_0(::Pathfinding::IWorkItemContext* ctx, bool force);
  }; // Pathfinding.Util.TileHandler
  #pragma pack(pop)
  static check_size<sizeof(TileHandler), 96 + sizeof(::Pathfinding::Voxels::Int3PolygonClipper)> __Pathfinding_Util_TileHandlerSizeCheck;
  static_assert(sizeof(TileHandler) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::get_isBatching
// Il2CppName: get_isBatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::TileHandler::*)()>(&Pathfinding::Util::TileHandler::get_isBatching)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "get_isBatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::TileHandler::*)()>(&Pathfinding::Util::TileHandler::get_isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::OnRecalculatedTiles
// Il2CppName: OnRecalculatedTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::ArrayW<::Pathfinding::NavmeshTile*>)>(&Pathfinding::Util::TileHandler::OnRecalculatedTiles)> {
  static const MethodInfo* get() {
    static auto* recalculatedTiles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "OnRecalculatedTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recalculatedTiles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::GetActiveRotation
// Il2CppName: GetActiveRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::TileHandler::*)(::Pathfinding::Int2)>(&Pathfinding::Util::TileHandler::GetActiveRotation)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "GetActiveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::RegisterTileType
// Il2CppName: RegisterTileType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::TileHandler::TileType* (Pathfinding::Util::TileHandler::*)(::UnityEngine::Mesh*, ::Pathfinding::Int3, int, int)>(&Pathfinding::Util::TileHandler::RegisterTileType)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* centerOffset = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "RegisterTileType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, centerOffset, width, depth});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CreateTileTypesFromGraph
// Il2CppName: CreateTileTypesFromGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)()>(&Pathfinding::Util::TileHandler::CreateTileTypesFromGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CreateTileTypesFromGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::UpdateTileType
// Il2CppName: UpdateTileType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::Pathfinding::NavmeshTile*)>(&Pathfinding::Util::TileHandler::UpdateTileType)> {
  static const MethodInfo* get() {
    static auto* tile = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "UpdateTileType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tile});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::StartBatchLoad
// Il2CppName: StartBatchLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)()>(&Pathfinding::Util::TileHandler::StartBatchLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "StartBatchLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::EndBatchLoad
// Il2CppName: EndBatchLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)()>(&Pathfinding::Util::TileHandler::EndBatchLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "EndBatchLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CutPoly
// Il2CppName: CutPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::TileHandler::CuttingResult (Pathfinding::Util::TileHandler::*)(::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>, ::ArrayW<::Pathfinding::Int3>, ::Pathfinding::Util::GraphTransform*, ::Pathfinding::IntRect, ::Pathfinding::Util::TileHandler::CutMode, int)>(&Pathfinding::Util::TileHandler::CutPoly)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* extraShape = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* graphTransform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    static auto* tiles = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "TileHandler/CutMode")->byval_arg;
    static auto* perturbate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CutPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, tris, extraShape, graphTransform, tiles, mode, perturbate});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::PrepareNavmeshCutsForCutting
// Il2CppName: PrepareNavmeshCutsForCutting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>* (*)(::System::Collections::Generic::List_1<::Pathfinding::NavmeshCut*>*, ::Pathfinding::Util::GraphTransform*, ::Pathfinding::IntRect, int, bool)>(&Pathfinding::Util::TileHandler::PrepareNavmeshCutsForCutting)> {
  static const MethodInfo* get() {
    static auto* navmeshCuts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshCut")})->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    static auto* cutSpaceBounds = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    static auto* perturbate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* anyNavmeshAdds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "PrepareNavmeshCutsForCutting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navmeshCuts, transform, cutSpaceBounds, perturbate, anyNavmeshAdds});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::PoolPolygon
// Il2CppName: PoolPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::Polygon*, ::System::Collections::Generic::Stack_1<::Pathfinding::Poly2Tri::Polygon*>*)>(&Pathfinding::Util::TileHandler::PoolPolygon)> {
  static const MethodInfo* get() {
    static auto* polygon = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Polygon")->byval_arg;
    static auto* pool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Stack`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Polygon")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "PoolPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polygon, pool});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CutAll
// Il2CppName: CutAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>*, ::Pathfinding::ClipperLib::PolyTree*)>(&Pathfinding::Util::TileHandler::CutAll)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* intersectingCutIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* cuts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Util", "TileHandler/Cut")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CutAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, intersectingCutIndices, cuts, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CutDual
// Il2CppName: CutDual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<::Pathfinding::Util::TileHandler::Cut*>*, bool, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>*, ::Pathfinding::ClipperLib::PolyTree*)>(&Pathfinding::Util::TileHandler::CutDual)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* tmpIntersectingCuts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* cuts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Util", "TileHandler/Cut")})->byval_arg;
    static auto* hasDual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* intermediateResult = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CutDual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, tmpIntersectingCuts, cuts, hasDual, intermediateResult, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CutExtra
// Il2CppName: CutExtra
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::Pathfinding::ClipperLib::PolyTree*)>(&Pathfinding::Util::TileHandler::CutExtra)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* extraClipShape = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CutExtra", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, extraClipShape, result});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::ClipAgainstRectangle
// Il2CppName: ClipAgainstRectangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::TileHandler::*)(::ArrayW<::Pathfinding::Int3>, ::ArrayW<::Pathfinding::Int3>, ::Pathfinding::Int2)>(&Pathfinding::Util::TileHandler::ClipAgainstRectangle)> {
  static const MethodInfo* get() {
    static auto* clipIn = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* clipOut = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "ClipAgainstRectangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipIn, clipOut, size});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::CopyMesh
// Il2CppName: CopyMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>, ::System::Collections::Generic::List_1<::Pathfinding::Int3>*, ::System::Collections::Generic::List_1<int>*)>(&Pathfinding::Util::TileHandler::CopyMesh)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* outVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")})->byval_arg;
    static auto* outTriangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "CopyMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, triangles, outVertices, outTriangles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::DelaunayRefinement
// Il2CppName: DelaunayRefinement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>, ByRef<int>, bool, bool)>(&Pathfinding::Util::TileHandler::DelaunayRefinement)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* delaunay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colinear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "DelaunayRefinement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, tris, tCount, delaunay, colinear});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::ClearTile
// Il2CppName: ClearTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(int, int)>(&Pathfinding::Util::TileHandler::ClearTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "ClearTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::ReloadInBounds
// Il2CppName: ReloadInBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::UnityEngine::Bounds)>(&Pathfinding::Util::TileHandler::ReloadInBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "ReloadInBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::ReloadInBounds
// Il2CppName: ReloadInBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::Pathfinding::IntRect)>(&Pathfinding::Util::TileHandler::ReloadInBounds)> {
  static const MethodInfo* get() {
    static auto* tiles = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "ReloadInBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tiles});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::ReloadTile
// Il2CppName: ReloadTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(int, int)>(&Pathfinding::Util::TileHandler::ReloadTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "ReloadTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::LoadTile
// Il2CppName: LoadTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::TileHandler::*)(::Pathfinding::Util::TileHandler::TileType*, int, int, int, int)>(&Pathfinding::Util::TileHandler::LoadTile)> {
  static const MethodInfo* get() {
    static auto* tile = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "TileHandler/TileType")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yoffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "LoadTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tile, x, z, rotation, yoffset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::$StartBatchLoad$b__23_0
// Il2CppName: <StartBatchLoad>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::TileHandler::*)(bool)>(&Pathfinding::Util::TileHandler::$StartBatchLoad$b__23_0)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "<StartBatchLoad>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::TileHandler::$EndBatchLoad$b__24_0
// Il2CppName: <EndBatchLoad>b__24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::TileHandler::*)(::Pathfinding::IWorkItemContext*, bool)>(&Pathfinding::Util::TileHandler::$EndBatchLoad$b__24_0)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding", "IWorkItemContext")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::TileHandler*), "<EndBatchLoad>b__24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx, force});
  }
};
