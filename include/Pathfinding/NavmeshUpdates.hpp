// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshClipper
  class NavmeshClipper;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshUpdates
  class NavmeshUpdates;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavmeshUpdates);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshUpdates*, "Pathfinding", "NavmeshUpdates");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavmeshUpdates
  // [TokenAttribute] Offset: FFFFFFFF
  class NavmeshUpdates : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::NavmeshUpdates::NavmeshUpdateSettings
    class NavmeshUpdateSettings;
    public:
    // public System.Single updateInterval
    // Size: 0x4
    // Offset: 0x10
    float updateInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastUpdateTime
    // Size: 0x4
    // Offset: 0x14
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single updateInterval
    [[deprecated("Use field access instead!")]] float& dyn_updateInterval();
    // Get instance field reference: private System.Single lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_lastUpdateTime();
    // System.Void OnEnable()
    // Offset: 0x29FB248
    void OnEnable();
    // System.Void OnDisable()
    // Offset: 0x29FB324
    void OnDisable();
    // public System.Void DiscardPending()
    // Offset: 0x29FB400
    void DiscardPending();
    // private System.Void HandleOnEnableCallback(Pathfinding.NavmeshClipper obj)
    // Offset: 0x29FB60C
    void HandleOnEnableCallback(::Pathfinding::NavmeshClipper* obj);
    // private System.Void HandleOnDisableCallback(Pathfinding.NavmeshClipper obj)
    // Offset: 0x29FB808
    void HandleOnDisableCallback(::Pathfinding::NavmeshClipper* obj);
    // System.Void Update()
    // Offset: 0x29FBA40
    void Update();
    // public System.Void ForceUpdate()
    // Offset: 0x29FBFA0
    void ForceUpdate();
    // public System.Void .ctor()
    // Offset: 0x29FC418
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshUpdates* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavmeshUpdates::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshUpdates*, creationType>()));
    }
  }; // Pathfinding.NavmeshUpdates
  #pragma pack(pop)
  static check_size<sizeof(NavmeshUpdates), 20 + sizeof(float)> __Pathfinding_NavmeshUpdatesSizeCheck;
  static_assert(sizeof(NavmeshUpdates) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)()>(&Pathfinding::NavmeshUpdates::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)()>(&Pathfinding::NavmeshUpdates::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::DiscardPending
// Il2CppName: DiscardPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)()>(&Pathfinding::NavmeshUpdates::DiscardPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "DiscardPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::HandleOnEnableCallback
// Il2CppName: HandleOnEnableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)(::Pathfinding::NavmeshClipper*)>(&Pathfinding::NavmeshUpdates::HandleOnEnableCallback)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "HandleOnEnableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::HandleOnDisableCallback
// Il2CppName: HandleOnDisableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)(::Pathfinding::NavmeshClipper*)>(&Pathfinding::NavmeshUpdates::HandleOnDisableCallback)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshClipper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "HandleOnDisableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)()>(&Pathfinding::NavmeshUpdates::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshUpdates::*)()>(&Pathfinding::NavmeshUpdates::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshUpdates*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshUpdates::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
