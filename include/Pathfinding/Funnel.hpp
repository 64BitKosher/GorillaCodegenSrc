// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Skipping declaration: PathPart because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Funnel
  class Funnel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Funnel);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Funnel*, "Pathfinding", "Funnel");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Funnel
  // [TokenAttribute] Offset: FFFFFFFF
  class Funnel : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Funnel::FunnelPortals
    struct FunnelPortals;
    // Nested type: ::Pathfinding::Funnel::PathPart
    struct PathPart;
    // Size: 0x21
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.Funnel/PathPart
    // [TokenAttribute] Offset: FFFFFFFF
    struct PathPart/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 startIndex
      // Size: 0x4
      // Offset: 0x0
      int startIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 endIndex
      // Size: 0x4
      // Offset: 0x4
      int endIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Vector3 startPoint
      // Size: 0xC
      // Offset: 0x8
      ::UnityEngine::Vector3 startPoint;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 endPoint
      // Size: 0xC
      // Offset: 0x14
      ::UnityEngine::Vector3 endPoint;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Boolean isLink
      // Size: 0x1
      // Offset: 0x20
      bool isLink;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: PathPart
      constexpr PathPart(int startIndex_ = {}, int endIndex_ = {}, ::UnityEngine::Vector3 startPoint_ = {}, ::UnityEngine::Vector3 endPoint_ = {}, bool isLink_ = {}) noexcept : startIndex{startIndex_}, endIndex{endIndex_}, startPoint{startPoint_}, endPoint{endPoint_}, isLink{isLink_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 startIndex
      [[deprecated("Use field access instead!")]] int& dyn_startIndex();
      // Get instance field reference: public System.Int32 endIndex
      [[deprecated("Use field access instead!")]] int& dyn_endIndex();
      // Get instance field reference: public UnityEngine.Vector3 startPoint
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPoint();
      // Get instance field reference: public UnityEngine.Vector3 endPoint
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_endPoint();
      // Get instance field reference: public System.Boolean isLink
      [[deprecated("Use field access instead!")]] bool& dyn_isLink();
    }; // Pathfinding.Funnel/PathPart
    #pragma pack(pop)
    static check_size<sizeof(Funnel::PathPart), 32 + sizeof(bool)> __Pathfinding_Funnel_PathPartSizeCheck;
    static_assert(sizeof(Funnel::PathPart) == 0x21);
    // static public System.Collections.Generic.List`1<Pathfinding.Funnel/PathPart> SplitIntoParts(Pathfinding.Path path)
    // Offset: 0x2A07268
    static ::System::Collections::Generic::List_1<::Pathfinding::Funnel::PathPart>* SplitIntoParts(::Pathfinding::Path* path);
    // static public Pathfinding.Funnel/FunnelPortals ConstructFunnelPortals(System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes, Pathfinding.Funnel/PathPart part)
    // Offset: 0x2A0793C
    static ::Pathfinding::Funnel::FunnelPortals ConstructFunnelPortals(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes, ::Pathfinding::Funnel::PathPart part);
    // static public System.Void ShrinkPortals(Pathfinding.Funnel/FunnelPortals portals, System.Single shrink)
    // Offset: 0x2A07F60
    static void ShrinkPortals(::Pathfinding::Funnel::FunnelPortals portals, float shrink);
    // static private System.Boolean UnwrapHelper(UnityEngine.Vector3 portalStart, UnityEngine.Vector3 portalEnd, UnityEngine.Vector3 prevPoint, UnityEngine.Vector3 nextPoint, ref UnityEngine.Quaternion mRot, ref UnityEngine.Vector3 mOffset)
    // Offset: 0x2A08178
    static bool UnwrapHelper(::UnityEngine::Vector3 portalStart, ::UnityEngine::Vector3 portalEnd, ::UnityEngine::Vector3 prevPoint, ::UnityEngine::Vector3 nextPoint, ByRef<::UnityEngine::Quaternion> mRot, ByRef<::UnityEngine::Vector3> mOffset);
    // static public System.Void Unwrap(Pathfinding.Funnel/FunnelPortals funnel, UnityEngine.Vector2[] left, UnityEngine.Vector2[] right)
    // Offset: 0x2A083CC
    static void Unwrap(::Pathfinding::Funnel::FunnelPortals funnel, ::ArrayW<::UnityEngine::Vector2> left, ::ArrayW<::UnityEngine::Vector2> right);
    // static private System.Int32 FixFunnel(UnityEngine.Vector2[] left, UnityEngine.Vector2[] right, System.Int32 numPortals)
    // Offset: 0x2A08914
    static int FixFunnel(::ArrayW<::UnityEngine::Vector2> left, ::ArrayW<::UnityEngine::Vector2> right, int numPortals);
    // static protected UnityEngine.Vector2 ToXZ(UnityEngine.Vector3 p)
    // Offset: 0x2A08A68
    static ::UnityEngine::Vector2 ToXZ(::UnityEngine::Vector3 p);
    // static protected UnityEngine.Vector3 FromXZ(UnityEngine.Vector2 p)
    // Offset: 0x2A08A70
    static ::UnityEngine::Vector3 FromXZ(::UnityEngine::Vector2 p);
    // static protected System.Boolean RightOrColinear(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0x2A08A7C
    static bool RightOrColinear(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b);
    // static protected System.Boolean LeftOrColinear(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0x2A08A94
    static bool LeftOrColinear(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b);
    // static public System.Collections.Generic.List`1<UnityEngine.Vector3> Calculate(Pathfinding.Funnel/FunnelPortals funnel, System.Boolean unwrap, System.Boolean splitAtEveryPortal)
    // Offset: 0x2A08AAC
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* Calculate(::Pathfinding::Funnel::FunnelPortals funnel, bool unwrap, bool splitAtEveryPortal);
    // static private System.Void Calculate(UnityEngine.Vector2[] left, UnityEngine.Vector2[] right, System.Int32 numPortals, System.Int32 startIndex, System.Collections.Generic.List`1<System.Int32> funnelPath, System.Int32 maxCorners, out System.Boolean lastCorner)
    // Offset: 0x2A0921C
    static void Calculate(::ArrayW<::UnityEngine::Vector2> left, ::ArrayW<::UnityEngine::Vector2> right, int numPortals, int startIndex, ::System::Collections::Generic::List_1<int>* funnelPath, int maxCorners, ByRef<bool> lastCorner);
    // public System.Void .ctor()
    // Offset: 0x2A09698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Funnel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Funnel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Funnel*, creationType>()));
    }
  }; // Pathfinding.Funnel
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Funnel::PathPart, "Pathfinding", "Funnel/PathPart");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Funnel::SplitIntoParts
// Il2CppName: SplitIntoParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::Funnel::PathPart>* (*)(::Pathfinding::Path*)>(&Pathfinding::Funnel::SplitIntoParts)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "SplitIntoParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::ConstructFunnelPortals
// Il2CppName: ConstructFunnelPortals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Funnel::FunnelPortals (*)(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::Pathfinding::Funnel::PathPart)>(&Pathfinding::Funnel::ConstructFunnelPortals)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* part = &::il2cpp_utils::GetClassFromName("Pathfinding", "Funnel/PathPart")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "ConstructFunnelPortals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, part});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::ShrinkPortals
// Il2CppName: ShrinkPortals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Funnel::FunnelPortals, float)>(&Pathfinding::Funnel::ShrinkPortals)> {
  static const MethodInfo* get() {
    static auto* portals = &::il2cpp_utils::GetClassFromName("Pathfinding", "Funnel/FunnelPortals")->byval_arg;
    static auto* shrink = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "ShrinkPortals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{portals, shrink});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::UnwrapHelper
// Il2CppName: UnwrapHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&Pathfinding::Funnel::UnwrapHelper)> {
  static const MethodInfo* get() {
    static auto* portalStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* portalEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* prevPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* nextPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* mOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "UnwrapHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{portalStart, portalEnd, prevPoint, nextPoint, mRot, mOffset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::Unwrap
// Il2CppName: Unwrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Funnel::FunnelPortals, ::ArrayW<::UnityEngine::Vector2>, ::ArrayW<::UnityEngine::Vector2>)>(&Pathfinding::Funnel::Unwrap)> {
  static const MethodInfo* get() {
    static auto* funnel = &::il2cpp_utils::GetClassFromName("Pathfinding", "Funnel/FunnelPortals")->byval_arg;
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "Unwrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{funnel, left, right});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::FixFunnel
// Il2CppName: FixFunnel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::Vector2>, ::ArrayW<::UnityEngine::Vector2>, int)>(&Pathfinding::Funnel::FixFunnel)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* numPortals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "FixFunnel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, numPortals});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::ToXZ
// Il2CppName: ToXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&Pathfinding::Funnel::ToXZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "ToXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::FromXZ
// Il2CppName: FromXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&Pathfinding::Funnel::FromXZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "FromXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::RightOrColinear
// Il2CppName: RightOrColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Funnel::RightOrColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "RightOrColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::LeftOrColinear
// Il2CppName: LeftOrColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Funnel::LeftOrColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "LeftOrColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::Calculate
// Il2CppName: Calculate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (*)(::Pathfinding::Funnel::FunnelPortals, bool, bool)>(&Pathfinding::Funnel::Calculate)> {
  static const MethodInfo* get() {
    static auto* funnel = &::il2cpp_utils::GetClassFromName("Pathfinding", "Funnel/FunnelPortals")->byval_arg;
    static auto* unwrap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* splitAtEveryPortal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "Calculate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{funnel, unwrap, splitAtEveryPortal});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::Calculate
// Il2CppName: Calculate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector2>, ::ArrayW<::UnityEngine::Vector2>, int, int, ::System::Collections::Generic::List_1<int>*, int, ByRef<bool>)>(&Pathfinding::Funnel::Calculate)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* numPortals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* funnelPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* maxCorners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastCorner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Funnel*), "Calculate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, numPortals, startIndex, funnelPath, maxCorners, lastCorner});
  }
};
// Writing MetadataGetter for method: Pathfinding::Funnel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
