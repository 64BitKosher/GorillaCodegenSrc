// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavGraph
  class NavGraph;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: PathHandler
  class PathHandler;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphNode);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphNode*, "Pathfinding", "GraphNode");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphNode
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphNode : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::GraphNode::$$c__DisplayClass60_0
    class $$c__DisplayClass60_0;
    // Nested type: ::Pathfinding::GraphNode::$$c__DisplayClass65_0
    class $$c__DisplayClass65_0;
    public:
    // private System.Int32 nodeIndex
    // Size: 0x4
    // Offset: 0x10
    int nodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.UInt32 flags
    // Size: 0x4
    // Offset: 0x14
    uint flags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 penalty
    // Size: 0x4
    // Offset: 0x18
    uint penalty;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public Pathfinding.Int3 position
    // Size: 0xC
    // Offset: 0x1C
    ::Pathfinding::Int3 position;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int3) == 0xC);
    public:
    // static field const value: static private System.Int32 NodeIndexMask
    static constexpr const int NodeIndexMask = 268435455;
    // Get static field: static private System.Int32 NodeIndexMask
    static int _get_NodeIndexMask();
    // Set static field: static private System.Int32 NodeIndexMask
    static void _set_NodeIndexMask(int value);
    // static field const value: static private System.Int32 DestroyedNodeIndex
    static constexpr const int DestroyedNodeIndex = 268435454;
    // Get static field: static private System.Int32 DestroyedNodeIndex
    static int _get_DestroyedNodeIndex();
    // Set static field: static private System.Int32 DestroyedNodeIndex
    static void _set_DestroyedNodeIndex(int value);
    // static field const value: static private System.Int32 TemporaryFlag1Mask
    static constexpr const int TemporaryFlag1Mask = 268435456;
    // Get static field: static private System.Int32 TemporaryFlag1Mask
    static int _get_TemporaryFlag1Mask();
    // Set static field: static private System.Int32 TemporaryFlag1Mask
    static void _set_TemporaryFlag1Mask(int value);
    // static field const value: static private System.Int32 TemporaryFlag2Mask
    static constexpr const int TemporaryFlag2Mask = 536870912;
    // Get static field: static private System.Int32 TemporaryFlag2Mask
    static int _get_TemporaryFlag2Mask();
    // Set static field: static private System.Int32 TemporaryFlag2Mask
    static void _set_TemporaryFlag2Mask(int value);
    // static field const value: static private System.Int32 FlagsWalkableOffset
    static constexpr const int FlagsWalkableOffset = 0;
    // Get static field: static private System.Int32 FlagsWalkableOffset
    static int _get_FlagsWalkableOffset();
    // Set static field: static private System.Int32 FlagsWalkableOffset
    static void _set_FlagsWalkableOffset(int value);
    // static field const value: static private System.UInt32 FlagsWalkableMask
    static constexpr const uint FlagsWalkableMask = 1u;
    // Get static field: static private System.UInt32 FlagsWalkableMask
    static uint _get_FlagsWalkableMask();
    // Set static field: static private System.UInt32 FlagsWalkableMask
    static void _set_FlagsWalkableMask(uint value);
    // static field const value: static private System.Int32 FlagsHierarchicalIndexOffset
    static constexpr const int FlagsHierarchicalIndexOffset = 1;
    // Get static field: static private System.Int32 FlagsHierarchicalIndexOffset
    static int _get_FlagsHierarchicalIndexOffset();
    // Set static field: static private System.Int32 FlagsHierarchicalIndexOffset
    static void _set_FlagsHierarchicalIndexOffset(int value);
    // static field const value: static private System.UInt32 HierarchicalIndexMask
    static constexpr const uint HierarchicalIndexMask = 262142u;
    // Get static field: static private System.UInt32 HierarchicalIndexMask
    static uint _get_HierarchicalIndexMask();
    // Set static field: static private System.UInt32 HierarchicalIndexMask
    static void _set_HierarchicalIndexMask(uint value);
    // static field const value: static private System.Int32 HierarchicalDirtyOffset
    static constexpr const int HierarchicalDirtyOffset = 18;
    // Get static field: static private System.Int32 HierarchicalDirtyOffset
    static int _get_HierarchicalDirtyOffset();
    // Set static field: static private System.Int32 HierarchicalDirtyOffset
    static void _set_HierarchicalDirtyOffset(int value);
    // static field const value: static private System.UInt32 HierarchicalDirtyMask
    static constexpr const uint HierarchicalDirtyMask = 262144u;
    // Get static field: static private System.UInt32 HierarchicalDirtyMask
    static uint _get_HierarchicalDirtyMask();
    // Set static field: static private System.UInt32 HierarchicalDirtyMask
    static void _set_HierarchicalDirtyMask(uint value);
    // static field const value: static private System.Int32 FlagsGraphOffset
    static constexpr const int FlagsGraphOffset = 24;
    // Get static field: static private System.Int32 FlagsGraphOffset
    static int _get_FlagsGraphOffset();
    // Set static field: static private System.Int32 FlagsGraphOffset
    static void _set_FlagsGraphOffset(int value);
    // static field const value: static private System.UInt32 FlagsGraphMask
    static constexpr const uint FlagsGraphMask = 4278190080u;
    // Get static field: static private System.UInt32 FlagsGraphMask
    static uint _get_FlagsGraphMask();
    // Set static field: static private System.UInt32 FlagsGraphMask
    static void _set_FlagsGraphMask(uint value);
    // static field const value: static public System.UInt32 MaxHierarchicalNodeIndex
    static constexpr const uint MaxHierarchicalNodeIndex = 131071u;
    // Get static field: static public System.UInt32 MaxHierarchicalNodeIndex
    static uint _get_MaxHierarchicalNodeIndex();
    // Set static field: static public System.UInt32 MaxHierarchicalNodeIndex
    static void _set_MaxHierarchicalNodeIndex(uint value);
    // static field const value: static public System.UInt32 MaxGraphIndex
    static constexpr const uint MaxGraphIndex = 255u;
    // Get static field: static public System.UInt32 MaxGraphIndex
    static uint _get_MaxGraphIndex();
    // Set static field: static public System.UInt32 MaxGraphIndex
    static void _set_MaxGraphIndex(uint value);
    // static field const value: static private System.Int32 FlagsTagOffset
    static constexpr const int FlagsTagOffset = 19;
    // Get static field: static private System.Int32 FlagsTagOffset
    static int _get_FlagsTagOffset();
    // Set static field: static private System.Int32 FlagsTagOffset
    static void _set_FlagsTagOffset(int value);
    // static field const value: static private System.UInt32 FlagsTagMask
    static constexpr const uint FlagsTagMask = 16252928u;
    // Get static field: static private System.UInt32 FlagsTagMask
    static uint _get_FlagsTagMask();
    // Set static field: static private System.UInt32 FlagsTagMask
    static void _set_FlagsTagMask(uint value);
    // Get instance field reference: private System.Int32 nodeIndex
    [[deprecated("Use field access instead!")]] int& dyn_nodeIndex();
    // Get instance field reference: protected System.UInt32 flags
    [[deprecated("Use field access instead!")]] uint& dyn_flags();
    // Get instance field reference: private System.UInt32 penalty
    [[deprecated("Use field access instead!")]] uint& dyn_penalty();
    // Get instance field reference: public Pathfinding.Int3 position
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int3& dyn_position();
    // public Pathfinding.NavGraph get_Graph()
    // Offset: 0x29B894C
    ::Pathfinding::NavGraph* get_Graph();
    // protected System.Void .ctor(AstarPath astar)
    // Offset: 0x29B8970
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphNode* New_ctor(::GlobalNamespace::AstarPath* astar) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphNode*, creationType>(astar)));
    }
    // public System.Void Destroy()
    // Offset: 0x29B89FC
    void Destroy();
    // public System.Boolean get_Destroyed()
    // Offset: 0x29AC968
    bool get_Destroyed();
    // public System.Int32 get_NodeIndex()
    // Offset: 0x29AB664
    int get_NodeIndex();
    // private System.Void set_NodeIndex(System.Int32 value)
    // Offset: 0x29B8AFC
    void set_NodeIndex(int value);
    // System.Boolean get_TemporaryFlag1()
    // Offset: 0x29B8B10
    bool get_TemporaryFlag1();
    // System.Void set_TemporaryFlag1(System.Boolean value)
    // Offset: 0x29B8B1C
    void set_TemporaryFlag1(bool value);
    // System.Boolean get_TemporaryFlag2()
    // Offset: 0x29B8B4C
    bool get_TemporaryFlag2();
    // System.Void set_TemporaryFlag2(System.Boolean value)
    // Offset: 0x29B8B58
    void set_TemporaryFlag2(bool value);
    // public System.UInt32 get_Flags()
    // Offset: 0x29B8B88
    uint get_Flags();
    // public System.Void set_Flags(System.UInt32 value)
    // Offset: 0x29B8B90
    void set_Flags(uint value);
    // public System.UInt32 get_Penalty()
    // Offset: 0x29B8B98
    uint get_Penalty();
    // public System.Void set_Penalty(System.UInt32 value)
    // Offset: 0x29B8BA0
    void set_Penalty(uint value);
    // public System.Boolean get_Walkable()
    // Offset: 0x29AB658
    bool get_Walkable();
    // public System.Void set_Walkable(System.Boolean value)
    // Offset: 0x29B8C58
    void set_Walkable(bool value);
    // System.Int32 get_HierarchicalNodeIndex()
    // Offset: 0x29AC980
    int get_HierarchicalNodeIndex();
    // System.Void set_HierarchicalNodeIndex(System.Int32 value)
    // Offset: 0x29ACE28
    void set_HierarchicalNodeIndex(int value);
    // System.Boolean get_IsHierarchicalNodeDirty()
    // Offset: 0x29AC92C
    bool get_IsHierarchicalNodeDirty();
    // System.Void set_IsHierarchicalNodeDirty(System.Boolean value)
    // Offset: 0x29AC938
    void set_IsHierarchicalNodeDirty(bool value);
    // public System.UInt32 get_Area()
    // Offset: 0x29B8CDC
    uint get_Area();
    // public System.UInt32 get_GraphIndex()
    // Offset: 0x29B0988
    uint get_GraphIndex();
    // public System.Void set_GraphIndex(System.UInt32 value)
    // Offset: 0x29B8D50
    void set_GraphIndex(uint value);
    // public System.UInt32 get_Tag()
    // Offset: 0x29B8D58
    uint get_Tag();
    // public System.Void set_Tag(System.UInt32 value)
    // Offset: 0x29B8D64
    void set_Tag(uint value);
    // public System.Void SetConnectivityDirty()
    // Offset: 0x29B8D74
    void SetConnectivityDirty();
    // public System.Void RecalculateConnectionCosts()
    // Offset: 0x29B8DE4
    void RecalculateConnectionCosts();
    // public System.Void UpdateRecursiveG(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    // Offset: 0x29B8DE8
    void UpdateRecursiveG(::Pathfinding::Path* path, ::Pathfinding::PathNode* pathNode, ::Pathfinding::PathHandler* handler);
    // public System.Void GetConnections(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetConnections(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // public System.Void AddConnection(Pathfinding.GraphNode node, System.UInt32 cost)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddConnection(::Pathfinding::GraphNode* node, uint cost);
    // public System.Void RemoveConnection(Pathfinding.GraphNode node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveConnection(::Pathfinding::GraphNode* node);
    // public System.Void ClearConnections(System.Boolean alsoReverse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearConnections(bool alsoReverse);
    // public System.Boolean ContainsConnection(Pathfinding.GraphNode node)
    // Offset: 0x29B8F74
    bool ContainsConnection(::Pathfinding::GraphNode* node);
    // public System.Boolean GetPortal(Pathfinding.GraphNode other, System.Collections.Generic.List`1<UnityEngine.Vector3> left, System.Collections.Generic.List`1<UnityEngine.Vector3> right, System.Boolean backwards)
    // Offset: 0x29B9054
    bool GetPortal(::Pathfinding::GraphNode* other, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* left, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* right, bool backwards);
    // public System.Void Open(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Open(::Pathfinding::Path* path, ::Pathfinding::PathNode* pathNode, ::Pathfinding::PathHandler* handler);
    // public System.Single SurfaceArea()
    // Offset: 0x29B905C
    float SurfaceArea();
    // public UnityEngine.Vector3 RandomPointOnSurface()
    // Offset: 0x29B9064
    ::UnityEngine::Vector3 RandomPointOnSurface();
    // public UnityEngine.Vector3 ClosestPointOnNode(UnityEngine.Vector3 p)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 ClosestPointOnNode(::UnityEngine::Vector3 p);
    // public System.Int32 GetGizmoHashCode()
    // Offset: 0x29B9090
    int GetGizmoHashCode();
    // public System.Void SerializeNode(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29B90CC
    void SerializeNode(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void DeserializeNode(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29B9128
    void DeserializeNode(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void SerializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29B91AC
    void SerializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void DeserializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29B91B0
    void DeserializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
  }; // Pathfinding.GraphNode
  #pragma pack(pop)
  static check_size<sizeof(GraphNode), 28 + sizeof(::Pathfinding::Int3)> __Pathfinding_GraphNodeSizeCheck;
  static_assert(sizeof(GraphNode) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Graph
// Il2CppName: get_Graph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavGraph* (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Graph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Graph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphNode::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Destroyed
// Il2CppName: get_Destroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Destroyed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Destroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_NodeIndex
// Il2CppName: get_NodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_NodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_NodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_NodeIndex
// Il2CppName: set_NodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(int)>(&Pathfinding::GraphNode::set_NodeIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_NodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_TemporaryFlag1
// Il2CppName: get_TemporaryFlag1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_TemporaryFlag1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_TemporaryFlag1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_TemporaryFlag1
// Il2CppName: set_TemporaryFlag1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(bool)>(&Pathfinding::GraphNode::set_TemporaryFlag1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_TemporaryFlag1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_TemporaryFlag2
// Il2CppName: get_TemporaryFlag2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_TemporaryFlag2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_TemporaryFlag2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_TemporaryFlag2
// Il2CppName: set_TemporaryFlag2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(bool)>(&Pathfinding::GraphNode::set_TemporaryFlag2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_TemporaryFlag2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Flags
// Il2CppName: get_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_Flags
// Il2CppName: set_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(uint)>(&Pathfinding::GraphNode::set_Flags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Penalty
// Il2CppName: get_Penalty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Penalty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Penalty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_Penalty
// Il2CppName: set_Penalty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(uint)>(&Pathfinding::GraphNode::set_Penalty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_Penalty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Walkable
// Il2CppName: get_Walkable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Walkable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Walkable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_Walkable
// Il2CppName: set_Walkable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(bool)>(&Pathfinding::GraphNode::set_Walkable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_Walkable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_HierarchicalNodeIndex
// Il2CppName: get_HierarchicalNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_HierarchicalNodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_HierarchicalNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_HierarchicalNodeIndex
// Il2CppName: set_HierarchicalNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(int)>(&Pathfinding::GraphNode::set_HierarchicalNodeIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_HierarchicalNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_IsHierarchicalNodeDirty
// Il2CppName: get_IsHierarchicalNodeDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_IsHierarchicalNodeDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_IsHierarchicalNodeDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_IsHierarchicalNodeDirty
// Il2CppName: set_IsHierarchicalNodeDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(bool)>(&Pathfinding::GraphNode::set_IsHierarchicalNodeDirty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_IsHierarchicalNodeDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Area
// Il2CppName: get_Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Area)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_GraphIndex
// Il2CppName: get_GraphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_GraphIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_GraphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_GraphIndex
// Il2CppName: set_GraphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(uint)>(&Pathfinding::GraphNode::set_GraphIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_GraphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::get_Tag
// Il2CppName: get_Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::get_Tag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "get_Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::set_Tag
// Il2CppName: set_Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(uint)>(&Pathfinding::GraphNode::set_Tag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "set_Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::SetConnectivityDirty
// Il2CppName: SetConnectivityDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::SetConnectivityDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "SetConnectivityDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::RecalculateConnectionCosts
// Il2CppName: RecalculateConnectionCosts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::RecalculateConnectionCosts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "RecalculateConnectionCosts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::UpdateRecursiveG
// Il2CppName: UpdateRecursiveG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Path*, ::Pathfinding::PathNode*, ::Pathfinding::PathHandler*)>(&Pathfinding::GraphNode::UpdateRecursiveG)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pathNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "UpdateRecursiveG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, pathNode, handler});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::GetConnections
// Il2CppName: GetConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::GraphNode::GetConnections)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "GetConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::AddConnection
// Il2CppName: AddConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::GraphNode*, uint)>(&Pathfinding::GraphNode::AddConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* cost = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "AddConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, cost});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GraphNode::RemoveConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::ClearConnections
// Il2CppName: ClearConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(bool)>(&Pathfinding::GraphNode::ClearConnections)> {
  static const MethodInfo* get() {
    static auto* alsoReverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "ClearConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alsoReverse});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::ContainsConnection
// Il2CppName: ContainsConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GraphNode::ContainsConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "ContainsConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::GetPortal
// Il2CppName: GetPortal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphNode::*)(::Pathfinding::GraphNode*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, bool)>(&Pathfinding::GraphNode::GetPortal)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* left = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* right = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* backwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "GetPortal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, left, right, backwards});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Path*, ::Pathfinding::PathNode*, ::Pathfinding::PathHandler*)>(&Pathfinding::GraphNode::Open)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pathNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, pathNode, handler});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::SurfaceArea
// Il2CppName: SurfaceArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::SurfaceArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "SurfaceArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::RandomPointOnSurface
// Il2CppName: RandomPointOnSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::RandomPointOnSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "RandomPointOnSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::ClosestPointOnNode
// Il2CppName: ClosestPointOnNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::GraphNode::*)(::UnityEngine::Vector3)>(&Pathfinding::GraphNode::ClosestPointOnNode)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "ClosestPointOnNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::GetGizmoHashCode
// Il2CppName: GetGizmoHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GraphNode::*)()>(&Pathfinding::GraphNode::GetGizmoHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "GetGizmoHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::SerializeNode
// Il2CppName: SerializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GraphNode::SerializeNode)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "SerializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::DeserializeNode
// Il2CppName: DeserializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GraphNode::DeserializeNode)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "DeserializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::SerializeReferences
// Il2CppName: SerializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GraphNode::SerializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "SerializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphNode::DeserializeReferences
// Il2CppName: DeserializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphNode::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GraphNode::DeserializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphNode*), "DeserializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
