// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AstarMath
  class AstarMath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AstarMath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AstarMath*, "Pathfinding", "AstarMath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AstarMath
  // [TokenAttribute] Offset: FFFFFFFF
  class AstarMath : public ::Il2CppObject {
    public:
    // static public System.Single MapTo(System.Single startMin, System.Single startMax, System.Single targetMin, System.Single targetMax, System.Single value)
    // Offset: 0x299FB2C
    static float MapTo(float startMin, float startMax, float targetMin, float targetMax, float value);
    // static public System.String FormatBytesBinary(System.Int32 bytes)
    // Offset: 0x299FB70
    static ::StringW FormatBytesBinary(int bytes);
    // static private System.Int32 Bit(System.Int32 a, System.Int32 b)
    // Offset: 0x299FD2C
    static int Bit(int a, int b);
    // static public UnityEngine.Color IntToColor(System.Int32 i, System.Single a)
    // Offset: 0x2998844
    static ::UnityEngine::Color IntToColor(int i, float a);
    // static public UnityEngine.Color HSVToRGB(System.Single h, System.Single s, System.Single v)
    // Offset: 0x299FD38
    static ::UnityEngine::Color HSVToRGB(float h, float s, float v);
  }; // Pathfinding.AstarMath
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AstarMath::MapTo
// Il2CppName: MapTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Pathfinding::AstarMath::MapTo)> {
  static const MethodInfo* get() {
    static auto* startMin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetMin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarMath*), "MapTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startMin, startMax, targetMin, targetMax, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarMath::FormatBytesBinary
// Il2CppName: FormatBytesBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&Pathfinding::AstarMath::FormatBytesBinary)> {
  static const MethodInfo* get() {
    static auto* bytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarMath*), "FormatBytesBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarMath::Bit
// Il2CppName: Bit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Pathfinding::AstarMath::Bit)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarMath*), "Bit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarMath::IntToColor
// Il2CppName: IntToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(int, float)>(&Pathfinding::AstarMath::IntToColor)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarMath*), "IntToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, a});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarMath::HSVToRGB
// Il2CppName: HSVToRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(float, float, float)>(&Pathfinding::AstarMath::HSVToRGB)> {
  static const MethodInfo* get() {
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarMath*), "HSVToRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{h, s, v});
  }
};
