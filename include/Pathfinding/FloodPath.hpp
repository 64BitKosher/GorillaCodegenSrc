// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Path
#include "Pathfinding/Path.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: FloodPath
  class FloodPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::FloodPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::FloodPath*, "Pathfinding", "FloodPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.FloodPath
  // [TokenAttribute] Offset: FFFFFFFF
  class FloodPath : public ::Pathfinding::Path {
    public:
    // Writing base type padding for base size: 0xC9 to desired offset: 0xCC
    char ___base_padding[0x3] = {};
    public:
    // public UnityEngine.Vector3 originalStartPoint
    // Size: 0xC
    // Offset: 0xCC
    ::UnityEngine::Vector3 originalStartPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 startPoint
    // Size: 0xC
    // Offset: 0xD8
    ::UnityEngine::Vector3 startPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: startPoint and: startNode
    char __padding1[0x4] = {};
    // public Pathfinding.GraphNode startNode
    // Size: 0x8
    // Offset: 0xE8
    ::Pathfinding::GraphNode* startNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public System.Boolean saveParents
    // Size: 0x1
    // Offset: 0xF0
    bool saveParents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: saveParents and: parents
    char __padding3[0x7] = {};
    // protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.GraphNode> parents
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*>* parents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3 originalStartPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_originalStartPoint();
    // Get instance field reference: public UnityEngine.Vector3 startPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPoint();
    // Get instance field reference: public Pathfinding.GraphNode startNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_startNode();
    // Get instance field reference: public System.Boolean saveParents
    [[deprecated("Use field access instead!")]] bool& dyn_saveParents();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.GraphNode> parents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*>*& dyn_parents();
    // public System.Boolean HasPathTo(Pathfinding.GraphNode node)
    // Offset: 0x29FFBCC
    bool HasPathTo(::Pathfinding::GraphNode* node);
    // public Pathfinding.GraphNode GetParent(Pathfinding.GraphNode node)
    // Offset: 0x29FFC2C
    ::Pathfinding::GraphNode* GetParent(::Pathfinding::GraphNode* node);
    // static public Pathfinding.FloodPath Construct(UnityEngine.Vector3 start, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29FFCE4
    static ::Pathfinding::FloodPath* Construct(::UnityEngine::Vector3 start, ::Pathfinding::OnPathDelegate* callback);
    // static public Pathfinding.FloodPath Construct(Pathfinding.GraphNode start, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29FFDE8
    static ::Pathfinding::FloodPath* Construct(::Pathfinding::GraphNode* start, ::Pathfinding::OnPathDelegate* callback);
    // protected System.Void Setup(UnityEngine.Vector3 start, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29FFD9C
    void Setup(::UnityEngine::Vector3 start, ::Pathfinding::OnPathDelegate* callback);
    // protected System.Void Setup(Pathfinding.GraphNode start, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29FFEC0
    void Setup(::Pathfinding::GraphNode* start, ::Pathfinding::OnPathDelegate* callback);
    // public override System.Boolean get_FloodingPath()
    // Offset: 0x29FFBC4
    // Implemented from: Pathfinding.Path
    // Base method: System.Boolean Path::get_FloodingPath()
    bool get_FloodingPath();
    // public System.Void .ctor()
    // Offset: 0x29FFC84
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloodPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::FloodPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloodPath*, creationType>()));
    }
    // protected override System.Void Reset()
    // Offset: 0x29FFF38
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Reset()
    void Reset();
    // protected override System.Void Prepare()
    // Offset: 0x2A00030
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Prepare()
    void Prepare();
    // protected override System.Void Initialize()
    // Offset: 0x2A001BC
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Initialize()
    void Initialize();
    // protected override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x2A0031C
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
  }; // Pathfinding.FloodPath
  #pragma pack(pop)
  static check_size<sizeof(FloodPath), 248 + sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*>*)> __Pathfinding_FloodPathSizeCheck;
  static_assert(sizeof(FloodPath) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::FloodPath::HasPathTo
// Il2CppName: HasPathTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::FloodPath::*)(::Pathfinding::GraphNode*)>(&Pathfinding::FloodPath::HasPathTo)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "HasPathTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::GetParent
// Il2CppName: GetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::FloodPath::*)(::Pathfinding::GraphNode*)>(&Pathfinding::FloodPath::GetParent)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "GetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::FloodPath* (*)(::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::FloodPath* (*)(::Pathfinding::GraphNode*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)(::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPath::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)(::Pathfinding::GraphNode*, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::FloodPath::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::get_FloodingPath
// Il2CppName: get_FloodingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::FloodPath::*)()>(&Pathfinding::FloodPath::get_FloodingPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "get_FloodingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::FloodPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)()>(&Pathfinding::FloodPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)()>(&Pathfinding::FloodPath::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)()>(&Pathfinding::FloodPath::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::FloodPath::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::FloodPath::*)(int64_t)>(&Pathfinding::FloodPath::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::FloodPath*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
