// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphUtilities
#include "Pathfinding/GraphUtilities.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphUtilities::$$c__DisplayClass0_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUtilities::$$c__DisplayClass0_0*, "Pathfinding", "GraphUtilities/<>c__DisplayClass0_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphUtilities/<>c__DisplayClass0_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class GraphUtilities::$$c__DisplayClass0_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> result
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* result;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*() const noexcept {
      return result;
    }
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> result
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_result();
    // public System.Void .ctor()
    // Offset: 0x29AA99C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUtilities::$$c__DisplayClass0_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUtilities::$$c__DisplayClass0_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUtilities::$$c__DisplayClass0_0*, creationType>()));
    }
    // System.Void <GetContours>b__0(System.Collections.Generic.List`1<Pathfinding.Int3> vertices, System.Boolean cycle)
    // Offset: 0x29AB698
    void $GetContours$b__0(::System::Collections::Generic::List_1<::Pathfinding::Int3>* vertices, bool cycle);
    // System.Void <GetContours>b__1(UnityEngine.Vector3[] vertices)
    // Offset: 0x29AB878
    void $GetContours$b__1(::ArrayW<::UnityEngine::Vector3> vertices);
  }; // Pathfinding.GraphUtilities/<>c__DisplayClass0_0
  #pragma pack(pop)
  static check_size<sizeof(GraphUtilities::$$c__DisplayClass0_0), 16 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __Pathfinding_GraphUtilities_$$c__DisplayClass0_0SizeCheck;
  static_assert(sizeof(GraphUtilities::$$c__DisplayClass0_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphUtilities::$$c__DisplayClass0_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphUtilities::$$c__DisplayClass0_0::$GetContours$b__0
// Il2CppName: <GetContours>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUtilities::$$c__DisplayClass0_0::*)(::System::Collections::Generic::List_1<::Pathfinding::Int3>*, bool)>(&Pathfinding::GraphUtilities::$$c__DisplayClass0_0::$GetContours$b__0)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")})->byval_arg;
    static auto* cycle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUtilities::$$c__DisplayClass0_0*), "<GetContours>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, cycle});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUtilities::$$c__DisplayClass0_0::$GetContours$b__1
// Il2CppName: <GetContours>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUtilities::$$c__DisplayClass0_0::*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::GraphUtilities::$$c__DisplayClass0_0::$GetContours$b__1)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUtilities::$$c__DisplayClass0_0*), "<GetContours>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
