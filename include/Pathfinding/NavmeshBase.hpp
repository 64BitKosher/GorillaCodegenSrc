// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: Pathfinding.INavmeshHolder
#include "Pathfinding/INavmeshHolder.hpp"
// Including type: Pathfinding.IRaycastableGraph
#include "Pathfinding/IRaycastableGraph.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Pathfinding.NavmeshUpdates
#include "Pathfinding/NavmeshUpdates.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshTile
  class NavmeshTile;
  // Forward declaring type: MeshNode
  class MeshNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: GraphHitInfo
  struct GraphHitInfo;
  // Forward declaring type: IntRect
  struct IntRect;
  // Forward declaring type: Int2
  struct Int2;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: NNInfoInternal
  struct NNInfoInternal;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
  // Forward declaring type: GraphGizmoHelper
  class GraphGizmoHelper;
  // Forward declaring type: RetainedGizmos
  class RetainedGizmos;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshBase
  class NavmeshBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavmeshBase);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavmeshBase*, "Pathfinding", "NavmeshBase");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavmeshBase
  // [TokenAttribute] Offset: FFFFFFFF
  class NavmeshBase : public ::Pathfinding::NavGraph/*, public ::Pathfinding::INavmeshHolder, public ::Pathfinding::IRaycastableGraph*/ {
    public:
    // Nested type: ::Pathfinding::NavmeshBase::$$c
    class $$c;
    // Nested type: ::Pathfinding::NavmeshBase::$$c__DisplayClass84_0
    class $$c__DisplayClass84_0;
    // Nested type: ::Pathfinding::NavmeshBase::$$c__DisplayClass84_1
    class $$c__DisplayClass84_1;
    public:
    // public UnityEngine.Vector3 forcedBoundsSize
    // Size: 0xC
    // Offset: 0xD0
    ::UnityEngine::Vector3 forcedBoundsSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean showMeshOutline
    // Size: 0x1
    // Offset: 0xDC
    bool showMeshOutline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showNodeConnections
    // Size: 0x1
    // Offset: 0xDD
    bool showNodeConnections;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showMeshSurface
    // Size: 0x1
    // Offset: 0xDE
    bool showMeshSurface;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showMeshSurface and: tileXCount
    char __padding3[0x1] = {};
    // public System.Int32 tileXCount
    // Size: 0x4
    // Offset: 0xE0
    int tileXCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tileZCount
    // Size: 0x4
    // Offset: 0xE4
    int tileZCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected Pathfinding.NavmeshTile[] tiles
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::Pathfinding::NavmeshTile*> tiles;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::NavmeshTile*>) == 0x8);
    // public System.Boolean nearestSearchOnlyXZ
    // Size: 0x1
    // Offset: 0xF0
    bool nearestSearchOnlyXZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean enableNavmeshCutting
    // Size: 0x1
    // Offset: 0xF1
    bool enableNavmeshCutting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableNavmeshCutting and: navmeshUpdateData
    char __padding8[0x6] = {};
    // readonly Pathfinding.NavmeshUpdates/NavmeshUpdateSettings navmeshUpdateData
    // Size: 0x8
    // Offset: 0xF8
    ::Pathfinding::NavmeshUpdates::NavmeshUpdateSettings* navmeshUpdateData;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshUpdates::NavmeshUpdateSettings*) == 0x8);
    // private System.Boolean batchTileUpdate
    // Size: 0x1
    // Offset: 0x100
    bool batchTileUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: batchTileUpdate and: batchUpdatedTiles
    char __padding10[0x7] = {};
    // private System.Collections.Generic.List`1<System.Int32> batchUpdatedTiles
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<int>* batchUpdatedTiles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.MeshNode> batchNodesToDestroy
    // Size: 0x8
    // Offset: 0x110
    ::System::Collections::Generic::List_1<::Pathfinding::MeshNode*>* batchNodesToDestroy;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::MeshNode*>*) == 0x8);
    // public Pathfinding.Util.GraphTransform transform
    // Size: 0x8
    // Offset: 0x118
    ::Pathfinding::Util::GraphTransform* transform;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::GraphTransform*) == 0x8);
    // public System.Action`1<Pathfinding.NavmeshTile[]> OnRecalculatedTiles
    // Size: 0x8
    // Offset: 0x120
    ::System::Action_1<::ArrayW<::Pathfinding::NavmeshTile*>>* OnRecalculatedTiles;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ArrayW<::Pathfinding::NavmeshTile*>>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> nodeRecyclingHashBuffer
    // Size: 0x8
    // Offset: 0x128
    ::System::Collections::Generic::Dictionary_2<int, int>* nodeRecyclingHashBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::INavmeshHolder
    operator ::Pathfinding::INavmeshHolder() noexcept {
      return *reinterpret_cast<::Pathfinding::INavmeshHolder*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::IRaycastableGraph
    operator ::Pathfinding::IRaycastableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IRaycastableGraph*>(this);
    }
    // static field const value: static public System.Int32 VertexIndexMask
    static constexpr const int VertexIndexMask = 4095;
    // Get static field: static public System.Int32 VertexIndexMask
    static int _get_VertexIndexMask();
    // Set static field: static public System.Int32 VertexIndexMask
    static void _set_VertexIndexMask(int value);
    // static field const value: static public System.Int32 TileIndexMask
    static constexpr const int TileIndexMask = 524287;
    // Get static field: static public System.Int32 TileIndexMask
    static int _get_TileIndexMask();
    // Set static field: static public System.Int32 TileIndexMask
    static void _set_TileIndexMask(int value);
    // static field const value: static public System.Int32 TileIndexOffset
    static constexpr const int TileIndexOffset = 12;
    // Get static field: static public System.Int32 TileIndexOffset
    static int _get_TileIndexOffset();
    // Set static field: static public System.Int32 TileIndexOffset
    static void _set_TileIndexOffset(int value);
    // Get static field: static private readonly Pathfinding.NNConstraint NNConstraintDistanceXZ
    static ::Pathfinding::NNConstraint* _get_NNConstraintDistanceXZ();
    // Set static field: static private readonly Pathfinding.NNConstraint NNConstraintDistanceXZ
    static void _set_NNConstraintDistanceXZ(::Pathfinding::NNConstraint* value);
    // Get static field: static private readonly Pathfinding.NNConstraint NNConstraintNoneXZ
    static ::Pathfinding::NNConstraint* _get_NNConstraintNoneXZ();
    // Set static field: static private readonly Pathfinding.NNConstraint NNConstraintNoneXZ
    static void _set_NNConstraintNoneXZ(::Pathfinding::NNConstraint* value);
    // Get static field: static private readonly System.Byte[] LinecastShapeEdgeLookup
    static ::ArrayW<uint8_t> _get_LinecastShapeEdgeLookup();
    // Set static field: static private readonly System.Byte[] LinecastShapeEdgeLookup
    static void _set_LinecastShapeEdgeLookup(::ArrayW<uint8_t> value);
    // Get instance field reference: public UnityEngine.Vector3 forcedBoundsSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_forcedBoundsSize();
    // Get instance field reference: public System.Boolean showMeshOutline
    [[deprecated("Use field access instead!")]] bool& dyn_showMeshOutline();
    // Get instance field reference: public System.Boolean showNodeConnections
    [[deprecated("Use field access instead!")]] bool& dyn_showNodeConnections();
    // Get instance field reference: public System.Boolean showMeshSurface
    [[deprecated("Use field access instead!")]] bool& dyn_showMeshSurface();
    // Get instance field reference: public System.Int32 tileXCount
    [[deprecated("Use field access instead!")]] int& dyn_tileXCount();
    // Get instance field reference: public System.Int32 tileZCount
    [[deprecated("Use field access instead!")]] int& dyn_tileZCount();
    // Get instance field reference: protected Pathfinding.NavmeshTile[] tiles
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::NavmeshTile*>& dyn_tiles();
    // Get instance field reference: public System.Boolean nearestSearchOnlyXZ
    [[deprecated("Use field access instead!")]] bool& dyn_nearestSearchOnlyXZ();
    // Get instance field reference: public System.Boolean enableNavmeshCutting
    [[deprecated("Use field access instead!")]] bool& dyn_enableNavmeshCutting();
    // Get instance field reference: readonly Pathfinding.NavmeshUpdates/NavmeshUpdateSettings navmeshUpdateData
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshUpdates::NavmeshUpdateSettings*& dyn_navmeshUpdateData();
    // Get instance field reference: private System.Boolean batchTileUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_batchTileUpdate();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> batchUpdatedTiles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_batchUpdatedTiles();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.MeshNode> batchNodesToDestroy
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::MeshNode*>*& dyn_batchNodesToDestroy();
    // Get instance field reference: public Pathfinding.Util.GraphTransform transform
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::GraphTransform*& dyn_transform();
    // Get instance field reference: public System.Action`1<Pathfinding.NavmeshTile[]> OnRecalculatedTiles
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ArrayW<::Pathfinding::NavmeshTile*>>*& dyn_OnRecalculatedTiles();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> nodeRecyclingHashBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_nodeRecyclingHashBuffer();
    // public System.Single get_TileWorldSizeX()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_TileWorldSizeX();
    // public System.Single get_TileWorldSizeZ()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_TileWorldSizeZ();
    // protected System.Single get_MaxTileConnectionEdgeDistance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_MaxTileConnectionEdgeDistance();
    // private Pathfinding.Util.GraphTransform Pathfinding.ITransformedGraph.get_transform()
    // Offset: 0x29CE200
    ::Pathfinding::Util::GraphTransform* Pathfinding_ITransformedGraph_get_transform();
    // protected System.Boolean get_RecalculateNormals()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_RecalculateNormals();
    // public Pathfinding.Util.GraphTransform CalculateTransform()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Pathfinding::Util::GraphTransform* CalculateTransform();
    // public Pathfinding.NavmeshTile GetTile(System.Int32 x, System.Int32 z)
    // Offset: 0x29CE208
    ::Pathfinding::NavmeshTile* GetTile(int x, int z);
    // public Pathfinding.Int3 GetVertex(System.Int32 index)
    // Offset: 0x29CE240
    ::Pathfinding::Int3 GetVertex(int index);
    // public Pathfinding.Int3 GetVertexInGraphSpace(System.Int32 index)
    // Offset: 0x29CE284
    ::Pathfinding::Int3 GetVertexInGraphSpace(int index);
    // static public System.Int32 GetTileIndex(System.Int32 index)
    // Offset: 0x29CE2C8
    static int GetTileIndex(int index);
    // public System.Int32 GetVertexArrayIndex(System.Int32 index)
    // Offset: 0x29CE2D0
    int GetVertexArrayIndex(int index);
    // public System.Void GetTileCoordinates(System.Int32 tileIndex, out System.Int32 x, out System.Int32 z)
    // Offset: 0x29CE2D8
    void GetTileCoordinates(int tileIndex, ByRef<int> x, ByRef<int> z);
    // public Pathfinding.NavmeshTile[] GetTiles()
    // Offset: 0x29CE2F4
    ::ArrayW<::Pathfinding::NavmeshTile*> GetTiles();
    // public UnityEngine.Bounds GetTileBounds(Pathfinding.IntRect rect)
    // Offset: 0x29CE2FC
    ::UnityEngine::Bounds GetTileBounds(::Pathfinding::IntRect rect);
    // public UnityEngine.Bounds GetTileBounds(System.Int32 x, System.Int32 z, System.Int32 width, System.Int32 depth)
    // Offset: 0x29CE37C
    ::UnityEngine::Bounds GetTileBounds(int x, int z, int width, int depth);
    // public UnityEngine.Bounds GetTileBoundsInGraphSpace(Pathfinding.IntRect rect)
    // Offset: 0x29CE4E4
    ::UnityEngine::Bounds GetTileBoundsInGraphSpace(::Pathfinding::IntRect rect);
    // public UnityEngine.Bounds GetTileBoundsInGraphSpace(System.Int32 x, System.Int32 z, System.Int32 width, System.Int32 depth)
    // Offset: 0x29CE3E4
    ::UnityEngine::Bounds GetTileBoundsInGraphSpace(int x, int z, int width, int depth);
    // public Pathfinding.Int2 GetTileCoordinates(UnityEngine.Vector3 position)
    // Offset: 0x29CE564
    ::Pathfinding::Int2 GetTileCoordinates(::UnityEngine::Vector3 position);
    // public System.Void RelocateNodes(Pathfinding.Util.GraphTransform newTransform)
    // Offset: 0x29CE79C
    void RelocateNodes(::Pathfinding::Util::GraphTransform* newTransform);
    // protected Pathfinding.NavmeshTile NewEmptyTile(System.Int32 x, System.Int32 z)
    // Offset: 0x29CE88C
    ::Pathfinding::NavmeshTile* NewEmptyTile(int x, int z);
    // public Pathfinding.IntRect GetTouchingTiles(UnityEngine.Bounds bounds, System.Single margin)
    // Offset: 0x29CEAC8
    ::Pathfinding::IntRect GetTouchingTiles(::UnityEngine::Bounds bounds, float margin);
    // public Pathfinding.IntRect GetTouchingTilesInGraphSpace(UnityEngine.Rect rect)
    // Offset: 0x29CED74
    ::Pathfinding::IntRect GetTouchingTilesInGraphSpace(::UnityEngine::Rect rect);
    // public Pathfinding.IntRect GetTouchingTilesRound(UnityEngine.Bounds bounds)
    // Offset: 0x29CEF84
    ::Pathfinding::IntRect GetTouchingTilesRound(::UnityEngine::Bounds bounds);
    // protected System.Void ConnectTileWithNeighbours(Pathfinding.NavmeshTile tile, System.Boolean onlyUnflagged)
    // Offset: 0x29CF3B4
    void ConnectTileWithNeighbours(::Pathfinding::NavmeshTile* tile, bool onlyUnflagged);
    // protected System.Void RemoveConnectionsFromTile(Pathfinding.NavmeshTile tile)
    // Offset: 0x29D014C
    void RemoveConnectionsFromTile(::Pathfinding::NavmeshTile* tile);
    // protected System.Void RemoveConnectionsFromTo(Pathfinding.NavmeshTile a, Pathfinding.NavmeshTile b)
    // Offset: 0x29D032C
    void RemoveConnectionsFromTo(::Pathfinding::NavmeshTile* a, ::Pathfinding::NavmeshTile* b);
    // public Pathfinding.GraphNode PointOnNavmesh(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x29D0934
    ::Pathfinding::GraphNode* PointOnNavmesh(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // protected System.Void FillWithEmptyTiles()
    // Offset: 0x29D09E4
    void FillWithEmptyTiles();
    // static protected System.Void CreateNodeConnections(Pathfinding.TriangleMeshNode[] nodes)
    // Offset: 0x29D0AB4
    static void CreateNodeConnections(::ArrayW<::Pathfinding::TriangleMeshNode*> nodes);
    // protected System.Void ConnectTiles(Pathfinding.NavmeshTile tile1, Pathfinding.NavmeshTile tile2)
    // Offset: 0x29CF4FC
    void ConnectTiles(::Pathfinding::NavmeshTile* tile1, ::Pathfinding::NavmeshTile* tile2);
    // public System.Void StartBatchTileUpdate()
    // Offset: 0x29D1008
    void StartBatchTileUpdate();
    // private System.Void DestroyNodes(System.Collections.Generic.List`1<Pathfinding.MeshNode> nodes)
    // Offset: 0x29D106C
    void DestroyNodes(::System::Collections::Generic::List_1<::Pathfinding::MeshNode*>* nodes);
    // private System.Void TryConnect(System.Int32 tileIdx1, System.Int32 tileIdx2)
    // Offset: 0x29D1204
    void TryConnect(int tileIdx1, int tileIdx2);
    // public System.Void EndBatchTileUpdate()
    // Offset: 0x29D127C
    void EndBatchTileUpdate();
    // protected System.Void ClearTile(System.Int32 x, System.Int32 z)
    // Offset: 0x29D15CC
    void ClearTile(int x, int z);
    // private System.Void PrepareNodeRecycling(System.Int32 x, System.Int32 z, Pathfinding.Int3[] verts, System.Int32[] tris, Pathfinding.TriangleMeshNode[] recycledNodeBuffer)
    // Offset: 0x29D1798
    void PrepareNodeRecycling(int x, int z, ::ArrayW<::Pathfinding::Int3> verts, ::ArrayW<int> tris, ::ArrayW<::Pathfinding::TriangleMeshNode*> recycledNodeBuffer);
    // public System.Void ReplaceTile(System.Int32 x, System.Int32 z, Pathfinding.Int3[] verts, System.Int32[] tris)
    // Offset: 0x29D1E24
    void ReplaceTile(int x, int z, ::ArrayW<::Pathfinding::Int3> verts, ::ArrayW<int> tris);
    // protected System.Void CreateNodes(Pathfinding.TriangleMeshNode[] buffer, System.Int32[] tris, System.Int32 tileIndex, System.UInt32 graphIndex)
    // Offset: 0x29D2A44
    void CreateNodes(::ArrayW<::Pathfinding::TriangleMeshNode*> buffer, ::ArrayW<int> tris, int tileIndex, uint graphIndex);
    // public System.Boolean Linecast(UnityEngine.Vector3 origin, UnityEngine.Vector3 end)
    // Offset: 0x29D2F90
    bool Linecast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end);
    // public System.Boolean Linecast(UnityEngine.Vector3 origin, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit)
    // Offset: 0x29D3070
    bool Linecast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit);
    // public System.Boolean Linecast(UnityEngine.Vector3 origin, UnityEngine.Vector3 end, Pathfinding.GraphNode hint)
    // Offset: 0x29D2F98
    bool Linecast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint);
    // public System.Boolean Linecast(UnityEngine.Vector3 origin, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace)
    // Offset: 0x29D3C70
    bool Linecast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace);
    // public System.Boolean Linecast(UnityEngine.Vector3 origin, UnityEngine.Vector3 end, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter)
    // Offset: 0x29D3D38
    bool Linecast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter);
    // static public System.Boolean Linecast(Pathfinding.NavmeshBase graph, UnityEngine.Vector3 origin, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit)
    // Offset: 0x29D3E00
    static bool Linecast(::Pathfinding::NavmeshBase* graph, ::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit);
    // static private System.Void .cctor()
    // Offset: 0x29D3EBC
    static void _cctor();
    // static public System.Boolean Linecast(Pathfinding.NavmeshBase graph, UnityEngine.Vector3 origin, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace, System.Func`2<Pathfinding.GraphNode,System.Boolean> filter)
    // Offset: 0x29D312C
    static bool Linecast(::Pathfinding::NavmeshBase* graph, ::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace, ::System::Func_2<::Pathfinding::GraphNode*, bool>* filter);
    // private System.Void CreateNavmeshSurfaceVisualization(Pathfinding.NavmeshTile[] tiles, System.Int32 startTile, System.Int32 endTile, Pathfinding.Util.GraphGizmoHelper helper)
    // Offset: 0x29D484C
    void CreateNavmeshSurfaceVisualization(::ArrayW<::Pathfinding::NavmeshTile*> tiles, int startTile, int endTile, ::Pathfinding::Util::GraphGizmoHelper* helper);
    // static private System.Void CreateNavmeshOutlineVisualization(Pathfinding.NavmeshTile[] tiles, System.Int32 startTile, System.Int32 endTile, Pathfinding.Util.GraphGizmoHelper helper)
    // Offset: 0x29D4C98
    static void CreateNavmeshOutlineVisualization(::ArrayW<::Pathfinding::NavmeshTile*> tiles, int startTile, int endTile, ::Pathfinding::Util::GraphGizmoHelper* helper);
    // protected override System.Void OnDestroy()
    // Offset: 0x29CE608
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDestroy()
    void OnDestroy();
    // public override System.Void RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    // Offset: 0x29CE6F8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::RelocateNodes(UnityEngine.Matrix4x4 deltaMatrix)
    void RelocateNodes(::UnityEngine::Matrix4x4 deltaMatrix);
    // public override System.Void GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    // Offset: 0x29CE9F8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::GetNodes(System.Action`1<Pathfinding.GraphNode> action)
    void GetNodes(::System::Action_1<::Pathfinding::GraphNode*>* action);
    // public override Pathfinding.NNInfoInternal GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x29D0490
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfoInternal GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public override Pathfinding.NNInfoInternal GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x29D0574
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfoInternal NavGraph::GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    ::Pathfinding::NNInfoInternal GetNearestForce(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // public System.Void .ctor()
    // Offset: 0x29D2D7C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavmeshBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshBase*, creationType>()));
    }
    // public override System.Void OnDrawGizmos(Pathfinding.Util.RetainedGizmos gizmos, System.Boolean drawNodes)
    // Offset: 0x29D4174
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDrawGizmos(Pathfinding.Util.RetainedGizmos gizmos, System.Boolean drawNodes)
    void OnDrawGizmos(::Pathfinding::Util::RetainedGizmos* gizmos, bool drawNodes);
    // protected override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29D5050
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29D540C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // protected override System.Void PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29D5BFC
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::PostDeserialization(Pathfinding.Serialization.GraphSerializationContext ctx)
    void PostDeserialization(::Pathfinding::Serialization::GraphSerializationContext* ctx);
  }; // Pathfinding.NavmeshBase
  #pragma pack(pop)
  static check_size<sizeof(NavmeshBase), 296 + sizeof(::System::Collections::Generic::Dictionary_2<int, int>*)> __Pathfinding_NavmeshBaseSizeCheck;
  static_assert(sizeof(NavmeshBase) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::get_TileWorldSizeX
// Il2CppName: get_TileWorldSizeX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::get_TileWorldSizeX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "get_TileWorldSizeX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::get_TileWorldSizeZ
// Il2CppName: get_TileWorldSizeZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::get_TileWorldSizeZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "get_TileWorldSizeZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::get_MaxTileConnectionEdgeDistance
// Il2CppName: get_MaxTileConnectionEdgeDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::get_MaxTileConnectionEdgeDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "get_MaxTileConnectionEdgeDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Pathfinding_ITransformedGraph_get_transform
// Il2CppName: Pathfinding.ITransformedGraph.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::Pathfinding_ITransformedGraph_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Pathfinding.ITransformedGraph.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::get_RecalculateNormals
// Il2CppName: get_RecalculateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::get_RecalculateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "get_RecalculateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::CalculateTransform
// Il2CppName: CalculateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::CalculateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "CalculateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTile
// Il2CppName: GetTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavmeshTile* (Pathfinding::NavmeshBase::*)(int, int)>(&Pathfinding::NavmeshBase::GetTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetVertex
// Il2CppName: GetVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::NavmeshBase::*)(int)>(&Pathfinding::NavmeshBase::GetVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetVertexInGraphSpace
// Il2CppName: GetVertexInGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::NavmeshBase::*)(int)>(&Pathfinding::NavmeshBase::GetVertexInGraphSpace)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetVertexInGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileIndex
// Il2CppName: GetTileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Pathfinding::NavmeshBase::GetTileIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetVertexArrayIndex
// Il2CppName: GetVertexArrayIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::NavmeshBase::*)(int)>(&Pathfinding::NavmeshBase::GetVertexArrayIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetVertexArrayIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileCoordinates
// Il2CppName: GetTileCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(int, ByRef<int>, ByRef<int>)>(&Pathfinding::NavmeshBase::GetTileCoordinates)> {
  static const MethodInfo* get() {
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIndex, x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTiles
// Il2CppName: GetTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::NavmeshTile*> (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::GetTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileBounds
// Il2CppName: GetTileBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::NavmeshBase::*)(::Pathfinding::IntRect)>(&Pathfinding::NavmeshBase::GetTileBounds)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileBounds
// Il2CppName: GetTileBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::NavmeshBase::*)(int, int, int, int)>(&Pathfinding::NavmeshBase::GetTileBounds)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, width, depth});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileBoundsInGraphSpace
// Il2CppName: GetTileBoundsInGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::NavmeshBase::*)(::Pathfinding::IntRect)>(&Pathfinding::NavmeshBase::GetTileBoundsInGraphSpace)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("Pathfinding", "IntRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileBoundsInGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileBoundsInGraphSpace
// Il2CppName: GetTileBoundsInGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::NavmeshBase::*)(int, int, int, int)>(&Pathfinding::NavmeshBase::GetTileBoundsInGraphSpace)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileBoundsInGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, width, depth});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTileCoordinates
// Il2CppName: GetTileCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int2 (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3)>(&Pathfinding::NavmeshBase::GetTileCoordinates)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTileCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::Util::GraphTransform*)>(&Pathfinding::NavmeshBase::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* newTransform = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTransform});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::NewEmptyTile
// Il2CppName: NewEmptyTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavmeshTile* (Pathfinding::NavmeshBase::*)(int, int)>(&Pathfinding::NavmeshBase::NewEmptyTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "NewEmptyTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTouchingTiles
// Il2CppName: GetTouchingTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::IntRect (Pathfinding::NavmeshBase::*)(::UnityEngine::Bounds, float)>(&Pathfinding::NavmeshBase::GetTouchingTiles)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* margin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTouchingTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, margin});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTouchingTilesInGraphSpace
// Il2CppName: GetTouchingTilesInGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::IntRect (Pathfinding::NavmeshBase::*)(::UnityEngine::Rect)>(&Pathfinding::NavmeshBase::GetTouchingTilesInGraphSpace)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTouchingTilesInGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetTouchingTilesRound
// Il2CppName: GetTouchingTilesRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::IntRect (Pathfinding::NavmeshBase::*)(::UnityEngine::Bounds)>(&Pathfinding::NavmeshBase::GetTouchingTilesRound)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetTouchingTilesRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::ConnectTileWithNeighbours
// Il2CppName: ConnectTileWithNeighbours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::NavmeshTile*, bool)>(&Pathfinding::NavmeshBase::ConnectTileWithNeighbours)> {
  static const MethodInfo* get() {
    static auto* tile = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    static auto* onlyUnflagged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "ConnectTileWithNeighbours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tile, onlyUnflagged});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::RemoveConnectionsFromTile
// Il2CppName: RemoveConnectionsFromTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::NavmeshTile*)>(&Pathfinding::NavmeshBase::RemoveConnectionsFromTile)> {
  static const MethodInfo* get() {
    static auto* tile = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "RemoveConnectionsFromTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tile});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::RemoveConnectionsFromTo
// Il2CppName: RemoveConnectionsFromTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::NavmeshTile*, ::Pathfinding::NavmeshTile*)>(&Pathfinding::NavmeshBase::RemoveConnectionsFromTo)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "RemoveConnectionsFromTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::PointOnNavmesh
// Il2CppName: PointOnNavmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::NavmeshBase::PointOnNavmesh)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "PointOnNavmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::FillWithEmptyTiles
// Il2CppName: FillWithEmptyTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::FillWithEmptyTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "FillWithEmptyTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::CreateNodeConnections
// Il2CppName: CreateNodeConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Pathfinding::TriangleMeshNode*>)>(&Pathfinding::NavmeshBase::CreateNodeConnections)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "CreateNodeConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::ConnectTiles
// Il2CppName: ConnectTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::NavmeshTile*, ::Pathfinding::NavmeshTile*)>(&Pathfinding::NavmeshBase::ConnectTiles)> {
  static const MethodInfo* get() {
    static auto* tile1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    static auto* tile2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "ConnectTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tile1, tile2});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::StartBatchTileUpdate
// Il2CppName: StartBatchTileUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::StartBatchTileUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "StartBatchTileUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::DestroyNodes
// Il2CppName: DestroyNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::System::Collections::Generic::List_1<::Pathfinding::MeshNode*>*)>(&Pathfinding::NavmeshBase::DestroyNodes)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "MeshNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "DestroyNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::TryConnect
// Il2CppName: TryConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(int, int)>(&Pathfinding::NavmeshBase::TryConnect)> {
  static const MethodInfo* get() {
    static auto* tileIdx1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tileIdx2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "TryConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIdx1, tileIdx2});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::EndBatchTileUpdate
// Il2CppName: EndBatchTileUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::EndBatchTileUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "EndBatchTileUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::ClearTile
// Il2CppName: ClearTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(int, int)>(&Pathfinding::NavmeshBase::ClearTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "ClearTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::PrepareNodeRecycling
// Il2CppName: PrepareNodeRecycling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(int, int, ::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>, ::ArrayW<::Pathfinding::TriangleMeshNode*>)>(&Pathfinding::NavmeshBase::PrepareNodeRecycling)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* recycledNodeBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "PrepareNodeRecycling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, verts, tris, recycledNodeBuffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::ReplaceTile
// Il2CppName: ReplaceTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(int, int, ::ArrayW<::Pathfinding::Int3>, ::ArrayW<int>)>(&Pathfinding::NavmeshBase::ReplaceTile)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "ReplaceTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, verts, tris});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::CreateNodes
// Il2CppName: CreateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::ArrayW<::Pathfinding::TriangleMeshNode*>, ::ArrayW<int>, int, uint)>(&Pathfinding::NavmeshBase::CreateNodes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode"), 1)->byval_arg;
    static auto* tris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* graphIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "CreateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, tris, tileIndex, graphIndex});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, end, hint, hit});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, end, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, end, hint, hit, trace});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, end, hit, trace, filter});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::NavmeshBase*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshBase")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, origin, end, hint, hit});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::NavmeshBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::NavmeshBase*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::System::Func_2<::Pathfinding::GraphNode*, bool>*)>(&Pathfinding::NavmeshBase::Linecast)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshBase")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, origin, end, hint, hit, trace, filter});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::CreateNavmeshSurfaceVisualization
// Il2CppName: CreateNavmeshSurfaceVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::ArrayW<::Pathfinding::NavmeshTile*>, int, int, ::Pathfinding::Util::GraphGizmoHelper*)>(&Pathfinding::NavmeshBase::CreateNavmeshSurfaceVisualization)> {
  static const MethodInfo* get() {
    static auto* tiles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile"), 1)->byval_arg;
    static auto* startTile = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endTile = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* helper = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphGizmoHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "CreateNavmeshSurfaceVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tiles, startTile, endTile, helper});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::CreateNavmeshOutlineVisualization
// Il2CppName: CreateNavmeshOutlineVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Pathfinding::NavmeshTile*>, int, int, ::Pathfinding::Util::GraphGizmoHelper*)>(&Pathfinding::NavmeshBase::CreateNavmeshOutlineVisualization)> {
  static const MethodInfo* get() {
    static auto* tiles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshTile"), 1)->byval_arg;
    static auto* startTile = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endTile = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* helper = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "GraphGizmoHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "CreateNavmeshOutlineVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tiles, startTile, endTile, helper});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)()>(&Pathfinding::NavmeshBase::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::UnityEngine::Matrix4x4)>(&Pathfinding::NavmeshBase::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* deltaMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::System::Action_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::NavmeshBase::GetNodes)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::NavmeshBase::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfoInternal (Pathfinding::NavmeshBase::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::NavmeshBase::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::Util::RetainedGizmos*, bool)>(&Pathfinding::NavmeshBase::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* gizmos = &::il2cpp_utils::GetClassFromName("Pathfinding.Util", "RetainedGizmos")->byval_arg;
    static auto* drawNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gizmos, drawNodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavmeshBase::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavmeshBase::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavmeshBase::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavmeshBase::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavmeshBase::PostDeserialization)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavmeshBase*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
