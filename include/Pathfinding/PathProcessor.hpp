// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: ThreadControlQueue
  class ThreadControlQueue;
  // Forward declaring type: PathReturnQueue
  class PathReturnQueue;
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Profiling
namespace UnityEngine::Profiling {
  // Forward declaring type: CustomSampler
  class CustomSampler;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathProcessor
  class PathProcessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathProcessor);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathProcessor*, "Pathfinding", "PathProcessor");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class PathProcessor : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::PathProcessor::GraphUpdateLock
    struct GraphUpdateLock;
    // Nested type: ::Pathfinding::PathProcessor::$$c__DisplayClass24_0
    class $$c__DisplayClass24_0;
    // Nested type: ::Pathfinding::PathProcessor::$CalculatePaths$d__36
    class $CalculatePaths$d__36;
    public:
    // private System.Action`1<Pathfinding.Path> OnPathPreSearch
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<::Pathfinding::Path*>* OnPathPreSearch;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::Path*>*) == 0x8);
    // private System.Action`1<Pathfinding.Path> OnPathPostSearch
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::Pathfinding::Path*>* OnPathPostSearch;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::Path*>*) == 0x8);
    // private System.Action OnQueueUnblocked
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* OnQueueUnblocked;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // readonly Pathfinding.ThreadControlQueue queue
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::ThreadControlQueue* queue;
    // Field size check
    static_assert(sizeof(::Pathfinding::ThreadControlQueue*) == 0x8);
    // private readonly AstarPath astar
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::AstarPath* astar;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // private readonly Pathfinding.PathReturnQueue returnQueue
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::PathReturnQueue* returnQueue;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathReturnQueue*) == 0x8);
    // private readonly Pathfinding.PathHandler[] pathHandlers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Pathfinding::PathHandler*> pathHandlers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::PathHandler*>) == 0x8);
    // private readonly System.Threading.Thread[] threads
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::System::Threading::Thread*> threads;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Threading::Thread*>) == 0x8);
    // private System.Collections.IEnumerator threadCoroutine
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::IEnumerator* threadCoroutine;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // private System.Int32 nextNodeIndex
    // Size: 0x4
    // Offset: 0x58
    int nextNodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nextNodeIndex and: nodeIndexPool
    char __padding9[0x4] = {};
    // private readonly System.Collections.Generic.Stack`1<System.Int32> nodeIndexPool
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Stack_1<int>* nodeIndexPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Int32> locks
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<int>* locks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Int32 nextLockID
    // Size: 0x4
    // Offset: 0x70
    int nextLockID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nextLockID and: profilingSampler
    char __padding12[0x4] = {};
    // private UnityEngine.Profiling.CustomSampler profilingSampler
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Profiling::CustomSampler* profilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Profiling::CustomSampler*) == 0x8);
    public:
    // Get instance field reference: private System.Action`1<Pathfinding.Path> OnPathPreSearch
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::Path*>*& dyn_OnPathPreSearch();
    // Get instance field reference: private System.Action`1<Pathfinding.Path> OnPathPostSearch
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::Path*>*& dyn_OnPathPostSearch();
    // Get instance field reference: private System.Action OnQueueUnblocked
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnQueueUnblocked();
    // Get instance field reference: readonly Pathfinding.ThreadControlQueue queue
    [[deprecated("Use field access instead!")]] ::Pathfinding::ThreadControlQueue*& dyn_queue();
    // Get instance field reference: private readonly AstarPath astar
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_astar();
    // Get instance field reference: private readonly Pathfinding.PathReturnQueue returnQueue
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathReturnQueue*& dyn_returnQueue();
    // Get instance field reference: private readonly Pathfinding.PathHandler[] pathHandlers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::PathHandler*>& dyn_pathHandlers();
    // Get instance field reference: private readonly System.Threading.Thread[] threads
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::Thread*>& dyn_threads();
    // Get instance field reference: private System.Collections.IEnumerator threadCoroutine
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_threadCoroutine();
    // Get instance field reference: private System.Int32 nextNodeIndex
    [[deprecated("Use field access instead!")]] int& dyn_nextNodeIndex();
    // Get instance field reference: private readonly System.Collections.Generic.Stack`1<System.Int32> nodeIndexPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_nodeIndexPool();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Int32> locks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_locks();
    // Get instance field reference: private System.Int32 nextLockID
    [[deprecated("Use field access instead!")]] int& dyn_nextLockID();
    // Get instance field reference: private UnityEngine.Profiling.CustomSampler profilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Profiling::CustomSampler*& dyn_profilingSampler();
    // public System.Void add_OnPathPreSearch(System.Action`1<Pathfinding.Path> value)
    // Offset: 0x29B4350
    void add_OnPathPreSearch(::System::Action_1<::Pathfinding::Path*>* value);
    // public System.Void remove_OnPathPreSearch(System.Action`1<Pathfinding.Path> value)
    // Offset: 0x29B4400
    void remove_OnPathPreSearch(::System::Action_1<::Pathfinding::Path*>* value);
    // public System.Void add_OnPathPostSearch(System.Action`1<Pathfinding.Path> value)
    // Offset: 0x29B44B0
    void add_OnPathPostSearch(::System::Action_1<::Pathfinding::Path*>* value);
    // public System.Void remove_OnPathPostSearch(System.Action`1<Pathfinding.Path> value)
    // Offset: 0x29B4560
    void remove_OnPathPostSearch(::System::Action_1<::Pathfinding::Path*>* value);
    // public System.Void add_OnQueueUnblocked(System.Action value)
    // Offset: 0x29B4610
    void add_OnQueueUnblocked(::System::Action* value);
    // public System.Void remove_OnQueueUnblocked(System.Action value)
    // Offset: 0x29B46AC
    void remove_OnQueueUnblocked(::System::Action* value);
    // public System.Int32 get_NumThreads()
    // Offset: 0x29B4748
    int get_NumThreads();
    // public System.Boolean get_IsUsingMultithreading()
    // Offset: 0x29B4764
    bool get_IsUsingMultithreading();
    // System.Void .ctor(AstarPath astar, Pathfinding.PathReturnQueue returnQueue, System.Int32 processors, System.Boolean multithreaded)
    // Offset: 0x29B4774
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathProcessor* New_ctor(::GlobalNamespace::AstarPath* astar, ::Pathfinding::PathReturnQueue* returnQueue, int processors, bool multithreaded) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PathProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathProcessor*, creationType>(astar, returnQueue, processors, multithreaded)));
    }
    // private System.Int32 Lock(System.Boolean block)
    // Offset: 0x29B4F28
    int Lock(bool block);
    // private System.Void Unlock(System.Int32 id)
    // Offset: 0x29B5410
    void Unlock(int id);
    // public Pathfinding.PathProcessor/GraphUpdateLock PausePathfinding(System.Boolean block)
    // Offset: 0x29B55D4
    ::Pathfinding::PathProcessor::GraphUpdateLock PausePathfinding(bool block);
    // public System.Void TickNonMultithreaded()
    // Offset: 0x29B50F0
    void TickNonMultithreaded();
    // public System.Void JoinThreads()
    // Offset: 0x29B5A64
    void JoinThreads();
    // public System.Void AbortThreads()
    // Offset: 0x29B5BA8
    void AbortThreads();
    // public System.Int32 GetNewNodeIndex()
    // Offset: 0x29B5C30
    int GetNewNodeIndex();
    // public System.Void InitializeNode(Pathfinding.GraphNode node)
    // Offset: 0x29B5CB0
    void InitializeNode(::Pathfinding::GraphNode* node);
    // public System.Void DestroyNode(Pathfinding.GraphNode node)
    // Offset: 0x29B5F54
    void DestroyNode(::Pathfinding::GraphNode* node);
    // private System.Void CalculatePathsThreaded(Pathfinding.PathHandler pathHandler)
    // Offset: 0x29B6050
    void CalculatePathsThreaded(::Pathfinding::PathHandler* pathHandler);
    // private System.Collections.IEnumerator CalculatePaths(Pathfinding.PathHandler pathHandler)
    // Offset: 0x29B4EA0
    ::System::Collections::IEnumerator* CalculatePaths(::Pathfinding::PathHandler* pathHandler);
  }; // Pathfinding.PathProcessor
  #pragma pack(pop)
  static check_size<sizeof(PathProcessor), 120 + sizeof(::UnityEngine::Profiling::CustomSampler*)> __Pathfinding_PathProcessorSizeCheck;
  static_assert(sizeof(PathProcessor) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathProcessor::add_OnPathPreSearch
// Il2CppName: add_OnPathPreSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action_1<::Pathfinding::Path*>*)>(&Pathfinding::PathProcessor::add_OnPathPreSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Path")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "add_OnPathPreSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::remove_OnPathPreSearch
// Il2CppName: remove_OnPathPreSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action_1<::Pathfinding::Path*>*)>(&Pathfinding::PathProcessor::remove_OnPathPreSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Path")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "remove_OnPathPreSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::add_OnPathPostSearch
// Il2CppName: add_OnPathPostSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action_1<::Pathfinding::Path*>*)>(&Pathfinding::PathProcessor::add_OnPathPostSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Path")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "add_OnPathPostSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::remove_OnPathPostSearch
// Il2CppName: remove_OnPathPostSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action_1<::Pathfinding::Path*>*)>(&Pathfinding::PathProcessor::remove_OnPathPostSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "Path")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "remove_OnPathPostSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::add_OnQueueUnblocked
// Il2CppName: add_OnQueueUnblocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action*)>(&Pathfinding::PathProcessor::add_OnQueueUnblocked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "add_OnQueueUnblocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::remove_OnQueueUnblocked
// Il2CppName: remove_OnQueueUnblocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::System::Action*)>(&Pathfinding::PathProcessor::remove_OnQueueUnblocked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "remove_OnQueueUnblocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::get_NumThreads
// Il2CppName: get_NumThreads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::get_NumThreads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "get_NumThreads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::get_IsUsingMultithreading
// Il2CppName: get_IsUsingMultithreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::get_IsUsingMultithreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "get_IsUsingMultithreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::PathProcessor::Lock
// Il2CppName: Lock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::PathProcessor::*)(bool)>(&Pathfinding::PathProcessor::Lock)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "Lock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::Unlock
// Il2CppName: Unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(int)>(&Pathfinding::PathProcessor::Unlock)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "Unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::PausePathfinding
// Il2CppName: PausePathfinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathProcessor::GraphUpdateLock (Pathfinding::PathProcessor::*)(bool)>(&Pathfinding::PathProcessor::PausePathfinding)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "PausePathfinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::TickNonMultithreaded
// Il2CppName: TickNonMultithreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::TickNonMultithreaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "TickNonMultithreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::JoinThreads
// Il2CppName: JoinThreads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::JoinThreads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "JoinThreads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::AbortThreads
// Il2CppName: AbortThreads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::AbortThreads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "AbortThreads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::GetNewNodeIndex
// Il2CppName: GetNewNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::PathProcessor::*)()>(&Pathfinding::PathProcessor::GetNewNodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "GetNewNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::InitializeNode
// Il2CppName: InitializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::Pathfinding::GraphNode*)>(&Pathfinding::PathProcessor::InitializeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "InitializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::DestroyNode
// Il2CppName: DestroyNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::Pathfinding::GraphNode*)>(&Pathfinding::PathProcessor::DestroyNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "DestroyNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::CalculatePathsThreaded
// Il2CppName: CalculatePathsThreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::*)(::Pathfinding::PathHandler*)>(&Pathfinding::PathProcessor::CalculatePathsThreaded)> {
  static const MethodInfo* get() {
    static auto* pathHandler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "CalculatePathsThreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathHandler});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::CalculatePaths
// Il2CppName: CalculatePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::PathProcessor::*)(::Pathfinding::PathHandler*)>(&Pathfinding::PathProcessor::CalculatePaths)> {
  static const MethodInfo* get() {
    static auto* pathHandler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor*), "CalculatePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathHandler});
  }
};
