// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.PathProcessor
#include "Pathfinding/PathProcessor.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathProcessor::GraphUpdateLock, "Pathfinding", "PathProcessor/GraphUpdateLock");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.PathProcessor/GraphUpdateLock
  // [TokenAttribute] Offset: FFFFFFFF
  struct PathProcessor::GraphUpdateLock/*, public ::System::ValueType*/ {
    public:
    public:
    // private Pathfinding.PathProcessor pathProcessor
    // Size: 0x8
    // Offset: 0x0
    ::Pathfinding::PathProcessor* pathProcessor;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathProcessor*) == 0x8);
    // private System.Int32 id
    // Size: 0x4
    // Offset: 0x8
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GraphUpdateLock
    constexpr GraphUpdateLock(::Pathfinding::PathProcessor* pathProcessor_ = {}, int id_ = {}) noexcept : pathProcessor{pathProcessor_}, id{id_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Pathfinding.PathProcessor pathProcessor
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathProcessor*& dyn_pathProcessor();
    // Get instance field reference: private System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // public System.Void .ctor(Pathfinding.PathProcessor pathProcessor, System.Boolean block)
    // Offset: 0x29B5604
    GraphUpdateLock(::Pathfinding::PathProcessor* pathProcessor, bool block);
    // public System.Boolean get_Held()
    // Offset: 0x29B6E40
    bool get_Held();
    // public System.Void Release()
    // Offset: 0x29B6EAC
    void Release();
  }; // Pathfinding.PathProcessor/GraphUpdateLock
  #pragma pack(pop)
  static check_size<sizeof(PathProcessor::GraphUpdateLock), 8 + sizeof(int)> __Pathfinding_PathProcessor_GraphUpdateLockSizeCheck;
  static_assert(sizeof(PathProcessor::GraphUpdateLock) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathProcessor::GraphUpdateLock::GraphUpdateLock
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::PathProcessor::GraphUpdateLock::get_Held
// Il2CppName: get_Held
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::PathProcessor::GraphUpdateLock::*)()>(&Pathfinding::PathProcessor::GraphUpdateLock::get_Held)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor::GraphUpdateLock), "get_Held", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathProcessor::GraphUpdateLock::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathProcessor::GraphUpdateLock::*)()>(&Pathfinding::PathProcessor::GraphUpdateLock::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathProcessor::GraphUpdateLock), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
