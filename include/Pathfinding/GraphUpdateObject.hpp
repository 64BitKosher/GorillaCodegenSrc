// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphUpdateShape
  class GraphUpdateShape;
  // Forward declaring type: GraphUpdateStage
  struct GraphUpdateStage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphUpdateObject);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphUpdateObject*, "Pathfinding", "GraphUpdateObject");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphUpdateObject
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphUpdateObject : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Bounds bounds
    // Size: 0x18
    // Offset: 0x10
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public System.Boolean updatePhysics
    // Size: 0x1
    // Offset: 0x28
    bool updatePhysics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean resetPenaltyOnPhysics
    // Size: 0x1
    // Offset: 0x29
    bool resetPenaltyOnPhysics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean updateErosion
    // Size: 0x1
    // Offset: 0x2A
    bool updateErosion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateErosion and: nnConstraint
    char __padding3[0x5] = {};
    // public Pathfinding.NNConstraint nnConstraint
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::NNConstraint* nnConstraint;
    // Field size check
    static_assert(sizeof(::Pathfinding::NNConstraint*) == 0x8);
    // public System.Int32 addPenalty
    // Size: 0x4
    // Offset: 0x38
    int addPenalty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean modifyWalkability
    // Size: 0x1
    // Offset: 0x3C
    bool modifyWalkability;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean setWalkability
    // Size: 0x1
    // Offset: 0x3D
    bool setWalkability;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean modifyTag
    // Size: 0x1
    // Offset: 0x3E
    bool modifyTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: modifyTag and: setTag
    char __padding8[0x1] = {};
    // public System.Int32 setTag
    // Size: 0x4
    // Offset: 0x40
    int setTag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean trackChangedNodes
    // Size: 0x1
    // Offset: 0x44
    bool trackChangedNodes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trackChangedNodes and: changedNodes
    char __padding10[0x3] = {};
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> changedNodes
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* changedNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> backupData
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<uint>* backupData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.Int3> backupPositionData
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::Pathfinding::Int3>* backupPositionData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::Int3>*) == 0x8);
    // public Pathfinding.GraphUpdateShape shape
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::GraphUpdateShape* shape;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphUpdateShape*) == 0x8);
    // System.Int32 internalStage
    // Size: 0x4
    // Offset: 0x68
    int internalStage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static System.Int32 STAGE_CREATED
    static constexpr const int STAGE_CREATED = -1;
    // Get static field: static System.Int32 STAGE_CREATED
    static int _get_STAGE_CREATED();
    // Set static field: static System.Int32 STAGE_CREATED
    static void _set_STAGE_CREATED(int value);
    // static field const value: static System.Int32 STAGE_PENDING
    static constexpr const int STAGE_PENDING = -2;
    // Get static field: static System.Int32 STAGE_PENDING
    static int _get_STAGE_PENDING();
    // Set static field: static System.Int32 STAGE_PENDING
    static void _set_STAGE_PENDING(int value);
    // static field const value: static System.Int32 STAGE_ABORTED
    static constexpr const int STAGE_ABORTED = -3;
    // Get static field: static System.Int32 STAGE_ABORTED
    static int _get_STAGE_ABORTED();
    // Set static field: static System.Int32 STAGE_ABORTED
    static void _set_STAGE_ABORTED(int value);
    // static field const value: static System.Int32 STAGE_APPLIED
    static constexpr const int STAGE_APPLIED = 0;
    // Get static field: static System.Int32 STAGE_APPLIED
    static int _get_STAGE_APPLIED();
    // Set static field: static System.Int32 STAGE_APPLIED
    static void _set_STAGE_APPLIED(int value);
    // Get instance field reference: public UnityEngine.Bounds bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bounds();
    // Get instance field reference: public System.Boolean updatePhysics
    [[deprecated("Use field access instead!")]] bool& dyn_updatePhysics();
    // Get instance field reference: public System.Boolean resetPenaltyOnPhysics
    [[deprecated("Use field access instead!")]] bool& dyn_resetPenaltyOnPhysics();
    // Get instance field reference: public System.Boolean updateErosion
    [[deprecated("Use field access instead!")]] bool& dyn_updateErosion();
    // Get instance field reference: public Pathfinding.NNConstraint nnConstraint
    [[deprecated("Use field access instead!")]] ::Pathfinding::NNConstraint*& dyn_nnConstraint();
    // Get instance field reference: public System.Int32 addPenalty
    [[deprecated("Use field access instead!")]] int& dyn_addPenalty();
    // Get instance field reference: public System.Boolean modifyWalkability
    [[deprecated("Use field access instead!")]] bool& dyn_modifyWalkability();
    // Get instance field reference: public System.Boolean setWalkability
    [[deprecated("Use field access instead!")]] bool& dyn_setWalkability();
    // Get instance field reference: public System.Boolean modifyTag
    [[deprecated("Use field access instead!")]] bool& dyn_modifyTag();
    // Get instance field reference: public System.Int32 setTag
    [[deprecated("Use field access instead!")]] int& dyn_setTag();
    // Get instance field reference: public System.Boolean trackChangedNodes
    [[deprecated("Use field access instead!")]] bool& dyn_trackChangedNodes();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode> changedNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_changedNodes();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> backupData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& dyn_backupData();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.Int3> backupPositionData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Int3>*& dyn_backupPositionData();
    // Get instance field reference: public Pathfinding.GraphUpdateShape shape
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphUpdateShape*& dyn_shape();
    // Get instance field reference: System.Int32 internalStage
    [[deprecated("Use field access instead!")]] int& dyn_internalStage();
    // public System.Void set_requiresFloodFill(System.Boolean value)
    // Offset: 0x2999264
    void set_requiresFloodFill(bool value);
    // public Pathfinding.GraphUpdateStage get_stage()
    // Offset: 0x2999268
    ::Pathfinding::GraphUpdateStage get_stage();
    // public System.Void WillUpdateNode(Pathfinding.GraphNode node)
    // Offset: 0x2999290
    void WillUpdateNode(::Pathfinding::GraphNode* node);
    // public System.Void RevertFromBackup()
    // Offset: 0x2999624
    void RevertFromBackup();
    // public System.Void Apply(Pathfinding.GraphNode node)
    // Offset: 0x29999C8
    void Apply(::Pathfinding::GraphNode* node);
    // public System.Void .ctor()
    // Offset: 0x2999A7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUpdateObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUpdateObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUpdateObject*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Bounds b)
    // Offset: 0x2999AC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphUpdateObject* New_ctor(::UnityEngine::Bounds b) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphUpdateObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphUpdateObject*, creationType>(b)));
    }
  }; // Pathfinding.GraphUpdateObject
  #pragma pack(pop)
  static check_size<sizeof(GraphUpdateObject), 104 + sizeof(int)> __Pathfinding_GraphUpdateObjectSizeCheck;
  static_assert(sizeof(GraphUpdateObject) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::set_requiresFloodFill
// Il2CppName: set_requiresFloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateObject::*)(bool)>(&Pathfinding::GraphUpdateObject::set_requiresFloodFill)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateObject*), "set_requiresFloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::get_stage
// Il2CppName: get_stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateStage (Pathfinding::GraphUpdateObject::*)()>(&Pathfinding::GraphUpdateObject::get_stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateObject*), "get_stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::WillUpdateNode
// Il2CppName: WillUpdateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateObject::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GraphUpdateObject::WillUpdateNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateObject*), "WillUpdateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::RevertFromBackup
// Il2CppName: RevertFromBackup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateObject::*)()>(&Pathfinding::GraphUpdateObject::RevertFromBackup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateObject*), "RevertFromBackup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphUpdateObject::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GraphUpdateObject::Apply)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphUpdateObject*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GraphUpdateObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
