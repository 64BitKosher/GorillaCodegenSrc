// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.RichPathPart
#include "Pathfinding/RichPathPart.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: NavmeshBase
  class NavmeshBase;
  // Forward declaring type: RichPath
  class RichPath;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: IRaycastableGraph
  class IRaycastableGraph;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichFunnel
  class RichFunnel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RichFunnel);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RichFunnel*, "Pathfinding", "RichFunnel");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RichFunnel
  // [TokenAttribute] Offset: FFFFFFFF
  class RichFunnel : public ::Pathfinding::RichPathPart {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> left
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* left;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> right
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* right;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.TriangleMeshNode> nodes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>* nodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>*) == 0x8);
    // public UnityEngine.Vector3 exactStart
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 exactStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 exactEnd
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 exactEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Pathfinding.NavmeshBase graph
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::NavmeshBase* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavmeshBase*) == 0x8);
    // private System.Int32 currentNode
    // Size: 0x4
    // Offset: 0x48
    int currentNode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 currentPosition
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 checkForDestroyedNodesCounter
    // Size: 0x4
    // Offset: 0x58
    int checkForDestroyedNodesCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: checkForDestroyedNodesCounter and: path
    char __padding8[0x4] = {};
    // private Pathfinding.RichPath path
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::RichPath* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::RichPath*) == 0x8);
    // private System.Int32[] triBuffer
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<int> triBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Boolean funnelSimplification
    // Size: 0x1
    // Offset: 0x70
    bool funnelSimplification;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Collections.Generic.Queue`1<Pathfinding.TriangleMeshNode> navmeshClampQueue
    static ::System::Collections::Generic::Queue_1<::Pathfinding::TriangleMeshNode*>* _get_navmeshClampQueue();
    // Set static field: static private System.Collections.Generic.Queue`1<Pathfinding.TriangleMeshNode> navmeshClampQueue
    static void _set_navmeshClampQueue(::System::Collections::Generic::Queue_1<::Pathfinding::TriangleMeshNode*>* value);
    // Get static field: static private System.Collections.Generic.List`1<Pathfinding.TriangleMeshNode> navmeshClampList
    static ::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>* _get_navmeshClampList();
    // Set static field: static private System.Collections.Generic.List`1<Pathfinding.TriangleMeshNode> navmeshClampList
    static void _set_navmeshClampList(::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<Pathfinding.TriangleMeshNode,Pathfinding.TriangleMeshNode> navmeshClampDict
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::TriangleMeshNode*, ::Pathfinding::TriangleMeshNode*>* _get_navmeshClampDict();
    // Set static field: static private System.Collections.Generic.Dictionary`2<Pathfinding.TriangleMeshNode,Pathfinding.TriangleMeshNode> navmeshClampDict
    static void _set_navmeshClampDict(::System::Collections::Generic::Dictionary_2<::Pathfinding::TriangleMeshNode*, ::Pathfinding::TriangleMeshNode*>* value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> left
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_left();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> right
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_right();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.TriangleMeshNode> nodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>*& dyn_nodes();
    // Get instance field reference: public UnityEngine.Vector3 exactStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_exactStart();
    // Get instance field reference: public UnityEngine.Vector3 exactEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_exactEnd();
    // Get instance field reference: private Pathfinding.NavmeshBase graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavmeshBase*& dyn_graph();
    // Get instance field reference: private System.Int32 currentNode
    [[deprecated("Use field access instead!")]] int& dyn_currentNode();
    // Get instance field reference: private UnityEngine.Vector3 currentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentPosition();
    // Get instance field reference: private System.Int32 checkForDestroyedNodesCounter
    [[deprecated("Use field access instead!")]] int& dyn_checkForDestroyedNodesCounter();
    // Get instance field reference: private Pathfinding.RichPath path
    [[deprecated("Use field access instead!")]] ::Pathfinding::RichPath*& dyn_path();
    // Get instance field reference: private System.Int32[] triBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triBuffer();
    // Get instance field reference: public System.Boolean funnelSimplification
    [[deprecated("Use field access instead!")]] bool& dyn_funnelSimplification();
    // public Pathfinding.RichFunnel Initialize(Pathfinding.RichPath path, Pathfinding.NavmeshBase graph)
    // Offset: 0x2993BB4
    ::Pathfinding::RichFunnel* Initialize(::Pathfinding::RichPath* path, ::Pathfinding::NavmeshBase* graph);
    // public Pathfinding.TriangleMeshNode get_CurrentNode()
    // Offset: 0x2994660
    ::Pathfinding::TriangleMeshNode* get_CurrentNode();
    // public System.Void BuildFunnelCorridor(System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes, System.Int32 start, System.Int32 end)
    // Offset: 0x2993CB4
    void BuildFunnelCorridor(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes, int start, int end);
    // private System.Void SimplifyPath(Pathfinding.IRaycastableGraph graph, System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes, System.Int32 start, System.Int32 end, System.Collections.Generic.List`1<Pathfinding.GraphNode> result, UnityEngine.Vector3 startPoint, UnityEngine.Vector3 endPoint)
    // Offset: 0x29946D0
    void SimplifyPath(::Pathfinding::IRaycastableGraph* graph, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes, int start, int end, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* result, ::UnityEngine::Vector3 startPoint, ::UnityEngine::Vector3 endPoint);
    // private System.Void UpdateFunnelCorridor(System.Int32 splitIndex, System.Collections.Generic.List`1<Pathfinding.TriangleMeshNode> prefix)
    // Offset: 0x299542C
    void UpdateFunnelCorridor(int splitIndex, ::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>* prefix);
    // private System.Boolean CheckForDestroyedNodes()
    // Offset: 0x2995730
    bool CheckForDestroyedNodes();
    // public System.Single get_DistanceToEndOfPath()
    // Offset: 0x29957E4
    float get_DistanceToEndOfPath();
    // public UnityEngine.Vector3 ClampToNavmesh(UnityEngine.Vector3 position)
    // Offset: 0x2992E28
    ::UnityEngine::Vector3 ClampToNavmesh(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 Update(UnityEngine.Vector3 position, System.Collections.Generic.List`1<UnityEngine.Vector3> buffer, System.Int32 numCorners, out System.Boolean lastCorner, out System.Boolean requiresRepath)
    // Offset: 0x29913C0
    ::UnityEngine::Vector3 Update(::UnityEngine::Vector3 position, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer, int numCorners, ByRef<bool> lastCorner, ByRef<bool> requiresRepath);
    // private System.Boolean ClampToNavmeshInternal(ref UnityEngine.Vector3 position)
    // Offset: 0x29958B0
    bool ClampToNavmeshInternal(ByRef<::UnityEngine::Vector3> position);
    // public System.Void FindWalls(System.Collections.Generic.List`1<UnityEngine.Vector3> wallBuffer, System.Single range)
    // Offset: 0x2992704
    void FindWalls(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* wallBuffer, float range);
    // private System.Void FindWalls(System.Int32 nodeIndex, System.Collections.Generic.List`1<UnityEngine.Vector3> wallBuffer, UnityEngine.Vector3 position, System.Single range)
    // Offset: 0x29968D0
    void FindWalls(int nodeIndex, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* wallBuffer, ::UnityEngine::Vector3 position, float range);
    // private System.Boolean FindNextCorners(UnityEngine.Vector3 origin, System.Int32 startIndex, System.Collections.Generic.List`1<UnityEngine.Vector3> funnelPath, System.Int32 numCorners, out System.Boolean lastCorner)
    // Offset: 0x2995EE0
    bool FindNextCorners(::UnityEngine::Vector3 origin, int startIndex, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* funnelPath, int numCorners, ByRef<bool> lastCorner);
    // static private System.Void .cctor()
    // Offset: 0x2996FA8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x2994474
    // Implemented from: Pathfinding.RichPathPart
    // Base method: System.Void RichPathPart::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RichFunnel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RichFunnel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RichFunnel*, creationType>()));
    }
    // public override System.Void OnEnterPool()
    // Offset: 0x29945AC
    // Implemented from: Pathfinding.RichPathPart
    // Base method: System.Void RichPathPart::OnEnterPool()
    void OnEnterPool();
  }; // Pathfinding.RichFunnel
  #pragma pack(pop)
  static check_size<sizeof(RichFunnel), 112 + sizeof(bool)> __Pathfinding_RichFunnelSizeCheck;
  static_assert(sizeof(RichFunnel) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RichFunnel::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RichFunnel* (Pathfinding::RichFunnel::*)(::Pathfinding::RichPath*, ::Pathfinding::NavmeshBase*)>(&Pathfinding::RichFunnel::Initialize)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichPath")->byval_arg;
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavmeshBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::get_CurrentNode
// Il2CppName: get_CurrentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::TriangleMeshNode* (Pathfinding::RichFunnel::*)()>(&Pathfinding::RichFunnel::get_CurrentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "get_CurrentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::BuildFunnelCorridor
// Il2CppName: BuildFunnelCorridor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, int, int)>(&Pathfinding::RichFunnel::BuildFunnelCorridor)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "BuildFunnelCorridor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::SimplifyPath
// Il2CppName: SimplifyPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)(::Pathfinding::IRaycastableGraph*, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, int, int, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::RichFunnel::SimplifyPath)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "IRaycastableGraph")->byval_arg;
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* startPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "SimplifyPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, nodes, start, end, result, startPoint, endPoint});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::UpdateFunnelCorridor
// Il2CppName: UpdateFunnelCorridor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)(int, ::System::Collections::Generic::List_1<::Pathfinding::TriangleMeshNode*>*)>(&Pathfinding::RichFunnel::UpdateFunnelCorridor)> {
  static const MethodInfo* get() {
    static auto* splitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prefix = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "UpdateFunnelCorridor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{splitIndex, prefix});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::CheckForDestroyedNodes
// Il2CppName: CheckForDestroyedNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichFunnel::*)()>(&Pathfinding::RichFunnel::CheckForDestroyedNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "CheckForDestroyedNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::get_DistanceToEndOfPath
// Il2CppName: get_DistanceToEndOfPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichFunnel::*)()>(&Pathfinding::RichFunnel::get_DistanceToEndOfPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "get_DistanceToEndOfPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::ClampToNavmesh
// Il2CppName: ClampToNavmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichFunnel::*)(::UnityEngine::Vector3)>(&Pathfinding::RichFunnel::ClampToNavmesh)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "ClampToNavmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichFunnel::*)(::UnityEngine::Vector3, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, ByRef<bool>, ByRef<bool>)>(&Pathfinding::RichFunnel::Update)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* numCorners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastCorner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* requiresRepath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, buffer, numCorners, lastCorner, requiresRepath});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::ClampToNavmeshInternal
// Il2CppName: ClampToNavmeshInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichFunnel::*)(ByRef<::UnityEngine::Vector3>)>(&Pathfinding::RichFunnel::ClampToNavmeshInternal)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "ClampToNavmeshInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::FindWalls
// Il2CppName: FindWalls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float)>(&Pathfinding::RichFunnel::FindWalls)> {
  static const MethodInfo* get() {
    static auto* wallBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "FindWalls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wallBuffer, range});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::FindWalls
// Il2CppName: FindWalls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::UnityEngine::Vector3, float)>(&Pathfinding::RichFunnel::FindWalls)> {
  static const MethodInfo* get() {
    static auto* nodeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wallBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "FindWalls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeIndex, wallBuffer, position, range});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::FindNextCorners
// Il2CppName: FindNextCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichFunnel::*)(::UnityEngine::Vector3, int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, ByRef<bool>)>(&Pathfinding::RichFunnel::FindNextCorners)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* funnelPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* numCorners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastCorner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "FindNextCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, startIndex, funnelPath, numCorners, lastCorner});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::RichFunnel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichFunnel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RichFunnel::OnEnterPool
// Il2CppName: OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichFunnel::*)()>(&Pathfinding::RichFunnel::OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichFunnel*), "OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
