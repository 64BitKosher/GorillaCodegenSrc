// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ITraversalProvider
  class ITraversalProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ITraversalProvider);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ITraversalProvider*, "Pathfinding", "ITraversalProvider");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ITraversalProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class ITraversalProvider {
    public:
    // public System.Boolean CanTraverse(Pathfinding.Path path, Pathfinding.GraphNode node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanTraverse(::Pathfinding::Path* path, ::Pathfinding::GraphNode* node);
    // public System.UInt32 GetTraversalCost(Pathfinding.Path path, Pathfinding.GraphNode node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint GetTraversalCost(::Pathfinding::Path* path, ::Pathfinding::GraphNode* node);
  }; // Pathfinding.ITraversalProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ITraversalProvider::CanTraverse
// Il2CppName: CanTraverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ITraversalProvider::*)(::Pathfinding::Path*, ::Pathfinding::GraphNode*)>(&Pathfinding::ITraversalProvider::CanTraverse)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ITraversalProvider*), "CanTraverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::ITraversalProvider::GetTraversalCost
// Il2CppName: GetTraversalCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::ITraversalProvider::*)(::Pathfinding::Path*, ::Pathfinding::GraphNode*)>(&Pathfinding::ITraversalProvider::GetTraversalCost)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ITraversalProvider*), "GetTraversalCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, node});
  }
};
