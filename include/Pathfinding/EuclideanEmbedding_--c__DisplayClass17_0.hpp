// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.EuclideanEmbedding
#include "Pathfinding/EuclideanEmbedding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0*, "Pathfinding", "EuclideanEmbedding/<>c__DisplayClass17_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.EuclideanEmbedding/<>c__DisplayClass17_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class EuclideanEmbedding::$$c__DisplayClass17_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 n
    // Size: 0x4
    // Offset: 0x10
    int n;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: n and: $$4__this
    char __padding0[0x4] = {};
    // public Pathfinding.EuclideanEmbedding <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::EuclideanEmbedding* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding*) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: buffer
    char __padding2[0x4] = {};
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> buffer
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* buffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Action`1<Pathfinding.GraphNode> <>9__0
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::Pathfinding::GraphNode*>* $$9__0;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Pathfinding::GraphNode*>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 n
    [[deprecated("Use field access instead!")]] int& dyn_n();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding*& dyn_$$4__this();
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode> buffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_buffer();
    // Get instance field reference: public System.Action`1<Pathfinding.GraphNode> <>9__0
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Pathfinding::GraphNode*>*& dyn_$$9__0();
    // public System.Void .ctor()
    // Offset: 0x29E8360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EuclideanEmbedding::$$c__DisplayClass17_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EuclideanEmbedding::$$c__DisplayClass17_0*, creationType>()));
    }
    // System.Void <PickNRandomNodes>b__0(Pathfinding.GraphNode node)
    // Offset: 0x29E9310
    void $PickNRandomNodes$b__0(::Pathfinding::GraphNode* node);
  }; // Pathfinding.EuclideanEmbedding/<>c__DisplayClass17_0
  #pragma pack(pop)
  static check_size<sizeof(EuclideanEmbedding::$$c__DisplayClass17_0), 48 + sizeof(::System::Action_1<::Pathfinding::GraphNode*>*)> __Pathfinding_EuclideanEmbedding_$$c__DisplayClass17_0SizeCheck;
  static_assert(sizeof(EuclideanEmbedding::$$c__DisplayClass17_0) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0::$PickNRandomNodes$b__0
// Il2CppName: <PickNRandomNodes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0::$PickNRandomNodes$b__0)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::EuclideanEmbedding::$$c__DisplayClass17_0*), "<PickNRandomNodes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
