// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AIBase
#include "Pathfinding/AIBase.hpp"
// Including type: Pathfinding.IAstarAI
#include "Pathfinding/IAstarAI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichSpecial
  class RichSpecial;
  // Forward declaring type: RichPath
  class RichPath;
  // Forward declaring type: RichFunnel
  class RichFunnel;
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector2 because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RichAI
  class RichAI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RichAI);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RichAI*, "Pathfinding", "RichAI");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x190
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RichAI
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class RichAI : public ::Pathfinding::AIBase/*, public ::Pathfinding::IAstarAI*/ {
    public:
    // Nested type: ::Pathfinding::RichAI::$TraverseOffMeshLinkFallback$d__69
    class $TraverseOffMeshLinkFallback$d__69;
    // Nested type: ::Pathfinding::RichAI::$TraverseSpecial$d__68
    class $TraverseSpecial$d__68;
    public:
    // public System.Single acceleration
    // Size: 0x4
    // Offset: 0x130
    float acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationSpeed
    // Size: 0x4
    // Offset: 0x134
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowdownTime
    // Size: 0x4
    // Offset: 0x138
    float slowdownTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endReachedDistance
    // Size: 0x4
    // Offset: 0x13C
    float endReachedDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single wallForce
    // Size: 0x4
    // Offset: 0x140
    float wallForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single wallDist
    // Size: 0x4
    // Offset: 0x144
    float wallDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean funnelSimplification
    // Size: 0x1
    // Offset: 0x148
    bool funnelSimplification;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean slowWhenNotFacingTarget
    // Size: 0x1
    // Offset: 0x149
    bool slowWhenNotFacingTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: slowWhenNotFacingTarget and: onTraverseOffMeshLink
    char __padding7[0x6] = {};
    // public System.Func`2<Pathfinding.RichSpecial,System.Collections.IEnumerator> onTraverseOffMeshLink
    // Size: 0x8
    // Offset: 0x150
    ::System::Func_2<::Pathfinding::RichSpecial*, ::System::Collections::IEnumerator*>* onTraverseOffMeshLink;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Pathfinding::RichSpecial*, ::System::Collections::IEnumerator*>*) == 0x8);
    // protected readonly Pathfinding.RichPath richPath
    // Size: 0x8
    // Offset: 0x158
    ::Pathfinding::RichPath* richPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::RichPath*) == 0x8);
    // protected System.Boolean delayUpdatePath
    // Size: 0x1
    // Offset: 0x160
    bool delayUpdatePath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean lastCorner
    // Size: 0x1
    // Offset: 0x161
    bool lastCorner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastCorner and: distanceToSteeringTarget
    char __padding11[0x2] = {};
    // protected System.Single distanceToSteeringTarget
    // Size: 0x4
    // Offset: 0x164
    float distanceToSteeringTarget;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected readonly System.Collections.Generic.List`1<UnityEngine.Vector3> nextCorners
    // Size: 0x8
    // Offset: 0x168
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* nextCorners;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // protected readonly System.Collections.Generic.List`1<UnityEngine.Vector3> wallBuffer
    // Size: 0x8
    // Offset: 0x170
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* wallBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Boolean <traversingOffMeshLink>k__BackingField
    // Size: 0x1
    // Offset: 0x178
    bool traversingOffMeshLink;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: traversingOffMeshLink and: steeringTarget
    char __padding15[0x3] = {};
    // private UnityEngine.Vector3 <steeringTarget>k__BackingField
    // Size: 0xC
    // Offset: 0x17C
    ::UnityEngine::Vector3 steeringTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Animation animCompatibility
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Animation* animCompatibility;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IAstarAI
    operator ::Pathfinding::IAstarAI() noexcept {
      return *reinterpret_cast<::Pathfinding::IAstarAI*>(this);
    }
    // Get static field: static protected readonly UnityEngine.Color GizmoColorPath
    static ::UnityEngine::Color _get_GizmoColorPath();
    // Set static field: static protected readonly UnityEngine.Color GizmoColorPath
    static void _set_GizmoColorPath(::UnityEngine::Color value);
    // Get instance field reference: public System.Single acceleration
    [[deprecated("Use field access instead!")]] float& dyn_acceleration();
    // Get instance field reference: public System.Single rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotationSpeed();
    // Get instance field reference: public System.Single slowdownTime
    [[deprecated("Use field access instead!")]] float& dyn_slowdownTime();
    // Get instance field reference: public System.Single endReachedDistance
    [[deprecated("Use field access instead!")]] float& dyn_endReachedDistance();
    // Get instance field reference: public System.Single wallForce
    [[deprecated("Use field access instead!")]] float& dyn_wallForce();
    // Get instance field reference: public System.Single wallDist
    [[deprecated("Use field access instead!")]] float& dyn_wallDist();
    // Get instance field reference: public System.Boolean funnelSimplification
    [[deprecated("Use field access instead!")]] bool& dyn_funnelSimplification();
    // Get instance field reference: public System.Boolean slowWhenNotFacingTarget
    [[deprecated("Use field access instead!")]] bool& dyn_slowWhenNotFacingTarget();
    // Get instance field reference: public System.Func`2<Pathfinding.RichSpecial,System.Collections.IEnumerator> onTraverseOffMeshLink
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Pathfinding::RichSpecial*, ::System::Collections::IEnumerator*>*& dyn_onTraverseOffMeshLink();
    // Get instance field reference: protected readonly Pathfinding.RichPath richPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::RichPath*& dyn_richPath();
    // Get instance field reference: protected System.Boolean delayUpdatePath
    [[deprecated("Use field access instead!")]] bool& dyn_delayUpdatePath();
    // Get instance field reference: protected System.Boolean lastCorner
    [[deprecated("Use field access instead!")]] bool& dyn_lastCorner();
    // Get instance field reference: protected System.Single distanceToSteeringTarget
    [[deprecated("Use field access instead!")]] float& dyn_distanceToSteeringTarget();
    // Get instance field reference: protected readonly System.Collections.Generic.List`1<UnityEngine.Vector3> nextCorners
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_nextCorners();
    // Get instance field reference: protected readonly System.Collections.Generic.List`1<UnityEngine.Vector3> wallBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_wallBuffer();
    // Get instance field reference: private System.Boolean <traversingOffMeshLink>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$traversingOffMeshLink$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <steeringTarget>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$steeringTarget$k__BackingField();
    // Get instance field reference: private UnityEngine.Animation animCompatibility
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn_animCompatibility();
    // public System.Boolean get_traversingOffMeshLink()
    // Offset: 0x298F8C0
    bool get_traversingOffMeshLink();
    // protected System.Void set_traversingOffMeshLink(System.Boolean value)
    // Offset: 0x298F8C8
    void set_traversingOffMeshLink(bool value);
    // public System.Single get_remainingDistance()
    // Offset: 0x298F8D4
    float get_remainingDistance();
    // public System.Boolean get_reachedEndOfPath()
    // Offset: 0x298F974
    bool get_reachedEndOfPath();
    // public System.Boolean get_reachedDestination()
    // Offset: 0x298F9D4
    bool get_reachedDestination();
    // public System.Boolean get_hasPath()
    // Offset: 0x298FC50
    bool get_hasPath();
    // public System.Boolean get_pathPending()
    // Offset: 0x298FCF8
    bool get_pathPending();
    // public UnityEngine.Vector3 get_steeringTarget()
    // Offset: 0x298FD18
    ::UnityEngine::Vector3 get_steeringTarget();
    // protected System.Void set_steeringTarget(UnityEngine.Vector3 value)
    // Offset: 0x298FD28
    void set_steeringTarget(::UnityEngine::Vector3 value);
    // private System.Single Pathfinding.IAstarAI.get_radius()
    // Offset: 0x298FD38
    float Pathfinding_IAstarAI_get_radius();
    // private System.Void Pathfinding.IAstarAI.set_radius(System.Single value)
    // Offset: 0x298FD40
    void Pathfinding_IAstarAI_set_radius(float value);
    // private System.Single Pathfinding.IAstarAI.get_height()
    // Offset: 0x298FD48
    float Pathfinding_IAstarAI_get_height();
    // private System.Void Pathfinding.IAstarAI.set_height(System.Single value)
    // Offset: 0x298FD50
    void Pathfinding_IAstarAI_set_height(float value);
    // private System.Single Pathfinding.IAstarAI.get_maxSpeed()
    // Offset: 0x298FD58
    float Pathfinding_IAstarAI_get_maxSpeed();
    // private System.Void Pathfinding.IAstarAI.set_maxSpeed(System.Single value)
    // Offset: 0x298FD60
    void Pathfinding_IAstarAI_set_maxSpeed(float value);
    // private System.Boolean Pathfinding.IAstarAI.get_canSearch()
    // Offset: 0x298FD68
    bool Pathfinding_IAstarAI_get_canSearch();
    // private System.Void Pathfinding.IAstarAI.set_canSearch(System.Boolean value)
    // Offset: 0x298FD8C
    void Pathfinding_IAstarAI_set_canSearch(bool value);
    // private System.Boolean Pathfinding.IAstarAI.get_canMove()
    // Offset: 0x298FDC0
    bool Pathfinding_IAstarAI_get_canMove();
    // private System.Void Pathfinding.IAstarAI.set_canMove(System.Boolean value)
    // Offset: 0x298FDC8
    void Pathfinding_IAstarAI_set_canMove(bool value);
    // public System.Boolean get_approachingPartEndpoint()
    // Offset: 0x298FDD4
    bool get_approachingPartEndpoint();
    // public System.Boolean get_approachingPathEndpoint()
    // Offset: 0x298F9A4
    bool get_approachingPathEndpoint();
    // protected System.Void NextPart()
    // Offset: 0x2990ECC
    void NextPart();
    // public System.Void GetRemainingPath(System.Collections.Generic.List`1<UnityEngine.Vector3> buffer, out System.Boolean stale)
    // Offset: 0x2991094
    void GetRemainingPath(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* buffer, ByRef<bool> stale);
    // protected System.Void OnTargetReached()
    // Offset: 0x29912E0
    void OnTargetReached();
    // protected UnityEngine.Vector3 UpdateTarget(Pathfinding.RichFunnel fn)
    // Offset: 0x29912E4
    ::UnityEngine::Vector3 UpdateTarget(::Pathfinding::RichFunnel* fn);
    // private System.Void TraverseFunnel(Pathfinding.RichFunnel fn, System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x2991A88
    void TraverseFunnel(::Pathfinding::RichFunnel* fn, float deltaTime, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // private System.Void FinalMovement(UnityEngine.Vector3 position3D, System.Single deltaTime, System.Single distanceToEndOfPath, System.Single slowdownFactor, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x29921B0
    void FinalMovement(::UnityEngine::Vector3 position3D, float deltaTime, float distanceToEndOfPath, float slowdownFactor, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // private UnityEngine.Vector2 CalculateWallForce(UnityEngine.Vector2 position, System.Single elevation, UnityEngine.Vector2 directionToTarget)
    // Offset: 0x2992720
    ::UnityEngine::Vector2 CalculateWallForce(::UnityEngine::Vector2 position, float elevation, ::UnityEngine::Vector2 directionToTarget);
    // protected System.Collections.IEnumerator TraverseSpecial(Pathfinding.RichSpecial link)
    // Offset: 0x2992FC0
    ::System::Collections::IEnumerator* TraverseSpecial(::Pathfinding::RichSpecial* link);
    // protected System.Collections.IEnumerator TraverseOffMeshLinkFallback(Pathfinding.RichSpecial link)
    // Offset: 0x2993070
    ::System::Collections::IEnumerator* TraverseOffMeshLinkFallback(::Pathfinding::RichSpecial* link);
    // public System.Void UpdatePath()
    // Offset: 0x299340C
    void UpdatePath();
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x299341C
    ::UnityEngine::Vector3 get_Velocity();
    // public UnityEngine.Vector3 get_NextWaypoint()
    // Offset: 0x2993420
    ::UnityEngine::Vector3 get_NextWaypoint();
    // public System.Single get_DistanceToNextWaypoint()
    // Offset: 0x2993430
    float get_DistanceToNextWaypoint();
    // public System.Boolean get_repeatedlySearchPaths()
    // Offset: 0x2993438
    bool get_repeatedlySearchPaths();
    // public System.Void set_repeatedlySearchPaths(System.Boolean value)
    // Offset: 0x299345C
    void set_repeatedlySearchPaths(bool value);
    // public System.Boolean get_TargetReached()
    // Offset: 0x2993490
    bool get_TargetReached();
    // public System.Boolean get_PathPending()
    // Offset: 0x29934C0
    bool get_PathPending();
    // public System.Boolean get_ApproachingPartEndpoint()
    // Offset: 0x29934E0
    bool get_ApproachingPartEndpoint();
    // public System.Boolean get_ApproachingPathEndpoint()
    // Offset: 0x29934E4
    bool get_ApproachingPathEndpoint();
    // public System.Boolean get_TraversingSpecial()
    // Offset: 0x29934E8
    bool get_TraversingSpecial();
    // public UnityEngine.Vector3 get_TargetPoint()
    // Offset: 0x29934F0
    ::UnityEngine::Vector3 get_TargetPoint();
    // public UnityEngine.Animation get_anim()
    // Offset: 0x2993500
    ::UnityEngine::Animation* get_anim();
    // public System.Void set_anim(UnityEngine.Animation value)
    // Offset: 0x2993320
    void set_anim(::UnityEngine::Animation* value);
    // public override System.Void Teleport(UnityEngine.Vector3 newPosition, System.Boolean clearPath)
    // Offset: 0x298FE8C
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::Teleport(UnityEngine.Vector3 newPosition, System.Boolean clearPath)
    void Teleport(::UnityEngine::Vector3 newPosition, bool clearPath);
    // protected override System.Void OnDisable()
    // Offset: 0x299013C
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::OnDisable()
    void OnDisable();
    // protected override System.Boolean get_shouldRecalculatePath()
    // Offset: 0x299015C
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Boolean AIBase::get_shouldRecalculatePath()
    bool get_shouldRecalculatePath();
    // public override System.Void SearchPath()
    // Offset: 0x2990188
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::SearchPath()
    void SearchPath();
    // protected override System.Void OnPathComplete(Pathfinding.Path p)
    // Offset: 0x29901A0
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::OnPathComplete(Pathfinding.Path p)
    void OnPathComplete(::Pathfinding::Path* p);
    // protected override System.Void ClearPath()
    // Offset: 0x2990F38
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::ClearPath()
    void ClearPath();
    // protected override System.Void MovementUpdateInternal(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x29917C8
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::MovementUpdateInternal(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    void MovementUpdateInternal(float deltaTime, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // protected override UnityEngine.Vector3 ClampToNavmesh(UnityEngine.Vector3 position, out System.Boolean positionChanged)
    // Offset: 0x2992B88
    // Implemented from: Pathfinding.AIBase
    // Base method: UnityEngine.Vector3 AIBase::ClampToNavmesh(UnityEngine.Vector3 position, out System.Boolean positionChanged)
    ::UnityEngine::Vector3 ClampToNavmesh(::UnityEngine::Vector3 position, ByRef<bool> positionChanged);
    // protected override System.Void OnDrawGizmos()
    // Offset: 0x2993120
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::OnDrawGizmos()
    void OnDrawGizmos();
    // protected override System.Int32 OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    // Offset: 0x2993284
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Int32 AIBase::OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    int OnUpgradeSerializedData(int version, bool unityThread);
    // public System.Void .ctor()
    // Offset: 0x29935A8
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::.ctor()
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RichAI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RichAI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RichAI*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2993768
    // Implemented from: Pathfinding.AIBase
    // Base method: System.Void AIBase::.cctor()
    static void _cctor();
  }; // Pathfinding.RichAI
  #pragma pack(pop)
  static check_size<sizeof(RichAI), 392 + sizeof(::UnityEngine::Animation*)> __Pathfinding_RichAISizeCheck;
  static_assert(sizeof(RichAI) == 0x190);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RichAI::get_traversingOffMeshLink
// Il2CppName: get_traversingOffMeshLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_traversingOffMeshLink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_traversingOffMeshLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::set_traversingOffMeshLink
// Il2CppName: set_traversingOffMeshLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(bool)>(&Pathfinding::RichAI::set_traversingOffMeshLink)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "set_traversingOffMeshLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_remainingDistance
// Il2CppName: get_remainingDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_remainingDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_remainingDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_reachedEndOfPath
// Il2CppName: get_reachedEndOfPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_reachedEndOfPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_reachedEndOfPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_reachedDestination
// Il2CppName: get_reachedDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_reachedDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_reachedDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_hasPath
// Il2CppName: get_hasPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_hasPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_hasPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_pathPending
// Il2CppName: get_pathPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_pathPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_pathPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_steeringTarget
// Il2CppName: get_steeringTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_steeringTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_steeringTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::set_steeringTarget
// Il2CppName: set_steeringTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::UnityEngine::Vector3)>(&Pathfinding::RichAI::set_steeringTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "set_steeringTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_get_radius
// Il2CppName: Pathfinding.IAstarAI.get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::Pathfinding_IAstarAI_get_radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_set_radius
// Il2CppName: Pathfinding.IAstarAI.set_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(float)>(&Pathfinding::RichAI::Pathfinding_IAstarAI_set_radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.set_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_get_height
// Il2CppName: Pathfinding.IAstarAI.get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::Pathfinding_IAstarAI_get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_set_height
// Il2CppName: Pathfinding.IAstarAI.set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(float)>(&Pathfinding::RichAI::Pathfinding_IAstarAI_set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_get_maxSpeed
// Il2CppName: Pathfinding.IAstarAI.get_maxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::Pathfinding_IAstarAI_get_maxSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.get_maxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_set_maxSpeed
// Il2CppName: Pathfinding.IAstarAI.set_maxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(float)>(&Pathfinding::RichAI::Pathfinding_IAstarAI_set_maxSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.set_maxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_get_canSearch
// Il2CppName: Pathfinding.IAstarAI.get_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::Pathfinding_IAstarAI_get_canSearch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.get_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_set_canSearch
// Il2CppName: Pathfinding.IAstarAI.set_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(bool)>(&Pathfinding::RichAI::Pathfinding_IAstarAI_set_canSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.set_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_get_canMove
// Il2CppName: Pathfinding.IAstarAI.get_canMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::Pathfinding_IAstarAI_get_canMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.get_canMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Pathfinding_IAstarAI_set_canMove
// Il2CppName: Pathfinding.IAstarAI.set_canMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(bool)>(&Pathfinding::RichAI::Pathfinding_IAstarAI_set_canMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Pathfinding.IAstarAI.set_canMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_approachingPartEndpoint
// Il2CppName: get_approachingPartEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_approachingPartEndpoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_approachingPartEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_approachingPathEndpoint
// Il2CppName: get_approachingPathEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_approachingPathEndpoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_approachingPathEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::NextPart
// Il2CppName: NextPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::NextPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "NextPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::GetRemainingPath
// Il2CppName: GetRemainingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ByRef<bool>)>(&Pathfinding::RichAI::GetRemainingPath)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* stale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "GetRemainingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, stale});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::OnTargetReached
// Il2CppName: OnTargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::OnTargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "OnTargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)(::Pathfinding::RichFunnel*)>(&Pathfinding::RichAI::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* fn = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichFunnel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fn});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::TraverseFunnel
// Il2CppName: TraverseFunnel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::Pathfinding::RichFunnel*, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::RichAI::TraverseFunnel)> {
  static const MethodInfo* get() {
    static auto* fn = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichFunnel")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "TraverseFunnel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fn, deltaTime, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::FinalMovement
// Il2CppName: FinalMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::UnityEngine::Vector3, float, float, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::RichAI::FinalMovement)> {
  static const MethodInfo* get() {
    static auto* position3D = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distanceToEndOfPath = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* slowdownFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "FinalMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position3D, deltaTime, distanceToEndOfPath, slowdownFactor, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::CalculateWallForce
// Il2CppName: CalculateWallForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::RichAI::*)(::UnityEngine::Vector2, float, ::UnityEngine::Vector2)>(&Pathfinding::RichAI::CalculateWallForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* elevation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* directionToTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "CalculateWallForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, elevation, directionToTarget});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::TraverseSpecial
// Il2CppName: TraverseSpecial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::RichAI::*)(::Pathfinding::RichSpecial*)>(&Pathfinding::RichAI::TraverseSpecial)> {
  static const MethodInfo* get() {
    static auto* link = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichSpecial")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "TraverseSpecial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{link});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::TraverseOffMeshLinkFallback
// Il2CppName: TraverseOffMeshLinkFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::RichAI::*)(::Pathfinding::RichSpecial*)>(&Pathfinding::RichAI::TraverseOffMeshLinkFallback)> {
  static const MethodInfo* get() {
    static auto* link = &::il2cpp_utils::GetClassFromName("Pathfinding", "RichSpecial")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "TraverseOffMeshLinkFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{link});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::UpdatePath
// Il2CppName: UpdatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::UpdatePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "UpdatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_NextWaypoint
// Il2CppName: get_NextWaypoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_NextWaypoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_NextWaypoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_DistanceToNextWaypoint
// Il2CppName: get_DistanceToNextWaypoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_DistanceToNextWaypoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_DistanceToNextWaypoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_repeatedlySearchPaths
// Il2CppName: get_repeatedlySearchPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_repeatedlySearchPaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_repeatedlySearchPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::set_repeatedlySearchPaths
// Il2CppName: set_repeatedlySearchPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(bool)>(&Pathfinding::RichAI::set_repeatedlySearchPaths)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "set_repeatedlySearchPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_TargetReached
// Il2CppName: get_TargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_TargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_TargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_PathPending
// Il2CppName: get_PathPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_PathPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_PathPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_ApproachingPartEndpoint
// Il2CppName: get_ApproachingPartEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_ApproachingPartEndpoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_ApproachingPartEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_ApproachingPathEndpoint
// Il2CppName: get_ApproachingPathEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_ApproachingPathEndpoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_ApproachingPathEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_TraversingSpecial
// Il2CppName: get_TraversingSpecial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_TraversingSpecial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_TraversingSpecial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_TargetPoint
// Il2CppName: get_TargetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_TargetPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_TargetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_anim
// Il2CppName: get_anim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animation* (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_anim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_anim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::set_anim
// Il2CppName: set_anim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::UnityEngine::Animation*)>(&Pathfinding::RichAI::set_anim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "set_anim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::Teleport
// Il2CppName: Teleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::UnityEngine::Vector3, bool)>(&Pathfinding::RichAI::Teleport)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* clearPath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "Teleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition, clearPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::get_shouldRecalculatePath
// Il2CppName: get_shouldRecalculatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::get_shouldRecalculatePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "get_shouldRecalculatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::SearchPath
// Il2CppName: SearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::SearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "SearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(::Pathfinding::Path*)>(&Pathfinding::RichAI::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::ClearPath
// Il2CppName: ClearPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::ClearPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "ClearPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::MovementUpdateInternal
// Il2CppName: MovementUpdateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::RichAI::MovementUpdateInternal)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "MovementUpdateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::ClampToNavmesh
// Il2CppName: ClampToNavmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RichAI::*)(::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::RichAI::ClampToNavmesh)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* positionChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "ClampToNavmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, positionChanged});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RichAI::*)()>(&Pathfinding::RichAI::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::OnUpgradeSerializedData
// Il2CppName: OnUpgradeSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RichAI::*)(int, bool)>(&Pathfinding::RichAI::OnUpgradeSerializedData)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* unityThread = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), "OnUpgradeSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, unityThread});
  }
};
// Writing MetadataGetter for method: Pathfinding::RichAI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RichAI::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::RichAI::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RichAI*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
