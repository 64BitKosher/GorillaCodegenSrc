// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: AdvancingFront
  class AdvancingFront;
  // Forward declaring type: DTSweepBasin
  class DTSweepBasin;
  // Forward declaring type: DTSweepEdgeEvent
  class DTSweepEdgeEvent;
  // Forward declaring type: DTSweepPointComparator
  class DTSweepPointComparator;
  // Forward declaring type: TriangulationPoint
  class TriangulationPoint;
  // Forward declaring type: DelaunayTriangle
  class DelaunayTriangle;
  // Forward declaring type: AdvancingFrontNode
  class AdvancingFrontNode;
  // Forward declaring type: Triangulatable
  class Triangulatable;
  // Forward declaring type: TriangulationConstraint
  class TriangulationConstraint;
  // Forward declaring type: TriangulationAlgorithm
  struct TriangulationAlgorithm;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: DTSweepContext
  class DTSweepContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::DTSweepContext);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::DTSweepContext*, "Pathfinding.Poly2Tri", "DTSweepContext");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.DTSweepContext
  // [TokenAttribute] Offset: FFFFFFFF
  class DTSweepContext : public ::Pathfinding::Poly2Tri::TriangulationContext {
    public:
    // Writing base type padding for base size: 0x3D to desired offset: 0x40
    char ___base_padding[0x3] = {};
    public:
    // private readonly System.Single ALPHA
    // Size: 0x4
    // Offset: 0x40
    float ALPHA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: ALPHA and: Front
    char __padding0[0x4] = {};
    // public Pathfinding.Poly2Tri.AdvancingFront Front
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::Poly2Tri::AdvancingFront* Front;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::AdvancingFront*) == 0x8);
    // public Pathfinding.Poly2Tri.DTSweepBasin Basin
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::Poly2Tri::DTSweepBasin* Basin;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::DTSweepBasin*) == 0x8);
    // public Pathfinding.Poly2Tri.DTSweepEdgeEvent EdgeEvent
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::Poly2Tri::DTSweepEdgeEvent* EdgeEvent;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::DTSweepEdgeEvent*) == 0x8);
    // private Pathfinding.Poly2Tri.DTSweepPointComparator _comparator
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::Poly2Tri::DTSweepPointComparator* comparator;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::DTSweepPointComparator*) == 0x8);
    // private Pathfinding.Poly2Tri.TriangulationPoint <Head>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Poly2Tri::TriangulationPoint* Head;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*) == 0x8);
    // private Pathfinding.Poly2Tri.TriangulationPoint <Tail>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::Poly2Tri::TriangulationPoint* Tail;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Single ALPHA
    [[deprecated("Use field access instead!")]] float& dyn_ALPHA();
    // Get instance field reference: public Pathfinding.Poly2Tri.AdvancingFront Front
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFront*& dyn_Front();
    // Get instance field reference: public Pathfinding.Poly2Tri.DTSweepBasin Basin
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepBasin*& dyn_Basin();
    // Get instance field reference: public Pathfinding.Poly2Tri.DTSweepEdgeEvent EdgeEvent
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepEdgeEvent*& dyn_EdgeEvent();
    // Get instance field reference: private Pathfinding.Poly2Tri.DTSweepPointComparator _comparator
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepPointComparator*& dyn__comparator();
    // Get instance field reference: private Pathfinding.Poly2Tri.TriangulationPoint <Head>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& dyn_$Head$k__BackingField();
    // Get instance field reference: private Pathfinding.Poly2Tri.TriangulationPoint <Tail>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& dyn_$Tail$k__BackingField();
    // public Pathfinding.Poly2Tri.TriangulationPoint get_Head()
    // Offset: 0x49C7878
    ::Pathfinding::Poly2Tri::TriangulationPoint* get_Head();
    // public System.Void set_Head(Pathfinding.Poly2Tri.TriangulationPoint value)
    // Offset: 0x49C7880
    void set_Head(::Pathfinding::Poly2Tri::TriangulationPoint* value);
    // public Pathfinding.Poly2Tri.TriangulationPoint get_Tail()
    // Offset: 0x49C7888
    ::Pathfinding::Poly2Tri::TriangulationPoint* get_Tail();
    // public System.Void set_Tail(Pathfinding.Poly2Tri.TriangulationPoint value)
    // Offset: 0x49C7890
    void set_Tail(::Pathfinding::Poly2Tri::TriangulationPoint* value);
    // public System.Void RemoveFromList(Pathfinding.Poly2Tri.DelaunayTriangle triangle)
    // Offset: 0x49C5238
    void RemoveFromList(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle);
    // public System.Void MeshClean(Pathfinding.Poly2Tri.DelaunayTriangle triangle)
    // Offset: 0x49C5650
    void MeshClean(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle);
    // private System.Void MeshCleanReq(Pathfinding.Poly2Tri.DelaunayTriangle triangle)
    // Offset: 0x49C78A0
    void MeshCleanReq(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle);
    // public System.Void AddNode(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C5850
    void AddNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // public System.Void RemoveNode(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C74E8
    void RemoveNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // public Pathfinding.Poly2Tri.AdvancingFrontNode LocateNode(Pathfinding.Poly2Tri.TriangulationPoint point)
    // Offset: 0x49C5654
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* LocateNode(::Pathfinding::Poly2Tri::TriangulationPoint* point);
    // public System.Void CreateAdvancingFront()
    // Offset: 0x49C3FAC
    void CreateAdvancingFront();
    // public System.Void MapTriangleToNodes(Pathfinding.Poly2Tri.DelaunayTriangle t)
    // Offset: 0x49C5154
    void MapTriangleToNodes(::Pathfinding::Poly2Tri::DelaunayTriangle* t);
    // public System.Void FinalizeTriangulation()
    // Offset: 0x49C5290
    void FinalizeTriangulation();
    // public System.Void .ctor()
    // Offset: 0x49C1B00
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: System.Void TriangulationContext::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DTSweepContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DTSweepContext*, creationType>()));
    }
    // public override System.Boolean get_IsDebugEnabled()
    // Offset: 0x49C7898
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: System.Boolean TriangulationContext::get_IsDebugEnabled()
    bool get_IsDebugEnabled();
    // public override System.Void Clear()
    // Offset: 0x49C79C4
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: System.Void TriangulationContext::Clear()
    void Clear();
    // public override System.Void PrepareTriangulation(Pathfinding.Poly2Tri.Triangulatable t)
    // Offset: 0x49C7ABC
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: System.Void TriangulationContext::PrepareTriangulation(Pathfinding.Poly2Tri.Triangulatable t)
    void PrepareTriangulation(::Pathfinding::Poly2Tri::Triangulatable* t);
    // public override Pathfinding.Poly2Tri.TriangulationConstraint NewConstraint(Pathfinding.Poly2Tri.TriangulationPoint a, Pathfinding.Poly2Tri.TriangulationPoint b)
    // Offset: 0x49C7E78
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: Pathfinding.Poly2Tri.TriangulationConstraint TriangulationContext::NewConstraint(Pathfinding.Poly2Tri.TriangulationPoint a, Pathfinding.Poly2Tri.TriangulationPoint b)
    ::Pathfinding::Poly2Tri::TriangulationConstraint* NewConstraint(::Pathfinding::Poly2Tri::TriangulationPoint* a, ::Pathfinding::Poly2Tri::TriangulationPoint* b);
    // public override Pathfinding.Poly2Tri.TriangulationAlgorithm get_Algorithm()
    // Offset: 0x49C7EE0
    // Implemented from: Pathfinding.Poly2Tri.TriangulationContext
    // Base method: Pathfinding.Poly2Tri.TriangulationAlgorithm TriangulationContext::get_Algorithm()
    ::Pathfinding::Poly2Tri::TriangulationAlgorithm get_Algorithm();
  }; // Pathfinding.Poly2Tri.DTSweepContext
  #pragma pack(pop)
  static check_size<sizeof(DTSweepContext), 112 + sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*)> __Pathfinding_Poly2Tri_DTSweepContextSizeCheck;
  static_assert(sizeof(DTSweepContext) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::get_Head
// Il2CppName: get_Head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationPoint* (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::get_Head)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "get_Head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::set_Head
// Il2CppName: set_Head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweepContext::set_Head)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "set_Head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::get_Tail
// Il2CppName: get_Tail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationPoint* (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::get_Tail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "get_Tail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::set_Tail
// Il2CppName: set_Tail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweepContext::set_Tail)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "set_Tail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::RemoveFromList
// Il2CppName: RemoveFromList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::DTSweepContext::RemoveFromList)> {
  static const MethodInfo* get() {
    static auto* triangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "RemoveFromList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::MeshClean
// Il2CppName: MeshClean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::DTSweepContext::MeshClean)> {
  static const MethodInfo* get() {
    static auto* triangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "MeshClean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::MeshCleanReq
// Il2CppName: MeshCleanReq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::DTSweepContext::MeshCleanReq)> {
  static const MethodInfo* get() {
    static auto* triangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "MeshCleanReq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::AddNode
// Il2CppName: AddNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweepContext::AddNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "AddNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::RemoveNode
// Il2CppName: RemoveNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweepContext::RemoveNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "RemoveNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::LocateNode
// Il2CppName: LocateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweepContext::LocateNode)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "LocateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::CreateAdvancingFront
// Il2CppName: CreateAdvancingFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::CreateAdvancingFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "CreateAdvancingFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::MapTriangleToNodes
// Il2CppName: MapTriangleToNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::DTSweepContext::MapTriangleToNodes)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "MapTriangleToNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::FinalizeTriangulation
// Il2CppName: FinalizeTriangulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::FinalizeTriangulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "FinalizeTriangulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::get_IsDebugEnabled
// Il2CppName: get_IsDebugEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::get_IsDebugEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "get_IsDebugEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::PrepareTriangulation
// Il2CppName: PrepareTriangulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::Triangulatable*)>(&Pathfinding::Poly2Tri::DTSweepContext::PrepareTriangulation)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Triangulatable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "PrepareTriangulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::NewConstraint
// Il2CppName: NewConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationConstraint* (Pathfinding::Poly2Tri::DTSweepContext::*)(::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweepContext::NewConstraint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "NewConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweepContext::get_Algorithm
// Il2CppName: get_Algorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationAlgorithm (Pathfinding::Poly2Tri::DTSweepContext::*)()>(&Pathfinding::Poly2Tri::DTSweepContext::get_Algorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweepContext*), "get_Algorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
