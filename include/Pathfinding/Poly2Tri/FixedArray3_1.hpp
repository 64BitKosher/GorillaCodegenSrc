// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Skipping declaration: <Enumerate>c__Iterator0 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: FixedArray3`1<T>
  template<typename T>
  struct FixedArray3_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Pathfinding::Poly2Tri::FixedArray3_1, "Pathfinding.Poly2Tri", "FixedArray3`1");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Poly2Tri.FixedArray3`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  struct FixedArray3_1/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
    public:
    // Nested type: ::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0<T>
    class $Enumerate$c__Iterator0;
    // WARNING Size may be invalid!
    // Autogenerated type: Pathfinding.Poly2Tri.FixedArray3`1/<Enumerate>c__Iterator0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $Enumerate$c__Iterator0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<T>, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = FixedArray3_1<T>;
      static constexpr std::string_view NESTED_NAME = "<Enumerate>c__Iterator0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // System.Int32 <i>__0
      // Size: 0x4
      // Offset: 0x0
      int $i$__0;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 $PC
      // Size: 0x4
      // Offset: 0x0
      int $PC;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // T $current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T $current;
      // Pathfinding.Poly2Tri.FixedArray3`1<T> <>f__this
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::Pathfinding::Poly2Tri::FixedArray3_1<T> $$f__this;
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
      operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 <i>__0
      [[deprecated("Use field access instead!")]] int& dyn_$i$__0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::dyn_$i$__0");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>__0"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 $PC
      [[deprecated("Use field access instead!")]] int& dyn_$PC() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::dyn_$PC");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$PC"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: T $current
      [[deprecated("Use field access instead!")]] T& dyn_$current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::dyn_$current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$current"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: Pathfinding.Poly2Tri.FixedArray3`1<T> <>f__this
      [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedArray3_1<T>& dyn_$$f__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::dyn_$$f__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>f__this"))->offset;
        return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedArray3_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FixedArray3_1<T>::$Enumerate$c__Iterator0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FixedArray3_1<T>::$Enumerate$c__Iterator0*, creationType>()));
      }
      // private T System.Collections.Generic.IEnumerator<T>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T System_Collections_Generic_IEnumerator$T$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::System.Collections.Generic.IEnumerator<T>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::$Enumerate$c__Iterator0::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Pathfinding::Poly2Tri::FixedArray3_1<T>::$Enumerate$c__Iterator0*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Pathfinding.Poly2Tri.FixedArray3`1/<Enumerate>c__Iterator0
    // Could not write size check! Type: Pathfinding.Poly2Tri.FixedArray3`1/<Enumerate>c__Iterator0 is generic, or has no fields that are valid for size checks!
    public:
    // public T _0
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T _0;
    // public T _1
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T _1;
    // public T _2
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T _2;
    public:
    // Creating value type constructor for type: FixedArray3_1
    constexpr FixedArray3_1(T _0_ = {}, T _1_ = {}, T _2_ = {}) noexcept : _0{_0_}, _1{_1_}, _2{_2_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public T _0
    [[deprecated("Use field access instead!")]] T& dyn__0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::dyn__0");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_0"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T _1
    [[deprecated("Use field access instead!")]] T& dyn__1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::dyn__1");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_1"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T _2
    [[deprecated("Use field access instead!")]] T& dyn__2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::dyn__2");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_2"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Pathfinding::Poly2Tri::FixedArray3_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Boolean Contains(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Int32 IndexOf(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerable`1<T> Enumerate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<T>* Enumerate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::Enumerate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Enumerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedArray3_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Pathfinding::Poly2Tri::FixedArray3_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
  }; // Pathfinding.Poly2Tri.FixedArray3`1
  // Could not write size check! Type: Pathfinding.Poly2Tri.FixedArray3`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
