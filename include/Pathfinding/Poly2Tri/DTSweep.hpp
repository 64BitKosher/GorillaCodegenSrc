// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: DTSweepContext
  class DTSweepContext;
  // Forward declaring type: AdvancingFrontNode
  class AdvancingFrontNode;
  // Forward declaring type: TriangulationPoint
  class TriangulationPoint;
  // Forward declaring type: DTSweepConstraint
  class DTSweepConstraint;
  // Forward declaring type: DelaunayTriangle
  class DelaunayTriangle;
  // Forward declaring type: Orientation
  struct Orientation;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: DTSweep
  class DTSweep;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::DTSweep);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::DTSweep*, "Pathfinding.Poly2Tri", "DTSweep");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.DTSweep
  // [TokenAttribute] Offset: FFFFFFFF
  class DTSweep : public ::Il2CppObject {
    public:
    // static public System.Void Triangulate(Pathfinding.Poly2Tri.DTSweepContext tcx)
    // Offset: 0x49C1C8C
    static void Triangulate(::Pathfinding::Poly2Tri::DTSweepContext* tcx);
    // static private System.Void Sweep(Pathfinding.Poly2Tri.DTSweepContext tcx)
    // Offset: 0x49C424C
    static void Sweep(::Pathfinding::Poly2Tri::DTSweepContext* tcx);
    // static private System.Void FinalizationConvexHull(Pathfinding.Poly2Tri.DTSweepContext tcx)
    // Offset: 0x49C450C
    static void FinalizationConvexHull(::Pathfinding::Poly2Tri::DTSweepContext* tcx);
    // static private System.Void TurnAdvancingFrontConvex(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode b, Pathfinding.Poly2Tri.AdvancingFrontNode c)
    // Offset: 0x49C4B30
    static void TurnAdvancingFrontConvex(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* b, ::Pathfinding::Poly2Tri::AdvancingFrontNode* c);
    // static private System.Void FinalizationPolygon(Pathfinding.Poly2Tri.DTSweepContext tcx)
    // Offset: 0x49C4464
    static void FinalizationPolygon(::Pathfinding::Poly2Tri::DTSweepContext* tcx);
    // static private Pathfinding.Poly2Tri.AdvancingFrontNode PointEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.TriangulationPoint point)
    // Offset: 0x49C47A0
    static ::Pathfinding::Poly2Tri::AdvancingFrontNode* PointEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* point);
    // static private Pathfinding.Poly2Tri.AdvancingFrontNode NewFrontTriangle(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.TriangulationPoint point, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C5674
    static ::Pathfinding::Poly2Tri::AdvancingFrontNode* NewFrontTriangle(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* point, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void EdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C4990
    static void EdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C5CE4
    static void FillEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillRightConcaveEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C6100
    static void FillRightConcaveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillRightConvexEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C61FC
    static void FillRightConvexEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillRightBelowEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C631C
    static void FillRightBelowEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillRightAboveEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C5EEC
    static void FillRightAboveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillLeftConvexEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C6448
    static void FillLeftConvexEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillLeftConcaveEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C6560
    static void FillLeftConcaveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillLeftBelowEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C6654
    static void FillLeftBelowEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillLeftAboveEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DTSweepConstraint edge, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C5FF8
    static void FillLeftAboveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Boolean IsEdgeSideOfTriangle(Pathfinding.Poly2Tri.DelaunayTriangle triangle, Pathfinding.Poly2Tri.TriangulationPoint ep, Pathfinding.Poly2Tri.TriangulationPoint eq)
    // Offset: 0x49C5C24
    static bool IsEdgeSideOfTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq);
    // static private System.Void EdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.TriangulationPoint ep, Pathfinding.Poly2Tri.TriangulationPoint eq, Pathfinding.Poly2Tri.DelaunayTriangle triangle, Pathfinding.Poly2Tri.TriangulationPoint point)
    // Offset: 0x49C5D10
    static void EdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ::Pathfinding::Poly2Tri::TriangulationPoint* point);
    // static private System.Void FlipEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.TriangulationPoint ep, Pathfinding.Poly2Tri.TriangulationPoint eq, Pathfinding.Poly2Tri.DelaunayTriangle t, Pathfinding.Poly2Tri.TriangulationPoint p)
    // Offset: 0x49C695C
    static void FlipEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p);
    // static private Pathfinding.Poly2Tri.TriangulationPoint NextFlipPoint(Pathfinding.Poly2Tri.TriangulationPoint ep, Pathfinding.Poly2Tri.TriangulationPoint eq, Pathfinding.Poly2Tri.DelaunayTriangle ot, Pathfinding.Poly2Tri.TriangulationPoint op)
    // Offset: 0x49C6D1C
    static ::Pathfinding::Poly2Tri::TriangulationPoint* NextFlipPoint(::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* op);
    // static private Pathfinding.Poly2Tri.DelaunayTriangle NextFlipTriangle(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.Orientation o, Pathfinding.Poly2Tri.DelaunayTriangle t, Pathfinding.Poly2Tri.DelaunayTriangle ot, Pathfinding.Poly2Tri.TriangulationPoint p, Pathfinding.Poly2Tri.TriangulationPoint op)
    // Offset: 0x49C6CA8
    static ::Pathfinding::Poly2Tri::DelaunayTriangle* NextFlipTriangle(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::Orientation o, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* p, ::Pathfinding::Poly2Tri::TriangulationPoint* op);
    // static private System.Void FlipScanEdgeEvent(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.TriangulationPoint ep, Pathfinding.Poly2Tri.TriangulationPoint eq, Pathfinding.Poly2Tri.DelaunayTriangle flipTriangle, Pathfinding.Poly2Tri.DelaunayTriangle t, Pathfinding.Poly2Tri.TriangulationPoint p)
    // Offset: 0x49C6E74
    static void FlipScanEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* flipTriangle, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p);
    // static private System.Void FillAdvancingFront(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode n)
    // Offset: 0x49C5868
    static void FillAdvancingFront(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* n);
    // static private System.Void FillBasin(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C713C
    static void FillBasin(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void FillBasinReq(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C7314
    static void FillBasinReq(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Boolean IsShallow(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C7484
    static bool IsShallow(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Double HoleAngle(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C6FE0
    static double HoleAngle(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Double BasinAngle(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C70A4
    static double BasinAngle(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Void Fill(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C54C0
    static void Fill(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // static private System.Boolean Legalize(Pathfinding.Poly2Tri.DTSweepContext tcx, Pathfinding.Poly2Tri.DelaunayTriangle t)
    // Offset: 0x49C5960
    static bool Legalize(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DelaunayTriangle* t);
    // static private System.Void RotateTrianglePair(Pathfinding.Poly2Tri.DelaunayTriangle t, Pathfinding.Poly2Tri.TriangulationPoint p, Pathfinding.Poly2Tri.DelaunayTriangle ot, Pathfinding.Poly2Tri.TriangulationPoint op)
    // Offset: 0x49C4C9C
    static void RotateTrianglePair(::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* op);
  }; // Pathfinding.Poly2Tri.DTSweep
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*)>(&Pathfinding::Poly2Tri::DTSweep::Triangulate)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::Sweep
// Il2CppName: Sweep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*)>(&Pathfinding::Poly2Tri::DTSweep::Sweep)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "Sweep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FinalizationConvexHull
// Il2CppName: FinalizationConvexHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*)>(&Pathfinding::Poly2Tri::DTSweep::FinalizationConvexHull)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FinalizationConvexHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::TurnAdvancingFrontConvex
// Il2CppName: TurnAdvancingFrontConvex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::TurnAdvancingFrontConvex)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "TurnAdvancingFrontConvex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FinalizationPolygon
// Il2CppName: FinalizationPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*)>(&Pathfinding::Poly2Tri::DTSweep::FinalizationPolygon)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FinalizationPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::PointEvent
// Il2CppName: PointEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::PointEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "PointEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::NewFrontTriangle
// Il2CppName: NewFrontTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::NewFrontTriangle)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "NewFrontTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, point, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::EdgeEvent
// Il2CppName: EdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::EdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "EdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillEdgeEvent
// Il2CppName: FillEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillRightConcaveEdgeEvent
// Il2CppName: FillRightConcaveEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillRightConcaveEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillRightConcaveEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillRightConvexEdgeEvent
// Il2CppName: FillRightConvexEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillRightConvexEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillRightConvexEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillRightBelowEdgeEvent
// Il2CppName: FillRightBelowEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillRightBelowEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillRightBelowEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillRightAboveEdgeEvent
// Il2CppName: FillRightAboveEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillRightAboveEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillRightAboveEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillLeftConvexEdgeEvent
// Il2CppName: FillLeftConvexEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillLeftConvexEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillLeftConvexEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillLeftConcaveEdgeEvent
// Il2CppName: FillLeftConcaveEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillLeftConcaveEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillLeftConcaveEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillLeftBelowEdgeEvent
// Il2CppName: FillLeftBelowEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillLeftBelowEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillLeftBelowEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillLeftAboveEdgeEvent
// Il2CppName: FillLeftAboveEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DTSweepConstraint*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillLeftAboveEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepConstraint")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillLeftAboveEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, edge, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::IsEdgeSideOfTriangle
// Il2CppName: IsEdgeSideOfTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::IsEdgeSideOfTriangle)> {
  static const MethodInfo* get() {
    static auto* triangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* ep = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* eq = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "IsEdgeSideOfTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangle, ep, eq});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::EdgeEvent
// Il2CppName: EdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::EdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* ep = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* eq = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* triangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "EdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, ep, eq, triangle, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FlipEdgeEvent
// Il2CppName: FlipEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::FlipEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* ep = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* eq = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FlipEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, ep, eq, t, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::NextFlipPoint
// Il2CppName: NextFlipPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationPoint* (*)(::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::NextFlipPoint)> {
  static const MethodInfo* get() {
    static auto* ep = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* eq = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* ot = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "NextFlipPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ep, eq, ot, op});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::NextFlipTriangle
// Il2CppName: NextFlipTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::DelaunayTriangle* (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::Orientation, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::NextFlipTriangle)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Orientation")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* ot = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "NextFlipTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, o, t, ot, p, op});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FlipScanEdgeEvent
// Il2CppName: FlipScanEdgeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::FlipScanEdgeEvent)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* ep = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* eq = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* flipTriangle = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FlipScanEdgeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, ep, eq, flipTriangle, t, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillAdvancingFront
// Il2CppName: FillAdvancingFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillAdvancingFront)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillAdvancingFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, n});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillBasin
// Il2CppName: FillBasin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillBasin)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillBasin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::FillBasinReq
// Il2CppName: FillBasinReq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::FillBasinReq)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "FillBasinReq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::IsShallow
// Il2CppName: IsShallow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::IsShallow)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "IsShallow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::HoleAngle
// Il2CppName: HoleAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::HoleAngle)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "HoleAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::BasinAngle
// Il2CppName: BasinAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::BasinAngle)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "BasinAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::Fill
// Il2CppName: Fill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::DTSweep::Fill)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "Fill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::Legalize
// Il2CppName: Legalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Poly2Tri::DTSweepContext*, ::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::DTSweep::Legalize)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DTSweepContext")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "Legalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx, t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::DTSweep::RotateTrianglePair
// Il2CppName: RotateTrianglePair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*, ::Pathfinding::Poly2Tri::DelaunayTriangle*, ::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::DTSweep::RotateTrianglePair)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    static auto* ot = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::DTSweep*), "RotateTrianglePair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p, ot, op});
  }
};
