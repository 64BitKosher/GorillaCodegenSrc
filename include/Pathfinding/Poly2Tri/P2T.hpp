// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationAlgorithm
#include "Pathfinding/Poly2Tri/TriangulationAlgorithm.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: Polygon
  class Polygon;
  // Forward declaring type: TriangulationContext
  class TriangulationContext;
  // Forward declaring type: Triangulatable
  class Triangulatable;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: P2T
  class P2T;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::P2T);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::P2T*, "Pathfinding.Poly2Tri", "P2T");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.P2T
  // [TokenAttribute] Offset: FFFFFFFF
  class P2T : public ::Il2CppObject {
    public:
    // Get static field: static private Pathfinding.Poly2Tri.TriangulationAlgorithm _defaultAlgorithm
    static ::Pathfinding::Poly2Tri::TriangulationAlgorithm _get__defaultAlgorithm();
    // Set static field: static private Pathfinding.Poly2Tri.TriangulationAlgorithm _defaultAlgorithm
    static void _set__defaultAlgorithm(::Pathfinding::Poly2Tri::TriangulationAlgorithm value);
    // static public System.Void Triangulate(Pathfinding.Poly2Tri.Polygon p)
    // Offset: 0x49C1A24
    static void Triangulate(::Pathfinding::Poly2Tri::Polygon* p);
    // static public Pathfinding.Poly2Tri.TriangulationContext CreateContext(Pathfinding.Poly2Tri.TriangulationAlgorithm algorithm)
    // Offset: 0x49C1AB0
    static ::Pathfinding::Poly2Tri::TriangulationContext* CreateContext(::Pathfinding::Poly2Tri::TriangulationAlgorithm algorithm);
    // static public System.Void Triangulate(Pathfinding.Poly2Tri.TriangulationAlgorithm algorithm, Pathfinding.Poly2Tri.Triangulatable t)
    // Offset: 0x49C1A74
    static void Triangulate(::Pathfinding::Poly2Tri::TriangulationAlgorithm algorithm, ::Pathfinding::Poly2Tri::Triangulatable* t);
    // static public System.Void Triangulate(Pathfinding.Poly2Tri.TriangulationContext tcx)
    // Offset: 0x49C1BFC
    static void Triangulate(::Pathfinding::Poly2Tri::TriangulationContext* tcx);
  }; // Pathfinding.Poly2Tri.P2T
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::P2T::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::Polygon*)>(&Pathfinding::Poly2Tri::P2T::Triangulate)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Polygon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::P2T*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::P2T::CreateContext
// Il2CppName: CreateContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationContext* (*)(::Pathfinding::Poly2Tri::TriangulationAlgorithm)>(&Pathfinding::Poly2Tri::P2T::CreateContext)> {
  static const MethodInfo* get() {
    static auto* algorithm = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::P2T*), "CreateContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{algorithm});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::P2T::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::TriangulationAlgorithm, ::Pathfinding::Poly2Tri::Triangulatable*)>(&Pathfinding::Poly2Tri::P2T::Triangulate)> {
  static const MethodInfo* get() {
    static auto* algorithm = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationAlgorithm")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "Triangulatable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::P2T*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{algorithm, t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::P2T::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Poly2Tri::TriangulationContext*)>(&Pathfinding::Poly2Tri::P2T::Triangulate)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::P2T*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
