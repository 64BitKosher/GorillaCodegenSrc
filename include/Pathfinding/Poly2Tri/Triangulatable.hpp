// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: TriangulationContext
  class TriangulationContext;
  // Forward declaring type: DelaunayTriangle
  class DelaunayTriangle;
  // Forward declaring type: TriangulationMode
  struct TriangulationMode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: Triangulatable
  class Triangulatable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::Triangulatable);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::Triangulatable*, "Pathfinding.Poly2Tri", "Triangulatable");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.Triangulatable
  // [TokenAttribute] Offset: FFFFFFFF
  class Triangulatable {
    public:
    // public System.Void Prepare(Pathfinding.Poly2Tri.TriangulationContext tcx)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Prepare(::Pathfinding::Poly2Tri::TriangulationContext* tcx);
    // public System.Void AddTriangle(Pathfinding.Poly2Tri.DelaunayTriangle t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* t);
    // public System.Void AddTriangles(System.Collections.Generic.IEnumerable`1<Pathfinding.Poly2Tri.DelaunayTriangle> list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddTriangles(::System::Collections::Generic::IEnumerable_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>* list);
    // public Pathfinding.Poly2Tri.TriangulationMode get_TriangulationMode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Pathfinding::Poly2Tri::TriangulationMode get_TriangulationMode();
  }; // Pathfinding.Poly2Tri.Triangulatable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::Triangulatable::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::Triangulatable::*)(::Pathfinding::Poly2Tri::TriangulationContext*)>(&Pathfinding::Poly2Tri::Triangulatable::Prepare)> {
  static const MethodInfo* get() {
    static auto* tcx = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::Triangulatable*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tcx});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::Triangulatable::AddTriangle
// Il2CppName: AddTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::Triangulatable::*)(::Pathfinding::Poly2Tri::DelaunayTriangle*)>(&Pathfinding::Poly2Tri::Triangulatable::AddTriangle)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::Triangulatable*), "AddTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::Triangulatable::AddTriangles
// Il2CppName: AddTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::Triangulatable::*)(::System::Collections::Generic::IEnumerable_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>*)>(&Pathfinding::Poly2Tri::Triangulatable::AddTriangles)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "DelaunayTriangle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::Triangulatable*), "AddTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::Triangulatable::get_TriangulationMode
// Il2CppName: get_TriangulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::TriangulationMode (Pathfinding::Poly2Tri::Triangulatable::*)()>(&Pathfinding::Poly2Tri::Triangulatable::get_TriangulationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::Triangulatable*), "get_TriangulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
