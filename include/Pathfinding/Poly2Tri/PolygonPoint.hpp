// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: PolygonPoint
  class PolygonPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::PolygonPoint);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::PolygonPoint*, "Pathfinding.Poly2Tri", "PolygonPoint");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.PolygonPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class PolygonPoint : public ::Pathfinding::Poly2Tri::TriangulationPoint {
    public:
    public:
    // private Pathfinding.Poly2Tri.PolygonPoint <Next>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::Poly2Tri::PolygonPoint* Next;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::PolygonPoint*) == 0x8);
    // private Pathfinding.Poly2Tri.PolygonPoint <Previous>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::Poly2Tri::PolygonPoint* Previous;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::PolygonPoint*) == 0x8);
    public:
    // Get instance field reference: private Pathfinding.Poly2Tri.PolygonPoint <Next>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::PolygonPoint*& dyn_$Next$k__BackingField();
    // Get instance field reference: private Pathfinding.Poly2Tri.PolygonPoint <Previous>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::PolygonPoint*& dyn_$Previous$k__BackingField();
    // public Pathfinding.Poly2Tri.PolygonPoint get_Next()
    // Offset: 0x49C2D98
    ::Pathfinding::Poly2Tri::PolygonPoint* get_Next();
    // public System.Void set_Next(Pathfinding.Poly2Tri.PolygonPoint value)
    // Offset: 0x49C2DA0
    void set_Next(::Pathfinding::Poly2Tri::PolygonPoint* value);
    // public System.Void set_Previous(Pathfinding.Poly2Tri.PolygonPoint value)
    // Offset: 0x49C2DA8
    void set_Previous(::Pathfinding::Poly2Tri::PolygonPoint* value);
    // public System.Void .ctor(System.Double x, System.Double y)
    // Offset: 0x49C2D40
    // Implemented from: Pathfinding.Poly2Tri.TriangulationPoint
    // Base method: System.Void TriangulationPoint::.ctor(System.Double x, System.Double y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PolygonPoint* New_ctor(double x, double y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PolygonPoint*, creationType>(x, y)));
    }
  }; // Pathfinding.Poly2Tri.PolygonPoint
  #pragma pack(pop)
  static check_size<sizeof(PolygonPoint), 48 + sizeof(::Pathfinding::Poly2Tri::PolygonPoint*)> __Pathfinding_Poly2Tri_PolygonPointSizeCheck;
  static_assert(sizeof(PolygonPoint) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::PolygonPoint::get_Next
// Il2CppName: get_Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::PolygonPoint* (Pathfinding::Poly2Tri::PolygonPoint::*)()>(&Pathfinding::Poly2Tri::PolygonPoint::get_Next)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::PolygonPoint*), "get_Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::PolygonPoint::set_Next
// Il2CppName: set_Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::PolygonPoint::*)(::Pathfinding::Poly2Tri::PolygonPoint*)>(&Pathfinding::Poly2Tri::PolygonPoint::set_Next)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "PolygonPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::PolygonPoint*), "set_Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::PolygonPoint::set_Previous
// Il2CppName: set_Previous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::PolygonPoint::*)(::Pathfinding::Poly2Tri::PolygonPoint*)>(&Pathfinding::Poly2Tri::PolygonPoint::set_Previous)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "PolygonPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::PolygonPoint*), "set_Previous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::PolygonPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
