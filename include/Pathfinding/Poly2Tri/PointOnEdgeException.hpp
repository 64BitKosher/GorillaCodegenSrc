// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.NotImplementedException
#include "System/NotImplementedException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: TriangulationPoint
  class TriangulationPoint;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: PointOnEdgeException
  class PointOnEdgeException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::PointOnEdgeException);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::PointOnEdgeException*, "Pathfinding.Poly2Tri", "PointOnEdgeException");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.PointOnEdgeException
  // [TokenAttribute] Offset: FFFFFFFF
  class PointOnEdgeException : public ::System::NotImplementedException {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    public:
    // public readonly Pathfinding.Poly2Tri.TriangulationPoint A
    // Size: 0x8
    // Offset: 0x90
    ::Pathfinding::Poly2Tri::TriangulationPoint* A;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*) == 0x8);
    // public readonly Pathfinding.Poly2Tri.TriangulationPoint B
    // Size: 0x8
    // Offset: 0x98
    ::Pathfinding::Poly2Tri::TriangulationPoint* B;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*) == 0x8);
    // public readonly Pathfinding.Poly2Tri.TriangulationPoint C
    // Size: 0x8
    // Offset: 0xA0
    ::Pathfinding::Poly2Tri::TriangulationPoint* C;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*) == 0x8);
    public:
    // Get instance field reference: public readonly Pathfinding.Poly2Tri.TriangulationPoint A
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& dyn_A();
    // Get instance field reference: public readonly Pathfinding.Poly2Tri.TriangulationPoint B
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& dyn_B();
    // Get instance field reference: public readonly Pathfinding.Poly2Tri.TriangulationPoint C
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& dyn_C();
    // public System.Void .ctor(System.String message, Pathfinding.Poly2Tri.TriangulationPoint a, Pathfinding.Poly2Tri.TriangulationPoint b, Pathfinding.Poly2Tri.TriangulationPoint c)
    // Offset: 0x49C677C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointOnEdgeException* New_ctor(::StringW message, ::Pathfinding::Poly2Tri::TriangulationPoint* a, ::Pathfinding::Poly2Tri::TriangulationPoint* b, ::Pathfinding::Poly2Tri::TriangulationPoint* c) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PointOnEdgeException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointOnEdgeException*, creationType>(message, a, b, c)));
    }
  }; // Pathfinding.Poly2Tri.PointOnEdgeException
  #pragma pack(pop)
  static check_size<sizeof(PointOnEdgeException), 160 + sizeof(::Pathfinding::Poly2Tri::TriangulationPoint*)> __Pathfinding_Poly2Tri_PointOnEdgeExceptionSizeCheck;
  static_assert(sizeof(PointOnEdgeException) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::PointOnEdgeException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
