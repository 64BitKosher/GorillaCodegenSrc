// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: AdvancingFrontNode
  class AdvancingFrontNode;
  // Forward declaring type: TriangulationPoint
  class TriangulationPoint;
}
// Completed forward declares
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Forward declaring type: AdvancingFront
  class AdvancingFront;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Poly2Tri::AdvancingFront);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Poly2Tri::AdvancingFront*, "Pathfinding.Poly2Tri", "AdvancingFront");
// Type namespace: Pathfinding.Poly2Tri
namespace Pathfinding::Poly2Tri {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Poly2Tri.AdvancingFront
  // [TokenAttribute] Offset: FFFFFFFF
  class AdvancingFront : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.Poly2Tri.AdvancingFrontNode Head
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* Head;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::AdvancingFrontNode*) == 0x8);
    // public Pathfinding.Poly2Tri.AdvancingFrontNode Tail
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* Tail;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::AdvancingFrontNode*) == 0x8);
    // protected Pathfinding.Poly2Tri.AdvancingFrontNode Search
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* Search;
    // Field size check
    static_assert(sizeof(::Pathfinding::Poly2Tri::AdvancingFrontNode*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.Poly2Tri.AdvancingFrontNode Head
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& dyn_Head();
    // Get instance field reference: public Pathfinding.Poly2Tri.AdvancingFrontNode Tail
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& dyn_Tail();
    // Get instance field reference: protected Pathfinding.Poly2Tri.AdvancingFrontNode Search
    [[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& dyn_Search();
    // public System.Void .ctor(Pathfinding.Poly2Tri.AdvancingFrontNode head, Pathfinding.Poly2Tri.AdvancingFrontNode tail)
    // Offset: 0x49C3C78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancingFront* New_ctor(::Pathfinding::Poly2Tri::AdvancingFrontNode* head, ::Pathfinding::Poly2Tri::AdvancingFrontNode* tail) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancingFront*, creationType>(head, tail)));
    }
    // public System.Void AddNode(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C3CCC
    void AddNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // public System.Void RemoveNode(Pathfinding.Poly2Tri.AdvancingFrontNode node)
    // Offset: 0x49C3CD0
    void RemoveNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node);
    // private Pathfinding.Poly2Tri.AdvancingFrontNode FindSearchNode(System.Double x)
    // Offset: 0x49C3DC0
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* FindSearchNode(double x);
    // public Pathfinding.Poly2Tri.AdvancingFrontNode LocateNode(Pathfinding.Poly2Tri.TriangulationPoint point)
    // Offset: 0x49C3DC8
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* LocateNode(::Pathfinding::Poly2Tri::TriangulationPoint* point);
    // private Pathfinding.Poly2Tri.AdvancingFrontNode LocateNode(System.Double x)
    // Offset: 0x49C3DE0
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* LocateNode(double x);
    // public Pathfinding.Poly2Tri.AdvancingFrontNode LocatePoint(Pathfinding.Poly2Tri.TriangulationPoint point)
    // Offset: 0x49C3E50
    ::Pathfinding::Poly2Tri::AdvancingFrontNode* LocatePoint(::Pathfinding::Poly2Tri::TriangulationPoint* point);
    // public override System.String ToString()
    // Offset: 0x49C3CD4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Pathfinding.Poly2Tri.AdvancingFront
  #pragma pack(pop)
  static check_size<sizeof(AdvancingFront), 32 + sizeof(::Pathfinding::Poly2Tri::AdvancingFrontNode*)> __Pathfinding_Poly2Tri_AdvancingFrontSizeCheck;
  static_assert(sizeof(AdvancingFront) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::AddNode
// Il2CppName: AddNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::AdvancingFront::*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::AdvancingFront::AddNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "AddNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::RemoveNode
// Il2CppName: RemoveNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Poly2Tri::AdvancingFront::*)(::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(&Pathfinding::Poly2Tri::AdvancingFront::RemoveNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "AdvancingFrontNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "RemoveNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::FindSearchNode
// Il2CppName: FindSearchNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (Pathfinding::Poly2Tri::AdvancingFront::*)(double)>(&Pathfinding::Poly2Tri::AdvancingFront::FindSearchNode)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "FindSearchNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::LocateNode
// Il2CppName: LocateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (Pathfinding::Poly2Tri::AdvancingFront::*)(::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::AdvancingFront::LocateNode)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "LocateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::LocateNode
// Il2CppName: LocateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (Pathfinding::Poly2Tri::AdvancingFront::*)(double)>(&Pathfinding::Poly2Tri::AdvancingFront::LocateNode)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "LocateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::LocatePoint
// Il2CppName: LocatePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode* (Pathfinding::Poly2Tri::AdvancingFront::*)(::Pathfinding::Poly2Tri::TriangulationPoint*)>(&Pathfinding::Poly2Tri::AdvancingFront::LocatePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Pathfinding.Poly2Tri", "TriangulationPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "LocatePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Poly2Tri::AdvancingFront::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Poly2Tri::AdvancingFront::*)()>(&Pathfinding::Poly2Tri::AdvancingFront::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Poly2Tri::AdvancingFront*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
