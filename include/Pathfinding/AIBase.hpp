// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.VersionedMonoBehaviour
#include "Pathfinding/VersionedMonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: Pathfinding.OrientationMode
#include "Pathfinding/OrientationMode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Seeker
  class Seeker;
  // Forward declaring type: AutoRepathPolicy
  class AutoRepathPolicy;
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
  // Forward declaring type: CharacterController
  class CharacterController;
}
// Forward declaring namespace: Pathfinding::RVO
namespace Pathfinding::RVO {
  // Forward declaring type: RVOController
  class RVOController;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: IMovementPlane
  class IMovementPlane;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AIBase
  class AIBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AIBase);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AIBase*, "Pathfinding", "AIBase");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AIBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class AIBase : public ::Pathfinding::VersionedMonoBehaviour {
    public:
    public:
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x24
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x28
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean canMove
    // Size: 0x1
    // Offset: 0x2C
    bool canMove;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canMove and: maxSpeed
    char __padding2[0x3] = {};
    // public System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x30
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 gravity
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 gravity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.LayerMask groundMask
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::LayerMask groundMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Single centerOffsetCompatibility
    // Size: 0x4
    // Offset: 0x44
    float centerOffsetCompatibility;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single repathRateCompatibility
    // Size: 0x4
    // Offset: 0x48
    float repathRateCompatibility;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean canSearchCompability
    // Size: 0x1
    // Offset: 0x4C
    bool canSearchCompability;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canSearchCompability and: orientation
    char __padding8[0x3] = {};
    // public Pathfinding.OrientationMode orientation
    // Size: 0x4
    // Offset: 0x50
    ::Pathfinding::OrientationMode orientation;
    // Field size check
    static_assert(sizeof(::Pathfinding::OrientationMode) == 0x4);
    // public System.Boolean enableRotation
    // Size: 0x1
    // Offset: 0x54
    bool enableRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableRotation and: simulatedPosition
    char __padding10[0x3] = {};
    // protected UnityEngine.Vector3 simulatedPosition
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 simulatedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Quaternion simulatedRotation
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Quaternion simulatedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 accumulatedMovementDelta
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 accumulatedMovementDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Vector2 velocity2D
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Vector2 velocity2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // protected System.Single verticalVelocity
    // Size: 0x4
    // Offset: 0x88
    float verticalVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: verticalVelocity and: seeker
    char __padding15[0x4] = {};
    // protected Pathfinding.Seeker seeker
    // Size: 0x8
    // Offset: 0x90
    ::Pathfinding::Seeker* seeker;
    // Field size check
    static_assert(sizeof(::Pathfinding::Seeker*) == 0x8);
    // protected UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Rigidbody rigid
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Rigidbody* rigid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // protected UnityEngine.Rigidbody2D rigid2D
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Rigidbody2D* rigid2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody2D*) == 0x8);
    // protected UnityEngine.CharacterController controller
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::CharacterController* controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterController*) == 0x8);
    // protected Pathfinding.RVO.RVOController rvoController
    // Size: 0x8
    // Offset: 0xB8
    ::Pathfinding::RVO::RVOController* rvoController;
    // Field size check
    static_assert(sizeof(::Pathfinding::RVO::RVOController*) == 0x8);
    // public Pathfinding.Util.IMovementPlane movementPlane
    // Size: 0x8
    // Offset: 0xC0
    ::Pathfinding::Util::IMovementPlane* movementPlane;
    // Field size check
    static_assert(sizeof(::Pathfinding::Util::IMovementPlane*) == 0x8);
    // public System.Boolean updatePosition
    // Size: 0x1
    // Offset: 0xC8
    bool updatePosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean updateRotation
    // Size: 0x1
    // Offset: 0xC9
    bool updateRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateRotation and: autoRepath
    char __padding24[0x6] = {};
    // public Pathfinding.AutoRepathPolicy autoRepath
    // Size: 0x8
    // Offset: 0xD0
    ::Pathfinding::AutoRepathPolicy* autoRepath;
    // Field size check
    static_assert(sizeof(::Pathfinding::AutoRepathPolicy*) == 0x8);
    // private System.Boolean <usingGravity>k__BackingField
    // Size: 0x1
    // Offset: 0xD8
    bool usingGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usingGravity and: lastDeltaTime
    char __padding26[0x3] = {};
    // protected System.Single lastDeltaTime
    // Size: 0x4
    // Offset: 0xDC
    float lastDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 prevFrame
    // Size: 0x4
    // Offset: 0xE0
    int prevFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.Vector3 prevPosition1
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 prevPosition1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Vector3 prevPosition2
    // Size: 0xC
    // Offset: 0xF0
    ::UnityEngine::Vector3 prevPosition2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Vector2 lastDeltaPosition
    // Size: 0x8
    // Offset: 0xFC
    ::UnityEngine::Vector2 lastDeltaPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // protected System.Boolean waitingForPathCalculation
    // Size: 0x1
    // Offset: 0x104
    bool waitingForPathCalculation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForPathCalculation and: targetCompatibility
    char __padding32[0x3] = {};
    // private UnityEngine.Transform targetCompatibility
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Transform* targetCompatibility;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean startHasRun
    // Size: 0x1
    // Offset: 0x110
    bool startHasRun;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startHasRun and: destination
    char __padding34[0x3] = {};
    // private UnityEngine.Vector3 <destination>k__BackingField
    // Size: 0xC
    // Offset: 0x114
    ::UnityEngine::Vector3 destination;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean <isStopped>k__BackingField
    // Size: 0x1
    // Offset: 0x120
    bool isStopped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isStopped and: onSearchPath
    char __padding36[0x7] = {};
    // private System.Action <onSearchPath>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::System::Action* onSearchPath;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get static field: static public readonly UnityEngine.Color ShapeGizmoColor
    static ::UnityEngine::Color _get_ShapeGizmoColor();
    // Set static field: static public readonly UnityEngine.Color ShapeGizmoColor
    static void _set_ShapeGizmoColor(::UnityEngine::Color value);
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public System.Boolean canMove
    [[deprecated("Use field access instead!")]] bool& dyn_canMove();
    // Get instance field reference: public System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: public UnityEngine.Vector3 gravity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_gravity();
    // Get instance field reference: public UnityEngine.LayerMask groundMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_groundMask();
    // Get instance field reference: private System.Single centerOffsetCompatibility
    [[deprecated("Use field access instead!")]] float& dyn_centerOffsetCompatibility();
    // Get instance field reference: private System.Single repathRateCompatibility
    [[deprecated("Use field access instead!")]] float& dyn_repathRateCompatibility();
    // Get instance field reference: private System.Boolean canSearchCompability
    [[deprecated("Use field access instead!")]] bool& dyn_canSearchCompability();
    // Get instance field reference: public Pathfinding.OrientationMode orientation
    [[deprecated("Use field access instead!")]] ::Pathfinding::OrientationMode& dyn_orientation();
    // Get instance field reference: public System.Boolean enableRotation
    [[deprecated("Use field access instead!")]] bool& dyn_enableRotation();
    // Get instance field reference: protected UnityEngine.Vector3 simulatedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_simulatedPosition();
    // Get instance field reference: protected UnityEngine.Quaternion simulatedRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_simulatedRotation();
    // Get instance field reference: private UnityEngine.Vector3 accumulatedMovementDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_accumulatedMovementDelta();
    // Get instance field reference: protected UnityEngine.Vector2 velocity2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_velocity2D();
    // Get instance field reference: protected System.Single verticalVelocity
    [[deprecated("Use field access instead!")]] float& dyn_verticalVelocity();
    // Get instance field reference: protected Pathfinding.Seeker seeker
    [[deprecated("Use field access instead!")]] ::Pathfinding::Seeker*& dyn_seeker();
    // Get instance field reference: protected UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: protected UnityEngine.Rigidbody rigid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigid();
    // Get instance field reference: protected UnityEngine.Rigidbody2D rigid2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& dyn_rigid2D();
    // Get instance field reference: protected UnityEngine.CharacterController controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& dyn_controller();
    // Get instance field reference: protected Pathfinding.RVO.RVOController rvoController
    [[deprecated("Use field access instead!")]] ::Pathfinding::RVO::RVOController*& dyn_rvoController();
    // Get instance field reference: public Pathfinding.Util.IMovementPlane movementPlane
    [[deprecated("Use field access instead!")]] ::Pathfinding::Util::IMovementPlane*& dyn_movementPlane();
    // Get instance field reference: public System.Boolean updatePosition
    [[deprecated("Use field access instead!")]] bool& dyn_updatePosition();
    // Get instance field reference: public System.Boolean updateRotation
    [[deprecated("Use field access instead!")]] bool& dyn_updateRotation();
    // Get instance field reference: public Pathfinding.AutoRepathPolicy autoRepath
    [[deprecated("Use field access instead!")]] ::Pathfinding::AutoRepathPolicy*& dyn_autoRepath();
    // Get instance field reference: private System.Boolean <usingGravity>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$usingGravity$k__BackingField();
    // Get instance field reference: protected System.Single lastDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_lastDeltaTime();
    // Get instance field reference: protected System.Int32 prevFrame
    [[deprecated("Use field access instead!")]] int& dyn_prevFrame();
    // Get instance field reference: protected UnityEngine.Vector3 prevPosition1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_prevPosition1();
    // Get instance field reference: protected UnityEngine.Vector3 prevPosition2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_prevPosition2();
    // Get instance field reference: protected UnityEngine.Vector2 lastDeltaPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_lastDeltaPosition();
    // Get instance field reference: protected System.Boolean waitingForPathCalculation
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForPathCalculation();
    // Get instance field reference: private UnityEngine.Transform targetCompatibility
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetCompatibility();
    // Get instance field reference: private System.Boolean startHasRun
    [[deprecated("Use field access instead!")]] bool& dyn_startHasRun();
    // Get instance field reference: private UnityEngine.Vector3 <destination>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$destination$k__BackingField();
    // Get instance field reference: private System.Boolean <isStopped>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isStopped$k__BackingField();
    // Get instance field reference: private System.Action <onSearchPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$onSearchPath$k__BackingField();
    // public System.Single get_repathRate()
    // Offset: 0x2988F98
    float get_repathRate();
    // public System.Void set_repathRate(System.Single value)
    // Offset: 0x2988FB4
    void set_repathRate(float value);
    // public System.Boolean get_canSearch()
    // Offset: 0x2988FD0
    bool get_canSearch();
    // public System.Void set_canSearch(System.Boolean value)
    // Offset: 0x2988FF4
    void set_canSearch(bool value);
    // public System.Single get_centerOffset()
    // Offset: 0x2989028
    float get_centerOffset();
    // public System.Void set_centerOffset(System.Single value)
    // Offset: 0x2989038
    void set_centerOffset(float value);
    // public System.Boolean get_rotationIn2D()
    // Offset: 0x2989044
    bool get_rotationIn2D();
    // public System.Void set_rotationIn2D(System.Boolean value)
    // Offset: 0x2989054
    void set_rotationIn2D(bool value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x2989070
    ::UnityEngine::Vector3 get_position();
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x29890A4
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x29890D8
    void set_rotation(::UnityEngine::Quaternion value);
    // protected System.Boolean get_usingGravity()
    // Offset: 0x298910C
    bool get_usingGravity();
    // protected System.Void set_usingGravity(System.Boolean value)
    // Offset: 0x2989114
    void set_usingGravity(bool value);
    // public UnityEngine.Transform get_target()
    // Offset: 0x2989120
    ::UnityEngine::Transform* get_target();
    // public System.Void set_target(UnityEngine.Transform value)
    // Offset: 0x29891C8
    void set_target(::UnityEngine::Transform* value);
    // public UnityEngine.Vector3 get_destination()
    // Offset: 0x298930C
    ::UnityEngine::Vector3 get_destination();
    // public System.Void set_destination(UnityEngine.Vector3 value)
    // Offset: 0x298931C
    void set_destination(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x298932C
    ::UnityEngine::Vector3 get_velocity();
    // public UnityEngine.Vector3 get_desiredVelocity()
    // Offset: 0x29893B0
    ::UnityEngine::Vector3 get_desiredVelocity();
    // public System.Boolean get_isStopped()
    // Offset: 0x29894E0
    bool get_isStopped();
    // public System.Void set_isStopped(System.Boolean value)
    // Offset: 0x29894E8
    void set_isStopped(bool value);
    // public System.Action get_onSearchPath()
    // Offset: 0x29894F4
    ::System::Action* get_onSearchPath();
    // public System.Void set_onSearchPath(System.Action value)
    // Offset: 0x29894FC
    void set_onSearchPath(::System::Action* value);
    // protected System.Boolean get_shouldRecalculatePath()
    // Offset: 0x298950C
    bool get_shouldRecalculatePath();
    // public System.Void FindComponents()
    // Offset: 0x29896B4
    void FindComponents();
    // protected System.Void OnEnable()
    // Offset: 0x29897F8
    void OnEnable();
    // protected System.Void Start()
    // Offset: 0x2989960
    void Start();
    // private System.Void Init()
    // Offset: 0x29898D8
    void Init();
    // public System.Void Teleport(UnityEngine.Vector3 newPosition, System.Boolean clearPath)
    // Offset: 0x298996C
    void Teleport(::UnityEngine::Vector3 newPosition, bool clearPath);
    // protected System.Void CancelCurrentPathRequest()
    // Offset: 0x2989AC8
    void CancelCurrentPathRequest();
    // protected System.Void OnDisable()
    // Offset: 0x2989BF0
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x2989D20
    void Update();
    // protected System.Void FixedUpdate()
    // Offset: 0x2989FA0
    void FixedUpdate();
    // public System.Void MovementUpdate(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0x2989F8C
    void MovementUpdate(float deltaTime, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // protected System.Void MovementUpdateInternal(System.Single deltaTime, out UnityEngine.Vector3 nextPosition, out UnityEngine.Quaternion nextRotation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MovementUpdateInternal(float deltaTime, ByRef<::UnityEngine::Vector3> nextPosition, ByRef<::UnityEngine::Quaternion> nextRotation);
    // protected System.Void CalculatePathRequestEndpoints(out UnityEngine.Vector3 start, out UnityEngine.Vector3 end)
    // Offset: 0x298A098
    void CalculatePathRequestEndpoints(ByRef<::UnityEngine::Vector3> start, ByRef<::UnityEngine::Vector3> end);
    // public System.Void SearchPath()
    // Offset: 0x298A0E8
    void SearchPath();
    // public UnityEngine.Vector3 GetFeetPosition()
    // Offset: 0x298A3F4
    ::UnityEngine::Vector3 GetFeetPosition();
    // protected System.Void OnPathComplete(Pathfinding.Path newPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnPathComplete(::Pathfinding::Path* newPath);
    // protected System.Void ClearPath()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearPath();
    // public System.Void SetPath(Pathfinding.Path path, System.Boolean updateDestinationFromPath)
    // Offset: 0x298A1F4
    void SetPath(::Pathfinding::Path* path, bool updateDestinationFromPath);
    // protected System.Void ApplyGravity(System.Single deltaTime)
    // Offset: 0x298A438
    void ApplyGravity(float deltaTime);
    // protected UnityEngine.Vector2 CalculateDeltaToMoveThisFrame(UnityEngine.Vector2 position, System.Single distanceToEndOfPath, System.Single deltaTime)
    // Offset: 0x298A594
    ::UnityEngine::Vector2 CalculateDeltaToMoveThisFrame(::UnityEngine::Vector2 position, float distanceToEndOfPath, float deltaTime);
    // public UnityEngine.Quaternion SimulateRotationTowards(UnityEngine.Vector3 direction, System.Single maxDegrees)
    // Offset: 0x298A7C8
    ::UnityEngine::Quaternion SimulateRotationTowards(::UnityEngine::Vector3 direction, float maxDegrees);
    // protected UnityEngine.Quaternion SimulateRotationTowards(UnityEngine.Vector2 direction, System.Single maxDegrees)
    // Offset: 0x298A8A0
    ::UnityEngine::Quaternion SimulateRotationTowards(::UnityEngine::Vector2 direction, float maxDegrees);
    // public System.Void Move(UnityEngine.Vector3 deltaPosition)
    // Offset: 0x298AC18
    void Move(::UnityEngine::Vector3 deltaPosition);
    // public System.Void FinalizeMovement(UnityEngine.Vector3 nextPosition, UnityEngine.Quaternion nextRotation)
    // Offset: 0x298AC38
    void FinalizeMovement(::UnityEngine::Vector3 nextPosition, ::UnityEngine::Quaternion nextRotation);
    // private System.Void FinalizeRotation(UnityEngine.Quaternion nextRotation)
    // Offset: 0x298AC94
    void FinalizeRotation(::UnityEngine::Quaternion nextRotation);
    // private System.Void FinalizePosition(UnityEngine.Vector3 nextPosition)
    // Offset: 0x298AE14
    void FinalizePosition(::UnityEngine::Vector3 nextPosition);
    // protected System.Void UpdateVelocity()
    // Offset: 0x298B44C
    void UpdateVelocity();
    // protected UnityEngine.Vector3 ClampToNavmesh(UnityEngine.Vector3 position, out System.Boolean positionChanged)
    // Offset: 0x298B4A0
    ::UnityEngine::Vector3 ClampToNavmesh(::UnityEngine::Vector3 position, ByRef<bool> positionChanged);
    // protected UnityEngine.Vector3 RaycastPosition(UnityEngine.Vector3 position, System.Single lastElevation)
    // Offset: 0x298B16C
    ::UnityEngine::Vector3 RaycastPosition(::UnityEngine::Vector3 position, float lastElevation);
    // protected System.Void OnDrawGizmosSelected()
    // Offset: 0x298B4A8
    void OnDrawGizmosSelected();
    // protected System.Void OnDrawGizmos()
    // Offset: 0x298B520
    void OnDrawGizmos();
    // private System.Void ResetShape()
    // Offset: 0x298B8D8
    void ResetShape();
    // static private System.Void .cctor()
    // Offset: 0x298BB04
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x2989568
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AIBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AIBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AIBase*, creationType>()));
    }
    // protected override System.Void Reset()
    // Offset: 0x298B8BC
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Void VersionedMonoBehaviour::Reset()
    void Reset();
    // protected override System.Int32 OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    // Offset: 0x298B9AC
    // Implemented from: Pathfinding.VersionedMonoBehaviour
    // Base method: System.Int32 VersionedMonoBehaviour::OnUpgradeSerializedData(System.Int32 version, System.Boolean unityThread)
    int OnUpgradeSerializedData(int version, bool unityThread);
  }; // Pathfinding.AIBase
  #pragma pack(pop)
  static check_size<sizeof(AIBase), 296 + sizeof(::System::Action*)> __Pathfinding_AIBaseSizeCheck;
  static_assert(sizeof(AIBase) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AIBase::get_repathRate
// Il2CppName: get_repathRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_repathRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_repathRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_repathRate
// Il2CppName: set_repathRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(float)>(&Pathfinding::AIBase::set_repathRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_repathRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_canSearch
// Il2CppName: get_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_canSearch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_canSearch
// Il2CppName: set_canSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(bool)>(&Pathfinding::AIBase::set_canSearch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_canSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_centerOffset
// Il2CppName: get_centerOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_centerOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_centerOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_centerOffset
// Il2CppName: set_centerOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(float)>(&Pathfinding::AIBase::set_centerOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_centerOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_rotationIn2D
// Il2CppName: get_rotationIn2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_rotationIn2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_rotationIn2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_rotationIn2D
// Il2CppName: set_rotationIn2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(bool)>(&Pathfinding::AIBase::set_rotationIn2D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_rotationIn2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Quaternion)>(&Pathfinding::AIBase::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_usingGravity
// Il2CppName: get_usingGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_usingGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_usingGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_usingGravity
// Il2CppName: set_usingGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(bool)>(&Pathfinding::AIBase::set_usingGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_usingGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_target
// Il2CppName: get_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_target
// Il2CppName: set_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Transform*)>(&Pathfinding::AIBase::set_target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_destination
// Il2CppName: get_destination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_destination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_destination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_destination
// Il2CppName: set_destination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Vector3)>(&Pathfinding::AIBase::set_destination)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_destination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_desiredVelocity
// Il2CppName: get_desiredVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_desiredVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_desiredVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_isStopped
// Il2CppName: get_isStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_isStopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_isStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_isStopped
// Il2CppName: set_isStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(bool)>(&Pathfinding::AIBase::set_isStopped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_isStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_onSearchPath
// Il2CppName: get_onSearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_onSearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_onSearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::set_onSearchPath
// Il2CppName: set_onSearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::System::Action*)>(&Pathfinding::AIBase::set_onSearchPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "set_onSearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::get_shouldRecalculatePath
// Il2CppName: get_shouldRecalculatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::get_shouldRecalculatePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "get_shouldRecalculatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::FindComponents
// Il2CppName: FindComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::FindComponents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "FindComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::Teleport
// Il2CppName: Teleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Vector3, bool)>(&Pathfinding::AIBase::Teleport)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* clearPath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Teleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition, clearPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::CancelCurrentPathRequest
// Il2CppName: CancelCurrentPathRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::CancelCurrentPathRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "CancelCurrentPathRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::MovementUpdate
// Il2CppName: MovementUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::AIBase::MovementUpdate)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "MovementUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::MovementUpdateInternal
// Il2CppName: MovementUpdateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pathfinding::AIBase::MovementUpdateInternal)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "MovementUpdateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::CalculatePathRequestEndpoints
// Il2CppName: CalculatePathRequestEndpoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Pathfinding::AIBase::CalculatePathRequestEndpoints)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "CalculatePathRequestEndpoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::SearchPath
// Il2CppName: SearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::SearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "SearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::GetFeetPosition
// Il2CppName: GetFeetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::GetFeetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "GetFeetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::Pathfinding::Path*)>(&Pathfinding::AIBase::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* newPath = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::ClearPath
// Il2CppName: ClearPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::ClearPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "ClearPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::Pathfinding::Path*, bool)>(&Pathfinding::AIBase::SetPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* updateDestinationFromPath = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, updateDestinationFromPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::ApplyGravity
// Il2CppName: ApplyGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(float)>(&Pathfinding::AIBase::ApplyGravity)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "ApplyGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::CalculateDeltaToMoveThisFrame
// Il2CppName: CalculateDeltaToMoveThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::AIBase::*)(::UnityEngine::Vector2, float, float)>(&Pathfinding::AIBase::CalculateDeltaToMoveThisFrame)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distanceToEndOfPath = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "CalculateDeltaToMoveThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, distanceToEndOfPath, deltaTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::SimulateRotationTowards
// Il2CppName: SimulateRotationTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Pathfinding::AIBase::*)(::UnityEngine::Vector3, float)>(&Pathfinding::AIBase::SimulateRotationTowards)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxDegrees = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "SimulateRotationTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDegrees});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::SimulateRotationTowards
// Il2CppName: SimulateRotationTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Pathfinding::AIBase::*)(::UnityEngine::Vector2, float)>(&Pathfinding::AIBase::SimulateRotationTowards)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* maxDegrees = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "SimulateRotationTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDegrees});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Vector3)>(&Pathfinding::AIBase::Move)> {
  static const MethodInfo* get() {
    static auto* deltaPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaPosition});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::FinalizeMovement
// Il2CppName: FinalizeMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Pathfinding::AIBase::FinalizeMovement)> {
  static const MethodInfo* get() {
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "FinalizeMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nextPosition, nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::FinalizeRotation
// Il2CppName: FinalizeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Quaternion)>(&Pathfinding::AIBase::FinalizeRotation)> {
  static const MethodInfo* get() {
    static auto* nextRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "FinalizeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nextRotation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::FinalizePosition
// Il2CppName: FinalizePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)(::UnityEngine::Vector3)>(&Pathfinding::AIBase::FinalizePosition)> {
  static const MethodInfo* get() {
    static auto* nextPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "FinalizePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nextPosition});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::UpdateVelocity
// Il2CppName: UpdateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::UpdateVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "UpdateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::ClampToNavmesh
// Il2CppName: ClampToNavmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)(::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::AIBase::ClampToNavmesh)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* positionChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "ClampToNavmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, positionChanged});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::RaycastPosition
// Il2CppName: RaycastPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::AIBase::*)(::UnityEngine::Vector3, float)>(&Pathfinding::AIBase::RaycastPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lastElevation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "RaycastPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, lastElevation});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::ResetShape
// Il2CppName: ResetShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::ResetShape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "ResetShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::AIBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::AIBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AIBase::*)()>(&Pathfinding::AIBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AIBase::OnUpgradeSerializedData
// Il2CppName: OnUpgradeSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::AIBase::*)(int, bool)>(&Pathfinding::AIBase::OnUpgradeSerializedData)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* unityThread = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AIBase*), "OnUpgradeSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, unityThread});
  }
};
