// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathReturnQueue
  class PathReturnQueue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathReturnQueue);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathReturnQueue*, "Pathfinding", "PathReturnQueue");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathReturnQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class PathReturnQueue : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Queue`1<Pathfinding.Path> pathReturnQueue
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Queue_1<::Pathfinding::Path*>* pathReturnQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::Path*>*) == 0x8);
    // private System.Object pathsClaimedSilentlyBy
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* pathsClaimedSilentlyBy;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.Queue`1<Pathfinding.Path> pathReturnQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::Path*>*& dyn_pathReturnQueue();
    // Get instance field reference: private System.Object pathsClaimedSilentlyBy
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_pathsClaimedSilentlyBy();
    // public System.Void .ctor(System.Object pathsClaimedSilentlyBy)
    // Offset: 0x29B77D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathReturnQueue* New_ctor(::Il2CppObject* pathsClaimedSilentlyBy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PathReturnQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathReturnQueue*, creationType>(pathsClaimedSilentlyBy)));
    }
    // public System.Void Enqueue(Pathfinding.Path path)
    // Offset: 0x29B6CEC
    void Enqueue(::Pathfinding::Path* path);
    // public System.Void ReturnPaths(System.Boolean timeSlice)
    // Offset: 0x29B7870
    void ReturnPaths(bool timeSlice);
  }; // Pathfinding.PathReturnQueue
  #pragma pack(pop)
  static check_size<sizeof(PathReturnQueue), 24 + sizeof(::Il2CppObject*)> __Pathfinding_PathReturnQueueSizeCheck;
  static_assert(sizeof(PathReturnQueue) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathReturnQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::PathReturnQueue::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathReturnQueue::*)(::Pathfinding::Path*)>(&Pathfinding::PathReturnQueue::Enqueue)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathReturnQueue*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathReturnQueue::ReturnPaths
// Il2CppName: ReturnPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathReturnQueue::*)(bool)>(&Pathfinding::PathReturnQueue::ReturnPaths)> {
  static const MethodInfo* get() {
    static auto* timeSlice = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathReturnQueue*), "ReturnPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSlice});
  }
};
