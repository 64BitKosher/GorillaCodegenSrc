// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: Pathfinding.ClipperLib.IntPoint
#include "Pathfinding/ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: LocalMinima
  class LocalMinima;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: PolyType
  struct PolyType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: ClipperBase
  class ClipperBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ClipperLib::ClipperBase);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ClipperLib::ClipperBase*, "Pathfinding.ClipperLib", "ClipperBase");
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Size: 0x2B
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ClipperLib.ClipperBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperBase : public ::Il2CppObject {
    public:
    public:
    // Pathfinding.ClipperLib.LocalMinima m_MinimaList
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::ClipperLib::LocalMinima* m_MinimaList;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::LocalMinima*) == 0x8);
    // Pathfinding.ClipperLib.LocalMinima m_CurrentLM
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::ClipperLib::LocalMinima* m_CurrentLM;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::LocalMinima*) == 0x8);
    // System.Collections.Generic.List`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.TEdge>> m_edges
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::TEdge*>*>* m_edges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::TEdge*>*>*) == 0x8);
    // System.Boolean m_UseFullRange
    // Size: 0x1
    // Offset: 0x28
    bool m_UseFullRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_HasOpenPaths
    // Size: 0x1
    // Offset: 0x29
    bool m_HasOpenPaths;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <PreserveCollinear>k__BackingField
    // Size: 0x1
    // Offset: 0x2A
    bool PreserveCollinear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static protected System.Double horizontal
    static constexpr const double horizontal = -3.4e+38;
    // Get static field: static protected System.Double horizontal
    static double _get_horizontal();
    // Set static field: static protected System.Double horizontal
    static void _set_horizontal(double value);
    // static field const value: static protected System.Int32 Skip
    static constexpr const int Skip = -2;
    // Get static field: static protected System.Int32 Skip
    static int _get_Skip();
    // Set static field: static protected System.Int32 Skip
    static void _set_Skip(int value);
    // static field const value: static protected System.Int32 Unassigned
    static constexpr const int Unassigned = -1;
    // Get static field: static protected System.Int32 Unassigned
    static int _get_Unassigned();
    // Set static field: static protected System.Int32 Unassigned
    static void _set_Unassigned(int value);
    // static field const value: static protected System.Double tolerance
    static constexpr const double tolerance = 1e-20;
    // Get static field: static protected System.Double tolerance
    static double _get_tolerance();
    // Set static field: static protected System.Double tolerance
    static void _set_tolerance(double value);
    // static field const value: static System.Int64 loRange
    static constexpr const int64_t loRange = 1073741823;
    // Get static field: static System.Int64 loRange
    static int64_t _get_loRange();
    // Set static field: static System.Int64 loRange
    static void _set_loRange(int64_t value);
    // static field const value: static System.Int64 hiRange
    static constexpr const int64_t hiRange = 4611686018427387903;
    // Get static field: static System.Int64 hiRange
    static int64_t _get_hiRange();
    // Set static field: static System.Int64 hiRange
    static void _set_hiRange(int64_t value);
    // Get instance field reference: Pathfinding.ClipperLib.LocalMinima m_MinimaList
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::LocalMinima*& dyn_m_MinimaList();
    // Get instance field reference: Pathfinding.ClipperLib.LocalMinima m_CurrentLM
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::LocalMinima*& dyn_m_CurrentLM();
    // Get instance field reference: System.Collections.Generic.List`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.TEdge>> m_edges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::TEdge*>*>*& dyn_m_edges();
    // Get instance field reference: System.Boolean m_UseFullRange
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFullRange();
    // Get instance field reference: System.Boolean m_HasOpenPaths
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasOpenPaths();
    // Get instance field reference: private System.Boolean <PreserveCollinear>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PreserveCollinear$k__BackingField();
    // System.Void .ctor()
    // Offset: 0x4994BE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ClipperLib::ClipperBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperBase*, creationType>()));
    }
    // public System.Boolean get_PreserveCollinear()
    // Offset: 0x4994C90
    bool get_PreserveCollinear();
    // public System.Void set_PreserveCollinear(System.Boolean value)
    // Offset: 0x4994C98
    void set_PreserveCollinear(bool value);
    // static System.Boolean IsHorizontal(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x4994CA4
    static bool IsHorizontal(::Pathfinding::ClipperLib::TEdge* e);
    // System.Boolean PointOnLineSegment(Pathfinding.ClipperLib.IntPoint pt, Pathfinding.ClipperLib.IntPoint linePt1, Pathfinding.ClipperLib.IntPoint linePt2, System.Boolean UseFullRange)
    // Offset: 0x4994CC4
    bool PointOnLineSegment(::Pathfinding::ClipperLib::IntPoint pt, ::Pathfinding::ClipperLib::IntPoint linePt1, ::Pathfinding::ClipperLib::IntPoint linePt2, bool UseFullRange);
    // System.Boolean PointOnPolygon(Pathfinding.ClipperLib.IntPoint pt, Pathfinding.ClipperLib.OutPt pp, System.Boolean UseFullRange)
    // Offset: 0x4994DEC
    bool PointOnPolygon(::Pathfinding::ClipperLib::IntPoint pt, ::Pathfinding::ClipperLib::OutPt* pp, bool UseFullRange);
    // System.Boolean PointInPolygon(Pathfinding.ClipperLib.IntPoint pt, Pathfinding.ClipperLib.OutPt pp, System.Boolean UseFullRange)
    // Offset: 0x4994E60
    bool PointInPolygon(::Pathfinding::ClipperLib::IntPoint pt, ::Pathfinding::ClipperLib::OutPt* pp, bool UseFullRange);
    // static System.Boolean SlopesEqual(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2, System.Boolean UseFullRange)
    // Offset: 0x4994F9C
    static bool SlopesEqual(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2, bool UseFullRange);
    // static protected System.Boolean SlopesEqual(Pathfinding.ClipperLib.IntPoint pt1, Pathfinding.ClipperLib.IntPoint pt2, Pathfinding.ClipperLib.IntPoint pt3, System.Boolean UseFullRange)
    // Offset: 0x4995020
    static bool SlopesEqual(::Pathfinding::ClipperLib::IntPoint pt1, ::Pathfinding::ClipperLib::IntPoint pt2, ::Pathfinding::ClipperLib::IntPoint pt3, bool UseFullRange);
    // public System.Void Clear()
    // Offset: 0x49950B4
    void Clear();
    // private System.Void DisposeLocalMinimaList()
    // Offset: 0x4995220
    void DisposeLocalMinimaList();
    // private System.Void RangeTest(Pathfinding.ClipperLib.IntPoint Pt, ref System.Boolean useFullRange)
    // Offset: 0x499527C
    void RangeTest(::Pathfinding::ClipperLib::IntPoint Pt, ByRef<bool> useFullRange);
    // private System.Void InitEdge(Pathfinding.ClipperLib.TEdge e, Pathfinding.ClipperLib.TEdge eNext, Pathfinding.ClipperLib.TEdge ePrev, Pathfinding.ClipperLib.IntPoint pt)
    // Offset: 0x4995350
    void InitEdge(::Pathfinding::ClipperLib::TEdge* e, ::Pathfinding::ClipperLib::TEdge* eNext, ::Pathfinding::ClipperLib::TEdge* ePrev, ::Pathfinding::ClipperLib::IntPoint pt);
    // private System.Void InitEdge2(Pathfinding.ClipperLib.TEdge e, Pathfinding.ClipperLib.PolyType polyType)
    // Offset: 0x49953B0
    void InitEdge2(::Pathfinding::ClipperLib::TEdge* e, ::Pathfinding::ClipperLib::PolyType polyType);
    // public System.Boolean AddPath(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> pg, Pathfinding.ClipperLib.PolyType polyType, System.Boolean Closed)
    // Offset: 0x499546C
    bool AddPath(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* pg, ::Pathfinding::ClipperLib::PolyType polyType, bool Closed);
    // public System.Boolean AddPolygon(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> pg, Pathfinding.ClipperLib.PolyType polyType)
    // Offset: 0x49962B4
    bool AddPolygon(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* pg, ::Pathfinding::ClipperLib::PolyType polyType);
    // System.Boolean Pt2IsBetweenPt1AndPt3(Pathfinding.ClipperLib.IntPoint pt1, Pathfinding.ClipperLib.IntPoint pt2, Pathfinding.ClipperLib.IntPoint pt3)
    // Offset: 0x4995DD8
    bool Pt2IsBetweenPt1AndPt3(::Pathfinding::ClipperLib::IntPoint pt1, ::Pathfinding::ClipperLib::IntPoint pt2, ::Pathfinding::ClipperLib::IntPoint pt3);
    // private Pathfinding.ClipperLib.TEdge RemoveEdge(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x4995D74
    ::Pathfinding::ClipperLib::TEdge* RemoveEdge(::Pathfinding::ClipperLib::TEdge* e);
    // private Pathfinding.ClipperLib.TEdge GetLastHorz(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x49962BC
    ::Pathfinding::ClipperLib::TEdge* GetLastHorz(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean SharedVertWithPrevAtTop(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x4996018
    bool SharedVertWithPrevAtTop(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean SharedVertWithNextIsBot(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x49962FC
    bool SharedVertWithNextIsBot(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean MoreBelow(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x49963D0
    bool MoreBelow(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean JustBeforeLocMin(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x4996468
    bool JustBeforeLocMin(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean MoreAbove(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x49964B0
    bool MoreAbove(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Boolean AllHorizontal(Pathfinding.ClipperLib.TEdge Edge)
    // Offset: 0x4995E40
    bool AllHorizontal(::Pathfinding::ClipperLib::TEdge* Edge);
    // private System.Void SetDx(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x4995420
    void SetDx(::Pathfinding::ClipperLib::TEdge* e);
    // private System.Void DoMinimaLML(Pathfinding.ClipperLib.TEdge E1, Pathfinding.ClipperLib.TEdge E2, System.Boolean IsClosed)
    // Offset: 0x4996504
    void DoMinimaLML(::Pathfinding::ClipperLib::TEdge* E1, ::Pathfinding::ClipperLib::TEdge* E2, bool IsClosed);
    // private Pathfinding.ClipperLib.TEdge DescendToMin(ref Pathfinding.ClipperLib.TEdge E)
    // Offset: 0x4996780
    ::Pathfinding::ClipperLib::TEdge* DescendToMin(ByRef<::Pathfinding::ClipperLib::TEdge*> E);
    // private System.Void AscendToMax(ref Pathfinding.ClipperLib.TEdge E, System.Boolean Appending, System.Boolean IsClosed)
    // Offset: 0x4995E84
    void AscendToMax(ByRef<::Pathfinding::ClipperLib::TEdge*> E, bool Appending, bool IsClosed);
    // private Pathfinding.ClipperLib.TEdge AddBoundsToLML(Pathfinding.ClipperLib.TEdge E, System.Boolean Closed)
    // Offset: 0x49960B4
    ::Pathfinding::ClipperLib::TEdge* AddBoundsToLML(::Pathfinding::ClipperLib::TEdge* E, bool Closed);
    // private System.Void InsertLocalMinima(Pathfinding.ClipperLib.LocalMinima newLm)
    // Offset: 0x49966D4
    void InsertLocalMinima(::Pathfinding::ClipperLib::LocalMinima* newLm);
    // protected System.Void PopLocalMinima()
    // Offset: 0x4996948
    void PopLocalMinima();
    // private System.Void ReverseHorizontal(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499675C
    void ReverseHorizontal(::Pathfinding::ClipperLib::TEdge* e);
    // protected System.Void Reset()
    // Offset: 0x4996960
    void Reset();
  }; // Pathfinding.ClipperLib.ClipperBase
  #pragma pack(pop)
  static check_size<sizeof(ClipperBase), 42 + sizeof(bool)> __Pathfinding_ClipperLib_ClipperBaseSizeCheck;
  static_assert(sizeof(ClipperBase) == 0x2B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::get_PreserveCollinear
// Il2CppName: get_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)()>(&Pathfinding::ClipperLib::ClipperBase::get_PreserveCollinear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "get_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::set_PreserveCollinear
// Il2CppName: set_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(bool)>(&Pathfinding::ClipperLib::ClipperBase::set_PreserveCollinear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "set_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::IsHorizontal
// Il2CppName: IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::IsHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::PointOnLineSegment
// Il2CppName: PointOnLineSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, bool)>(&Pathfinding::ClipperLib::ClipperBase::PointOnLineSegment)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* linePt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* linePt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "PointOnLineSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, linePt1, linePt2, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::PointOnPolygon
// Il2CppName: PointOnPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::OutPt*, bool)>(&Pathfinding::ClipperLib::ClipperBase::PointOnPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "PointOnPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::OutPt*, bool)>(&Pathfinding::ClipperLib::ClipperBase::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, bool)>(&Pathfinding::ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, bool)>(&Pathfinding::ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)()>(&Pathfinding::ClipperLib::ClipperBase::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::DisposeLocalMinimaList
// Il2CppName: DisposeLocalMinimaList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)()>(&Pathfinding::ClipperLib::ClipperBase::DisposeLocalMinimaList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "DisposeLocalMinimaList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::RangeTest
// Il2CppName: RangeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::IntPoint, ByRef<bool>)>(&Pathfinding::ClipperLib::ClipperBase::RangeTest)> {
  static const MethodInfo* get() {
    static auto* Pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* useFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "RangeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Pt, useFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::InitEdge
// Il2CppName: InitEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::ClipperBase::InitEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* eNext = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* ePrev = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "InitEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, eNext, ePrev, pt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::InitEdge2
// Il2CppName: InitEdge2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::PolyType)>(&Pathfinding::ClipperLib::ClipperBase::InitEdge2)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "InitEdge2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, polyType});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::Pathfinding::ClipperLib::PolyType, bool)>(&Pathfinding::ClipperLib::ClipperBase::AddPath)> {
  static const MethodInfo* get() {
    static auto* pg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyType")->byval_arg;
    static auto* Closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pg, polyType, Closed});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::AddPolygon
// Il2CppName: AddPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*, ::Pathfinding::ClipperLib::PolyType)>(&Pathfinding::ClipperLib::ClipperBase::AddPolygon)> {
  static const MethodInfo* get() {
    static auto* pg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "AddPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pg, polyType});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3
// Il2CppName: Pt2IsBetweenPt1AndPt3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "Pt2IsBetweenPt1AndPt3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::RemoveEdge
// Il2CppName: RemoveEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::RemoveEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "RemoveEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::GetLastHorz
// Il2CppName: GetLastHorz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::GetLastHorz)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "GetLastHorz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::SharedVertWithPrevAtTop
// Il2CppName: SharedVertWithPrevAtTop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::SharedVertWithPrevAtTop)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "SharedVertWithPrevAtTop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::SharedVertWithNextIsBot
// Il2CppName: SharedVertWithNextIsBot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::SharedVertWithNextIsBot)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "SharedVertWithNextIsBot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::MoreBelow
// Il2CppName: MoreBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::MoreBelow)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "MoreBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::JustBeforeLocMin
// Il2CppName: JustBeforeLocMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::JustBeforeLocMin)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "JustBeforeLocMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::MoreAbove
// Il2CppName: MoreAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::MoreAbove)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "MoreAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::AllHorizontal
// Il2CppName: AllHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::AllHorizontal)> {
  static const MethodInfo* get() {
    static auto* Edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "AllHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::SetDx
// Il2CppName: SetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::SetDx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "SetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::DoMinimaLML
// Il2CppName: DoMinimaLML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, bool)>(&Pathfinding::ClipperLib::ClipperBase::DoMinimaLML)> {
  static const MethodInfo* get() {
    static auto* E1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* E2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* IsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "DoMinimaLML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E1, E2, IsClosed});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::DescendToMin
// Il2CppName: DescendToMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::ClipperBase::*)(ByRef<::Pathfinding::ClipperLib::TEdge*>)>(&Pathfinding::ClipperLib::ClipperBase::DescendToMin)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "DescendToMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::AscendToMax
// Il2CppName: AscendToMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(ByRef<::Pathfinding::ClipperLib::TEdge*>, bool, bool)>(&Pathfinding::ClipperLib::ClipperBase::AscendToMax)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->this_arg;
    static auto* Appending = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* IsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "AscendToMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E, Appending, IsClosed});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::AddBoundsToLML
// Il2CppName: AddBoundsToLML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*, bool)>(&Pathfinding::ClipperLib::ClipperBase::AddBoundsToLML)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* Closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "AddBoundsToLML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E, Closed});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::InsertLocalMinima
// Il2CppName: InsertLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::LocalMinima*)>(&Pathfinding::ClipperLib::ClipperBase::InsertLocalMinima)> {
  static const MethodInfo* get() {
    static auto* newLm = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "LocalMinima")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "InsertLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLm});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::PopLocalMinima
// Il2CppName: PopLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)()>(&Pathfinding::ClipperLib::ClipperBase::PopLocalMinima)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "PopLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::ReverseHorizontal
// Il2CppName: ReverseHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::ClipperBase::ReverseHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "ReverseHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::ClipperBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::ClipperBase::*)()>(&Pathfinding::ClipperLib::ClipperBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::ClipperBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
