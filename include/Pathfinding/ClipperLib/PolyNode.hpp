// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ClipperLib.IntPoint
#include "Pathfinding/ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: PolyNode
  class PolyNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ClipperLib::PolyNode);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ClipperLib::PolyNode*, "Pathfinding.ClipperLib", "PolyNode");
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ClipperLib.PolyNode
  // [TokenAttribute] Offset: FFFFFFFF
  class PolyNode : public ::Il2CppObject {
    public:
    public:
    // Pathfinding.ClipperLib.PolyNode m_Parent
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::ClipperLib::PolyNode* m_Parent;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::PolyNode*) == 0x8);
    // System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> m_polygon
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* m_polygon;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*) == 0x8);
    // System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x20
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Index and: m_Childs
    char __padding2[0x4] = {};
    // System.Collections.Generic.List`1<Pathfinding.ClipperLib.PolyNode> m_Childs
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::PolyNode*>* m_Childs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::PolyNode*>*) == 0x8);
    // private System.Boolean <IsOpen>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: Pathfinding.ClipperLib.PolyNode m_Parent
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::PolyNode*& dyn_m_Parent();
    // Get instance field reference: System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> m_polygon
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*& dyn_m_polygon();
    // Get instance field reference: System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // Get instance field reference: System.Collections.Generic.List`1<Pathfinding.ClipperLib.PolyNode> m_Childs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::PolyNode*>*& dyn_m_Childs();
    // Get instance field reference: private System.Boolean <IsOpen>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOpen$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x49942DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PolyNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ClipperLib::PolyNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PolyNode*, creationType>()));
    }
    // public System.Int32 get_ChildCount()
    // Offset: 0x4994534
    int get_ChildCount();
    // public System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> get_Contour()
    // Offset: 0x499457C
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* get_Contour();
    // System.Void AddChild(Pathfinding.ClipperLib.PolyNode Child)
    // Offset: 0x4994584
    void AddChild(::Pathfinding::ClipperLib::PolyNode* Child);
    // public System.Collections.Generic.List`1<Pathfinding.ClipperLib.PolyNode> get_Childs()
    // Offset: 0x4994650
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::PolyNode*>* get_Childs();
    // public System.Void set_IsOpen(System.Boolean value)
    // Offset: 0x4994658
    void set_IsOpen(bool value);
  }; // Pathfinding.ClipperLib.PolyNode
  #pragma pack(pop)
  static check_size<sizeof(PolyNode), 48 + sizeof(bool)> __Pathfinding_ClipperLib_PolyNodeSizeCheck;
  static_assert(sizeof(PolyNode) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::get_ChildCount
// Il2CppName: get_ChildCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::ClipperLib::PolyNode::*)()>(&Pathfinding::ClipperLib::PolyNode::get_ChildCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::PolyNode*), "get_ChildCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::get_Contour
// Il2CppName: get_Contour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* (Pathfinding::ClipperLib::PolyNode::*)()>(&Pathfinding::ClipperLib::PolyNode::get_Contour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::PolyNode*), "get_Contour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::AddChild
// Il2CppName: AddChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::PolyNode::*)(::Pathfinding::ClipperLib::PolyNode*)>(&Pathfinding::ClipperLib::PolyNode::AddChild)> {
  static const MethodInfo* get() {
    static auto* Child = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::PolyNode*), "AddChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Child});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::get_Childs
// Il2CppName: get_Childs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::PolyNode*>* (Pathfinding::ClipperLib::PolyNode::*)()>(&Pathfinding::ClipperLib::PolyNode::get_Childs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::PolyNode*), "get_Childs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::PolyNode::set_IsOpen
// Il2CppName: set_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::PolyNode::*)(bool)>(&Pathfinding::ClipperLib::PolyNode::set_IsOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::PolyNode*), "set_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
