// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ClipperLib.ClipperBase
#include "Pathfinding/ClipperLib/ClipperBase.hpp"
// Including type: Pathfinding.ClipperLib.ClipType
#include "Pathfinding/ClipperLib/ClipType.hpp"
// Including type: Pathfinding.ClipperLib.PolyFillType
#include "Pathfinding/ClipperLib/PolyFillType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: OutRec
  class OutRec;
  // Forward declaring type: Scanbeam
  class Scanbeam;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: IntersectNode
  class IntersectNode;
  // Forward declaring type: Join
  class Join;
  // Forward declaring type: PolyTree
  class PolyTree;
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: Direction
  struct Direction;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Forward declaring type: Clipper
  class Clipper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ClipperLib::Clipper);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ClipperLib::Clipper*, "Pathfinding.ClipperLib", "Clipper");
// Type namespace: Pathfinding.ClipperLib
namespace Pathfinding::ClipperLib {
  // Size: 0x83
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ClipperLib.Clipper
  // [TokenAttribute] Offset: FFFFFFFF
  class Clipper : public ::Pathfinding::ClipperLib::ClipperBase {
    public:
    // Writing base type padding for base size: 0x2B to desired offset: 0x30
    char ___base_padding[0x5] = {};
    public:
    // private System.Collections.Generic.List`1<Pathfinding.ClipperLib.OutRec> m_PolyOuts
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::OutRec*>* m_PolyOuts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::OutRec*>*) == 0x8);
    // private Pathfinding.ClipperLib.ClipType m_ClipType
    // Size: 0x4
    // Offset: 0x38
    ::Pathfinding::ClipperLib::ClipType m_ClipType;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::ClipType) == 0x4);
    // Padding between fields: m_ClipType and: m_Scanbeam
    char __padding1[0x4] = {};
    // private Pathfinding.ClipperLib.Scanbeam m_Scanbeam
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::ClipperLib::Scanbeam* m_Scanbeam;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::Scanbeam*) == 0x8);
    // private Pathfinding.ClipperLib.TEdge m_ActiveEdges
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::ClipperLib::TEdge* m_ActiveEdges;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::TEdge*) == 0x8);
    // private Pathfinding.ClipperLib.TEdge m_SortedEdges
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::ClipperLib::TEdge* m_SortedEdges;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::TEdge*) == 0x8);
    // private Pathfinding.ClipperLib.IntersectNode m_IntersectNodes
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::ClipperLib::IntersectNode* m_IntersectNodes;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::IntersectNode*) == 0x8);
    // private System.Boolean m_ExecuteLocked
    // Size: 0x1
    // Offset: 0x60
    bool m_ExecuteLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ExecuteLocked and: m_ClipFillType
    char __padding6[0x3] = {};
    // private Pathfinding.ClipperLib.PolyFillType m_ClipFillType
    // Size: 0x4
    // Offset: 0x64
    ::Pathfinding::ClipperLib::PolyFillType m_ClipFillType;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::PolyFillType) == 0x4);
    // private Pathfinding.ClipperLib.PolyFillType m_SubjFillType
    // Size: 0x4
    // Offset: 0x68
    ::Pathfinding::ClipperLib::PolyFillType m_SubjFillType;
    // Field size check
    static_assert(sizeof(::Pathfinding::ClipperLib::PolyFillType) == 0x4);
    // Padding between fields: m_SubjFillType and: m_Joins
    char __padding8[0x4] = {};
    // private System.Collections.Generic.List`1<Pathfinding.ClipperLib.Join> m_Joins
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>* m_Joins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.ClipperLib.Join> m_GhostJoins
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>* m_GhostJoins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>*) == 0x8);
    // private System.Boolean m_UsingPolyTree
    // Size: 0x1
    // Offset: 0x80
    bool m_UsingPolyTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReverseSolution>k__BackingField
    // Size: 0x1
    // Offset: 0x81
    bool ReverseSolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <StrictlySimple>k__BackingField
    // Size: 0x1
    // Offset: 0x82
    bool StrictlySimple;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.Int32 ioReverseSolution
    static constexpr const int ioReverseSolution = 1;
    // Get static field: static public System.Int32 ioReverseSolution
    static int _get_ioReverseSolution();
    // Set static field: static public System.Int32 ioReverseSolution
    static void _set_ioReverseSolution(int value);
    // static field const value: static public System.Int32 ioStrictlySimple
    static constexpr const int ioStrictlySimple = 2;
    // Get static field: static public System.Int32 ioStrictlySimple
    static int _get_ioStrictlySimple();
    // Set static field: static public System.Int32 ioStrictlySimple
    static void _set_ioStrictlySimple(int value);
    // static field const value: static public System.Int32 ioPreserveCollinear
    static constexpr const int ioPreserveCollinear = 4;
    // Get static field: static public System.Int32 ioPreserveCollinear
    static int _get_ioPreserveCollinear();
    // Set static field: static public System.Int32 ioPreserveCollinear
    static void _set_ioPreserveCollinear(int value);
    // Get static field: static private System.Action`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> <>f__am$cacheE
    static ::System::Action_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* _get_$$f__am$cacheE();
    // Set static field: static private System.Action`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> <>f__am$cacheE
    static void _set_$$f__am$cacheE(::System::Action_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* value);
    // Get static field: static private System.Action`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> <>f__am$cacheF
    static ::System::Action_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* _get_$$f__am$cacheF();
    // Set static field: static private System.Action`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> <>f__am$cacheF
    static void _set_$$f__am$cacheF(::System::Action_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* value);
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.ClipperLib.OutRec> m_PolyOuts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::OutRec*>*& dyn_m_PolyOuts();
    // Get instance field reference: private Pathfinding.ClipperLib.ClipType m_ClipType
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::ClipType& dyn_m_ClipType();
    // Get instance field reference: private Pathfinding.ClipperLib.Scanbeam m_Scanbeam
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::Scanbeam*& dyn_m_Scanbeam();
    // Get instance field reference: private Pathfinding.ClipperLib.TEdge m_ActiveEdges
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::TEdge*& dyn_m_ActiveEdges();
    // Get instance field reference: private Pathfinding.ClipperLib.TEdge m_SortedEdges
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::TEdge*& dyn_m_SortedEdges();
    // Get instance field reference: private Pathfinding.ClipperLib.IntersectNode m_IntersectNodes
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::IntersectNode*& dyn_m_IntersectNodes();
    // Get instance field reference: private System.Boolean m_ExecuteLocked
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecuteLocked();
    // Get instance field reference: private Pathfinding.ClipperLib.PolyFillType m_ClipFillType
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::PolyFillType& dyn_m_ClipFillType();
    // Get instance field reference: private Pathfinding.ClipperLib.PolyFillType m_SubjFillType
    [[deprecated("Use field access instead!")]] ::Pathfinding::ClipperLib::PolyFillType& dyn_m_SubjFillType();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.ClipperLib.Join> m_Joins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>*& dyn_m_Joins();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.ClipperLib.Join> m_GhostJoins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::Join*>*& dyn_m_GhostJoins();
    // Get instance field reference: private System.Boolean m_UsingPolyTree
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsingPolyTree();
    // Get instance field reference: private System.Boolean <ReverseSolution>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReverseSolution$k__BackingField();
    // Get instance field reference: private System.Boolean <StrictlySimple>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$StrictlySimple$k__BackingField();
    // public System.Void .ctor(System.Int32 InitOptions)
    // Offset: 0x49969F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clipper* New_ctor(int InitOptions) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ClipperLib::Clipper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clipper*, creationType>(InitOptions)));
    }
    // public System.Boolean get_ReverseSolution()
    // Offset: 0x4996E2C
    bool get_ReverseSolution();
    // public System.Void set_ReverseSolution(System.Boolean value)
    // Offset: 0x4996E34
    void set_ReverseSolution(bool value);
    // public System.Boolean get_StrictlySimple()
    // Offset: 0x4996E40
    bool get_StrictlySimple();
    // public System.Void set_StrictlySimple(System.Boolean value)
    // Offset: 0x4996E48
    void set_StrictlySimple(bool value);
    // private System.Void InsertScanbeam(System.Int64 Y)
    // Offset: 0x4996CD8
    void InsertScanbeam(int64_t Y);
    // public System.Boolean Execute(Pathfinding.ClipperLib.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> solution, Pathfinding.ClipperLib.PolyFillType subjFillType, Pathfinding.ClipperLib.PolyFillType clipFillType)
    // Offset: 0x4996E54
    bool Execute(::Pathfinding::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* solution, ::Pathfinding::ClipperLib::PolyFillType subjFillType, ::Pathfinding::ClipperLib::PolyFillType clipFillType);
    // public System.Boolean Execute(Pathfinding.ClipperLib.ClipType clipType, Pathfinding.ClipperLib.PolyTree polytree, Pathfinding.ClipperLib.PolyFillType subjFillType, Pathfinding.ClipperLib.PolyFillType clipFillType)
    // Offset: 0x4997558
    bool Execute(::Pathfinding::ClipperLib::ClipType clipType, ::Pathfinding::ClipperLib::PolyTree* polytree, ::Pathfinding::ClipperLib::PolyFillType subjFillType, ::Pathfinding::ClipperLib::PolyFillType clipFillType);
    // System.Void FixHoleLinkage(Pathfinding.ClipperLib.OutRec outRec)
    // Offset: 0x49978E4
    void FixHoleLinkage(::Pathfinding::ClipperLib::OutRec* outRec);
    // private System.Boolean ExecuteInternal()
    // Offset: 0x4996F70
    bool ExecuteInternal();
    // private System.Int64 PopScanbeam()
    // Offset: 0x499794C
    int64_t PopScanbeam();
    // private System.Void DisposeAllPolyPts()
    // Offset: 0x4996BC4
    void DisposeAllPolyPts();
    // private System.Void DisposeOutRec(System.Int32 index)
    // Offset: 0x4998988
    void DisposeOutRec(int index);
    // private System.Void DisposeOutPts(Pathfinding.ClipperLib.OutPt pp)
    // Offset: 0x4998A1C
    void DisposeOutPts(::Pathfinding::ClipperLib::OutPt* pp);
    // private System.Void AddJoin(Pathfinding.ClipperLib.OutPt Op1, Pathfinding.ClipperLib.OutPt Op2, Pathfinding.ClipperLib.IntPoint OffPt)
    // Offset: 0x4998A48
    void AddJoin(::Pathfinding::ClipperLib::OutPt* Op1, ::Pathfinding::ClipperLib::OutPt* Op2, ::Pathfinding::ClipperLib::IntPoint OffPt);
    // private System.Void AddGhostJoin(Pathfinding.ClipperLib.OutPt Op, Pathfinding.ClipperLib.IntPoint OffPt)
    // Offset: 0x4998B6C
    void AddGhostJoin(::Pathfinding::ClipperLib::OutPt* Op, ::Pathfinding::ClipperLib::IntPoint OffPt);
    // private System.Void InsertLocalMinimaIntoAEL(System.Int64 botY)
    // Offset: 0x4997974
    void InsertLocalMinimaIntoAEL(int64_t botY);
    // private System.Void InsertEdgeIntoAEL(Pathfinding.ClipperLib.TEdge edge, Pathfinding.ClipperLib.TEdge startEdge)
    // Offset: 0x4998C7C
    void InsertEdgeIntoAEL(::Pathfinding::ClipperLib::TEdge* edge, ::Pathfinding::ClipperLib::TEdge* startEdge);
    // private System.Boolean E2InsertsBeforeE1(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2)
    // Offset: 0x4999BF8
    bool E2InsertsBeforeE1(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2);
    // private System.Boolean IsEvenOddFillType(Pathfinding.ClipperLib.TEdge edge)
    // Offset: 0x4999CD4
    bool IsEvenOddFillType(::Pathfinding::ClipperLib::TEdge* edge);
    // private System.Boolean IsEvenOddAltFillType(Pathfinding.ClipperLib.TEdge edge)
    // Offset: 0x4999D08
    bool IsEvenOddAltFillType(::Pathfinding::ClipperLib::TEdge* edge);
    // private System.Boolean IsContributing(Pathfinding.ClipperLib.TEdge edge)
    // Offset: 0x4998FB0
    bool IsContributing(::Pathfinding::ClipperLib::TEdge* edge);
    // private System.Void SetWindingCount(Pathfinding.ClipperLib.TEdge edge)
    // Offset: 0x4998D7C
    void SetWindingCount(::Pathfinding::ClipperLib::TEdge* edge);
    // private System.Void AddEdgeToSEL(Pathfinding.ClipperLib.TEdge edge)
    // Offset: 0x49994A0
    void AddEdgeToSEL(::Pathfinding::ClipperLib::TEdge* edge);
    // private System.Void CopyAELToSEL()
    // Offset: 0x4999D3C
    void CopyAELToSEL();
    // private System.Void SwapPositionsInAEL(Pathfinding.ClipperLib.TEdge edge1, Pathfinding.ClipperLib.TEdge edge2)
    // Offset: 0x4999D84
    void SwapPositionsInAEL(::Pathfinding::ClipperLib::TEdge* edge1, ::Pathfinding::ClipperLib::TEdge* edge2);
    // private System.Void SwapPositionsInSEL(Pathfinding.ClipperLib.TEdge edge1, Pathfinding.ClipperLib.TEdge edge2)
    // Offset: 0x4999FC0
    void SwapPositionsInSEL(::Pathfinding::ClipperLib::TEdge* edge1, ::Pathfinding::ClipperLib::TEdge* edge2);
    // private System.Void AddLocalMaxPoly(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2, Pathfinding.ClipperLib.IntPoint pt)
    // Offset: 0x499A204
    void AddLocalMaxPoly(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2, ::Pathfinding::ClipperLib::IntPoint pt);
    // private Pathfinding.ClipperLib.OutPt AddLocalMinPoly(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2, Pathfinding.ClipperLib.IntPoint pt)
    // Offset: 0x4999340
    ::Pathfinding::ClipperLib::OutPt* AddLocalMinPoly(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2, ::Pathfinding::ClipperLib::IntPoint pt);
    // private Pathfinding.ClipperLib.OutRec CreateOutRec()
    // Offset: 0x499A5F4
    ::Pathfinding::ClipperLib::OutRec* CreateOutRec();
    // private Pathfinding.ClipperLib.OutPt AddOutPt(Pathfinding.ClipperLib.TEdge e, Pathfinding.ClipperLib.IntPoint pt)
    // Offset: 0x4999128
    ::Pathfinding::ClipperLib::OutPt* AddOutPt(::Pathfinding::ClipperLib::TEdge* e, ::Pathfinding::ClipperLib::IntPoint pt);
    // private System.Boolean HorzSegmentsOverlap(Pathfinding.ClipperLib.IntPoint Pt1a, Pathfinding.ClipperLib.IntPoint Pt1b, Pathfinding.ClipperLib.IntPoint Pt2a, Pathfinding.ClipperLib.IntPoint Pt2b)
    // Offset: 0x4999540
    bool HorzSegmentsOverlap(::Pathfinding::ClipperLib::IntPoint Pt1a, ::Pathfinding::ClipperLib::IntPoint Pt1b, ::Pathfinding::ClipperLib::IntPoint Pt2a, ::Pathfinding::ClipperLib::IntPoint Pt2b);
    // private System.Void SetHoleState(Pathfinding.ClipperLib.TEdge e, Pathfinding.ClipperLib.OutRec outRec)
    // Offset: 0x499A738
    void SetHoleState(::Pathfinding::ClipperLib::TEdge* e, ::Pathfinding::ClipperLib::OutRec* outRec);
    // private System.Double GetDx(Pathfinding.ClipperLib.IntPoint pt1, Pathfinding.ClipperLib.IntPoint pt2)
    // Offset: 0x499A7F8
    double GetDx(::Pathfinding::ClipperLib::IntPoint pt1, ::Pathfinding::ClipperLib::IntPoint pt2);
    // private System.Boolean FirstIsBottomPt(Pathfinding.ClipperLib.OutPt btmPt1, Pathfinding.ClipperLib.OutPt btmPt2)
    // Offset: 0x499A820
    bool FirstIsBottomPt(::Pathfinding::ClipperLib::OutPt* btmPt1, ::Pathfinding::ClipperLib::OutPt* btmPt2);
    // private Pathfinding.ClipperLib.OutPt GetBottomPt(Pathfinding.ClipperLib.OutPt pp)
    // Offset: 0x499AA3C
    ::Pathfinding::ClipperLib::OutPt* GetBottomPt(::Pathfinding::ClipperLib::OutPt* pp);
    // private Pathfinding.ClipperLib.OutRec GetLowermostRec(Pathfinding.ClipperLib.OutRec outRec1, Pathfinding.ClipperLib.OutRec outRec2)
    // Offset: 0x499AB28
    ::Pathfinding::ClipperLib::OutRec* GetLowermostRec(::Pathfinding::ClipperLib::OutRec* outRec1, ::Pathfinding::ClipperLib::OutRec* outRec2);
    // private System.Boolean Param1RightOfParam2(Pathfinding.ClipperLib.OutRec outRec1, Pathfinding.ClipperLib.OutRec outRec2)
    // Offset: 0x499AC0C
    bool Param1RightOfParam2(::Pathfinding::ClipperLib::OutRec* outRec1, ::Pathfinding::ClipperLib::OutRec* outRec2);
    // private Pathfinding.ClipperLib.OutRec GetOutRec(System.Int32 idx)
    // Offset: 0x499AC38
    ::Pathfinding::ClipperLib::OutRec* GetOutRec(int idx);
    // private System.Void AppendPolygon(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2)
    // Offset: 0x499A280
    void AppendPolygon(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2);
    // private System.Void ReversePolyPtLinks(Pathfinding.ClipperLib.OutPt pp)
    // Offset: 0x49981FC
    void ReversePolyPtLinks(::Pathfinding::ClipperLib::OutPt* pp);
    // static private System.Void SwapSides(Pathfinding.ClipperLib.TEdge edge1, Pathfinding.ClipperLib.TEdge edge2)
    // Offset: 0x499ACD8
    static void SwapSides(::Pathfinding::ClipperLib::TEdge* edge1, ::Pathfinding::ClipperLib::TEdge* edge2);
    // static private System.Void SwapPolyIndexes(Pathfinding.ClipperLib.TEdge edge1, Pathfinding.ClipperLib.TEdge edge2)
    // Offset: 0x499AD00
    static void SwapPolyIndexes(::Pathfinding::ClipperLib::TEdge* edge1, ::Pathfinding::ClipperLib::TEdge* edge2);
    // private System.Void IntersectEdges(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2, Pathfinding.ClipperLib.IntPoint pt, System.Boolean protect)
    // Offset: 0x49995C4
    void IntersectEdges(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2, ::Pathfinding::ClipperLib::IntPoint pt, bool protect);
    // private System.Void DeleteFromAEL(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499AD28
    void DeleteFromAEL(::Pathfinding::ClipperLib::TEdge* e);
    // private System.Void DeleteFromSEL(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499ADCC
    void DeleteFromSEL(::Pathfinding::ClipperLib::TEdge* e);
    // private System.Void UpdateEdgeIntoAEL(ref Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499AE70
    void UpdateEdgeIntoAEL(ByRef<::Pathfinding::ClipperLib::TEdge*> e);
    // private System.Void ProcessHorizontals(System.Boolean isTopOfScanbeam)
    // Offset: 0x4997CD0
    void ProcessHorizontals(bool isTopOfScanbeam);
    // private System.Void GetHorzDirection(Pathfinding.ClipperLib.TEdge HorzEdge, out Pathfinding.ClipperLib.Direction Dir, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x499B3F4
    void GetHorzDirection(::Pathfinding::ClipperLib::TEdge* HorzEdge, ByRef<::Pathfinding::ClipperLib::Direction> Dir, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Void PrepareHorzJoins(Pathfinding.ClipperLib.TEdge horzEdge, System.Boolean isTopOfScanbeam)
    // Offset: 0x499B434
    void PrepareHorzJoins(::Pathfinding::ClipperLib::TEdge* horzEdge, bool isTopOfScanbeam);
    // private System.Void ProcessHorizontal(Pathfinding.ClipperLib.TEdge horzEdge, System.Boolean isTopOfScanbeam)
    // Offset: 0x499AFB4
    void ProcessHorizontal(::Pathfinding::ClipperLib::TEdge* horzEdge, bool isTopOfScanbeam);
    // private Pathfinding.ClipperLib.TEdge GetNextInAEL(Pathfinding.ClipperLib.TEdge e, Pathfinding.ClipperLib.Direction Direction)
    // Offset: 0x499B658
    ::Pathfinding::ClipperLib::TEdge* GetNextInAEL(::Pathfinding::ClipperLib::TEdge* e, ::Pathfinding::ClipperLib::Direction Direction);
    // private System.Boolean IsMaxima(Pathfinding.ClipperLib.TEdge e, System.Double Y)
    // Offset: 0x499B680
    bool IsMaxima(::Pathfinding::ClipperLib::TEdge* e, double Y);
    // private System.Boolean IsIntermediate(Pathfinding.ClipperLib.TEdge e, System.Double Y)
    // Offset: 0x499B6AC
    bool IsIntermediate(::Pathfinding::ClipperLib::TEdge* e, double Y);
    // private Pathfinding.ClipperLib.TEdge GetMaximaPair(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499B5B8
    ::Pathfinding::ClipperLib::TEdge* GetMaximaPair(::Pathfinding::ClipperLib::TEdge* e);
    // private System.Boolean ProcessIntersections(System.Int64 botY, System.Int64 topY)
    // Offset: 0x4997D18
    bool ProcessIntersections(int64_t botY, int64_t topY);
    // private System.Void BuildIntersectList(System.Int64 botY, System.Int64 topY)
    // Offset: 0x499B6E4
    void BuildIntersectList(int64_t botY, int64_t topY);
    // private System.Boolean EdgesAdjacent(Pathfinding.ClipperLib.IntersectNode inode)
    // Offset: 0x499BE5C
    bool EdgesAdjacent(::Pathfinding::ClipperLib::IntersectNode* inode);
    // private System.Boolean FixupIntersectionOrder()
    // Offset: 0x499B8F4
    bool FixupIntersectionOrder();
    // private System.Void ProcessIntersectList()
    // Offset: 0x499B984
    void ProcessIntersectList();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x499BF3C
    static int64_t Round(double value);
    // static private System.Int64 TopX(Pathfinding.ClipperLib.TEdge edge, System.Int64 currentY)
    // Offset: 0x4999C64
    static int64_t TopX(::Pathfinding::ClipperLib::TEdge* edge, int64_t currentY);
    // private System.Void InsertIntersectNode(Pathfinding.ClipperLib.TEdge e1, Pathfinding.ClipperLib.TEdge e2, Pathfinding.ClipperLib.IntPoint pt)
    // Offset: 0x499BD5C
    void InsertIntersectNode(::Pathfinding::ClipperLib::TEdge* e1, ::Pathfinding::ClipperLib::TEdge* e2, ::Pathfinding::ClipperLib::IntPoint pt);
    // private System.Void SwapIntersectNodes(Pathfinding.ClipperLib.IntersectNode int1, Pathfinding.ClipperLib.IntersectNode int2)
    // Offset: 0x499BE9C
    void SwapIntersectNodes(::Pathfinding::ClipperLib::IntersectNode* int1, ::Pathfinding::ClipperLib::IntersectNode* int2);
    // private System.Boolean IntersectPoint(Pathfinding.ClipperLib.TEdge edge1, Pathfinding.ClipperLib.TEdge edge2, out Pathfinding.ClipperLib.IntPoint ip)
    // Offset: 0x499BA4C
    bool IntersectPoint(::Pathfinding::ClipperLib::TEdge* edge1, ::Pathfinding::ClipperLib::TEdge* edge2, ByRef<::Pathfinding::ClipperLib::IntPoint> ip);
    // private System.Void DisposeIntersectNodes()
    // Offset: 0x499BA00
    void DisposeIntersectNodes();
    // private System.Void ProcessEdgesAtTopOfScanbeam(System.Int64 topY)
    // Offset: 0x4997E50
    void ProcessEdgesAtTopOfScanbeam(int64_t topY);
    // private System.Void DoMaxima(Pathfinding.ClipperLib.TEdge e)
    // Offset: 0x499BF70
    void DoMaxima(::Pathfinding::ClipperLib::TEdge* e);
    // static public System.Boolean Orientation(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> poly)
    // Offset: 0x499C0AC
    static bool Orientation(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* poly);
    // private System.Int32 PointCount(Pathfinding.ClipperLib.OutPt pts)
    // Offset: 0x499C23C
    int PointCount(::Pathfinding::ClipperLib::OutPt* pts);
    // private System.Void BuildResult(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint>> polyg)
    // Offset: 0x49972E8
    void BuildResult(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>* polyg);
    // private System.Void BuildResult2(Pathfinding.ClipperLib.PolyTree polytree)
    // Offset: 0x49975B8
    void BuildResult2(::Pathfinding::ClipperLib::PolyTree* polytree);
    // private System.Void FixupOutPolygon(Pathfinding.ClipperLib.OutRec outRec)
    // Offset: 0x49985DC
    void FixupOutPolygon(::Pathfinding::ClipperLib::OutRec* outRec);
    // private Pathfinding.ClipperLib.OutPt DupOutPt(Pathfinding.ClipperLib.OutPt outPt, System.Boolean InsertAfter)
    // Offset: 0x499C26C
    ::Pathfinding::ClipperLib::OutPt* DupOutPt(::Pathfinding::ClipperLib::OutPt* outPt, bool InsertAfter);
    // private System.Boolean GetOverlap(System.Int64 a1, System.Int64 a2, System.Int64 b1, System.Int64 b2, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x499C380
    bool GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Boolean JoinHorz(Pathfinding.ClipperLib.OutPt op1, Pathfinding.ClipperLib.OutPt op1b, Pathfinding.ClipperLib.OutPt op2, Pathfinding.ClipperLib.OutPt op2b, Pathfinding.ClipperLib.IntPoint Pt, System.Boolean DiscardLeft)
    // Offset: 0x499C498
    bool JoinHorz(::Pathfinding::ClipperLib::OutPt* op1, ::Pathfinding::ClipperLib::OutPt* op1b, ::Pathfinding::ClipperLib::OutPt* op2, ::Pathfinding::ClipperLib::OutPt* op2b, ::Pathfinding::ClipperLib::IntPoint Pt, bool DiscardLeft);
    // private System.Boolean JoinPoints(Pathfinding.ClipperLib.Join j, out Pathfinding.ClipperLib.OutPt p1, out Pathfinding.ClipperLib.OutPt p2)
    // Offset: 0x499C7E4
    bool JoinPoints(::Pathfinding::ClipperLib::Join* j, ByRef<::Pathfinding::ClipperLib::OutPt*> p1, ByRef<::Pathfinding::ClipperLib::OutPt*> p2);
    // private System.Boolean Poly2ContainsPoly1(Pathfinding.ClipperLib.OutPt outPt1, Pathfinding.ClipperLib.OutPt outPt2, System.Boolean UseFullRange)
    // Offset: 0x499CEB4
    bool Poly2ContainsPoly1(::Pathfinding::ClipperLib::OutPt* outPt1, ::Pathfinding::ClipperLib::OutPt* outPt2, bool UseFullRange);
    // private System.Void FixupFirstLefts1(Pathfinding.ClipperLib.OutRec OldOutRec, Pathfinding.ClipperLib.OutRec NewOutRec)
    // Offset: 0x499CF50
    void FixupFirstLefts1(::Pathfinding::ClipperLib::OutRec* OldOutRec, ::Pathfinding::ClipperLib::OutRec* NewOutRec);
    // private System.Void FixupFirstLefts2(Pathfinding.ClipperLib.OutRec OldOutRec, Pathfinding.ClipperLib.OutRec NewOutRec)
    // Offset: 0x499D02C
    void FixupFirstLefts2(::Pathfinding::ClipperLib::OutRec* OldOutRec, ::Pathfinding::ClipperLib::OutRec* NewOutRec);
    // private System.Void JoinCommonEdges()
    // Offset: 0x4998254
    void JoinCommonEdges();
    // private System.Void UpdateOutPtIdxs(Pathfinding.ClipperLib.OutRec outrec)
    // Offset: 0x499D18C
    void UpdateOutPtIdxs(::Pathfinding::ClipperLib::OutRec* outrec);
    // private System.Void DoSimplePolygons()
    // Offset: 0x4998740
    void DoSimplePolygons();
    // static public System.Double Area(System.Collections.Generic.List`1<Pathfinding.ClipperLib.IntPoint> poly)
    // Offset: 0x499C0C4
    static double Area(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>* poly);
    // private System.Double Area(Pathfinding.ClipperLib.OutRec outRec)
    // Offset: 0x4998190
    double Area(::Pathfinding::ClipperLib::OutRec* outRec);
    // public override System.Void Clear()
    // Offset: 0x4996B60
    // Implemented from: Pathfinding.ClipperLib.ClipperBase
    // Base method: System.Void ClipperBase::Clear()
    void Clear();
    // protected override System.Void Reset()
    // Offset: 0x4996C68
    // Implemented from: Pathfinding.ClipperLib.ClipperBase
    // Base method: System.Void ClipperBase::Reset()
    void Reset();
  }; // Pathfinding.ClipperLib.Clipper
  #pragma pack(pop)
  static check_size<sizeof(Clipper), 130 + sizeof(bool)> __Pathfinding_ClipperLib_ClipperSizeCheck;
  static_assert(sizeof(Clipper) == 0x83);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::get_ReverseSolution
// Il2CppName: get_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::get_ReverseSolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "get_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::set_ReverseSolution
// Il2CppName: set_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(bool)>(&Pathfinding::ClipperLib::Clipper::set_ReverseSolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "set_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::get_StrictlySimple
// Il2CppName: get_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::get_StrictlySimple)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "get_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::set_StrictlySimple
// Il2CppName: set_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(bool)>(&Pathfinding::ClipperLib::Clipper::set_StrictlySimple)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "set_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::InsertScanbeam
// Il2CppName: InsertScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(int64_t)>(&Pathfinding::ClipperLib::Clipper::InsertScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "InsertScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>*, ::Pathfinding::ClipperLib::PolyFillType, ::Pathfinding::ClipperLib::PolyFillType)>(&Pathfinding::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})})->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::ClipType, ::Pathfinding::ClipperLib::PolyTree*, ::Pathfinding::ClipperLib::PolyFillType, ::Pathfinding::ClipperLib::PolyFillType)>(&Pathfinding::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "ClipType")->byval_arg;
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyTree")->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, polytree, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FixHoleLinkage
// Il2CppName: FixHoleLinkage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::FixHoleLinkage)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FixHoleLinkage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ExecuteInternal
// Il2CppName: ExecuteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::ExecuteInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ExecuteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::PopScanbeam
// Il2CppName: PopScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::PopScanbeam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "PopScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DisposeAllPolyPts
// Il2CppName: DisposeAllPolyPts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::DisposeAllPolyPts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DisposeAllPolyPts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DisposeOutRec
// Il2CppName: DisposeOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(int)>(&Pathfinding::ClipperLib::Clipper::DisposeOutRec)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DisposeOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DisposeOutPts
// Il2CppName: DisposeOutPts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*)>(&Pathfinding::ClipperLib::Clipper::DisposeOutPts)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DisposeOutPts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddJoin
// Il2CppName: AddJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::AddJoin)> {
  static const MethodInfo* get() {
    static auto* Op1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* Op2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op1, Op2, OffPt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddGhostJoin
// Il2CppName: AddGhostJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::AddGhostJoin)> {
  static const MethodInfo* get() {
    static auto* Op = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddGhostJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op, OffPt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::InsertLocalMinimaIntoAEL
// Il2CppName: InsertLocalMinimaIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(int64_t)>(&Pathfinding::ClipperLib::Clipper::InsertLocalMinimaIntoAEL)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "InsertLocalMinimaIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::InsertEdgeIntoAEL
// Il2CppName: InsertEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::InsertEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* startEdge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "InsertEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, startEdge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::E2InsertsBeforeE1
// Il2CppName: E2InsertsBeforeE1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::E2InsertsBeforeE1)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "E2InsertsBeforeE1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IsEvenOddFillType
// Il2CppName: IsEvenOddFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::IsEvenOddFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IsEvenOddFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IsEvenOddAltFillType
// Il2CppName: IsEvenOddAltFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::IsEvenOddAltFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IsEvenOddAltFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IsContributing
// Il2CppName: IsContributing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::IsContributing)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IsContributing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SetWindingCount
// Il2CppName: SetWindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::SetWindingCount)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SetWindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddEdgeToSEL
// Il2CppName: AddEdgeToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::AddEdgeToSEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddEdgeToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::CopyAELToSEL
// Il2CppName: CopyAELToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::CopyAELToSEL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "CopyAELToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SwapPositionsInAEL
// Il2CppName: SwapPositionsInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::SwapPositionsInAEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SwapPositionsInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SwapPositionsInSEL
// Il2CppName: SwapPositionsInSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::SwapPositionsInSEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SwapPositionsInSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddLocalMaxPoly
// Il2CppName: AddLocalMaxPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::AddLocalMaxPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddLocalMaxPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddLocalMinPoly
// Il2CppName: AddLocalMinPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutPt* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::AddLocalMinPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddLocalMinPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::CreateOutRec
// Il2CppName: CreateOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutRec* (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::CreateOutRec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "CreateOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AddOutPt
// Il2CppName: AddOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutPt* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::AddOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AddOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, pt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::HorzSegmentsOverlap
// Il2CppName: HorzSegmentsOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::HorzSegmentsOverlap)> {
  static const MethodInfo* get() {
    static auto* Pt1a = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* Pt1b = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* Pt2a = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* Pt2b = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "HorzSegmentsOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Pt1a, Pt1b, Pt2a, Pt2b});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SetHoleState
// Il2CppName: SetHoleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::SetHoleState)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SetHoleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, outRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetDx
// Il2CppName: GetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::IntPoint, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::GetDx)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FirstIsBottomPt
// Il2CppName: FirstIsBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*)>(&Pathfinding::ClipperLib::Clipper::FirstIsBottomPt)> {
  static const MethodInfo* get() {
    static auto* btmPt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* btmPt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FirstIsBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btmPt1, btmPt2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetBottomPt
// Il2CppName: GetBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutPt* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*)>(&Pathfinding::ClipperLib::Clipper::GetBottomPt)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetLowermostRec
// Il2CppName: GetLowermostRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutRec* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*, ::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::GetLowermostRec)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetLowermostRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Param1RightOfParam2
// Il2CppName: Param1RightOfParam2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*, ::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::Param1RightOfParam2)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Param1RightOfParam2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetOutRec
// Il2CppName: GetOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutRec* (Pathfinding::ClipperLib::Clipper::*)(int)>(&Pathfinding::ClipperLib::Clipper::GetOutRec)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::AppendPolygon
// Il2CppName: AppendPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::AppendPolygon)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "AppendPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ReversePolyPtLinks
// Il2CppName: ReversePolyPtLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*)>(&Pathfinding::ClipperLib::Clipper::ReversePolyPtLinks)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ReversePolyPtLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SwapSides
// Il2CppName: SwapSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::SwapSides)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SwapSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SwapPolyIndexes
// Il2CppName: SwapPolyIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::SwapPolyIndexes)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SwapPolyIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IntersectEdges
// Il2CppName: IntersectEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint, bool)>(&Pathfinding::ClipperLib::Clipper::IntersectEdges)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* protect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IntersectEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt, protect});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DeleteFromAEL
// Il2CppName: DeleteFromAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::DeleteFromAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DeleteFromAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DeleteFromSEL
// Il2CppName: DeleteFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::DeleteFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DeleteFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::UpdateEdgeIntoAEL
// Il2CppName: UpdateEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(ByRef<::Pathfinding::ClipperLib::TEdge*>)>(&Pathfinding::ClipperLib::Clipper::UpdateEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "UpdateEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ProcessHorizontals
// Il2CppName: ProcessHorizontals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(bool)>(&Pathfinding::ClipperLib::Clipper::ProcessHorizontals)> {
  static const MethodInfo* get() {
    static auto* isTopOfScanbeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ProcessHorizontals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isTopOfScanbeam});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetHorzDirection
// Il2CppName: GetHorzDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ByRef<::Pathfinding::ClipperLib::Direction>, ByRef<int64_t>, ByRef<int64_t>)>(&Pathfinding::ClipperLib::Clipper::GetHorzDirection)> {
  static const MethodInfo* get() {
    static auto* HorzEdge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* Dir = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "Direction")->this_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetHorzDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HorzEdge, Dir, Left, Right});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::PrepareHorzJoins
// Il2CppName: PrepareHorzJoins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, bool)>(&Pathfinding::ClipperLib::Clipper::PrepareHorzJoins)> {
  static const MethodInfo* get() {
    static auto* horzEdge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* isTopOfScanbeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "PrepareHorzJoins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horzEdge, isTopOfScanbeam});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ProcessHorizontal
// Il2CppName: ProcessHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, bool)>(&Pathfinding::ClipperLib::Clipper::ProcessHorizontal)> {
  static const MethodInfo* get() {
    static auto* horzEdge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* isTopOfScanbeam = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ProcessHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horzEdge, isTopOfScanbeam});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetNextInAEL
// Il2CppName: GetNextInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::Direction)>(&Pathfinding::ClipperLib::Clipper::GetNextInAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* Direction = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "Direction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetNextInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Direction});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IsMaxima
// Il2CppName: IsMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, double)>(&Pathfinding::ClipperLib::Clipper::IsMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IsMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IsIntermediate
// Il2CppName: IsIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, double)>(&Pathfinding::ClipperLib::Clipper::IsIntermediate)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IsIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetMaximaPair
// Il2CppName: GetMaximaPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::TEdge* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::GetMaximaPair)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetMaximaPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ProcessIntersections
// Il2CppName: ProcessIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(int64_t, int64_t)>(&Pathfinding::ClipperLib::Clipper::ProcessIntersections)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ProcessIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY, topY});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::BuildIntersectList
// Il2CppName: BuildIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(int64_t, int64_t)>(&Pathfinding::ClipperLib::Clipper::BuildIntersectList)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "BuildIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY, topY});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::EdgesAdjacent
// Il2CppName: EdgesAdjacent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::IntersectNode*)>(&Pathfinding::ClipperLib::Clipper::EdgesAdjacent)> {
  static const MethodInfo* get() {
    static auto* inode = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "EdgesAdjacent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inode});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FixupIntersectionOrder
// Il2CppName: FixupIntersectionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::FixupIntersectionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FixupIntersectionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ProcessIntersectList
// Il2CppName: ProcessIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::ProcessIntersectList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ProcessIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&Pathfinding::ClipperLib::Clipper::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::TopX
// Il2CppName: TopX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Pathfinding::ClipperLib::TEdge*, int64_t)>(&Pathfinding::ClipperLib::Clipper::TopX)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* currentY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "TopX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, currentY});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::InsertIntersectNode
// Il2CppName: InsertIntersectNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::IntPoint)>(&Pathfinding::ClipperLib::Clipper::InsertIntersectNode)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "InsertIntersectNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::SwapIntersectNodes
// Il2CppName: SwapIntersectNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::IntersectNode*, ::Pathfinding::ClipperLib::IntersectNode*)>(&Pathfinding::ClipperLib::Clipper::SwapIntersectNodes)> {
  static const MethodInfo* get() {
    static auto* int1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntersectNode")->byval_arg;
    static auto* int2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "SwapIntersectNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{int1, int2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::IntersectPoint
// Il2CppName: IntersectPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*, ::Pathfinding::ClipperLib::TEdge*, ByRef<::Pathfinding::ClipperLib::IntPoint>)>(&Pathfinding::ClipperLib::Clipper::IntersectPoint)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "IntersectPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2, ip});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DisposeIntersectNodes
// Il2CppName: DisposeIntersectNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::DisposeIntersectNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DisposeIntersectNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam
// Il2CppName: ProcessEdgesAtTopOfScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(int64_t)>(&Pathfinding::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "ProcessEdgesAtTopOfScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DoMaxima
// Il2CppName: DoMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::TEdge*)>(&Pathfinding::ClipperLib::Clipper::DoMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DoMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Orientation
// Il2CppName: Orientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*)>(&Pathfinding::ClipperLib::Clipper::Orientation)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Orientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::PointCount
// Il2CppName: PointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*)>(&Pathfinding::ClipperLib::Clipper::PointCount)> {
  static const MethodInfo* get() {
    static auto* pts = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "PointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pts});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::BuildResult
// Il2CppName: BuildResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*>*)>(&Pathfinding::ClipperLib::Clipper::BuildResult)> {
  static const MethodInfo* get() {
    static auto* polyg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "BuildResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyg});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::BuildResult2
// Il2CppName: BuildResult2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::PolyTree*)>(&Pathfinding::ClipperLib::Clipper::BuildResult2)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "BuildResult2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FixupOutPolygon
// Il2CppName: FixupOutPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::FixupOutPolygon)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FixupOutPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DupOutPt
// Il2CppName: DupOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ClipperLib::OutPt* (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, bool)>(&Pathfinding::ClipperLib::Clipper::DupOutPt)> {
  static const MethodInfo* get() {
    static auto* outPt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* InsertAfter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DupOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt, InsertAfter});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::GetOverlap
// Il2CppName: GetOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(int64_t, int64_t, int64_t, int64_t, ByRef<int64_t>, ByRef<int64_t>)>(&Pathfinding::ClipperLib::Clipper::GetOverlap)> {
  static const MethodInfo* get() {
    static auto* a1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* a2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "GetOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a1, a2, b1, b2, Left, Right});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::JoinHorz
// Il2CppName: JoinHorz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::IntPoint, bool)>(&Pathfinding::ClipperLib::Clipper::JoinHorz)> {
  static const MethodInfo* get() {
    static auto* op1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* op1b = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* op2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* op2b = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* Pt = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")->byval_arg;
    static auto* DiscardLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "JoinHorz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op1, op1b, op2, op2b, Pt, DiscardLeft});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::JoinPoints
// Il2CppName: JoinPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::Join*, ByRef<::Pathfinding::ClipperLib::OutPt*>, ByRef<::Pathfinding::ClipperLib::OutPt*>)>(&Pathfinding::ClipperLib::Clipper::JoinPoints)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "Join")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "JoinPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, p1, p2});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Poly2ContainsPoly1
// Il2CppName: Poly2ContainsPoly1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutPt*, ::Pathfinding::ClipperLib::OutPt*, bool)>(&Pathfinding::ClipperLib::Clipper::Poly2ContainsPoly1)> {
  static const MethodInfo* get() {
    static auto* outPt1 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* outPt2 = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutPt")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Poly2ContainsPoly1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt1, outPt2, UseFullRange});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FixupFirstLefts1
// Il2CppName: FixupFirstLefts1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*, ::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::FixupFirstLefts1)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FixupFirstLefts1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::FixupFirstLefts2
// Il2CppName: FixupFirstLefts2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*, ::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::FixupFirstLefts2)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "FixupFirstLefts2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::JoinCommonEdges
// Il2CppName: JoinCommonEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::JoinCommonEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "JoinCommonEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::UpdateOutPtIdxs
// Il2CppName: UpdateOutPtIdxs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::UpdateOutPtIdxs)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "UpdateOutPtIdxs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::DoSimplePolygons
// Il2CppName: DoSimplePolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::DoSimplePolygons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "DoSimplePolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::Collections::Generic::List_1<::Pathfinding::ClipperLib::IntPoint>*)>(&Pathfinding::ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Pathfinding::ClipperLib::Clipper::*)(::Pathfinding::ClipperLib::OutRec*)>(&Pathfinding::ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Pathfinding.ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ClipperLib::Clipper::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ClipperLib::Clipper::*)()>(&Pathfinding::ClipperLib::Clipper::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ClipperLib::Clipper*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
