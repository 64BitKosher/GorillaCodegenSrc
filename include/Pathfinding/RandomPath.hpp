// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ABPath
#include "Pathfinding/ABPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RandomPath
  class RandomPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RandomPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RandomPath*, "Pathfinding", "RandomPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RandomPath
  // [TokenAttribute] Offset: FFFFFFFF
  class RandomPath : public ::Pathfinding::ABPath {
    public:
    public:
    // public System.Int32 searchLength
    // Size: 0x4
    // Offset: 0x138
    int searchLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 spread
    // Size: 0x4
    // Offset: 0x13C
    int spread;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single aimStrength
    // Size: 0x4
    // Offset: 0x140
    float aimStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: aimStrength and: chosenNodeR
    char __padding2[0x4] = {};
    // private Pathfinding.PathNode chosenNodeR
    // Size: 0x8
    // Offset: 0x148
    ::Pathfinding::PathNode* chosenNodeR;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
    // private Pathfinding.PathNode maxGScoreNodeR
    // Size: 0x8
    // Offset: 0x150
    ::Pathfinding::PathNode* maxGScoreNodeR;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
    // private System.Int32 maxGScore
    // Size: 0x4
    // Offset: 0x158
    int maxGScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 aim
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 aim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 nodesEvaluatedRep
    // Size: 0x4
    // Offset: 0x168
    int nodesEvaluatedRep;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nodesEvaluatedRep and: rnd
    char __padding7[0x4] = {};
    // private readonly System.Random rnd
    // Size: 0x8
    // Offset: 0x170
    ::System::Random* rnd;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 searchLength
    [[deprecated("Use field access instead!")]] int& dyn_searchLength();
    // Get instance field reference: public System.Int32 spread
    [[deprecated("Use field access instead!")]] int& dyn_spread();
    // Get instance field reference: public System.Single aimStrength
    [[deprecated("Use field access instead!")]] float& dyn_aimStrength();
    // Get instance field reference: private Pathfinding.PathNode chosenNodeR
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_chosenNodeR();
    // Get instance field reference: private Pathfinding.PathNode maxGScoreNodeR
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_maxGScoreNodeR();
    // Get instance field reference: private System.Int32 maxGScore
    [[deprecated("Use field access instead!")]] int& dyn_maxGScore();
    // Get instance field reference: public UnityEngine.Vector3 aim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_aim();
    // Get instance field reference: private System.Int32 nodesEvaluatedRep
    [[deprecated("Use field access instead!")]] int& dyn_nodesEvaluatedRep();
    // Get instance field reference: private readonly System.Random rnd
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_rnd();
    // static public Pathfinding.RandomPath Construct(UnityEngine.Vector3 start, System.Int32 length, Pathfinding.OnPathDelegate callback)
    // Offset: 0x2A02FE0
    static ::Pathfinding::RandomPath* Construct(::UnityEngine::Vector3 start, int length, ::Pathfinding::OnPathDelegate* callback);
    // protected Pathfinding.RandomPath Setup(UnityEngine.Vector3 start, System.Int32 length, Pathfinding.OnPathDelegate callback)
    // Offset: 0x29FFAF0
    ::Pathfinding::RandomPath* Setup(::UnityEngine::Vector3 start, int length, ::Pathfinding::OnPathDelegate* callback);
    // public override System.Boolean get_FloodingPath()
    // Offset: 0x2A02F34
    // Implemented from: Pathfinding.Path
    // Base method: System.Boolean Path::get_FloodingPath()
    bool get_FloodingPath();
    // protected override System.Boolean get_hasEndPoint()
    // Offset: 0x2A02F3C
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Boolean ABPath::get_hasEndPoint()
    bool get_hasEndPoint();
    // protected override System.Void Reset()
    // Offset: 0x2A02F44
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Reset()
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x29FF904
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::.ctor()
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RandomPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomPath*, creationType>()));
    }
    // protected override System.Void ReturnPath()
    // Offset: 0x2A03090
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::ReturnPath()
    void ReturnPath();
    // protected override System.Void Prepare()
    // Offset: 0x2A03184
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Prepare()
    void Prepare();
    // protected override System.Void Initialize()
    // Offset: 0x2A03334
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::Initialize()
    void Initialize();
    // protected override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x2A034B8
    // Implemented from: Pathfinding.ABPath
    // Base method: System.Void ABPath::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
  }; // Pathfinding.RandomPath
  #pragma pack(pop)
  static check_size<sizeof(RandomPath), 368 + sizeof(::System::Random*)> __Pathfinding_RandomPathSizeCheck;
  static_assert(sizeof(RandomPath) == 0x178);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RandomPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RandomPath* (*)(::UnityEngine::Vector3, int, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::RandomPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, length, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::RandomPath* (Pathfinding::RandomPath::*)(::UnityEngine::Vector3, int, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::RandomPath::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, length, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::get_FloodingPath
// Il2CppName: get_FloodingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::get_FloodingPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "get_FloodingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::get_hasEndPoint
// Il2CppName: get_hasEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::get_hasEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "get_hasEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::RandomPath::ReturnPath
// Il2CppName: ReturnPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::ReturnPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "ReturnPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RandomPath::*)()>(&Pathfinding::RandomPath::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RandomPath::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RandomPath::*)(int64_t)>(&Pathfinding::RandomPath::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RandomPath*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
