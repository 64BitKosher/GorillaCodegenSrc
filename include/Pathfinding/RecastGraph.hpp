// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavmeshBase
#include "Pathfinding/NavmeshBase.hpp"
// Including type: Pathfinding.IUpdatableGraph
#include "Pathfinding/IUpdatableGraph.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavmeshTile
  class NavmeshTile;
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: GraphUpdateThreading
  struct GraphUpdateThreading;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
}
// Forward declaring namespace: Pathfinding::Voxels
namespace Pathfinding::Voxels {
  // Forward declaring type: Voxelize
  class Voxelize;
  // Forward declaring type: RasterizationMesh
  class RasterizationMesh;
  // Forward declaring type: VoxelMesh
  struct VoxelMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: GraphTransform
  class GraphTransform;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RecastGraph
  class RecastGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RecastGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RecastGraph*, "Pathfinding", "RecastGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x1A8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RecastGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  // [JsonOptInAttribute] Offset: FFFFFFFF
  class RecastGraph : public ::Pathfinding::NavmeshBase/*, public ::Pathfinding::IUpdatableGraph*/ {
    public:
    // Nested type: ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode
    struct RelevantGraphSurfaceMode;
    // Nested type: ::Pathfinding::RecastGraph::$$c__DisplayClass50_0
    class $$c__DisplayClass50_0;
    // Nested type: ::Pathfinding::RecastGraph::$$c__DisplayClass50_1
    class $$c__DisplayClass50_1;
    // Nested type: ::Pathfinding::RecastGraph::$ScanAllTiles$d__50
    class $ScanAllTiles$d__50;
    // Nested type: ::Pathfinding::RecastGraph::$ScanInternal$d__46
    class $ScanInternal$d__46;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.RecastGraph/RelevantGraphSurfaceMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct RelevantGraphSurfaceMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RelevantGraphSurfaceMode
      constexpr RelevantGraphSurfaceMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode DoNotRequire
      static constexpr const int DoNotRequire = 0;
      // Get static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode DoNotRequire
      static ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode _get_DoNotRequire();
      // Set static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode DoNotRequire
      static void _set_DoNotRequire(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode value);
      // static field const value: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode OnlyForCompletelyInsideTile
      static constexpr const int OnlyForCompletelyInsideTile = 1;
      // Get static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode OnlyForCompletelyInsideTile
      static ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode _get_OnlyForCompletelyInsideTile();
      // Set static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode OnlyForCompletelyInsideTile
      static void _set_OnlyForCompletelyInsideTile(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode value);
      // static field const value: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode RequireForAll
      static constexpr const int RequireForAll = 2;
      // Get static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode RequireForAll
      static ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode _get_RequireForAll();
      // Set static field: static public Pathfinding.RecastGraph/RelevantGraphSurfaceMode RequireForAll
      static void _set_RequireForAll(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.RecastGraph/RelevantGraphSurfaceMode
    #pragma pack(pop)
    static check_size<sizeof(RecastGraph::RelevantGraphSurfaceMode), 0 + sizeof(int)> __Pathfinding_RecastGraph_RelevantGraphSurfaceModeSizeCheck;
    static_assert(sizeof(RecastGraph::RelevantGraphSurfaceMode) == 0x4);
    public:
    // public System.Single characterRadius
    // Size: 0x4
    // Offset: 0x130
    float characterRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single contourMaxError
    // Size: 0x4
    // Offset: 0x134
    float contourMaxError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cellSize
    // Size: 0x4
    // Offset: 0x138
    float cellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single walkableHeight
    // Size: 0x4
    // Offset: 0x13C
    float walkableHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single walkableClimb
    // Size: 0x4
    // Offset: 0x140
    float walkableClimb;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSlope
    // Size: 0x4
    // Offset: 0x144
    float maxSlope;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxEdgeLength
    // Size: 0x4
    // Offset: 0x148
    float maxEdgeLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minRegionSize
    // Size: 0x4
    // Offset: 0x14C
    float minRegionSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 editorTileSize
    // Size: 0x4
    // Offset: 0x150
    int editorTileSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tileSizeX
    // Size: 0x4
    // Offset: 0x154
    int tileSizeX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tileSizeZ
    // Size: 0x4
    // Offset: 0x158
    int tileSizeZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useTiles
    // Size: 0x1
    // Offset: 0x15C
    bool useTiles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean scanEmptyGraph
    // Size: 0x1
    // Offset: 0x15D
    bool scanEmptyGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scanEmptyGraph and: relevantGraphSurfaceMode
    char __padding12[0x2] = {};
    // public Pathfinding.RecastGraph/RelevantGraphSurfaceMode relevantGraphSurfaceMode
    // Size: 0x4
    // Offset: 0x160
    ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode relevantGraphSurfaceMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode) == 0x4);
    // public System.Boolean rasterizeColliders
    // Size: 0x1
    // Offset: 0x164
    bool rasterizeColliders;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rasterizeMeshes
    // Size: 0x1
    // Offset: 0x165
    bool rasterizeMeshes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rasterizeTerrain
    // Size: 0x1
    // Offset: 0x166
    bool rasterizeTerrain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rasterizeTrees
    // Size: 0x1
    // Offset: 0x167
    bool rasterizeTrees;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single colliderRasterizeDetail
    // Size: 0x4
    // Offset: 0x168
    float colliderRasterizeDetail;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x16C
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Collections.Generic.List`1<System.String> tagMask
    // Size: 0x8
    // Offset: 0x170
    ::System::Collections::Generic::List_1<::StringW>* tagMask;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Int32 terrainSampleSize
    // Size: 0x4
    // Offset: 0x178
    int terrainSampleSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 rotation
    // Size: 0xC
    // Offset: 0x17C
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 forcedBoundsCenter
    // Size: 0xC
    // Offset: 0x188
    ::UnityEngine::Vector3 forcedBoundsCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: forcedBoundsCenter and: globalVox
    char __padding23[0x4] = {};
    // private Pathfinding.Voxels.Voxelize globalVox
    // Size: 0x8
    // Offset: 0x198
    ::Pathfinding::Voxels::Voxelize* globalVox;
    // Field size check
    static_assert(sizeof(::Pathfinding::Voxels::Voxelize*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.NavmeshTile> stagingTiles
    // Size: 0x8
    // Offset: 0x1A0
    ::System::Collections::Generic::List_1<::Pathfinding::NavmeshTile*>* stagingTiles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::NavmeshTile*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IUpdatableGraph
    operator ::Pathfinding::IUpdatableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IUpdatableGraph*>(this);
    }
    // static field const value: static public System.Int32 BorderVertexMask
    static constexpr const int BorderVertexMask = 1;
    // Get static field: static public System.Int32 BorderVertexMask
    static int _get_BorderVertexMask();
    // Set static field: static public System.Int32 BorderVertexMask
    static void _set_BorderVertexMask(int value);
    // static field const value: static public System.Int32 BorderVertexOffset
    static constexpr const int BorderVertexOffset = 31;
    // Get static field: static public System.Int32 BorderVertexOffset
    static int _get_BorderVertexOffset();
    // Set static field: static public System.Int32 BorderVertexOffset
    static void _set_BorderVertexOffset(int value);
    // Get instance field reference: public System.Single characterRadius
    [[deprecated("Use field access instead!")]] float& dyn_characterRadius();
    // Get instance field reference: public System.Single contourMaxError
    [[deprecated("Use field access instead!")]] float& dyn_contourMaxError();
    // Get instance field reference: public System.Single cellSize
    [[deprecated("Use field access instead!")]] float& dyn_cellSize();
    // Get instance field reference: public System.Single walkableHeight
    [[deprecated("Use field access instead!")]] float& dyn_walkableHeight();
    // Get instance field reference: public System.Single walkableClimb
    [[deprecated("Use field access instead!")]] float& dyn_walkableClimb();
    // Get instance field reference: public System.Single maxSlope
    [[deprecated("Use field access instead!")]] float& dyn_maxSlope();
    // Get instance field reference: public System.Single maxEdgeLength
    [[deprecated("Use field access instead!")]] float& dyn_maxEdgeLength();
    // Get instance field reference: public System.Single minRegionSize
    [[deprecated("Use field access instead!")]] float& dyn_minRegionSize();
    // Get instance field reference: public System.Int32 editorTileSize
    [[deprecated("Use field access instead!")]] int& dyn_editorTileSize();
    // Get instance field reference: public System.Int32 tileSizeX
    [[deprecated("Use field access instead!")]] int& dyn_tileSizeX();
    // Get instance field reference: public System.Int32 tileSizeZ
    [[deprecated("Use field access instead!")]] int& dyn_tileSizeZ();
    // Get instance field reference: public System.Boolean useTiles
    [[deprecated("Use field access instead!")]] bool& dyn_useTiles();
    // Get instance field reference: public System.Boolean scanEmptyGraph
    [[deprecated("Use field access instead!")]] bool& dyn_scanEmptyGraph();
    // Get instance field reference: public Pathfinding.RecastGraph/RelevantGraphSurfaceMode relevantGraphSurfaceMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastGraph::RelevantGraphSurfaceMode& dyn_relevantGraphSurfaceMode();
    // Get instance field reference: public System.Boolean rasterizeColliders
    [[deprecated("Use field access instead!")]] bool& dyn_rasterizeColliders();
    // Get instance field reference: public System.Boolean rasterizeMeshes
    [[deprecated("Use field access instead!")]] bool& dyn_rasterizeMeshes();
    // Get instance field reference: public System.Boolean rasterizeTerrain
    [[deprecated("Use field access instead!")]] bool& dyn_rasterizeTerrain();
    // Get instance field reference: public System.Boolean rasterizeTrees
    [[deprecated("Use field access instead!")]] bool& dyn_rasterizeTrees();
    // Get instance field reference: public System.Single colliderRasterizeDetail
    [[deprecated("Use field access instead!")]] float& dyn_colliderRasterizeDetail();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> tagMask
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_tagMask();
    // Get instance field reference: public System.Int32 terrainSampleSize
    [[deprecated("Use field access instead!")]] int& dyn_terrainSampleSize();
    // Get instance field reference: public UnityEngine.Vector3 rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 forcedBoundsCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_forcedBoundsCenter();
    // Get instance field reference: private Pathfinding.Voxels.Voxelize globalVox
    [[deprecated("Use field access instead!")]] ::Pathfinding::Voxels::Voxelize*& dyn_globalVox();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.NavmeshTile> stagingTiles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::NavmeshTile*>*& dyn_stagingTiles();
    // public UnityEngine.Bounds get_forcedBounds()
    // Offset: 0x29E164C
    ::UnityEngine::Bounds get_forcedBounds();
    // public UnityEngine.Vector3 ClosestPointOnNode(Pathfinding.TriangleMeshNode node, UnityEngine.Vector3 pos)
    // Offset: 0x29E1680
    ::UnityEngine::Vector3 ClosestPointOnNode(::Pathfinding::TriangleMeshNode* node, ::UnityEngine::Vector3 pos);
    // public System.Boolean ContainsPoint(Pathfinding.TriangleMeshNode node, UnityEngine.Vector3 pos)
    // Offset: 0x29E16A8
    bool ContainsPoint(::Pathfinding::TriangleMeshNode* node, ::UnityEngine::Vector3 pos);
    // public System.Void SnapForceBoundsToScene()
    // Offset: 0x29E16E4
    void SnapForceBoundsToScene();
    // private Pathfinding.GraphUpdateThreading Pathfinding.IUpdatableGraph.CanUpdateAsync(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29E1B38
    ::Pathfinding::GraphUpdateThreading Pathfinding_IUpdatableGraph_CanUpdateAsync(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaInit(Pathfinding.GraphUpdateObject o)
    // Offset: 0x29E1B5C
    void Pathfinding_IUpdatableGraph_UpdateAreaInit(::Pathfinding::GraphUpdateObject* o);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateArea(Pathfinding.GraphUpdateObject guo)
    // Offset: 0x29E1D84
    void Pathfinding_IUpdatableGraph_UpdateArea(::Pathfinding::GraphUpdateObject* guo);
    // private System.Void Pathfinding.IUpdatableGraph.UpdateAreaPost(Pathfinding.GraphUpdateObject guo)
    // Offset: 0x29E247C
    void Pathfinding_IUpdatableGraph_UpdateAreaPost(::Pathfinding::GraphUpdateObject* guo);
    // private System.Void InitializeTileInfo()
    // Offset: 0x29E29A4
    void InitializeTileInfo();
    // private System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh>[] PutMeshesIntoTileBuckets(System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> meshes)
    // Offset: 0x29E2BB4
    ::ArrayW<::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*> PutMeshesIntoTileBuckets(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* meshes);
    // protected System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanAllTiles()
    // Offset: 0x29E2EA0
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanAllTiles();
    // private System.Collections.Generic.List`1<Pathfinding.Voxels.RasterizationMesh> CollectMeshes(UnityEngine.Bounds bounds)
    // Offset: 0x29E1930
    ::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* CollectMeshes(::UnityEngine::Bounds bounds);
    // private System.Single get_CellHeight()
    // Offset: 0x29E1D64
    float get_CellHeight();
    // private System.Int32 get_CharacterRadiusInVoxels()
    // Offset: 0x29E2F50
    int get_CharacterRadiusInVoxels();
    // private System.Int32 get_TileBorderSizeInVoxels()
    // Offset: 0x29E2FD0
    int get_TileBorderSizeInVoxels();
    // private System.Single get_TileBorderSizeInWorldUnits()
    // Offset: 0x29E1D40
    float get_TileBorderSizeInWorldUnits();
    // private UnityEngine.Bounds CalculateTileBoundsWithBorder(System.Int32 x, System.Int32 z)
    // Offset: 0x29E2FE4
    ::UnityEngine::Bounds CalculateTileBoundsWithBorder(int x, int z);
    // protected Pathfinding.NavmeshTile BuildTileMesh(Pathfinding.Voxels.Voxelize vox, System.Int32 x, System.Int32 z, System.Int32 threadIndex)
    // Offset: 0x29E2128
    ::Pathfinding::NavmeshTile* BuildTileMesh(::Pathfinding::Voxels::Voxelize* vox, int x, int z, int threadIndex);
    // private Pathfinding.NavmeshTile CreateTile(Pathfinding.Voxels.Voxelize vox, Pathfinding.Voxels.VoxelMesh mesh, System.Int32 x, System.Int32 z, System.Int32 threadIndex)
    // Offset: 0x29E311C
    ::Pathfinding::NavmeshTile* CreateTile(::Pathfinding::Voxels::Voxelize* vox, ::Pathfinding::Voxels::VoxelMesh mesh, int x, int z, int threadIndex);
    // protected override System.Boolean get_RecalculateNormals()
    // Offset: 0x29E1614
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: System.Boolean NavmeshBase::get_RecalculateNormals()
    bool get_RecalculateNormals();
    // public override System.Single get_TileWorldSizeX()
    // Offset: 0x29E161C
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: System.Single NavmeshBase::get_TileWorldSizeX()
    float get_TileWorldSizeX();
    // public override System.Single get_TileWorldSizeZ()
    // Offset: 0x29E1630
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: System.Single NavmeshBase::get_TileWorldSizeZ()
    float get_TileWorldSizeZ();
    // protected override System.Single get_MaxTileConnectionEdgeDistance()
    // Offset: 0x29E1644
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: System.Single NavmeshBase::get_MaxTileConnectionEdgeDistance()
    float get_MaxTileConnectionEdgeDistance();
    // protected override System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> ScanInternal()
    // Offset: 0x29E26B8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Collections.Generic.IEnumerable`1<Pathfinding.Progress> NavGraph::ScanInternal()
    ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* ScanInternal();
    // public override Pathfinding.Util.GraphTransform CalculateTransform()
    // Offset: 0x29E2768
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: Pathfinding.Util.GraphTransform NavmeshBase::CalculateTransform()
    ::Pathfinding::Util::GraphTransform* CalculateTransform();
    // protected override System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x29E39E0
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void .ctor()
    // Offset: 0x29E3E24
    // Implemented from: Pathfinding.NavmeshBase
    // Base method: System.Void NavmeshBase::.ctor()
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecastGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RecastGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecastGraph*, creationType>()));
    }
  }; // Pathfinding.RecastGraph
  #pragma pack(pop)
  static check_size<sizeof(RecastGraph), 416 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::NavmeshTile*>*)> __Pathfinding_RecastGraphSizeCheck;
  static_assert(sizeof(RecastGraph) == 0x1A8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RecastGraph::RelevantGraphSurfaceMode, "Pathfinding", "RecastGraph/RelevantGraphSurfaceMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_forcedBounds
// Il2CppName: get_forcedBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_forcedBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_forcedBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::ClosestPointOnNode
// Il2CppName: ClosestPointOnNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::RecastGraph::*)(::Pathfinding::TriangleMeshNode*, ::UnityEngine::Vector3)>(&Pathfinding::RecastGraph::ClosestPointOnNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "ClosestPointOnNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, pos});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RecastGraph::*)(::Pathfinding::TriangleMeshNode*, ::UnityEngine::Vector3)>(&Pathfinding::RecastGraph::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, pos});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::SnapForceBoundsToScene
// Il2CppName: SnapForceBoundsToScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::SnapForceBoundsToScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "SnapForceBoundsToScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync
// Il2CppName: Pathfinding.IUpdatableGraph.CanUpdateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateThreading (Pathfinding::RecastGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_CanUpdateAsync)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "Pathfinding.IUpdatableGraph.CanUpdateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateAreaInit)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateArea
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateArea)> {
  static const MethodInfo* get() {
    static auto* guo = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "Pathfinding.IUpdatableGraph.UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guo});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost
// Il2CppName: Pathfinding.IUpdatableGraph.UpdateAreaPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::RecastGraph::Pathfinding_IUpdatableGraph_UpdateAreaPost)> {
  static const MethodInfo* get() {
    static auto* guo = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "Pathfinding.IUpdatableGraph.UpdateAreaPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guo});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::InitializeTileInfo
// Il2CppName: InitializeTileInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::InitializeTileInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "InitializeTileInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::PutMeshesIntoTileBuckets
// Il2CppName: PutMeshesIntoTileBuckets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*> (Pathfinding::RecastGraph::*)(::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>*)>(&Pathfinding::RecastGraph::PutMeshesIntoTileBuckets)> {
  static const MethodInfo* get() {
    static auto* meshes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "RasterizationMesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "PutMeshesIntoTileBuckets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::ScanAllTiles
// Il2CppName: ScanAllTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::ScanAllTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "ScanAllTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::CollectMeshes
// Il2CppName: CollectMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::Voxels::RasterizationMesh*>* (Pathfinding::RecastGraph::*)(::UnityEngine::Bounds)>(&Pathfinding::RecastGraph::CollectMeshes)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "CollectMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_CellHeight
// Il2CppName: get_CellHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_CellHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_CellHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_CharacterRadiusInVoxels
// Il2CppName: get_CharacterRadiusInVoxels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_CharacterRadiusInVoxels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_CharacterRadiusInVoxels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_TileBorderSizeInVoxels
// Il2CppName: get_TileBorderSizeInVoxels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_TileBorderSizeInVoxels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_TileBorderSizeInVoxels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_TileBorderSizeInWorldUnits
// Il2CppName: get_TileBorderSizeInWorldUnits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_TileBorderSizeInWorldUnits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_TileBorderSizeInWorldUnits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::CalculateTileBoundsWithBorder
// Il2CppName: CalculateTileBoundsWithBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Pathfinding::RecastGraph::*)(int, int)>(&Pathfinding::RecastGraph::CalculateTileBoundsWithBorder)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "CalculateTileBoundsWithBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::BuildTileMesh
// Il2CppName: BuildTileMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavmeshTile* (Pathfinding::RecastGraph::*)(::Pathfinding::Voxels::Voxelize*, int, int, int)>(&Pathfinding::RecastGraph::BuildTileMesh)> {
  static const MethodInfo* get() {
    static auto* vox = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "Voxelize")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* threadIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "BuildTileMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vox, x, z, threadIndex});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::CreateTile
// Il2CppName: CreateTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NavmeshTile* (Pathfinding::RecastGraph::*)(::Pathfinding::Voxels::Voxelize*, ::Pathfinding::Voxels::VoxelMesh, int, int, int)>(&Pathfinding::RecastGraph::CreateTile)> {
  static const MethodInfo* get() {
    static auto* vox = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "Voxelize")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("Pathfinding.Voxels", "VoxelMesh")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* threadIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "CreateTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vox, mesh, x, z, threadIndex});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_RecalculateNormals
// Il2CppName: get_RecalculateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_RecalculateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_RecalculateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_TileWorldSizeX
// Il2CppName: get_TileWorldSizeX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_TileWorldSizeX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_TileWorldSizeX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_TileWorldSizeZ
// Il2CppName: get_TileWorldSizeZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_TileWorldSizeZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_TileWorldSizeZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::get_MaxTileConnectionEdgeDistance
// Il2CppName: get_MaxTileConnectionEdgeDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::get_MaxTileConnectionEdgeDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "get_MaxTileConnectionEdgeDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Progress>* (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::ScanInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::CalculateTransform
// Il2CppName: CalculateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::GraphTransform* (Pathfinding::RecastGraph::*)()>(&Pathfinding::RecastGraph::CalculateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "CalculateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::RecastGraph::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastGraph*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
