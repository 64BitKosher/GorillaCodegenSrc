// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RecastGraph
  class RecastGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: RecastTileUpdateHandler
  class RecastTileUpdateHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::RecastTileUpdateHandler);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::RecastTileUpdateHandler*, "Pathfinding", "RecastTileUpdateHandler");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.RecastTileUpdateHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class RecastTileUpdateHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Pathfinding.RecastGraph graph
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::RecastGraph* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::RecastGraph*) == 0x8);
    // private System.Boolean[] dirtyTiles
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<bool> dirtyTiles;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Boolean anyDirtyTiles
    // Size: 0x1
    // Offset: 0x30
    bool anyDirtyTiles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: anyDirtyTiles and: earliestDirty
    char __padding2[0x3] = {};
    // private System.Single earliestDirty
    // Size: 0x4
    // Offset: 0x34
    float earliestDirty;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxThrottlingDelay
    // Size: 0x4
    // Offset: 0x38
    float maxThrottlingDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private Pathfinding.RecastGraph graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::RecastGraph*& dyn_graph();
    // Get instance field reference: private System.Boolean[] dirtyTiles
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_dirtyTiles();
    // Get instance field reference: private System.Boolean anyDirtyTiles
    [[deprecated("Use field access instead!")]] bool& dyn_anyDirtyTiles();
    // Get instance field reference: private System.Single earliestDirty
    [[deprecated("Use field access instead!")]] float& dyn_earliestDirty();
    // Get instance field reference: public System.Single maxThrottlingDelay
    [[deprecated("Use field access instead!")]] float& dyn_maxThrottlingDelay();
    // public System.Void SetGraph(Pathfinding.RecastGraph graph)
    // Offset: 0x29BC798
    void SetGraph(::Pathfinding::RecastGraph* graph);
    // public System.Void ScheduleUpdate(UnityEngine.Bounds bounds)
    // Offset: 0x29BC814
    void ScheduleUpdate(::UnityEngine::Bounds bounds);
    // private System.Void OnEnable()
    // Offset: 0x29BCB00
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x29BCB7C
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x29BCBF8
    void Update();
    // public System.Void UpdateDirtyTiles()
    // Offset: 0x29BCC3C
    void UpdateDirtyTiles();
    // public System.Void .ctor()
    // Offset: 0x29BCEB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecastTileUpdateHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::RecastTileUpdateHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecastTileUpdateHandler*, creationType>()));
    }
  }; // Pathfinding.RecastTileUpdateHandler
  #pragma pack(pop)
  static check_size<sizeof(RecastTileUpdateHandler), 56 + sizeof(float)> __Pathfinding_RecastTileUpdateHandlerSizeCheck;
  static_assert(sizeof(RecastTileUpdateHandler) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::SetGraph
// Il2CppName: SetGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)(::Pathfinding::RecastGraph*)>(&Pathfinding::RecastTileUpdateHandler::SetGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "RecastGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "SetGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::ScheduleUpdate
// Il2CppName: ScheduleUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)(::UnityEngine::Bounds)>(&Pathfinding::RecastTileUpdateHandler::ScheduleUpdate)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "ScheduleUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)()>(&Pathfinding::RecastTileUpdateHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)()>(&Pathfinding::RecastTileUpdateHandler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)()>(&Pathfinding::RecastTileUpdateHandler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::UpdateDirtyTiles
// Il2CppName: UpdateDirtyTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::RecastTileUpdateHandler::*)()>(&Pathfinding::RecastTileUpdateHandler::UpdateDirtyTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::RecastTileUpdateHandler*), "UpdateDirtyTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::RecastTileUpdateHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
