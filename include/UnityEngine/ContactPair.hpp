// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.CollisionPairFlags
#include "UnityEngine/CollisionPairFlags.hpp"
// Including type: UnityEngine.CollisionPairEventFlags
#include "UnityEngine/CollisionPairEventFlags.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: UnityEngine.ContactPoint
#include "UnityEngine/ContactPoint.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: ContactPairPoint
  struct ContactPairPoint;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ContactPair
  struct ContactPair;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ContactPair, "UnityEngine", "ContactPair");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ContactPair
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct ContactPair/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly System.Int32 m_ColliderID
    // Size: 0x4
    // Offset: 0x0
    int m_ColliderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Int32 m_OtherColliderID
    // Size: 0x4
    // Offset: 0x4
    int m_OtherColliderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.IntPtr m_StartPtr
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr m_StartPtr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // readonly System.UInt32 m_NbPoints
    // Size: 0x4
    // Offset: 0x10
    uint m_NbPoints;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // readonly UnityEngine.CollisionPairFlags m_Flags
    // Size: 0x2
    // Offset: 0x14
    ::UnityEngine::CollisionPairFlags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::CollisionPairFlags) == 0x2);
    // readonly UnityEngine.CollisionPairEventFlags m_Events
    // Size: 0x2
    // Offset: 0x16
    ::UnityEngine::CollisionPairEventFlags m_Events;
    // Field size check
    static_assert(sizeof(::UnityEngine::CollisionPairEventFlags) == 0x2);
    // readonly UnityEngine.Vector3 m_ImpulseSum
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 m_ImpulseSum;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: ContactPair
    constexpr ContactPair(int m_ColliderID_ = {}, int m_OtherColliderID_ = {}, ::System::IntPtr m_StartPtr_ = {}, uint m_NbPoints_ = {}, ::UnityEngine::CollisionPairFlags m_Flags_ = {}, ::UnityEngine::CollisionPairEventFlags m_Events_ = {}, ::UnityEngine::Vector3 m_ImpulseSum_ = {}) noexcept : m_ColliderID{m_ColliderID_}, m_OtherColliderID{m_OtherColliderID_}, m_StartPtr{m_StartPtr_}, m_NbPoints{m_NbPoints_}, m_Flags{m_Flags_}, m_Events{m_Events_}, m_ImpulseSum{m_ImpulseSum_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.UInt32 c_InvalidFaceIndex
    static constexpr const uint c_InvalidFaceIndex = 4294967295u;
    // Get static field: static private System.UInt32 c_InvalidFaceIndex
    static uint _get_c_InvalidFaceIndex();
    // Set static field: static private System.UInt32 c_InvalidFaceIndex
    static void _set_c_InvalidFaceIndex(uint value);
    // Get instance field reference: readonly System.Int32 m_ColliderID
    [[deprecated("Use field access instead!")]] int& dyn_m_ColliderID();
    // Get instance field reference: readonly System.Int32 m_OtherColliderID
    [[deprecated("Use field access instead!")]] int& dyn_m_OtherColliderID();
    // Get instance field reference: readonly System.IntPtr m_StartPtr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_StartPtr();
    // Get instance field reference: readonly System.UInt32 m_NbPoints
    [[deprecated("Use field access instead!")]] uint& dyn_m_NbPoints();
    // Get instance field reference: readonly UnityEngine.CollisionPairFlags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::CollisionPairFlags& dyn_m_Flags();
    // Get instance field reference: readonly UnityEngine.CollisionPairEventFlags m_Events
    [[deprecated("Use field access instead!")]] ::UnityEngine::CollisionPairEventFlags& dyn_m_Events();
    // Get instance field reference: readonly UnityEngine.Vector3 m_ImpulseSum
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_ImpulseSum();
    // public System.Int32 get_ColliderInstanceID()
    // Offset: 0x5535E18
    int get_ColliderInstanceID();
    // public System.Int32 get_OtherColliderInstanceID()
    // Offset: 0x5535E20
    int get_OtherColliderInstanceID();
    // public UnityEngine.Collider get_Collider()
    // Offset: 0x5527CD0
    ::UnityEngine::Collider* get_Collider();
    // public UnityEngine.Collider get_OtherCollider()
    // Offset: 0x5527C44
    ::UnityEngine::Collider* get_OtherCollider();
    // public UnityEngine.Vector3 get_ImpulseSum()
    // Offset: 0x5535E28
    ::UnityEngine::Vector3 get_ImpulseSum();
    // public System.Boolean get_IsCollisionEnter()
    // Offset: 0x552D464
    bool get_IsCollisionEnter();
    // public System.Boolean get_IsCollisionExit()
    // Offset: 0x552D5AC
    bool get_IsCollisionExit();
    // public System.Boolean get_IsCollisionStay()
    // Offset: 0x552D5A0
    bool get_IsCollisionStay();
    // System.Boolean get_HasRemovedCollider()
    // Offset: 0x552D454
    bool get_HasRemovedCollider();
    // System.Int32 ExtractContactsArray(UnityEngine.ContactPoint[] managedContainer, System.Boolean flipped)
    // Offset: 0x5527F54
    int ExtractContactsArray(::ArrayW<::UnityEngine::ContactPoint> managedContainer, bool flipped);
    // UnityEngine.ContactPairPoint* GetContactPoint_Internal(System.Int32 index)
    // Offset: 0x55281B0
    ::UnityEngine::ContactPairPoint* GetContactPoint_Internal(int index);
    // static private System.Int32 ExtractContactsArray_Injected(ref UnityEngine.ContactPair _unity_self, UnityEngine.ContactPoint[] managedContainer, System.Boolean flipped)
    // Offset: 0x5535E34
    static int ExtractContactsArray_Injected(ByRef<::UnityEngine::ContactPair> _unity_self, ::ArrayW<::UnityEngine::ContactPoint> managedContainer, bool flipped);
  }; // UnityEngine.ContactPair
  #pragma pack(pop)
  static check_size<sizeof(ContactPair), 24 + sizeof(::UnityEngine::Vector3)> __UnityEngine_ContactPairSizeCheck;
  static_assert(sizeof(ContactPair) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_ColliderInstanceID
// Il2CppName: get_ColliderInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_ColliderInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_ColliderInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_OtherColliderInstanceID
// Il2CppName: get_OtherColliderInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_OtherColliderInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_OtherColliderInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_Collider
// Il2CppName: get_Collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_Collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_Collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_OtherCollider
// Il2CppName: get_OtherCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_OtherCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_OtherCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_ImpulseSum
// Il2CppName: get_ImpulseSum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_ImpulseSum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_ImpulseSum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_IsCollisionEnter
// Il2CppName: get_IsCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_IsCollisionEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_IsCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_IsCollisionExit
// Il2CppName: get_IsCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_IsCollisionExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_IsCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_IsCollisionStay
// Il2CppName: get_IsCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_IsCollisionStay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_IsCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::get_HasRemovedCollider
// Il2CppName: get_HasRemovedCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ContactPair::*)()>(&UnityEngine::ContactPair::get_HasRemovedCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "get_HasRemovedCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::ExtractContactsArray
// Il2CppName: ExtractContactsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ContactPair::*)(::ArrayW<::UnityEngine::ContactPoint>, bool)>(&UnityEngine::ContactPair::ExtractContactsArray)> {
  static const MethodInfo* get() {
    static auto* managedContainer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPoint"), 1)->byval_arg;
    static auto* flipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "ExtractContactsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{managedContainer, flipped});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::GetContactPoint_Internal
// Il2CppName: GetContactPoint_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ContactPairPoint* (UnityEngine::ContactPair::*)(int)>(&UnityEngine::ContactPair::GetContactPoint_Internal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "GetContactPoint_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactPair::ExtractContactsArray_Injected
// Il2CppName: ExtractContactsArray_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::UnityEngine::ContactPair>, ::ArrayW<::UnityEngine::ContactPoint>, bool)>(&UnityEngine::ContactPair::ExtractContactsArray_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPair")->this_arg;
    static auto* managedContainer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPoint"), 1)->byval_arg;
    static auto* flipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactPair), "ExtractContactsArray_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self, managedContainer, flipped});
  }
};
