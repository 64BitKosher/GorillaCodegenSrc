// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ConstantForce
  class ConstantForce;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ConstantForce);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ConstantForce*, "UnityEngine", "ConstantForce");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ConstantForce
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class ConstantForce : public ::UnityEngine::Behaviour {
    public:
    // public UnityEngine.Vector3 get_force()
    // Offset: 0x5531A50
    ::UnityEngine::Vector3 get_force();
    // public System.Void set_force(UnityEngine.Vector3 value)
    // Offset: 0x5531AF0
    void set_force(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_relativeForce()
    // Offset: 0x5531B88
    ::UnityEngine::Vector3 get_relativeForce();
    // public System.Void set_relativeForce(UnityEngine.Vector3 value)
    // Offset: 0x5531C28
    void set_relativeForce(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_torque()
    // Offset: 0x5531CC0
    ::UnityEngine::Vector3 get_torque();
    // public System.Void set_torque(UnityEngine.Vector3 value)
    // Offset: 0x5531D60
    void set_torque(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_relativeTorque()
    // Offset: 0x5531DF8
    ::UnityEngine::Vector3 get_relativeTorque();
    // public System.Void set_relativeTorque(UnityEngine.Vector3 value)
    // Offset: 0x5531E98
    void set_relativeTorque(::UnityEngine::Vector3 value);
    // public System.Void .ctor()
    // Offset: 0x5531F30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstantForce* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ConstantForce::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstantForce*, creationType>()));
    }
    // private System.Void get_force_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5531AAC
    void get_force_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_force_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5531B44
    void set_force_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_relativeForce_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5531BE4
    void get_relativeForce_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_relativeForce_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5531C7C
    void set_relativeForce_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_torque_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5531D1C
    void get_torque_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_torque_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5531DB4
    void set_torque_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_relativeTorque_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5531E54
    void get_relativeTorque_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_relativeTorque_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5531EEC
    void set_relativeTorque_Injected(ByRef<::UnityEngine::Vector3> value);
  }; // UnityEngine.ConstantForce
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_force
// Il2CppName: get_force
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConstantForce::*)()>(&UnityEngine::ConstantForce::get_force)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_force", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_force
// Il2CppName: set_force
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(::UnityEngine::Vector3)>(&UnityEngine::ConstantForce::set_force)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_force", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_relativeForce
// Il2CppName: get_relativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConstantForce::*)()>(&UnityEngine::ConstantForce::get_relativeForce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_relativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_relativeForce
// Il2CppName: set_relativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(::UnityEngine::Vector3)>(&UnityEngine::ConstantForce::set_relativeForce)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_relativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_torque
// Il2CppName: get_torque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConstantForce::*)()>(&UnityEngine::ConstantForce::get_torque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_torque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_torque
// Il2CppName: set_torque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(::UnityEngine::Vector3)>(&UnityEngine::ConstantForce::set_torque)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_torque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_relativeTorque
// Il2CppName: get_relativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConstantForce::*)()>(&UnityEngine::ConstantForce::get_relativeTorque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_relativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_relativeTorque
// Il2CppName: set_relativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(::UnityEngine::Vector3)>(&UnityEngine::ConstantForce::set_relativeTorque)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_relativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_force_Injected
// Il2CppName: get_force_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::get_force_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_force_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_force_Injected
// Il2CppName: set_force_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::set_force_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_force_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_relativeForce_Injected
// Il2CppName: get_relativeForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::get_relativeForce_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_relativeForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_relativeForce_Injected
// Il2CppName: set_relativeForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::set_relativeForce_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_relativeForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_torque_Injected
// Il2CppName: get_torque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::get_torque_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_torque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_torque_Injected
// Il2CppName: set_torque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::set_torque_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_torque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::get_relativeTorque_Injected
// Il2CppName: get_relativeTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::get_relativeTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "get_relativeTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConstantForce::set_relativeTorque_Injected
// Il2CppName: set_relativeTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConstantForce::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConstantForce::set_relativeTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConstantForce*), "set_relativeTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
