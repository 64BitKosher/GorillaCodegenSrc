// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderMode
  struct RenderMode;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: AdditionalCanvasShaderChannels
  struct AdditionalCanvasShaderChannels;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: StandaloneRenderResize
  struct StandaloneRenderResize;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Canvas);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Canvas*, "UnityEngine", "Canvas");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Canvas
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class Canvas : public ::UnityEngine::Behaviour {
    public:
    // Nested type: ::UnityEngine::Canvas::WillRenderCanvases
    class WillRenderCanvases;
    // Get static field: static private UnityEngine.Canvas/WillRenderCanvases preWillRenderCanvases
    static ::UnityEngine::Canvas::WillRenderCanvases* _get_preWillRenderCanvases();
    // Set static field: static private UnityEngine.Canvas/WillRenderCanvases preWillRenderCanvases
    static void _set_preWillRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // Get static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
    static ::UnityEngine::Canvas::WillRenderCanvases* _get_willRenderCanvases();
    // Set static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
    static void _set_willRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // Get static field: static private System.Action`1<System.Int32> <externBeginRenderOverlays>k__BackingField
    static ::System::Action_1<int>* _get_$externBeginRenderOverlays$k__BackingField();
    // Set static field: static private System.Action`1<System.Int32> <externBeginRenderOverlays>k__BackingField
    static void _set_$externBeginRenderOverlays$k__BackingField(::System::Action_1<int>* value);
    // Get static field: static private System.Action`2<System.Int32,System.Int32> <externRenderOverlaysBefore>k__BackingField
    static ::System::Action_2<int, int>* _get_$externRenderOverlaysBefore$k__BackingField();
    // Set static field: static private System.Action`2<System.Int32,System.Int32> <externRenderOverlaysBefore>k__BackingField
    static void _set_$externRenderOverlaysBefore$k__BackingField(::System::Action_2<int, int>* value);
    // Get static field: static private System.Action`1<System.Int32> <externEndRenderOverlays>k__BackingField
    static ::System::Action_1<int>* _get_$externEndRenderOverlays$k__BackingField();
    // Set static field: static private System.Action`1<System.Int32> <externEndRenderOverlays>k__BackingField
    static void _set_$externEndRenderOverlays$k__BackingField(::System::Action_1<int>* value);
    // static public System.Void add_preWillRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x56D0048
    static void add_preWillRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // static public System.Void remove_preWillRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x56D0100
    static void remove_preWillRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // static public System.Void add_willRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x56D01B8
    static void add_willRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // static public System.Void remove_willRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x56D0274
    static void remove_willRenderCanvases(::UnityEngine::Canvas::WillRenderCanvases* value);
    // public UnityEngine.RenderMode get_renderMode()
    // Offset: 0x56D0330
    ::UnityEngine::RenderMode get_renderMode();
    // public System.Void set_renderMode(UnityEngine.RenderMode value)
    // Offset: 0x56D036C
    void set_renderMode(::UnityEngine::RenderMode value);
    // public System.Boolean get_isRootCanvas()
    // Offset: 0x56D03B0
    bool get_isRootCanvas();
    // public UnityEngine.Rect get_pixelRect()
    // Offset: 0x56D03EC
    ::UnityEngine::Rect get_pixelRect();
    // public System.Single get_scaleFactor()
    // Offset: 0x56D0488
    float get_scaleFactor();
    // public System.Void set_scaleFactor(System.Single value)
    // Offset: 0x56D04C4
    void set_scaleFactor(float value);
    // public System.Single get_referencePixelsPerUnit()
    // Offset: 0x56D0510
    float get_referencePixelsPerUnit();
    // public System.Void set_referencePixelsPerUnit(System.Single value)
    // Offset: 0x56D054C
    void set_referencePixelsPerUnit(float value);
    // public System.Boolean get_overridePixelPerfect()
    // Offset: 0x56D0598
    bool get_overridePixelPerfect();
    // public System.Void set_overridePixelPerfect(System.Boolean value)
    // Offset: 0x56D05D4
    void set_overridePixelPerfect(bool value);
    // public System.Boolean get_vertexColorAlwaysGammaSpace()
    // Offset: 0x56D0618
    bool get_vertexColorAlwaysGammaSpace();
    // public System.Void set_vertexColorAlwaysGammaSpace(System.Boolean value)
    // Offset: 0x56D0654
    void set_vertexColorAlwaysGammaSpace(bool value);
    // public System.Boolean get_pixelPerfect()
    // Offset: 0x56D0698
    bool get_pixelPerfect();
    // public System.Void set_pixelPerfect(System.Boolean value)
    // Offset: 0x56D06D4
    void set_pixelPerfect(bool value);
    // public System.Single get_planeDistance()
    // Offset: 0x56D0718
    float get_planeDistance();
    // public System.Void set_planeDistance(System.Single value)
    // Offset: 0x56D0754
    void set_planeDistance(float value);
    // public System.Int32 get_renderOrder()
    // Offset: 0x56D07A0
    int get_renderOrder();
    // public System.Boolean get_overrideSorting()
    // Offset: 0x56D07DC
    bool get_overrideSorting();
    // public System.Void set_overrideSorting(System.Boolean value)
    // Offset: 0x56D0818
    void set_overrideSorting(bool value);
    // public System.Int32 get_sortingOrder()
    // Offset: 0x56D085C
    int get_sortingOrder();
    // public System.Void set_sortingOrder(System.Int32 value)
    // Offset: 0x56D0898
    void set_sortingOrder(int value);
    // public System.Int32 get_targetDisplay()
    // Offset: 0x56D08DC
    int get_targetDisplay();
    // public System.Void set_targetDisplay(System.Int32 value)
    // Offset: 0x56D0918
    void set_targetDisplay(int value);
    // public System.Int32 get_sortingLayerID()
    // Offset: 0x56D095C
    int get_sortingLayerID();
    // public System.Void set_sortingLayerID(System.Int32 value)
    // Offset: 0x56D0998
    void set_sortingLayerID(int value);
    // public System.Int32 get_cachedSortingLayerValue()
    // Offset: 0x56D09DC
    int get_cachedSortingLayerValue();
    // public UnityEngine.AdditionalCanvasShaderChannels get_additionalShaderChannels()
    // Offset: 0x56D0A18
    ::UnityEngine::AdditionalCanvasShaderChannels get_additionalShaderChannels();
    // public System.Void set_additionalShaderChannels(UnityEngine.AdditionalCanvasShaderChannels value)
    // Offset: 0x56D0A54
    void set_additionalShaderChannels(::UnityEngine::AdditionalCanvasShaderChannels value);
    // public System.String get_sortingLayerName()
    // Offset: 0x56D0A98
    ::StringW get_sortingLayerName();
    // public System.Void set_sortingLayerName(System.String value)
    // Offset: 0x56D0AD4
    void set_sortingLayerName(::StringW value);
    // public UnityEngine.Canvas get_rootCanvas()
    // Offset: 0x56D0B18
    ::UnityEngine::Canvas* get_rootCanvas();
    // public UnityEngine.Vector2 get_renderingDisplaySize()
    // Offset: 0x56D0B54
    ::UnityEngine::Vector2 get_renderingDisplaySize();
    // public UnityEngine.StandaloneRenderResize get_updateRectTransformForStandalone()
    // Offset: 0x56D0BE4
    ::UnityEngine::StandaloneRenderResize get_updateRectTransformForStandalone();
    // public System.Void set_updateRectTransformForStandalone(UnityEngine.StandaloneRenderResize value)
    // Offset: 0x56D0C20
    void set_updateRectTransformForStandalone(::UnityEngine::StandaloneRenderResize value);
    // static System.Action`1<System.Int32> get_externBeginRenderOverlays()
    // Offset: 0x56D0C64
    static ::System::Action_1<int>* get_externBeginRenderOverlays();
    // static System.Void set_externBeginRenderOverlays(System.Action`1<System.Int32> value)
    // Offset: 0x56D0CAC
    static void set_externBeginRenderOverlays(::System::Action_1<int>* value);
    // static System.Action`2<System.Int32,System.Int32> get_externRenderOverlaysBefore()
    // Offset: 0x56D0CFC
    static ::System::Action_2<int, int>* get_externRenderOverlaysBefore();
    // static System.Void set_externRenderOverlaysBefore(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x56D0D44
    static void set_externRenderOverlaysBefore(::System::Action_2<int, int>* value);
    // static System.Action`1<System.Int32> get_externEndRenderOverlays()
    // Offset: 0x56D0D94
    static ::System::Action_1<int>* get_externEndRenderOverlays();
    // static System.Void set_externEndRenderOverlays(System.Action`1<System.Int32> value)
    // Offset: 0x56D0DDC
    static void set_externEndRenderOverlays(::System::Action_1<int>* value);
    // static System.Void SetExternalCanvasEnabled(System.Boolean enabled)
    // Offset: 0x56D0E2C
    static void SetExternalCanvasEnabled(bool enabled);
    // public UnityEngine.Camera get_worldCamera()
    // Offset: 0x56D0E68
    ::UnityEngine::Camera* get_worldCamera();
    // public System.Void set_worldCamera(UnityEngine.Camera value)
    // Offset: 0x56D0EA4
    void set_worldCamera(::UnityEngine::Camera* value);
    // public System.Single get_normalizedSortingGridSize()
    // Offset: 0x56D0EE8
    float get_normalizedSortingGridSize();
    // public System.Void set_normalizedSortingGridSize(System.Single value)
    // Offset: 0x56D0F24
    void set_normalizedSortingGridSize(float value);
    // public System.Int32 get_sortingGridNormalizedSize()
    // Offset: 0x56D0F70
    int get_sortingGridNormalizedSize();
    // public System.Void set_sortingGridNormalizedSize(System.Int32 value)
    // Offset: 0x56D0FAC
    void set_sortingGridNormalizedSize(int value);
    // static public UnityEngine.Material GetDefaultCanvasTextMaterial()
    // Offset: 0x56D0FF0
    static ::UnityEngine::Material* GetDefaultCanvasTextMaterial();
    // static public UnityEngine.Material GetDefaultCanvasMaterial()
    // Offset: 0x56D1018
    static ::UnityEngine::Material* GetDefaultCanvasMaterial();
    // static public UnityEngine.Material GetETC1SupportedCanvasMaterial()
    // Offset: 0x56D1040
    static ::UnityEngine::Material* GetETC1SupportedCanvasMaterial();
    // System.Void UpdateCanvasRectTransform(System.Boolean alignWithCamera)
    // Offset: 0x56D1068
    void UpdateCanvasRectTransform(bool alignWithCamera);
    // static public System.Void ForceUpdateCanvases()
    // Offset: 0x56D10AC
    static void ForceUpdateCanvases();
    // static private System.Void SendPreWillRenderCanvases()
    // Offset: 0x56D10BC
    static void SendPreWillRenderCanvases();
    // static private System.Void SendWillRenderCanvases()
    // Offset: 0x56D1120
    static void SendWillRenderCanvases();
    // static private System.Void BeginRenderExtraOverlays(System.Int32 displayIndex)
    // Offset: 0x56D1184
    static void BeginRenderExtraOverlays(int displayIndex);
    // static private System.Void RenderExtraOverlaysBefore(System.Int32 displayIndex, System.Int32 sortingOrder)
    // Offset: 0x56D11F0
    static void RenderExtraOverlaysBefore(int displayIndex, int sortingOrder);
    // static private System.Void EndRenderExtraOverlays(System.Int32 displayIndex)
    // Offset: 0x56D1264
    static void EndRenderExtraOverlays(int displayIndex);
    // public System.Void .ctor()
    // Offset: 0x56D12D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Canvas* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Canvas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Canvas*, creationType>()));
    }
    // private System.Void get_pixelRect_Injected(out UnityEngine.Rect ret)
    // Offset: 0x56D0444
    void get_pixelRect_Injected(ByRef<::UnityEngine::Rect> ret);
    // private System.Void get_renderingDisplaySize_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x56D0BA0
    void get_renderingDisplaySize_Injected(ByRef<::UnityEngine::Vector2> ret);
  }; // UnityEngine.Canvas
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Canvas::add_preWillRenderCanvases
// Il2CppName: add_preWillRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Canvas::WillRenderCanvases*)>(&UnityEngine::Canvas::add_preWillRenderCanvases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas/WillRenderCanvases")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "add_preWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::remove_preWillRenderCanvases
// Il2CppName: remove_preWillRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Canvas::WillRenderCanvases*)>(&UnityEngine::Canvas::remove_preWillRenderCanvases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas/WillRenderCanvases")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "remove_preWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::add_willRenderCanvases
// Il2CppName: add_willRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Canvas::WillRenderCanvases*)>(&UnityEngine::Canvas::add_willRenderCanvases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas/WillRenderCanvases")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "add_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::remove_willRenderCanvases
// Il2CppName: remove_willRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Canvas::WillRenderCanvases*)>(&UnityEngine::Canvas::remove_willRenderCanvases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas/WillRenderCanvases")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "remove_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_renderMode
// Il2CppName: get_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderMode (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_renderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_renderMode
// Il2CppName: set_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(::UnityEngine::RenderMode)>(&UnityEngine::Canvas::set_renderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_isRootCanvas
// Il2CppName: get_isRootCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_isRootCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_isRootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_pixelRect
// Il2CppName: get_pixelRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_pixelRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_pixelRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_scaleFactor
// Il2CppName: get_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_scaleFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_scaleFactor
// Il2CppName: set_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(float)>(&UnityEngine::Canvas::set_scaleFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_referencePixelsPerUnit
// Il2CppName: get_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_referencePixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_referencePixelsPerUnit
// Il2CppName: set_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(float)>(&UnityEngine::Canvas::set_referencePixelsPerUnit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_overridePixelPerfect
// Il2CppName: get_overridePixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_overridePixelPerfect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_overridePixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_overridePixelPerfect
// Il2CppName: set_overridePixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(bool)>(&UnityEngine::Canvas::set_overridePixelPerfect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_overridePixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_vertexColorAlwaysGammaSpace
// Il2CppName: get_vertexColorAlwaysGammaSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_vertexColorAlwaysGammaSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_vertexColorAlwaysGammaSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_vertexColorAlwaysGammaSpace
// Il2CppName: set_vertexColorAlwaysGammaSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(bool)>(&UnityEngine::Canvas::set_vertexColorAlwaysGammaSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_vertexColorAlwaysGammaSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_pixelPerfect
// Il2CppName: get_pixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_pixelPerfect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_pixelPerfect
// Il2CppName: set_pixelPerfect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(bool)>(&UnityEngine::Canvas::set_pixelPerfect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_planeDistance
// Il2CppName: get_planeDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_planeDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_planeDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_planeDistance
// Il2CppName: set_planeDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(float)>(&UnityEngine::Canvas::set_planeDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_planeDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_renderOrder
// Il2CppName: get_renderOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_renderOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_renderOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_overrideSorting
// Il2CppName: get_overrideSorting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_overrideSorting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_overrideSorting
// Il2CppName: set_overrideSorting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(bool)>(&UnityEngine::Canvas::set_overrideSorting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_sortingOrder
// Il2CppName: get_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_sortingOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_sortingOrder
// Il2CppName: set_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(int)>(&UnityEngine::Canvas::set_sortingOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_targetDisplay
// Il2CppName: get_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_targetDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_targetDisplay
// Il2CppName: set_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(int)>(&UnityEngine::Canvas::set_targetDisplay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_sortingLayerID
// Il2CppName: get_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_sortingLayerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_sortingLayerID
// Il2CppName: set_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(int)>(&UnityEngine::Canvas::set_sortingLayerID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_cachedSortingLayerValue
// Il2CppName: get_cachedSortingLayerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_cachedSortingLayerValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_cachedSortingLayerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_additionalShaderChannels
// Il2CppName: get_additionalShaderChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AdditionalCanvasShaderChannels (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_additionalShaderChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_additionalShaderChannels
// Il2CppName: set_additionalShaderChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(::UnityEngine::AdditionalCanvasShaderChannels)>(&UnityEngine::Canvas::set_additionalShaderChannels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AdditionalCanvasShaderChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_sortingLayerName
// Il2CppName: get_sortingLayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_sortingLayerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_sortingLayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_sortingLayerName
// Il2CppName: set_sortingLayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(::StringW)>(&UnityEngine::Canvas::set_sortingLayerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_sortingLayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_rootCanvas
// Il2CppName: get_rootCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Canvas* (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_rootCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_rootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_renderingDisplaySize
// Il2CppName: get_renderingDisplaySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_renderingDisplaySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_renderingDisplaySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_updateRectTransformForStandalone
// Il2CppName: get_updateRectTransformForStandalone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::StandaloneRenderResize (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_updateRectTransformForStandalone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_updateRectTransformForStandalone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_updateRectTransformForStandalone
// Il2CppName: set_updateRectTransformForStandalone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(::UnityEngine::StandaloneRenderResize)>(&UnityEngine::Canvas::set_updateRectTransformForStandalone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "StandaloneRenderResize")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_updateRectTransformForStandalone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_externBeginRenderOverlays
// Il2CppName: get_externBeginRenderOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<int>* (*)()>(&UnityEngine::Canvas::get_externBeginRenderOverlays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_externBeginRenderOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_externBeginRenderOverlays
// Il2CppName: set_externBeginRenderOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<int>*)>(&UnityEngine::Canvas::set_externBeginRenderOverlays)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_externBeginRenderOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_externRenderOverlaysBefore
// Il2CppName: get_externRenderOverlaysBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<int, int>* (*)()>(&UnityEngine::Canvas::get_externRenderOverlaysBefore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_externRenderOverlaysBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_externRenderOverlaysBefore
// Il2CppName: set_externRenderOverlaysBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<int, int>*)>(&UnityEngine::Canvas::set_externRenderOverlaysBefore)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_externRenderOverlaysBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_externEndRenderOverlays
// Il2CppName: get_externEndRenderOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<int>* (*)()>(&UnityEngine::Canvas::get_externEndRenderOverlays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_externEndRenderOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_externEndRenderOverlays
// Il2CppName: set_externEndRenderOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<int>*)>(&UnityEngine::Canvas::set_externEndRenderOverlays)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_externEndRenderOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::SetExternalCanvasEnabled
// Il2CppName: SetExternalCanvasEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::Canvas::SetExternalCanvasEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "SetExternalCanvasEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_worldCamera
// Il2CppName: get_worldCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_worldCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_worldCamera
// Il2CppName: set_worldCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(::UnityEngine::Camera*)>(&UnityEngine::Canvas::set_worldCamera)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_normalizedSortingGridSize
// Il2CppName: get_normalizedSortingGridSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_normalizedSortingGridSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_normalizedSortingGridSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_normalizedSortingGridSize
// Il2CppName: set_normalizedSortingGridSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(float)>(&UnityEngine::Canvas::set_normalizedSortingGridSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_normalizedSortingGridSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_sortingGridNormalizedSize
// Il2CppName: get_sortingGridNormalizedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Canvas::*)()>(&UnityEngine::Canvas::get_sortingGridNormalizedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_sortingGridNormalizedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::set_sortingGridNormalizedSize
// Il2CppName: set_sortingGridNormalizedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(int)>(&UnityEngine::Canvas::set_sortingGridNormalizedSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "set_sortingGridNormalizedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::GetDefaultCanvasTextMaterial
// Il2CppName: GetDefaultCanvasTextMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&UnityEngine::Canvas::GetDefaultCanvasTextMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "GetDefaultCanvasTextMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::GetDefaultCanvasMaterial
// Il2CppName: GetDefaultCanvasMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&UnityEngine::Canvas::GetDefaultCanvasMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "GetDefaultCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::GetETC1SupportedCanvasMaterial
// Il2CppName: GetETC1SupportedCanvasMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&UnityEngine::Canvas::GetETC1SupportedCanvasMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "GetETC1SupportedCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::UpdateCanvasRectTransform
// Il2CppName: UpdateCanvasRectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(bool)>(&UnityEngine::Canvas::UpdateCanvasRectTransform)> {
  static const MethodInfo* get() {
    static auto* alignWithCamera = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "UpdateCanvasRectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alignWithCamera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::ForceUpdateCanvases
// Il2CppName: ForceUpdateCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Canvas::ForceUpdateCanvases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "ForceUpdateCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::SendPreWillRenderCanvases
// Il2CppName: SendPreWillRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Canvas::SendPreWillRenderCanvases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "SendPreWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::SendWillRenderCanvases
// Il2CppName: SendWillRenderCanvases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Canvas::SendWillRenderCanvases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "SendWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::BeginRenderExtraOverlays
// Il2CppName: BeginRenderExtraOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&UnityEngine::Canvas::BeginRenderExtraOverlays)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "BeginRenderExtraOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::RenderExtraOverlaysBefore
// Il2CppName: RenderExtraOverlaysBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&UnityEngine::Canvas::RenderExtraOverlaysBefore)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sortingOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "RenderExtraOverlaysBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex, sortingOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::EndRenderExtraOverlays
// Il2CppName: EndRenderExtraOverlays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&UnityEngine::Canvas::EndRenderExtraOverlays)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "EndRenderExtraOverlays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Canvas::get_pixelRect_Injected
// Il2CppName: get_pixelRect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(ByRef<::UnityEngine::Rect>)>(&UnityEngine::Canvas::get_pixelRect_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_pixelRect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Canvas::get_renderingDisplaySize_Injected
// Il2CppName: get_renderingDisplaySize_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Canvas::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Canvas::get_renderingDisplaySize_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Canvas*), "get_renderingDisplaySize_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
