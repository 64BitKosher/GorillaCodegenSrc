// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.VFX
namespace UnityEngine::VFX {
  // Forward declaring type: VFXBatchInfo
  struct VFXBatchInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::VFX::VFXBatchInfo, "UnityEngine.VFX", "VFXBatchInfo");
// Type namespace: UnityEngine.VFX
namespace UnityEngine::VFX {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.VFX.VFXBatchInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  struct VFXBatchInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 capacity
    // Size: 0x4
    // Offset: 0x0
    uint capacity;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 activeInstanceCount
    // Size: 0x4
    // Offset: 0x4
    uint activeInstanceCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: VFXBatchInfo
    constexpr VFXBatchInfo(uint capacity_ = {}, uint activeInstanceCount_ = {}) noexcept : capacity{capacity_}, activeInstanceCount{activeInstanceCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 capacity
    [[deprecated("Use field access instead!")]] uint& dyn_capacity();
    // Get instance field reference: public System.UInt32 activeInstanceCount
    [[deprecated("Use field access instead!")]] uint& dyn_activeInstanceCount();
  }; // UnityEngine.VFX.VFXBatchInfo
  #pragma pack(pop)
  static check_size<sizeof(VFXBatchInfo), 4 + sizeof(uint)> __UnityEngine_VFX_VFXBatchInfoSizeCheck;
  static_assert(sizeof(VFXBatchInfo) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
