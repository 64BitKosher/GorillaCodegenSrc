// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshLinkInstance
  struct NavMeshLinkInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AI::NavMeshLinkInstance, "UnityEngine.AI", "NavMeshLinkInstance");
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AI.NavMeshLinkInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct NavMeshLinkInstance/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 <id>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NavMeshLinkInstance
    constexpr NavMeshLinkInstance(int id_ = {}) noexcept : id{id_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return id;
    }
    // Get instance field reference: private System.Int32 <id>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$id$k__BackingField();
    // public System.Boolean get_valid()
    // Offset: 0x544EEB0
    bool get_valid();
    // System.Int32 get_id()
    // Offset: 0x544EF3C
    int get_id();
    // System.Void set_id(System.Int32 value)
    // Offset: 0x544EF44
    void set_id(int value);
    // public System.Void Remove()
    // Offset: 0x544EF4C
    void Remove();
    // public System.Void set_owner(UnityEngine.Object value)
    // Offset: 0x544EFC4
    void set_owner(::UnityEngine::Object* value);
  }; // UnityEngine.AI.NavMeshLinkInstance
  #pragma pack(pop)
  static check_size<sizeof(NavMeshLinkInstance), 0 + sizeof(int)> __UnityEngine_AI_NavMeshLinkInstanceSizeCheck;
  static_assert(sizeof(NavMeshLinkInstance) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkInstance::get_valid
// Il2CppName: get_valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshLinkInstance::*)()>(&UnityEngine::AI::NavMeshLinkInstance::get_valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkInstance), "get_valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkInstance::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshLinkInstance::*)()>(&UnityEngine::AI::NavMeshLinkInstance::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkInstance), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkInstance::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkInstance::*)(int)>(&UnityEngine::AI::NavMeshLinkInstance::set_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkInstance), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkInstance::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkInstance::*)()>(&UnityEngine::AI::NavMeshLinkInstance::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkInstance), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkInstance::set_owner
// Il2CppName: set_owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkInstance::*)(::UnityEngine::Object*)>(&UnityEngine::AI::NavMeshLinkInstance::set_owner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkInstance), "set_owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
