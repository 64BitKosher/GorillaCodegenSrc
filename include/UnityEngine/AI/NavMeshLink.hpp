// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.AI.NavMeshLinkInstance
#include "UnityEngine/AI/NavMeshLinkInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshLink
  class NavMeshLink;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AI::NavMeshLink);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AI::NavMeshLink*, "UnityEngine.AI", "NavMeshLink");
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AI.NavMeshLink
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class NavMeshLink : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 m_AgentTypeID
    // Size: 0x4
    // Offset: 0x20
    int m_AgentTypeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 m_StartPoint
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 m_StartPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_EndPoint
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 m_EndPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_Width
    // Size: 0x4
    // Offset: 0x3C
    float m_Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_CostModifier
    // Size: 0x4
    // Offset: 0x40
    int m_CostModifier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_Bidirectional
    // Size: 0x1
    // Offset: 0x44
    bool m_Bidirectional;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AutoUpdatePosition
    // Size: 0x1
    // Offset: 0x45
    bool m_AutoUpdatePosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AutoUpdatePosition and: m_Area
    char __padding6[0x2] = {};
    // private System.Int32 m_Area
    // Size: 0x4
    // Offset: 0x48
    int m_Area;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.AI.NavMeshLinkInstance m_LinkInstance
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::AI::NavMeshLinkInstance m_LinkInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshLinkInstance) == 0x4);
    // private UnityEngine.Vector3 m_LastPosition
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 m_LastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_LastRotation
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Quaternion m_LastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.AI.NavMeshLink> s_Tracked
    static ::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshLink*>* _get_s_Tracked();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.AI.NavMeshLink> s_Tracked
    static void _set_s_Tracked(::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshLink*>* value);
    // Get instance field reference: private System.Int32 m_AgentTypeID
    [[deprecated("Use field access instead!")]] int& dyn_m_AgentTypeID();
    // Get instance field reference: private UnityEngine.Vector3 m_StartPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StartPoint();
    // Get instance field reference: private UnityEngine.Vector3 m_EndPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_EndPoint();
    // Get instance field reference: private System.Single m_Width
    [[deprecated("Use field access instead!")]] float& dyn_m_Width();
    // Get instance field reference: private System.Int32 m_CostModifier
    [[deprecated("Use field access instead!")]] int& dyn_m_CostModifier();
    // Get instance field reference: private System.Boolean m_Bidirectional
    [[deprecated("Use field access instead!")]] bool& dyn_m_Bidirectional();
    // Get instance field reference: private System.Boolean m_AutoUpdatePosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_AutoUpdatePosition();
    // Get instance field reference: private System.Int32 m_Area
    [[deprecated("Use field access instead!")]] int& dyn_m_Area();
    // Get instance field reference: private UnityEngine.AI.NavMeshLinkInstance m_LinkInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshLinkInstance& dyn_m_LinkInstance();
    // Get instance field reference: private UnityEngine.Vector3 m_LastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_LastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_LastRotation();
    // public System.Int32 get_agentTypeID()
    // Offset: 0x46E4644
    int get_agentTypeID();
    // public System.Void set_agentTypeID(System.Int32 value)
    // Offset: 0x46E464C
    void set_agentTypeID(int value);
    // public UnityEngine.Vector3 get_startPoint()
    // Offset: 0x46E4690
    ::UnityEngine::Vector3 get_startPoint();
    // public System.Void set_startPoint(UnityEngine.Vector3 value)
    // Offset: 0x46E469C
    void set_startPoint(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_endPoint()
    // Offset: 0x46E46C4
    ::UnityEngine::Vector3 get_endPoint();
    // public System.Void set_endPoint(UnityEngine.Vector3 value)
    // Offset: 0x46E46D0
    void set_endPoint(::UnityEngine::Vector3 value);
    // public System.Single get_width()
    // Offset: 0x46E46F8
    float get_width();
    // public System.Void set_width(System.Single value)
    // Offset: 0x46E4700
    void set_width(float value);
    // public System.Int32 get_costModifier()
    // Offset: 0x46E4724
    int get_costModifier();
    // public System.Void set_costModifier(System.Int32 value)
    // Offset: 0x46E472C
    void set_costModifier(int value);
    // public System.Boolean get_bidirectional()
    // Offset: 0x46E4750
    bool get_bidirectional();
    // public System.Void set_bidirectional(System.Boolean value)
    // Offset: 0x46E4758
    void set_bidirectional(bool value);
    // public System.Boolean get_autoUpdate()
    // Offset: 0x46E4780
    bool get_autoUpdate();
    // public System.Void set_autoUpdate(System.Boolean value)
    // Offset: 0x46E4788
    void set_autoUpdate(bool value);
    // public System.Int32 get_area()
    // Offset: 0x46E4828
    int get_area();
    // public System.Void set_area(System.Int32 value)
    // Offset: 0x46E4830
    void set_area(int value);
    // private System.Void OnEnable()
    // Offset: 0x46E4854
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x46E4C70
    void OnDisable();
    // public System.Void UpdateLink()
    // Offset: 0x46E4670
    void UpdateLink();
    // static private System.Void AddTracking(UnityEngine.AI.NavMeshLink link)
    // Offset: 0x46E4A8C
    static void AddTracking(::UnityEngine::AI::NavMeshLink* link);
    // static private System.Void RemoveTracking(UnityEngine.AI.NavMeshLink link)
    // Offset: 0x46E4CD0
    static void RemoveTracking(::UnityEngine::AI::NavMeshLink* link);
    // private System.Void SetAutoUpdate(System.Boolean value)
    // Offset: 0x46E4790
    void SetAutoUpdate(bool value);
    // private System.Void AddLink()
    // Offset: 0x46E48D4
    void AddLink();
    // private System.Boolean HasTransformChanged()
    // Offset: 0x46E4E50
    bool HasTransformChanged();
    // private System.Void OnDidApplyAnimationProperties()
    // Offset: 0x46E4F14
    void OnDidApplyAnimationProperties();
    // static private System.Void UpdateTrackedInstances()
    // Offset: 0x46E4F34
    static void UpdateTrackedInstances();
    // public System.Void .ctor()
    // Offset: 0x46E50C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshLink* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AI::NavMeshLink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshLink*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x46E5180
    static void _cctor();
  }; // UnityEngine.AI.NavMeshLink
  #pragma pack(pop)
  static check_size<sizeof(NavMeshLink), 92 + sizeof(::UnityEngine::Quaternion)> __UnityEngine_AI_NavMeshLinkSizeCheck;
  static_assert(sizeof(NavMeshLink) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_agentTypeID
// Il2CppName: get_agentTypeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_agentTypeID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_agentTypeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_agentTypeID
// Il2CppName: set_agentTypeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(int)>(&UnityEngine::AI::NavMeshLink::set_agentTypeID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_agentTypeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_startPoint
// Il2CppName: get_startPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_startPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_startPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_startPoint
// Il2CppName: set_startPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshLink::set_startPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_startPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_endPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_endPoint
// Il2CppName: set_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshLink::set_endPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(float)>(&UnityEngine::AI::NavMeshLink::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_costModifier
// Il2CppName: get_costModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_costModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_costModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_costModifier
// Il2CppName: set_costModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(int)>(&UnityEngine::AI::NavMeshLink::set_costModifier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_costModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_bidirectional
// Il2CppName: get_bidirectional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_bidirectional)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_bidirectional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_bidirectional
// Il2CppName: set_bidirectional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(bool)>(&UnityEngine::AI::NavMeshLink::set_bidirectional)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_bidirectional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_autoUpdate
// Il2CppName: get_autoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_autoUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_autoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_autoUpdate
// Il2CppName: set_autoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(bool)>(&UnityEngine::AI::NavMeshLink::set_autoUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_autoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::get_area
// Il2CppName: get_area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::get_area)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "get_area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::set_area
// Il2CppName: set_area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(int)>(&UnityEngine::AI::NavMeshLink::set_area)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "set_area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::UpdateLink
// Il2CppName: UpdateLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::UpdateLink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "UpdateLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::AddTracking
// Il2CppName: AddTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AI::NavMeshLink*)>(&UnityEngine::AI::NavMeshLink::AddTracking)> {
  static const MethodInfo* get() {
    static auto* link = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "AddTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{link});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::RemoveTracking
// Il2CppName: RemoveTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AI::NavMeshLink*)>(&UnityEngine::AI::NavMeshLink::RemoveTracking)> {
  static const MethodInfo* get() {
    static auto* link = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "RemoveTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{link});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::SetAutoUpdate
// Il2CppName: SetAutoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)(bool)>(&UnityEngine::AI::NavMeshLink::SetAutoUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "SetAutoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::AddLink
// Il2CppName: AddLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::AddLink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "AddLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::HasTransformChanged
// Il2CppName: HasTransformChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::HasTransformChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "HasTransformChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLink::*)()>(&UnityEngine::AI::NavMeshLink::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::UpdateTrackedInstances
// Il2CppName: UpdateTrackedInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::AI::NavMeshLink::UpdateTrackedInstances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), "UpdateTrackedInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLink::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::AI::NavMeshLink::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLink*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
