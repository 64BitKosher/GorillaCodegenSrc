// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshLinkData
  struct NavMeshLinkData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AI::NavMeshLinkData, "UnityEngine.AI", "NavMeshLinkData");
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AI.NavMeshLinkData
  // [TokenAttribute] Offset: FFFFFFFF
  struct NavMeshLinkData/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector3 m_StartPosition
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 m_StartPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_EndPosition
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 m_EndPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_CostModifier
    // Size: 0x4
    // Offset: 0x18
    float m_CostModifier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_Bidirectional
    // Size: 0x4
    // Offset: 0x1C
    int m_Bidirectional;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_Width
    // Size: 0x4
    // Offset: 0x20
    float m_Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_Area
    // Size: 0x4
    // Offset: 0x24
    int m_Area;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AgentTypeID
    // Size: 0x4
    // Offset: 0x28
    int m_AgentTypeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NavMeshLinkData
    constexpr NavMeshLinkData(::UnityEngine::Vector3 m_StartPosition_ = {}, ::UnityEngine::Vector3 m_EndPosition_ = {}, float m_CostModifier_ = {}, int m_Bidirectional_ = {}, float m_Width_ = {}, int m_Area_ = {}, int m_AgentTypeID_ = {}) noexcept : m_StartPosition{m_StartPosition_}, m_EndPosition{m_EndPosition_}, m_CostModifier{m_CostModifier_}, m_Bidirectional{m_Bidirectional_}, m_Width{m_Width_}, m_Area{m_Area_}, m_AgentTypeID{m_AgentTypeID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 m_StartPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StartPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_EndPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_EndPosition();
    // Get instance field reference: private System.Single m_CostModifier
    [[deprecated("Use field access instead!")]] float& dyn_m_CostModifier();
    // Get instance field reference: private System.Int32 m_Bidirectional
    [[deprecated("Use field access instead!")]] int& dyn_m_Bidirectional();
    // Get instance field reference: private System.Single m_Width
    [[deprecated("Use field access instead!")]] float& dyn_m_Width();
    // Get instance field reference: private System.Int32 m_Area
    [[deprecated("Use field access instead!")]] int& dyn_m_Area();
    // Get instance field reference: private System.Int32 m_AgentTypeID
    [[deprecated("Use field access instead!")]] int& dyn_m_AgentTypeID();
    // public System.Void set_startPosition(UnityEngine.Vector3 value)
    // Offset: 0x544EE6C
    void set_startPosition(::UnityEngine::Vector3 value);
    // public System.Void set_endPosition(UnityEngine.Vector3 value)
    // Offset: 0x544EE78
    void set_endPosition(::UnityEngine::Vector3 value);
    // public System.Void set_costModifier(System.Single value)
    // Offset: 0x544EE84
    void set_costModifier(float value);
    // public System.Void set_bidirectional(System.Boolean value)
    // Offset: 0x544EE8C
    void set_bidirectional(bool value);
    // public System.Void set_width(System.Single value)
    // Offset: 0x544EE98
    void set_width(float value);
    // public System.Void set_area(System.Int32 value)
    // Offset: 0x544EEA0
    void set_area(int value);
    // public System.Void set_agentTypeID(System.Int32 value)
    // Offset: 0x544EEA8
    void set_agentTypeID(int value);
  }; // UnityEngine.AI.NavMeshLinkData
  #pragma pack(pop)
  static check_size<sizeof(NavMeshLinkData), 40 + sizeof(int)> __UnityEngine_AI_NavMeshLinkDataSizeCheck;
  static_assert(sizeof(NavMeshLinkData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_startPosition
// Il2CppName: set_startPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshLinkData::set_startPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_startPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_endPosition
// Il2CppName: set_endPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshLinkData::set_endPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_endPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_costModifier
// Il2CppName: set_costModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(float)>(&UnityEngine::AI::NavMeshLinkData::set_costModifier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_costModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_bidirectional
// Il2CppName: set_bidirectional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(bool)>(&UnityEngine::AI::NavMeshLinkData::set_bidirectional)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_bidirectional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(float)>(&UnityEngine::AI::NavMeshLinkData::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_area
// Il2CppName: set_area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(int)>(&UnityEngine::AI::NavMeshLinkData::set_area)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshLinkData::set_agentTypeID
// Il2CppName: set_agentTypeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshLinkData::*)(int)>(&UnityEngine::AI::NavMeshLinkData::set_agentTypeID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshLinkData), "set_agentTypeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
