// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.AI.CollectObjects
#include "UnityEngine/AI/CollectObjects.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.AI.NavMeshCollectGeometry
#include "UnityEngine/AI/NavMeshCollectGeometry.hpp"
// Including type: UnityEngine.AI.NavMeshDataInstance
#include "UnityEngine/AI/NavMeshDataInstance.hpp"
// Including type: UnityEngine.AI.NavMeshBuildSource
#include "UnityEngine/AI/NavMeshBuildSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshData
  class NavMeshData;
  // Forward declaring type: NavMeshBuildSettings
  struct NavMeshBuildSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshSurface
  class NavMeshSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AI::NavMeshSurface);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AI::NavMeshSurface*, "UnityEngine.AI", "NavMeshSurface");
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AI.NavMeshSurface
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class NavMeshSurface : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::AI::NavMeshSurface::$$c
    class $$c;
    public:
    // private System.Int32 m_AgentTypeID
    // Size: 0x4
    // Offset: 0x20
    int m_AgentTypeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.AI.CollectObjects m_CollectObjects
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::AI::CollectObjects m_CollectObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::CollectObjects) == 0x4);
    // private UnityEngine.Vector3 m_Size
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_Size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_Center
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 m_Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.LayerMask m_LayerMask
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::LayerMask m_LayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.AI.NavMeshCollectGeometry m_UseGeometry
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::AI::NavMeshCollectGeometry m_UseGeometry;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshCollectGeometry) == 0x4);
    // private System.Int32 m_DefaultArea
    // Size: 0x4
    // Offset: 0x48
    int m_DefaultArea;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_IgnoreNavMeshAgent
    // Size: 0x1
    // Offset: 0x4C
    bool m_IgnoreNavMeshAgent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IgnoreNavMeshObstacle
    // Size: 0x1
    // Offset: 0x4D
    bool m_IgnoreNavMeshObstacle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_OverrideTileSize
    // Size: 0x1
    // Offset: 0x4E
    bool m_OverrideTileSize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OverrideTileSize and: m_TileSize
    char __padding9[0x1] = {};
    // private System.Int32 m_TileSize
    // Size: 0x4
    // Offset: 0x50
    int m_TileSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_OverrideVoxelSize
    // Size: 0x1
    // Offset: 0x54
    bool m_OverrideVoxelSize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OverrideVoxelSize and: m_VoxelSize
    char __padding11[0x3] = {};
    // private System.Single m_VoxelSize
    // Size: 0x4
    // Offset: 0x58
    float m_VoxelSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_BuildHeightMesh
    // Size: 0x1
    // Offset: 0x5C
    bool m_BuildHeightMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_BuildHeightMesh and: m_NavMeshData
    char __padding13[0x3] = {};
    // private UnityEngine.AI.NavMeshData m_NavMeshData
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AI::NavMeshData* m_NavMeshData;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshData*) == 0x8);
    // private UnityEngine.AI.NavMeshDataInstance m_NavMeshDataInstance
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::AI::NavMeshDataInstance m_NavMeshDataInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshDataInstance) == 0x4);
    // private UnityEngine.Vector3 m_LastPosition
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 m_LastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_LastRotation
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Quaternion m_LastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.AI.NavMeshSurface> s_NavMeshSurfaces
    static ::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshSurface*>* _get_s_NavMeshSurfaces();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.AI.NavMeshSurface> s_NavMeshSurfaces
    static void _set_s_NavMeshSurfaces(::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshSurface*>* value);
    // Get instance field reference: private System.Int32 m_AgentTypeID
    [[deprecated("Use field access instead!")]] int& dyn_m_AgentTypeID();
    // Get instance field reference: private UnityEngine.AI.CollectObjects m_CollectObjects
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::CollectObjects& dyn_m_CollectObjects();
    // Get instance field reference: private UnityEngine.Vector3 m_Size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Size();
    // Get instance field reference: private UnityEngine.Vector3 m_Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Center();
    // Get instance field reference: private UnityEngine.LayerMask m_LayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_LayerMask();
    // Get instance field reference: private UnityEngine.AI.NavMeshCollectGeometry m_UseGeometry
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshCollectGeometry& dyn_m_UseGeometry();
    // Get instance field reference: private System.Int32 m_DefaultArea
    [[deprecated("Use field access instead!")]] int& dyn_m_DefaultArea();
    // Get instance field reference: private System.Boolean m_IgnoreNavMeshAgent
    [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreNavMeshAgent();
    // Get instance field reference: private System.Boolean m_IgnoreNavMeshObstacle
    [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreNavMeshObstacle();
    // Get instance field reference: private System.Boolean m_OverrideTileSize
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverrideTileSize();
    // Get instance field reference: private System.Int32 m_TileSize
    [[deprecated("Use field access instead!")]] int& dyn_m_TileSize();
    // Get instance field reference: private System.Boolean m_OverrideVoxelSize
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverrideVoxelSize();
    // Get instance field reference: private System.Single m_VoxelSize
    [[deprecated("Use field access instead!")]] float& dyn_m_VoxelSize();
    // Get instance field reference: private System.Boolean m_BuildHeightMesh
    [[deprecated("Use field access instead!")]] bool& dyn_m_BuildHeightMesh();
    // Get instance field reference: private UnityEngine.AI.NavMeshData m_NavMeshData
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshData*& dyn_m_NavMeshData();
    // Get instance field reference: private UnityEngine.AI.NavMeshDataInstance m_NavMeshDataInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshDataInstance& dyn_m_NavMeshDataInstance();
    // Get instance field reference: private UnityEngine.Vector3 m_LastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_LastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_LastRotation();
    // public System.Int32 get_agentTypeID()
    // Offset: 0x46E5AC8
    int get_agentTypeID();
    // public System.Void set_agentTypeID(System.Int32 value)
    // Offset: 0x46E5AD0
    void set_agentTypeID(int value);
    // public UnityEngine.AI.CollectObjects get_collectObjects()
    // Offset: 0x46E5AD8
    ::UnityEngine::AI::CollectObjects get_collectObjects();
    // public System.Void set_collectObjects(UnityEngine.AI.CollectObjects value)
    // Offset: 0x46E5AE0
    void set_collectObjects(::UnityEngine::AI::CollectObjects value);
    // public UnityEngine.Vector3 get_size()
    // Offset: 0x46E5AE8
    ::UnityEngine::Vector3 get_size();
    // public System.Void set_size(UnityEngine.Vector3 value)
    // Offset: 0x46E5AF4
    void set_size(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_center()
    // Offset: 0x46E5B00
    ::UnityEngine::Vector3 get_center();
    // public System.Void set_center(UnityEngine.Vector3 value)
    // Offset: 0x46E5B0C
    void set_center(::UnityEngine::Vector3 value);
    // public UnityEngine.LayerMask get_layerMask()
    // Offset: 0x46E5B18
    ::UnityEngine::LayerMask get_layerMask();
    // public System.Void set_layerMask(UnityEngine.LayerMask value)
    // Offset: 0x46E5B20
    void set_layerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.AI.NavMeshCollectGeometry get_useGeometry()
    // Offset: 0x46E5B28
    ::UnityEngine::AI::NavMeshCollectGeometry get_useGeometry();
    // public System.Void set_useGeometry(UnityEngine.AI.NavMeshCollectGeometry value)
    // Offset: 0x46E5B30
    void set_useGeometry(::UnityEngine::AI::NavMeshCollectGeometry value);
    // public System.Int32 get_defaultArea()
    // Offset: 0x46E5B38
    int get_defaultArea();
    // public System.Void set_defaultArea(System.Int32 value)
    // Offset: 0x46E5B40
    void set_defaultArea(int value);
    // public System.Boolean get_ignoreNavMeshAgent()
    // Offset: 0x46E5B48
    bool get_ignoreNavMeshAgent();
    // public System.Void set_ignoreNavMeshAgent(System.Boolean value)
    // Offset: 0x46E5B50
    void set_ignoreNavMeshAgent(bool value);
    // public System.Boolean get_ignoreNavMeshObstacle()
    // Offset: 0x46E5B5C
    bool get_ignoreNavMeshObstacle();
    // public System.Void set_ignoreNavMeshObstacle(System.Boolean value)
    // Offset: 0x46E5B64
    void set_ignoreNavMeshObstacle(bool value);
    // public System.Boolean get_overrideTileSize()
    // Offset: 0x46E5B70
    bool get_overrideTileSize();
    // public System.Void set_overrideTileSize(System.Boolean value)
    // Offset: 0x46E5B78
    void set_overrideTileSize(bool value);
    // public System.Int32 get_tileSize()
    // Offset: 0x46E5B84
    int get_tileSize();
    // public System.Void set_tileSize(System.Int32 value)
    // Offset: 0x46E5B8C
    void set_tileSize(int value);
    // public System.Boolean get_overrideVoxelSize()
    // Offset: 0x46E5B94
    bool get_overrideVoxelSize();
    // public System.Void set_overrideVoxelSize(System.Boolean value)
    // Offset: 0x46E5B9C
    void set_overrideVoxelSize(bool value);
    // public System.Single get_voxelSize()
    // Offset: 0x46E5BA8
    float get_voxelSize();
    // public System.Void set_voxelSize(System.Single value)
    // Offset: 0x46E5BB0
    void set_voxelSize(float value);
    // public System.Boolean get_buildHeightMesh()
    // Offset: 0x46E5BB8
    bool get_buildHeightMesh();
    // public System.Void set_buildHeightMesh(System.Boolean value)
    // Offset: 0x46E5BC0
    void set_buildHeightMesh(bool value);
    // public UnityEngine.AI.NavMeshData get_navMeshData()
    // Offset: 0x46E5BCC
    ::UnityEngine::AI::NavMeshData* get_navMeshData();
    // public System.Void set_navMeshData(UnityEngine.AI.NavMeshData value)
    // Offset: 0x46E5BD4
    void set_navMeshData(::UnityEngine::AI::NavMeshData* value);
    // static public System.Collections.Generic.List`1<UnityEngine.AI.NavMeshSurface> get_activeSurfaces()
    // Offset: 0x46E5BDC
    static ::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshSurface*>* get_activeSurfaces();
    // private System.Void OnEnable()
    // Offset: 0x46E5C34
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x46E6028
    void OnDisable();
    // public System.Void AddData()
    // Offset: 0x46E5ECC
    void AddData();
    // public System.Void RemoveData()
    // Offset: 0x46E608C
    void RemoveData();
    // public UnityEngine.AI.NavMeshBuildSettings GetBuildSettings()
    // Offset: 0x46E622C
    ::UnityEngine::AI::NavMeshBuildSettings GetBuildSettings();
    // public System.Void BuildNavMesh()
    // Offset: 0x46E6398
    void BuildNavMesh();
    // public UnityEngine.AsyncOperation UpdateNavMesh(UnityEngine.AI.NavMeshData data)
    // Offset: 0x46E7644
    ::UnityEngine::AsyncOperation* UpdateNavMesh(::UnityEngine::AI::NavMeshData* data);
    // static private System.Void Register(UnityEngine.AI.NavMeshSurface surface)
    // Offset: 0x46E5C90
    static void Register(::UnityEngine::AI::NavMeshSurface* surface);
    // static private System.Void Unregister(UnityEngine.AI.NavMeshSurface surface)
    // Offset: 0x46E60AC
    static void Unregister(::UnityEngine::AI::NavMeshSurface* surface);
    // static private System.Void UpdateActive()
    // Offset: 0x46E7758
    static void UpdateActive();
    // private System.Void AppendModifierVolumes(ref System.Collections.Generic.List`1<UnityEngine.AI.NavMeshBuildSource> sources)
    // Offset: 0x46E7858
    void AppendModifierVolumes(ByRef<::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>*> sources);
    // private System.Collections.Generic.List`1<UnityEngine.AI.NavMeshBuildSource> CollectSources()
    // Offset: 0x46E65CC
    ::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>* CollectSources();
    // static private UnityEngine.Vector3 Abs(UnityEngine.Vector3 v)
    // Offset: 0x46E6E1C
    static ::UnityEngine::Vector3 Abs(::UnityEngine::Vector3 v);
    // static private UnityEngine.Bounds GetWorldBounds(UnityEngine.Matrix4x4 mat, UnityEngine.Bounds bounds)
    // Offset: 0x46E7E58
    static ::UnityEngine::Bounds GetWorldBounds(::UnityEngine::Matrix4x4 mat, ::UnityEngine::Bounds bounds);
    // private UnityEngine.Bounds CalculateWorldBounds(System.Collections.Generic.List`1<UnityEngine.AI.NavMeshBuildSource> sources)
    // Offset: 0x46E6E2C
    ::UnityEngine::Bounds CalculateWorldBounds(::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>* sources);
    // private System.Boolean HasTransformChanged()
    // Offset: 0x46E8050
    bool HasTransformChanged();
    // private System.Void UpdateDataIfTransformChanged()
    // Offset: 0x46E7824
    void UpdateDataIfTransformChanged();
    // public System.Void .ctor()
    // Offset: 0x46E8114
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AI::NavMeshSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshSurface*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x46E81E4
    static void _cctor();
  }; // UnityEngine.AI.NavMeshSurface
  #pragma pack(pop)
  static check_size<sizeof(NavMeshSurface), 120 + sizeof(::UnityEngine::Quaternion)> __UnityEngine_AI_NavMeshSurfaceSizeCheck;
  static_assert(sizeof(NavMeshSurface) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_agentTypeID
// Il2CppName: get_agentTypeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_agentTypeID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_agentTypeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_agentTypeID
// Il2CppName: set_agentTypeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(int)>(&UnityEngine::AI::NavMeshSurface::set_agentTypeID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_agentTypeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_collectObjects
// Il2CppName: get_collectObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AI::CollectObjects (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_collectObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_collectObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_collectObjects
// Il2CppName: set_collectObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::AI::CollectObjects)>(&UnityEngine::AI::NavMeshSurface::set_collectObjects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "CollectObjects")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_collectObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_size
// Il2CppName: get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_size
// Il2CppName: set_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshSurface::set_size)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_center
// Il2CppName: get_center
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_center)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_center
// Il2CppName: set_center
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshSurface::set_center)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_layerMask
// Il2CppName: get_layerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_layerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_layerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_layerMask
// Il2CppName: set_layerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::LayerMask)>(&UnityEngine::AI::NavMeshSurface::set_layerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_layerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_useGeometry
// Il2CppName: get_useGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AI::NavMeshCollectGeometry (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_useGeometry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_useGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_useGeometry
// Il2CppName: set_useGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::AI::NavMeshCollectGeometry)>(&UnityEngine::AI::NavMeshSurface::set_useGeometry)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshCollectGeometry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_useGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_defaultArea
// Il2CppName: get_defaultArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_defaultArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_defaultArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_defaultArea
// Il2CppName: set_defaultArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(int)>(&UnityEngine::AI::NavMeshSurface::set_defaultArea)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_defaultArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_ignoreNavMeshAgent
// Il2CppName: get_ignoreNavMeshAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_ignoreNavMeshAgent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_ignoreNavMeshAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_ignoreNavMeshAgent
// Il2CppName: set_ignoreNavMeshAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(bool)>(&UnityEngine::AI::NavMeshSurface::set_ignoreNavMeshAgent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_ignoreNavMeshAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_ignoreNavMeshObstacle
// Il2CppName: get_ignoreNavMeshObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_ignoreNavMeshObstacle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_ignoreNavMeshObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_ignoreNavMeshObstacle
// Il2CppName: set_ignoreNavMeshObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(bool)>(&UnityEngine::AI::NavMeshSurface::set_ignoreNavMeshObstacle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_ignoreNavMeshObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_overrideTileSize
// Il2CppName: get_overrideTileSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_overrideTileSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_overrideTileSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_overrideTileSize
// Il2CppName: set_overrideTileSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(bool)>(&UnityEngine::AI::NavMeshSurface::set_overrideTileSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_overrideTileSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_tileSize
// Il2CppName: get_tileSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_tileSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_tileSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_tileSize
// Il2CppName: set_tileSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(int)>(&UnityEngine::AI::NavMeshSurface::set_tileSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_tileSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_overrideVoxelSize
// Il2CppName: get_overrideVoxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_overrideVoxelSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_overrideVoxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_overrideVoxelSize
// Il2CppName: set_overrideVoxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(bool)>(&UnityEngine::AI::NavMeshSurface::set_overrideVoxelSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_overrideVoxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_voxelSize
// Il2CppName: get_voxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_voxelSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_voxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_voxelSize
// Il2CppName: set_voxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(float)>(&UnityEngine::AI::NavMeshSurface::set_voxelSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_voxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_buildHeightMesh
// Il2CppName: get_buildHeightMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_buildHeightMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_buildHeightMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_buildHeightMesh
// Il2CppName: set_buildHeightMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(bool)>(&UnityEngine::AI::NavMeshSurface::set_buildHeightMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_buildHeightMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_navMeshData
// Il2CppName: get_navMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AI::NavMeshData* (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::get_navMeshData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_navMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::set_navMeshData
// Il2CppName: set_navMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::AI::NavMeshData*)>(&UnityEngine::AI::NavMeshSurface::set_navMeshData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "set_navMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::get_activeSurfaces
// Il2CppName: get_activeSurfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshSurface*>* (*)()>(&UnityEngine::AI::NavMeshSurface::get_activeSurfaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "get_activeSurfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::AddData
// Il2CppName: AddData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::AddData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "AddData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::RemoveData
// Il2CppName: RemoveData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::RemoveData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "RemoveData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::GetBuildSettings
// Il2CppName: GetBuildSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AI::NavMeshBuildSettings (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::GetBuildSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "GetBuildSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::BuildNavMesh
// Il2CppName: BuildNavMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::BuildNavMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "BuildNavMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::UpdateNavMesh
// Il2CppName: UpdateNavMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AsyncOperation* (UnityEngine::AI::NavMeshSurface::*)(::UnityEngine::AI::NavMeshData*)>(&UnityEngine::AI::NavMeshSurface::UpdateNavMesh)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "UpdateNavMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AI::NavMeshSurface*)>(&UnityEngine::AI::NavMeshSurface::Register)> {
  static const MethodInfo* get() {
    static auto* surface = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshSurface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surface});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AI::NavMeshSurface*)>(&UnityEngine::AI::NavMeshSurface::Unregister)> {
  static const MethodInfo* get() {
    static auto* surface = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshSurface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surface});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::UpdateActive
// Il2CppName: UpdateActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::AI::NavMeshSurface::UpdateActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "UpdateActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::AppendModifierVolumes
// Il2CppName: AppendModifierVolumes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)(ByRef<::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>*>)>(&UnityEngine::AI::NavMeshSurface::AppendModifierVolumes)> {
  static const MethodInfo* get() {
    static auto* sources = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshBuildSource")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "AppendModifierVolumes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sources});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::CollectSources
// Il2CppName: CollectSources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>* (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::CollectSources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "CollectSources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshSurface::Abs)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::GetWorldBounds
// Il2CppName: GetWorldBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Bounds)>(&UnityEngine::AI::NavMeshSurface::GetWorldBounds)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "GetWorldBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, bounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::CalculateWorldBounds
// Il2CppName: CalculateWorldBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::AI::NavMeshSurface::*)(::System::Collections::Generic::List_1<::UnityEngine::AI::NavMeshBuildSource>*)>(&UnityEngine::AI::NavMeshSurface::CalculateWorldBounds)> {
  static const MethodInfo* get() {
    static auto* sources = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshBuildSource")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "CalculateWorldBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sources});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::HasTransformChanged
// Il2CppName: HasTransformChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::HasTransformChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "HasTransformChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::UpdateDataIfTransformChanged
// Il2CppName: UpdateDataIfTransformChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshSurface::*)()>(&UnityEngine::AI::NavMeshSurface::UpdateDataIfTransformChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), "UpdateDataIfTransformChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshSurface::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::AI::NavMeshSurface::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshSurface*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
