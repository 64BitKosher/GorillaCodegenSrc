// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshData
  class NavMeshData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AI::NavMeshData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AI::NavMeshData*, "UnityEngine.AI", "NavMeshData");
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AI.NavMeshData
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class NavMeshData : public ::UnityEngine::Object {
    public:
    // public System.Void .ctor(System.Int32 agentTypeID)
    // Offset: 0x544E698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshData* New_ctor(int agentTypeID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AI::NavMeshData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshData*, creationType>(agentTypeID)));
    }
    // static private System.Void Internal_Create(UnityEngine.AI.NavMeshData mono, System.Int32 agentTypeID)
    // Offset: 0x544EB34
    static void Internal_Create(::UnityEngine::AI::NavMeshData* mono, int agentTypeID);
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x544E728
    void set_position(::UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x544E77C
    void set_rotation(::UnityEngine::Quaternion value);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x544EB78
    void set_position_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x544EBBC
    void set_rotation_Injected(ByRef<::UnityEngine::Quaternion> value);
  }; // UnityEngine.AI.NavMeshData
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AI::NavMeshData*, int)>(&UnityEngine::AI::NavMeshData::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshData")->byval_arg;
    static auto* agentTypeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshData*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono, agentTypeID});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshData::*)(::UnityEngine::Vector3)>(&UnityEngine::AI::NavMeshData::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshData*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshData::*)(::UnityEngine::Quaternion)>(&UnityEngine::AI::NavMeshData::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshData*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::set_position_Injected
// Il2CppName: set_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshData::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::AI::NavMeshData::set_position_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshData*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AI::NavMeshData::set_rotation_Injected
// Il2CppName: set_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AI::NavMeshData::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::AI::NavMeshData::set_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AI::NavMeshData*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
