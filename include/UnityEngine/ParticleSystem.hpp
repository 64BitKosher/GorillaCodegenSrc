// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: Unity.Jobs.LowLevel.Unsafe.JobsUtility
#include "Unity/Jobs/LowLevel/Unsafe/JobsUtility.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: ParticleSystemSimulationSpace
  struct ParticleSystemSimulationSpace;
  // Forward declaring type: ParticleSystemScalingMode
  struct ParticleSystemScalingMode;
  // Forward declaring type: ParticleSystemCustomData
  struct ParticleSystemCustomData;
  // Forward declaring type: ParticleSystemStopBehavior
  struct ParticleSystemStopBehavior;
  // Skipping declaration: Particle because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Unity::Jobs
namespace Unity::Jobs {
  // Forward declaring type: JobHandle
  struct JobHandle;
}
// Forward declaring namespace: UnityEngine::ParticleSystemJobs
namespace UnityEngine::ParticleSystemJobs {
  // Forward declaring type: NativeParticleData
  struct NativeParticleData;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ParticleSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem*, "UnityEngine", "ParticleSystem");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ParticleSystem
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class ParticleSystem : public ::UnityEngine::Component {
    public:
    // Nested type: ::UnityEngine::ParticleSystem::MainModule
    struct MainModule;
    // Nested type: ::UnityEngine::ParticleSystem::EmissionModule
    struct EmissionModule;
    // Nested type: ::UnityEngine::ParticleSystem::ShapeModule
    struct ShapeModule;
    // Nested type: ::UnityEngine::ParticleSystem::CollisionModule
    struct CollisionModule;
    // Nested type: ::UnityEngine::ParticleSystem::TriggerModule
    struct TriggerModule;
    // Nested type: ::UnityEngine::ParticleSystem::SubEmittersModule
    struct SubEmittersModule;
    // Nested type: ::UnityEngine::ParticleSystem::TextureSheetAnimationModule
    struct TextureSheetAnimationModule;
    // Nested type: ::UnityEngine::ParticleSystem::Particle
    struct Particle;
    // Nested type: ::UnityEngine::ParticleSystem::Burst
    struct Burst;
    // Nested type: ::UnityEngine::ParticleSystem::MinMaxCurve
    struct MinMaxCurve;
    // Nested type: ::UnityEngine::ParticleSystem::MinMaxGradient
    struct MinMaxGradient;
    // Nested type: ::UnityEngine::ParticleSystem::EmitParams
    struct EmitParams;
    // Nested type: ::UnityEngine::ParticleSystem::PlaybackState
    struct PlaybackState;
    // Nested type: ::UnityEngine::ParticleSystem::Trails
    struct Trails;
    // Nested type: ::UnityEngine::ParticleSystem::VelocityOverLifetimeModule
    struct VelocityOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::LimitVelocityOverLifetimeModule
    struct LimitVelocityOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::InheritVelocityModule
    struct InheritVelocityModule;
    // Nested type: ::UnityEngine::ParticleSystem::LifetimeByEmitterSpeedModule
    struct LifetimeByEmitterSpeedModule;
    // Nested type: ::UnityEngine::ParticleSystem::ForceOverLifetimeModule
    struct ForceOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::ColorOverLifetimeModule
    struct ColorOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::ColorBySpeedModule
    struct ColorBySpeedModule;
    // Nested type: ::UnityEngine::ParticleSystem::SizeOverLifetimeModule
    struct SizeOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::SizeBySpeedModule
    struct SizeBySpeedModule;
    // Nested type: ::UnityEngine::ParticleSystem::RotationOverLifetimeModule
    struct RotationOverLifetimeModule;
    // Nested type: ::UnityEngine::ParticleSystem::RotationBySpeedModule
    struct RotationBySpeedModule;
    // Nested type: ::UnityEngine::ParticleSystem::ExternalForcesModule
    struct ExternalForcesModule;
    // Nested type: ::UnityEngine::ParticleSystem::NoiseModule
    struct NoiseModule;
    // Nested type: ::UnityEngine::ParticleSystem::LightsModule
    struct LightsModule;
    // Nested type: ::UnityEngine::ParticleSystem::TrailModule
    struct TrailModule;
    // Nested type: ::UnityEngine::ParticleSystem::CustomDataModule
    struct CustomDataModule;
    // Size: 0x84
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ParticleSystem/Particle
    // [TokenAttribute] Offset: FFFFFFFF
    // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
    struct Particle/*, public ::System::ValueType*/ {
      public:
      public:
      // private UnityEngine.Vector3 m_Position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 m_Position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_Velocity
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 m_Velocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_AnimatedVelocity
      // Size: 0xC
      // Offset: 0x18
      ::UnityEngine::Vector3 m_AnimatedVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_InitialVelocity
      // Size: 0xC
      // Offset: 0x24
      ::UnityEngine::Vector3 m_InitialVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_AxisOfRotation
      // Size: 0xC
      // Offset: 0x30
      ::UnityEngine::Vector3 m_AxisOfRotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_Rotation
      // Size: 0xC
      // Offset: 0x3C
      ::UnityEngine::Vector3 m_Rotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_AngularVelocity
      // Size: 0xC
      // Offset: 0x48
      ::UnityEngine::Vector3 m_AngularVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector3 m_StartSize
      // Size: 0xC
      // Offset: 0x54
      ::UnityEngine::Vector3 m_StartSize;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Color32 m_StartColor
      // Size: 0x4
      // Offset: 0x60
      ::UnityEngine::Color32 m_StartColor;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color32) == 0x4);
      // private System.UInt32 m_RandomSeed
      // Size: 0x4
      // Offset: 0x64
      uint m_RandomSeed;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // private System.UInt32 m_ParentRandomSeed
      // Size: 0x4
      // Offset: 0x68
      uint m_ParentRandomSeed;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // private System.Single m_Lifetime
      // Size: 0x4
      // Offset: 0x6C
      float m_Lifetime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single m_StartLifetime
      // Size: 0x4
      // Offset: 0x70
      float m_StartLifetime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Int32 m_MeshIndex
      // Size: 0x4
      // Offset: 0x74
      int m_MeshIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Single m_EmitAccumulator0
      // Size: 0x4
      // Offset: 0x78
      float m_EmitAccumulator0;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single m_EmitAccumulator1
      // Size: 0x4
      // Offset: 0x7C
      float m_EmitAccumulator1;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.UInt32 m_Flags
      // Size: 0x4
      // Offset: 0x80
      uint m_Flags;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: Particle
      constexpr Particle(::UnityEngine::Vector3 m_Position_ = {}, ::UnityEngine::Vector3 m_Velocity_ = {}, ::UnityEngine::Vector3 m_AnimatedVelocity_ = {}, ::UnityEngine::Vector3 m_InitialVelocity_ = {}, ::UnityEngine::Vector3 m_AxisOfRotation_ = {}, ::UnityEngine::Vector3 m_Rotation_ = {}, ::UnityEngine::Vector3 m_AngularVelocity_ = {}, ::UnityEngine::Vector3 m_StartSize_ = {}, ::UnityEngine::Color32 m_StartColor_ = {}, uint m_RandomSeed_ = {}, uint m_ParentRandomSeed_ = {}, float m_Lifetime_ = {}, float m_StartLifetime_ = {}, int m_MeshIndex_ = {}, float m_EmitAccumulator0_ = {}, float m_EmitAccumulator1_ = {}, uint m_Flags_ = {}) noexcept : m_Position{m_Position_}, m_Velocity{m_Velocity_}, m_AnimatedVelocity{m_AnimatedVelocity_}, m_InitialVelocity{m_InitialVelocity_}, m_AxisOfRotation{m_AxisOfRotation_}, m_Rotation{m_Rotation_}, m_AngularVelocity{m_AngularVelocity_}, m_StartSize{m_StartSize_}, m_StartColor{m_StartColor_}, m_RandomSeed{m_RandomSeed_}, m_ParentRandomSeed{m_ParentRandomSeed_}, m_Lifetime{m_Lifetime_}, m_StartLifetime{m_StartLifetime_}, m_MeshIndex{m_MeshIndex_}, m_EmitAccumulator0{m_EmitAccumulator0_}, m_EmitAccumulator1{m_EmitAccumulator1_}, m_Flags{m_Flags_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private UnityEngine.Vector3 m_Position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Position();
      // Get instance field reference: private UnityEngine.Vector3 m_Velocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Velocity();
      // Get instance field reference: private UnityEngine.Vector3 m_AnimatedVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_AnimatedVelocity();
      // Get instance field reference: private UnityEngine.Vector3 m_InitialVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InitialVelocity();
      // Get instance field reference: private UnityEngine.Vector3 m_AxisOfRotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_AxisOfRotation();
      // Get instance field reference: private UnityEngine.Vector3 m_Rotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Rotation();
      // Get instance field reference: private UnityEngine.Vector3 m_AngularVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_AngularVelocity();
      // Get instance field reference: private UnityEngine.Vector3 m_StartSize
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StartSize();
      // Get instance field reference: private UnityEngine.Color32 m_StartColor
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_StartColor();
      // Get instance field reference: private System.UInt32 m_RandomSeed
      [[deprecated("Use field access instead!")]] uint& dyn_m_RandomSeed();
      // Get instance field reference: private System.UInt32 m_ParentRandomSeed
      [[deprecated("Use field access instead!")]] uint& dyn_m_ParentRandomSeed();
      // Get instance field reference: private System.Single m_Lifetime
      [[deprecated("Use field access instead!")]] float& dyn_m_Lifetime();
      // Get instance field reference: private System.Single m_StartLifetime
      [[deprecated("Use field access instead!")]] float& dyn_m_StartLifetime();
      // Get instance field reference: private System.Int32 m_MeshIndex
      [[deprecated("Use field access instead!")]] int& dyn_m_MeshIndex();
      // Get instance field reference: private System.Single m_EmitAccumulator0
      [[deprecated("Use field access instead!")]] float& dyn_m_EmitAccumulator0();
      // Get instance field reference: private System.Single m_EmitAccumulator1
      [[deprecated("Use field access instead!")]] float& dyn_m_EmitAccumulator1();
      // Get instance field reference: private System.UInt32 m_Flags
      [[deprecated("Use field access instead!")]] uint& dyn_m_Flags();
      // public System.Void set_lifetime(System.Single value)
      // Offset: 0x551BDDC
      void set_lifetime(float value);
      // public UnityEngine.Vector3 get_position()
      // Offset: 0x5520B40
      ::UnityEngine::Vector3 get_position();
      // public System.Void set_position(UnityEngine.Vector3 value)
      // Offset: 0x551BDC4
      void set_position(::UnityEngine::Vector3 value);
      // public System.Void set_velocity(UnityEngine.Vector3 value)
      // Offset: 0x551BDD0
      void set_velocity(::UnityEngine::Vector3 value);
      // public System.Void set_remainingLifetime(System.Single value)
      // Offset: 0x5520B38
      void set_remainingLifetime(float value);
      // public System.Void set_startLifetime(System.Single value)
      // Offset: 0x551BDE4
      void set_startLifetime(float value);
      // public System.Void set_startColor(UnityEngine.Color32 value)
      // Offset: 0x551BE50
      void set_startColor(::UnityEngine::Color32 value);
      // public System.UInt32 get_randomSeed()
      // Offset: 0x5520B4C
      uint get_randomSeed();
      // public System.Void set_randomSeed(System.UInt32 value)
      // Offset: 0x551BE58
      void set_randomSeed(uint value);
      // public System.Void set_startSize(System.Single value)
      // Offset: 0x551BDEC
      void set_startSize(float value);
      // public System.Void set_rotation3D(UnityEngine.Vector3 value)
      // Offset: 0x551BDF8
      void set_rotation3D(::UnityEngine::Vector3 value);
      // public System.Void set_angularVelocity3D(UnityEngine.Vector3 value)
      // Offset: 0x551BE24
      void set_angularVelocity3D(::UnityEngine::Vector3 value);
    }; // UnityEngine.ParticleSystem/Particle
    #pragma pack(pop)
    static check_size<sizeof(ParticleSystem::Particle), 128 + sizeof(uint)> __UnityEngine_ParticleSystem_ParticleSizeCheck;
    static_assert(sizeof(ParticleSystem::Particle) == 0x84);
    // public System.Void Emit(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, System.Single size, System.Single lifetime, UnityEngine.Color32 color)
    // Offset: 0x551BCC0
    void Emit(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, float size, float lifetime, ::UnityEngine::Color32 color);
    // public System.Void Emit(UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551BEA4
    void Emit(::UnityEngine::ParticleSystem::Particle particle);
    // public System.Single get_startDelay()
    // Offset: 0x551BEE8
    float get_startDelay();
    // public System.Void set_startDelay(System.Single value)
    // Offset: 0x551BF98
    void set_startDelay(float value);
    // public System.Boolean get_loop()
    // Offset: 0x551C04C
    bool get_loop();
    // public System.Void set_loop(System.Boolean value)
    // Offset: 0x551C0E0
    void set_loop(bool value);
    // public System.Boolean get_playOnAwake()
    // Offset: 0x551C188
    bool get_playOnAwake();
    // public System.Void set_playOnAwake(System.Boolean value)
    // Offset: 0x551C21C
    void set_playOnAwake(bool value);
    // public System.Single get_duration()
    // Offset: 0x551C2C4
    float get_duration();
    // public System.Single get_playbackSpeed()
    // Offset: 0x551C354
    float get_playbackSpeed();
    // public System.Void set_playbackSpeed(System.Single value)
    // Offset: 0x551C3E4
    void set_playbackSpeed(float value);
    // public System.Boolean get_enableEmission()
    // Offset: 0x551C498
    bool get_enableEmission();
    // public System.Void set_enableEmission(System.Boolean value)
    // Offset: 0x551C54C
    void set_enableEmission(bool value);
    // public System.Single get_emissionRate()
    // Offset: 0x551C5F4
    float get_emissionRate();
    // public System.Void set_emissionRate(System.Single value)
    // Offset: 0x551C684
    void set_emissionRate(float value);
    // public System.Single get_startSpeed()
    // Offset: 0x551C7A8
    float get_startSpeed();
    // public System.Void set_startSpeed(System.Single value)
    // Offset: 0x551C838
    void set_startSpeed(float value);
    // public System.Single get_startSize()
    // Offset: 0x551C8EC
    float get_startSize();
    // public System.Void set_startSize(System.Single value)
    // Offset: 0x551C97C
    void set_startSize(float value);
    // public UnityEngine.Color get_startColor()
    // Offset: 0x551CA30
    ::UnityEngine::Color get_startColor();
    // public System.Void set_startColor(UnityEngine.Color value)
    // Offset: 0x551CB24
    void set_startColor(::UnityEngine::Color value);
    // public System.Single get_startRotation()
    // Offset: 0x551CC74
    float get_startRotation();
    // public System.Void set_startRotation(System.Single value)
    // Offset: 0x551CD04
    void set_startRotation(float value);
    // public UnityEngine.Vector3 get_startRotation3D()
    // Offset: 0x551CDB8
    ::UnityEngine::Vector3 get_startRotation3D();
    // public System.Void set_startRotation3D(UnityEngine.Vector3 value)
    // Offset: 0x551CF68
    void set_startRotation3D(::UnityEngine::Vector3 value);
    // public System.Single get_startLifetime()
    // Offset: 0x551D11C
    float get_startLifetime();
    // public System.Void set_startLifetime(System.Single value)
    // Offset: 0x551D1AC
    void set_startLifetime(float value);
    // public System.Single get_gravityModifier()
    // Offset: 0x551D260
    float get_gravityModifier();
    // public System.Void set_gravityModifier(System.Single value)
    // Offset: 0x551D2F0
    void set_gravityModifier(float value);
    // public System.Int32 get_maxParticles()
    // Offset: 0x551D3A4
    int get_maxParticles();
    // public System.Void set_maxParticles(System.Int32 value)
    // Offset: 0x551D434
    void set_maxParticles(int value);
    // public UnityEngine.ParticleSystemSimulationSpace get_simulationSpace()
    // Offset: 0x551D4DC
    ::UnityEngine::ParticleSystemSimulationSpace get_simulationSpace();
    // public System.Void set_simulationSpace(UnityEngine.ParticleSystemSimulationSpace value)
    // Offset: 0x551D56C
    void set_simulationSpace(::UnityEngine::ParticleSystemSimulationSpace value);
    // public UnityEngine.ParticleSystemScalingMode get_scalingMode()
    // Offset: 0x551D614
    ::UnityEngine::ParticleSystemScalingMode get_scalingMode();
    // public System.Void set_scalingMode(UnityEngine.ParticleSystemScalingMode value)
    // Offset: 0x551D6A4
    void set_scalingMode(::UnityEngine::ParticleSystemScalingMode value);
    // public System.Boolean get_automaticCullingEnabled()
    // Offset: 0x551D74C
    bool get_automaticCullingEnabled();
    // public System.Boolean get_isPlaying()
    // Offset: 0x551D7C4
    bool get_isPlaying();
    // public System.Boolean get_isEmitting()
    // Offset: 0x551D800
    bool get_isEmitting();
    // public System.Boolean get_isStopped()
    // Offset: 0x551D83C
    bool get_isStopped();
    // public System.Boolean get_isPaused()
    // Offset: 0x551D878
    bool get_isPaused();
    // public System.Int32 get_particleCount()
    // Offset: 0x551D8B4
    int get_particleCount();
    // public System.Single get_time()
    // Offset: 0x551D8F0
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x551D92C
    void set_time(float value);
    // public System.Single get_totalTime()
    // Offset: 0x551D978
    float get_totalTime();
    // public System.UInt32 get_randomSeed()
    // Offset: 0x551D9B4
    uint get_randomSeed();
    // public System.Void set_randomSeed(System.UInt32 value)
    // Offset: 0x551D9F0
    void set_randomSeed(uint value);
    // public System.Boolean get_useAutoRandomSeed()
    // Offset: 0x551DA34
    bool get_useAutoRandomSeed();
    // public System.Void set_useAutoRandomSeed(System.Boolean value)
    // Offset: 0x551DA70
    void set_useAutoRandomSeed(bool value);
    // public System.Boolean get_proceduralSimulationSupported()
    // Offset: 0x551D788
    bool get_proceduralSimulationSupported();
    // System.Single GetParticleCurrentSize(ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551DAB4
    float GetParticleCurrentSize(ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // UnityEngine.Vector3 GetParticleCurrentSize3D(ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551DAF8
    ::UnityEngine::Vector3 GetParticleCurrentSize3D(ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // UnityEngine.Color32 GetParticleCurrentColor(ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551DBB0
    ::UnityEngine::Color32 GetParticleCurrentColor(ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // System.Int32 GetParticleMeshIndex(ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551DC60
    int GetParticleMeshIndex(ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // public System.Void SetParticles(out UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x551DCA4
    void SetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles, int size, int offset);
    // public System.Void SetParticles(out UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size)
    // Offset: 0x551DD00
    void SetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles, int size);
    // public System.Void SetParticles(out UnityEngine.ParticleSystem/Particle[] particles)
    // Offset: 0x551DD58
    void SetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles);
    // private System.Void SetParticlesWithNativeArray(System.IntPtr particles, System.Int32 particlesLength, System.Int32 size, System.Int32 offset)
    // Offset: 0x551DDA4
    void SetParticlesWithNativeArray(::System::IntPtr particles, int particlesLength, int size, int offset);
    // public System.Void SetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x551DE10
    void SetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles, int size, int offset);
    // public System.Void SetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles, System.Int32 size)
    // Offset: 0x551DEC0
    void SetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles, int size);
    // public System.Void SetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles)
    // Offset: 0x551DEC8
    void SetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles);
    // public System.Int32 GetParticles(out UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x551DED4
    int GetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles, int size, int offset);
    // public System.Int32 GetParticles(out UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size)
    // Offset: 0x551DF30
    int GetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles, int size);
    // public System.Int32 GetParticles(out UnityEngine.ParticleSystem/Particle[] particles)
    // Offset: 0x551DF88
    int GetParticles(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>> particles);
    // private System.Int32 GetParticlesWithNativeArray(System.IntPtr particles, System.Int32 particlesLength, System.Int32 size, System.Int32 offset)
    // Offset: 0x551DFD4
    int GetParticlesWithNativeArray(::System::IntPtr particles, int particlesLength, int size, int offset);
    // public System.Int32 GetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x551E040
    int GetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles, int size, int offset);
    // public System.Int32 GetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles, System.Int32 size)
    // Offset: 0x551E0F0
    int GetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles, int size);
    // public System.Int32 GetParticles(out Unity.Collections.NativeArray`1<UnityEngine.ParticleSystem/Particle> particles)
    // Offset: 0x551E0F8
    int GetParticles(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>> particles);
    // public System.Void SetCustomParticleData(System.Collections.Generic.List`1<UnityEngine.Vector4> customData, UnityEngine.ParticleSystemCustomData streamIndex)
    // Offset: 0x551E104
    void SetCustomParticleData(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* customData, ::UnityEngine::ParticleSystemCustomData streamIndex);
    // public System.Int32 GetCustomParticleData(System.Collections.Generic.List`1<UnityEngine.Vector4> customData, UnityEngine.ParticleSystemCustomData streamIndex)
    // Offset: 0x551E158
    int GetCustomParticleData(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* customData, ::UnityEngine::ParticleSystemCustomData streamIndex);
    // public UnityEngine.ParticleSystem/PlaybackState GetPlaybackState()
    // Offset: 0x551E1AC
    ::UnityEngine::ParticleSystem::PlaybackState GetPlaybackState();
    // public System.Void SetPlaybackState(UnityEngine.ParticleSystem/PlaybackState playbackState)
    // Offset: 0x551E268
    void SetPlaybackState(::UnityEngine::ParticleSystem::PlaybackState playbackState);
    // private System.Void GetTrailDataInternal(ref UnityEngine.ParticleSystem/Trails trailData)
    // Offset: 0x551E2F0
    void GetTrailDataInternal(ByRef<::UnityEngine::ParticleSystem::Trails> trailData);
    // public UnityEngine.ParticleSystem/Trails GetTrails()
    // Offset: 0x551E334
    ::UnityEngine::ParticleSystem::Trails GetTrails();
    // public System.Int32 GetTrails(ref UnityEngine.ParticleSystem/Trails trailData)
    // Offset: 0x551E55C
    int GetTrails(ByRef<::UnityEngine::ParticleSystem::Trails> trailData);
    // public System.Void SetTrails(UnityEngine.ParticleSystem/Trails trailData)
    // Offset: 0x551E5DC
    void SetTrails(::UnityEngine::ParticleSystem::Trails trailData);
    // public System.Void Simulate(System.Single t, System.Boolean withChildren, System.Boolean restart, System.Boolean fixedTimeStep)
    // Offset: 0x551E664
    void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep);
    // public System.Void Simulate(System.Single t, System.Boolean withChildren, System.Boolean restart)
    // Offset: 0x551E6D0
    void Simulate(float t, bool withChildren, bool restart);
    // public System.Void Simulate(System.Single t, System.Boolean withChildren)
    // Offset: 0x551E738
    void Simulate(float t, bool withChildren);
    // public System.Void Simulate(System.Single t)
    // Offset: 0x551E794
    void Simulate(float t);
    // public System.Void Play(System.Boolean withChildren)
    // Offset: 0x551E7EC
    void Play(bool withChildren);
    // public System.Void Play()
    // Offset: 0x551E830
    void Play();
    // public System.Void Pause(System.Boolean withChildren)
    // Offset: 0x551E870
    void Pause(bool withChildren);
    // public System.Void Pause()
    // Offset: 0x551E8B4
    void Pause();
    // public System.Void Stop(System.Boolean withChildren, UnityEngine.ParticleSystemStopBehavior stopBehavior)
    // Offset: 0x551E8F4
    void Stop(bool withChildren, ::UnityEngine::ParticleSystemStopBehavior stopBehavior);
    // public System.Void Stop(System.Boolean withChildren)
    // Offset: 0x551E948
    void Stop(bool withChildren);
    // public System.Void Stop()
    // Offset: 0x551E990
    void Stop();
    // public System.Void Clear(System.Boolean withChildren)
    // Offset: 0x551E9D4
    void Clear(bool withChildren);
    // public System.Void Clear()
    // Offset: 0x551EA18
    void Clear();
    // public System.Boolean IsAlive(System.Boolean withChildren)
    // Offset: 0x551EA58
    bool IsAlive(bool withChildren);
    // public System.Boolean IsAlive()
    // Offset: 0x551EA9C
    bool IsAlive();
    // public System.Void Emit(System.Int32 count)
    // Offset: 0x551EADC
    void Emit(int count);
    // private System.Void Emit_Internal(System.Int32 count)
    // Offset: 0x551EB20
    void Emit_Internal(int count);
    // public System.Void Emit(UnityEngine.ParticleSystem/EmitParams emitParams, System.Int32 count)
    // Offset: 0x551EB64
    void Emit(::UnityEngine::ParticleSystem::EmitParams emitParams, int count);
    // private System.Void EmitOld_Internal(ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551BE60
    void EmitOld_Internal(ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // public System.Void TriggerSubEmitter(System.Int32 subEmitterIndex)
    // Offset: 0x551EC0C
    void TriggerSubEmitter(int subEmitterIndex);
    // public System.Void TriggerSubEmitter(System.Int32 subEmitterIndex, ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551ECA8
    void TriggerSubEmitter(int subEmitterIndex, ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // System.Void TriggerSubEmitterForParticle(System.Int32 subEmitterIndex, UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551ED10
    void TriggerSubEmitterForParticle(int subEmitterIndex, ::UnityEngine::ParticleSystem::Particle particle);
    // public System.Void TriggerSubEmitter(System.Int32 subEmitterIndex, System.Collections.Generic.List`1<UnityEngine.ParticleSystem/Particle> particles)
    // Offset: 0x551EC54
    void TriggerSubEmitter(int subEmitterIndex, ::System::Collections::Generic::List_1<::UnityEngine::ParticleSystem::Particle>* particles);
    // static public System.Void ResetPreMappedBufferMemory()
    // Offset: 0x551EDB8
    static void ResetPreMappedBufferMemory();
    // static public System.Void SetMaximumPreMappedBufferCounts(System.Int32 vertexBuffersCount, System.Int32 indexBuffersCount)
    // Offset: 0x551EDE0
    static void SetMaximumPreMappedBufferCounts(int vertexBuffersCount, int indexBuffersCount);
    // public System.Void AllocateAxisOfRotationAttribute()
    // Offset: 0x551EE24
    void AllocateAxisOfRotationAttribute();
    // public System.Void AllocateMeshIndexAttribute()
    // Offset: 0x551EE60
    void AllocateMeshIndexAttribute();
    // public System.Void AllocateCustomDataAttribute(UnityEngine.ParticleSystemCustomData stream)
    // Offset: 0x551EE9C
    void AllocateCustomDataAttribute(::UnityEngine::ParticleSystemCustomData stream);
    // System.Void* GetManagedJobData()
    // Offset: 0x551EEE0
    void* GetManagedJobData();
    // Unity.Jobs.JobHandle GetManagedJobHandle()
    // Offset: 0x551EF1C
    ::Unity::Jobs::JobHandle GetManagedJobHandle();
    // System.Void SetManagedJobHandle(Unity.Jobs.JobHandle handle)
    // Offset: 0x551EFB4
    void SetManagedJobHandle(::Unity::Jobs::JobHandle handle);
    // static Unity.Jobs.JobHandle ScheduleManagedJob(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters parameters, System.Void* additionalData)
    // Offset: 0x551F048
    static ::Unity::Jobs::JobHandle ScheduleManagedJob(ByRef<::Unity::Jobs::LowLevel::Unsafe::JobsUtility::JobScheduleParameters> parameters, void* additionalData);
    // static System.Void CopyManagedJobData(System.Void* systemPtr, out UnityEngine.ParticleSystemJobs.NativeParticleData particleData)
    // Offset: 0x551F0F8
    static void CopyManagedJobData(void* systemPtr, ByRef<::UnityEngine::ParticleSystemJobs::NativeParticleData> particleData);
    // public UnityEngine.ParticleSystem/MainModule get_main()
    // Offset: 0x551BF3C
    ::UnityEngine::ParticleSystem::MainModule get_main();
    // public UnityEngine.ParticleSystem/EmissionModule get_emission()
    // Offset: 0x551C4F0
    ::UnityEngine::ParticleSystem::EmissionModule get_emission();
    // public UnityEngine.ParticleSystem/ShapeModule get_shape()
    // Offset: 0x551F14C
    ::UnityEngine::ParticleSystem::ShapeModule get_shape();
    // public UnityEngine.ParticleSystem/VelocityOverLifetimeModule get_velocityOverLifetime()
    // Offset: 0x551F174
    ::UnityEngine::ParticleSystem::VelocityOverLifetimeModule get_velocityOverLifetime();
    // public UnityEngine.ParticleSystem/LimitVelocityOverLifetimeModule get_limitVelocityOverLifetime()
    // Offset: 0x551F19C
    ::UnityEngine::ParticleSystem::LimitVelocityOverLifetimeModule get_limitVelocityOverLifetime();
    // public UnityEngine.ParticleSystem/InheritVelocityModule get_inheritVelocity()
    // Offset: 0x551F1C4
    ::UnityEngine::ParticleSystem::InheritVelocityModule get_inheritVelocity();
    // public UnityEngine.ParticleSystem/LifetimeByEmitterSpeedModule get_lifetimeByEmitterSpeed()
    // Offset: 0x551F1EC
    ::UnityEngine::ParticleSystem::LifetimeByEmitterSpeedModule get_lifetimeByEmitterSpeed();
    // public UnityEngine.ParticleSystem/ForceOverLifetimeModule get_forceOverLifetime()
    // Offset: 0x551F214
    ::UnityEngine::ParticleSystem::ForceOverLifetimeModule get_forceOverLifetime();
    // public UnityEngine.ParticleSystem/ColorOverLifetimeModule get_colorOverLifetime()
    // Offset: 0x551F23C
    ::UnityEngine::ParticleSystem::ColorOverLifetimeModule get_colorOverLifetime();
    // public UnityEngine.ParticleSystem/ColorBySpeedModule get_colorBySpeed()
    // Offset: 0x551F264
    ::UnityEngine::ParticleSystem::ColorBySpeedModule get_colorBySpeed();
    // public UnityEngine.ParticleSystem/SizeOverLifetimeModule get_sizeOverLifetime()
    // Offset: 0x551F28C
    ::UnityEngine::ParticleSystem::SizeOverLifetimeModule get_sizeOverLifetime();
    // public UnityEngine.ParticleSystem/SizeBySpeedModule get_sizeBySpeed()
    // Offset: 0x551F2B4
    ::UnityEngine::ParticleSystem::SizeBySpeedModule get_sizeBySpeed();
    // public UnityEngine.ParticleSystem/RotationOverLifetimeModule get_rotationOverLifetime()
    // Offset: 0x551F2DC
    ::UnityEngine::ParticleSystem::RotationOverLifetimeModule get_rotationOverLifetime();
    // public UnityEngine.ParticleSystem/RotationBySpeedModule get_rotationBySpeed()
    // Offset: 0x551F304
    ::UnityEngine::ParticleSystem::RotationBySpeedModule get_rotationBySpeed();
    // public UnityEngine.ParticleSystem/ExternalForcesModule get_externalForces()
    // Offset: 0x551F32C
    ::UnityEngine::ParticleSystem::ExternalForcesModule get_externalForces();
    // public UnityEngine.ParticleSystem/NoiseModule get_noise()
    // Offset: 0x551F354
    ::UnityEngine::ParticleSystem::NoiseModule get_noise();
    // public UnityEngine.ParticleSystem/CollisionModule get_collision()
    // Offset: 0x551F37C
    ::UnityEngine::ParticleSystem::CollisionModule get_collision();
    // public UnityEngine.ParticleSystem/TriggerModule get_trigger()
    // Offset: 0x551F3A4
    ::UnityEngine::ParticleSystem::TriggerModule get_trigger();
    // public UnityEngine.ParticleSystem/SubEmittersModule get_subEmitters()
    // Offset: 0x551F3CC
    ::UnityEngine::ParticleSystem::SubEmittersModule get_subEmitters();
    // public UnityEngine.ParticleSystem/TextureSheetAnimationModule get_textureSheetAnimation()
    // Offset: 0x551F3F4
    ::UnityEngine::ParticleSystem::TextureSheetAnimationModule get_textureSheetAnimation();
    // public UnityEngine.ParticleSystem/LightsModule get_lights()
    // Offset: 0x551F41C
    ::UnityEngine::ParticleSystem::LightsModule get_lights();
    // public UnityEngine.ParticleSystem/TrailModule get_trails()
    // Offset: 0x551F444
    ::UnityEngine::ParticleSystem::TrailModule get_trails();
    // public UnityEngine.ParticleSystem/CustomDataModule get_customData()
    // Offset: 0x551F46C
    ::UnityEngine::ParticleSystem::CustomDataModule get_customData();
    // public System.Void .ctor()
    // Offset: 0x551F494
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ParticleSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleSystem*, creationType>()));
    }
    // private System.Void GetParticleCurrentSize3D_Injected(ref UnityEngine.ParticleSystem/Particle particle, out UnityEngine.Vector3 ret)
    // Offset: 0x551DB5C
    void GetParticleCurrentSize3D_Injected(ByRef<::UnityEngine::ParticleSystem::Particle> particle, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void GetParticleCurrentColor_Injected(ref UnityEngine.ParticleSystem/Particle particle, out UnityEngine.Color32 ret)
    // Offset: 0x551DC0C
    void GetParticleCurrentColor_Injected(ByRef<::UnityEngine::ParticleSystem::Particle> particle, ByRef<::UnityEngine::Color32> ret);
    // private System.Void GetPlaybackState_Injected(out UnityEngine.ParticleSystem/PlaybackState ret)
    // Offset: 0x551E224
    void GetPlaybackState_Injected(ByRef<::UnityEngine::ParticleSystem::PlaybackState> ret);
    // private System.Void SetPlaybackState_Injected(ref UnityEngine.ParticleSystem/PlaybackState playbackState)
    // Offset: 0x551E2AC
    void SetPlaybackState_Injected(ByRef<::UnityEngine::ParticleSystem::PlaybackState> playbackState);
    // private System.Void SetTrails_Injected(ref UnityEngine.ParticleSystem/Trails trailData)
    // Offset: 0x551E620
    void SetTrails_Injected(ByRef<::UnityEngine::ParticleSystem::Trails> trailData);
    // private System.Void Emit_Injected(ref UnityEngine.ParticleSystem/EmitParams emitParams, System.Int32 count)
    // Offset: 0x551EBB8
    void Emit_Injected(ByRef<::UnityEngine::ParticleSystem::EmitParams> emitParams, int count);
    // private System.Void TriggerSubEmitterForParticle_Injected(System.Int32 subEmitterIndex, ref UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x551ED64
    void TriggerSubEmitterForParticle_Injected(int subEmitterIndex, ByRef<::UnityEngine::ParticleSystem::Particle> particle);
    // private System.Void GetManagedJobHandle_Injected(out Unity.Jobs.JobHandle ret)
    // Offset: 0x551EF70
    void GetManagedJobHandle_Injected(ByRef<::Unity::Jobs::JobHandle> ret);
    // private System.Void SetManagedJobHandle_Injected(ref Unity.Jobs.JobHandle handle)
    // Offset: 0x551F004
    void SetManagedJobHandle_Injected(ByRef<::Unity::Jobs::JobHandle> handle);
    // static private System.Void ScheduleManagedJob_Injected(ref Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters parameters, System.Void* additionalData, out Unity.Jobs.JobHandle ret)
    // Offset: 0x551F0A4
    static void ScheduleManagedJob_Injected(ByRef<::Unity::Jobs::LowLevel::Unsafe::JobsUtility::JobScheduleParameters> parameters, void* additionalData, ByRef<::Unity::Jobs::JobHandle> ret);
  }; // UnityEngine.ParticleSystem
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::Particle, "UnityEngine", "ParticleSystem/Particle");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ::UnityEngine::Color32)>(&UnityEngine::ParticleSystem::Emit)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity, size, lifetime, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystem::Particle)>(&UnityEngine::ParticleSystem::Emit)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startDelay
// Il2CppName: get_startDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startDelay
// Il2CppName: set_startDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_startDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_loop
// Il2CppName: get_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::set_loop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_playOnAwake
// Il2CppName: get_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_playOnAwake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_playOnAwake
// Il2CppName: set_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::set_playOnAwake)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_playbackSpeed
// Il2CppName: get_playbackSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_playbackSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_playbackSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_playbackSpeed
// Il2CppName: set_playbackSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_playbackSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_playbackSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_enableEmission
// Il2CppName: get_enableEmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_enableEmission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_enableEmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_enableEmission
// Il2CppName: set_enableEmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::set_enableEmission)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_enableEmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_emissionRate
// Il2CppName: get_emissionRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_emissionRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_emissionRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_emissionRate
// Il2CppName: set_emissionRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_emissionRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_emissionRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startSpeed
// Il2CppName: get_startSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startSpeed
// Il2CppName: set_startSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_startSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startSize
// Il2CppName: get_startSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startSize
// Il2CppName: set_startSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_startSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startColor
// Il2CppName: get_startColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startColor
// Il2CppName: set_startColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::Color)>(&UnityEngine::ParticleSystem::set_startColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startRotation
// Il2CppName: get_startRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startRotation
// Il2CppName: set_startRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_startRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startRotation3D
// Il2CppName: get_startRotation3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startRotation3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startRotation3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startRotation3D
// Il2CppName: set_startRotation3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::set_startRotation3D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startRotation3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_startLifetime
// Il2CppName: get_startLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_startLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_startLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_startLifetime
// Il2CppName: set_startLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_startLifetime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_startLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_gravityModifier
// Il2CppName: get_gravityModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_gravityModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_gravityModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_gravityModifier
// Il2CppName: set_gravityModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_gravityModifier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_gravityModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_maxParticles
// Il2CppName: get_maxParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_maxParticles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_maxParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_maxParticles
// Il2CppName: set_maxParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int)>(&UnityEngine::ParticleSystem::set_maxParticles)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_maxParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_simulationSpace
// Il2CppName: get_simulationSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemSimulationSpace (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_simulationSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_simulationSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_simulationSpace
// Il2CppName: set_simulationSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystemSimulationSpace)>(&UnityEngine::ParticleSystem::set_simulationSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemSimulationSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_simulationSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_scalingMode
// Il2CppName: get_scalingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemScalingMode (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_scalingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_scalingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_scalingMode
// Il2CppName: set_scalingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystemScalingMode)>(&UnityEngine::ParticleSystem::set_scalingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemScalingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_scalingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_automaticCullingEnabled
// Il2CppName: get_automaticCullingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_automaticCullingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_automaticCullingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_isPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_isEmitting
// Il2CppName: get_isEmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_isEmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_isEmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_isStopped
// Il2CppName: get_isStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_isStopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_isStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_isPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_particleCount
// Il2CppName: get_particleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_particleCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_particleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::set_time)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_totalTime
// Il2CppName: get_totalTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_totalTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_totalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_randomSeed
// Il2CppName: get_randomSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_randomSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_randomSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_randomSeed
// Il2CppName: set_randomSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(uint)>(&UnityEngine::ParticleSystem::set_randomSeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_randomSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_useAutoRandomSeed
// Il2CppName: get_useAutoRandomSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_useAutoRandomSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_useAutoRandomSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::set_useAutoRandomSeed
// Il2CppName: set_useAutoRandomSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::set_useAutoRandomSeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "set_useAutoRandomSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_proceduralSimulationSupported
// Il2CppName: get_proceduralSimulationSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_proceduralSimulationSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_proceduralSimulationSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleCurrentSize
// Il2CppName: GetParticleCurrentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::GetParticleCurrentSize)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleCurrentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleCurrentSize3D
// Il2CppName: GetParticleCurrentSize3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::GetParticleCurrentSize3D)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleCurrentSize3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleCurrentColor
// Il2CppName: GetParticleCurrentColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::GetParticleCurrentColor)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleCurrentColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleMeshIndex
// Il2CppName: GetParticleMeshIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::GetParticleMeshIndex)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleMeshIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>, int, int)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>, int)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticlesWithNativeArray
// Il2CppName: SetParticlesWithNativeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::System::IntPtr, int, int, int)>(&UnityEngine::ParticleSystem::SetParticlesWithNativeArray)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* particlesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticlesWithNativeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, particlesLength, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>, int, int)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>, int)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetParticles
// Il2CppName: SetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>)>(&UnityEngine::ParticleSystem::SetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>, int, int)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>, int)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::ArrayW<::UnityEngine::ParticleSystem::Particle>>)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticlesWithNativeArray
// Il2CppName: GetParticlesWithNativeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(::System::IntPtr, int, int, int)>(&UnityEngine::ParticleSystem::GetParticlesWithNativeArray)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* particlesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticlesWithNativeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, particlesLength, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>, int, int)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>, int)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticles
// Il2CppName: GetParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::ParticleSystem::Particle>>)>(&UnityEngine::ParticleSystem::GetParticles)> {
  static const MethodInfo* get() {
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particles});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetCustomParticleData
// Il2CppName: SetCustomParticleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, ::UnityEngine::ParticleSystemCustomData)>(&UnityEngine::ParticleSystem::SetCustomParticleData)> {
  static const MethodInfo* get() {
    static auto* customData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* streamIndex = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemCustomData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetCustomParticleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customData, streamIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetCustomParticleData
// Il2CppName: GetCustomParticleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, ::UnityEngine::ParticleSystemCustomData)>(&UnityEngine::ParticleSystem::GetCustomParticleData)> {
  static const MethodInfo* get() {
    static auto* customData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* streamIndex = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemCustomData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetCustomParticleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customData, streamIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetPlaybackState
// Il2CppName: GetPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::PlaybackState (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::GetPlaybackState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetPlaybackState
// Il2CppName: SetPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystem::PlaybackState)>(&UnityEngine::ParticleSystem::SetPlaybackState)> {
  static const MethodInfo* get() {
    static auto* playbackState = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/PlaybackState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackState});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetTrailDataInternal
// Il2CppName: GetTrailDataInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Trails>)>(&UnityEngine::ParticleSystem::GetTrailDataInternal)> {
  static const MethodInfo* get() {
    static auto* trailData = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Trails")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetTrailDataInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetTrails
// Il2CppName: GetTrails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::Trails (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::GetTrails)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetTrails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetTrails
// Il2CppName: GetTrails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Trails>)>(&UnityEngine::ParticleSystem::GetTrails)> {
  static const MethodInfo* get() {
    static auto* trailData = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Trails")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetTrails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetTrails
// Il2CppName: SetTrails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystem::Trails)>(&UnityEngine::ParticleSystem::SetTrails)> {
  static const MethodInfo* get() {
    static auto* trailData = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Trails")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetTrails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float, bool, bool, bool)>(&UnityEngine::ParticleSystem::Simulate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* restart = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fixedTimeStep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, withChildren, restart, fixedTimeStep});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float, bool, bool)>(&UnityEngine::ParticleSystem::Simulate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* restart = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, withChildren, restart});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float, bool)>(&UnityEngine::ParticleSystem::Simulate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(float)>(&UnityEngine::ParticleSystem::Simulate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::Play)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::Pause)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool, ::UnityEngine::ParticleSystemStopBehavior)>(&UnityEngine::ParticleSystem::Stop)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stopBehavior = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemStopBehavior")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren, stopBehavior});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::Stop)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::Clear)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::IsAlive
// Il2CppName: IsAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)(bool)>(&UnityEngine::ParticleSystem::IsAlive)> {
  static const MethodInfo* get() {
    static auto* withChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "IsAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::IsAlive
// Il2CppName: IsAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::IsAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "IsAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int)>(&UnityEngine::ParticleSystem::Emit)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit_Internal
// Il2CppName: Emit_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int)>(&UnityEngine::ParticleSystem::Emit_Internal)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystem::EmitParams, int)>(&UnityEngine::ParticleSystem::Emit)> {
  static const MethodInfo* get() {
    static auto* emitParams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/EmitParams")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emitParams, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::EmitOld_Internal
// Il2CppName: EmitOld_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::EmitOld_Internal)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "EmitOld_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerSubEmitter
// Il2CppName: TriggerSubEmitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int)>(&UnityEngine::ParticleSystem::TriggerSubEmitter)> {
  static const MethodInfo* get() {
    static auto* subEmitterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "TriggerSubEmitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subEmitterIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerSubEmitter
// Il2CppName: TriggerSubEmitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int, ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::TriggerSubEmitter)> {
  static const MethodInfo* get() {
    static auto* subEmitterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "TriggerSubEmitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subEmitterIndex, particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerSubEmitterForParticle
// Il2CppName: TriggerSubEmitterForParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int, ::UnityEngine::ParticleSystem::Particle)>(&UnityEngine::ParticleSystem::TriggerSubEmitterForParticle)> {
  static const MethodInfo* get() {
    static auto* subEmitterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "TriggerSubEmitterForParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subEmitterIndex, particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerSubEmitter
// Il2CppName: TriggerSubEmitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::ParticleSystem::Particle>*)>(&UnityEngine::ParticleSystem::TriggerSubEmitter)> {
  static const MethodInfo* get() {
    static auto* subEmitterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* particles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "TriggerSubEmitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subEmitterIndex, particles});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ResetPreMappedBufferMemory
// Il2CppName: ResetPreMappedBufferMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::ParticleSystem::ResetPreMappedBufferMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "ResetPreMappedBufferMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetMaximumPreMappedBufferCounts
// Il2CppName: SetMaximumPreMappedBufferCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&UnityEngine::ParticleSystem::SetMaximumPreMappedBufferCounts)> {
  static const MethodInfo* get() {
    static auto* vertexBuffersCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexBuffersCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetMaximumPreMappedBufferCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexBuffersCount, indexBuffersCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::AllocateAxisOfRotationAttribute
// Il2CppName: AllocateAxisOfRotationAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::AllocateAxisOfRotationAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "AllocateAxisOfRotationAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::AllocateMeshIndexAttribute
// Il2CppName: AllocateMeshIndexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::AllocateMeshIndexAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "AllocateMeshIndexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::AllocateCustomDataAttribute
// Il2CppName: AllocateCustomDataAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::UnityEngine::ParticleSystemCustomData)>(&UnityEngine::ParticleSystem::AllocateCustomDataAttribute)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemCustomData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "AllocateCustomDataAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetManagedJobData
// Il2CppName: GetManagedJobData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::GetManagedJobData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetManagedJobData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetManagedJobHandle
// Il2CppName: GetManagedJobHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::GetManagedJobHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetManagedJobHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetManagedJobHandle
// Il2CppName: SetManagedJobHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(::Unity::Jobs::JobHandle)>(&UnityEngine::ParticleSystem::SetManagedJobHandle)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetManagedJobHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ScheduleManagedJob
// Il2CppName: ScheduleManagedJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(ByRef<::Unity::Jobs::LowLevel::Unsafe::JobsUtility::JobScheduleParameters>, void*)>(&UnityEngine::ParticleSystem::ScheduleManagedJob)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("Unity.Jobs.LowLevel.Unsafe", "JobsUtility/JobScheduleParameters")->this_arg;
    static auto* additionalData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "ScheduleManagedJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters, additionalData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::CopyManagedJobData
// Il2CppName: CopyManagedJobData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, ByRef<::UnityEngine::ParticleSystemJobs::NativeParticleData>)>(&UnityEngine::ParticleSystem::CopyManagedJobData)> {
  static const MethodInfo* get() {
    static auto* systemPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* particleData = &::il2cpp_utils::GetClassFromName("UnityEngine.ParticleSystemJobs", "NativeParticleData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "CopyManagedJobData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemPtr, particleData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_main
// Il2CppName: get_main
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MainModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_main)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_main", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_emission
// Il2CppName: get_emission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::EmissionModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_emission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_emission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_shape
// Il2CppName: get_shape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::ShapeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_shape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_shape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_velocityOverLifetime
// Il2CppName: get_velocityOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::VelocityOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_velocityOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_velocityOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_limitVelocityOverLifetime
// Il2CppName: get_limitVelocityOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::LimitVelocityOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_limitVelocityOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_limitVelocityOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_inheritVelocity
// Il2CppName: get_inheritVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::InheritVelocityModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_inheritVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_inheritVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_lifetimeByEmitterSpeed
// Il2CppName: get_lifetimeByEmitterSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::LifetimeByEmitterSpeedModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_lifetimeByEmitterSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_lifetimeByEmitterSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_forceOverLifetime
// Il2CppName: get_forceOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::ForceOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_forceOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_forceOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_colorOverLifetime
// Il2CppName: get_colorOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::ColorOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_colorOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_colorOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_colorBySpeed
// Il2CppName: get_colorBySpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::ColorBySpeedModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_colorBySpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_colorBySpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_sizeOverLifetime
// Il2CppName: get_sizeOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::SizeOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_sizeOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_sizeOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_sizeBySpeed
// Il2CppName: get_sizeBySpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::SizeBySpeedModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_sizeBySpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_sizeBySpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_rotationOverLifetime
// Il2CppName: get_rotationOverLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::RotationOverLifetimeModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_rotationOverLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_rotationOverLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_rotationBySpeed
// Il2CppName: get_rotationBySpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::RotationBySpeedModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_rotationBySpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_rotationBySpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_externalForces
// Il2CppName: get_externalForces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::ExternalForcesModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_externalForces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_externalForces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_noise
// Il2CppName: get_noise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::NoiseModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_noise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_noise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_collision
// Il2CppName: get_collision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::CollisionModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_collision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_collision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_trigger
// Il2CppName: get_trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::TriggerModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_trigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_subEmitters
// Il2CppName: get_subEmitters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::SubEmittersModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_subEmitters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_subEmitters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_textureSheetAnimation
// Il2CppName: get_textureSheetAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::TextureSheetAnimationModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_textureSheetAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_textureSheetAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_lights
// Il2CppName: get_lights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::LightsModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_lights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_lights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_trails
// Il2CppName: get_trails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::TrailModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_trails)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_trails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::get_customData
// Il2CppName: get_customData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::CustomDataModule (UnityEngine::ParticleSystem::*)()>(&UnityEngine::ParticleSystem::get_customData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "get_customData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleCurrentSize3D_Injected
// Il2CppName: GetParticleCurrentSize3D_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystem::GetParticleCurrentSize3D_Injected)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleCurrentSize3D_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetParticleCurrentColor_Injected
// Il2CppName: GetParticleCurrentColor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Particle>, ByRef<::UnityEngine::Color32>)>(&UnityEngine::ParticleSystem::GetParticleCurrentColor_Injected)> {
  static const MethodInfo* get() {
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetParticleCurrentColor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{particle, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetPlaybackState_Injected
// Il2CppName: GetPlaybackState_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::PlaybackState>)>(&UnityEngine::ParticleSystem::GetPlaybackState_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/PlaybackState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetPlaybackState_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetPlaybackState_Injected
// Il2CppName: SetPlaybackState_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::PlaybackState>)>(&UnityEngine::ParticleSystem::SetPlaybackState_Injected)> {
  static const MethodInfo* get() {
    static auto* playbackState = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/PlaybackState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetPlaybackState_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackState});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetTrails_Injected
// Il2CppName: SetTrails_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::Trails>)>(&UnityEngine::ParticleSystem::SetTrails_Injected)> {
  static const MethodInfo* get() {
    static auto* trailData = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Trails")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetTrails_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Emit_Injected
// Il2CppName: Emit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::UnityEngine::ParticleSystem::EmitParams>, int)>(&UnityEngine::ParticleSystem::Emit_Injected)> {
  static const MethodInfo* get() {
    static auto* emitParams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/EmitParams")->this_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "Emit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emitParams, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerSubEmitterForParticle_Injected
// Il2CppName: TriggerSubEmitterForParticle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(int, ByRef<::UnityEngine::ParticleSystem::Particle>)>(&UnityEngine::ParticleSystem::TriggerSubEmitterForParticle_Injected)> {
  static const MethodInfo* get() {
    static auto* subEmitterIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* particle = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Particle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "TriggerSubEmitterForParticle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subEmitterIndex, particle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::GetManagedJobHandle_Injected
// Il2CppName: GetManagedJobHandle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Jobs::JobHandle>)>(&UnityEngine::ParticleSystem::GetManagedJobHandle_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "GetManagedJobHandle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::SetManagedJobHandle_Injected
// Il2CppName: SetManagedJobHandle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::*)(ByRef<::Unity::Jobs::JobHandle>)>(&UnityEngine::ParticleSystem::SetManagedJobHandle_Injected)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "SetManagedJobHandle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ScheduleManagedJob_Injected
// Il2CppName: ScheduleManagedJob_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Jobs::LowLevel::Unsafe::JobsUtility::JobScheduleParameters>, void*, ByRef<::Unity::Jobs::JobHandle>)>(&UnityEngine::ParticleSystem::ScheduleManagedJob_Injected)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("Unity.Jobs.LowLevel.Unsafe", "JobsUtility/JobScheduleParameters")->this_arg;
    static auto* additionalData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem*), "ScheduleManagedJob_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters, additionalData, ret});
  }
};
