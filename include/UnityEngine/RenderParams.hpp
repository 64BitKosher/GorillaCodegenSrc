// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.MotionVectorGenerationMode
#include "UnityEngine/MotionVectorGenerationMode.hpp"
// Including type: UnityEngine.Rendering.ReflectionProbeUsage
#include "UnityEngine/Rendering/ReflectionProbeUsage.hpp"
// Including type: UnityEngine.Rendering.ShadowCastingMode
#include "UnityEngine/Rendering/ShadowCastingMode.hpp"
// Including type: UnityEngine.Rendering.LightProbeUsage
#include "UnityEngine/Rendering/LightProbeUsage.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: LightProbeProxyVolume
  class LightProbeProxyVolume;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderParams
  struct RenderParams;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::RenderParams, "UnityEngine", "RenderParams");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.RenderParams
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderParams/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 <layer>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int layer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 <renderingLayerMask>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    uint renderingLayerMask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 <rendererPriority>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int rendererPriority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Bounds <worldBounds>k__BackingField
    // Size: 0x18
    // Offset: 0xC
    ::UnityEngine::Bounds worldBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // Padding between fields: worldBounds and: camera
    char __padding3[0x4] = {};
    // private UnityEngine.Camera <camera>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.MotionVectorGenerationMode <motionVectorMode>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::MotionVectorGenerationMode motionVectorMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::MotionVectorGenerationMode) == 0x4);
    // private UnityEngine.Rendering.ReflectionProbeUsage <reflectionProbeUsage>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::Rendering::ReflectionProbeUsage reflectionProbeUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ReflectionProbeUsage) == 0x4);
    // private UnityEngine.Material <material>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock <matProps>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MaterialPropertyBlock* matProps;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.Rendering.ShadowCastingMode <shadowCastingMode>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    ::UnityEngine::Rendering::ShadowCastingMode shadowCastingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ShadowCastingMode) == 0x4);
    // private System.Boolean <receiveShadows>k__BackingField
    // Size: 0x1
    // Offset: 0x4C
    bool receiveShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: receiveShadows and: lightProbeUsage
    char __padding10[0x3] = {};
    // private UnityEngine.Rendering.LightProbeUsage <lightProbeUsage>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::LightProbeUsage) == 0x4);
    // Padding between fields: lightProbeUsage and: lightProbeProxyVolume
    char __padding11[0x4] = {};
    // private UnityEngine.LightProbeProxyVolume <lightProbeProxyVolume>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume;
    // Field size check
    static_assert(sizeof(::UnityEngine::LightProbeProxyVolume*) == 0x8);
    public:
    // Creating value type constructor for type: RenderParams
    constexpr RenderParams(int layer_ = {}, uint renderingLayerMask_ = {}, int rendererPriority_ = {}, ::UnityEngine::Bounds worldBounds_ = {}, ::UnityEngine::Camera* camera_ = {}, ::UnityEngine::MotionVectorGenerationMode motionVectorMode_ = {}, ::UnityEngine::Rendering::ReflectionProbeUsage reflectionProbeUsage_ = {}, ::UnityEngine::Material* material_ = {}, ::UnityEngine::MaterialPropertyBlock* matProps_ = {}, ::UnityEngine::Rendering::ShadowCastingMode shadowCastingMode_ = {}, bool receiveShadows_ = {}, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage_ = {}, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume_ = {}) noexcept : layer{layer_}, renderingLayerMask{renderingLayerMask_}, rendererPriority{rendererPriority_}, worldBounds{worldBounds_}, camera{camera_}, motionVectorMode{motionVectorMode_}, reflectionProbeUsage{reflectionProbeUsage_}, material{material_}, matProps{matProps_}, shadowCastingMode{shadowCastingMode_}, receiveShadows{receiveShadows_}, lightProbeUsage{lightProbeUsage_}, lightProbeProxyVolume{lightProbeProxyVolume_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 <layer>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$layer$k__BackingField();
    // Get instance field reference: private System.UInt32 <renderingLayerMask>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$renderingLayerMask$k__BackingField();
    // Get instance field reference: private System.Int32 <rendererPriority>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$rendererPriority$k__BackingField();
    // Get instance field reference: private UnityEngine.Bounds <worldBounds>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_$worldBounds$k__BackingField();
    // Get instance field reference: private UnityEngine.Camera <camera>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_$camera$k__BackingField();
    // Get instance field reference: private UnityEngine.MotionVectorGenerationMode <motionVectorMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::MotionVectorGenerationMode& dyn_$motionVectorMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.ReflectionProbeUsage <reflectionProbeUsage>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ReflectionProbeUsage& dyn_$reflectionProbeUsage$k__BackingField();
    // Get instance field reference: private UnityEngine.Material <material>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_$material$k__BackingField();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock <matProps>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_$matProps$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.ShadowCastingMode <shadowCastingMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ShadowCastingMode& dyn_$shadowCastingMode$k__BackingField();
    // Get instance field reference: private System.Boolean <receiveShadows>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$receiveShadows$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.LightProbeUsage <lightProbeUsage>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::LightProbeUsage& dyn_$lightProbeUsage$k__BackingField();
    // Get instance field reference: private UnityEngine.LightProbeProxyVolume <lightProbeProxyVolume>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LightProbeProxyVolume*& dyn_$lightProbeProxyVolume$k__BackingField();
    // public System.Void .ctor(UnityEngine.Material mat)
    // Offset: 0x548DA60
    RenderParams(::UnityEngine::Material* mat);
    // public System.Void set_layer(System.Int32 value)
    // Offset: 0x548DB30
    void set_layer(int value);
    // public System.Void set_renderingLayerMask(System.UInt32 value)
    // Offset: 0x548DB38
    void set_renderingLayerMask(uint value);
    // public System.Void set_rendererPriority(System.Int32 value)
    // Offset: 0x548DB40
    void set_rendererPriority(int value);
    // public System.Void set_worldBounds(UnityEngine.Bounds value)
    // Offset: 0x548DB48
    void set_worldBounds(::UnityEngine::Bounds value);
    // public System.Void set_camera(UnityEngine.Camera value)
    // Offset: 0x548DB5C
    void set_camera(::UnityEngine::Camera* value);
    // public System.Void set_motionVectorMode(UnityEngine.MotionVectorGenerationMode value)
    // Offset: 0x548DB64
    void set_motionVectorMode(::UnityEngine::MotionVectorGenerationMode value);
    // public System.Void set_reflectionProbeUsage(UnityEngine.Rendering.ReflectionProbeUsage value)
    // Offset: 0x548DB6C
    void set_reflectionProbeUsage(::UnityEngine::Rendering::ReflectionProbeUsage value);
    // public System.Void set_material(UnityEngine.Material value)
    // Offset: 0x548DB74
    void set_material(::UnityEngine::Material* value);
    // public UnityEngine.MaterialPropertyBlock get_matProps()
    // Offset: 0x548DB7C
    ::UnityEngine::MaterialPropertyBlock* get_matProps();
    // public System.Void set_matProps(UnityEngine.MaterialPropertyBlock value)
    // Offset: 0x548DB84
    void set_matProps(::UnityEngine::MaterialPropertyBlock* value);
    // public System.Void set_shadowCastingMode(UnityEngine.Rendering.ShadowCastingMode value)
    // Offset: 0x548DB8C
    void set_shadowCastingMode(::UnityEngine::Rendering::ShadowCastingMode value);
    // public System.Void set_receiveShadows(System.Boolean value)
    // Offset: 0x548DB94
    void set_receiveShadows(bool value);
    // public System.Void set_lightProbeUsage(UnityEngine.Rendering.LightProbeUsage value)
    // Offset: 0x548DBA0
    void set_lightProbeUsage(::UnityEngine::Rendering::LightProbeUsage value);
    // public System.Void set_lightProbeProxyVolume(UnityEngine.LightProbeProxyVolume value)
    // Offset: 0x548DBA8
    void set_lightProbeProxyVolume(::UnityEngine::LightProbeProxyVolume* value);
  }; // UnityEngine.RenderParams
  #pragma pack(pop)
  static check_size<sizeof(RenderParams), 88 + sizeof(::UnityEngine::LightProbeProxyVolume*)> __UnityEngine_RenderParamsSizeCheck;
  static_assert(sizeof(RenderParams) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::RenderParams::RenderParams
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_layer
// Il2CppName: set_layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(int)>(&UnityEngine::RenderParams::set_layer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_renderingLayerMask
// Il2CppName: set_renderingLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(uint)>(&UnityEngine::RenderParams::set_renderingLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_renderingLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_rendererPriority
// Il2CppName: set_rendererPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(int)>(&UnityEngine::RenderParams::set_rendererPriority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_rendererPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_worldBounds
// Il2CppName: set_worldBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Bounds)>(&UnityEngine::RenderParams::set_worldBounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_worldBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_camera
// Il2CppName: set_camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Camera*)>(&UnityEngine::RenderParams::set_camera)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_motionVectorMode
// Il2CppName: set_motionVectorMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::MotionVectorGenerationMode)>(&UnityEngine::RenderParams::set_motionVectorMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "MotionVectorGenerationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_motionVectorMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_reflectionProbeUsage
// Il2CppName: set_reflectionProbeUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Rendering::ReflectionProbeUsage)>(&UnityEngine::RenderParams::set_reflectionProbeUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ReflectionProbeUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_reflectionProbeUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_material
// Il2CppName: set_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Material*)>(&UnityEngine::RenderParams::set_material)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::get_matProps
// Il2CppName: get_matProps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MaterialPropertyBlock* (UnityEngine::RenderParams::*)()>(&UnityEngine::RenderParams::get_matProps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "get_matProps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_matProps
// Il2CppName: set_matProps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::RenderParams::set_matProps)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_matProps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_shadowCastingMode
// Il2CppName: set_shadowCastingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Rendering::ShadowCastingMode)>(&UnityEngine::RenderParams::set_shadowCastingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_shadowCastingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_receiveShadows
// Il2CppName: set_receiveShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(bool)>(&UnityEngine::RenderParams::set_receiveShadows)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_receiveShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_lightProbeUsage
// Il2CppName: set_lightProbeUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::Rendering::LightProbeUsage)>(&UnityEngine::RenderParams::set_lightProbeUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_lightProbeUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RenderParams::set_lightProbeProxyVolume
// Il2CppName: set_lightProbeProxyVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RenderParams::*)(::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::RenderParams::set_lightProbeProxyVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RenderParams), "set_lightProbeProxyVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
