// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.TextCore.LowLevel.GlyphAnchorPoint
#include "UnityEngine/TextCore/LowLevel/GlyphAnchorPoint.hpp"
// Including type: UnityEngine.TextCore.LowLevel.MarkPositionAdjustment
#include "UnityEngine/TextCore/LowLevel/MarkPositionAdjustment.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Forward declaring type: MarkToBaseAdjustmentRecord
  struct MarkToBaseAdjustmentRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord, "UnityEngine.TextCore.LowLevel", "MarkToBaseAdjustmentRecord");
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.LowLevel.MarkToBaseAdjustmentRecord
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct MarkToBaseAdjustmentRecord/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_BaseGlyphID
    // Size: 0x4
    // Offset: 0x0
    uint m_BaseGlyphID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.TextCore.LowLevel.GlyphAnchorPoint m_BaseGlyphAnchorPoint
    // Size: 0x8
    // Offset: 0x4
    ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint m_BaseGlyphAnchorPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint) == 0x8);
    // private System.UInt32 m_MarkGlyphID
    // Size: 0x4
    // Offset: 0xC
    uint m_MarkGlyphID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.TextCore.LowLevel.MarkPositionAdjustment m_MarkPositionAdjustment
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment m_MarkPositionAdjustment;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment) == 0x8);
    public:
    // Creating value type constructor for type: MarkToBaseAdjustmentRecord
    constexpr MarkToBaseAdjustmentRecord(uint m_BaseGlyphID_ = {}, ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint m_BaseGlyphAnchorPoint_ = {}, uint m_MarkGlyphID_ = {}, ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment m_MarkPositionAdjustment_ = {}) noexcept : m_BaseGlyphID{m_BaseGlyphID_}, m_BaseGlyphAnchorPoint{m_BaseGlyphAnchorPoint_}, m_MarkGlyphID{m_MarkGlyphID_}, m_MarkPositionAdjustment{m_MarkPositionAdjustment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_BaseGlyphID
    [[deprecated("Use field access instead!")]] uint& dyn_m_BaseGlyphID();
    // Get instance field reference: private UnityEngine.TextCore.LowLevel.GlyphAnchorPoint m_BaseGlyphAnchorPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint& dyn_m_BaseGlyphAnchorPoint();
    // Get instance field reference: private System.UInt32 m_MarkGlyphID
    [[deprecated("Use field access instead!")]] uint& dyn_m_MarkGlyphID();
    // Get instance field reference: private UnityEngine.TextCore.LowLevel.MarkPositionAdjustment m_MarkPositionAdjustment
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment& dyn_m_MarkPositionAdjustment();
    // public System.UInt32 get_baseGlyphID()
    // Offset: 0x5543994
    uint get_baseGlyphID();
    // public UnityEngine.TextCore.LowLevel.GlyphAnchorPoint get_baseGlyphAnchorPoint()
    // Offset: 0x554399C
    ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint get_baseGlyphAnchorPoint();
    // public System.UInt32 get_markGlyphID()
    // Offset: 0x55439A4
    uint get_markGlyphID();
    // public UnityEngine.TextCore.LowLevel.MarkPositionAdjustment get_markPositionAdjustment()
    // Offset: 0x55439AC
    ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment get_markPositionAdjustment();
  }; // UnityEngine.TextCore.LowLevel.MarkToBaseAdjustmentRecord
  #pragma pack(pop)
  static check_size<sizeof(MarkToBaseAdjustmentRecord), 16 + sizeof(::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment)> __UnityEngine_TextCore_LowLevel_MarkToBaseAdjustmentRecordSizeCheck;
  static_assert(sizeof(MarkToBaseAdjustmentRecord) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_baseGlyphID
// Il2CppName: get_baseGlyphID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_baseGlyphID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord), "get_baseGlyphID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_baseGlyphAnchorPoint
// Il2CppName: get_baseGlyphAnchorPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint (UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_baseGlyphAnchorPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord), "get_baseGlyphAnchorPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_markGlyphID
// Il2CppName: get_markGlyphID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_markGlyphID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord), "get_markGlyphID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_markPositionAdjustment
// Il2CppName: get_markPositionAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment (UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord::get_markPositionAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToBaseAdjustmentRecord), "get_markPositionAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
