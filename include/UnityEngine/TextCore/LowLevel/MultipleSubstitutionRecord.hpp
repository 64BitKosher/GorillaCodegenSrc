// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Forward declaring type: MultipleSubstitutionRecord
  struct MultipleSubstitutionRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::LowLevel::MultipleSubstitutionRecord, "UnityEngine.TextCore.LowLevel", "MultipleSubstitutionRecord");
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.LowLevel.MultipleSubstitutionRecord
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct MultipleSubstitutionRecord/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_TargetGlyphID
    // Size: 0x4
    // Offset: 0x0
    uint m_TargetGlyphID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_TargetGlyphID and: m_SubstituteGlyphIDs
    char __padding0[0x4] = {};
    // private System.UInt32[] m_SubstituteGlyphIDs
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<uint> m_SubstituteGlyphIDs;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    public:
    // Creating value type constructor for type: MultipleSubstitutionRecord
    constexpr MultipleSubstitutionRecord(uint m_TargetGlyphID_ = {}, ::ArrayW<uint> m_SubstituteGlyphIDs_ = ::ArrayW<uint>(static_cast<void*>(nullptr))) noexcept : m_TargetGlyphID{m_TargetGlyphID_}, m_SubstituteGlyphIDs{m_SubstituteGlyphIDs_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_TargetGlyphID
    [[deprecated("Use field access instead!")]] uint& dyn_m_TargetGlyphID();
    // Get instance field reference: private System.UInt32[] m_SubstituteGlyphIDs
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_SubstituteGlyphIDs();
  }; // UnityEngine.TextCore.LowLevel.MultipleSubstitutionRecord
  #pragma pack(pop)
  static check_size<sizeof(MultipleSubstitutionRecord), 8 + sizeof(::ArrayW<uint>)> __UnityEngine_TextCore_LowLevel_MultipleSubstitutionRecordSizeCheck;
  static_assert(sizeof(MultipleSubstitutionRecord) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
