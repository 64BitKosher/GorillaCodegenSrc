// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.TextCore.LowLevel.GlyphAnchorPoint
#include "UnityEngine/TextCore/LowLevel/GlyphAnchorPoint.hpp"
// Including type: UnityEngine.TextCore.LowLevel.MarkPositionAdjustment
#include "UnityEngine/TextCore/LowLevel/MarkPositionAdjustment.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Forward declaring type: MarkToMarkAdjustmentRecord
  struct MarkToMarkAdjustmentRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord, "UnityEngine.TextCore.LowLevel", "MarkToMarkAdjustmentRecord");
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.LowLevel.MarkToMarkAdjustmentRecord
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct MarkToMarkAdjustmentRecord/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_BaseMarkGlyphID
    // Size: 0x4
    // Offset: 0x0
    uint m_BaseMarkGlyphID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.TextCore.LowLevel.GlyphAnchorPoint m_BaseMarkGlyphAnchorPoint
    // Size: 0x8
    // Offset: 0x4
    ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint m_BaseMarkGlyphAnchorPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint) == 0x8);
    // private System.UInt32 m_CombiningMarkGlyphID
    // Size: 0x4
    // Offset: 0xC
    uint m_CombiningMarkGlyphID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.TextCore.LowLevel.MarkPositionAdjustment m_CombiningMarkPositionAdjustment
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment m_CombiningMarkPositionAdjustment;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment) == 0x8);
    public:
    // Creating value type constructor for type: MarkToMarkAdjustmentRecord
    constexpr MarkToMarkAdjustmentRecord(uint m_BaseMarkGlyphID_ = {}, ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint m_BaseMarkGlyphAnchorPoint_ = {}, uint m_CombiningMarkGlyphID_ = {}, ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment m_CombiningMarkPositionAdjustment_ = {}) noexcept : m_BaseMarkGlyphID{m_BaseMarkGlyphID_}, m_BaseMarkGlyphAnchorPoint{m_BaseMarkGlyphAnchorPoint_}, m_CombiningMarkGlyphID{m_CombiningMarkGlyphID_}, m_CombiningMarkPositionAdjustment{m_CombiningMarkPositionAdjustment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_BaseMarkGlyphID
    [[deprecated("Use field access instead!")]] uint& dyn_m_BaseMarkGlyphID();
    // Get instance field reference: private UnityEngine.TextCore.LowLevel.GlyphAnchorPoint m_BaseMarkGlyphAnchorPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint& dyn_m_BaseMarkGlyphAnchorPoint();
    // Get instance field reference: private System.UInt32 m_CombiningMarkGlyphID
    [[deprecated("Use field access instead!")]] uint& dyn_m_CombiningMarkGlyphID();
    // Get instance field reference: private UnityEngine.TextCore.LowLevel.MarkPositionAdjustment m_CombiningMarkPositionAdjustment
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment& dyn_m_CombiningMarkPositionAdjustment();
    // public System.UInt32 get_baseMarkGlyphID()
    // Offset: 0x55439B4
    uint get_baseMarkGlyphID();
    // public UnityEngine.TextCore.LowLevel.GlyphAnchorPoint get_baseMarkGlyphAnchorPoint()
    // Offset: 0x55439BC
    ::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint get_baseMarkGlyphAnchorPoint();
    // public System.UInt32 get_combiningMarkGlyphID()
    // Offset: 0x55439C4
    uint get_combiningMarkGlyphID();
    // public UnityEngine.TextCore.LowLevel.MarkPositionAdjustment get_combiningMarkPositionAdjustment()
    // Offset: 0x55439CC
    ::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment get_combiningMarkPositionAdjustment();
  }; // UnityEngine.TextCore.LowLevel.MarkToMarkAdjustmentRecord
  #pragma pack(pop)
  static check_size<sizeof(MarkToMarkAdjustmentRecord), 16 + sizeof(::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment)> __UnityEngine_TextCore_LowLevel_MarkToMarkAdjustmentRecordSizeCheck;
  static_assert(sizeof(MarkToMarkAdjustmentRecord) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_baseMarkGlyphID
// Il2CppName: get_baseMarkGlyphID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_baseMarkGlyphID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord), "get_baseMarkGlyphID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_baseMarkGlyphAnchorPoint
// Il2CppName: get_baseMarkGlyphAnchorPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::LowLevel::GlyphAnchorPoint (UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_baseMarkGlyphAnchorPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord), "get_baseMarkGlyphAnchorPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_combiningMarkGlyphID
// Il2CppName: get_combiningMarkGlyphID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_combiningMarkGlyphID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord), "get_combiningMarkGlyphID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_combiningMarkPositionAdjustment
// Il2CppName: get_combiningMarkPositionAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment (UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::*)()>(&UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord::get_combiningMarkPositionAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkToMarkAdjustmentRecord), "get_combiningMarkPositionAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
