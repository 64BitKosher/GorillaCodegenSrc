// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Forward declaring type: MarkPositionAdjustment
  struct MarkPositionAdjustment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::LowLevel::MarkPositionAdjustment, "UnityEngine.TextCore.LowLevel", "MarkPositionAdjustment");
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.LowLevel.MarkPositionAdjustment
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct MarkPositionAdjustment/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_XPositionAdjustment
    // Size: 0x4
    // Offset: 0x0
    float m_XPositionAdjustment;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_YPositionAdjustment
    // Size: 0x4
    // Offset: 0x4
    float m_YPositionAdjustment;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: MarkPositionAdjustment
    constexpr MarkPositionAdjustment(float m_XPositionAdjustment_ = {}, float m_YPositionAdjustment_ = {}) noexcept : m_XPositionAdjustment{m_XPositionAdjustment_}, m_YPositionAdjustment{m_YPositionAdjustment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single m_XPositionAdjustment
    [[deprecated("Use field access instead!")]] float& dyn_m_XPositionAdjustment();
    // Get instance field reference: private System.Single m_YPositionAdjustment
    [[deprecated("Use field access instead!")]] float& dyn_m_YPositionAdjustment();
    // public System.Single get_xPositionAdjustment()
    // Offset: 0x5543984
    float get_xPositionAdjustment();
    // public System.Single get_yPositionAdjustment()
    // Offset: 0x554398C
    float get_yPositionAdjustment();
  }; // UnityEngine.TextCore.LowLevel.MarkPositionAdjustment
  #pragma pack(pop)
  static check_size<sizeof(MarkPositionAdjustment), 4 + sizeof(float)> __UnityEngine_TextCore_LowLevel_MarkPositionAdjustmentSizeCheck;
  static_assert(sizeof(MarkPositionAdjustment) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::get_xPositionAdjustment
// Il2CppName: get_xPositionAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::*)()>(&UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::get_xPositionAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkPositionAdjustment), "get_xPositionAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::get_yPositionAdjustment
// Il2CppName: get_yPositionAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::*)()>(&UnityEngine::TextCore::LowLevel::MarkPositionAdjustment::get_yPositionAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::LowLevel::MarkPositionAdjustment), "get_yPositionAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
