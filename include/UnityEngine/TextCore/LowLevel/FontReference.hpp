// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Forward declaring type: FontReference
  struct FontReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::LowLevel::FontReference, "UnityEngine.TextCore.LowLevel", "FontReference");
// Type namespace: UnityEngine.TextCore.LowLevel
namespace UnityEngine::TextCore::LowLevel {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.LowLevel.FontReference
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct FontReference/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String familyName
    // Size: 0x8
    // Offset: 0x0
    ::StringW familyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String styleName
    // Size: 0x8
    // Offset: 0x8
    ::StringW styleName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 faceIndex
    // Size: 0x4
    // Offset: 0x10
    int faceIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: faceIndex and: filePath
    char __padding2[0x4] = {};
    // public System.String filePath
    // Size: 0x8
    // Offset: 0x18
    ::StringW filePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: FontReference
    constexpr FontReference(::StringW familyName_ = {}, ::StringW styleName_ = {}, int faceIndex_ = {}, ::StringW filePath_ = {}) noexcept : familyName{familyName_}, styleName{styleName_}, faceIndex{faceIndex_}, filePath{filePath_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String familyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_familyName();
    // Get instance field reference: public System.String styleName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_styleName();
    // Get instance field reference: public System.Int32 faceIndex
    [[deprecated("Use field access instead!")]] int& dyn_faceIndex();
    // Get instance field reference: public System.String filePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_filePath();
  }; // UnityEngine.TextCore.LowLevel.FontReference
  #pragma pack(pop)
  static check_size<sizeof(FontReference), 24 + sizeof(::StringW)> __UnityEngine_TextCore_LowLevel_FontReferenceSizeCheck;
  static_assert(sizeof(FontReference) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
