// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.TextCore.Text.Offset
#include "UnityEngine/TextCore/Text/Offset.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: HighlightState
  struct HighlightState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::HighlightState, "UnityEngine.TextCore.Text", "HighlightState");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.HighlightState
  // [TokenAttribute] Offset: FFFFFFFF
  struct HighlightState/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Color32 color
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Color32 color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.TextCore.Text.Offset padding
    // Size: 0x10
    // Offset: 0x4
    ::UnityEngine::TextCore::Text::Offset padding;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::Offset) == 0x10);
    public:
    // Creating value type constructor for type: HighlightState
    constexpr HighlightState(::UnityEngine::Color32 color_ = {}, ::UnityEngine::TextCore::Text::Offset padding_ = {}) noexcept : color{color_}, padding{padding_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Color32 color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_color();
    // Get instance field reference: public UnityEngine.TextCore.Text.Offset padding
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::Offset& dyn_padding();
    // public System.Void .ctor(UnityEngine.Color32 color, UnityEngine.TextCore.Text.Offset padding)
    // Offset: 0x556C540
    // ABORTED: conflicts with another method.  HighlightState(::UnityEngine::Color32 color, ::UnityEngine::TextCore::Text::Offset padding);
    // public override System.Int32 GetHashCode()
    // Offset: 0x556C68C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x556C6F8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // UnityEngine.TextCore.Text.HighlightState
  #pragma pack(pop)
  static check_size<sizeof(HighlightState), 4 + sizeof(::UnityEngine::TextCore::Text::Offset)> __UnityEngine_TextCore_Text_HighlightStateSizeCheck;
  static_assert(sizeof(HighlightState) == 0x14);
  // static public System.Boolean op_Equality(UnityEngine.TextCore.Text.HighlightState lhs, UnityEngine.TextCore.Text.HighlightState rhs)
  // Offset: 0x556C550
  bool operator ==(const ::UnityEngine::TextCore::Text::HighlightState& lhs, const ::UnityEngine::TextCore::Text::HighlightState& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.TextCore.Text.HighlightState lhs, UnityEngine.TextCore.Text.HighlightState rhs)
  // Offset: 0x556C644
  bool operator !=(const ::UnityEngine::TextCore::Text::HighlightState& lhs, const ::UnityEngine::TextCore::Text::HighlightState& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::HighlightState::HighlightState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::HighlightState::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::HighlightState::*)()>(&UnityEngine::TextCore::Text::HighlightState::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::HighlightState), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::HighlightState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TextCore::Text::HighlightState::*)(::Il2CppObject*)>(&UnityEngine::TextCore::Text::HighlightState::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::HighlightState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::HighlightState::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::HighlightState::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
