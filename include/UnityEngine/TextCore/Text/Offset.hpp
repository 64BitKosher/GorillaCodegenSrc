// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: Offset
  struct Offset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::Offset, "UnityEngine.TextCore.Text", "Offset");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.Offset
  // [TokenAttribute] Offset: FFFFFFFF
  struct Offset/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_Left
    // Size: 0x4
    // Offset: 0x0
    float m_Left;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Right
    // Size: 0x4
    // Offset: 0x4
    float m_Right;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Top
    // Size: 0x4
    // Offset: 0x8
    float m_Top;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Bottom
    // Size: 0x4
    // Offset: 0xC
    float m_Bottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Offset
    constexpr Offset(float m_Left_ = {}, float m_Right_ = {}, float m_Top_ = {}, float m_Bottom_ = {}) noexcept : m_Left{m_Left_}, m_Right{m_Right_}, m_Top{m_Top_}, m_Bottom{m_Bottom_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly UnityEngine.TextCore.Text.Offset k_ZeroOffset
    static ::UnityEngine::TextCore::Text::Offset _get_k_ZeroOffset();
    // Set static field: static private readonly UnityEngine.TextCore.Text.Offset k_ZeroOffset
    static void _set_k_ZeroOffset(::UnityEngine::TextCore::Text::Offset value);
    // Get instance field reference: private System.Single m_Left
    [[deprecated("Use field access instead!")]] float& dyn_m_Left();
    // Get instance field reference: private System.Single m_Right
    [[deprecated("Use field access instead!")]] float& dyn_m_Right();
    // Get instance field reference: private System.Single m_Top
    [[deprecated("Use field access instead!")]] float& dyn_m_Top();
    // Get instance field reference: private System.Single m_Bottom
    [[deprecated("Use field access instead!")]] float& dyn_m_Bottom();
    // public System.Single get_left()
    // Offset: 0x556C350
    float get_left();
    // public System.Single get_right()
    // Offset: 0x556C358
    float get_right();
    // public System.Single get_top()
    // Offset: 0x556C360
    float get_top();
    // public System.Single get_bottom()
    // Offset: 0x556C368
    float get_bottom();
    // static public UnityEngine.TextCore.Text.Offset get_zero()
    // Offset: 0x556C370
    static ::UnityEngine::TextCore::Text::Offset get_zero();
    // public System.Void .ctor(System.Single left, System.Single right, System.Single top, System.Single bottom)
    // Offset: 0x556C3CC
    // ABORTED: conflicts with another method.  Offset(float left, float right, float top, float bottom);
    // static private System.Void .cctor()
    // Offset: 0x556C4F8
    static void _cctor();
    // public override System.Int32 GetHashCode()
    // Offset: 0x556C41C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x556C480
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // UnityEngine.TextCore.Text.Offset
  #pragma pack(pop)
  static check_size<sizeof(Offset), 12 + sizeof(float)> __UnityEngine_TextCore_Text_OffsetSizeCheck;
  static_assert(sizeof(Offset) == 0x10);
  // static public System.Boolean op_Equality(UnityEngine.TextCore.Text.Offset lhs, UnityEngine.TextCore.Text.Offset rhs)
  // Offset: 0x556C3D8
  bool operator ==(const ::UnityEngine::TextCore::Text::Offset& lhs, const ::UnityEngine::TextCore::Text::Offset& rhs);
  // static public UnityEngine.TextCore.Text.Offset op_Multiply(UnityEngine.TextCore.Text.Offset a, System.Single b)
  // Offset: 0x556C408
  ::UnityEngine::TextCore::Text::Offset operator*(const ::UnityEngine::TextCore::Text::Offset& a, const float& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::get_left
// Il2CppName: get_left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::Text::Offset::*)()>(&UnityEngine::TextCore::Text::Offset::get_left)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "get_left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::get_right
// Il2CppName: get_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::Text::Offset::*)()>(&UnityEngine::TextCore::Text::Offset::get_right)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "get_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::get_top
// Il2CppName: get_top
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::Text::Offset::*)()>(&UnityEngine::TextCore::Text::Offset::get_top)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "get_top", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::get_bottom
// Il2CppName: get_bottom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::TextCore::Text::Offset::*)()>(&UnityEngine::TextCore::Text::Offset::get_bottom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "get_bottom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::get_zero
// Il2CppName: get_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::Text::Offset (*)()>(&UnityEngine::TextCore::Text::Offset::get_zero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "get_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::Offset
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::TextCore::Text::Offset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::Offset::*)()>(&UnityEngine::TextCore::Text::Offset::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TextCore::Text::Offset::*)(::Il2CppObject*)>(&UnityEngine::TextCore::Text::Offset::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::Offset), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::Offset::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
