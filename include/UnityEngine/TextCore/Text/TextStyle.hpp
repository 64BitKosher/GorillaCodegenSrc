// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextStyle
  class TextStyle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextCore::Text::TextStyle);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextStyle*, "UnityEngine.TextCore.Text", "TextStyle");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextCore.Text.TextStyle
  // [TokenAttribute] Offset: FFFFFFFF
  class TextStyle : public ::Il2CppObject {
    public:
    public:
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 m_HashCode
    // Size: 0x4
    // Offset: 0x18
    int m_HashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_HashCode and: m_OpeningDefinition
    char __padding1[0x4] = {};
    // private System.String m_OpeningDefinition
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_OpeningDefinition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_ClosingDefinition
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_ClosingDefinition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UInt32[] m_OpeningTagArray
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint> m_OpeningTagArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.UInt32[] m_ClosingTagArray
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<uint> m_ClosingTagArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // System.UInt32[] m_OpeningTagUnicodeArray
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint> m_OpeningTagUnicodeArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // System.UInt32[] m_ClosingTagUnicodeArray
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint> m_ClosingTagUnicodeArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    public:
    // Get static field: static UnityEngine.TextCore.Text.TextStyle k_NormalStyle
    static ::UnityEngine::TextCore::Text::TextStyle* _get_k_NormalStyle();
    // Set static field: static UnityEngine.TextCore.Text.TextStyle k_NormalStyle
    static void _set_k_NormalStyle(::UnityEngine::TextCore::Text::TextStyle* value);
    // Get instance field reference: private System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: private System.Int32 m_HashCode
    [[deprecated("Use field access instead!")]] int& dyn_m_HashCode();
    // Get instance field reference: private System.String m_OpeningDefinition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_OpeningDefinition();
    // Get instance field reference: private System.String m_ClosingDefinition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ClosingDefinition();
    // Get instance field reference: private System.UInt32[] m_OpeningTagArray
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_OpeningTagArray();
    // Get instance field reference: private System.UInt32[] m_ClosingTagArray
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_ClosingTagArray();
    // Get instance field reference: System.UInt32[] m_OpeningTagUnicodeArray
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_OpeningTagUnicodeArray();
    // Get instance field reference: System.UInt32[] m_ClosingTagUnicodeArray
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_ClosingTagUnicodeArray();
    // public System.Int32 get_hashCode()
    // Offset: 0x556D3A0
    int get_hashCode();
    // public System.UInt32[] get_styleOpeningTagArray()
    // Offset: 0x556D3A8
    ::ArrayW<uint> get_styleOpeningTagArray();
    // public System.UInt32[] get_styleClosingTagArray()
    // Offset: 0x556D93C
    ::ArrayW<uint> get_styleClosingTagArray();
    // System.Void .ctor(System.String styleName, System.String styleOpeningDefinition, System.String styleClosingDefinition)
    // Offset: 0x5574A48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextStyle* New_ctor(::StringW styleName, ::StringW styleOpeningDefinition, ::StringW styleClosingDefinition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextStyle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextStyle*, creationType>(styleName, styleOpeningDefinition, styleClosingDefinition)));
    }
    // public System.Void RefreshStyle()
    // Offset: 0x5574ABC
    void RefreshStyle();
  }; // UnityEngine.TextCore.Text.TextStyle
  #pragma pack(pop)
  static check_size<sizeof(TextStyle), 72 + sizeof(::ArrayW<uint>)> __UnityEngine_TextCore_Text_TextStyleSizeCheck;
  static_assert(sizeof(TextStyle) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextStyle::get_hashCode
// Il2CppName: get_hashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::TextStyle::*)()>(&UnityEngine::TextCore::Text::TextStyle::get_hashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextStyle*), "get_hashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextStyle::get_styleOpeningTagArray
// Il2CppName: get_styleOpeningTagArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (UnityEngine::TextCore::Text::TextStyle::*)()>(&UnityEngine::TextCore::Text::TextStyle::get_styleOpeningTagArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextStyle*), "get_styleOpeningTagArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextStyle::get_styleClosingTagArray
// Il2CppName: get_styleClosingTagArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (UnityEngine::TextCore::Text::TextStyle::*)()>(&UnityEngine::TextCore::Text::TextStyle::get_styleClosingTagArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextStyle*), "get_styleClosingTagArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextStyle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextStyle::RefreshStyle
// Il2CppName: RefreshStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextStyle::*)()>(&UnityEngine::TextCore::Text::TextStyle::RefreshStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextStyle*), "RefreshStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
