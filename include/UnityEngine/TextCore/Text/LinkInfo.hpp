// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextInfo
  class TextInfo;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: LinkInfo
  struct LinkInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::LinkInfo, "UnityEngine.TextCore.Text", "LinkInfo");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.LinkInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct LinkInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 hashCode
    // Size: 0x4
    // Offset: 0x0
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkIdFirstCharacterIndex
    // Size: 0x4
    // Offset: 0x4
    int linkIdFirstCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkIdLength
    // Size: 0x4
    // Offset: 0x8
    int linkIdLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkTextfirstCharacterIndex
    // Size: 0x4
    // Offset: 0xC
    int linkTextfirstCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkTextLength
    // Size: 0x4
    // Offset: 0x10
    int linkTextLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: linkTextLength and: linkId
    char __padding4[0x4] = {};
    // System.Char[] linkId
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Il2CppChar> linkId;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.String m_LinkIdString
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_LinkIdString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_LinkTextString
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_LinkTextString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: LinkInfo
    constexpr LinkInfo(int hashCode_ = {}, int linkIdFirstCharacterIndex_ = {}, int linkIdLength_ = {}, int linkTextfirstCharacterIndex_ = {}, int linkTextLength_ = {}, ::ArrayW<::Il2CppChar> linkId_ = ::ArrayW<::Il2CppChar>(static_cast<void*>(nullptr)), ::StringW m_LinkIdString_ = {}, ::StringW m_LinkTextString_ = {}) noexcept : hashCode{hashCode_}, linkIdFirstCharacterIndex{linkIdFirstCharacterIndex_}, linkIdLength{linkIdLength_}, linkTextfirstCharacterIndex{linkTextfirstCharacterIndex_}, linkTextLength{linkTextLength_}, linkId{linkId_}, m_LinkIdString{m_LinkIdString_}, m_LinkTextString{m_LinkTextString_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 hashCode
    [[deprecated("Use field access instead!")]] int& dyn_hashCode();
    // Get instance field reference: public System.Int32 linkIdFirstCharacterIndex
    [[deprecated("Use field access instead!")]] int& dyn_linkIdFirstCharacterIndex();
    // Get instance field reference: public System.Int32 linkIdLength
    [[deprecated("Use field access instead!")]] int& dyn_linkIdLength();
    // Get instance field reference: public System.Int32 linkTextfirstCharacterIndex
    [[deprecated("Use field access instead!")]] int& dyn_linkTextfirstCharacterIndex();
    // Get instance field reference: public System.Int32 linkTextLength
    [[deprecated("Use field access instead!")]] int& dyn_linkTextLength();
    // Get instance field reference: System.Char[] linkId
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_linkId();
    // Get instance field reference: private System.String m_LinkIdString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_LinkIdString();
    // Get instance field reference: private System.String m_LinkTextString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_LinkTextString();
    // System.Void SetLinkId(System.Char[] text, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x554E59C
    void SetLinkId(::ArrayW<::Il2CppChar> text, int startIndex, int length);
    // public System.String GetLinkText(UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x554E6A4
    ::StringW GetLinkText(::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // public System.String GetLinkId()
    // Offset: 0x554E770
    ::StringW GetLinkId();
  }; // UnityEngine.TextCore.Text.LinkInfo
  #pragma pack(pop)
  static check_size<sizeof(LinkInfo), 40 + sizeof(::StringW)> __UnityEngine_TextCore_Text_LinkInfoSizeCheck;
  static_assert(sizeof(LinkInfo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::LinkInfo::SetLinkId
// Il2CppName: SetLinkId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::LinkInfo::*)(::ArrayW<::Il2CppChar>, int, int)>(&UnityEngine::TextCore::Text::LinkInfo::SetLinkId)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::LinkInfo), "SetLinkId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, startIndex, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::LinkInfo::GetLinkText
// Il2CppName: GetLinkText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TextCore::Text::LinkInfo::*)(::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::LinkInfo::GetLinkText)> {
  static const MethodInfo* get() {
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::LinkInfo), "GetLinkText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::LinkInfo::GetLinkId
// Il2CppName: GetLinkId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TextCore::Text::LinkInfo::*)()>(&UnityEngine::TextCore::Text::LinkInfo::GetLinkId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::LinkInfo), "GetLinkId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
