// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: VertexSortingOrder
  struct VertexSortingOrder;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: MeshInfo
  struct MeshInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::MeshInfo, "UnityEngine.TextCore.Text", "MeshInfo");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.MeshInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Mesh mesh
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public System.Int32 vertexCount
    // Size: 0x4
    // Offset: 0x8
    int vertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: vertexCount and: vertices
    char __padding1[0x4] = {};
    // public UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector4[] tangents
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector4> tangents;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public UnityEngine.Vector4[] uvs0
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector4> uvs0;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public UnityEngine.Vector2[] uvs2
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector2> uvs2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Color32[] colors32
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Color32> colors32;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // public System.Int32[] triangles
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Creating value type constructor for type: MeshInfo
    constexpr MeshInfo(::UnityEngine::Mesh* mesh_ = {}, int vertexCount_ = {}, ::ArrayW<::UnityEngine::Vector3> vertices_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector3> normals_ = ::ArrayW<::UnityEngine::Vector3>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> tangents_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> uvs0_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector2> uvs2_ = ::ArrayW<::UnityEngine::Vector2>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Color32> colors32_ = ::ArrayW<::UnityEngine::Color32>(static_cast<void*>(nullptr)), ::ArrayW<int> triangles_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::UnityEngine::Material* material_ = {}) noexcept : mesh{mesh_}, vertexCount{vertexCount_}, vertices{vertices_}, normals{normals_}, tangents{tangents_}, uvs0{uvs0_}, uvs2{uvs2_}, colors32{colors32_}, triangles{triangles_}, material{material_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly UnityEngine.Color32 k_DefaultColor
    static ::UnityEngine::Color32 _get_k_DefaultColor();
    // Set static field: static private readonly UnityEngine.Color32 k_DefaultColor
    static void _set_k_DefaultColor(::UnityEngine::Color32 value);
    // Get static field: static private readonly UnityEngine.Vector3 k_DefaultNormal
    static ::UnityEngine::Vector3 _get_k_DefaultNormal();
    // Set static field: static private readonly UnityEngine.Vector3 k_DefaultNormal
    static void _set_k_DefaultNormal(::UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector4 k_DefaultTangent
    static ::UnityEngine::Vector4 _get_k_DefaultTangent();
    // Set static field: static private readonly UnityEngine.Vector4 k_DefaultTangent
    static void _set_k_DefaultTangent(::UnityEngine::Vector4 value);
    // Get static field: static private readonly UnityEngine.Bounds k_DefaultBounds
    static ::UnityEngine::Bounds _get_k_DefaultBounds();
    // Set static field: static private readonly UnityEngine.Bounds k_DefaultBounds
    static void _set_k_DefaultBounds(::UnityEngine::Bounds value);
    // Get instance field reference: public UnityEngine.Mesh mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_mesh();
    // Get instance field reference: public System.Int32 vertexCount
    [[deprecated("Use field access instead!")]] int& dyn_vertexCount();
    // Get instance field reference: public UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: public UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: public UnityEngine.Vector4[] tangents
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_tangents();
    // Get instance field reference: public UnityEngine.Vector4[] uvs0
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_uvs0();
    // Get instance field reference: public UnityEngine.Vector2[] uvs2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uvs2();
    // Get instance field reference: public UnityEngine.Color32[] colors32
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_colors32();
    // Get instance field reference: public System.Int32[] triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triangles();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // public System.Void .ctor(System.Int32 size)
    // Offset: 0x554FE98
    MeshInfo(int size);
    // System.Void ResizeMeshInfo(System.Int32 size)
    // Offset: 0x555043C
    void ResizeMeshInfo(int size);
    // System.Void Clear(System.Boolean uploadChanges)
    // Offset: 0x5550634
    void Clear(bool uploadChanges);
    // System.Void ClearUnusedVertices()
    // Offset: 0x5550660
    void ClearUnusedVertices();
    // System.Void SortGeometry(UnityEngine.TextCore.Text.VertexSortingOrder order)
    // Offset: 0x555069C
    void SortGeometry(::UnityEngine::TextCore::Text::VertexSortingOrder order);
    // System.Void SwapVertexData(System.Int32 src, System.Int32 dst)
    // Offset: 0x5550714
    void SwapVertexData(int src, int dst);
    // static private System.Void .cctor()
    // Offset: 0x5550CA0
    static void _cctor();
  }; // UnityEngine.TextCore.Text.MeshInfo
  #pragma pack(pop)
  static check_size<sizeof(MeshInfo), 72 + sizeof(::UnityEngine::Material*)> __UnityEngine_TextCore_Text_MeshInfoSizeCheck;
  static_assert(sizeof(MeshInfo) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::MeshInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::ResizeMeshInfo
// Il2CppName: ResizeMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::MeshInfo::*)(int)>(&UnityEngine::TextCore::Text::MeshInfo::ResizeMeshInfo)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), "ResizeMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::MeshInfo::*)(bool)>(&UnityEngine::TextCore::Text::MeshInfo::Clear)> {
  static const MethodInfo* get() {
    static auto* uploadChanges = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uploadChanges});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::ClearUnusedVertices
// Il2CppName: ClearUnusedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::MeshInfo::*)()>(&UnityEngine::TextCore::Text::MeshInfo::ClearUnusedVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), "ClearUnusedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::SortGeometry
// Il2CppName: SortGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::MeshInfo::*)(::UnityEngine::TextCore::Text::VertexSortingOrder)>(&UnityEngine::TextCore::Text::MeshInfo::SortGeometry)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "VertexSortingOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), "SortGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::SwapVertexData
// Il2CppName: SwapVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::MeshInfo::*)(int, int)>(&UnityEngine::TextCore::Text::MeshInfo::SwapVertexData)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), "SwapVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MeshInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::TextCore::Text::MeshInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MeshInfo), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
