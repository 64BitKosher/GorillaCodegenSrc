// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.TextCore.Text.FontStyles
#include "UnityEngine/TextCore/Text/FontStyles.hpp"
// Including type: UnityEngine.TextCore.Text.TextAlignment
#include "UnityEngine/TextCore/Text/TextAlignment.hpp"
// Including type: UnityEngine.TextCore.Text.TextOverflowMode
#include "UnityEngine/TextCore/Text/TextOverflowMode.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.TextCore.Text.TextWrappingMode
#include "UnityEngine/TextCore/Text/TextWrappingMode.hpp"
// Including type: UnityEngine.TextCore.Text.TextFontWeight
#include "UnityEngine/TextCore/Text/TextFontWeight.hpp"
// Including type: UnityEngine.TextCore.Text.TextureMapping
#include "UnityEngine/TextCore/Text/TextureMapping.hpp"
// Including type: UnityEngine.TextCore.Text.VertexSortingOrder
#include "UnityEngine/TextCore/Text/VertexSortingOrder.hpp"
// Including type: UnityEngine.TextCore.Text.TextInputSource
#include "UnityEngine/TextCore/Text/TextInputSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontAsset
  class FontAsset;
  // Forward declaring type: SpriteAsset
  class SpriteAsset;
  // Forward declaring type: TextStyleSheet
  class TextStyleSheet;
  // Forward declaring type: TextSettings
  class TextSettings;
  // Forward declaring type: TextColorGradient
  class TextColorGradient;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextGenerationSettings
  class TextGenerationSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextCore::Text::TextGenerationSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextGenerationSettings*, "UnityEngine.TextCore.Text", "TextGenerationSettings");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextCore.Text.TextGenerationSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class TextGenerationSettings : public ::Il2CppObject/*, public ::System::IEquatable_1<::UnityEngine::TextCore::Text::TextGenerationSettings*>*/ {
    public:
    public:
    // public System.String text
    // Size: 0x8
    // Offset: 0x10
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Rect screenRect
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Rect screenRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Vector4 margins
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Vector4 margins;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x38
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: scale and: fontAsset
    char __padding3[0x4] = {};
    // public UnityEngine.TextCore.Text.FontAsset fontAsset
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::TextCore::Text::FontAsset* fontAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.TextCore.Text.SpriteAsset spriteAsset
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::TextCore::Text::SpriteAsset* spriteAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::SpriteAsset*) == 0x8);
    // public UnityEngine.TextCore.Text.TextStyleSheet styleSheet
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::TextCore::Text::TextStyleSheet* styleSheet;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextStyleSheet*) == 0x8);
    // public UnityEngine.TextCore.Text.FontStyles fontStyle
    // Size: 0x4
    // Offset: 0x60
    ::UnityEngine::TextCore::Text::FontStyles fontStyle;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontStyles) == 0x4);
    // Padding between fields: fontStyle and: textSettings
    char __padding8[0x4] = {};
    // public UnityEngine.TextCore.Text.TextSettings textSettings
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::TextCore::Text::TextSettings* textSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextSettings*) == 0x8);
    // public UnityEngine.TextCore.Text.TextAlignment textAlignment
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::TextCore::Text::TextAlignment textAlignment;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextAlignment) == 0x4);
    // public UnityEngine.TextCore.Text.TextOverflowMode overflowMode
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::TextCore::Text::TextOverflowMode overflowMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextOverflowMode) == 0x4);
    // public System.Boolean wordWrap
    // Size: 0x1
    // Offset: 0x78
    bool wordWrap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wordWrap and: wordWrappingRatio
    char __padding12[0x3] = {};
    // public System.Single wordWrappingRatio
    // Size: 0x4
    // Offset: 0x7C
    float wordWrappingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.TextCore.Text.TextColorGradient fontColorGradient
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::TextCore::Text::TextColorGradient* fontColorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextColorGradient*) == 0x8);
    // public UnityEngine.TextCore.Text.TextColorGradient fontColorGradientPreset
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::TextCore::Text::TextColorGradient* fontColorGradientPreset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextColorGradient*) == 0x8);
    // public System.Boolean tintSprites
    // Size: 0x1
    // Offset: 0xA0
    bool tintSprites;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean overrideRichTextColors
    // Size: 0x1
    // Offset: 0xA1
    bool overrideRichTextColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shouldConvertToLinearSpace
    // Size: 0x1
    // Offset: 0xA2
    bool shouldConvertToLinearSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldConvertToLinearSpace and: fontSize
    char __padding19[0x1] = {};
    // public System.Single fontSize
    // Size: 0x4
    // Offset: 0xA4
    float fontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean autoSize
    // Size: 0x1
    // Offset: 0xA8
    bool autoSize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoSize and: fontSizeMin
    char __padding21[0x3] = {};
    // public System.Single fontSizeMin
    // Size: 0x4
    // Offset: 0xAC
    float fontSizeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fontSizeMax
    // Size: 0x4
    // Offset: 0xB0
    float fontSizeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean enableKerning
    // Size: 0x1
    // Offset: 0xB4
    bool enableKerning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean richText
    // Size: 0x1
    // Offset: 0xB5
    bool richText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isRightToLeft
    // Size: 0x1
    // Offset: 0xB6
    bool isRightToLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRightToLeft and: extraPadding
    char __padding26[0x1] = {};
    // public System.Single extraPadding
    // Size: 0x4
    // Offset: 0xB8
    float extraPadding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean parseControlCharacters
    // Size: 0x1
    // Offset: 0xBC
    bool parseControlCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isOrthographic
    // Size: 0x1
    // Offset: 0xBD
    bool isOrthographic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean tagNoParsing
    // Size: 0x1
    // Offset: 0xBE
    bool tagNoParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tagNoParsing and: characterSpacing
    char __padding30[0x1] = {};
    // public System.Single characterSpacing
    // Size: 0x4
    // Offset: 0xC0
    float characterSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single wordSpacing
    // Size: 0x4
    // Offset: 0xC4
    float wordSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineSpacing
    // Size: 0x4
    // Offset: 0xC8
    float lineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single paragraphSpacing
    // Size: 0x4
    // Offset: 0xCC
    float paragraphSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineSpacingMax
    // Size: 0x4
    // Offset: 0xD0
    float lineSpacingMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.TextCore.Text.TextWrappingMode textWrappingMode
    // Size: 0x4
    // Offset: 0xD4
    ::UnityEngine::TextCore::Text::TextWrappingMode textWrappingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextWrappingMode) == 0x4);
    // public System.Int32 maxVisibleCharacters
    // Size: 0x4
    // Offset: 0xD8
    int maxVisibleCharacters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxVisibleWords
    // Size: 0x4
    // Offset: 0xDC
    int maxVisibleWords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxVisibleLines
    // Size: 0x4
    // Offset: 0xE0
    int maxVisibleLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 firstVisibleCharacter
    // Size: 0x4
    // Offset: 0xE4
    int firstVisibleCharacter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useMaxVisibleDescender
    // Size: 0x1
    // Offset: 0xE8
    bool useMaxVisibleDescender;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useMaxVisibleDescender and: fontWeight
    char __padding41[0x3] = {};
    // public UnityEngine.TextCore.Text.TextFontWeight fontWeight
    // Size: 0x4
    // Offset: 0xEC
    ::UnityEngine::TextCore::Text::TextFontWeight fontWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextFontWeight) == 0x4);
    // public System.Int32 pageToDisplay
    // Size: 0x4
    // Offset: 0xF0
    int pageToDisplay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.TextCore.Text.TextureMapping horizontalMapping
    // Size: 0x4
    // Offset: 0xF4
    ::UnityEngine::TextCore::Text::TextureMapping horizontalMapping;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextureMapping) == 0x4);
    // public UnityEngine.TextCore.Text.TextureMapping verticalMapping
    // Size: 0x4
    // Offset: 0xF8
    ::UnityEngine::TextCore::Text::TextureMapping verticalMapping;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextureMapping) == 0x4);
    // public System.Single uvLineOffset
    // Size: 0x4
    // Offset: 0xFC
    float uvLineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.TextCore.Text.VertexSortingOrder geometrySortingOrder
    // Size: 0x4
    // Offset: 0x100
    ::UnityEngine::TextCore::Text::VertexSortingOrder geometrySortingOrder;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::VertexSortingOrder) == 0x4);
    // public System.Boolean inverseYAxis
    // Size: 0x1
    // Offset: 0x104
    bool inverseYAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inverseYAxis and: charWidthMaxAdj
    char __padding48[0x3] = {};
    // public System.Single charWidthMaxAdj
    // Size: 0x4
    // Offset: 0x108
    float charWidthMaxAdj;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.TextCore.Text.TextInputSource inputSource
    // Size: 0x4
    // Offset: 0x10C
    ::UnityEngine::TextCore::Text::TextInputSource inputSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextInputSource) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::TextCore::Text::TextGenerationSettings*>
    operator ::System::IEquatable_1<::UnityEngine::TextCore::Text::TextGenerationSettings*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::TextCore::Text::TextGenerationSettings*>*>(this);
    }
    // Get instance field reference: public System.String text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_text();
    // Get instance field reference: public UnityEngine.Rect screenRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_screenRect();
    // Get instance field reference: public UnityEngine.Vector4 margins
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_margins();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public UnityEngine.TextCore.Text.FontAsset fontAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_fontAsset();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.TextCore.Text.SpriteAsset spriteAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::SpriteAsset*& dyn_spriteAsset();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextStyleSheet styleSheet
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextStyleSheet*& dyn_styleSheet();
    // Get instance field reference: public UnityEngine.TextCore.Text.FontStyles fontStyle
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontStyles& dyn_fontStyle();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextSettings textSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextSettings*& dyn_textSettings();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextAlignment textAlignment
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextAlignment& dyn_textAlignment();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextOverflowMode overflowMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextOverflowMode& dyn_overflowMode();
    // Get instance field reference: public System.Boolean wordWrap
    [[deprecated("Use field access instead!")]] bool& dyn_wordWrap();
    // Get instance field reference: public System.Single wordWrappingRatio
    [[deprecated("Use field access instead!")]] float& dyn_wordWrappingRatio();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextColorGradient fontColorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextColorGradient*& dyn_fontColorGradient();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextColorGradient fontColorGradientPreset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextColorGradient*& dyn_fontColorGradientPreset();
    // Get instance field reference: public System.Boolean tintSprites
    [[deprecated("Use field access instead!")]] bool& dyn_tintSprites();
    // Get instance field reference: public System.Boolean overrideRichTextColors
    [[deprecated("Use field access instead!")]] bool& dyn_overrideRichTextColors();
    // Get instance field reference: public System.Boolean shouldConvertToLinearSpace
    [[deprecated("Use field access instead!")]] bool& dyn_shouldConvertToLinearSpace();
    // Get instance field reference: public System.Single fontSize
    [[deprecated("Use field access instead!")]] float& dyn_fontSize();
    // Get instance field reference: public System.Boolean autoSize
    [[deprecated("Use field access instead!")]] bool& dyn_autoSize();
    // Get instance field reference: public System.Single fontSizeMin
    [[deprecated("Use field access instead!")]] float& dyn_fontSizeMin();
    // Get instance field reference: public System.Single fontSizeMax
    [[deprecated("Use field access instead!")]] float& dyn_fontSizeMax();
    // Get instance field reference: public System.Boolean enableKerning
    [[deprecated("Use field access instead!")]] bool& dyn_enableKerning();
    // Get instance field reference: public System.Boolean richText
    [[deprecated("Use field access instead!")]] bool& dyn_richText();
    // Get instance field reference: public System.Boolean isRightToLeft
    [[deprecated("Use field access instead!")]] bool& dyn_isRightToLeft();
    // Get instance field reference: public System.Single extraPadding
    [[deprecated("Use field access instead!")]] float& dyn_extraPadding();
    // Get instance field reference: public System.Boolean parseControlCharacters
    [[deprecated("Use field access instead!")]] bool& dyn_parseControlCharacters();
    // Get instance field reference: public System.Boolean isOrthographic
    [[deprecated("Use field access instead!")]] bool& dyn_isOrthographic();
    // Get instance field reference: public System.Boolean tagNoParsing
    [[deprecated("Use field access instead!")]] bool& dyn_tagNoParsing();
    // Get instance field reference: public System.Single characterSpacing
    [[deprecated("Use field access instead!")]] float& dyn_characterSpacing();
    // Get instance field reference: public System.Single wordSpacing
    [[deprecated("Use field access instead!")]] float& dyn_wordSpacing();
    // Get instance field reference: public System.Single lineSpacing
    [[deprecated("Use field access instead!")]] float& dyn_lineSpacing();
    // Get instance field reference: public System.Single paragraphSpacing
    [[deprecated("Use field access instead!")]] float& dyn_paragraphSpacing();
    // Get instance field reference: public System.Single lineSpacingMax
    [[deprecated("Use field access instead!")]] float& dyn_lineSpacingMax();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextWrappingMode textWrappingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextWrappingMode& dyn_textWrappingMode();
    // Get instance field reference: public System.Int32 maxVisibleCharacters
    [[deprecated("Use field access instead!")]] int& dyn_maxVisibleCharacters();
    // Get instance field reference: public System.Int32 maxVisibleWords
    [[deprecated("Use field access instead!")]] int& dyn_maxVisibleWords();
    // Get instance field reference: public System.Int32 maxVisibleLines
    [[deprecated("Use field access instead!")]] int& dyn_maxVisibleLines();
    // Get instance field reference: public System.Int32 firstVisibleCharacter
    [[deprecated("Use field access instead!")]] int& dyn_firstVisibleCharacter();
    // Get instance field reference: public System.Boolean useMaxVisibleDescender
    [[deprecated("Use field access instead!")]] bool& dyn_useMaxVisibleDescender();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextFontWeight fontWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextFontWeight& dyn_fontWeight();
    // Get instance field reference: public System.Int32 pageToDisplay
    [[deprecated("Use field access instead!")]] int& dyn_pageToDisplay();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextureMapping horizontalMapping
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextureMapping& dyn_horizontalMapping();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextureMapping verticalMapping
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextureMapping& dyn_verticalMapping();
    // Get instance field reference: public System.Single uvLineOffset
    [[deprecated("Use field access instead!")]] float& dyn_uvLineOffset();
    // Get instance field reference: public UnityEngine.TextCore.Text.VertexSortingOrder geometrySortingOrder
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::VertexSortingOrder& dyn_geometrySortingOrder();
    // Get instance field reference: public System.Boolean inverseYAxis
    [[deprecated("Use field access instead!")]] bool& dyn_inverseYAxis();
    // Get instance field reference: public System.Single charWidthMaxAdj
    [[deprecated("Use field access instead!")]] float& dyn_charWidthMaxAdj();
    // Get instance field reference: UnityEngine.TextCore.Text.TextInputSource inputSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextInputSource& dyn_inputSource();
    // public System.Boolean Equals(UnityEngine.TextCore.Text.TextGenerationSettings other)
    // Offset: 0x5554040
    bool Equals(::UnityEngine::TextCore::Text::TextGenerationSettings* other);
    // public System.Void .ctor()
    // Offset: 0x5556AE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextGenerationSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextGenerationSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextGenerationSettings*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x55544E8
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x55545F4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x5554AA4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.TextCore.Text.TextGenerationSettings
  #pragma pack(pop)
  static check_size<sizeof(TextGenerationSettings), 268 + sizeof(::UnityEngine::TextCore::Text::TextInputSource)> __UnityEngine_TextCore_Text_TextGenerationSettingsSizeCheck;
  static_assert(sizeof(TextGenerationSettings) == 0x110);
  // static public System.Boolean op_Equality(UnityEngine.TextCore.Text.TextGenerationSettings left, UnityEngine.TextCore.Text.TextGenerationSettings right)
  // Offset: 0x5554A9C
  bool operator ==(::UnityEngine::TextCore::Text::TextGenerationSettings* left, ::UnityEngine::TextCore::Text::TextGenerationSettings& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TextCore::Text::TextGenerationSettings::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*)>(&UnityEngine::TextCore::Text::TextGenerationSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerationSettings*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TextCore::Text::TextGenerationSettings::*)(::Il2CppObject*)>(&UnityEngine::TextCore::Text::TextGenerationSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerationSettings*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::TextGenerationSettings::*)()>(&UnityEngine::TextCore::Text::TextGenerationSettings::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerationSettings*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TextCore::Text::TextGenerationSettings::*)()>(&UnityEngine::TextCore::Text::TextGenerationSettings::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerationSettings*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerationSettings::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
