// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontAsset
  class FontAsset;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontWeightPair
  struct FontWeightPair;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::FontWeightPair, "UnityEngine.TextCore.Text", "FontWeightPair");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.FontWeightPair
  // [TokenAttribute] Offset: FFFFFFFF
  struct FontWeightPair/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.TextCore.Text.FontAsset regularTypeface
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::TextCore::Text::FontAsset* regularTypeface;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
    // public UnityEngine.TextCore.Text.FontAsset italicTypeface
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::TextCore::Text::FontAsset* italicTypeface;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
    public:
    // Creating value type constructor for type: FontWeightPair
    constexpr FontWeightPair(::UnityEngine::TextCore::Text::FontAsset* regularTypeface_ = {}, ::UnityEngine::TextCore::Text::FontAsset* italicTypeface_ = {}) noexcept : regularTypeface{regularTypeface_}, italicTypeface{italicTypeface_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.TextCore.Text.FontAsset regularTypeface
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_regularTypeface();
    // Get instance field reference: public UnityEngine.TextCore.Text.FontAsset italicTypeface
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_italicTypeface();
  }; // UnityEngine.TextCore.Text.FontWeightPair
  #pragma pack(pop)
  static check_size<sizeof(FontWeightPair), 8 + sizeof(::UnityEngine::TextCore::Text::FontAsset*)> __UnityEngine_TextCore_Text_FontWeightPairSizeCheck;
  static_assert(sizeof(FontWeightPair) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
