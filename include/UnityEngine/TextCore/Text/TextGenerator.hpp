// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextCore.Text.TextBackingContainer
#include "UnityEngine/TextCore/Text/TextBackingContainer.hpp"
// Including type: UnityEngine.TextCore.Text.TextProcessingElement
#include "UnityEngine/TextCore/Text/TextProcessingElement.hpp"
// Including type: UnityEngine.TextCore.Text.HighlightState
#include "UnityEngine/TextCore/Text/HighlightState.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.TextCore.Text.TextProcessingStack`1
#include "UnityEngine/TextCore/Text/TextProcessingStack_1.hpp"
// Including type: UnityEngine.TextCore.Text.MaterialReference
#include "UnityEngine/TextCore/Text/MaterialReference.hpp"
// Including type: UnityEngine.TextCore.Text.FontStyles
#include "UnityEngine/TextCore/Text/FontStyles.hpp"
// Including type: UnityEngine.TextCore.Text.FontStyleStack
#include "UnityEngine/TextCore/Text/FontStyleStack.hpp"
// Including type: UnityEngine.TextCore.Text.TextFontWeight
#include "UnityEngine/TextCore/Text/TextFontWeight.hpp"
// Including type: UnityEngine.TextCore.Text.TextAlignment
#include "UnityEngine/TextCore/Text/TextAlignment.hpp"
// Including type: UnityEngine.TextCore.Text.Extents
#include "UnityEngine/TextCore/Text/Extents.hpp"
// Including type: UnityEngine.TextCore.Text.WordWrapState
#include "UnityEngine/TextCore/Text/WordWrapState.hpp"
// Including type: UnityEngine.TextCore.Text.TextElementType
#include "UnityEngine/TextCore/Text/TextElementType.hpp"
// Including type: UnityEngine.TextCore.Text.RichTextTagAttribute
#include "UnityEngine/TextCore/Text/RichTextTagAttribute.hpp"
// Including type: UnityEngine.TextCore.Text.TextElementInfo
#include "UnityEngine/TextCore/Text/TextElementInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontAsset
  class FontAsset;
  // Forward declaring type: SpriteAsset
  class SpriteAsset;
  // Forward declaring type: TextColorGradient
  class TextColorGradient;
  // Forward declaring type: TextElement
  class TextElement;
  // Forward declaring type: TextGenerationSettings
  class TextGenerationSettings;
  // Forward declaring type: TextInfo
  class TextInfo;
  // Forward declaring type: TextWrappingMode
  struct TextWrappingMode;
  // Forward declaring type: Character
  class Character;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Vector4 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextGenerator
  class TextGenerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextCore::Text::TextGenerator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextGenerator*, "UnityEngine.TextCore.Text", "TextGenerator");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.TextCore.Text.TextGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class TextGenerator : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::TextCore::Text::TextGenerator::MissingCharacterEventCallback
    class MissingCharacterEventCallback;
    // Nested type: ::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter
    struct SpecialCharacter;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpecialCharacter/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.TextCore.Text.Character character
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::TextCore::Text::Character* character;
      // Field size check
      static_assert(sizeof(::UnityEngine::TextCore::Text::Character*) == 0x8);
      // public UnityEngine.TextCore.Text.FontAsset fontAsset
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::TextCore::Text::FontAsset* fontAsset;
      // Field size check
      static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
      // public UnityEngine.Material material
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Material* material;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public System.Int32 materialIndex
      // Size: 0x4
      // Offset: 0x18
      int materialIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpecialCharacter
      constexpr SpecialCharacter(::UnityEngine::TextCore::Text::Character* character_ = {}, ::UnityEngine::TextCore::Text::FontAsset* fontAsset_ = {}, ::UnityEngine::Material* material_ = {}, int materialIndex_ = {}) noexcept : character{character_}, fontAsset{fontAsset_}, material{material_}, materialIndex{materialIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.TextCore.Text.Character character
      [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::Character*& dyn_character();
      // Get instance field reference: public UnityEngine.TextCore.Text.FontAsset fontAsset
      [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_fontAsset();
      // Get instance field reference: public UnityEngine.Material material
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
      // Get instance field reference: public System.Int32 materialIndex
      [[deprecated("Use field access instead!")]] int& dyn_materialIndex();
      // public System.Void .ctor(UnityEngine.TextCore.Text.Character character, System.Int32 materialIndex)
      // Offset: 0x556C068
      SpecialCharacter(::UnityEngine::TextCore::Text::Character* character, int materialIndex);
    }; // UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter
    #pragma pack(pop)
    static check_size<sizeof(TextGenerator::SpecialCharacter), 24 + sizeof(int)> __UnityEngine_TextCore_Text_TextGenerator_SpecialCharacterSizeCheck;
    static_assert(sizeof(TextGenerator::SpecialCharacter) == 0x1C);
    public:
    // private UnityEngine.TextCore.Text.TextBackingContainer m_TextBackingArray
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::TextCore::Text::TextBackingContainer m_TextBackingArray;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextBackingContainer) == 0xC);
    // UnityEngine.TextCore.Text.TextProcessingElement[] m_TextProcessingArray
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement> m_TextProcessingArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement>) == 0x8);
    // System.Int32 m_InternalTextProcessingArraySize
    // Size: 0x4
    // Offset: 0x28
    int m_InternalTextProcessingArraySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_VertexBufferAutoSizeReduction
    // Size: 0x1
    // Offset: 0x2C
    bool m_VertexBufferAutoSizeReduction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Char[] m_HtmlTag
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Il2CppChar> m_HtmlTag;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // UnityEngine.TextCore.Text.HighlightState m_HighlightState
    // Size: 0x14
    // Offset: 0x38
    ::UnityEngine::TextCore::Text::HighlightState m_HighlightState;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::HighlightState) == 0x14);
    // protected System.Boolean m_IsIgnoringAlignment
    // Size: 0x1
    // Offset: 0x4C
    bool m_IsIgnoringAlignment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3[] m_RectTransformCorners
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Vector3> m_RectTransformCorners;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Single m_MarginWidth
    // Size: 0x4
    // Offset: 0x58
    float m_MarginWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MarginHeight
    // Size: 0x4
    // Offset: 0x5C
    float m_MarginHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PreferredWidth
    // Size: 0x4
    // Offset: 0x60
    float m_PreferredWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PreferredHeight
    // Size: 0x4
    // Offset: 0x64
    float m_PreferredHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.FontAsset m_CurrentFontAsset
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::TextCore::Text::FontAsset* m_CurrentFontAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
    // private UnityEngine.Material m_CurrentMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* m_CurrentMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 m_CurrentMaterialIndex
    // Size: 0x4
    // Offset: 0x78
    int m_CurrentMaterialIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.MaterialReference> m_MaterialReferenceStack
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::MaterialReference> m_MaterialReferenceStack;
    // private System.Single m_Padding
    // Size: 0x4
    // Offset: 0xD8
    float m_Padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.SpriteAsset m_CurrentSpriteAsset
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::TextCore::Text::SpriteAsset* m_CurrentSpriteAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::SpriteAsset*) == 0x8);
    // private System.Int32 m_TotalCharacterCount
    // Size: 0x4
    // Offset: 0xE8
    int m_TotalCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_FontSize
    // Size: 0x4
    // Offset: 0xEC
    float m_FontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_FontScaleMultiplier
    // Size: 0x4
    // Offset: 0xF0
    float m_FontScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_CurrentFontSize
    // Size: 0x4
    // Offset: 0xF4
    float m_CurrentFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_SizeStack
    // Size: 0xFFFFFFFF
    // Offset: 0xF8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<float> m_SizeStack;
    // protected UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32>[] m_TextStyleStacks
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::UnityEngine::TextCore::Text::TextProcessingStack_1<int>> m_TextStyleStacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingStack_1<int>>) == 0x8);
    // protected System.Int32 m_TextStyleStackDepth
    // Size: 0x4
    // Offset: 0x120
    int m_TextStyleStackDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextCore.Text.FontStyles m_FontStyleInternal
    // Size: 0x4
    // Offset: 0x124
    ::UnityEngine::TextCore::Text::FontStyles m_FontStyleInternal;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontStyles) == 0x4);
    // private UnityEngine.TextCore.Text.FontStyleStack m_FontStyleStack
    // Size: 0xA
    // Offset: 0x128
    ::UnityEngine::TextCore::Text::FontStyleStack m_FontStyleStack;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontStyleStack) == 0xA);
    // private UnityEngine.TextCore.Text.TextFontWeight m_FontWeightInternal
    // Size: 0x4
    // Offset: 0x134
    ::UnityEngine::TextCore::Text::TextFontWeight m_FontWeightInternal;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextFontWeight) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextFontWeight> m_FontWeightStack
    // Size: 0xFFFFFFFF
    // Offset: 0x138
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextFontWeight> m_FontWeightStack;
    // private UnityEngine.TextCore.Text.TextAlignment m_LineJustification
    // Size: 0x4
    // Offset: 0x158
    ::UnityEngine::TextCore::Text::TextAlignment m_LineJustification;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextAlignment) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextAlignment> m_LineJustificationStack
    // Size: 0xFFFFFFFF
    // Offset: 0x160
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextAlignment> m_LineJustificationStack;
    // private System.Single m_BaselineOffset
    // Size: 0x4
    // Offset: 0x180
    float m_BaselineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_BaselineOffsetStack
    // Size: 0xFFFFFFFF
    // Offset: 0x188
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<float> m_BaselineOffsetStack;
    // private UnityEngine.Color32 m_FontColor32
    // Size: 0x4
    // Offset: 0x1A8
    ::UnityEngine::Color32 m_FontColor32;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.Color32 m_HtmlColor
    // Size: 0x4
    // Offset: 0x1AC
    ::UnityEngine::Color32 m_HtmlColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.Color32 m_UnderlineColor
    // Size: 0x4
    // Offset: 0x1B0
    ::UnityEngine::Color32 m_UnderlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.Color32 m_StrikethroughColor
    // Size: 0x4
    // Offset: 0x1B4
    ::UnityEngine::Color32 m_StrikethroughColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_ColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1B8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32> m_ColorStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_UnderlineColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1D8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32> m_UnderlineColorStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_StrikethroughColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1F8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32> m_StrikethroughColorStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_HighlightColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x218
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32> m_HighlightColorStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.HighlightState> m_HighlightStateStack
    // Size: 0xFFFFFFFF
    // Offset: 0x238
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::HighlightState> m_HighlightStateStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_ItalicAngleStack
    // Size: 0xFFFFFFFF
    // Offset: 0x268
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<int> m_ItalicAngleStack;
    // private UnityEngine.TextCore.Text.TextColorGradient m_ColorGradientPreset
    // Size: 0x8
    // Offset: 0x288
    ::UnityEngine::TextCore::Text::TextColorGradient* m_ColorGradientPreset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextColorGradient*) == 0x8);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextColorGradient> m_ColorGradientStack
    // Size: 0xFFFFFFFF
    // Offset: 0x290
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextColorGradient*> m_ColorGradientStack;
    // private System.Boolean m_ColorGradientPresetIsTinted
    // Size: 0x1
    // Offset: 0x2B8
    bool m_ColorGradientPresetIsTinted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_ActionStack
    // Size: 0xFFFFFFFF
    // Offset: 0x2C0
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<int> m_ActionStack;
    // private System.Single m_LineOffset
    // Size: 0x4
    // Offset: 0x2E0
    float m_LineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LineHeight
    // Size: 0x4
    // Offset: 0x2E4
    float m_LineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsDrivenLineSpacing
    // Size: 0x1
    // Offset: 0x2E8
    bool m_IsDrivenLineSpacing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_CSpacing
    // Size: 0x4
    // Offset: 0x2EC
    float m_CSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MonoSpacing
    // Size: 0x4
    // Offset: 0x2F0
    float m_MonoSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_XAdvance
    // Size: 0x4
    // Offset: 0x2F4
    float m_XAdvance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TagLineIndent
    // Size: 0x4
    // Offset: 0x2F8
    float m_TagLineIndent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TagIndent
    // Size: 0x4
    // Offset: 0x2FC
    float m_TagIndent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_IndentStack
    // Size: 0xFFFFFFFF
    // Offset: 0x300
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<float> m_IndentStack;
    // private System.Boolean m_TagNoParsing
    // Size: 0x1
    // Offset: 0x320
    bool m_TagNoParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_CharacterCount
    // Size: 0x4
    // Offset: 0x324
    int m_CharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_FirstCharacterOfLine
    // Size: 0x4
    // Offset: 0x328
    int m_FirstCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_LastCharacterOfLine
    // Size: 0x4
    // Offset: 0x32C
    int m_LastCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_FirstVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x330
    int m_FirstVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_LastVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x334
    int m_LastVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_MaxLineAscender
    // Size: 0x4
    // Offset: 0x338
    float m_MaxLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxLineDescender
    // Size: 0x4
    // Offset: 0x33C
    float m_MaxLineDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_LineNumber
    // Size: 0x4
    // Offset: 0x340
    int m_LineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_LineVisibleCharacterCount
    // Size: 0x4
    // Offset: 0x344
    int m_LineVisibleCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_LineVisibleSpaceCount
    // Size: 0x4
    // Offset: 0x348
    int m_LineVisibleSpaceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_FirstOverflowCharacterIndex
    // Size: 0x4
    // Offset: 0x34C
    int m_FirstOverflowCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_PageNumber
    // Size: 0x4
    // Offset: 0x350
    int m_PageNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_MarginLeft
    // Size: 0x4
    // Offset: 0x354
    float m_MarginLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MarginRight
    // Size: 0x4
    // Offset: 0x358
    float m_MarginRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Width
    // Size: 0x4
    // Offset: 0x35C
    float m_Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.Extents m_MeshExtents
    // Size: 0x10
    // Offset: 0x360
    ::UnityEngine::TextCore::Text::Extents m_MeshExtents;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::Extents) == 0x10);
    // private System.Single m_MaxCapHeight
    // Size: 0x4
    // Offset: 0x370
    float m_MaxCapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxAscender
    // Size: 0x4
    // Offset: 0x374
    float m_MaxAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxDescender
    // Size: 0x4
    // Offset: 0x378
    float m_MaxDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsNewPage
    // Size: 0x1
    // Offset: 0x37C
    bool m_IsNewPage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsNonBreakingSpace
    // Size: 0x1
    // Offset: 0x37D
    bool m_IsNonBreakingSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.TextCore.Text.WordWrapState m_SavedWordWrapState
    // Size: 0xFFFFFFFF
    // Offset: 0x380
    ::UnityEngine::TextCore::Text::WordWrapState m_SavedWordWrapState;
    // private UnityEngine.TextCore.Text.WordWrapState m_SavedLineState
    // Size: 0xFFFFFFFF
    // Offset: 0x718
    ::UnityEngine::TextCore::Text::WordWrapState m_SavedLineState;
    // private UnityEngine.TextCore.Text.WordWrapState m_SavedEllipsisState
    // Size: 0xFFFFFFFF
    // Offset: 0xAB0
    ::UnityEngine::TextCore::Text::WordWrapState m_SavedEllipsisState;
    // private UnityEngine.TextCore.Text.WordWrapState m_SavedLastValidState
    // Size: 0xFFFFFFFF
    // Offset: 0xE48
    ::UnityEngine::TextCore::Text::WordWrapState m_SavedLastValidState;
    // private UnityEngine.TextCore.Text.WordWrapState m_SavedSoftLineBreakState
    // Size: 0xFFFFFFFF
    // Offset: 0x11E0
    ::UnityEngine::TextCore::Text::WordWrapState m_SavedSoftLineBreakState;
    // private UnityEngine.TextCore.Text.TextElementType m_TextElementType
    // Size: 0x1
    // Offset: 0x1578
    ::UnityEngine::TextCore::Text::TextElementType m_TextElementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextElementType) == 0x1);
    // private System.Boolean m_isTextLayoutPhase
    // Size: 0x1
    // Offset: 0x1579
    bool m_isTextLayoutPhase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_SpriteIndex
    // Size: 0x4
    // Offset: 0x157C
    int m_SpriteIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color32 m_SpriteColor
    // Size: 0x4
    // Offset: 0x1580
    ::UnityEngine::Color32 m_SpriteColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.TextCore.Text.TextElement m_CachedTextElement
    // Size: 0x8
    // Offset: 0x1588
    ::UnityEngine::TextCore::Text::TextElement* m_CachedTextElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextElement*) == 0x8);
    // private UnityEngine.Color32 m_HighlightColor
    // Size: 0x4
    // Offset: 0x1590
    ::UnityEngine::Color32 m_HighlightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private System.Single m_CharWidthAdjDelta
    // Size: 0x4
    // Offset: 0x1594
    float m_CharWidthAdjDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxFontSize
    // Size: 0x4
    // Offset: 0x1598
    float m_MaxFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MinFontSize
    // Size: 0x4
    // Offset: 0x159C
    float m_MinFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_AutoSizeIterationCount
    // Size: 0x4
    // Offset: 0x15A0
    int m_AutoSizeIterationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AutoSizeMaxIterationCount
    // Size: 0x4
    // Offset: 0x15A4
    int m_AutoSizeMaxIterationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_IsAutoSizePointSizeSet
    // Size: 0x1
    // Offset: 0x15A8
    bool m_IsAutoSizePointSizeSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_StartOfLineAscender
    // Size: 0x4
    // Offset: 0x15AC
    float m_StartOfLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LineSpacingDelta
    // Size: 0x4
    // Offset: 0x15B0
    float m_LineSpacingDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.MaterialReference[] m_MaterialReferences
    // Size: 0x8
    // Offset: 0x15B8
    ::ArrayW<::UnityEngine::TextCore::Text::MaterialReference> m_MaterialReferences;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>) == 0x8);
    // private System.Int32 m_SpriteCount
    // Size: 0x4
    // Offset: 0x15C0
    int m_SpriteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_StyleStack
    // Size: 0xFFFFFFFF
    // Offset: 0x15C8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<int> m_StyleStack;
    // private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.WordWrapState> m_EllipsisInsertionCandidateStack
    // Size: 0xFFFFFFFF
    // Offset: 0x15E8
    ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::WordWrapState> m_EllipsisInsertionCandidateStack;
    // private System.Int32 m_SpriteAnimationId
    // Size: 0x4
    // Offset: 0x19A0
    int m_SpriteAnimationId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ItalicAngle
    // Size: 0x4
    // Offset: 0x19A4
    int m_ItalicAngle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 m_FXScale
    // Size: 0xC
    // Offset: 0x19A8
    ::UnityEngine::Vector3 m_FXScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_FXRotation
    // Size: 0x10
    // Offset: 0x19B4
    ::UnityEngine::Quaternion m_FXRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Int32 m_LastBaseGlyphIndex
    // Size: 0x4
    // Offset: 0x19C4
    int m_LastBaseGlyphIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_PageAscender
    // Size: 0x4
    // Offset: 0x19C8
    float m_PageAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.TextCore.Text.RichTextTagAttribute[] m_XmlAttribute
    // Size: 0x8
    // Offset: 0x19D0
    ::ArrayW<::UnityEngine::TextCore::Text::RichTextTagAttribute> m_XmlAttribute;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::RichTextTagAttribute>) == 0x8);
    // private System.Single[] m_AttributeParameterValues
    // Size: 0x8
    // Offset: 0x19D8
    ::ArrayW<float> m_AttributeParameterValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_MaterialReferenceIndexLookup
    // Size: 0x8
    // Offset: 0x19E0
    ::System::Collections::Generic::Dictionary_2<int, int>* m_MaterialReferenceIndexLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Boolean m_IsCalculatingPreferredValues
    // Size: 0x1
    // Offset: 0x19E8
    bool m_IsCalculatingPreferredValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.TextCore.Text.SpriteAsset m_DefaultSpriteAsset
    // Size: 0x8
    // Offset: 0x19F0
    ::UnityEngine::TextCore::Text::SpriteAsset* m_DefaultSpriteAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::SpriteAsset*) == 0x8);
    // private System.Boolean m_TintSprite
    // Size: 0x1
    // Offset: 0x19F8
    bool m_TintSprite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter m_Ellipsis
    // Size: 0x1C
    // Offset: 0x1A00
    ::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter m_Ellipsis;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter) == 0x1C);
    // protected UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter m_Underline
    // Size: 0x1C
    // Offset: 0x1A20
    ::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter m_Underline;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter) == 0x1C);
    // private UnityEngine.TextCore.Text.TextElementInfo[] m_InternalTextElementInfo
    // Size: 0x8
    // Offset: 0x1A40
    ::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo> m_InternalTextElementInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo>) == 0x8);
    public:
    // Get static field: static private UnityEngine.TextCore.Text.TextGenerator s_TextGenerator
    static ::UnityEngine::TextCore::Text::TextGenerator* _get_s_TextGenerator();
    // Set static field: static private UnityEngine.TextCore.Text.TextGenerator s_TextGenerator
    static void _set_s_TextGenerator(::UnityEngine::TextCore::Text::TextGenerator* value);
    // Get static field: static protected System.Boolean m_IsTextTruncated
    static bool _get_m_IsTextTruncated();
    // Set static field: static protected System.Boolean m_IsTextTruncated
    static void _set_m_IsTextTruncated(bool value);
    // Get static field: static private UnityEngine.TextCore.Text.TextGenerator/MissingCharacterEventCallback OnMissingCharacter
    static ::UnityEngine::TextCore::Text::TextGenerator::MissingCharacterEventCallback* _get_OnMissingCharacter();
    // Set static field: static private UnityEngine.TextCore.Text.TextGenerator/MissingCharacterEventCallback OnMissingCharacter
    static void _set_OnMissingCharacter(::UnityEngine::TextCore::Text::TextGenerator::MissingCharacterEventCallback* value);
    // Get instance field reference: private UnityEngine.TextCore.Text.TextBackingContainer m_TextBackingArray
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextBackingContainer& dyn_m_TextBackingArray();
    // Get instance field reference: UnityEngine.TextCore.Text.TextProcessingElement[] m_TextProcessingArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement>& dyn_m_TextProcessingArray();
    // Get instance field reference: System.Int32 m_InternalTextProcessingArraySize
    [[deprecated("Use field access instead!")]] int& dyn_m_InternalTextProcessingArraySize();
    // Get instance field reference: protected System.Boolean m_VertexBufferAutoSizeReduction
    [[deprecated("Use field access instead!")]] bool& dyn_m_VertexBufferAutoSizeReduction();
    // Get instance field reference: private System.Char[] m_HtmlTag
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_m_HtmlTag();
    // Get instance field reference: UnityEngine.TextCore.Text.HighlightState m_HighlightState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::HighlightState& dyn_m_HighlightState();
    // Get instance field reference: protected System.Boolean m_IsIgnoringAlignment
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsIgnoringAlignment();
    // Get instance field reference: private UnityEngine.Vector3[] m_RectTransformCorners
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_RectTransformCorners();
    // Get instance field reference: private System.Single m_MarginWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_MarginWidth();
    // Get instance field reference: private System.Single m_MarginHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_MarginHeight();
    // Get instance field reference: private System.Single m_PreferredWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_PreferredWidth();
    // Get instance field reference: private System.Single m_PreferredHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_PreferredHeight();
    // Get instance field reference: private UnityEngine.TextCore.Text.FontAsset m_CurrentFontAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_m_CurrentFontAsset();
    // Get instance field reference: private UnityEngine.Material m_CurrentMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CurrentMaterial();
    // Get instance field reference: private System.Int32 m_CurrentMaterialIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentMaterialIndex();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.MaterialReference> m_MaterialReferenceStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::MaterialReference>& dyn_m_MaterialReferenceStack();
    // Get instance field reference: private System.Single m_Padding
    [[deprecated("Use field access instead!")]] float& dyn_m_Padding();
    // Get instance field reference: private UnityEngine.TextCore.Text.SpriteAsset m_CurrentSpriteAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::SpriteAsset*& dyn_m_CurrentSpriteAsset();
    // Get instance field reference: private System.Int32 m_TotalCharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_TotalCharacterCount();
    // Get instance field reference: private System.Single m_FontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_FontSize();
    // Get instance field reference: private System.Single m_FontScaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_m_FontScaleMultiplier();
    // Get instance field reference: private System.Single m_CurrentFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_CurrentFontSize();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_SizeStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<float>& dyn_m_SizeStack();
    // Get instance field reference: protected UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32>[] m_TextStyleStacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::TextProcessingStack_1<int>>& dyn_m_TextStyleStacks();
    // Get instance field reference: protected System.Int32 m_TextStyleStackDepth
    [[deprecated("Use field access instead!")]] int& dyn_m_TextStyleStackDepth();
    // Get instance field reference: private UnityEngine.TextCore.Text.FontStyles m_FontStyleInternal
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontStyles& dyn_m_FontStyleInternal();
    // Get instance field reference: private UnityEngine.TextCore.Text.FontStyleStack m_FontStyleStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontStyleStack& dyn_m_FontStyleStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextFontWeight m_FontWeightInternal
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextFontWeight& dyn_m_FontWeightInternal();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextFontWeight> m_FontWeightStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextFontWeight>& dyn_m_FontWeightStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextAlignment m_LineJustification
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextAlignment& dyn_m_LineJustification();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextAlignment> m_LineJustificationStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextAlignment>& dyn_m_LineJustificationStack();
    // Get instance field reference: private System.Single m_BaselineOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_BaselineOffset();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_BaselineOffsetStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<float>& dyn_m_BaselineOffsetStack();
    // Get instance field reference: private UnityEngine.Color32 m_FontColor32
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_FontColor32();
    // Get instance field reference: private UnityEngine.Color32 m_HtmlColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_HtmlColor();
    // Get instance field reference: private UnityEngine.Color32 m_UnderlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_UnderlineColor();
    // Get instance field reference: private UnityEngine.Color32 m_StrikethroughColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_StrikethroughColor();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_ColorStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32>& dyn_m_ColorStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_UnderlineColorStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32>& dyn_m_UnderlineColorStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_StrikethroughColorStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32>& dyn_m_StrikethroughColorStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.Color32> m_HighlightColorStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::Color32>& dyn_m_HighlightColorStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.HighlightState> m_HighlightStateStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::HighlightState>& dyn_m_HighlightStateStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_ItalicAngleStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<int>& dyn_m_ItalicAngleStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextColorGradient m_ColorGradientPreset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextColorGradient*& dyn_m_ColorGradientPreset();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.TextColorGradient> m_ColorGradientStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::TextColorGradient*>& dyn_m_ColorGradientStack();
    // Get instance field reference: private System.Boolean m_ColorGradientPresetIsTinted
    [[deprecated("Use field access instead!")]] bool& dyn_m_ColorGradientPresetIsTinted();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_ActionStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<int>& dyn_m_ActionStack();
    // Get instance field reference: private System.Single m_LineOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_LineOffset();
    // Get instance field reference: private System.Single m_LineHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_LineHeight();
    // Get instance field reference: private System.Boolean m_IsDrivenLineSpacing
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsDrivenLineSpacing();
    // Get instance field reference: private System.Single m_CSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_CSpacing();
    // Get instance field reference: private System.Single m_MonoSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_MonoSpacing();
    // Get instance field reference: private System.Single m_XAdvance
    [[deprecated("Use field access instead!")]] float& dyn_m_XAdvance();
    // Get instance field reference: private System.Single m_TagLineIndent
    [[deprecated("Use field access instead!")]] float& dyn_m_TagLineIndent();
    // Get instance field reference: private System.Single m_TagIndent
    [[deprecated("Use field access instead!")]] float& dyn_m_TagIndent();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Single> m_IndentStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<float>& dyn_m_IndentStack();
    // Get instance field reference: private System.Boolean m_TagNoParsing
    [[deprecated("Use field access instead!")]] bool& dyn_m_TagNoParsing();
    // Get instance field reference: private System.Int32 m_CharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_CharacterCount();
    // Get instance field reference: private System.Int32 m_FirstCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_FirstCharacterOfLine();
    // Get instance field reference: private System.Int32 m_LastCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_LastCharacterOfLine();
    // Get instance field reference: private System.Int32 m_FirstVisibleCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_FirstVisibleCharacterOfLine();
    // Get instance field reference: private System.Int32 m_LastVisibleCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_LastVisibleCharacterOfLine();
    // Get instance field reference: private System.Single m_MaxLineAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxLineAscender();
    // Get instance field reference: private System.Single m_MaxLineDescender
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxLineDescender();
    // Get instance field reference: private System.Int32 m_LineNumber
    [[deprecated("Use field access instead!")]] int& dyn_m_LineNumber();
    // Get instance field reference: private System.Int32 m_LineVisibleCharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LineVisibleCharacterCount();
    // Get instance field reference: private System.Int32 m_LineVisibleSpaceCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LineVisibleSpaceCount();
    // Get instance field reference: private System.Int32 m_FirstOverflowCharacterIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_FirstOverflowCharacterIndex();
    // Get instance field reference: private System.Int32 m_PageNumber
    [[deprecated("Use field access instead!")]] int& dyn_m_PageNumber();
    // Get instance field reference: private System.Single m_MarginLeft
    [[deprecated("Use field access instead!")]] float& dyn_m_MarginLeft();
    // Get instance field reference: private System.Single m_MarginRight
    [[deprecated("Use field access instead!")]] float& dyn_m_MarginRight();
    // Get instance field reference: private System.Single m_Width
    [[deprecated("Use field access instead!")]] float& dyn_m_Width();
    // Get instance field reference: private UnityEngine.TextCore.Text.Extents m_MeshExtents
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::Extents& dyn_m_MeshExtents();
    // Get instance field reference: private System.Single m_MaxCapHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxCapHeight();
    // Get instance field reference: private System.Single m_MaxAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxAscender();
    // Get instance field reference: private System.Single m_MaxDescender
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDescender();
    // Get instance field reference: private System.Boolean m_IsNewPage
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsNewPage();
    // Get instance field reference: private System.Boolean m_IsNonBreakingSpace
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsNonBreakingSpace();
    // Get instance field reference: private UnityEngine.TextCore.Text.WordWrapState m_SavedWordWrapState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::WordWrapState& dyn_m_SavedWordWrapState();
    // Get instance field reference: private UnityEngine.TextCore.Text.WordWrapState m_SavedLineState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::WordWrapState& dyn_m_SavedLineState();
    // Get instance field reference: private UnityEngine.TextCore.Text.WordWrapState m_SavedEllipsisState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::WordWrapState& dyn_m_SavedEllipsisState();
    // Get instance field reference: private UnityEngine.TextCore.Text.WordWrapState m_SavedLastValidState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::WordWrapState& dyn_m_SavedLastValidState();
    // Get instance field reference: private UnityEngine.TextCore.Text.WordWrapState m_SavedSoftLineBreakState
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::WordWrapState& dyn_m_SavedSoftLineBreakState();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextElementType m_TextElementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextElementType& dyn_m_TextElementType();
    // Get instance field reference: private System.Boolean m_isTextLayoutPhase
    [[deprecated("Use field access instead!")]] bool& dyn_m_isTextLayoutPhase();
    // Get instance field reference: private System.Int32 m_SpriteIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_SpriteIndex();
    // Get instance field reference: private UnityEngine.Color32 m_SpriteColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_SpriteColor();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextElement m_CachedTextElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextElement*& dyn_m_CachedTextElement();
    // Get instance field reference: private UnityEngine.Color32 m_HighlightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_HighlightColor();
    // Get instance field reference: private System.Single m_CharWidthAdjDelta
    [[deprecated("Use field access instead!")]] float& dyn_m_CharWidthAdjDelta();
    // Get instance field reference: private System.Single m_MaxFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxFontSize();
    // Get instance field reference: private System.Single m_MinFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MinFontSize();
    // Get instance field reference: private System.Int32 m_AutoSizeIterationCount
    [[deprecated("Use field access instead!")]] int& dyn_m_AutoSizeIterationCount();
    // Get instance field reference: private System.Int32 m_AutoSizeMaxIterationCount
    [[deprecated("Use field access instead!")]] int& dyn_m_AutoSizeMaxIterationCount();
    // Get instance field reference: private System.Boolean m_IsAutoSizePointSizeSet
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsAutoSizePointSizeSet();
    // Get instance field reference: private System.Single m_StartOfLineAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_StartOfLineAscender();
    // Get instance field reference: private System.Single m_LineSpacingDelta
    [[deprecated("Use field access instead!")]] float& dyn_m_LineSpacingDelta();
    // Get instance field reference: private UnityEngine.TextCore.Text.MaterialReference[] m_MaterialReferences
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>& dyn_m_MaterialReferences();
    // Get instance field reference: private System.Int32 m_SpriteCount
    [[deprecated("Use field access instead!")]] int& dyn_m_SpriteCount();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<System.Int32> m_StyleStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<int>& dyn_m_StyleStack();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextProcessingStack`1<UnityEngine.TextCore.Text.WordWrapState> m_EllipsisInsertionCandidateStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingStack_1<::UnityEngine::TextCore::Text::WordWrapState>& dyn_m_EllipsisInsertionCandidateStack();
    // Get instance field reference: private System.Int32 m_SpriteAnimationId
    [[deprecated("Use field access instead!")]] int& dyn_m_SpriteAnimationId();
    // Get instance field reference: private System.Int32 m_ItalicAngle
    [[deprecated("Use field access instead!")]] int& dyn_m_ItalicAngle();
    // Get instance field reference: private UnityEngine.Vector3 m_FXScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_FXScale();
    // Get instance field reference: private UnityEngine.Quaternion m_FXRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_FXRotation();
    // Get instance field reference: private System.Int32 m_LastBaseGlyphIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LastBaseGlyphIndex();
    // Get instance field reference: private System.Single m_PageAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_PageAscender();
    // Get instance field reference: private UnityEngine.TextCore.Text.RichTextTagAttribute[] m_XmlAttribute
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::RichTextTagAttribute>& dyn_m_XmlAttribute();
    // Get instance field reference: private System.Single[] m_AttributeParameterValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_AttributeParameterValues();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_MaterialReferenceIndexLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_m_MaterialReferenceIndexLookup();
    // Get instance field reference: private System.Boolean m_IsCalculatingPreferredValues
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsCalculatingPreferredValues();
    // Get instance field reference: private UnityEngine.TextCore.Text.SpriteAsset m_DefaultSpriteAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::SpriteAsset*& dyn_m_DefaultSpriteAsset();
    // Get instance field reference: private System.Boolean m_TintSprite
    [[deprecated("Use field access instead!")]] bool& dyn_m_TintSprite();
    // Get instance field reference: protected UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter m_Ellipsis
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter& dyn_m_Ellipsis();
    // Get instance field reference: protected UnityEngine.TextCore.Text.TextGenerator/SpecialCharacter m_Underline
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter& dyn_m_Underline();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextElementInfo[] m_InternalTextElementInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo>& dyn_m_InternalTextElementInfo();
    // static private UnityEngine.TextCore.Text.TextGenerator GetTextGenerator()
    // Offset: 0x555E314
    static ::UnityEngine::TextCore::Text::TextGenerator* GetTextGenerator();
    // static public System.Void GenerateText(UnityEngine.TextCore.Text.TextGenerationSettings settings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x555EB34
    static void GenerateText(::UnityEngine::TextCore::Text::TextGenerationSettings* settings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // static public UnityEngine.Vector2 GetPreferredValues(UnityEngine.TextCore.Text.TextGenerationSettings settings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x555ED9C
    static ::UnityEngine::Vector2 GetPreferredValues(::UnityEngine::TextCore::Text::TextGenerationSettings* settings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // static public System.Boolean get_isTextTruncated()
    // Offset: 0x555F008
    static bool get_isTextTruncated();
    // private System.Void Prepare(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x555ECA8
    void Prepare(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void GenerateTextMesh(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5556B5C
    void GenerateTextMesh(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void SaveWordWrappingState(ref UnityEngine.TextCore.Text.WordWrapState state, System.Int32 index, System.Int32 count, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x55613E8
    void SaveWordWrappingState(ByRef<::UnityEngine::TextCore::Text::WordWrapState> state, int index, int count, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // protected System.Int32 RestoreWordWrappingState(ref UnityEngine.TextCore.Text.WordWrapState state, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5561744
    int RestoreWordWrappingState(ByRef<::UnityEngine::TextCore::Text::WordWrapState> state, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // protected System.Boolean ValidateHtmlTag(UnityEngine.TextCore.Text.TextProcessingElement[] chars, System.Int32 startIndex, out System.Int32 endIndex, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5561AB0
    bool ValidateHtmlTag(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement> chars, int startIndex, ByRef<int> endIndex, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void SaveGlyphVertexInfo(System.Single padding, System.Single stylePadding, UnityEngine.Color32 vertexColor, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x55662D0
    void SaveGlyphVertexInfo(float padding, float stylePadding, ::UnityEngine::Color32 vertexColor, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void SaveSpriteVertexInfo(UnityEngine.Color32 vertexColor, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5566E14
    void SaveSpriteVertexInfo(::UnityEngine::Color32 vertexColor, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void DrawUnderlineMesh(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single startScale, System.Single endScale, System.Single maxScale, System.Single sdfScale, UnityEngine.Color32 underlineColor, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5567610
    void DrawUnderlineMesh(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float startScale, float endScale, float maxScale, float sdfScale, ::UnityEngine::Color32 underlineColor, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void DrawTextHighlight(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color32 highlightColor, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5568420
    void DrawTextHighlight(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Color32 highlightColor, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // static private System.Void ClearMesh(System.Boolean updateMesh, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x556894C
    static void ClearMesh(bool updateMesh, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // System.Int32 SetArraySizes(UnityEngine.TextCore.Text.TextProcessingElement[] textProcessingArray, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x555FE58
    int SetArraySizes(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement> textProcessingArray, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // UnityEngine.TextCore.Text.TextElement GetTextElement(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, System.UInt32 unicode, UnityEngine.TextCore.Text.FontAsset fontAsset, UnityEngine.TextCore.Text.FontStyles fontStyle, UnityEngine.TextCore.Text.TextFontWeight fontWeight, out System.Boolean isUsingAlternativeTypeface)
    // Offset: 0x5568B18
    ::UnityEngine::TextCore::Text::TextElement* GetTextElement(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, uint unicode, ::UnityEngine::TextCore::Text::FontAsset* fontAsset, ::UnityEngine::TextCore::Text::FontStyles fontStyle, ::UnityEngine::TextCore::Text::TextFontWeight fontWeight, ByRef<bool> isUsingAlternativeTypeface);
    // private System.Void ComputeMarginSize(UnityEngine.Rect rect, UnityEngine.Vector4 margins)
    // Offset: 0x555F078
    void ComputeMarginSize(::UnityEngine::Rect rect, ::UnityEngine::Vector4 margins);
    // protected System.Void GetSpecialCharacters(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings)
    // Offset: 0x555F050
    void GetSpecialCharacters(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings);
    // protected System.Void GetEllipsisSpecialCharacter(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings)
    // Offset: 0x556896C
    void GetEllipsisSpecialCharacter(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings);
    // protected System.Void GetUnderlineSpecialCharacter(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings)
    // Offset: 0x556838C
    void GetUnderlineSpecialCharacter(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings);
    // private UnityEngine.Vector2 GetPreferredValuesInternal(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x555EECC
    ::UnityEngine::Vector2 GetPreferredValuesInternal(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // protected UnityEngine.Vector2 CalculatePreferredValues(ref System.Single fontSize, UnityEngine.Vector2 marginSize, System.Boolean isTextAutoSizingEnabled, UnityEngine.TextCore.Text.TextWrappingMode textWrapMode, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5568EA8
    ::UnityEngine::Vector2 CalculatePreferredValues(ByRef<float> fontSize, ::UnityEngine::Vector2 marginSize, bool isTextAutoSizingEnabled, ::UnityEngine::TextCore::Text::TextWrappingMode textWrapMode, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void PopulateTextBackingArray(System.String sourceText)
    // Offset: 0x555F0E0
    void PopulateTextBackingArray(::StringW sourceText);
    // private System.Void PopulateTextBackingArray(System.String sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0x556B9B4
    void PopulateTextBackingArray(::StringW sourceText, int start, int length);
    // private System.Void PopulateTextProcessingArray(UnityEngine.TextCore.Text.TextGenerationSettings generationSettings)
    // Offset: 0x555F0F8
    void PopulateTextProcessingArray(::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings);
    // private System.Void InsertNewLine(System.Int32 i, System.Single baseScale, System.Single currentElementScale, System.Single currentEmScale, System.Single boldSpacingAdjustment, System.Single characterSpacingAdjustment, System.Single width, System.Single lineGap, ref System.Boolean isMaxVisibleDescenderSet, ref System.Single maxVisibleDescender, UnityEngine.TextCore.Text.TextGenerationSettings generationSettings, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x556BAA8
    void InsertNewLine(int i, float baseScale, float currentElementScale, float currentEmScale, float boldSpacingAdjustment, float characterSpacingAdjustment, float width, float lineGap, ByRef<bool> isMaxVisibleDescenderSet, ByRef<float> maxVisibleDescender, ::UnityEngine::TextCore::Text::TextGenerationSettings* generationSettings, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // protected System.Void DoMissingGlyphCallback(System.UInt32 unicode, System.Int32 stringIndex, UnityEngine.TextCore.Text.FontAsset fontAsset, UnityEngine.TextCore.Text.TextInfo textInfo)
    // Offset: 0x5568E0C
    void DoMissingGlyphCallback(uint unicode, int stringIndex, ::UnityEngine::TextCore::Text::FontAsset* fontAsset, ::UnityEngine::TextCore::Text::TextInfo* textInfo);
    // private System.Void ClearMarkupTagAttributes()
    // Offset: 0x556626C
    void ClearMarkupTagAttributes();
    // public System.Void .ctor()
    // Offset: 0x555E394
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextGenerator*, creationType>()));
    }
  }; // UnityEngine.TextCore.Text.TextGenerator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextGenerator::SpecialCharacter, "UnityEngine.TextCore.Text", "TextGenerator/SpecialCharacter");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetTextGenerator
// Il2CppName: GetTextGenerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::Text::TextGenerator* (*)()>(&UnityEngine::TextCore::Text::TextGenerator::GetTextGenerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetTextGenerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GenerateText
// Il2CppName: GenerateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::GenerateText)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GenerateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::GetPreferredValues)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::get_isTextTruncated
// Il2CppName: get_isTextTruncated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::TextCore::Text::TextGenerator::get_isTextTruncated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "get_isTextTruncated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::Prepare)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GenerateTextMesh
// Il2CppName: GenerateTextMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::GenerateTextMesh)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GenerateTextMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::SaveWordWrappingState
// Il2CppName: SaveWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(ByRef<::UnityEngine::TextCore::Text::WordWrapState>, int, int, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::SaveWordWrappingState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "WordWrapState")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "SaveWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, index, count, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::RestoreWordWrappingState
// Il2CppName: RestoreWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::TextGenerator::*)(ByRef<::UnityEngine::TextCore::Text::WordWrapState>, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::RestoreWordWrappingState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "WordWrapState")->this_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "RestoreWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::ValidateHtmlTag
// Il2CppName: ValidateHtmlTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TextCore::Text::TextGenerator::*)(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement>, int, ByRef<int>, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::ValidateHtmlTag)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextProcessingElement"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "ValidateHtmlTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startIndex, endIndex, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::SaveGlyphVertexInfo
// Il2CppName: SaveGlyphVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(float, float, ::UnityEngine::Color32, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::SaveGlyphVertexInfo)> {
  static const MethodInfo* get() {
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* stylePadding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* vertexColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "SaveGlyphVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{padding, stylePadding, vertexColor, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::SaveSpriteVertexInfo
// Il2CppName: SaveSpriteVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::Color32, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::SaveSpriteVertexInfo)> {
  static const MethodInfo* get() {
    static auto* vertexColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "SaveSpriteVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexColor, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::DrawUnderlineMesh
// Il2CppName: DrawUnderlineMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float, float, ::UnityEngine::Color32, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::DrawUnderlineMesh)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sdfScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* underlineColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "DrawUnderlineMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, startScale, endScale, maxScale, sdfScale, underlineColor, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::DrawTextHighlight
// Il2CppName: DrawTextHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color32, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::DrawTextHighlight)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* highlightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "DrawTextHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, highlightColor, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::ClearMesh)> {
  static const MethodInfo* get() {
    static auto* updateMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMesh, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::SetArraySizes
// Il2CppName: SetArraySizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::TextCore::Text::TextGenerator::*)(::ArrayW<::UnityEngine::TextCore::Text::TextProcessingElement>, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::SetArraySizes)> {
  static const MethodInfo* get() {
    static auto* textProcessingArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextProcessingElement"), 1)->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "SetArraySizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textProcessingArray, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetTextElement
// Il2CppName: GetTextElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextCore::Text::TextElement* (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, uint, ::UnityEngine::TextCore::Text::FontAsset*, ::UnityEngine::TextCore::Text::FontStyles, ::UnityEngine::TextCore::Text::TextFontWeight, ByRef<bool>)>(&UnityEngine::TextCore::Text::TextGenerator::GetTextElement)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "FontAsset")->byval_arg;
    static auto* fontStyle = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "FontStyles")->byval_arg;
    static auto* fontWeight = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextFontWeight")->byval_arg;
    static auto* isUsingAlternativeTypeface = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetTextElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings, unicode, fontAsset, fontStyle, fontWeight, isUsingAlternativeTypeface});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::ComputeMarginSize
// Il2CppName: ComputeMarginSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::Rect, ::UnityEngine::Vector4)>(&UnityEngine::TextCore::Text::TextGenerator::ComputeMarginSize)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* margins = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "ComputeMarginSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, margins});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetSpecialCharacters
// Il2CppName: GetSpecialCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*)>(&UnityEngine::TextCore::Text::TextGenerator::GetSpecialCharacters)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetSpecialCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetEllipsisSpecialCharacter
// Il2CppName: GetEllipsisSpecialCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*)>(&UnityEngine::TextCore::Text::TextGenerator::GetEllipsisSpecialCharacter)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetEllipsisSpecialCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetUnderlineSpecialCharacter
// Il2CppName: GetUnderlineSpecialCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*)>(&UnityEngine::TextCore::Text::TextGenerator::GetUnderlineSpecialCharacter)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetUnderlineSpecialCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::GetPreferredValuesInternal
// Il2CppName: GetPreferredValuesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::GetPreferredValuesInternal)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "GetPreferredValuesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::CalculatePreferredValues
// Il2CppName: CalculatePreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::TextCore::Text::TextGenerator::*)(ByRef<float>, ::UnityEngine::Vector2, bool, ::UnityEngine::TextCore::Text::TextWrappingMode, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::CalculatePreferredValues)> {
  static const MethodInfo* get() {
    static auto* fontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* marginSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* isTextAutoSizingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textWrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextWrappingMode")->byval_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "CalculatePreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontSize, marginSize, isTextAutoSizingEnabled, textWrapMode, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::PopulateTextBackingArray
// Il2CppName: PopulateTextBackingArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::StringW)>(&UnityEngine::TextCore::Text::TextGenerator::PopulateTextBackingArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "PopulateTextBackingArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::PopulateTextBackingArray
// Il2CppName: PopulateTextBackingArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::StringW, int, int)>(&UnityEngine::TextCore::Text::TextGenerator::PopulateTextBackingArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "PopulateTextBackingArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::PopulateTextProcessingArray
// Il2CppName: PopulateTextProcessingArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(::UnityEngine::TextCore::Text::TextGenerationSettings*)>(&UnityEngine::TextCore::Text::TextGenerator::PopulateTextProcessingArray)> {
  static const MethodInfo* get() {
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "PopulateTextProcessingArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generationSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::InsertNewLine
// Il2CppName: InsertNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(int, float, float, float, float, float, float, float, ByRef<bool>, ByRef<float>, ::UnityEngine::TextCore::Text::TextGenerationSettings*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::InsertNewLine)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* baseScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentElementScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentEmScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* boldSpacingAdjustment = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* characterSpacingAdjustment = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineGap = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isMaxVisibleDescenderSet = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* maxVisibleDescender = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* generationSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextGenerationSettings")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "InsertNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, baseScale, currentElementScale, currentEmScale, boldSpacingAdjustment, characterSpacingAdjustment, width, lineGap, isMaxVisibleDescenderSet, maxVisibleDescender, generationSettings, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::DoMissingGlyphCallback
// Il2CppName: DoMissingGlyphCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)(uint, int, ::UnityEngine::TextCore::Text::FontAsset*, ::UnityEngine::TextCore::Text::TextInfo*)>(&UnityEngine::TextCore::Text::TextGenerator::DoMissingGlyphCallback)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "FontAsset")->byval_arg;
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "DoMissingGlyphCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, stringIndex, fontAsset, textInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::ClearMarkupTagAttributes
// Il2CppName: ClearMarkupTagAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextGenerator::*)()>(&UnityEngine::TextCore::Text::TextGenerator::ClearMarkupTagAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextGenerator*), "ClearMarkupTagAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
