// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.TextCore.Text.TextProcessingElementType
#include "UnityEngine/TextCore/Text/TextProcessingElementType.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextProcessingElement
  struct TextProcessingElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextProcessingElement, "UnityEngine.TextCore.Text", "TextProcessingElement");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.TextProcessingElement
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  struct TextProcessingElement/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.TextCore.Text.TextProcessingElementType elementType
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::TextCore::Text::TextProcessingElementType elementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextProcessingElementType) == 0x4);
    // public System.UInt32 unicode
    // Size: 0x4
    // Offset: 0x4
    uint unicode;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 stringIndex
    // Size: 0x4
    // Offset: 0x8
    int stringIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 length
    // Size: 0x4
    // Offset: 0xC
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TextProcessingElement
    constexpr TextProcessingElement(::UnityEngine::TextCore::Text::TextProcessingElementType elementType_ = {}, uint unicode_ = {}, int stringIndex_ = {}, int length_ = {}) noexcept : elementType{elementType_}, unicode{unicode_}, stringIndex{stringIndex_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.TextCore.Text.TextProcessingElementType elementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextProcessingElementType& dyn_elementType();
    // Get instance field reference: public System.UInt32 unicode
    [[deprecated("Use field access instead!")]] uint& dyn_unicode();
    // Get instance field reference: public System.Int32 stringIndex
    [[deprecated("Use field access instead!")]] int& dyn_stringIndex();
    // Get instance field reference: public System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
  }; // UnityEngine.TextCore.Text.TextProcessingElement
  #pragma pack(pop)
  static check_size<sizeof(TextProcessingElement), 12 + sizeof(int)> __UnityEngine_TextCore_Text_TextProcessingElementSizeCheck;
  static_assert(sizeof(TextProcessingElement) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
