// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: SpriteGlyph
  class SpriteGlyph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextCore::Text::SpriteGlyph);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::SpriteGlyph*, "UnityEngine.TextCore.Text", "SpriteGlyph");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextCore.Text.SpriteGlyph
  // [TokenAttribute] Offset: FFFFFFFF
  class SpriteGlyph : public ::UnityEngine::TextCore::Glyph {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.Sprite sprite
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Sprite* sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::Sprite*
    constexpr operator ::UnityEngine::Sprite*() const noexcept {
      return sprite;
    }
    // Get instance field reference: public UnityEngine.Sprite sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_sprite();
    // public System.Void .ctor()
    // Offset: 0x555224C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpriteGlyph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::SpriteGlyph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpriteGlyph*, creationType>()));
    }
  }; // UnityEngine.TextCore.Text.SpriteGlyph
  #pragma pack(pop)
  static check_size<sizeof(SpriteGlyph), 72 + sizeof(::UnityEngine::Sprite*)> __UnityEngine_TextCore_Text_SpriteGlyphSizeCheck;
  static_assert(sizeof(SpriteGlyph) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::SpriteGlyph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
