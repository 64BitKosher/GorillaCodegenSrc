// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextCore.Text.TextElementInfo
#include "UnityEngine/TextCore/Text/TextElementInfo.hpp"
// Including type: UnityEngine.TextCore.Text.WordInfo
#include "UnityEngine/TextCore/Text/WordInfo.hpp"
// Including type: UnityEngine.TextCore.Text.LinkInfo
#include "UnityEngine/TextCore/Text/LinkInfo.hpp"
// Including type: UnityEngine.TextCore.Text.LineInfo
#include "UnityEngine/TextCore/Text/LineInfo.hpp"
// Including type: UnityEngine.TextCore.Text.PageInfo
#include "UnityEngine/TextCore/Text/PageInfo.hpp"
// Including type: UnityEngine.TextCore.Text.MeshInfo
#include "UnityEngine/TextCore/Text/MeshInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextInfo
  class TextInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextCore::Text::TextInfo);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::TextInfo*, "UnityEngine.TextCore.Text", "TextInfo");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x62
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextCore.Text.TextInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class TextInfo : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 characterCount
    // Size: 0x4
    // Offset: 0x10
    int characterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 spriteCount
    // Size: 0x4
    // Offset: 0x14
    int spriteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 spaceCount
    // Size: 0x4
    // Offset: 0x18
    int spaceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wordCount
    // Size: 0x4
    // Offset: 0x1C
    int wordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkCount
    // Size: 0x4
    // Offset: 0x20
    int linkCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lineCount
    // Size: 0x4
    // Offset: 0x24
    int lineCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pageCount
    // Size: 0x4
    // Offset: 0x28
    int pageCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 materialCount
    // Size: 0x4
    // Offset: 0x2C
    int materialCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.TextCore.Text.TextElementInfo[] textElementInfo
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo> textElementInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo>) == 0x8);
    // public UnityEngine.TextCore.Text.WordInfo[] wordInfo
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::TextCore::Text::WordInfo> wordInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::WordInfo>) == 0x8);
    // public UnityEngine.TextCore.Text.LinkInfo[] linkInfo
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::TextCore::Text::LinkInfo> linkInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::LinkInfo>) == 0x8);
    // public UnityEngine.TextCore.Text.LineInfo[] lineInfo
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::TextCore::Text::LineInfo> lineInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::LineInfo>) == 0x8);
    // public UnityEngine.TextCore.Text.PageInfo[] pageInfo
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::TextCore::Text::PageInfo> pageInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::PageInfo>) == 0x8);
    // public UnityEngine.TextCore.Text.MeshInfo[] meshInfo
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::TextCore::Text::MeshInfo> meshInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::TextCore::Text::MeshInfo>) == 0x8);
    // public System.Boolean isDirty
    // Size: 0x1
    // Offset: 0x60
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean hasMultipleColors
    // Size: 0x1
    // Offset: 0x61
    bool hasMultipleColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private UnityEngine.Vector2 s_InfinityVectorPositive
    static ::UnityEngine::Vector2 _get_s_InfinityVectorPositive();
    // Set static field: static private UnityEngine.Vector2 s_InfinityVectorPositive
    static void _set_s_InfinityVectorPositive(::UnityEngine::Vector2 value);
    // Get static field: static private UnityEngine.Vector2 s_InfinityVectorNegative
    static ::UnityEngine::Vector2 _get_s_InfinityVectorNegative();
    // Set static field: static private UnityEngine.Vector2 s_InfinityVectorNegative
    static void _set_s_InfinityVectorNegative(::UnityEngine::Vector2 value);
    // Get instance field reference: public System.Int32 characterCount
    [[deprecated("Use field access instead!")]] int& dyn_characterCount();
    // Get instance field reference: public System.Int32 spriteCount
    [[deprecated("Use field access instead!")]] int& dyn_spriteCount();
    // Get instance field reference: public System.Int32 spaceCount
    [[deprecated("Use field access instead!")]] int& dyn_spaceCount();
    // Get instance field reference: public System.Int32 wordCount
    [[deprecated("Use field access instead!")]] int& dyn_wordCount();
    // Get instance field reference: public System.Int32 linkCount
    [[deprecated("Use field access instead!")]] int& dyn_linkCount();
    // Get instance field reference: public System.Int32 lineCount
    [[deprecated("Use field access instead!")]] int& dyn_lineCount();
    // Get instance field reference: public System.Int32 pageCount
    [[deprecated("Use field access instead!")]] int& dyn_pageCount();
    // Get instance field reference: public System.Int32 materialCount
    [[deprecated("Use field access instead!")]] int& dyn_materialCount();
    // Get instance field reference: public UnityEngine.TextCore.Text.TextElementInfo[] textElementInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::TextElementInfo>& dyn_textElementInfo();
    // Get instance field reference: public UnityEngine.TextCore.Text.WordInfo[] wordInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::WordInfo>& dyn_wordInfo();
    // Get instance field reference: public UnityEngine.TextCore.Text.LinkInfo[] linkInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::LinkInfo>& dyn_linkInfo();
    // Get instance field reference: public UnityEngine.TextCore.Text.LineInfo[] lineInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::LineInfo>& dyn_lineInfo();
    // Get instance field reference: public UnityEngine.TextCore.Text.PageInfo[] pageInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::PageInfo>& dyn_pageInfo();
    // Get instance field reference: public UnityEngine.TextCore.Text.MeshInfo[] meshInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::TextCore::Text::MeshInfo>& dyn_meshInfo();
    // Get instance field reference: public System.Boolean isDirty
    [[deprecated("Use field access instead!")]] bool& dyn_isDirty();
    // Get instance field reference: public System.Boolean hasMultipleColors
    [[deprecated("Use field access instead!")]] bool& dyn_hasMultipleColors();
    // public System.Void .ctor()
    // Offset: 0x5570744
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextInfo*, creationType>()));
    }
    // System.Void Clear()
    // Offset: 0x5572040
    void Clear();
    // System.Void ClearMeshInfo(System.Boolean updateMesh)
    // Offset: 0x55720A0
    void ClearMeshInfo(bool updateMesh);
    // System.Void ClearLineInfo()
    // Offset: 0x5572114
    void ClearLineInfo();
    // System.Void ClearPageInfo()
    // Offset: 0x5572290
    void ClearPageInfo();
    // static System.Void Resize(ref T[] array, System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Resize(ByRef<::ArrayW<T>> array, int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextInfo::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.TextCore.Text", "TextInfo", "Resize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(size)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), size);
    }
    // static System.Void Resize(ref T[] array, System.Int32 size, System.Boolean isBlockAllocated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Resize(ByRef<::ArrayW<T>> array, int size, bool isBlockAllocated) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextCore::Text::TextInfo::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.TextCore.Text", "TextInfo", "Resize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(isBlockAllocated)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), size, isBlockAllocated);
    }
    // static private System.Void .cctor()
    // Offset: 0x5572338
    static void _cctor();
  }; // UnityEngine.TextCore.Text.TextInfo
  #pragma pack(pop)
  static check_size<sizeof(TextInfo), 97 + sizeof(bool)> __UnityEngine_TextCore_Text_TextInfoSizeCheck;
  static_assert(sizeof(TextInfo) == 0x62);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextInfo::*)()>(&UnityEngine::TextCore::Text::TextInfo::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextInfo*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::ClearMeshInfo
// Il2CppName: ClearMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextInfo::*)(bool)>(&UnityEngine::TextCore::Text::TextInfo::ClearMeshInfo)> {
  static const MethodInfo* get() {
    static auto* updateMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextInfo*), "ClearMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::ClearLineInfo
// Il2CppName: ClearLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextInfo::*)()>(&UnityEngine::TextCore::Text::TextInfo::ClearLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextInfo*), "ClearLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::ClearPageInfo
// Il2CppName: ClearPageInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TextCore::Text::TextInfo::*)()>(&UnityEngine::TextCore::Text::TextInfo::ClearPageInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextInfo*), "ClearPageInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::TextInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::TextCore::Text::TextInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::TextInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
