// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontAssetCreationEditorSettings
  struct FontAssetCreationEditorSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::FontAssetCreationEditorSettings, "UnityEngine.TextCore.Text", "FontAssetCreationEditorSettings");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x55
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.FontAssetCreationEditorSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExcludeFromDocsAttribute] Offset: FFFFFFFF
  struct FontAssetCreationEditorSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String sourceFontFileGUID
    // Size: 0x8
    // Offset: 0x0
    ::StringW sourceFontFileGUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 faceIndex
    // Size: 0x4
    // Offset: 0x8
    int faceIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pointSizeSamplingMode
    // Size: 0x4
    // Offset: 0xC
    int pointSizeSamplingMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pointSize
    // Size: 0x4
    // Offset: 0x10
    int pointSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 padding
    // Size: 0x4
    // Offset: 0x14
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 paddingMode
    // Size: 0x4
    // Offset: 0x18
    int paddingMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 packingMode
    // Size: 0x4
    // Offset: 0x1C
    int packingMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 atlasWidth
    // Size: 0x4
    // Offset: 0x20
    int atlasWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 atlasHeight
    // Size: 0x4
    // Offset: 0x24
    int atlasHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 characterSetSelectionMode
    // Size: 0x4
    // Offset: 0x28
    int characterSetSelectionMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: characterSetSelectionMode and: characterSequence
    char __padding9[0x4] = {};
    // public System.String characterSequence
    // Size: 0x8
    // Offset: 0x30
    ::StringW characterSequence;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String referencedFontAssetGUID
    // Size: 0x8
    // Offset: 0x38
    ::StringW referencedFontAssetGUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String referencedTextAssetGUID
    // Size: 0x8
    // Offset: 0x40
    ::StringW referencedTextAssetGUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 fontStyle
    // Size: 0x4
    // Offset: 0x48
    int fontStyle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single fontStyleModifier
    // Size: 0x4
    // Offset: 0x4C
    float fontStyleModifier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 renderMode
    // Size: 0x4
    // Offset: 0x50
    int renderMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean includeFontFeatures
    // Size: 0x1
    // Offset: 0x54
    bool includeFontFeatures;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: FontAssetCreationEditorSettings
    constexpr FontAssetCreationEditorSettings(::StringW sourceFontFileGUID_ = {}, int faceIndex_ = {}, int pointSizeSamplingMode_ = {}, int pointSize_ = {}, int padding_ = {}, int paddingMode_ = {}, int packingMode_ = {}, int atlasWidth_ = {}, int atlasHeight_ = {}, int characterSetSelectionMode_ = {}, ::StringW characterSequence_ = {}, ::StringW referencedFontAssetGUID_ = {}, ::StringW referencedTextAssetGUID_ = {}, int fontStyle_ = {}, float fontStyleModifier_ = {}, int renderMode_ = {}, bool includeFontFeatures_ = {}) noexcept : sourceFontFileGUID{sourceFontFileGUID_}, faceIndex{faceIndex_}, pointSizeSamplingMode{pointSizeSamplingMode_}, pointSize{pointSize_}, padding{padding_}, paddingMode{paddingMode_}, packingMode{packingMode_}, atlasWidth{atlasWidth_}, atlasHeight{atlasHeight_}, characterSetSelectionMode{characterSetSelectionMode_}, characterSequence{characterSequence_}, referencedFontAssetGUID{referencedFontAssetGUID_}, referencedTextAssetGUID{referencedTextAssetGUID_}, fontStyle{fontStyle_}, fontStyleModifier{fontStyleModifier_}, renderMode{renderMode_}, includeFontFeatures{includeFontFeatures_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String sourceFontFileGUID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sourceFontFileGUID();
    // Get instance field reference: public System.Int32 faceIndex
    [[deprecated("Use field access instead!")]] int& dyn_faceIndex();
    // Get instance field reference: public System.Int32 pointSizeSamplingMode
    [[deprecated("Use field access instead!")]] int& dyn_pointSizeSamplingMode();
    // Get instance field reference: public System.Int32 pointSize
    [[deprecated("Use field access instead!")]] int& dyn_pointSize();
    // Get instance field reference: public System.Int32 padding
    [[deprecated("Use field access instead!")]] int& dyn_padding();
    // Get instance field reference: public System.Int32 paddingMode
    [[deprecated("Use field access instead!")]] int& dyn_paddingMode();
    // Get instance field reference: public System.Int32 packingMode
    [[deprecated("Use field access instead!")]] int& dyn_packingMode();
    // Get instance field reference: public System.Int32 atlasWidth
    [[deprecated("Use field access instead!")]] int& dyn_atlasWidth();
    // Get instance field reference: public System.Int32 atlasHeight
    [[deprecated("Use field access instead!")]] int& dyn_atlasHeight();
    // Get instance field reference: public System.Int32 characterSetSelectionMode
    [[deprecated("Use field access instead!")]] int& dyn_characterSetSelectionMode();
    // Get instance field reference: public System.String characterSequence
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterSequence();
    // Get instance field reference: public System.String referencedFontAssetGUID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_referencedFontAssetGUID();
    // Get instance field reference: public System.String referencedTextAssetGUID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_referencedTextAssetGUID();
    // Get instance field reference: public System.Int32 fontStyle
    [[deprecated("Use field access instead!")]] int& dyn_fontStyle();
    // Get instance field reference: public System.Single fontStyleModifier
    [[deprecated("Use field access instead!")]] float& dyn_fontStyleModifier();
    // Get instance field reference: public System.Int32 renderMode
    [[deprecated("Use field access instead!")]] int& dyn_renderMode();
    // Get instance field reference: public System.Boolean includeFontFeatures
    [[deprecated("Use field access instead!")]] bool& dyn_includeFontFeatures();
  }; // UnityEngine.TextCore.Text.FontAssetCreationEditorSettings
  #pragma pack(pop)
  static check_size<sizeof(FontAssetCreationEditorSettings), 84 + sizeof(bool)> __UnityEngine_TextCore_Text_FontAssetCreationEditorSettingsSizeCheck;
  static_assert(sizeof(FontAssetCreationEditorSettings) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
