// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: FontAsset
  class FontAsset;
  // Forward declaring type: SpriteAsset
  class SpriteAsset;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: MaterialReference
  struct MaterialReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextCore::Text::MaterialReference, "UnityEngine.TextCore.Text", "MaterialReference");
// Type namespace: UnityEngine.TextCore.Text
namespace UnityEngine::TextCore::Text {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TextCore.Text.MaterialReference
  // [TokenAttribute] Offset: FFFFFFFF
  struct MaterialReference/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x0
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: index and: fontAsset
    char __padding0[0x4] = {};
    // public UnityEngine.TextCore.Text.FontAsset fontAsset
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::TextCore::Text::FontAsset* fontAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::FontAsset*) == 0x8);
    // public UnityEngine.TextCore.Text.SpriteAsset spriteAsset
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::TextCore::Text::SpriteAsset* spriteAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::SpriteAsset*) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Boolean isDefaultMaterial
    // Size: 0x1
    // Offset: 0x20
    bool isDefaultMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isFallbackMaterial
    // Size: 0x1
    // Offset: 0x21
    bool isFallbackMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFallbackMaterial and: fallbackMaterial
    char __padding5[0x6] = {};
    // public UnityEngine.Material fallbackMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* fallbackMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Single padding
    // Size: 0x4
    // Offset: 0x30
    float padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 referenceCount
    // Size: 0x4
    // Offset: 0x34
    int referenceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MaterialReference
    constexpr MaterialReference(int index_ = {}, ::UnityEngine::TextCore::Text::FontAsset* fontAsset_ = {}, ::UnityEngine::TextCore::Text::SpriteAsset* spriteAsset_ = {}, ::UnityEngine::Material* material_ = {}, bool isDefaultMaterial_ = {}, bool isFallbackMaterial_ = {}, ::UnityEngine::Material* fallbackMaterial_ = {}, float padding_ = {}, int referenceCount_ = {}) noexcept : index{index_}, fontAsset{fontAsset_}, spriteAsset{spriteAsset_}, material{material_}, isDefaultMaterial{isDefaultMaterial_}, isFallbackMaterial{isFallbackMaterial_}, fallbackMaterial{fallbackMaterial_}, padding{padding_}, referenceCount{referenceCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public UnityEngine.TextCore.Text.FontAsset fontAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::FontAsset*& dyn_fontAsset();
    // Get instance field reference: public UnityEngine.TextCore.Text.SpriteAsset spriteAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::SpriteAsset*& dyn_spriteAsset();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public System.Boolean isDefaultMaterial
    [[deprecated("Use field access instead!")]] bool& dyn_isDefaultMaterial();
    // Get instance field reference: public System.Boolean isFallbackMaterial
    [[deprecated("Use field access instead!")]] bool& dyn_isFallbackMaterial();
    // Get instance field reference: public UnityEngine.Material fallbackMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_fallbackMaterial();
    // Get instance field reference: public System.Single padding
    [[deprecated("Use field access instead!")]] float& dyn_padding();
    // Get instance field reference: public System.Int32 referenceCount
    [[deprecated("Use field access instead!")]] int& dyn_referenceCount();
    // public System.Void .ctor(System.Int32 index, UnityEngine.TextCore.Text.FontAsset fontAsset, UnityEngine.TextCore.Text.SpriteAsset spriteAsset, UnityEngine.Material material, System.Single padding)
    // Offset: 0x554F0D0
    MaterialReference(int index, ::UnityEngine::TextCore::Text::FontAsset* fontAsset, ::UnityEngine::TextCore::Text::SpriteAsset* spriteAsset, ::UnityEngine::Material* material, float padding);
    // static public System.Int32 AddMaterialReference(UnityEngine.Material material, UnityEngine.TextCore.Text.FontAsset fontAsset, ref UnityEngine.TextCore.Text.MaterialReference[] materialReferences, System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> materialReferenceIndexLookup)
    // Offset: 0x554F18C
    static int AddMaterialReference(::UnityEngine::Material* material, ::UnityEngine::TextCore::Text::FontAsset* fontAsset, ByRef<::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>> materialReferences, ::System::Collections::Generic::Dictionary_2<int, int>* materialReferenceIndexLookup);
    // static public System.Int32 AddMaterialReference(UnityEngine.Material material, UnityEngine.TextCore.Text.SpriteAsset spriteAsset, ref UnityEngine.TextCore.Text.MaterialReference[] materialReferences, System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> materialReferenceIndexLookup)
    // Offset: 0x554F3BC
    static int AddMaterialReference(::UnityEngine::Material* material, ::UnityEngine::TextCore::Text::SpriteAsset* spriteAsset, ByRef<::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>> materialReferences, ::System::Collections::Generic::Dictionary_2<int, int>* materialReferenceIndexLookup);
  }; // UnityEngine.TextCore.Text.MaterialReference
  #pragma pack(pop)
  static check_size<sizeof(MaterialReference), 52 + sizeof(int)> __UnityEngine_TextCore_Text_MaterialReferenceSizeCheck;
  static_assert(sizeof(MaterialReference) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MaterialReference::MaterialReference
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MaterialReference::AddMaterialReference
// Il2CppName: AddMaterialReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Material*, ::UnityEngine::TextCore::Text::FontAsset*, ByRef<::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>>, ::System::Collections::Generic::Dictionary_2<int, int>*)>(&UnityEngine::TextCore::Text::MaterialReference::AddMaterialReference)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "FontAsset")->byval_arg;
    static auto* materialReferences = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "MaterialReference"), 1)->this_arg;
    static auto* materialReferenceIndexLookup = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MaterialReference), "AddMaterialReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, fontAsset, materialReferences, materialReferenceIndexLookup});
  }
};
// Writing MetadataGetter for method: UnityEngine::TextCore::Text::MaterialReference::AddMaterialReference
// Il2CppName: AddMaterialReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Material*, ::UnityEngine::TextCore::Text::SpriteAsset*, ByRef<::ArrayW<::UnityEngine::TextCore::Text::MaterialReference>>, ::System::Collections::Generic::Dictionary_2<int, int>*)>(&UnityEngine::TextCore::Text::MaterialReference::AddMaterialReference)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* spriteAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "SpriteAsset")->byval_arg;
    static auto* materialReferences = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "MaterialReference"), 1)->this_arg;
    static auto* materialReferenceIndexLookup = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TextCore::Text::MaterialReference), "AddMaterialReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, spriteAsset, materialReferences, materialReferenceIndexLookup});
  }
};
