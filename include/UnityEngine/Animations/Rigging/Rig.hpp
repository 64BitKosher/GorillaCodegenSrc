// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Animations.Rigging.IRigEffectorHolder
#include "UnityEngine/Animations/Rigging/IRigEffectorHolder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: RigEffectorData
  class RigEffectorData;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: Rig
  class Rig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::Rig);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::Rig*, "UnityEngine.Animations.Rigging", "Rig");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.Rig
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class Rig : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::Animations::Rigging::IRigEffectorHolder*/ {
    public:
    public:
    // private System.Single m_Weight
    // Size: 0x4
    // Offset: 0x20
    float m_Weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_Weight and: m_Effectors
    char __padding0[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigEffectorData> m_Effectors
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigEffectorData*>* m_Effectors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigEffectorData*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IRigEffectorHolder
    operator ::UnityEngine::Animations::Rigging::IRigEffectorHolder() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IRigEffectorHolder*>(this);
    }
    // Get instance field reference: private System.Single m_Weight
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigEffectorData> m_Effectors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigEffectorData*>*& dyn_m_Effectors();
    // public System.Single get_weight()
    // Offset: 0x5077528
    float get_weight();
    // public System.Void set_weight(System.Single value)
    // Offset: 0x5077530
    void set_weight(float value);
    // public System.Void .ctor()
    // Offset: 0x507754C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::Rig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rig*, creationType>()));
    }
  }; // UnityEngine.Animations.Rigging.Rig
  #pragma pack(pop)
  static check_size<sizeof(Rig), 40 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigEffectorData*>*)> __UnityEngine_Animations_Rigging_RigSizeCheck;
  static_assert(sizeof(Rig) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Rig::get_weight
// Il2CppName: get_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::Rig::*)()>(&UnityEngine::Animations::Rigging::Rig::get_weight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Rig*), "get_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Rig::set_weight
// Il2CppName: set_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::Rig::*)(float)>(&UnityEngine::Animations::Rigging::Rig::set_weight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Rig*), "set_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Rig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
