// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: BoneRenderer
  class BoneRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::BoneRenderer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::BoneRenderer*, "UnityEngine.Animations.Rigging", "BoneRenderer");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.BoneRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class BoneRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape
    struct BoneShape;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Animations.Rigging.BoneRenderer/BoneShape
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneShape/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoneShape
      constexpr BoneShape(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Line
      static constexpr const int Line = 0;
      // Get static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Line
      static ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape _get_Line();
      // Set static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Line
      static void _set_Line(::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape value);
      // static field const value: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Pyramid
      static constexpr const int Pyramid = 1;
      // Get static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Pyramid
      static ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape _get_Pyramid();
      // Set static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Pyramid
      static void _set_Pyramid(::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape value);
      // static field const value: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Box
      static constexpr const int Box = 2;
      // Get static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Box
      static ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape _get_Box();
      // Set static field: static public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape Box
      static void _set_Box(::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Animations.Rigging.BoneRenderer/BoneShape
    #pragma pack(pop)
    static check_size<sizeof(BoneRenderer::BoneShape), 0 + sizeof(int)> __UnityEngine_Animations_Rigging_BoneRenderer_BoneShapeSizeCheck;
    static_assert(sizeof(BoneRenderer::BoneShape) == 0x4);
    public:
    // public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape boneShape
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape boneShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape) == 0x4);
    // public System.Boolean drawBones
    // Size: 0x1
    // Offset: 0x24
    bool drawBones;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean drawTripods
    // Size: 0x1
    // Offset: 0x25
    bool drawTripods;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: drawTripods and: boneSize
    char __padding2[0x2] = {};
    // public System.Single boneSize
    // Size: 0x4
    // Offset: 0x28
    float boneSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tripodSize
    // Size: 0x4
    // Offset: 0x2C
    float tripodSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color boneColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color boneColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Transform[] m_Transforms
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Transform*> m_Transforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Animations.Rigging.BoneRenderer/BoneShape boneShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape& dyn_boneShape();
    // Get instance field reference: public System.Boolean drawBones
    [[deprecated("Use field access instead!")]] bool& dyn_drawBones();
    // Get instance field reference: public System.Boolean drawTripods
    [[deprecated("Use field access instead!")]] bool& dyn_drawTripods();
    // Get instance field reference: public System.Single boneSize
    [[deprecated("Use field access instead!")]] float& dyn_boneSize();
    // Get instance field reference: public System.Single tripodSize
    [[deprecated("Use field access instead!")]] float& dyn_tripodSize();
    // Get instance field reference: public UnityEngine.Color boneColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_boneColor();
    // Get instance field reference: private UnityEngine.Transform[] m_Transforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_m_Transforms();
    // public UnityEngine.Transform[] get_transforms()
    // Offset: 0x507FF5C
    ::ArrayW<::UnityEngine::Transform*> get_transforms();
    // public System.Void .ctor()
    // Offset: 0x507FF64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoneRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::BoneRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoneRenderer*, creationType>()));
    }
  }; // UnityEngine.Animations.Rigging.BoneRenderer
  #pragma pack(pop)
  static check_size<sizeof(BoneRenderer), 64 + sizeof(::ArrayW<::UnityEngine::Transform*>)> __UnityEngine_Animations_Rigging_BoneRendererSizeCheck;
  static_assert(sizeof(BoneRenderer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::BoneRenderer::BoneShape, "UnityEngine.Animations.Rigging", "BoneRenderer/BoneShape");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BoneRenderer::get_transforms
// Il2CppName: get_transforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (UnityEngine::Animations::Rigging::BoneRenderer::*)()>(&UnityEngine::Animations::Rigging::BoneRenderer::get_transforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::BoneRenderer*), "get_transforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BoneRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
