// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: IRigLayer
  class IRigLayer;
  // Forward declaring type: SyncSceneToStreamLayer
  class SyncSceneToStreamLayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: RigBuilderUtils
  class RigBuilderUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::RigBuilderUtils);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigBuilderUtils*, "UnityEngine.Animations.Rigging", "RigBuilderUtils");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.RigBuilderUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class RigBuilderUtils : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilderUtils::PlayableChain
    struct PlayableChain;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Animations.Rigging.RigBuilderUtils/PlayableChain
    // [TokenAttribute] Offset: FFFFFFFF
    struct PlayableChain/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public UnityEngine.Playables.Playable[] playables
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::UnityEngine::Playables::Playable> playables;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::Playables::Playable>) == 0x8);
      public:
      // Creating value type constructor for type: PlayableChain
      constexpr PlayableChain(::StringW name_ = {}, ::ArrayW<::UnityEngine::Playables::Playable> playables_ = ::ArrayW<::UnityEngine::Playables::Playable>(static_cast<void*>(nullptr))) noexcept : name{name_}, playables{playables_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public UnityEngine.Playables.Playable[] playables
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Playables::Playable>& dyn_playables();
      // public System.Boolean IsValid()
      // Offset: 0x507A5A0
      bool IsValid();
    }; // UnityEngine.Animations.Rigging.RigBuilderUtils/PlayableChain
    #pragma pack(pop)
    static check_size<sizeof(RigBuilderUtils::PlayableChain), 8 + sizeof(::ArrayW<::UnityEngine::Playables::Playable>)> __UnityEngine_Animations_Rigging_RigBuilderUtils_PlayableChainSizeCheck;
    static_assert(sizeof(RigBuilderUtils::PlayableChain) == 0x10);
    // Get static field: static private readonly System.UInt16 k_AnimationOutputPriority
    static uint16_t _get_k_AnimationOutputPriority();
    // Set static field: static private readonly System.UInt16 k_AnimationOutputPriority
    static void _set_k_AnimationOutputPriority(uint16_t value);
    // static public UnityEngine.Playables.Playable[] BuildRigPlayables(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Animations.Rigging.IRigLayer layer)
    // Offset: 0x5079C64
    static ::ArrayW<::UnityEngine::Playables::Playable> BuildRigPlayables(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Animations::Rigging::IRigLayer* layer);
    // static public System.Collections.Generic.IEnumerable`1<UnityEngine.Animations.Rigging.RigBuilderUtils/PlayableChain> BuildPlayables(UnityEngine.Animator animator, UnityEngine.Playables.PlayableGraph graph, System.Collections.Generic.IList`1<UnityEngine.Animations.Rigging.IRigLayer> layers, UnityEngine.Animations.Rigging.SyncSceneToStreamLayer syncSceneToStreamLayer)
    // Offset: 0x50791F8
    static ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Animations::Rigging::RigBuilderUtils::PlayableChain>* BuildPlayables(::UnityEngine::Animator* animator, ::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>* layers, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer* syncSceneToStreamLayer);
    // static public UnityEngine.Playables.PlayableGraph BuildPlayableGraph(UnityEngine.Animator animator, System.Collections.Generic.IList`1<UnityEngine.Animations.Rigging.IRigLayer> layers, UnityEngine.Animations.Rigging.SyncSceneToStreamLayer syncSceneToStreamLayer)
    // Offset: 0x5078180
    static ::UnityEngine::Playables::PlayableGraph BuildPlayableGraph(::UnityEngine::Animator* animator, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>* layers, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer* syncSceneToStreamLayer);
    // static public System.Void BuildPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Animator animator, System.Collections.Generic.IList`1<UnityEngine.Animations.Rigging.IRigLayer> layers, UnityEngine.Animations.Rigging.SyncSceneToStreamLayer syncSceneToStreamLayer)
    // Offset: 0x50783D8
    static void BuildPlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Animator* animator, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>* layers, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer* syncSceneToStreamLayer);
    // static private System.Void .cctor()
    // Offset: 0x507A5C0
    static void _cctor();
  }; // UnityEngine.Animations.Rigging.RigBuilderUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigBuilderUtils::PlayableChain, "UnityEngine.Animations.Rigging", "RigBuilderUtils/PlayableChain");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilderUtils::BuildRigPlayables
// Il2CppName: BuildRigPlayables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Playables::Playable> (*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::Animations::Rigging::IRigLayer*)>(&UnityEngine::Animations::Rigging::RigBuilderUtils::BuildRigPlayables)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "IRigLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilderUtils*), "BuildRigPlayables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, layer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayables
// Il2CppName: BuildPlayables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Animations::Rigging::RigBuilderUtils::PlayableChain>* (*)(::UnityEngine::Animator*, ::UnityEngine::Playables::PlayableGraph, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>*, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer*)>(&UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayables)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* layers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "IRigLayer")})->byval_arg;
    static auto* syncSceneToStreamLayer = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "SyncSceneToStreamLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilderUtils*), "BuildPlayables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, graph, layers, syncSceneToStreamLayer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayableGraph
// Il2CppName: BuildPlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableGraph (*)(::UnityEngine::Animator*, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>*, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer*)>(&UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayableGraph)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* layers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "IRigLayer")})->byval_arg;
    static auto* syncSceneToStreamLayer = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "SyncSceneToStreamLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilderUtils*), "BuildPlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, layers, syncSceneToStreamLayer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayableGraph
// Il2CppName: BuildPlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::Animator*, ::System::Collections::Generic::IList_1<::UnityEngine::Animations::Rigging::IRigLayer*>*, ::UnityEngine::Animations::Rigging::SyncSceneToStreamLayer*)>(&UnityEngine::Animations::Rigging::RigBuilderUtils::BuildPlayableGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* layers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "IRigLayer")})->byval_arg;
    static auto* syncSceneToStreamLayer = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "SyncSceneToStreamLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilderUtils*), "BuildPlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, animator, layers, syncSceneToStreamLayer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilderUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Animations::Rigging::RigBuilderUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilderUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
