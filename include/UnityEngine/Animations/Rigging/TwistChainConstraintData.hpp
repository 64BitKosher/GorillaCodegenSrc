// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IAnimationJobData
#include "UnityEngine/Animations/Rigging/IAnimationJobData.hpp"
// Including type: UnityEngine.Animations.Rigging.ITwistChainConstraintData
#include "UnityEngine/Animations/Rigging/ITwistChainConstraintData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: TwistChainConstraintData
  struct TwistChainConstraintData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::TwistChainConstraintData, "UnityEngine.Animations.Rigging", "TwistChainConstraintData");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.TwistChainConstraintData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TwistChainConstraintData/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IAnimationJobData, public ::UnityEngine::Animations::Rigging::ITwistChainConstraintData*/ {
    public:
    public:
    // private UnityEngine.Transform m_Root
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* m_Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_Tip
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Transform* m_Tip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_RootTarget
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* m_RootTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_TipTarget
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* m_TipTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AnimationCurve m_Curve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* m_Curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Creating value type constructor for type: TwistChainConstraintData
    constexpr TwistChainConstraintData(::UnityEngine::Transform* m_Root_ = {}, ::UnityEngine::Transform* m_Tip_ = {}, ::UnityEngine::Transform* m_RootTarget_ = {}, ::UnityEngine::Transform* m_TipTarget_ = {}, ::UnityEngine::AnimationCurve* m_Curve_ = {}) noexcept : m_Root{m_Root_}, m_Tip{m_Tip_}, m_RootTarget{m_RootTarget_}, m_TipTarget{m_TipTarget_}, m_Curve{m_Curve_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IAnimationJobData
    operator ::UnityEngine::Animations::Rigging::IAnimationJobData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IAnimationJobData*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::ITwistChainConstraintData
    operator ::UnityEngine::Animations::Rigging::ITwistChainConstraintData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::ITwistChainConstraintData*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform m_Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Root();
    // Get instance field reference: private UnityEngine.Transform m_Tip
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Tip();
    // Get instance field reference: private UnityEngine.Transform m_RootTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_RootTarget();
    // Get instance field reference: private UnityEngine.Transform m_TipTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_TipTarget();
    // Get instance field reference: private UnityEngine.AnimationCurve m_Curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_Curve();
    // public UnityEngine.Transform get_root()
    // Offset: 0x50764D4
    ::UnityEngine::Transform* get_root();
    // public System.Void set_root(UnityEngine.Transform value)
    // Offset: 0x50764DC
    void set_root(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_tip()
    // Offset: 0x50764E4
    ::UnityEngine::Transform* get_tip();
    // public System.Void set_tip(UnityEngine.Transform value)
    // Offset: 0x50764EC
    void set_tip(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_rootTarget()
    // Offset: 0x50764F4
    ::UnityEngine::Transform* get_rootTarget();
    // public System.Void set_rootTarget(UnityEngine.Transform value)
    // Offset: 0x50764FC
    void set_rootTarget(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_tipTarget()
    // Offset: 0x5076504
    ::UnityEngine::Transform* get_tipTarget();
    // public System.Void set_tipTarget(UnityEngine.Transform value)
    // Offset: 0x507650C
    void set_tipTarget(::UnityEngine::Transform* value);
    // public UnityEngine.AnimationCurve get_curve()
    // Offset: 0x5076514
    ::UnityEngine::AnimationCurve* get_curve();
    // public System.Void set_curve(UnityEngine.AnimationCurve value)
    // Offset: 0x507651C
    void set_curve(::UnityEngine::AnimationCurve* value);
    // private System.Boolean UnityEngine.Animations.Rigging.IAnimationJobData.IsValid()
    // Offset: 0x5076524
    bool UnityEngine_Animations_Rigging_IAnimationJobData_IsValid();
    // private System.Void UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues()
    // Offset: 0x5076634
    void UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues();
  }; // UnityEngine.Animations.Rigging.TwistChainConstraintData
  #pragma pack(pop)
  static check_size<sizeof(TwistChainConstraintData), 32 + sizeof(::UnityEngine::AnimationCurve*)> __UnityEngine_Animations_Rigging_TwistChainConstraintDataSizeCheck;
  static_assert(sizeof(TwistChainConstraintData) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::get_root
// Il2CppName: get_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::get_root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "get_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::set_root
// Il2CppName: set_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::set_root)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "set_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::get_tip
// Il2CppName: get_tip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::get_tip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "get_tip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::set_tip
// Il2CppName: set_tip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::set_tip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "set_tip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::get_rootTarget
// Il2CppName: get_rootTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::get_rootTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "get_rootTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::set_rootTarget
// Il2CppName: set_rootTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::set_rootTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "set_rootTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::get_tipTarget
// Il2CppName: get_tipTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::get_tipTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "get_tipTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::set_tipTarget
// Il2CppName: set_tipTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::set_tipTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "set_tipTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::get_curve
// Il2CppName: get_curve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::get_curve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "get_curve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::set_curve
// Il2CppName: set_curve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::set_curve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "set_curve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistChainConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistChainConstraintData::*)()>(&UnityEngine::Animations::Rigging::TwistChainConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistChainConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
