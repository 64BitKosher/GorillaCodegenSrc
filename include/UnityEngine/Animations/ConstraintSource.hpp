// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Forward declaring type: ConstraintSource
  struct ConstraintSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::ConstraintSource, "UnityEngine.Animations", "ConstraintSource");
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.ConstraintSource
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct ConstraintSource/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Transform m_SourceTransform
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* m_SourceTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single m_Weight
    // Size: 0x4
    // Offset: 0x8
    float m_Weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: ConstraintSource
    constexpr ConstraintSource(::UnityEngine::Transform* m_SourceTransform_ = {}, float m_Weight_ = {}) noexcept : m_SourceTransform{m_SourceTransform_}, m_Weight{m_Weight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform m_SourceTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_SourceTransform();
    // Get instance field reference: private System.Single m_Weight
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight();
  }; // UnityEngine.Animations.ConstraintSource
  #pragma pack(pop)
  static check_size<sizeof(ConstraintSource), 8 + sizeof(float)> __UnityEngine_Animations_ConstraintSourceSizeCheck;
  static_assert(sizeof(ConstraintSource) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
