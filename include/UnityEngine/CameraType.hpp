// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CameraType
  struct CameraType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::CameraType, "UnityEngine", "CameraType");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.CameraType
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct CameraType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CameraType
    constexpr CameraType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.CameraType Game
    static constexpr const int Game = 1;
    // Get static field: static public UnityEngine.CameraType Game
    static ::UnityEngine::CameraType _get_Game();
    // Set static field: static public UnityEngine.CameraType Game
    static void _set_Game(::UnityEngine::CameraType value);
    // static field const value: static public UnityEngine.CameraType SceneView
    static constexpr const int SceneView = 2;
    // Get static field: static public UnityEngine.CameraType SceneView
    static ::UnityEngine::CameraType _get_SceneView();
    // Set static field: static public UnityEngine.CameraType SceneView
    static void _set_SceneView(::UnityEngine::CameraType value);
    // static field const value: static public UnityEngine.CameraType Preview
    static constexpr const int Preview = 4;
    // Get static field: static public UnityEngine.CameraType Preview
    static ::UnityEngine::CameraType _get_Preview();
    // Set static field: static public UnityEngine.CameraType Preview
    static void _set_Preview(::UnityEngine::CameraType value);
    // static field const value: static public UnityEngine.CameraType VR
    static constexpr const int VR = 8;
    // Get static field: static public UnityEngine.CameraType VR
    static ::UnityEngine::CameraType _get_VR();
    // Set static field: static public UnityEngine.CameraType VR
    static void _set_VR(::UnityEngine::CameraType value);
    // static field const value: static public UnityEngine.CameraType Reflection
    static constexpr const int Reflection = 16;
    // Get static field: static public UnityEngine.CameraType Reflection
    static ::UnityEngine::CameraType _get_Reflection();
    // Set static field: static public UnityEngine.CameraType Reflection
    static void _set_Reflection(::UnityEngine::CameraType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.CameraType
  #pragma pack(pop)
  static check_size<sizeof(CameraType), 0 + sizeof(int)> __UnityEngine_CameraTypeSizeCheck;
  static_assert(sizeof(CameraType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
