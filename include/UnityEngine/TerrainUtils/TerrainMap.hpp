// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.TerrainUtils.TerrainMapStatusCode
#include "UnityEngine/TerrainUtils/TerrainMapStatusCode.hpp"
// Including type: UnityEngine.TerrainUtils.TerrainTileCoord
#include "UnityEngine/TerrainUtils/TerrainTileCoord.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TerrainUtils
namespace UnityEngine::TerrainUtils {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Terrain
  class Terrain;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
}
// Completed forward declares
// Type namespace: UnityEngine.TerrainUtils
namespace UnityEngine::TerrainUtils {
  // Forward declaring type: TerrainMap
  class TerrainMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TerrainUtils::TerrainMap);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TerrainUtils::TerrainMap*, "UnityEngine.TerrainUtils", "TerrainMap");
// Type namespace: UnityEngine.TerrainUtils
namespace UnityEngine::TerrainUtils {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TerrainUtils.TerrainMap
  // [TokenAttribute] Offset: FFFFFFFF
  class TerrainMap : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::TerrainUtils::TerrainMap::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    public:
    // private UnityEngine.Vector3 m_patchSize
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 m_patchSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.TerrainUtils.TerrainMapStatusCode m_errorCode
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::TerrainUtils::TerrainMapStatusCode m_errorCode;
    // Field size check
    static_assert(sizeof(::UnityEngine::TerrainUtils::TerrainMapStatusCode) == 0x4);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.TerrainUtils.TerrainTileCoord,UnityEngine.Terrain> m_terrainTiles
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>* m_terrainTiles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 m_patchSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_patchSize();
    // Get instance field reference: private UnityEngine.TerrainUtils.TerrainMapStatusCode m_errorCode
    [[deprecated("Use field access instead!")]] ::UnityEngine::TerrainUtils::TerrainMapStatusCode& dyn_m_errorCode();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.TerrainUtils.TerrainTileCoord,UnityEngine.Terrain> m_terrainTiles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>*& dyn_m_terrainTiles();
    // public UnityEngine.Terrain GetTerrain(System.Int32 tileX, System.Int32 tileZ)
    // Offset: 0x553F35C
    ::UnityEngine::Terrain* GetTerrain(int tileX, int tileZ);
    // static public UnityEngine.TerrainUtils.TerrainMap CreateFromPlacement(UnityEngine.Terrain originTerrain, System.Predicate`1<UnityEngine.Terrain> filter, System.Boolean fullValidation)
    // Offset: 0x553F3D4
    static ::UnityEngine::TerrainUtils::TerrainMap* CreateFromPlacement(::UnityEngine::Terrain* originTerrain, ::System::Predicate_1<::UnityEngine::Terrain*>* filter, bool fullValidation);
    // static public UnityEngine.TerrainUtils.TerrainMap CreateFromPlacement(UnityEngine.Vector2 gridOrigin, UnityEngine.Vector2 gridSize, System.Predicate`1<UnityEngine.Terrain> filter, System.Boolean fullValidation)
    // Offset: 0x553F688
    static ::UnityEngine::TerrainUtils::TerrainMap* CreateFromPlacement(::UnityEngine::Vector2 gridOrigin, ::UnityEngine::Vector2 gridSize, ::System::Predicate_1<::UnityEngine::Terrain*>* filter, bool fullValidation);
    // public System.Collections.Generic.Dictionary`2<UnityEngine.TerrainUtils.TerrainTileCoord,UnityEngine.Terrain> get_terrainTiles()
    // Offset: 0x553FD74
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>* get_terrainTiles();
    // public System.Void .ctor()
    // Offset: 0x553FA70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TerrainMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TerrainUtils::TerrainMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TerrainMap*, creationType>()));
    }
    // private System.Void AddTerrainInternal(System.Int32 x, System.Int32 z, UnityEngine.Terrain terrain)
    // Offset: 0x553FD7C
    void AddTerrainInternal(int x, int z, ::UnityEngine::Terrain* terrain);
    // private System.Boolean TryToAddTerrain(System.Int32 tileX, System.Int32 tileZ, UnityEngine.Terrain terrain)
    // Offset: 0x553FAFC
    bool TryToAddTerrain(int tileX, int tileZ, ::UnityEngine::Terrain* terrain);
    // private System.Void ValidateTerrain(System.Int32 tileX, System.Int32 tileZ)
    // Offset: 0x553FEA4
    void ValidateTerrain(int tileX, int tileZ);
    // private UnityEngine.TerrainUtils.TerrainMapStatusCode Validate()
    // Offset: 0x553FC10
    ::UnityEngine::TerrainUtils::TerrainMapStatusCode Validate();
  }; // UnityEngine.TerrainUtils.TerrainMap
  #pragma pack(pop)
  static check_size<sizeof(TerrainMap), 32 + sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>*)> __UnityEngine_TerrainUtils_TerrainMapSizeCheck;
  static_assert(sizeof(TerrainMap) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::GetTerrain
// Il2CppName: GetTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Terrain* (UnityEngine::TerrainUtils::TerrainMap::*)(int, int)>(&UnityEngine::TerrainUtils::TerrainMap::GetTerrain)> {
  static const MethodInfo* get() {
    static auto* tileX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tileZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "GetTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileX, tileZ});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::CreateFromPlacement
// Il2CppName: CreateFromPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TerrainUtils::TerrainMap* (*)(::UnityEngine::Terrain*, ::System::Predicate_1<::UnityEngine::Terrain*>*, bool)>(&UnityEngine::TerrainUtils::TerrainMap::CreateFromPlacement)> {
  static const MethodInfo* get() {
    static auto* originTerrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Predicate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")})->byval_arg;
    static auto* fullValidation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "CreateFromPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originTerrain, filter, fullValidation});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::CreateFromPlacement
// Il2CppName: CreateFromPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TerrainUtils::TerrainMap* (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::System::Predicate_1<::UnityEngine::Terrain*>*, bool)>(&UnityEngine::TerrainUtils::TerrainMap::CreateFromPlacement)> {
  static const MethodInfo* get() {
    static auto* gridOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* gridSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Predicate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")})->byval_arg;
    static auto* fullValidation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "CreateFromPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gridOrigin, gridSize, filter, fullValidation});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::get_terrainTiles
// Il2CppName: get_terrainTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::TerrainUtils::TerrainTileCoord, ::UnityEngine::Terrain*>* (UnityEngine::TerrainUtils::TerrainMap::*)()>(&UnityEngine::TerrainUtils::TerrainMap::get_terrainTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "get_terrainTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::AddTerrainInternal
// Il2CppName: AddTerrainInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TerrainUtils::TerrainMap::*)(int, int, ::UnityEngine::Terrain*)>(&UnityEngine::TerrainUtils::TerrainMap::AddTerrainInternal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "AddTerrainInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, terrain});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::TryToAddTerrain
// Il2CppName: TryToAddTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TerrainUtils::TerrainMap::*)(int, int, ::UnityEngine::Terrain*)>(&UnityEngine::TerrainUtils::TerrainMap::TryToAddTerrain)> {
  static const MethodInfo* get() {
    static auto* tileX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tileZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "TryToAddTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileX, tileZ, terrain});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::ValidateTerrain
// Il2CppName: ValidateTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TerrainUtils::TerrainMap::*)(int, int)>(&UnityEngine::TerrainUtils::TerrainMap::ValidateTerrain)> {
  static const MethodInfo* get() {
    static auto* tileX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tileZ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "ValidateTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileX, tileZ});
  }
};
// Writing MetadataGetter for method: UnityEngine::TerrainUtils::TerrainMap::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TerrainUtils::TerrainMapStatusCode (UnityEngine::TerrainUtils::TerrainMap::*)()>(&UnityEngine::TerrainUtils::TerrainMap::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TerrainUtils::TerrainMap*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
