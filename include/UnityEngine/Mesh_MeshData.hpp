// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
  // Skipping declaration: SubMeshDescriptor because it is already included!
  // Skipping declaration: MeshUpdateFlags because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Mesh::MeshData, "UnityEngine", "Mesh/MeshData");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Mesh/MeshData
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: FFFFFFFF
  struct Mesh::MeshData/*, public ::System::ValueType*/ {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: MeshData
    constexpr MeshData(::System::IntPtr m_Ptr_ = {}) noexcept : m_Ptr{m_Ptr_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // static private System.Int32 GetVertexBufferCount(System.IntPtr self)
    // Offset: 0x54A81E8
    static int GetVertexBufferCount(::System::IntPtr self);
    // static private System.IntPtr GetVertexDataPtr(System.IntPtr self, System.Int32 stream)
    // Offset: 0x54A8224
    static ::System::IntPtr GetVertexDataPtr(::System::IntPtr self, int stream);
    // static private System.UInt64 GetVertexDataSize(System.IntPtr self, System.Int32 stream)
    // Offset: 0x54A8268
    static uint64_t GetVertexDataSize(::System::IntPtr self, int stream);
    // static private System.IntPtr GetIndexDataPtr(System.IntPtr self)
    // Offset: 0x54A82AC
    static ::System::IntPtr GetIndexDataPtr(::System::IntPtr self);
    // static private System.UInt64 GetIndexDataSize(System.IntPtr self)
    // Offset: 0x54A82E8
    static uint64_t GetIndexDataSize(::System::IntPtr self);
    // static private System.Void SetVertexBufferParamsFromArray(System.IntPtr self, System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x54A8324
    static void SetVertexBufferParamsFromArray(::System::IntPtr self, int vertexCount, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // static private System.Void SetIndexBufferParamsImpl(System.IntPtr self, System.Int32 indexCount, UnityEngine.Rendering.IndexFormat indexFormat)
    // Offset: 0x54A8378
    static void SetIndexBufferParamsImpl(::System::IntPtr self, int indexCount, ::UnityEngine::Rendering::IndexFormat indexFormat);
    // static private System.Void SetSubMeshCount(System.IntPtr self, System.Int32 count)
    // Offset: 0x54A83CC
    static void SetSubMeshCount(::System::IntPtr self, int count);
    // static private System.Void SetSubMeshImpl(System.IntPtr self, System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A8410
    static void SetSubMeshImpl(::System::IntPtr self, int index, ::UnityEngine::Rendering::SubMeshDescriptor desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Int32 get_vertexBufferCount()
    // Offset: 0x54A84C8
    int get_vertexBufferCount();
    // public Unity.Collections.NativeArray`1<T> GetVertexData(System.Int32 stream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Unity::Collections::NativeArray_1<T> GetVertexData(int stream) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::MeshData::GetVertexData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetVertexData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeArray_1<T>, false>(this, ___generic__method, stream);
    }
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x54A8504
    void SetVertexBufferParams(int vertexCount, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // public System.Void SetIndexBufferParams(System.Int32 indexCount, UnityEngine.Rendering.IndexFormat format)
    // Offset: 0x54A8558
    void SetIndexBufferParams(int indexCount, ::UnityEngine::Rendering::IndexFormat format);
    // public Unity.Collections.NativeArray`1<T> GetIndexData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Unity::Collections::NativeArray_1<T> GetIndexData() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::MeshData::GetIndexData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetIndexData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeArray_1<T>, false>(this, ___generic__method);
    }
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x54A85AC
    void set_subMeshCount(int value);
    // public System.Void SetSubMesh(System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A85F0
    void SetSubMesh(int index, ::UnityEngine::Rendering::SubMeshDescriptor desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // static private System.Void SetSubMeshImpl_Injected(System.IntPtr self, System.Int32 index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A846C
    static void SetSubMeshImpl_Injected(::System::IntPtr self, int index, ByRef<::UnityEngine::Rendering::SubMeshDescriptor> desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
  }; // UnityEngine.Mesh/MeshData
  #pragma pack(pop)
  static check_size<sizeof(Mesh::MeshData), 0 + sizeof(::System::IntPtr)> __UnityEngine_Mesh_MeshDataSizeCheck;
  static_assert(sizeof(Mesh::MeshData) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetVertexBufferCount
// Il2CppName: GetVertexBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&UnityEngine::Mesh::MeshData::GetVertexBufferCount)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "GetVertexBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetVertexDataPtr
// Il2CppName: GetVertexDataPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr, int)>(&UnityEngine::Mesh::MeshData::GetVertexDataPtr)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "GetVertexDataPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetVertexDataSize
// Il2CppName: GetVertexDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::IntPtr, int)>(&UnityEngine::Mesh::MeshData::GetVertexDataSize)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "GetVertexDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetIndexDataPtr
// Il2CppName: GetIndexDataPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr)>(&UnityEngine::Mesh::MeshData::GetIndexDataPtr)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "GetIndexDataPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetIndexDataSize
// Il2CppName: GetIndexDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::IntPtr)>(&UnityEngine::Mesh::MeshData::GetIndexDataSize)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "GetIndexDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetVertexBufferParamsFromArray
// Il2CppName: SetVertexBufferParamsFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::MeshData::SetVertexBufferParamsFromArray)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetVertexBufferParamsFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetIndexBufferParamsImpl
// Il2CppName: SetIndexBufferParamsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ::UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::MeshData::SetIndexBufferParamsImpl)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetIndexBufferParamsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, indexCount, indexFormat});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetSubMeshCount
// Il2CppName: SetSubMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int)>(&UnityEngine::Mesh::MeshData::SetSubMeshCount)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetSubMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetSubMeshImpl
// Il2CppName: SetSubMeshImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ::UnityEngine::Rendering::SubMeshDescriptor, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshData::SetSubMeshImpl)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetSubMeshImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::get_vertexBufferCount
// Il2CppName: get_vertexBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::MeshData::*)()>(&UnityEngine::Mesh::MeshData::get_vertexBufferCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "get_vertexBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetVertexData
// Il2CppName: GetVertexData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetVertexBufferParams
// Il2CppName: SetVertexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshData::*)(int, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::MeshData::SetVertexBufferParams)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetVertexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetIndexBufferParams
// Il2CppName: SetIndexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshData::*)(int, ::UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::MeshData::SetIndexBufferParams)> {
  static const MethodInfo* get() {
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetIndexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexCount, format});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::GetIndexData
// Il2CppName: GetIndexData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::set_subMeshCount
// Il2CppName: set_subMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshData::*)(int)>(&UnityEngine::Mesh::MeshData::set_subMeshCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "set_subMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetSubMesh
// Il2CppName: SetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshData::*)(int, ::UnityEngine::Rendering::SubMeshDescriptor, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshData::SetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshData::SetSubMeshImpl_Injected
// Il2CppName: SetSubMeshImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ByRef<::UnityEngine::Rendering::SubMeshDescriptor>, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshData::SetSubMeshImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshData), "SetSubMeshImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, index, desc, flags});
  }
};
