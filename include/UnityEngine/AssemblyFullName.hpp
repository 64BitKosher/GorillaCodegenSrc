// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.AssemblyVersion
#include "UnityEngine/AssemblyVersion.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AssemblyFullName
  struct AssemblyFullName;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AssemblyFullName, "UnityEngine", "AssemblyFullName");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AssemblyFullName
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct AssemblyFullName/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.AssemblyVersion Version
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::AssemblyVersion Version;
    // Field size check
    static_assert(sizeof(::UnityEngine::AssemblyVersion) == 0x8);
    // public System.String PublicKeyToken
    // Size: 0x8
    // Offset: 0x10
    ::StringW PublicKeyToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Culture
    // Size: 0x8
    // Offset: 0x18
    ::StringW Culture;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: AssemblyFullName
    constexpr AssemblyFullName(::StringW Name_ = {}, ::UnityEngine::AssemblyVersion Version_ = {}, ::StringW PublicKeyToken_ = {}, ::StringW Culture_ = {}) noexcept : Name{Name_}, Version{Version_}, PublicKeyToken{PublicKeyToken_}, Culture{Culture_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public UnityEngine.AssemblyVersion Version
    [[deprecated("Use field access instead!")]] ::UnityEngine::AssemblyVersion& dyn_Version();
    // Get instance field reference: public System.String PublicKeyToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PublicKeyToken();
    // Get instance field reference: public System.String Culture
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Culture();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x54C2968
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54C2A40
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x54C2AC8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.AssemblyFullName
  #pragma pack(pop)
  static check_size<sizeof(AssemblyFullName), 24 + sizeof(::StringW)> __UnityEngine_AssemblyFullNameSizeCheck;
  static_assert(sizeof(AssemblyFullName) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AssemblyFullName::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AssemblyFullName::*)(::Il2CppObject*)>(&UnityEngine::AssemblyFullName::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyFullName), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssemblyFullName::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AssemblyFullName::*)()>(&UnityEngine::AssemblyFullName::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyFullName), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssemblyFullName::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AssemblyFullName::*)()>(&UnityEngine::AssemblyFullName::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyFullName), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
