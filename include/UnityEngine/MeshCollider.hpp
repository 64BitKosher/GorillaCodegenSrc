// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshColliderCookingOptions
  struct MeshColliderCookingOptions;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshCollider
  class MeshCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::MeshCollider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::MeshCollider*, "UnityEngine", "MeshCollider");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.MeshCollider
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class MeshCollider : public ::UnityEngine::Collider {
    public:
    // public UnityEngine.Mesh get_sharedMesh()
    // Offset: 0x5531024
    ::UnityEngine::Mesh* get_sharedMesh();
    // public System.Void set_sharedMesh(UnityEngine.Mesh value)
    // Offset: 0x5531060
    void set_sharedMesh(::UnityEngine::Mesh* value);
    // public System.Boolean get_convex()
    // Offset: 0x55310A4
    bool get_convex();
    // public System.Void set_convex(System.Boolean value)
    // Offset: 0x55310E0
    void set_convex(bool value);
    // public UnityEngine.MeshColliderCookingOptions get_cookingOptions()
    // Offset: 0x5531124
    ::UnityEngine::MeshColliderCookingOptions get_cookingOptions();
    // public System.Void set_cookingOptions(UnityEngine.MeshColliderCookingOptions value)
    // Offset: 0x5531160
    void set_cookingOptions(::UnityEngine::MeshColliderCookingOptions value);
    // public System.Boolean get_smoothSphereCollisions()
    // Offset: 0x55311A4
    bool get_smoothSphereCollisions();
    // public System.Void set_smoothSphereCollisions(System.Boolean value)
    // Offset: 0x55311AC
    void set_smoothSphereCollisions(bool value);
    // public System.Single get_skinWidth()
    // Offset: 0x55311B0
    float get_skinWidth();
    // public System.Void set_skinWidth(System.Single value)
    // Offset: 0x55311B8
    void set_skinWidth(float value);
    // public System.Boolean get_inflateMesh()
    // Offset: 0x55311BC
    bool get_inflateMesh();
    // public System.Void set_inflateMesh(System.Boolean value)
    // Offset: 0x55311C4
    void set_inflateMesh(bool value);
    // public System.Void .ctor()
    // Offset: 0x55311C8
    // Implemented from: UnityEngine.Collider
    // Base method: System.Void Collider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeshCollider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::MeshCollider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeshCollider*, creationType>()));
    }
  }; // UnityEngine.MeshCollider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_sharedMesh
// Il2CppName: get_sharedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_sharedMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_sharedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_sharedMesh
// Il2CppName: set_sharedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(::UnityEngine::Mesh*)>(&UnityEngine::MeshCollider::set_sharedMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_sharedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_convex
// Il2CppName: get_convex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_convex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_convex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_convex
// Il2CppName: set_convex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(bool)>(&UnityEngine::MeshCollider::set_convex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_convex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_cookingOptions
// Il2CppName: get_cookingOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshColliderCookingOptions (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_cookingOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_cookingOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_cookingOptions
// Il2CppName: set_cookingOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(::UnityEngine::MeshColliderCookingOptions)>(&UnityEngine::MeshCollider::set_cookingOptions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshColliderCookingOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_cookingOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_smoothSphereCollisions
// Il2CppName: get_smoothSphereCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_smoothSphereCollisions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_smoothSphereCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_smoothSphereCollisions
// Il2CppName: set_smoothSphereCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(bool)>(&UnityEngine::MeshCollider::set_smoothSphereCollisions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_smoothSphereCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_skinWidth
// Il2CppName: get_skinWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_skinWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_skinWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_skinWidth
// Il2CppName: set_skinWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(float)>(&UnityEngine::MeshCollider::set_skinWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_skinWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::get_inflateMesh
// Il2CppName: get_inflateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::MeshCollider::*)()>(&UnityEngine::MeshCollider::get_inflateMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "get_inflateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::set_inflateMesh
// Il2CppName: set_inflateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::MeshCollider::*)(bool)>(&UnityEngine::MeshCollider::set_inflateMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::MeshCollider*), "set_inflateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::MeshCollider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
