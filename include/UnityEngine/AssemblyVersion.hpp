// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AssemblyVersion
  struct AssemblyVersion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AssemblyVersion, "UnityEngine", "AssemblyVersion");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AssemblyVersion
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  struct AssemblyVersion/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt16 major
    // Size: 0x2
    // Offset: 0x0
    uint16_t major;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 minor
    // Size: 0x2
    // Offset: 0x2
    uint16_t minor;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 build
    // Size: 0x2
    // Offset: 0x4
    uint16_t build;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 revision
    // Size: 0x2
    // Offset: 0x6
    uint16_t revision;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: AssemblyVersion
    constexpr AssemblyVersion(uint16_t major_ = {}, uint16_t minor_ = {}, uint16_t build_ = {}, uint16_t revision_ = {}) noexcept : major{major_}, minor{minor_}, build{build_}, revision{revision_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt16 major
    [[deprecated("Use field access instead!")]] uint16_t& dyn_major();
    // Get instance field reference: public System.UInt16 minor
    [[deprecated("Use field access instead!")]] uint16_t& dyn_minor();
    // Get instance field reference: public System.UInt16 build
    [[deprecated("Use field access instead!")]] uint16_t& dyn_build();
    // Get instance field reference: public System.UInt16 revision
    [[deprecated("Use field access instead!")]] uint16_t& dyn_revision();
    // public override System.String ToString()
    // Offset: 0x54C2654
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x54C2830
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54C28D8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.AssemblyVersion
  #pragma pack(pop)
  static check_size<sizeof(AssemblyVersion), 6 + sizeof(uint16_t)> __UnityEngine_AssemblyVersionSizeCheck;
  static_assert(sizeof(AssemblyVersion) == 0x8);
  // static public System.Boolean op_Equality(UnityEngine.AssemblyVersion lhs, UnityEngine.AssemblyVersion rhs)
  // Offset: 0x54C2624
  bool operator ==(const ::UnityEngine::AssemblyVersion& lhs, const ::UnityEngine::AssemblyVersion& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AssemblyVersion::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AssemblyVersion::*)()>(&UnityEngine::AssemblyVersion::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyVersion), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssemblyVersion::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AssemblyVersion::*)(::Il2CppObject*)>(&UnityEngine::AssemblyVersion::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyVersion), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssemblyVersion::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AssemblyVersion::*)()>(&UnityEngine::AssemblyVersion::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssemblyVersion), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssemblyVersion::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
