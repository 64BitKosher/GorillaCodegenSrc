// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TransformDispatchData
  struct TransformDispatchData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TransformDispatchData, "UnityEngine", "TransformDispatchData");
// Type namespace: UnityEngine
namespace UnityEngine {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TransformDispatchData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransformDispatchData/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<System.Int32> transformedID
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<int> transformedID;
    // public Unity.Collections.NativeArray`1<System.Int32> parentID
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<int> parentID;
    // public Unity.Collections.NativeArray`1<UnityEngine.Matrix4x4> localToWorldMatrices
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> localToWorldMatrices;
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> positions;
    // public Unity.Collections.NativeArray`1<UnityEngine.Quaternion> rotations
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion> rotations;
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> scales
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> scales;
    public:
    // Creating value type constructor for type: TransformDispatchData
    constexpr TransformDispatchData(::Unity::Collections::NativeArray_1<int> transformedID_ = {}, ::Unity::Collections::NativeArray_1<int> parentID_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> localToWorldMatrices_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> positions_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion> rotations_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> scales_ = {}) noexcept : transformedID{transformedID_}, parentID{parentID_}, localToWorldMatrices{localToWorldMatrices_}, positions{positions_}, rotations{rotations_}, scales{scales_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> transformedID
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_transformedID();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> parentID
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_parentID();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Matrix4x4> localToWorldMatrices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4>& dyn_localToWorldMatrices();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_positions();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Quaternion> rotations
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion>& dyn_rotations();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> scales
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_scales();
    // public System.Void Dispose()
    // Offset: 0x54BEA28
    void Dispose();
  }; // UnityEngine.TransformDispatchData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TransformDispatchData::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TransformDispatchData::*)()>(&UnityEngine::TransformDispatchData::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TransformDispatchData), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
