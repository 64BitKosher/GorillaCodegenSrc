// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: GraphicsFormat
  struct GraphicsFormat;
  // Forward declaring type: FormatUsage
  struct FormatUsage;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: TextureDimension
  struct TextureDimension;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextureWrapMode
  struct TextureWrapMode;
  // Forward declaring type: FilterMode
  struct FilterMode;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: ColorSpace
  struct ColorSpace;
  // Forward declaring type: TextureFormat
  struct TextureFormat;
  // Forward declaring type: UnityException
  class UnityException;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Texture);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Texture*, "UnityEngine", "Texture");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Texture
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class Texture : public ::UnityEngine::Object {
    public:
    // Get static field: static public readonly System.Int32 GenerateAllMips
    static int _get_GenerateAllMips();
    // Set static field: static public readonly System.Int32 GenerateAllMips
    static void _set_GenerateAllMips(int value);
    // public System.Int32 get_mipmapCount()
    // Offset: 0x54A8E2C
    int get_mipmapCount();
    // public UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat()
    // Offset: 0x54A8E68
    ::UnityEngine::Experimental::Rendering::GraphicsFormat get_graphicsFormat();
    // private System.Int32 GetDataWidth()
    // Offset: 0x54A8EC0
    int GetDataWidth();
    // private System.Int32 GetDataHeight()
    // Offset: 0x54A8EFC
    int GetDataHeight();
    // private UnityEngine.Rendering.TextureDimension GetDimension()
    // Offset: 0x54A8F38
    ::UnityEngine::Rendering::TextureDimension GetDimension();
    // public System.Int32 get_width()
    // Offset: 0x54A8F74
    int get_width();
    // public System.Void set_width(System.Int32 value)
    // Offset: 0x54A8FB0
    void set_width(int value);
    // public System.Int32 get_height()
    // Offset: 0x54A8FE8
    int get_height();
    // public System.Void set_height(System.Int32 value)
    // Offset: 0x54A9024
    void set_height(int value);
    // public UnityEngine.Rendering.TextureDimension get_dimension()
    // Offset: 0x54A905C
    ::UnityEngine::Rendering::TextureDimension get_dimension();
    // public System.Void set_dimension(UnityEngine.Rendering.TextureDimension value)
    // Offset: 0x54A9098
    void set_dimension(::UnityEngine::Rendering::TextureDimension value);
    // public System.Boolean get_isReadable()
    // Offset: 0x54A90D0
    bool get_isReadable();
    // public UnityEngine.TextureWrapMode get_wrapMode()
    // Offset: 0x54A910C
    ::UnityEngine::TextureWrapMode get_wrapMode();
    // public System.Void set_wrapMode(UnityEngine.TextureWrapMode value)
    // Offset: 0x54A9148
    void set_wrapMode(::UnityEngine::TextureWrapMode value);
    // public System.Void set_wrapModeU(UnityEngine.TextureWrapMode value)
    // Offset: 0x54A918C
    void set_wrapModeU(::UnityEngine::TextureWrapMode value);
    // public System.Void set_wrapModeV(UnityEngine.TextureWrapMode value)
    // Offset: 0x54A91D0
    void set_wrapModeV(::UnityEngine::TextureWrapMode value);
    // public System.Void set_wrapModeW(UnityEngine.TextureWrapMode value)
    // Offset: 0x54A9214
    void set_wrapModeW(::UnityEngine::TextureWrapMode value);
    // public UnityEngine.FilterMode get_filterMode()
    // Offset: 0x54A9258
    ::UnityEngine::FilterMode get_filterMode();
    // public System.Void set_filterMode(UnityEngine.FilterMode value)
    // Offset: 0x54A9294
    void set_filterMode(::UnityEngine::FilterMode value);
    // public System.Int32 get_anisoLevel()
    // Offset: 0x54A92D8
    int get_anisoLevel();
    // public System.Void set_anisoLevel(System.Int32 value)
    // Offset: 0x54A9314
    void set_anisoLevel(int value);
    // public System.Single get_mipMapBias()
    // Offset: 0x54A9358
    float get_mipMapBias();
    // public System.Void set_mipMapBias(System.Single value)
    // Offset: 0x54A9394
    void set_mipMapBias(float value);
    // public UnityEngine.Vector2 get_texelSize()
    // Offset: 0x54A93E0
    ::UnityEngine::Vector2 get_texelSize();
    // public System.IntPtr GetNativeTexturePtr()
    // Offset: 0x54A9470
    ::System::IntPtr GetNativeTexturePtr();
    // public System.UInt32 get_updateCount()
    // Offset: 0x54A94AC
    uint get_updateCount();
    // private System.Int32 Internal_GetActiveTextureColorSpace()
    // Offset: 0x54A94E8
    int Internal_GetActiveTextureColorSpace();
    // UnityEngine.ColorSpace get_activeTextureColorSpace()
    // Offset: 0x54A9524
    ::UnityEngine::ColorSpace get_activeTextureColorSpace();
    // System.UInt64 GetPixelDataSize(System.Int32 mipLevel, System.Int32 element)
    // Offset: 0x54A956C
    uint64_t GetPixelDataSize(int mipLevel, int element);
    // System.UInt64 GetPixelDataOffset(System.Int32 mipLevel, System.Int32 element)
    // Offset: 0x54A95C0
    uint64_t GetPixelDataOffset(int mipLevel, int element);
    // System.Boolean ValidateFormat(UnityEngine.TextureFormat format)
    // Offset: 0x54A9614
    bool ValidateFormat(::UnityEngine::TextureFormat format);
    // System.Boolean ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x54A97DC
    bool ValidateFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::FormatUsage usage);
    // UnityEngine.UnityException CreateNonReadableException(UnityEngine.Texture t)
    // Offset: 0x54A999C
    ::UnityEngine::UnityException* CreateNonReadableException(::UnityEngine::Texture* t);
    // UnityEngine.UnityException CreateNativeArrayLengthOverflowException()
    // Offset: 0x54A9A3C
    ::UnityEngine::UnityException* CreateNativeArrayLengthOverflowException();
    // private System.Void get_texelSize_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x54A942C
    void get_texelSize_Injected(ByRef<::UnityEngine::Vector2> ret);
    // protected System.Void .ctor()
    // Offset: 0x54A8DD4
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x54A9AA8
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.Texture
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Texture::get_mipmapCount
// Il2CppName: get_mipmapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_mipmapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_mipmapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_graphicsFormat
// Il2CppName: get_graphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_graphicsFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_graphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetDataWidth
// Il2CppName: GetDataWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::GetDataWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetDataWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetDataHeight
// Il2CppName: GetDataHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::GetDataHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetDataHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetDimension
// Il2CppName: GetDimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::TextureDimension (UnityEngine::Texture::*)()>(&UnityEngine::Texture::GetDimension)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetDimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(int)>(&UnityEngine::Texture::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_height
// Il2CppName: set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(int)>(&UnityEngine::Texture::set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_dimension
// Il2CppName: get_dimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::TextureDimension (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_dimension)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_dimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_dimension
// Il2CppName: set_dimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::Rendering::TextureDimension)>(&UnityEngine::Texture::set_dimension)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_dimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_isReadable
// Il2CppName: get_isReadable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_isReadable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_isReadable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_wrapMode
// Il2CppName: get_wrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextureWrapMode (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_wrapMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_wrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_wrapMode
// Il2CppName: set_wrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::TextureWrapMode)>(&UnityEngine::Texture::set_wrapMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_wrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_wrapModeU
// Il2CppName: set_wrapModeU
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::TextureWrapMode)>(&UnityEngine::Texture::set_wrapModeU)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_wrapModeU", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_wrapModeV
// Il2CppName: set_wrapModeV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::TextureWrapMode)>(&UnityEngine::Texture::set_wrapModeV)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_wrapModeV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_wrapModeW
// Il2CppName: set_wrapModeW
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::TextureWrapMode)>(&UnityEngine::Texture::set_wrapModeW)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_wrapModeW", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_filterMode
// Il2CppName: get_filterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_filterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_filterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_filterMode
// Il2CppName: set_filterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(::UnityEngine::FilterMode)>(&UnityEngine::Texture::set_filterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_filterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_anisoLevel
// Il2CppName: get_anisoLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_anisoLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_anisoLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_anisoLevel
// Il2CppName: set_anisoLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(int)>(&UnityEngine::Texture::set_anisoLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_anisoLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_mipMapBias
// Il2CppName: get_mipMapBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_mipMapBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_mipMapBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::set_mipMapBias
// Il2CppName: set_mipMapBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(float)>(&UnityEngine::Texture::set_mipMapBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "set_mipMapBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_texelSize
// Il2CppName: get_texelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_texelSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_texelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetNativeTexturePtr
// Il2CppName: GetNativeTexturePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Texture::*)()>(&UnityEngine::Texture::GetNativeTexturePtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetNativeTexturePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_updateCount
// Il2CppName: get_updateCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_updateCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_updateCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::Internal_GetActiveTextureColorSpace
// Il2CppName: Internal_GetActiveTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture::*)()>(&UnityEngine::Texture::Internal_GetActiveTextureColorSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "Internal_GetActiveTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_activeTextureColorSpace
// Il2CppName: get_activeTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ColorSpace (UnityEngine::Texture::*)()>(&UnityEngine::Texture::get_activeTextureColorSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_activeTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetPixelDataSize
// Il2CppName: GetPixelDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityEngine::Texture::*)(int, int)>(&UnityEngine::Texture::GetPixelDataSize)> {
  static const MethodInfo* get() {
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetPixelDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mipLevel, element});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::GetPixelDataOffset
// Il2CppName: GetPixelDataOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityEngine::Texture::*)(int, int)>(&UnityEngine::Texture::GetPixelDataOffset)> {
  static const MethodInfo* get() {
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "GetPixelDataOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mipLevel, element});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::ValidateFormat
// Il2CppName: ValidateFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture::*)(::UnityEngine::TextureFormat)>(&UnityEngine::Texture::ValidateFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "ValidateFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::ValidateFormat
// Il2CppName: ValidateFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture::*)(::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::Texture::ValidateFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "ValidateFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::CreateNonReadableException
// Il2CppName: CreateNonReadableException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UnityException* (UnityEngine::Texture::*)(::UnityEngine::Texture*)>(&UnityEngine::Texture::CreateNonReadableException)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "CreateNonReadableException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::CreateNativeArrayLengthOverflowException
// Il2CppName: CreateNativeArrayLengthOverflowException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UnityException* (UnityEngine::Texture::*)()>(&UnityEngine::Texture::CreateNativeArrayLengthOverflowException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "CreateNativeArrayLengthOverflowException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::get_texelSize_Injected
// Il2CppName: get_texelSize_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Texture::get_texelSize_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), "get_texelSize_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Texture::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
